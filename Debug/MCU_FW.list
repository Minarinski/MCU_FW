
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800af98  0800af98  0001af98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5b8  0800b5b8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5b8  0800b5b8  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5b8  0800b5b8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800b5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002548  20000200  0800b7bc  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002748  0800b7bc  00022748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5fe  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec0  00000000  00000000  0002c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f5  00000000  00000000  0002f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001829f  00000000  00000000  0002fb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e67d  00000000  00000000  00047e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087119  00000000  00000000  000564b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004600  00000000  00000000  000dd5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e1bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af7c 	.word	0x0800af7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800af7c 	.word	0x0800af7c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc37 	bl	80009d0 <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9ad 	bl	80004ec <__aeabi_dmul>
 8001192:	f7ff fc83 	bl	8000a9c <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f92e 	bl	80003f8 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f9a4 	bl	80004ec <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffe6 	bl	800017c <__aeabi_dsub>
 80011b0:	f7ff fc74 	bl	8000a9c <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
    oldPos = newPos; //keep track of the last position in the buffer
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d2:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	4413      	add	r3, r2
 80011de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e2:	dd22      	ble.n	800122a <HAL_UARTEx_RxEventCallback+0x6a>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011ec:	81fb      	strh	r3, [r7, #14]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 80011f6:	4413      	add	r3, r2
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	4920      	ldr	r1, [pc, #128]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 fcd8 	bl	8008bb2 <memcpy>

        oldPos = 0;  // point to the start of the buffer
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 800120c:	1899      	adds	r1, r3, r2
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001218:	f007 fccb 	bl	8008bb2 <memcpy>
        newPos = (Size-datatocopy);  // update the position
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	e010      	b.n	800124c <HAL_UARTEx_RxEventCallback+0x8c>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001232:	4413      	add	r3, r2
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	4911      	ldr	r1, [pc, #68]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fcba 	bl	8008bb2 <memcpy>
        newPos = Size+oldPos; //update buffer position
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	4413      	add	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 800124a:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	490b      	ldr	r1, [pc, #44]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001252:	f004 fcfd 	bl	8005c50 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); //disable the half transfer interrupt
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_UARTEx_RxEventCallback+0xc4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002178 	.word	0x20002178
 8001274:	20002176 	.word	0x20002176
 8001278:	200021bc 	.word	0x200021bc
 800127c:	2000217c 	.word	0x2000217c
 8001280:	20000300 	.word	0x20000300
 8001284:	20000348 	.word	0x20000348

08001288 <LCD_SendInternal>:

//LCD ============================================
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	460b      	mov	r3, r1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	b299      	uxth	r1, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2201      	movs	r2, #1
 80012a4:	4822      	ldr	r0, [pc, #136]	; (8001330 <LCD_SendInternal+0xa8>)
 80012a6:	f003 fc43 	bl	8004b30 <HAL_I2C_IsDeviceReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d000      	beq.n	80012b6 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80012b4:	e7f1      	b.n	800129a <LCD_SendInternal+0x12>
			break;
 80012b6:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f043 030c 	orr.w	r3, r3, #12
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | LCD_BACKLIGHT;
 80012d6:	7bba      	ldrb	r2, [r7, #14]
 80012d8:	797b      	ldrb	r3, [r7, #5]
 80012da:	4313      	orrs	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012e6:	7b7a      	ldrb	r2, [r7, #13]
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f043 030c 	orr.w	r3, r3, #12
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | LCD_BACKLIGHT;
 80012f6:	7b7a      	ldrb	r2, [r7, #13]
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	b299      	uxth	r1, r3
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2304      	movs	r3, #4
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <LCD_SendInternal+0xa8>)
 8001318:	f003 fb0c 	bl	8004934 <HAL_I2C_Master_Transmit>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001320:	2005      	movs	r0, #5
 8001322:	f002 fc0b 	bl	8003b3c <HAL_Delay>
	return res;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000021c 	.word	0x2000021c

08001334 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2200      	movs	r2, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff9c 	bl	8001288 <LCD_SendInternal>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8001368:	79b9      	ldrb	r1, [r7, #6]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2201      	movs	r2, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff8a 	bl	8001288 <LCD_SendInternal>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0x30);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2130      	movs	r1, #48	; 0x30
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffd2 	bl	8001334 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0x02);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffcd 	bl	8001334 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	210c      	movs	r1, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffc8 	bl	8001334 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffc3 	bl	8001334 <LCD_SendCommand>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	6039      	str	r1, [r7, #0]
 80013c0:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80013c2:	e009      	b.n	80013d8 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffc3 	bl	8001358 <LCD_SendData>
		str++;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f1      	bne.n	80013c4 <LCD_SendString+0xe>
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	603a      	str	r2, [r7, #0]
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	460b      	mov	r3, r1
 80013f8:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001404:	b25b      	sxtb	r3, r3
 8001406:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8001408:	7afa      	ldrb	r2, [r7, #11]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff90 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e00b      	b.n	8001432 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff96 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b07      	cmp	r3, #7
 8001436:	ddf0      	ble.n	800141a <LCD_SET_CGRAM+0x30>
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <LCD_Write_Info>:

void LCD_Write_Info(struct DataFlash nowData, struct DataFlash nextData) {
 8001442:	b084      	sub	sp, #16
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	f107 0c10 	add.w	ip, r7, #16
 800144e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8001452:	2101      	movs	r1, #1
 8001454:	204e      	movs	r0, #78	; 0x4e
 8001456:	f7ff ff6d 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	204e      	movs	r0, #78	; 0x4e
 800145e:	f7ff ff69 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 8001462:	f107 0315 	add.w	r3, r7, #21
 8001466:	4619      	mov	r1, r3
 8001468:	204e      	movs	r0, #78	; 0x4e
 800146a:	f7ff ffa4 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	204e      	movs	r0, #78	; 0x4e
 8001472:	f7ff ff71 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e006      	b.n	800148a <LCD_Write_Info+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800147c:	2114      	movs	r1, #20
 800147e:	204e      	movs	r0, #78	; 0x4e
 8001480:	f7ff ff58 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0a      	cmp	r3, #10
 800148e:	ddf5      	ble.n	800147c <LCD_Write_Info+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001490:	2101      	movs	r1, #1
 8001492:	204e      	movs	r0, #78	; 0x4e
 8001494:	f7ff ff60 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001498:	21c0      	movs	r1, #192	; 0xc0
 800149a:	204e      	movs	r0, #78	; 0x4e
 800149c:	f7ff ff4a 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 80014a0:	2103      	movs	r1, #3
 80014a2:	204e      	movs	r0, #78	; 0x4e
 80014a4:	f7ff ff58 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 80014a8:	f107 031a 	add.w	r3, r7, #26
 80014ac:	4619      	mov	r1, r3
 80014ae:	204e      	movs	r0, #78	; 0x4e
 80014b0:	f7ff ff81 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 80014b4:	2103      	movs	r1, #3
 80014b6:	204e      	movs	r0, #78	; 0x4e
 80014b8:	f7ff ff4e 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014bc:	2103      	movs	r1, #3
 80014be:	204e      	movs	r0, #78	; 0x4e
 80014c0:	f7ff ff4a 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014c4:	2103      	movs	r1, #3
 80014c6:	204e      	movs	r0, #78	; 0x4e
 80014c8:	f7ff ff46 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nextData.busStopID);
 80014cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014d0:	330a      	adds	r3, #10
 80014d2:	4619      	mov	r1, r3
 80014d4:	204e      	movs	r0, #78	; 0x4e
 80014d6:	f7ff ff6e 	bl	80013b6 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	e006      	b.n	80014ee <LCD_Write_Info+0xac>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80014e0:	2114      	movs	r1, #20
 80014e2:	204e      	movs	r0, #78	; 0x4e
 80014e4:	f7ff ff26 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	ddf5      	ble.n	80014e0 <LCD_Write_Info+0x9e>
	}
	LCD_SendData(LCD_ADDR, 1);
 80014f4:	2101      	movs	r1, #1
 80014f6:	204e      	movs	r0, #78	; 0x4e
 80014f8:	f7ff ff2e 	bl	8001358 <LCD_SendData>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001506:	b004      	add	sp, #16
 8001508:	4770      	bx	lr
	...

0800150c <updateLCD>:

void updateLCD() {
 800150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001510:	b096      	sub	sp, #88	; 0x58
 8001512:	af16      	add	r7, sp, #88	; 0x58
	LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <updateLCD+0xac>)
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <updateLCD+0xac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4827      	ldr	r0, [pc, #156]	; (80015bc <updateLCD+0xb0>)
 8001520:	460b      	mov	r3, r1
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	440b      	add	r3, r1
 8001526:	0119      	lsls	r1, r3, #4
 8001528:	440b      	add	r3, r1
 800152a:	18c4      	adds	r4, r0, r3
 800152c:	4923      	ldr	r1, [pc, #140]	; (80015bc <updateLCD+0xb0>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	011a      	lsls	r2, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	440b      	add	r3, r1
 800153a:	461d      	mov	r5, r3
 800153c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8001540:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001544:	4666      	mov	r6, ip
 8001546:	462b      	mov	r3, r5
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001552:	3510      	adds	r5, #16
 8001554:	f10c 0c10 	add.w	ip, ip, #16
 8001558:	4575      	cmp	r5, lr
 800155a:	d1f3      	bne.n	8001544 <updateLCD+0x38>
 800155c:	4663      	mov	r3, ip
 800155e:	462a      	mov	r2, r5
 8001560:	8811      	ldrh	r1, [r2, #0]
 8001562:	7892      	ldrb	r2, [r2, #2]
 8001564:	8019      	strh	r1, [r3, #0]
 8001566:	709a      	strb	r2, [r3, #2]
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	469a      	mov	sl, r3
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	4699      	mov	r9, r3
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	4698      	mov	r8, r3
 8001574:	68e3      	ldr	r3, [r4, #12]
 8001576:	469e      	mov	lr, r3
 8001578:	3410      	adds	r4, #16
 800157a:	466e      	mov	r6, sp
 800157c:	f104 0c20 	add.w	ip, r4, #32
 8001580:	4635      	mov	r5, r6
 8001582:	4623      	mov	r3, r4
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158e:	3410      	adds	r4, #16
 8001590:	3610      	adds	r6, #16
 8001592:	4564      	cmp	r4, ip
 8001594:	d1f4      	bne.n	8001580 <updateLCD+0x74>
 8001596:	4633      	mov	r3, r6
 8001598:	4622      	mov	r2, r4
 800159a:	8811      	ldrh	r1, [r2, #0]
 800159c:	7892      	ldrb	r2, [r2, #2]
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	709a      	strb	r2, [r3, #2]
 80015a2:	4650      	mov	r0, sl
 80015a4:	4649      	mov	r1, r9
 80015a6:	4642      	mov	r2, r8
 80015a8:	4673      	mov	r3, lr
 80015aa:	f7ff ff4a 	bl	8001442 <LCD_Write_Info>
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015b6:	bf00      	nop
 80015b8:	20002170 	.word	0x20002170
 80015bc:	2000038c 	.word	0x2000038c

080015c0 <LCD_Write_Arrive>:

void LCD_Write_Arrive(struct DataFlash nowData) {
 80015c0:	b084      	sub	sp, #16
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	f107 0c10 	add.w	ip, r7, #16
 80015cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 80015d0:	2101      	movs	r1, #1
 80015d2:	204e      	movs	r0, #78	; 0x4e
 80015d4:	f7ff feae 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	204e      	movs	r0, #78	; 0x4e
 80015dc:	f7ff feaa 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 80015e0:	f107 0315 	add.w	r3, r7, #21
 80015e4:	4619      	mov	r1, r3
 80015e6:	204e      	movs	r0, #78	; 0x4e
 80015e8:	f7ff fee5 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	204e      	movs	r0, #78	; 0x4e
 80015f0:	f7ff feb2 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	e006      	b.n	8001608 <LCD_Write_Arrive+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80015fa:	2114      	movs	r1, #20
 80015fc:	204e      	movs	r0, #78	; 0x4e
 80015fe:	f7ff fe99 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b0a      	cmp	r3, #10
 800160c:	ddf5      	ble.n	80015fa <LCD_Write_Arrive+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 800160e:	2101      	movs	r1, #1
 8001610:	204e      	movs	r0, #78	; 0x4e
 8001612:	f7ff fea1 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001616:	21c0      	movs	r1, #192	; 0xc0
 8001618:	204e      	movs	r0, #78	; 0x4e
 800161a:	f7ff fe8b 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 800161e:	2103      	movs	r1, #3
 8001620:	204e      	movs	r0, #78	; 0x4e
 8001622:	f7ff fe99 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8001626:	2103      	movs	r1, #3
 8001628:	204e      	movs	r0, #78	; 0x4e
 800162a:	f7ff fe95 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 800162e:	2103      	movs	r1, #3
 8001630:	204e      	movs	r0, #78	; 0x4e
 8001632:	f7ff fe91 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 8001636:	f107 031a 	add.w	r3, r7, #26
 800163a:	4619      	mov	r1, r3
 800163c:	204e      	movs	r0, #78	; 0x4e
 800163e:	f7ff feba 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 4);
 8001642:	2104      	movs	r1, #4
 8001644:	204e      	movs	r0, #78	; 0x4e
 8001646:	f7ff fe87 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 800164a:	2104      	movs	r1, #4
 800164c:	204e      	movs	r0, #78	; 0x4e
 800164e:	f7ff fe83 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 8001652:	2104      	movs	r1, #4
 8001654:	204e      	movs	r0, #78	; 0x4e
 8001656:	f7ff fe7f 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 4; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	e006      	b.n	800166e <LCD_Write_Arrive+0xae>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8001660:	2114      	movs	r1, #20
 8001662:	204e      	movs	r0, #78	; 0x4e
 8001664:	f7ff fe66 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 4; i++) {
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	ddf5      	ble.n	8001660 <LCD_Write_Arrive+0xa0>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001674:	2101      	movs	r1, #1
 8001676:	204e      	movs	r0, #78	; 0x4e
 8001678:	f7ff fe6e 	bl	8001358 <LCD_SendData>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001686:	b004      	add	sp, #16
 8001688:	4770      	bx	lr
	...

0800168c <Flash_Unlock>:

//Flash===========================================================

int dataIdx = 0;

void Flash_Unlock(void) {
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;  // Key1
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <Flash_Unlock+0x18>)
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <Flash_Unlock+0x1c>)
 8001694:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;  // Key2
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <Flash_Unlock+0x18>)
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <Flash_Unlock+0x20>)
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40022000 	.word	0x40022000
 80016a8:	45670123 	.word	0x45670123
 80016ac:	cdef89ab 	.word	0xcdef89ab

080016b0 <Flash_Lock>:

void Flash_Lock(void) {
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <Flash_Lock+0x18>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <Flash_Lock+0x18>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	6113      	str	r3, [r2, #16]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40022000 	.word	0x40022000

080016cc <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t data) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
	while (FLASH->SR & FLASH_SR_BSY)
 80016d8:	bf00      	nop
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <Flash_Write+0x54>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <Flash_Write+0xe>
		;  // Busy flag 체크

	FLASH->CR |= FLASH_CR_PG;  // Programming mode ?��?��
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <Flash_Write+0x54>)
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <Flash_Write+0x54>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*) address = data;  // ?��?��?�� 기록
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	801a      	strh	r2, [r3, #0]

	while (FLASH->SR & FLASH_SR_BSY)
 80016fa:	bf00      	nop
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <Flash_Write+0x54>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <Flash_Write+0x30>
		;  // Busy flag 체크

	FLASH->CR &= ~FLASH_CR_PG;  // Programming mode ?��?��
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <Flash_Write+0x54>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <Flash_Write+0x54>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6113      	str	r3, [r2, #16]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <Flash_Write_Char>:
	uint16_t value = (uint16_t) strtol((const char*) StrData, NULL, 10);
	Flash_Write(address, value);  // ?��?�� 값을 ?��?��?�� 메모리에 ???��
	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
}

uint32_t Flash_Write_Char(uint32_t address, uint8_t CharData) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
	Flash_Unlock();
 8001730:	f7ff ffac 	bl	800168c <Flash_Unlock>
	Flash_Write(address, CharData);
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffc7 	bl	80016cc <Flash_Write>
	Flash_Lock();
 800173e:	f7ff ffb7 	bl	80016b0 <Flash_Lock>
	return address + 0x02;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3302      	adds	r3, #2
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <Flash_Write_Str>:

uint32_t Flash_Write_Str(uint32_t address, uint8_t *StrData) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e00b      	b.n	8001776 <Flash_Write_Str+0x28>
		address = Flash_Write_Char(address, StrData[i]);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ffdb 	bl	8001724 <Flash_Write_Char>
 800176e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f7fe fcf4 	bl	8000164 <strlen>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8ec      	bhi.n	800175e <Flash_Write_Str+0x10>
	}
	//printf("%x\r\n", address);
	return address;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t address, uint8_t *StrData) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	char *token;

	token = strtok(StrData, ",");
 800179a:	4999      	ldr	r1, [pc, #612]	; (8001a00 <Flash_Write_Data+0x270>)
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f007 f8f9 	bl	8008994 <strtok>
 80017a2:	60f8      	str	r0, [r7, #12]
	if (token[0] == 'D') {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b44      	cmp	r3, #68	; 0x44
 80017aa:	f040 80a7 	bne.w	80018fc <Flash_Write_Data+0x16c>
		token = strtok(NULL, ",");
 80017ae:	4994      	ldr	r1, [pc, #592]	; (8001a00 <Flash_Write_Data+0x270>)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f007 f8ef 	bl	8008994 <strtok>
 80017b6:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02c      	beq.n	8001818 <Flash_Write_Data+0x88>
			strncpy(data[dataIdx].busNM, token,
 80017be:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <Flash_Write_Data+0x274>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	011a      	lsls	r2, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	4a8e      	ldr	r2, [pc, #568]	; (8001a08 <Flash_Write_Data+0x278>)
 80017ce:	4413      	add	r3, r2
 80017d0:	2204      	movs	r2, #4
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 f8c9 	bl	800896c <strncpy>
					sizeof(data[dataIdx].busNM) - 1);
			data[dataIdx].busNM[sizeof(data[dataIdx].busNM) - 1] = '\0';
 80017da:	4b8a      	ldr	r3, [pc, #552]	; (8001a04 <Flash_Write_Data+0x274>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	498a      	ldr	r1, [pc, #552]	; (8001a08 <Flash_Write_Data+0x278>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	011a      	lsls	r2, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busNM);
 80017f2:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <Flash_Write_Data+0x274>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	011a      	lsls	r2, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	4a81      	ldr	r2, [pc, #516]	; (8001a08 <Flash_Write_Data+0x278>)
 8001802:	4413      	add	r3, r2
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa1 	bl	800174e <Flash_Write_Str>
 800180c:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff87 	bl	8001724 <Flash_Write_Char>
 8001816:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001818:	4979      	ldr	r1, [pc, #484]	; (8001a00 <Flash_Write_Data+0x270>)
 800181a:	2000      	movs	r0, #0
 800181c:	f007 f8ba 	bl	8008994 <strtok>
 8001820:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02e      	beq.n	8001886 <Flash_Write_Data+0xf6>
			strncpy(data[dataIdx].busRouteno, token,
 8001828:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <Flash_Write_Data+0x274>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	011a      	lsls	r2, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	4a74      	ldr	r2, [pc, #464]	; (8001a08 <Flash_Write_Data+0x278>)
 8001838:	4413      	add	r3, r2
 800183a:	3305      	adds	r3, #5
 800183c:	2204      	movs	r2, #4
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	4618      	mov	r0, r3
 8001842:	f007 f893 	bl	800896c <strncpy>
					sizeof(data[dataIdx].busRouteno) - 1);
			data[dataIdx].busRouteno[sizeof(data[dataIdx].busRouteno) - 1] =
 8001846:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <Flash_Write_Data+0x274>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	496f      	ldr	r1, [pc, #444]	; (8001a08 <Flash_Write_Data+0x278>)
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	011a      	lsls	r2, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	440b      	add	r3, r1
 8001858:	3309      	adds	r3, #9
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
					'\0';
			address = Flash_Write_Str(address, data[dataIdx].busRouteno);
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <Flash_Write_Data+0x274>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	011a      	lsls	r2, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	4a66      	ldr	r2, [pc, #408]	; (8001a08 <Flash_Write_Data+0x278>)
 800186e:	4413      	add	r3, r2
 8001870:	3305      	adds	r3, #5
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff6a 	bl	800174e <Flash_Write_Str>
 800187a:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff50 	bl	8001724 <Flash_Write_Char>
 8001884:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001886:	495e      	ldr	r1, [pc, #376]	; (8001a00 <Flash_Write_Data+0x270>)
 8001888:	2000      	movs	r0, #0
 800188a:	f007 f883 	bl	8008994 <strtok>
 800188e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80af 	beq.w	80019f6 <Flash_Write_Data+0x266>
			strncpy(data[dataIdx].busStopID, token,
 8001898:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <Flash_Write_Data+0x274>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	011a      	lsls	r2, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	3308      	adds	r3, #8
 80018a8:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <Flash_Write_Data+0x278>)
 80018aa:	4413      	add	r3, r2
 80018ac:	3302      	adds	r3, #2
 80018ae:	2207      	movs	r2, #7
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f007 f85a 	bl	800896c <strncpy>
					sizeof(data[dataIdx].busStopID) - 1);
			data[dataIdx].busStopID[sizeof(data[dataIdx].busStopID) - 1] = '\0';
 80018b8:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <Flash_Write_Data+0x274>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4952      	ldr	r1, [pc, #328]	; (8001a08 <Flash_Write_Data+0x278>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	011a      	lsls	r2, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	3311      	adds	r3, #17
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busStopID);
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <Flash_Write_Data+0x274>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	011a      	lsls	r2, r3, #4
 80018dc:	4413      	add	r3, r2
 80018de:	3308      	adds	r3, #8
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <Flash_Write_Data+0x278>)
 80018e2:	4413      	add	r3, r2
 80018e4:	3302      	adds	r3, #2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff30 	bl	800174e <Flash_Write_Str>
 80018ee:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff16 	bl	8001724 <Flash_Write_Char>
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	e07c      	b.n	80019f6 <Flash_Write_Data+0x266>
		}
	} else {
		token = strtok(NULL, ",");
 80018fc:	4940      	ldr	r1, [pc, #256]	; (8001a00 <Flash_Write_Data+0x270>)
 80018fe:	2000      	movs	r0, #0
 8001900:	f007 f848 	bl	8008994 <strtok>
 8001904:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d030      	beq.n	800196e <Flash_Write_Data+0x1de>
			strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <Flash_Write_Data+0x274>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	011a      	lsls	r2, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	3310      	adds	r3, #16
 800191c:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <Flash_Write_Data+0x278>)
 800191e:	4413      	add	r3, r2
 8001920:	3302      	adds	r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f007 f820 	bl	800896c <strncpy>
			data[dataIdx].lati[sizeof(data[dataIdx].lati) - 1] = '\0';
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <Flash_Write_Data+0x274>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4935      	ldr	r1, [pc, #212]	; (8001a08 <Flash_Write_Data+0x278>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	011a      	lsls	r2, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	440b      	add	r3, r1
 800193e:	3321      	adds	r3, #33	; 0x21
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].lati);
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <Flash_Write_Data+0x274>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	011a      	lsls	r2, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	3310      	adds	r3, #16
 8001954:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <Flash_Write_Data+0x278>)
 8001956:	4413      	add	r3, r2
 8001958:	3302      	adds	r3, #2
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fef6 	bl	800174e <Flash_Write_Str>
 8001962:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fedc 	bl	8001724 <Flash_Write_Char>
 800196c:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 800196e:	4924      	ldr	r1, [pc, #144]	; (8001a00 <Flash_Write_Data+0x270>)
 8001970:	2000      	movs	r0, #0
 8001972:	f007 f80f 	bl	8008994 <strtok>
 8001976:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d030      	beq.n	80019e0 <Flash_Write_Data+0x250>
			strncpy(data[dataIdx].longi, token,
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <Flash_Write_Data+0x274>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	011a      	lsls	r2, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3320      	adds	r3, #32
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <Flash_Write_Data+0x278>)
 8001990:	4413      	add	r3, r2
 8001992:	3302      	adds	r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	4618      	mov	r0, r3
 800199a:	f006 ffe7 	bl	800896c <strncpy>
					sizeof(data[dataIdx].longi) - 1);
			data[dataIdx].longi[sizeof(data[dataIdx].longi) - 1] = '\0';
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <Flash_Write_Data+0x274>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4919      	ldr	r1, [pc, #100]	; (8001a08 <Flash_Write_Data+0x278>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	011a      	lsls	r2, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	3331      	adds	r3, #49	; 0x31
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].longi);
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <Flash_Write_Data+0x274>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	011a      	lsls	r2, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	3320      	adds	r3, #32
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <Flash_Write_Data+0x278>)
 80019c8:	4413      	add	r3, r2
 80019ca:	3302      	adds	r3, #2
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff febd 	bl	800174e <Flash_Write_Str>
 80019d4:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, '!');
 80019d6:	2121      	movs	r1, #33	; 0x21
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fea3 	bl	8001724 <Flash_Write_Char>
 80019de:	6078      	str	r0, [r7, #4]
		}
		dataIdx += 1;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <Flash_Write_Data+0x274>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <Flash_Write_Data+0x274>)
 80019e8:	6013      	str	r3, [r2, #0]
		if (dataIdx == 2) {
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <Flash_Write_Data+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d101      	bne.n	80019f6 <Flash_Write_Data+0x266>
			updateLCD();
 80019f2:	f7ff fd8b 	bl	800150c <updateLCD>
		}
	}
//	printf("busNM:%s, busRouteNo:%s, BusStopID:%s, lati:%s, longi:%s\r\n",
//			data.busNM, data.busRouteno, data.busStopID, data.lati, data.longi);
	return address;
 80019f6:	687b      	ldr	r3, [r7, #4]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	0800af98 	.word	0x0800af98
 8001a04:	200023fc 	.word	0x200023fc
 8001a08:	2000038c 	.word	0x2000038c

08001a0c <Flash_Read>:

uint16_t Flash_Read(uint32_t address) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) address; // �???��?�� ?��?��?�� 메모�?? 주소?��?�� ?��?��?�� ?���??
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <Flash_Erase_Page>:

void Flash_Erase_Page(uint32_t address) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	Flash_Unlock();  // ?��?��?�� 메모�?? ?��?��
 8001a2c:	f7ff fe2e 	bl	800168c <Flash_Unlock>

	FLASH->CR |= FLASH_CR_PER;   // Page Erase 비트 ?��?��
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	6113      	str	r3, [r2, #16]
	FLASH->AR = address;         // �???�� ?��?���???�� 주소 ?��?��
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;  // Erase ?��?��
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4c:	6113      	str	r3, [r2, #16]

	while (FLASH->SR & FLASH_SR_BSY)
 8001a4e:	bf00      	nop
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <Flash_Erase_Page+0x2c>
		;  // ?��?��?�� ?��료될 ?��까�? ??�??

	FLASH->CR &= ~FLASH_CR_PER;  // Page Erase 비트 ?��?��
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	6113      	str	r3, [r2, #16]

	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
 8001a68:	f7ff fe22 	bl	80016b0 <Flash_Lock>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40022000 	.word	0x40022000

08001a78 <splitData>:

void splitData(char *strData) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	char *token;

	token = strtok(strData, ","); // CarNM
 8001a80:	4934      	ldr	r1, [pc, #208]	; (8001b54 <splitData+0xdc>)
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f006 ff86 	bl	8008994 <strtok>
 8001a88:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <splitData+0xe0>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	011a      	lsls	r2, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <splitData+0xe4>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 ff63 	bl	800896c <strncpy>

	token = strtok(NULL, ","); // RouteNo
 8001aa6:	492b      	ldr	r1, [pc, #172]	; (8001b54 <splitData+0xdc>)
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f006 ff73 	bl	8008994 <strtok>
 8001aae:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busRouteno, token,
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <splitData+0xe0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	011a      	lsls	r2, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <splitData+0xe4>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3305      	adds	r3, #5
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f006 ff4f 	bl	800896c <strncpy>
			sizeof(data[dataIdx].busRouteno) - 1);

	token = strtok(NULL, ","); // StopID
 8001ace:	4921      	ldr	r1, [pc, #132]	; (8001b54 <splitData+0xdc>)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f006 ff5f 	bl	8008994 <strtok>
 8001ad6:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busStopID, token,
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <splitData+0xe0>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	011a      	lsls	r2, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <splitData+0xe4>)
 8001aea:	4413      	add	r3, r2
 8001aec:	3302      	adds	r3, #2
 8001aee:	2207      	movs	r2, #7
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f006 ff3a 	bl	800896c <strncpy>
			sizeof(data[dataIdx].busStopID) - 1);

	token = strtok(NULL, ","); // lati
 8001af8:	4916      	ldr	r1, [pc, #88]	; (8001b54 <splitData+0xdc>)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f006 ff4a 	bl	8008994 <strtok>
 8001b00:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <splitData+0xe0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	011a      	lsls	r2, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	3310      	adds	r3, #16
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <splitData+0xe4>)
 8001b14:	4413      	add	r3, r2
 8001b16:	3302      	adds	r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f006 ff25 	bl	800896c <strncpy>

	token = strtok(NULL, "!"); // longi
 8001b22:	490f      	ldr	r1, [pc, #60]	; (8001b60 <splitData+0xe8>)
 8001b24:	2000      	movs	r0, #0
 8001b26:	f006 ff35 	bl	8008994 <strtok>
 8001b2a:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <splitData+0xe0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	011a      	lsls	r2, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	3320      	adds	r3, #32
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <splitData+0xe4>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	3302      	adds	r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 ff10 	bl	800896c <strncpy>
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	0800af98 	.word	0x0800af98
 8001b58:	200023fc 	.word	0x200023fc
 8001b5c:	2000038c 	.word	0x2000038c
 8001b60:	0800af9c 	.word	0x0800af9c

08001b64 <CallData>:

uint32_t CallData(uint32_t address) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b096      	sub	sp, #88	; 0x58
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	char a[70] = { 0, };
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2242      	movs	r2, #66	; 0x42
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 fedd 	bl	8008938 <memset>
	int i = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		a[i] = (char) Flash_Read(address);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff42 	bl	8001a0c <Flash_Read>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	4413      	add	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
		address += 0x02;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	607b      	str	r3, [r7, #4]
		if (a[i] == 0xFF) {
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d101      	bne.n	8001bb0 <CallData+0x4c>
			return address;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	e01e      	b.n	8001bee <CallData+0x8a>
		}
		if (a[i] == '!') {
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b21      	cmp	r3, #33	; 0x21
 8001bbc:	d113      	bne.n	8001be6 <CallData+0x82>
			splitData(a);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff58 	bl	8001a78 <splitData>
			dataIdx += 1;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <CallData+0x94>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <CallData+0x94>)
 8001bd0:	6013      	str	r3, [r2, #0]
			i = -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	657b      	str	r3, [r7, #84]	; 0x54
			memset(a, 0, 60);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	223c      	movs	r2, #60	; 0x3c
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 fea9 	bl	8008938 <memset>
		}
		i += 1;
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	3301      	adds	r3, #1
 8001bea:	657b      	str	r3, [r7, #84]	; 0x54
		a[i] = (char) Flash_Read(address);
 8001bec:	e7c9      	b.n	8001b82 <CallData+0x1e>
	}
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3758      	adds	r7, #88	; 0x58
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200023fc 	.word	0x200023fc

08001bfc <convertToDecimalDegrees>:

// GPS=======================================================
char latitude[16];
char longitude[16];

double convertToDecimalDegrees(const char *coordinate, char type) {
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
	int degrees;
	double minutes;
	double decimalDegrees;

	if (type == 'L') { // Latitude
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	2b4c      	cmp	r3, #76	; 0x4c
 8001c0c:	d116      	bne.n	8001c3c <convertToDecimalDegrees+0x40>
		// 첫 두 자리 (도)
		degrees = (coordinate[0] - '0') * 10 + (coordinate[1] - '0'); // dd
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3b30      	subs	r3, #48	; 0x30
 8001c28:	4413      	add	r3, r2
 8001c2a:	61fb      	str	r3, [r7, #28]
		// 나머지 부분 (분)
		minutes = atof(coordinate + 2); // mm.mmmm
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 ffa7 	bl	8006b84 <atof>
 8001c36:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c3a:	e025      	b.n	8001c88 <convertToDecimalDegrees+0x8c>
	} else if (type == 'G') { // Longitude
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b47      	cmp	r3, #71	; 0x47
 8001c40:	d11d      	bne.n	8001c7e <convertToDecimalDegrees+0x82>
		// 첫 세 자리 (도)
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3b30      	subs	r3, #48	; 0x30
 8001c48:	2264      	movs	r2, #100	; 0x64
 8001c4a:	fb02 f103 	mul.w	r1, r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3301      	adds	r3, #1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	18ca      	adds	r2, r1, r3
				+ (coordinate[2] - '0'); // ddd
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3302      	adds	r3, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3b30      	subs	r3, #48	; 0x30
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001c6a:	4413      	add	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]
		// 나머지 부분 (분)
		minutes = atof(coordinate + 3); // mm.mmmm
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3303      	adds	r3, #3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 ff86 	bl	8006b84 <atof>
 8001c78:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c7c:	e004      	b.n	8001c88 <convertToDecimalDegrees+0x8c>
	} else {
		printf("Invalid type\n");
 8001c7e:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <convertToDecimalDegrees+0xc8>)
 8001c80:	f006 fccc 	bl	800861c <puts>
		return;
 8001c84:	bf00      	nop
 8001c86:	e017      	b.n	8001cb8 <convertToDecimalDegrees+0xbc>
	}

	// 소수점 부분 계산
	decimalDegrees = degrees + (minutes / 60.0);
 8001c88:	69f8      	ldr	r0, [r7, #28]
 8001c8a:	f7fe fbc5 	bl	8000418 <__aeabi_i2d>
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <convertToDecimalDegrees+0xcc>)
 8001c98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c9c:	f7fe fd50 	bl	8000740 <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe fa6a 	bl	8000180 <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decimalDegrees;
 8001cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	0800afa0 	.word	0x0800afa0
 8001cc8:	404e0000 	.word	0x404e0000

08001ccc <parseGPSData>:

void parseGPSData(uint8_t *buffer, uint16_t size) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
	char *nmeaGGA = NULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
	double la, lo;
	//xprintf("%s", (char*)buffer);
	// DMA 버퍼?��?�� $GPGGA 문자?��?�� �??��
	nmeaGGA = strstr((char*) buffer, "GLL");
 8001cdc:	4938      	ldr	r1, [pc, #224]	; (8001dc0 <parseGPSData+0xf4>)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f006 feb4 	bl	8008a4c <strstr>
 8001ce4:	60f8      	str	r0, [r7, #12]
	if (nmeaGGA != NULL) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d064      	beq.n	8001db6 <parseGPSData+0xea>
		char *token;

		// NMEA 메시�? ?��?��?��
		token = strtok(nmeaGGA, ",");
 8001cec:	4935      	ldr	r1, [pc, #212]	; (8001dc4 <parseGPSData+0xf8>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f006 fe50 	bl	8008994 <strtok>
 8001cf4:	60b8      	str	r0, [r7, #8]

//        // UTC ?���? (무시)
//        token = strtok(NULL, ",");

		// ?��?��
		token = strtok(NULL, ",");
 8001cf6:	4933      	ldr	r1, [pc, #204]	; (8001dc4 <parseGPSData+0xf8>)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f006 fe4b 	bl	8008994 <strtok>
 8001cfe:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <parseGPSData+0x56>
			strncpy(latitude, token, sizeof(latitude) - 1);
 8001d06:	220f      	movs	r2, #15
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	482f      	ldr	r0, [pc, #188]	; (8001dc8 <parseGPSData+0xfc>)
 8001d0c:	f006 fe2e 	bl	800896c <strncpy>
			latitude[sizeof(latitude) - 1] = '\0';
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <parseGPSData+0xfc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	73da      	strb	r2, [r3, #15]
			la = convertToDecimalDegrees(latitude, 'L');
 8001d16:	214c      	movs	r1, #76	; 0x4c
 8001d18:	482b      	ldr	r0, [pc, #172]	; (8001dc8 <parseGPSData+0xfc>)
 8001d1a:	f7ff ff6f 	bl	8001bfc <convertToDecimalDegrees>
 8001d1e:	e9c7 0106 	strd	r0, r1, [r7, #24]
		}

		// N/S ?��?��
		token = strtok(NULL, ",");
 8001d22:	4928      	ldr	r1, [pc, #160]	; (8001dc4 <parseGPSData+0xf8>)
 8001d24:	2000      	movs	r0, #0
 8001d26:	f006 fe35 	bl	8008994 <strtok>
 8001d2a:	60b8      	str	r0, [r7, #8]

		// 경도
		token = strtok(NULL, ",");
 8001d2c:	4925      	ldr	r1, [pc, #148]	; (8001dc4 <parseGPSData+0xf8>)
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f006 fe30 	bl	8008994 <strtok>
 8001d34:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <parseGPSData+0x8c>
			strncpy(longitude, token, sizeof(longitude) - 1);
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <parseGPSData+0x100>)
 8001d42:	f006 fe13 	bl	800896c <strncpy>
			longitude[sizeof(longitude) - 1] = '\0';
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <parseGPSData+0x100>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	73da      	strb	r2, [r3, #15]
			lo = convertToDecimalDegrees(longitude, 'G');
 8001d4c:	2147      	movs	r1, #71	; 0x47
 8001d4e:	481f      	ldr	r0, [pc, #124]	; (8001dcc <parseGPSData+0x100>)
 8001d50:	f7ff ff54 	bl	8001bfc <convertToDecimalDegrees>
 8001d54:	e9c7 0104 	strd	r0, r1, [r7, #16]
		}

		// E/W ?��?��
		token = strtok(NULL, ",");
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <parseGPSData+0xf8>)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f006 fe1a 	bl	8008994 <strtok>
 8001d60:	60b8      	str	r0, [r7, #8]

		// ?��?��?�� 결과�? ?��버그 출력
		printf("\r\nLatitude: %.6f, Longitude: %.6f\r\n", la, lo);
 8001d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d66:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <parseGPSData+0x104>)
 8001d70:	f006 fbee 	bl	8008550 <iprintf>
		if(la >= 200 || lo >= 200){
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <parseGPSData+0x108>)
 8001d7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d7e:	f7fe fe3b 	bl	80009f8 <__aeabi_dcmpge>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <parseGPSData+0xd0>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <parseGPSData+0x108>)
 8001d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d92:	f7fe fe31 	bl	80009f8 <__aeabi_dcmpge>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <parseGPSData+0xd8>
			GPSLEDFlag = 0;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <parseGPSData+0x10c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e002      	b.n	8001daa <parseGPSData+0xde>
		}
		else{
			GPSLEDFlag = 1;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <parseGPSData+0x10c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
		}
		CheckGPS(la, lo);
 8001daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db2:	f000 f815 	bl	8001de0 <CheckGPS>
	}
}
 8001db6:	bf00      	nop
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800afb0 	.word	0x0800afb0
 8001dc4:	0800af98 	.word	0x0800af98
 8001dc8:	20002400 	.word	0x20002400
 8001dcc:	20002410 	.word	0x20002410
 8001dd0:	0800afb4 	.word	0x0800afb4
 8001dd4:	40690000 	.word	0x40690000
 8001dd8:	20002174 	.word	0x20002174
 8001ddc:	00000000 	.word	0x00000000

08001de0 <CheckGPS>:

int checkGPSCnt = 0;

void CheckGPS(double nowLati, double nowLongi) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001dea:	e9c7 2300 	strd	r2, r3, [r7]
	double busStopLati = atof(data[nowIdx].lati);
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <CheckGPS+0x148>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	011a      	lsls	r2, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3310      	adds	r3, #16
 8001dfe:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <CheckGPS+0x14c>)
 8001e00:	4413      	add	r3, r2
 8001e02:	3302      	adds	r3, #2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 febd 	bl	8006b84 <atof>
 8001e0a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double busStopLongi = atof(data[nowIdx].longi);
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <CheckGPS+0x148>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	011a      	lsls	r2, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3320      	adds	r3, #32
 8001e1e:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <CheckGPS+0x14c>)
 8001e20:	4413      	add	r3, r2
 8001e22:	3302      	adds	r3, #2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fead 	bl	8006b84 <atof>
 8001e2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	//printf("La : %f, La1 : %f\r\n", busStopLati - 0.00009, busStopLati + 0.00009);
	//printf("NowLa : %f, NowLo : %f\r\n", nowLati, nowLongi);
	//printf("First : %d\r\n", nowLati >= (busStopLati - 0.00009)
	//		&& nowLati <= (busStopLati + 0.00009));
	if (nowLati >= (busStopLati - (0.000009 * GPSRange))
 8001e2e:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <CheckGPS+0x150>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe faf0 	bl	8000418 <__aeabi_i2d>
 8001e38:	a337      	add	r3, pc, #220	; (adr r3, 8001f18 <CheckGPS+0x138>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fb55 	bl	80004ec <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4a:	f7fe f997 	bl	800017c <__aeabi_dsub>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e56:	f7fe fdcf 	bl	80009f8 <__aeabi_dcmpge>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d100      	bne.n	8001e62 <CheckGPS+0x82>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
			checkGPSCnt++;
			//printf("Check!!!!!!!!\r\b");
		}
	}
}
 8001e60:	e056      	b.n	8001f10 <CheckGPS+0x130>
			&& nowLati <= (busStopLati + (0.000009 * GPSRange))) {
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <CheckGPS+0x150>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fad6 	bl	8000418 <__aeabi_i2d>
 8001e6c:	a32a      	add	r3, pc, #168	; (adr r3, 8001f18 <CheckGPS+0x138>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fb3b 	bl	80004ec <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e82:	f7fe f97d 	bl	8000180 <__adddf3>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e8e:	f7fe fda9 	bl	80009e4 <__aeabi_dcmple>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d100      	bne.n	8001e9a <CheckGPS+0xba>
}
 8001e98:	e03a      	b.n	8001f10 <CheckGPS+0x130>
		if (nowLongi >= (busStopLongi - (0.000011 * GPSRange))
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <CheckGPS+0x150>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe faba 	bl	8000418 <__aeabi_i2d>
 8001ea4:	a31e      	add	r3, pc, #120	; (adr r3, 8001f20 <CheckGPS+0x140>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fb1f 	bl	80004ec <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eb6:	f7fe f961 	bl	800017c <__aeabi_dsub>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec2:	f7fe fd99 	bl	80009f8 <__aeabi_dcmpge>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d100      	bne.n	8001ece <CheckGPS+0xee>
}
 8001ecc:	e020      	b.n	8001f10 <CheckGPS+0x130>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <CheckGPS+0x150>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe faa0 	bl	8000418 <__aeabi_i2d>
 8001ed8:	a311      	add	r3, pc, #68	; (adr r3, 8001f20 <CheckGPS+0x140>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fb05 	bl	80004ec <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eee:	f7fe f947 	bl	8000180 <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001efa:	f7fe fd73 	bl	80009e4 <__aeabi_dcmple>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <CheckGPS+0x126>
}
 8001f04:	e004      	b.n	8001f10 <CheckGPS+0x130>
			checkGPSCnt++;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <CheckGPS+0x154>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <CheckGPS+0x154>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	94ccab3f 	.word	0x94ccab3f
 8001f1c:	3ee2dfd6 	.word	0x3ee2dfd6
 8001f20:	7cfa26a2 	.word	0x7cfa26a2
 8001f24:	3ee71194 	.word	0x3ee71194
 8001f28:	20002170 	.word	0x20002170
 8001f2c:	2000038c 	.word	0x2000038c
 8001f30:	200023f8 	.word	0x200023f8
 8001f34:	20002420 	.word	0x20002420

08001f38 <SetMode>:
uint8_t LoRaRxBuffer[LoRa_RX_BUFFER_SIZE]; // 수신 데이터를 저장할 버퍼
volatile uint8_t LoRaRxEnd = 0; // 데이터 수신 완료 플래그
uint8_t LoRaRxData[2]; // 수신 데이터를 저장할 버퍼
uint8_t LoRaLen = 0;

void SetMode(uint8_t mode) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d837      	bhi.n	8001fb8 <SetMode+0x80>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <SetMode+0x18>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f77 	.word	0x08001f77
 8001f58:	08001f8d 	.word	0x08001f8d
 8001f5c:	08001fa3 	.word	0x08001fa3
	case 0:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2101      	movs	r1, #1
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <SetMode+0x88>)
 8001f66:	f002 fb58 	bl	800461a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <SetMode+0x88>)
 8001f70:	f002 fb53 	bl	800461a <HAL_GPIO_WritePin>
		break;
 8001f74:	e020      	b.n	8001fb8 <SetMode+0x80>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <SetMode+0x88>)
 8001f7c:	f002 fb4d 	bl	800461a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2102      	movs	r1, #2
 8001f84:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <SetMode+0x88>)
 8001f86:	f002 fb48 	bl	800461a <HAL_GPIO_WritePin>
		break;
 8001f8a:	e015      	b.n	8001fb8 <SetMode+0x80>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <SetMode+0x88>)
 8001f92:	f002 fb42 	bl	800461a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <SetMode+0x88>)
 8001f9c:	f002 fb3d 	bl	800461a <HAL_GPIO_WritePin>
		break;
 8001fa0:	e00a      	b.n	8001fb8 <SetMode+0x80>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <SetMode+0x88>)
 8001fa8:	f002 fb37 	bl	800461a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <SetMode+0x88>)
 8001fb2:	f002 fb32 	bl	800461a <HAL_GPIO_WritePin>
		break;
 8001fb6:	bf00      	nop
	}
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010800 	.word	0x40010800

08001fc4 <LoRa_SendData>:

void LoRa_SendData(uint8_t *data, uint16_t length) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
	// AUX 핀이 HIGH 상태인지 확인하여 모듈이 준비되었는지 확인
	while (HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET)
 8001fd0:	bf00      	nop
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <LoRa_SendData+0x34>)
 8001fd6:	f002 fb09 	bl	80045ec <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f8      	beq.n	8001fd2 <LoRa_SendData+0xe>
		;

	// 데이터 송신
	HAL_UART_Transmit(&huart2, data, length, HAL_MAX_DELAY);
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <LoRa_SendData+0x38>)
 8001fea:	f003 fd89 	bl	8005b00 <HAL_UART_Transmit>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	200002b8 	.word	0x200002b8

08002000 <_write>:
uint8_t nmeaBuffer[RX3_BUFFER_SIZE];
uint8_t dataReceived = 0;

uint8_t modeFlag = 0;

int _write(int file, unsigned char *p, int len) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_write+0x5c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	b29a      	uxth	r2, r3
 8002018:	230a      	movs	r3, #10
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	4810      	ldr	r0, [pc, #64]	; (8002060 <_write+0x60>)
 800201e:	f003 fd6f 	bl	8005b00 <HAL_UART_Transmit>
 8002022:	e016      	b.n	8002052 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <_write+0x5c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	b29a      	uxth	r2, r3
 8002030:	230a      	movs	r3, #10
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <_write+0x64>)
 8002036:	f003 fd63 	bl	8005b00 <HAL_UART_Transmit>
 800203a:	e00a      	b.n	8002052 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <_write+0x5c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d106      	bne.n	8002052 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	b29a      	uxth	r2, r3
 8002048:	230a      	movs	r3, #10
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	4806      	ldr	r0, [pc, #24]	; (8002068 <_write+0x68>)
 800204e:	f003 fd57 	bl	8005b00 <HAL_UART_Transmit>
	}
	return len;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000246b 	.word	0x2000246b
 8002060:	20000270 	.word	0x20000270
 8002064:	200002b8 	.word	0x200002b8
 8002068:	20000300 	.word	0x20000300

0800206c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800206c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002070:	b096      	sub	sp, #88	; 0x58
 8002072:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002074:	f001 fd00 	bl	8003a78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002078:	f000 faf0 	bl	800265c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800207c:	f000 fbf8 	bl	8002870 <MX_GPIO_Init>
	MX_DMA_Init();
 8002080:	f000 fbd8 	bl	8002834 <MX_DMA_Init>
	MX_I2C1_Init();
 8002084:	f000 fb2a 	bl	80026dc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002088:	f000 fb56 	bl	8002738 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800208c:	f000 fb7e 	bl	800278c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002090:	f000 fba6 	bl	80027e0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8002094:	2201      	movs	r2, #1
 8002096:	49ac      	ldr	r1, [pc, #688]	; (8002348 <main+0x2dc>)
 8002098:	48ac      	ldr	r0, [pc, #688]	; (800234c <main+0x2e0>)
 800209a:	f003 fdb4 	bl	8005c06 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, LoRaRxData, 1);
 800209e:	2201      	movs	r2, #1
 80020a0:	49ab      	ldr	r1, [pc, #684]	; (8002350 <main+0x2e4>)
 80020a2:	48ac      	ldr	r0, [pc, #688]	; (8002354 <main+0x2e8>)
 80020a4:	f003 fdaf 	bl	8005c06 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rxBuffer, 1);
 80020a8:	2201      	movs	r2, #1
 80020aa:	49ab      	ldr	r1, [pc, #684]	; (8002358 <main+0x2ec>)
 80020ac:	48ab      	ldr	r0, [pc, #684]	; (800235c <main+0x2f0>)
 80020ae:	f003 fdaa 	bl	8005c06 <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 80020b2:	4bab      	ldr	r3, [pc, #684]	; (8002360 <main+0x2f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6898      	ldr	r0, [r3, #8]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2202      	movs	r2, #2
 80020bc:	2100      	movs	r1, #0
 80020be:	f006 fab5 	bl	800862c <setvbuf>
	//	printf("HELL WORLD\r\n");
	LCD_Init(LCD_ADDR);
 80020c2:	204e      	movs	r0, #78	; 0x4e
 80020c4:	f7ff f95a 	bl	800137c <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 80020c8:	4aa6      	ldr	r2, [pc, #664]	; (8002364 <main+0x2f8>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	204e      	movs	r0, #78	; 0x4e
 80020ce:	f7ff f98c 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 80020d2:	4aa5      	ldr	r2, [pc, #660]	; (8002368 <main+0x2fc>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	204e      	movs	r0, #78	; 0x4e
 80020d8:	f7ff f987 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 80020dc:	4aa3      	ldr	r2, [pc, #652]	; (800236c <main+0x300>)
 80020de:	2102      	movs	r1, #2
 80020e0:	204e      	movs	r0, #78	; 0x4e
 80020e2:	f7ff f982 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 80020e6:	4aa2      	ldr	r2, [pc, #648]	; (8002370 <main+0x304>)
 80020e8:	2103      	movs	r1, #3
 80020ea:	204e      	movs	r0, #78	; 0x4e
 80020ec:	f7ff f97d 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 80020f0:	4aa0      	ldr	r2, [pc, #640]	; (8002374 <main+0x308>)
 80020f2:	2104      	movs	r1, #4
 80020f4:	204e      	movs	r0, #78	; 0x4e
 80020f6:	f7ff f978 	bl	80013ea <LCD_SET_CGRAM>
//		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
//	}
//	LCD_SendData(LCD_ADDR, 1);

	//flash
	uint32_t GPSRangeFlashAddress = 0x0800C400;  // ???��?�� ?��?��?�� 메모�?? 주소
 80020fa:	4b9f      	ldr	r3, [pc, #636]	; (8002378 <main+0x30c>)
 80020fc:	613b      	str	r3, [r7, #16]
	uint32_t ModeFlashAddress = 0x0800CB00;  // ???��?�� ?��?��?�� 메모�?? 주소
 80020fe:	4b9f      	ldr	r3, [pc, #636]	; (800237c <main+0x310>)
 8002100:	60fb      	str	r3, [r7, #12]
	uint32_t DataFlashAddress = 0x0800CC00; // ???��?�� ?��?��?�� 메모�?? 주소
 8002102:	4b9f      	ldr	r3, [pc, #636]	; (8002380 <main+0x314>)
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t InfoModeFlag = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	857b      	strh	r3, [r7, #42]	; 0x2a
	GPSRange = Flash_Read(GPSRangeFlashAddress);
 800210a:	6938      	ldr	r0, [r7, #16]
 800210c:	f7ff fc7e 	bl	8001a0c <Flash_Read>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b9b      	ldr	r3, [pc, #620]	; (8002384 <main+0x318>)
 8002116:	801a      	strh	r2, [r3, #0]
	printf("Range : %d!!!!!!!!!!!!!!!!\r\n", GPSRange);
 8002118:	4b9a      	ldr	r3, [pc, #616]	; (8002384 <main+0x318>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	489a      	ldr	r0, [pc, #616]	; (8002388 <main+0x31c>)
 8002120:	f006 fa16 	bl	8008550 <iprintf>
//	Flash_Erase_Page(0x0800DC00);
//	Flash_Erase_Page(0x0800E000);
//	Flash_Erase_Page(0x0800E400);

	//printf("ModeFlag:%d", InfoModeFlag);
	if (InfoModeFlag >= 1) {
 8002124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002126:	2b00      	cmp	r3, #0
 8002128:	d013      	beq.n	8002152 <main+0xe6>
		DataFlashAddress = CallData(DataFlashAddress);
 800212a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800212c:	f7ff fd1a 	bl	8001b64 <CallData>
 8002130:	62f8      	str	r0, [r7, #44]	; 0x2c
		strncpy(data[0].busStopID, "44444", sizeof(data[0].busStopID) - 1);
 8002132:	2207      	movs	r2, #7
 8002134:	4995      	ldr	r1, [pc, #596]	; (800238c <main+0x320>)
 8002136:	4896      	ldr	r0, [pc, #600]	; (8002390 <main+0x324>)
 8002138:	f006 fc18 	bl	800896c <strncpy>
		strncpy(data[0].lati, "36.124406", sizeof(data[0].lati) - 1);
 800213c:	220f      	movs	r2, #15
 800213e:	4995      	ldr	r1, [pc, #596]	; (8002394 <main+0x328>)
 8002140:	4895      	ldr	r0, [pc, #596]	; (8002398 <main+0x32c>)
 8002142:	f006 fc13 	bl	800896c <strncpy>
		strncpy(data[0].longi, "128.095744", sizeof(data[0].longi) - 1);
 8002146:	220f      	movs	r2, #15
 8002148:	4994      	ldr	r1, [pc, #592]	; (800239c <main+0x330>)
 800214a:	4895      	ldr	r0, [pc, #596]	; (80023a0 <main+0x334>)
 800214c:	f006 fc0e 	bl	800896c <strncpy>
 8002150:	e021      	b.n	8002196 <main+0x12a>

		//LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
	} else if (InfoModeFlag == 0) {
 8002152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <main+0x116>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8002158:	2101      	movs	r1, #1
 800215a:	204e      	movs	r0, #78	; 0x4e
 800215c:	f7ff f8ea 	bl	8001334 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	204e      	movs	r0, #78	; 0x4e
 8002164:	f7ff f8e6 	bl	8001334 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "DATADOWNLOAD");
 8002168:	498e      	ldr	r1, [pc, #568]	; (80023a4 <main+0x338>)
 800216a:	204e      	movs	r0, #78	; 0x4e
 800216c:	f7ff f923 	bl	80013b6 <LCD_SendString>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8002170:	21c0      	movs	r1, #192	; 0xc0
 8002172:	204e      	movs	r0, #78	; 0x4e
 8002174:	f7ff f8de 	bl	8001334 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "MODE");
 8002178:	498b      	ldr	r1, [pc, #556]	; (80023a8 <main+0x33c>)
 800217a:	204e      	movs	r0, #78	; 0x4e
 800217c:	f7ff f91b 	bl	80013b6 <LCD_SendString>
 8002180:	e009      	b.n	8002196 <main+0x12a>
	} else {
		InfoModeFlag = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	857b      	strh	r3, [r7, #42]	; 0x2a
		Flash_Unlock();
 8002186:	f7ff fa81 	bl	800168c <Flash_Unlock>
		Flash_Write(ModeFlashAddress, 0);
 800218a:	2100      	movs	r1, #0
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fa9d 	bl	80016cc <Flash_Write>
		Flash_Lock();
 8002192:	f7ff fa8d 	bl	80016b0 <Flash_Lock>
	}

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	4984      	ldr	r1, [pc, #528]	; (80023ac <main+0x340>)
 800219a:	4870      	ldr	r0, [pc, #448]	; (800235c <main+0x2f0>)
 800219c:	f003 fd58 	bl	8005c50 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80021a0:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <main+0x344>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b82      	ldr	r3, [pc, #520]	; (80023b0 <main+0x344>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	601a      	str	r2, [r3, #0]
	int Serialcnt = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24

	//LoRa ================================================================
	SetMode(0);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff febf 	bl	8001f38 <SetMode>



	//FW===================================================================
	modeFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80021ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021be:	487d      	ldr	r0, [pc, #500]	; (80023b4 <main+0x348>)
 80021c0:	f002 fa14 	bl	80045ec <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <main+0x34c>)
 80021ca:	701a      	strb	r2, [r3, #0]

	GPSTick = HAL_GetTick();
 80021cc:	f001 fcac 	bl	8003b28 <HAL_GetTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <main+0x350>)
 80021d4:	6013      	str	r3, [r2, #0]
	LoRaTick = HAL_GetTick();
 80021d6:	f001 fca7 	bl	8003b28 <HAL_GetTick>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a78      	ldr	r2, [pc, #480]	; (80023c0 <main+0x354>)
 80021de:	6013      	str	r3, [r2, #0]
	GPSFIXTick = HAL_GetTick();
 80021e0:	f001 fca2 	bl	8003b28 <HAL_GetTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a77      	ldr	r2, [pc, #476]	; (80023c4 <main+0x358>)
 80021e8:	6013      	str	r3, [r2, #0]

	uint8_t IOMode = 0; //0 : In, 1 : Out
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); //LAMP1
//
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED

		if (!modeFlag) { //Local Mode
 80021f0:	4b71      	ldr	r3, [pc, #452]	; (80023b8 <main+0x34c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 81d4 	bne.w	80025a2 <main+0x536>
			if (InfoModeFlag >= 1){
 80021fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <main+0x198>
				updateLCD();
 8002200:	f7ff f984 	bl	800150c <updateLCD>
			}
			while (1) {
				nmea_parse(&myData, DataBuffer);
 8002204:	4970      	ldr	r1, [pc, #448]	; (80023c8 <main+0x35c>)
 8002206:	4871      	ldr	r0, [pc, #452]	; (80023cc <main+0x360>)
 8002208:	f001 f8d8 	bl	80033bc <nmea_parse>
				if (UART1_Rx_End) {
 800220c:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <main+0x364>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d07c      	beq.n	800230e <main+0x2a2>
					//printf("Echo\r\n");
					if (!strcmp(UART1_Rx_Buffer, "Input")) {
 8002214:	496f      	ldr	r1, [pc, #444]	; (80023d4 <main+0x368>)
 8002216:	4870      	ldr	r0, [pc, #448]	; (80023d8 <main+0x36c>)
 8002218:	f7fd ff9a 	bl	8000150 <strcmp>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <main+0x1ce>
						Flash_Erase_Page(ModeFlashAddress);
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff fbfe 	bl	8001a24 <Flash_Erase_Page>
						Flash_Unlock();
 8002228:	f7ff fa30 	bl	800168c <Flash_Unlock>
						Flash_Write(ModeFlashAddress, (uint8_t) 0);
 800222c:	2100      	movs	r1, #0
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff fa4c 	bl	80016cc <Flash_Write>
						Flash_Lock();
 8002234:	f7ff fa3c 	bl	80016b0 <Flash_Lock>
 8002238:	e055      	b.n	80022e6 <main+0x27a>
					} else if (!strcmp(UART1_Rx_Buffer, "OutPut")) {
 800223a:	4968      	ldr	r1, [pc, #416]	; (80023dc <main+0x370>)
 800223c:	4866      	ldr	r0, [pc, #408]	; (80023d8 <main+0x36c>)
 800223e:	f7fd ff87 	bl	8000150 <strcmp>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <main+0x1f4>
						Flash_Erase_Page(ModeFlashAddress);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff fbeb 	bl	8001a24 <Flash_Erase_Page>
						Flash_Unlock();
 800224e:	f7ff fa1d 	bl	800168c <Flash_Unlock>
						Flash_Write(ModeFlashAddress, 1);
 8002252:	2101      	movs	r1, #1
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fa39 	bl	80016cc <Flash_Write>
						Flash_Lock();
 800225a:	f7ff fa29 	bl	80016b0 <Flash_Lock>
 800225e:	e042      	b.n	80022e6 <main+0x27a>
					} else if ((!strncmp(UART1_Rx_Buffer, "Data", 4)
 8002260:	2204      	movs	r2, #4
 8002262:	495f      	ldr	r1, [pc, #380]	; (80023e0 <main+0x374>)
 8002264:	485c      	ldr	r0, [pc, #368]	; (80023d8 <main+0x36c>)
 8002266:	f006 fb6f 	bl	8008948 <strncmp>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <main+0x214>
							|| !strncmp(UART1_Rx_Buffer, "data", 4))
 8002270:	2204      	movs	r2, #4
 8002272:	495c      	ldr	r1, [pc, #368]	; (80023e4 <main+0x378>)
 8002274:	4858      	ldr	r0, [pc, #352]	; (80023d8 <main+0x36c>)
 8002276:	f006 fb67 	bl	8008948 <strncmp>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <main+0x22c>
							&& InfoModeFlag == 0) {
 8002280:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <main+0x22c>
						DataFlashAddress = Flash_Write_Data(DataFlashAddress,
 8002286:	4954      	ldr	r1, [pc, #336]	; (80023d8 <main+0x36c>)
 8002288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800228a:	f7ff fa81 	bl	8001790 <Flash_Write_Data>
 800228e:	62f8      	str	r0, [r7, #44]	; 0x2c
								UART1_Rx_Buffer);
						//printf("Data\r\n");
						printf("N\r\n");
 8002290:	4855      	ldr	r0, [pc, #340]	; (80023e8 <main+0x37c>)
 8002292:	f006 f9c3 	bl	800861c <puts>
 8002296:	e026      	b.n	80022e6 <main+0x27a>
					} else if (!strncmp(UART1_Rx_Buffer, "range", 5)){
 8002298:	2205      	movs	r2, #5
 800229a:	4954      	ldr	r1, [pc, #336]	; (80023ec <main+0x380>)
 800229c:	484e      	ldr	r0, [pc, #312]	; (80023d8 <main+0x36c>)
 800229e:	f006 fb53 	bl	8008948 <strncmp>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11e      	bne.n	80022e6 <main+0x27a>
						char *token;

						token = strtok(UART1_Rx_Buffer, ",");
 80022a8:	4951      	ldr	r1, [pc, #324]	; (80023f0 <main+0x384>)
 80022aa:	484b      	ldr	r0, [pc, #300]	; (80023d8 <main+0x36c>)
 80022ac:	f006 fb72 	bl	8008994 <strtok>
 80022b0:	60b8      	str	r0, [r7, #8]
						token = strtok(NULL, "!");
 80022b2:	4950      	ldr	r1, [pc, #320]	; (80023f4 <main+0x388>)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f006 fb6d 	bl	8008994 <strtok>
 80022ba:	60b8      	str	r0, [r7, #8]
						GPSRange = atoi(token);
 80022bc:	68b8      	ldr	r0, [r7, #8]
 80022be:	f004 fc64 	bl	8006b8a <atoi>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <main+0x318>)
 80022c8:	801a      	strh	r2, [r3, #0]

						Flash_Erase_Page(GPSRangeFlashAddress);
 80022ca:	6938      	ldr	r0, [r7, #16]
 80022cc:	f7ff fbaa 	bl	8001a24 <Flash_Erase_Page>
						Flash_Unlock();
 80022d0:	f7ff f9dc 	bl	800168c <Flash_Unlock>
						Flash_Write(GPSRangeFlashAddress, (uint8_t) GPSRange);
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <main+0x318>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	6938      	ldr	r0, [r7, #16]
 80022de:	f7ff f9f5 	bl	80016cc <Flash_Write>
						Flash_Lock();
 80022e2:	f7ff f9e5 	bl	80016b0 <Flash_Lock>
					}
					//HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
					for (int i = 0; i < 50; i++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e007      	b.n	80022fc <main+0x290>
						UART1_Rx_Buffer[i] = '\0';
 80022ec:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <main+0x36c>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b31      	cmp	r3, #49	; 0x31
 8002300:	ddf4      	ble.n	80022ec <main+0x280>
					}
					UART1_Len = 0;
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <main+0x38c>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <main+0x364>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
				}

				if (InfoModeFlag) { //사용모드일때
 800230e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002310:	2b00      	cmp	r3, #0
 8002312:	f43f af77 	beq.w	8002204 <main+0x198>
					if (dataReceived) {
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <main+0x390>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <main+0x2c2>
						parseGPSData(rxBuffer, RX3_BUFFER_SIZE);
 800231e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <main+0x2ec>)
 8002324:	f7ff fcd2 	bl	8001ccc <parseGPSData>
						dataReceived = 0;
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <main+0x390>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
					}
					if (LoRaRxEnd) {
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <main+0x394>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d07a      	beq.n	800242e <main+0x3c2>
						printf("LoRa : %s\r\n", LoRaRxBuffer);
 8002338:	4932      	ldr	r1, [pc, #200]	; (8002404 <main+0x398>)
 800233a:	4833      	ldr	r0, [pc, #204]	; (8002408 <main+0x39c>)
 800233c:	f006 f908 	bl	8008550 <iprintf>
						for (int i = 0; i < LoRa_RX_BUFFER_SIZE; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	e06a      	b.n	800241c <main+0x3b0>
 8002346:	bf00      	nop
 8002348:	2000246c 	.word	0x2000246c
 800234c:	20000270 	.word	0x20000270
 8002350:	20002468 	.word	0x20002468
 8002354:	200002b8 	.word	0x200002b8
 8002358:	200024a4 	.word	0x200024a4
 800235c:	20000300 	.word	0x20000300
 8002360:	200001f8 	.word	0x200001f8
 8002364:	20000000 	.word	0x20000000
 8002368:	20000008 	.word	0x20000008
 800236c:	20000010 	.word	0x20000010
 8002370:	20000018 	.word	0x20000018
 8002374:	20000020 	.word	0x20000020
 8002378:	0800c400 	.word	0x0800c400
 800237c:	0800cb00 	.word	0x0800cb00
 8002380:	0800cc00 	.word	0x0800cc00
 8002384:	200023f8 	.word	0x200023f8
 8002388:	0800afd8 	.word	0x0800afd8
 800238c:	0800aff8 	.word	0x0800aff8
 8002390:	20000396 	.word	0x20000396
 8002394:	0800b000 	.word	0x0800b000
 8002398:	2000039e 	.word	0x2000039e
 800239c:	0800b00c 	.word	0x0800b00c
 80023a0:	200003ae 	.word	0x200003ae
 80023a4:	0800b018 	.word	0x0800b018
 80023a8:	0800b028 	.word	0x0800b028
 80023ac:	2000217c 	.word	0x2000217c
 80023b0:	20000348 	.word	0x20000348
 80023b4:	40010800 	.word	0x40010800
 80023b8:	200025a5 	.word	0x200025a5
 80023bc:	200025a8 	.word	0x200025a8
 80023c0:	200025ac 	.word	0x200025ac
 80023c4:	200025b0 	.word	0x200025b0
 80023c8:	200021bc 	.word	0x200021bc
 80023cc:	200023c0 	.word	0x200023c0
 80023d0:	200024a3 	.word	0x200024a3
 80023d4:	0800b030 	.word	0x0800b030
 80023d8:	20002470 	.word	0x20002470
 80023dc:	0800b038 	.word	0x0800b038
 80023e0:	0800b040 	.word	0x0800b040
 80023e4:	0800b048 	.word	0x0800b048
 80023e8:	0800b050 	.word	0x0800b050
 80023ec:	0800b054 	.word	0x0800b054
 80023f0:	0800af98 	.word	0x0800af98
 80023f4:	0800af9c 	.word	0x0800af9c
 80023f8:	200024a2 	.word	0x200024a2
 80023fc:	200025a4 	.word	0x200025a4
 8002400:	20002464 	.word	0x20002464
 8002404:	20002424 	.word	0x20002424
 8002408:	0800b05c 	.word	0x0800b05c
							LoRaRxBuffer[i] = '\0';
 800240c:	4a81      	ldr	r2, [pc, #516]	; (8002614 <main+0x5a8>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4413      	add	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < LoRa_RX_BUFFER_SIZE; i++) {
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3301      	adds	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b3f      	cmp	r3, #63	; 0x3f
 8002420:	ddf4      	ble.n	800240c <main+0x3a0>
						}
						LoRaLen = 0;
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <main+0x5ac>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
						LoRaRxEnd = 0; // 수신 완료 플래그 리셋
 8002428:	4b7c      	ldr	r3, [pc, #496]	; (800261c <main+0x5b0>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]

					}
					if (HAL_GetTick() - GPSTick >= 1000) {
 800242e:	f001 fb7b 	bl	8003b28 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <main+0x5b4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800243e:	d377      	bcc.n	8002530 <main+0x4c4>
						GPSTick = HAL_GetTick();
 8002440:	f001 fb72 	bl	8003b28 <HAL_GetTick>
 8002444:	4603      	mov	r3, r0
 8002446:	4a76      	ldr	r2, [pc, #472]	; (8002620 <main+0x5b4>)
 8002448:	6013      	str	r3, [r2, #0]
						printf("CNT : %d\r\n", checkGPSCnt);
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <main+0x5b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4875      	ldr	r0, [pc, #468]	; (8002628 <main+0x5bc>)
 8002452:	f006 f87d 	bl	8008550 <iprintf>
						if (checkGPSCnt >= 2) {
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <main+0x5b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	dd45      	ble.n	80024ea <main+0x47e>
							if(IOMode == 0){
 800245e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002462:	2b00      	cmp	r3, #0
 8002464:	d132      	bne.n	80024cc <main+0x460>
								LCD_Write_Arrive(data[nowIdx]);
 8002466:	4b71      	ldr	r3, [pc, #452]	; (800262c <main+0x5c0>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4971      	ldr	r1, [pc, #452]	; (8002630 <main+0x5c4>)
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	011a      	lsls	r2, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	440b      	add	r3, r1
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4692      	mov	sl, r2
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4691      	mov	r9, r2
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	4690      	mov	r8, r2
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4696      	mov	lr, r2
 8002488:	f103 0410 	add.w	r4, r3, #16
 800248c:	466e      	mov	r6, sp
 800248e:	f104 0c20 	add.w	ip, r4, #32
 8002492:	4635      	mov	r5, r6
 8002494:	4623      	mov	r3, r4
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a0:	3410      	adds	r4, #16
 80024a2:	3610      	adds	r6, #16
 80024a4:	4564      	cmp	r4, ip
 80024a6:	d1f4      	bne.n	8002492 <main+0x426>
 80024a8:	4633      	mov	r3, r6
 80024aa:	4622      	mov	r2, r4
 80024ac:	8811      	ldrh	r1, [r2, #0]
 80024ae:	7892      	ldrb	r2, [r2, #2]
 80024b0:	8019      	strh	r1, [r3, #0]
 80024b2:	709a      	strb	r2, [r3, #2]
 80024b4:	4650      	mov	r0, sl
 80024b6:	4649      	mov	r1, r9
 80024b8:	4642      	mov	r2, r8
 80024ba:	4673      	mov	r3, lr
 80024bc:	f7ff f880 	bl	80015c0 <LCD_Write_Arrive>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 80024c0:	2201      	movs	r2, #1
 80024c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c6:	485b      	ldr	r0, [pc, #364]	; (8002634 <main+0x5c8>)
 80024c8:	f002 f8a7 	bl	800461a <HAL_GPIO_WritePin>
							}
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d2:	4858      	ldr	r0, [pc, #352]	; (8002634 <main+0x5c8>)
 80024d4:	f002 f8a1 	bl	800461a <HAL_GPIO_WritePin>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 80024d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024dc:	4855      	ldr	r0, [pc, #340]	; (8002634 <main+0x5c8>)
 80024de:	f002 f8b4 	bl	800464a <HAL_GPIO_TogglePin>
							IOMode = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024e8:	e01f      	b.n	800252a <main+0x4be>
						}
						else {
							if(IOMode == 1){
 80024ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10c      	bne.n	800250c <main+0x4a0>
								nowIdx++;
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <main+0x5c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <main+0x5c0>)
 80024fa:	6013      	str	r3, [r2, #0]
								updateLCD();
 80024fc:	f7ff f806 	bl	800150c <updateLCD>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002506:	484b      	ldr	r0, [pc, #300]	; (8002634 <main+0x5c8>)
 8002508:	f002 f887 	bl	800461a <HAL_GPIO_WritePin>
							}
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002512:	4848      	ldr	r0, [pc, #288]	; (8002634 <main+0x5c8>)
 8002514:	f002 f881 	bl	800461a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //Stop LED
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251e:	4845      	ldr	r0, [pc, #276]	; (8002634 <main+0x5c8>)
 8002520:	f002 f87b 	bl	800461a <HAL_GPIO_WritePin>
							IOMode = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						}
						checkGPSCnt = 0;
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <main+0x5b8>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
					}
					if(myData.fix == 0){
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <main+0x5cc>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11b      	bne.n	8002570 <main+0x504>
						if (HAL_GetTick() - GPSFIXTick >= 500) {
 8002538:	f001 faf6 	bl	8003b28 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <main+0x5d0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002548:	f4ff ae5c 	bcc.w	8002204 <main+0x198>
							GPSFIXTick = HAL_GetTick();
 800254c:	f001 faec 	bl	8003b28 <HAL_GetTick>
 8002550:	4603      	mov	r3, r0
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <main+0x5d0>)
 8002554:	6013      	str	r3, [r2, #0]
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 8002556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800255a:	4836      	ldr	r0, [pc, #216]	; (8002634 <main+0x5c8>)
 800255c:	f002 f875 	bl	800464a <HAL_GPIO_TogglePin>
							printf("%d: No fix\r\n", Serialcnt);
 8002560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002562:	4837      	ldr	r0, [pc, #220]	; (8002640 <main+0x5d4>)
 8002564:	f005 fff4 	bl	8008550 <iprintf>
							Serialcnt++;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	e649      	b.n	8002204 <main+0x198>
						}
					}
					else{
						if(HAL_GetTick() - GPSFIXTick >= 500) {
 8002570:	f001 fada 	bl	8003b28 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <main+0x5d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002580:	f4ff ae40 	bcc.w	8002204 <main+0x198>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); //GPS LED
 8002584:	2201      	movs	r2, #1
 8002586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800258a:	482a      	ldr	r0, [pc, #168]	; (8002634 <main+0x5c8>)
 800258c:	f002 f845 	bl	800461a <HAL_GPIO_WritePin>
//							printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
//							                Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
							CheckGPS(myData.latitude, myData.longitude);
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <main+0x5cc>)
 8002592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <main+0x5cc>)
 8002598:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800259c:	f7ff fc20 	bl	8001de0 <CheckGPS>
				nmea_parse(&myData, DataBuffer);
 80025a0:	e630      	b.n	8002204 <main+0x198>
				}
			}
		}

		else{ //Remote Mode
			uint8_t data[] = {0x02, 'h', 'a', 'h', 'a', 0x03};
 80025a2:	4a28      	ldr	r2, [pc, #160]	; (8002644 <main+0x5d8>)
 80025a4:	463b      	mov	r3, r7
 80025a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025aa:	6018      	str	r0, [r3, #0]
 80025ac:	3304      	adds	r3, #4
 80025ae:	8019      	strh	r1, [r3, #0]
			while(1){
				if (UART1_Rx_End) {
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <main+0x5dc>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <main+0x57c>
					printf("Re:%s!!!!\r\n", UART1_Rx_Buffer);
 80025b8:	4924      	ldr	r1, [pc, #144]	; (800264c <main+0x5e0>)
 80025ba:	4825      	ldr	r0, [pc, #148]	; (8002650 <main+0x5e4>)
 80025bc:	f005 ffc8 	bl	8008550 <iprintf>
					for (int i = 0; i < 50; i++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e007      	b.n	80025d6 <main+0x56a>
						UART1_Rx_Buffer[i] = '\0';
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <main+0x5e0>)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4413      	add	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b31      	cmp	r3, #49	; 0x31
 80025da:	ddf4      	ble.n	80025c6 <main+0x55a>
					}
					UART1_Len = 0;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <main+0x5e8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <main+0x5dc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GetTick() - LoRaTick >= 3000) {
 80025e8:	f001 fa9e 	bl	8003b28 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <main+0x5ec>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d9d9      	bls.n	80025b0 <main+0x544>
					LoRaTick = HAL_GetTick();
 80025fc:	f001 fa94 	bl	8003b28 <HAL_GetTick>
 8002600:	4603      	mov	r3, r0
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <main+0x5ec>)
 8002604:	6013      	str	r3, [r2, #0]
					LoRa_SendData(data, sizeof(data) - 1);
 8002606:	463b      	mov	r3, r7
 8002608:	2105      	movs	r1, #5
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fcda 	bl	8001fc4 <LoRa_SendData>
				if (UART1_Rx_End) {
 8002610:	e7ce      	b.n	80025b0 <main+0x544>
 8002612:	bf00      	nop
 8002614:	20002424 	.word	0x20002424
 8002618:	2000246a 	.word	0x2000246a
 800261c:	20002464 	.word	0x20002464
 8002620:	200025a8 	.word	0x200025a8
 8002624:	20002420 	.word	0x20002420
 8002628:	0800b068 	.word	0x0800b068
 800262c:	20002170 	.word	0x20002170
 8002630:	2000038c 	.word	0x2000038c
 8002634:	40010c00 	.word	0x40010c00
 8002638:	200023c0 	.word	0x200023c0
 800263c:	200025b0 	.word	0x200025b0
 8002640:	0800b074 	.word	0x0800b074
 8002644:	0800b090 	.word	0x0800b090
 8002648:	200024a3 	.word	0x200024a3
 800264c:	20002470 	.word	0x20002470
 8002650:	0800b084 	.word	0x0800b084
 8002654:	200024a2 	.word	0x200024a2
 8002658:	200025ac 	.word	0x200025ac

0800265c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b090      	sub	sp, #64	; 0x40
 8002660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002662:	f107 0318 	add.w	r3, r7, #24
 8002666:	2228      	movs	r2, #40	; 0x28
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f006 f964 	bl	8008938 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002682:	2301      	movs	r3, #1
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002686:	2310      	movs	r3, #16
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800268a:	2302      	movs	r3, #2
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800268e:	2300      	movs	r3, #0
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002692:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fdcf 	bl	8005240 <HAL_RCC_OscConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <SystemClock_Config+0x50>
		Error_Handler();
 80026a8:	f000 fa66 	bl	8002b78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80026ac:	230f      	movs	r3, #15
 80026ae:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b0:	2302      	movs	r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 f83d 	bl	8005744 <HAL_RCC_ClockConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <SystemClock_Config+0x78>
		Error_Handler();
 80026d0:	f000 fa52 	bl	8002b78 <Error_Handler>
	}
}
 80026d4:	bf00      	nop
 80026d6:	3740      	adds	r7, #64	; 0x40
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_I2C1_Init+0x50>)
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <MX_I2C1_Init+0x54>)
 80026e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_I2C1_Init+0x50>)
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <MX_I2C1_Init+0x58>)
 80026ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_I2C1_Init+0x50>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_I2C1_Init+0x50>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_I2C1_Init+0x50>)
 80026fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_I2C1_Init+0x50>)
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_I2C1_Init+0x50>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <MX_I2C1_Init+0x50>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_I2C1_Init+0x50>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_I2C1_Init+0x50>)
 800271a:	f001 ffc7 	bl	80046ac <HAL_I2C_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002724:	f000 fa28 	bl	8002b78 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000021c 	.word	0x2000021c
 8002730:	40005400 	.word	0x40005400
 8002734:	000186a0 	.word	0x000186a0

08002738 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <MX_USART1_UART_Init+0x50>)
 8002740:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002770:	f003 f976 	bl	8005a60 <HAL_UART_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800277a:	f000 f9fd 	bl	8002b78 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000270 	.word	0x20000270
 8002788:	40013800 	.word	0x40013800

0800278c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <MX_USART2_UART_Init+0x50>)
 8002794:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 8002798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800279c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027b2:	220c      	movs	r2, #12
 80027b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_USART2_UART_Init+0x4c>)
 80027c4:	f003 f94c 	bl	8005a60 <HAL_UART_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80027ce:	f000 f9d3 	bl	8002b78 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200002b8 	.word	0x200002b8
 80027dc:	40004400 	.word	0x40004400

080027e0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_USART3_UART_Init+0x4c>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <MX_USART3_UART_Init+0x50>)
 80027e8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <MX_USART3_UART_Init+0x4c>)
 80027ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_USART3_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_USART3_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <MX_USART3_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_USART3_UART_Init+0x4c>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <MX_USART3_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_USART3_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_USART3_UART_Init+0x4c>)
 8002818:	f003 f922 	bl	8005a60 <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8002822:	f000 f9a9 	bl	8002b78 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000300 	.word	0x20000300
 8002830:	40004800 	.word	0x40004800

08002834 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_DMA_Init+0x38>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <MX_DMA_Init+0x38>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6153      	str	r3, [r2, #20]
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_DMA_Init+0x38>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	200d      	movs	r0, #13
 8002858:	f001 fa6b 	bl	8003d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800285c:	200d      	movs	r0, #13
 800285e:	f001 fa84 	bl	8003d6a <HAL_NVIC_EnableIRQ>

}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <MX_GPIO_Init+0x134>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <MX_GPIO_Init+0x134>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <MX_GPIO_Init+0x134>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <MX_GPIO_Init+0x134>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <MX_GPIO_Init+0x134>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <MX_GPIO_Init+0x134>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin,
 80028b4:	2200      	movs	r2, #0
 80028b6:	f641 0103 	movw	r1, #6147	; 0x1803
 80028ba:	483b      	ldr	r0, [pc, #236]	; (80029a8 <MX_GPIO_Init+0x138>)
 80028bc:	f001 fead 	bl	800461a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80028c6:	4839      	ldr	r0, [pc, #228]	; (80029ac <MX_GPIO_Init+0x13c>)
 80028c8:	f001 fea7 	bl	800461a <HAL_GPIO_WritePin>
	STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
	GPIO_InitStruct.Pin = LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin;
 80028cc:	f641 0303 	movw	r3, #6147	; 0x1803
 80028d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2302      	movs	r3, #2
 80028dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	4619      	mov	r1, r3
 80028e4:	4830      	ldr	r0, [pc, #192]	; (80029a8 <MX_GPIO_Init+0x138>)
 80028e6:	f001 fcfd 	bl	80042e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_AUX_Pin */
	GPIO_InitStruct.Pin = LORA_AUX_Pin;
 80028ea:	2310      	movs	r3, #16
 80028ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	4619      	mov	r1, r3
 80028fc:	482a      	ldr	r0, [pc, #168]	; (80029a8 <MX_GPIO_Init+0x138>)
 80028fe:	f001 fcf1 	bl	80042e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8002902:	23e0      	movs	r3, #224	; 0xe0
 8002904:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002906:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <MX_GPIO_Init+0x140>)
 8002908:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	4619      	mov	r1, r3
 8002914:	4824      	ldr	r0, [pc, #144]	; (80029a8 <MX_GPIO_Init+0x138>)
 8002916:	f001 fce5 	bl	80042e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN5_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin | BTN5_Pin;
 800291a:	2303      	movs	r3, #3
 800291c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <MX_GPIO_Init+0x140>)
 8002920:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	4619      	mov	r1, r3
 800292c:	481f      	ldr	r0, [pc, #124]	; (80029ac <MX_GPIO_Init+0x13c>)
 800292e:	f001 fcd9 	bl	80042e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
	GPIO_InitStruct.Pin = STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin;
 8002932:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8002936:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002938:	2301      	movs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2302      	movs	r3, #2
 8002942:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	4619      	mov	r1, r3
 800294a:	4818      	ldr	r0, [pc, #96]	; (80029ac <MX_GPIO_Init+0x13c>)
 800294c:	f001 fcca 	bl	80042e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_SLCT_Pin */
	GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8002950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002954:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295a:	2301      	movs	r3, #1
 800295c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4619      	mov	r1, r3
 8002964:	4810      	ldr	r0, [pc, #64]	; (80029a8 <MX_GPIO_Init+0x138>)
 8002966:	f001 fcbd 	bl	80042e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2006      	movs	r0, #6
 8002970:	f001 f9df 	bl	8003d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002974:	2006      	movs	r0, #6
 8002976:	f001 f9f8 	bl	8003d6a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2007      	movs	r0, #7
 8002980:	f001 f9d7 	bl	8003d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002984:	2007      	movs	r0, #7
 8002986:	f001 f9f0 	bl	8003d6a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	2017      	movs	r0, #23
 8002990:	f001 f9cf 	bl	8003d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002994:	2017      	movs	r0, #23
 8002996:	f001 f9e8 	bl	8003d6a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010800 	.word	0x40010800
 80029ac:	40010c00 	.word	0x40010c00
 80029b0:	10110000 	.word	0x10110000

080029b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d103      	bne.n	80029cc <HAL_GPIO_EXTI_Callback+0x18>
		printf("0x020,10x03\r\n");
 80029c4:	4811      	ldr	r0, [pc, #68]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x58>)
 80029c6:	f005 fe29 	bl	800861c <puts>
	} else if (GPIO_Pin == GPIO_PIN_0) {
		printf("0x023,10x03\r\n");
	} else if (GPIO_Pin == GPIO_PIN_1) {
		printf("0x024,10x03\r\n ");
	}
}
 80029ca:	e01a      	b.n	8002a02 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d103      	bne.n	80029da <HAL_GPIO_EXTI_Callback+0x26>
		printf("0x021,10x03\r\n");
 80029d2:	480f      	ldr	r0, [pc, #60]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x5c>)
 80029d4:	f005 fe22 	bl	800861c <puts>
}
 80029d8:	e013      	b.n	8002a02 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d103      	bne.n	80029e8 <HAL_GPIO_EXTI_Callback+0x34>
		printf("0x022,10x03\r\n");
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x60>)
 80029e2:	f005 fe1b 	bl	800861c <puts>
}
 80029e6:	e00c      	b.n	8002a02 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d103      	bne.n	80029f6 <HAL_GPIO_EXTI_Callback+0x42>
		printf("0x023,10x03\r\n");
 80029ee:	480a      	ldr	r0, [pc, #40]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x64>)
 80029f0:	f005 fe14 	bl	800861c <puts>
}
 80029f4:	e005      	b.n	8002a02 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d102      	bne.n	8002a02 <HAL_GPIO_EXTI_Callback+0x4e>
		printf("0x024,10x03\r\n ");
 80029fc:	4807      	ldr	r0, [pc, #28]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x68>)
 80029fe:	f005 fda7 	bl	8008550 <iprintf>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0800b098 	.word	0x0800b098
 8002a10:	0800b0a8 	.word	0x0800b0a8
 8002a14:	0800b0b8 	.word	0x0800b0b8
 8002a18:	0800b0c8 	.word	0x0800b0c8
 8002a1c:	0800b0d8 	.word	0x0800b0d8

08002a20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	static uint16_t index = 0;
	static uint8_t LoRaChk = 0;
	static uint16_t LoRaIdx = 0;
	if (huart->Instance == USART1) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_UART_RxCpltCallback+0x118>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d138      	bne.n	8002aa4 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8002a32:	4b42      	ldr	r3, [pc, #264]	; (8002b3c <HAL_UART_RxCpltCallback+0x11c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_UART_RxCpltCallback+0x120>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_UART_RxCpltCallback+0x26>
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d00c      	beq.n	8002a5e <HAL_UART_RxCpltCallback+0x3e>
 8002a44:	e024      	b.n	8002a90 <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_UART_RxCpltCallback+0x124>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d103      	bne.n	8002a56 <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_UART_RxCpltCallback+0x120>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8002a54:	e020      	b.n	8002a98 <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_UART_RxCpltCallback+0x120>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
			break;
 8002a5c:	e01c      	b.n	8002a98 <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_UART_RxCpltCallback+0x124>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 8002a66:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_UART_RxCpltCallback+0x11c>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 8002a6c:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_UART_RxCpltCallback+0x120>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 8002a72:	e011      	b.n	8002a98 <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8002a74:	4b34      	ldr	r3, [pc, #208]	; (8002b48 <HAL_UART_RxCpltCallback+0x128>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_UART_RxCpltCallback+0x124>)
 8002a7c:	7819      	ldrb	r1, [r3, #0]
 8002a7e:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <HAL_UART_RxCpltCallback+0x12c>)
 8002a80:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_UART_RxCpltCallback+0x128>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_UART_RxCpltCallback+0x128>)
 8002a8c:	701a      	strb	r2, [r3, #0]
			break;
 8002a8e:	e003      	b.n	8002a98 <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_UART_RxCpltCallback+0x120>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
			break;
 8002a96:	bf00      	nop
		}
		//HAL_UART_Transmit(&huart1, UART1_Rx_Data, 1, 10);
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	492a      	ldr	r1, [pc, #168]	; (8002b44 <HAL_UART_RxCpltCallback+0x124>)
 8002a9c:	482c      	ldr	r0, [pc, #176]	; (8002b50 <HAL_UART_RxCpltCallback+0x130>)
 8002a9e:	f003 f8b2 	bl	8005c06 <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 1);
	} else if (huart->Instance == USART3) {
		dataReceived = 1;
	}
}
 8002aa2:	e045      	b.n	8002b30 <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART2) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_UART_RxCpltCallback+0x134>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d138      	bne.n	8002b20 <HAL_UART_RxCpltCallback+0x100>
		LoRaRxEnd = 0;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_UART_RxCpltCallback+0x138>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
		switch (LoRaChk) {
 8002ab4:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_UART_RxCpltCallback+0x13c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_UART_RxCpltCallback+0xa2>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d00c      	beq.n	8002ada <HAL_UART_RxCpltCallback+0xba>
 8002ac0:	e024      	b.n	8002b0c <HAL_UART_RxCpltCallback+0xec>
			if (LoRaRxData[0] == 0x02) {
 8002ac2:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_UART_RxCpltCallback+0x140>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d103      	bne.n	8002ad2 <HAL_UART_RxCpltCallback+0xb2>
				LoRaChk = 1;
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_UART_RxCpltCallback+0x13c>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
			break;
 8002ad0:	e020      	b.n	8002b14 <HAL_UART_RxCpltCallback+0xf4>
				LoRaChk = 0;
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_UART_RxCpltCallback+0x13c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
			break;
 8002ad8:	e01c      	b.n	8002b14 <HAL_UART_RxCpltCallback+0xf4>
			if (LoRaRxData[0] == 0x03) {
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_UART_RxCpltCallback+0x140>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d106      	bne.n	8002af0 <HAL_UART_RxCpltCallback+0xd0>
				LoRaRxEnd = 1;
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_UART_RxCpltCallback+0x138>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
				LoRaChk = 0;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_UART_RxCpltCallback+0x13c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
			break;
 8002aee:	e011      	b.n	8002b14 <HAL_UART_RxCpltCallback+0xf4>
				LoRaRxBuffer[UART1_Len] = LoRaRxData[0];
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_UART_RxCpltCallback+0x128>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_UART_RxCpltCallback+0x140>)
 8002af8:	7819      	ldrb	r1, [r3, #0]
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_UART_RxCpltCallback+0x144>)
 8002afc:	5499      	strb	r1, [r3, r2]
				LoRaLen++;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_UART_RxCpltCallback+0x148>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_UART_RxCpltCallback+0x148>)
 8002b08:	701a      	strb	r2, [r3, #0]
			break;
 8002b0a:	e003      	b.n	8002b14 <HAL_UART_RxCpltCallback+0xf4>
			LoRaChk = 0;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_UART_RxCpltCallback+0x13c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
			break;
 8002b12:	bf00      	nop
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 1);
 8002b14:	2201      	movs	r2, #1
 8002b16:	4912      	ldr	r1, [pc, #72]	; (8002b60 <HAL_UART_RxCpltCallback+0x140>)
 8002b18:	4814      	ldr	r0, [pc, #80]	; (8002b6c <HAL_UART_RxCpltCallback+0x14c>)
 8002b1a:	f003 f874 	bl	8005c06 <HAL_UART_Receive_IT>
}
 8002b1e:	e007      	b.n	8002b30 <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART3) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_UART_RxCpltCallback+0x150>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d102      	bne.n	8002b30 <HAL_UART_RxCpltCallback+0x110>
		dataReceived = 1;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_UART_RxCpltCallback+0x154>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	200024a3 	.word	0x200024a3
 8002b40:	200025b4 	.word	0x200025b4
 8002b44:	2000246c 	.word	0x2000246c
 8002b48:	200024a2 	.word	0x200024a2
 8002b4c:	20002470 	.word	0x20002470
 8002b50:	20000270 	.word	0x20000270
 8002b54:	40004400 	.word	0x40004400
 8002b58:	20002464 	.word	0x20002464
 8002b5c:	200025b5 	.word	0x200025b5
 8002b60:	20002468 	.word	0x20002468
 8002b64:	20002424 	.word	0x20002424
 8002b68:	2000246a 	.word	0x2000246a
 8002b6c:	200002b8 	.word	0x200002b8
 8002b70:	40004800 	.word	0x40004800
 8002b74:	200025a4 	.word	0x200025a4

08002b78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>

08002b82 <gps_checksum>:


char *nmeaData[15];

int gps_checksum(char *nmea_data)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fd faea 	bl	8000164 <strlen>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d801      	bhi.n	8002b9a <gps_checksum+0x18>
 8002b96:	2300      	movs	r3, #0
 8002b98:	e038      	b.n	8002c0c <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fae2 	bl	8000164 <strlen>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fd fad9 	bl	8000164 <strlen>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e00a      	b.n	8002bde <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4053      	eors	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fac0 	bl	8000164 <strlen>
 8002be4:	4603      	mov	r3, r0
 8002be6:	1f5a      	subs	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d8ec      	bhi.n	8002bc8 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 ff80 	bl	8007afc <strtol>
 8002bfc:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d101      	bne.n	8002c0a <gps_checksum+0x88>
        return 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002c0a:	2300      	movs	r3, #0
    }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b0b7      	sub	sp, #220	; 0xdc
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	2264      	movs	r2, #100	; 0x64
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 fe83 	bl	8008938 <memset>
    char *marker = strtok(inputString, ",");
 8002c32:	49c5      	ldr	r1, [pc, #788]	; (8002f48 <nmea_GPGGA+0x334>)
 8002c34:	6838      	ldr	r0, [r7, #0]
 8002c36:	f005 fead 	bl	8008994 <strtok>
 8002c3a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002c3e:	e027      	b.n	8002c90 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002c40:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002c44:	f7fd fa8e 	bl	8000164 <strlen>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8002c50:	1c63      	adds	r3, r4, #1
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c56:	4610      	mov	r0, r2
 8002c58:	f003 ff9c 	bl	8006b94 <malloc>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	00a3      	lsls	r3, r4, #2
 8002c62:	33d8      	adds	r3, #216	; 0xd8
 8002c64:	443b      	add	r3, r7
 8002c66:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	33d8      	adds	r3, #216	; 0xd8
 8002c74:	443b      	add	r3, r7
 8002c76:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002c7a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f005 ff81 	bl	8008b86 <strcpy>
        marker = strtok(NULL, ",");
 8002c84:	49b0      	ldr	r1, [pc, #704]	; (8002f48 <nmea_GPGGA+0x334>)
 8002c86:	2000      	movs	r0, #0
 8002c88:	f005 fe84 	bl	8008994 <strtok>
 8002c8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002c90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1d3      	bne.n	8002c40 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	332c      	adds	r3, #44	; 0x2c
 8002cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f005 ff68 	bl	8008b86 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002cb6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002cba:	2b53      	cmp	r3, #83	; 0x53
 8002cbc:	d004      	beq.n	8002cc8 <nmea_GPGGA+0xb4>
 8002cbe:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8002cc4:	f040 815f 	bne.w	8002f86 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cce:	e010      	b.n	8002cf2 <nmea_GPGGA+0xde>
 8002cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd6:	4413      	add	r3, r2
 8002cd8:	7819      	ldrb	r1, [r3, #0]
 8002cda:	f107 021c 	add.w	r2, r7, #28
 8002cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce2:	4413      	add	r3, r2
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cec:	3301      	adds	r3, #1
 8002cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	ddea      	ble.n	8002cd0 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d00:	e011      	b.n	8002d26 <nmea_GPGGA+0x112>
 8002d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d08:	3302      	adds	r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	7819      	ldrb	r1, [r3, #0]
 8002d0e:	f107 0214 	add.w	r2, r7, #20
 8002d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d16:	4413      	add	r3, r2
 8002d18:	460a      	mov	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d20:	3301      	adds	r3, #1
 8002d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	dde9      	ble.n	8002d02 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	220a      	movs	r2, #10
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fee0 	bl	8007afc <strtol>
 8002d3c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 fe02 	bl	8007950 <strtof>
 8002d4c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002d50:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002d54:	f7fd ffcc 	bl	8000cf0 <__aeabi_i2f>
 8002d58:	4604      	mov	r4, r0
 8002d5a:	497c      	ldr	r1, [pc, #496]	; (8002f4c <nmea_GPGGA+0x338>)
 8002d5c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002d60:	f7fe f8ce 	bl	8000f00 <__aeabi_fdiv>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7fd ff0d 	bl	8000b88 <__addsf3>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fb63 	bl	800043c <__aeabi_f2d>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d84:	e010      	b.n	8002da8 <nmea_GPGGA+0x194>
 8002d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	7819      	ldrb	r1, [r3, #0]
 8002d90:	f107 0210 	add.w	r2, r7, #16
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d98:	4413      	add	r3, r2
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da2:	3301      	adds	r3, #1
 8002da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	ddea      	ble.n	8002d86 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002db6:	e011      	b.n	8002ddc <nmea_GPGGA+0x1c8>
 8002db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	7819      	ldrb	r1, [r3, #0]
 8002dc4:	f107 0208 	add.w	r2, r7, #8
 8002dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dcc:	4413      	add	r3, r2
 8002dce:	460a      	mov	r2, r1
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	dde9      	ble.n	8002db8 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	220a      	movs	r2, #10
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 fe85 	bl	8007afc <strtol>
 8002df2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 fda7 	bl	8007950 <strtof>
 8002e02:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002e06:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002e0a:	f7fd ff71 	bl	8000cf0 <__aeabi_i2f>
 8002e0e:	4604      	mov	r4, r0
 8002e10:	494e      	ldr	r1, [pc, #312]	; (8002f4c <nmea_GPGGA+0x338>)
 8002e12:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002e16:	f7fe f873 	bl	8000f00 <__aeabi_fdiv>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7fd feb2 	bl	8000b88 <__addsf3>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb08 	bl	800043c <__aeabi_f2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002e40:	f7fd fdbc 	bl	80009bc <__aeabi_dcmpeq>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d17a      	bne.n	8002f40 <nmea_GPGGA+0x32c>
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002e56:	f7fd fdb1 	bl	80009bc <__aeabi_dcmpeq>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d16f      	bne.n	8002f40 <nmea_GPGGA+0x32c>
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <nmea_GPGGA+0x33c>)
 8002e66:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002e6a:	f7fd fdb1 	bl	80009d0 <__aeabi_dcmplt>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d065      	beq.n	8002f40 <nmea_GPGGA+0x32c>
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <nmea_GPGGA+0x340>)
 8002e7a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002e7e:	f7fd fda7 	bl	80009d0 <__aeabi_dcmplt>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002e8e:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8002e98:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002ea0:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8002eaa:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 fd4d 	bl	8007950 <strtof>
 8002eb6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002ec2:	f7fe f8fd 	bl	80010c0 <__aeabi_fcmpeq>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <nmea_GPGGA+0x2be>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	e001      	b.n	8002ed6 <nmea_GPGGA+0x2c2>
 8002ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8002eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002edc:	220a      	movs	r2, #10
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 fe0b 	bl	8007afc <strtol>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	220a      	movs	r2, #10
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fe02 	bl	8007afc <strtol>
 8002ef8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bfcc      	ite	gt
 8002f04:	2301      	movgt	r3, #1
 8002f06:	2300      	movle	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fd1b 	bl	8007950 <strtof>
 8002f1a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002f26:	f7fe f8cb 	bl	80010c0 <__aeabi_fcmpeq>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <nmea_GPGGA+0x322>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	e001      	b.n	8002f3a <nmea_GPGGA+0x326>
 8002f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002f3e:	e022      	b.n	8002f86 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f46:	e016      	b.n	8002f76 <nmea_GPGGA+0x362>
 8002f48:	0800b0e8 	.word	0x0800b0e8
 8002f4c:	42700000 	.word	0x42700000
 8002f50:	40568000 	.word	0x40568000
 8002f54:	40668000 	.word	0x40668000
 8002f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	33d8      	adds	r3, #216	; 0xd8
 8002f60:	443b      	add	r3, r7
 8002f62:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fe1c 	bl	8006ba4 <free>
 8002f6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f70:	3301      	adds	r3, #1
 8002f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	dbea      	blt.n	8002f58 <nmea_GPGGA+0x344>
            return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e019      	b.n	8002fba <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f8c:	e00e      	b.n	8002fac <nmea_GPGGA+0x398>
 8002f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	33d8      	adds	r3, #216	; 0xd8
 8002f96:	443b      	add	r3, r7
 8002f98:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fe01 	bl	8006ba4 <free>
 8002fa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbea      	blt.n	8002f8e <nmea_GPGGA+0x37a>
    return 1;
 8002fb8:	2301      	movs	r3, #1
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	37dc      	adds	r7, #220	; 0xdc
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	bf00      	nop

08002fc4 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0a3      	sub	sp, #140	; 0x8c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f005 fcab 	bl	8008938 <memset>
    char *marker = strtok(inputString, ",");
 8002fe2:	493b      	ldr	r1, [pc, #236]	; (80030d0 <nmea_GPGSA+0x10c>)
 8002fe4:	6838      	ldr	r0, [r7, #0]
 8002fe6:	f005 fcd5 	bl	8008994 <strtok>
 8002fea:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8002fee:	e027      	b.n	8003040 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002ff0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002ff4:	f7fd f8b6 	bl	8000164 <strlen>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8003000:	1c63      	adds	r3, r4, #1
 8003002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003006:	4610      	mov	r0, r2
 8003008:	f003 fdc4 	bl	8006b94 <malloc>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	00a3      	lsls	r3, r4, #2
 8003012:	3388      	adds	r3, #136	; 0x88
 8003014:	443b      	add	r3, r7
 8003016:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800301a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301e:	3b01      	subs	r3, #1
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3388      	adds	r3, #136	; 0x88
 8003024:	443b      	add	r3, r7
 8003026:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800302a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800302e:	4618      	mov	r0, r3
 8003030:	f005 fda9 	bl	8008b86 <strcpy>
        marker = strtok(NULL, ",");
 8003034:	4926      	ldr	r1, [pc, #152]	; (80030d0 <nmea_GPGSA+0x10c>)
 8003036:	2000      	movs	r0, #0
 8003038:	f005 fcac 	bl	8008994 <strtok>
 800303c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1d3      	bne.n	8002ff0 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	220a      	movs	r2, #10
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fd54 	bl	8007afc <strtol>
 8003054:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003058:	2b01      	cmp	r3, #1
 800305a:	bfcc      	ite	gt
 800305c:	2301      	movgt	r3, #1
 800305e:	2300      	movle	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800306c:	2303      	movs	r3, #3
 800306e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003070:	e00e      	b.n	8003090 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	3388      	adds	r3, #136	; 0x88
 8003078:	443b      	add	r3, r7
 800307a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003086:	3301      	adds	r3, #1
 8003088:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800308a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308c:	3301      	adds	r3, #1
 800308e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003092:	2b0e      	cmp	r3, #14
 8003094:	dded      	ble.n	8003072 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 800309c:	2300      	movs	r3, #0
 800309e:	677b      	str	r3, [r7, #116]	; 0x74
 80030a0:	e00b      	b.n	80030ba <nmea_GPGSA+0xf6>
 80030a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	3388      	adds	r3, #136	; 0x88
 80030a8:	443b      	add	r3, r7
 80030aa:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fd78 	bl	8006ba4 <free>
 80030b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b6:	3301      	adds	r3, #1
 80030b8:	677b      	str	r3, [r7, #116]	; 0x74
 80030ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	429a      	cmp	r2, r3
 80030c2:	dbee      	blt.n	80030a2 <nmea_GPGSA+0xde>
    return 1;
 80030c4:	2301      	movs	r3, #1
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	378c      	adds	r7, #140	; 0x8c
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	0800b0e8 	.word	0x0800b0e8

080030d4 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b0b7      	sub	sp, #220	; 0xdc
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	2264      	movs	r2, #100	; 0x64
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 fc23 	bl	8008938 <memset>
    char *marker = strtok(inputString, ",");
 80030f2:	49b0      	ldr	r1, [pc, #704]	; (80033b4 <nmea_GPGLL+0x2e0>)
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f005 fc4d 	bl	8008994 <strtok>
 80030fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80030fe:	e027      	b.n	8003150 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003100:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003104:	f7fd f82e 	bl	8000164 <strlen>
 8003108:	4603      	mov	r3, r0
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003110:	1c63      	adds	r3, r4, #1
 8003112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003116:	4610      	mov	r0, r2
 8003118:	f003 fd3c 	bl	8006b94 <malloc>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	00a3      	lsls	r3, r4, #2
 8003122:	33d8      	adds	r3, #216	; 0xd8
 8003124:	443b      	add	r3, r7
 8003126:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 800312a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800312e:	3b01      	subs	r3, #1
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	33d8      	adds	r3, #216	; 0xd8
 8003134:	443b      	add	r3, r7
 8003136:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800313a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800313e:	4618      	mov	r0, r3
 8003140:	f005 fd21 	bl	8008b86 <strcpy>
        marker = strtok(NULL, ",");
 8003144:	499b      	ldr	r1, [pc, #620]	; (80033b4 <nmea_GPGLL+0x2e0>)
 8003146:	2000      	movs	r0, #0
 8003148:	f005 fc24 	bl	8008994 <strtok>
 800314c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003150:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1d3      	bne.n	8003100 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8003160:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003164:	2b53      	cmp	r3, #83	; 0x53
 8003166:	d004      	beq.n	8003172 <nmea_GPGLL+0x9e>
 8003168:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800316c:	2b4e      	cmp	r3, #78	; 0x4e
 800316e:	f040 811c 	bne.w	80033aa <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003178:	e010      	b.n	800319c <nmea_GPGLL+0xc8>
 800317a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800317c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003180:	4413      	add	r3, r2
 8003182:	7819      	ldrb	r1, [r3, #0]
 8003184:	f107 0220 	add.w	r2, r7, #32
 8003188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800318c:	4413      	add	r3, r2
 800318e:	460a      	mov	r2, r1
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003196:	3301      	adds	r3, #1
 8003198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800319c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	ddea      	ble.n	800317a <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031aa:	e011      	b.n	80031d0 <nmea_GPGLL+0xfc>
 80031ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031b2:	3302      	adds	r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	7819      	ldrb	r1, [r3, #0]
 80031b8:	f107 0218 	add.w	r2, r7, #24
 80031bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031c0:	4413      	add	r3, r2
 80031c2:	460a      	mov	r2, r1
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031ca:	3301      	adds	r3, #1
 80031cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	dde9      	ble.n	80031ac <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	220a      	movs	r2, #10
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f004 fc8b 	bl	8007afc <strtol>
 80031e6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80031ea:	f107 0318 	add.w	r3, r7, #24
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f004 fbad 	bl	8007950 <strtof>
 80031f6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80031fa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80031fe:	f7fd fd77 	bl	8000cf0 <__aeabi_i2f>
 8003202:	4604      	mov	r4, r0
 8003204:	496c      	ldr	r1, [pc, #432]	; (80033b8 <nmea_GPGLL+0x2e4>)
 8003206:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800320a:	f7fd fe79 	bl	8000f00 <__aeabi_fdiv>
 800320e:	4603      	mov	r3, r0
 8003210:	4619      	mov	r1, r3
 8003212:	4620      	mov	r0, r4
 8003214:	f7fd fcb8 	bl	8000b88 <__addsf3>
 8003218:	4603      	mov	r3, r0
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f90e 	bl	800043c <__aeabi_f2d>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003236:	e010      	b.n	800325a <nmea_GPGLL+0x186>
 8003238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800323e:	4413      	add	r3, r2
 8003240:	7819      	ldrb	r1, [r3, #0]
 8003242:	f107 0214 	add.w	r2, r7, #20
 8003246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800324a:	4413      	add	r3, r2
 800324c:	460a      	mov	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003254:	3301      	adds	r3, #1
 8003256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800325a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325e:	2b02      	cmp	r3, #2
 8003260:	ddea      	ble.n	8003238 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003268:	e011      	b.n	800328e <nmea_GPGLL+0x1ba>
 800326a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003270:	3303      	adds	r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	7819      	ldrb	r1, [r3, #0]
 8003276:	f107 020c 	add.w	r2, r7, #12
 800327a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800327e:	4413      	add	r3, r2
 8003280:	460a      	mov	r2, r1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003288:	3301      	adds	r3, #1
 800328a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800328e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003292:	2b05      	cmp	r3, #5
 8003294:	dde9      	ble.n	800326a <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	220a      	movs	r2, #10
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 fc2c 	bl	8007afc <strtol>
 80032a4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fb4e 	bl	8007950 <strtof>
 80032b4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80032b8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80032bc:	f7fd fd18 	bl	8000cf0 <__aeabi_i2f>
 80032c0:	4604      	mov	r4, r0
 80032c2:	493d      	ldr	r1, [pc, #244]	; (80033b8 <nmea_GPGLL+0x2e4>)
 80032c4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80032c8:	f7fd fe1a 	bl	8000f00 <__aeabi_fdiv>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4619      	mov	r1, r3
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7fd fc59 	bl	8000b88 <__addsf3>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f8af 	bl	800043c <__aeabi_f2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80032e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <nmea_GPGLL+0x246>
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80032f6:	f7fd fee3 	bl	80010c0 <__aeabi_fcmpeq>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10c      	bne.n	800331a <nmea_GPGLL+0x246>
 8003300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <nmea_GPGLL+0x246>
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003310:	f7fd fed6 	bl	80010c0 <__aeabi_fcmpeq>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01a      	beq.n	8003350 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003320:	e00e      	b.n	8003340 <nmea_GPGLL+0x26c>
 8003322:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	33d8      	adds	r3, #216	; 0xd8
 800332a:	443b      	add	r3, r7
 800332c:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fc37 	bl	8006ba4 <free>
 8003336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800333a:	3301      	adds	r3, #1
 800333c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003348:	429a      	cmp	r2, r3
 800334a:	dbea      	blt.n	8003322 <nmea_GPGLL+0x24e>
            return 0;
 800334c:	2300      	movs	r3, #0
 800334e:	e02d      	b.n	80033ac <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003356:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003360:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800336a:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003372:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800337a:	e00e      	b.n	800339a <nmea_GPGLL+0x2c6>
 800337c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	33d8      	adds	r3, #216	; 0xd8
 8003384:	443b      	add	r3, r7
 8003386:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fc0a 	bl	8006ba4 <free>
 8003390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003394:	3301      	adds	r3, #1
 8003396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800339a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800339e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a2:	429a      	cmp	r2, r3
 80033a4:	dbea      	blt.n	800337c <nmea_GPGLL+0x2a8>
            return 1;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	37dc      	adds	r7, #220	; 0xdc
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	0800b0e8 	.word	0x0800b0e8
 80033b8:	42700000 	.word	0x42700000

080033bc <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    memset(nmeaData, 0, sizeof(nmeaData));
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2100      	movs	r1, #0
 80033ca:	484e      	ldr	r0, [pc, #312]	; (8003504 <nmea_parse+0x148>)
 80033cc:	f005 fab4 	bl	8008938 <memset>
    char * token = strtok(buffer, "$");
 80033d0:	494d      	ldr	r1, [pc, #308]	; (8003508 <nmea_parse+0x14c>)
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f005 fade 	bl	8008994 <strtok>
 80033d8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80033de:	e01d      	b.n	800341c <nmea_parse+0x60>
    	nmeaData[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80033e0:	6978      	ldr	r0, [r7, #20]
 80033e2:	f7fc febf 	bl	8000164 <strlen>
 80033e6:	4603      	mov	r3, r0
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	693c      	ldr	r4, [r7, #16]
 80033ec:	1c63      	adds	r3, r4, #1
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	4610      	mov	r0, r2
 80033f2:	f003 fbcf 	bl	8006b94 <malloc>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b42      	ldr	r3, [pc, #264]	; (8003504 <nmea_parse+0x148>)
 80033fc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(nmeaData[cnt-1], token);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a3f      	ldr	r2, [pc, #252]	; (8003504 <nmea_parse+0x148>)
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	6979      	ldr	r1, [r7, #20]
 800340c:	4618      	mov	r0, r3
 800340e:	f005 fbba 	bl	8008b86 <strcpy>
        token = strtok(NULL, "$");
 8003412:	493d      	ldr	r1, [pc, #244]	; (8003508 <nmea_parse+0x14c>)
 8003414:	2000      	movs	r0, #0
 8003416:	f005 fabd 	bl	8008994 <strtok>
 800341a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1de      	bne.n	80033e0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e052      	b.n	80034ce <nmea_parse+0x112>
       if(strstr(nmeaData[i], "\r\n")!=NULL && gps_checksum(nmeaData[i])){
 8003428:	4a36      	ldr	r2, [pc, #216]	; (8003504 <nmea_parse+0x148>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	4936      	ldr	r1, [pc, #216]	; (800350c <nmea_parse+0x150>)
 8003432:	4618      	mov	r0, r3
 8003434:	f005 fb0a 	bl	8008a4c <strstr>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d044      	beq.n	80034c8 <nmea_parse+0x10c>
 800343e:	4a31      	ldr	r2, [pc, #196]	; (8003504 <nmea_parse+0x148>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fb9b 	bl	8002b82 <gps_checksum>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03a      	beq.n	80034c8 <nmea_parse+0x10c>
           if(strstr(nmeaData[i], "GNGLL")!=NULL){
 8003452:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <nmea_parse+0x148>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345a:	492d      	ldr	r1, [pc, #180]	; (8003510 <nmea_parse+0x154>)
 800345c:	4618      	mov	r0, r3
 800345e:	f005 faf5 	bl	8008a4c <strstr>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, nmeaData[i]);
 8003468:	4a26      	ldr	r2, [pc, #152]	; (8003504 <nmea_parse+0x148>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff fe2e 	bl	80030d4 <nmea_GPGLL>
 8003478:	e026      	b.n	80034c8 <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGSA")!=NULL){
 800347a:	4a22      	ldr	r2, [pc, #136]	; (8003504 <nmea_parse+0x148>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	4924      	ldr	r1, [pc, #144]	; (8003514 <nmea_parse+0x158>)
 8003484:	4618      	mov	r0, r3
 8003486:	f005 fae1 	bl	8008a4c <strstr>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, nmeaData[i]);
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <nmea_parse+0x148>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fd92 	bl	8002fc4 <nmea_GPGSA>
 80034a0:	e012      	b.n	80034c8 <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGGA")!=NULL){
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <nmea_parse+0x148>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034aa:	491b      	ldr	r1, [pc, #108]	; (8003518 <nmea_parse+0x15c>)
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 facd 	bl	8008a4c <strstr>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, nmeaData[i]);
 80034b8:	4a12      	ldr	r2, [pc, #72]	; (8003504 <nmea_parse+0x148>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fba6 	bl	8002c14 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	dba8      	blt.n	8003428 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(nmeaData[i]);
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	e009      	b.n	80034f0 <nmea_parse+0x134>
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <nmea_parse+0x148>)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fb5d 	bl	8006ba4 <free>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf1      	blt.n	80034dc <nmea_parse+0x120>


}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}
 8003502:	bf00      	nop
 8003504:	200025b8 	.word	0x200025b8
 8003508:	0800b0ec 	.word	0x0800b0ec
 800350c:	0800b0f0 	.word	0x0800b0f0
 8003510:	0800b0f4 	.word	0x0800b0f4
 8003514:	0800b0fc 	.word	0x0800b0fc
 8003518:	0800b104 	.word	0x0800b104

0800351c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_MspInit+0x5c>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_MspInit+0x5c>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6193      	str	r3, [r2, #24]
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_MspInit+0x5c>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_MspInit+0x5c>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_MspInit+0x5c>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	61d3      	str	r3, [r2, #28]
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_MspInit+0x5c>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_MspInit+0x60>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_MspInit+0x60>)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000

08003580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HAL_I2C_MspInit+0x70>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d123      	bne.n	80035e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_I2C_MspInit+0x74>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <HAL_I2C_MspInit+0x74>)
 80035a6:	f043 0308 	orr.w	r3, r3, #8
 80035aa:	6193      	str	r3, [r2, #24]
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_I2C_MspInit+0x74>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035b8:	23c0      	movs	r3, #192	; 0xc0
 80035ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035bc:	2312      	movs	r3, #18
 80035be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c0:	2303      	movs	r3, #3
 80035c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4619      	mov	r1, r3
 80035ca:	480b      	ldr	r0, [pc, #44]	; (80035f8 <HAL_I2C_MspInit+0x78>)
 80035cc:	f000 fe8a 	bl	80042e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_I2C_MspInit+0x74>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_I2C_MspInit+0x74>)
 80035d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035da:	61d3      	str	r3, [r2, #28]
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_I2C_MspInit+0x74>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40005400 	.word	0x40005400
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40010c00 	.word	0x40010c00

080035fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0320 	add.w	r3, r7, #32
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a72      	ldr	r2, [pc, #456]	; (80037e0 <HAL_UART_MspInit+0x1e4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d13a      	bne.n	8003692 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800361c:	4b71      	ldr	r3, [pc, #452]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4a70      	ldr	r2, [pc, #448]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 8003622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003626:	6193      	str	r3, [r2, #24]
 8003628:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	4b6b      	ldr	r3, [pc, #428]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6193      	str	r3, [r2, #24]
 8003640:	4b68      	ldr	r3, [pc, #416]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800364c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f107 0320 	add.w	r3, r7, #32
 800365e:	4619      	mov	r1, r3
 8003660:	4861      	ldr	r0, [pc, #388]	; (80037e8 <HAL_UART_MspInit+0x1ec>)
 8003662:	f000 fe3f 	bl	80042e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366c:	2300      	movs	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	4619      	mov	r1, r3
 800367a:	485b      	ldr	r0, [pc, #364]	; (80037e8 <HAL_UART_MspInit+0x1ec>)
 800367c:	f000 fe32 	bl	80042e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003680:	2200      	movs	r2, #0
 8003682:	2100      	movs	r1, #0
 8003684:	2025      	movs	r0, #37	; 0x25
 8003686:	f000 fb54 	bl	8003d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800368a:	2025      	movs	r0, #37	; 0x25
 800368c:	f000 fb6d 	bl	8003d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003690:	e0a2      	b.n	80037d8 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a55      	ldr	r2, [pc, #340]	; (80037ec <HAL_UART_MspInit+0x1f0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d138      	bne.n	800370e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800369c:	4b51      	ldr	r3, [pc, #324]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a6:	61d3      	str	r3, [r2, #28]
 80036a8:	4b4e      	ldr	r3, [pc, #312]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	4a4a      	ldr	r2, [pc, #296]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6193      	str	r3, [r2, #24]
 80036c0:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036cc:	2304      	movs	r3, #4
 80036ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f107 0320 	add.w	r3, r7, #32
 80036dc:	4619      	mov	r1, r3
 80036de:	4842      	ldr	r0, [pc, #264]	; (80037e8 <HAL_UART_MspInit+0x1ec>)
 80036e0:	f000 fe00 	bl	80042e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036e4:	2308      	movs	r3, #8
 80036e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f0:	f107 0320 	add.w	r3, r7, #32
 80036f4:	4619      	mov	r1, r3
 80036f6:	483c      	ldr	r0, [pc, #240]	; (80037e8 <HAL_UART_MspInit+0x1ec>)
 80036f8:	f000 fdf4 	bl	80042e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	2026      	movs	r0, #38	; 0x26
 8003702:	f000 fb16 	bl	8003d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003706:	2026      	movs	r0, #38	; 0x26
 8003708:	f000 fb2f 	bl	8003d6a <HAL_NVIC_EnableIRQ>
}
 800370c:	e064      	b.n	80037d8 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a37      	ldr	r2, [pc, #220]	; (80037f0 <HAL_UART_MspInit+0x1f4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d15f      	bne.n	80037d8 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800371e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003730:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	4a2b      	ldr	r2, [pc, #172]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	6193      	str	r3, [r2, #24]
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <HAL_UART_MspInit+0x1e8>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003752:	2303      	movs	r3, #3
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003756:	f107 0320 	add.w	r3, r7, #32
 800375a:	4619      	mov	r1, r3
 800375c:	4825      	ldr	r0, [pc, #148]	; (80037f4 <HAL_UART_MspInit+0x1f8>)
 800375e:	f000 fdc1 	bl	80042e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	f107 0320 	add.w	r3, r7, #32
 8003774:	4619      	mov	r1, r3
 8003776:	481f      	ldr	r0, [pc, #124]	; (80037f4 <HAL_UART_MspInit+0x1f8>)
 8003778:	f000 fdb4 	bl	80042e4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800377c:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_UART_MspInit+0x200>)
 8003780:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800379a:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 80037a2:	2220      	movs	r2, #32
 80037a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037ac:	4812      	ldr	r0, [pc, #72]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 80037ae:	f000 faf7 	bl	8003da0 <HAL_DMA_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80037b8:	f7ff f9de 	bl	8002b78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80037c2:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_UART_MspInit+0x1fc>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2100      	movs	r1, #0
 80037cc:	2027      	movs	r0, #39	; 0x27
 80037ce:	f000 fab0 	bl	8003d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037d2:	2027      	movs	r0, #39	; 0x27
 80037d4:	f000 fac9 	bl	8003d6a <HAL_NVIC_EnableIRQ>
}
 80037d8:	bf00      	nop
 80037da:	3730      	adds	r7, #48	; 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	40004400 	.word	0x40004400
 80037f0:	40004800 	.word	0x40004800
 80037f4:	40010c00 	.word	0x40010c00
 80037f8:	20000348 	.word	0x20000348
 80037fc:	40020030 	.word	0x40020030

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003804:	e7fe      	b.n	8003804 <NMI_Handler+0x4>

08003806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <MemManage_Handler+0x4>

08003812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <BusFault_Handler+0x4>

08003818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <UsageFault_Handler+0x4>

0800381e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003846:	f000 f95d 	bl	8003b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}

0800384e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8003852:	2001      	movs	r0, #1
 8003854:	f000 ff12 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}

0800385c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8003860:	2002      	movs	r0, #2
 8003862:	f000 ff0b 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Channel3_IRQHandler+0x10>)
 8003872:	f000 fc03 	bl	800407c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000348 	.word	0x20000348

08003880 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8003884:	2020      	movs	r0, #32
 8003886:	f000 fef9 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 800388a:	2040      	movs	r0, #64	; 0x40
 800388c:	f000 fef6 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8003890:	2080      	movs	r0, #128	; 0x80
 8003892:	f000 fef3 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <USART1_IRQHandler+0x10>)
 80038a2:	f002 fa33 	bl	8005d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000270 	.word	0x20000270

080038b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <USART2_IRQHandler+0x10>)
 80038b6:	f002 fa29 	bl	8005d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200002b8 	.word	0x200002b8

080038c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <USART3_IRQHandler+0x10>)
 80038ca:	f002 fa1f 	bl	8005d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000300 	.word	0x20000300

080038d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return 1;
 80038dc:	2301      	movs	r3, #1
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <_kill>:

int _kill(int pid, int sig)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038f0:	f005 f91c 	bl	8008b2c <__errno>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2216      	movs	r2, #22
 80038f8:	601a      	str	r2, [r3, #0]
  return -1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_exit>:

void _exit (int status)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800390e:	f04f 31ff 	mov.w	r1, #4294967295
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffe7 	bl	80038e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003918:	e7fe      	b.n	8003918 <_exit+0x12>

0800391a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e00a      	b.n	8003942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800392c:	f3af 8000 	nop.w
 8003930:	4601      	mov	r1, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	60ba      	str	r2, [r7, #8]
 8003938:	b2ca      	uxtb	r2, r1
 800393a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3301      	adds	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	dbf0      	blt.n	800392c <_read+0x12>
  }

  return len;
 800394a:	687b      	ldr	r3, [r7, #4]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800397a:	605a      	str	r2, [r3, #4]
  return 0;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <_isatty>:

int _isatty(int file)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003990:	2301      	movs	r3, #1
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039bc:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <_sbrk+0x5c>)
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <_sbrk+0x60>)
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <_sbrk+0x64>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <_sbrk+0x64>)
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <_sbrk+0x68>)
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <_sbrk+0x64>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d207      	bcs.n	80039f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e4:	f005 f8a2 	bl	8008b2c <__errno>
 80039e8:	4603      	mov	r3, r0
 80039ea:	220c      	movs	r2, #12
 80039ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	e009      	b.n	8003a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <_sbrk+0x64>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <_sbrk+0x64>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <_sbrk+0x64>)
 8003a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20005000 	.word	0x20005000
 8003a14:	00000400 	.word	0x00000400
 8003a18:	200025f4 	.word	0x200025f4
 8003a1c:	20002748 	.word	0x20002748

08003a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a2c:	f7ff fff8 	bl	8003a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a30:	480b      	ldr	r0, [pc, #44]	; (8003a60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a32:	490c      	ldr	r1, [pc, #48]	; (8003a64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a34:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a38:	e002      	b.n	8003a40 <LoopCopyDataInit>

08003a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3e:	3304      	adds	r3, #4

08003a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a44:	d3f9      	bcc.n	8003a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a48:	4c09      	ldr	r4, [pc, #36]	; (8003a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a4c:	e001      	b.n	8003a52 <LoopFillZerobss>

08003a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a50:	3204      	adds	r2, #4

08003a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a54:	d3fb      	bcc.n	8003a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a56:	f005 f86f 	bl	8008b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a5a:	f7fe fb07 	bl	800206c <main>
  bx lr
 8003a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8003a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a64:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003a68:	0800b5c0 	.word	0x0800b5c0
  ldr r2, =_sbss
 8003a6c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003a70:	20002748 	.word	0x20002748

08003a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a74:	e7fe      	b.n	8003a74 <ADC1_2_IRQHandler>
	...

08003a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_Init+0x28>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <HAL_Init+0x28>)
 8003a82:	f043 0310 	orr.w	r3, r3, #16
 8003a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a88:	2003      	movs	r0, #3
 8003a8a:	f000 f947 	bl	8003d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a8e:	200f      	movs	r0, #15
 8003a90:	f000 f808 	bl	8003aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a94:	f7ff fd42 	bl	800351c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000

08003aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_InitTick+0x54>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_InitTick+0x58>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f95f 	bl	8003d86 <HAL_SYSTICK_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00e      	b.n	8003af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b0f      	cmp	r3, #15
 8003ad6:	d80a      	bhi.n	8003aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f000 f927 	bl	8003d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ae4:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <HAL_InitTick+0x5c>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000028 	.word	0x20000028
 8003afc:	20000030 	.word	0x20000030
 8003b00:	2000002c 	.word	0x2000002c

08003b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_IncTick+0x1c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_IncTick+0x20>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_IncTick+0x20>)
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	20000030 	.word	0x20000030
 8003b24:	200025f8 	.word	0x200025f8

08003b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <HAL_GetTick+0x10>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	200025f8 	.word	0x200025f8

08003b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff fff0 	bl	8003b28 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d005      	beq.n	8003b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_Delay+0x44>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b62:	bf00      	nop
 8003b64:	f7ff ffe0 	bl	8003b28 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8f7      	bhi.n	8003b64 <HAL_Delay+0x28>
  {
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000030 	.word	0x20000030

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	60d3      	str	r3, [r2, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db0b      	blt.n	8003c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4906      	ldr	r1, [pc, #24]	; (8003c1c <__NVIC_EnableIRQ+0x34>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db0a      	blt.n	8003c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	490c      	ldr	r1, [pc, #48]	; (8003c6c <__NVIC_SetPriority+0x4c>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	440b      	add	r3, r1
 8003c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c48:	e00a      	b.n	8003c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <__NVIC_SetPriority+0x50>)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3b04      	subs	r3, #4
 8003c58:	0112      	lsls	r2, r2, #4
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	761a      	strb	r2, [r3, #24]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f1c3 0307 	rsb	r3, r3, #7
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	bf28      	it	cs
 8003c92:	2304      	movcs	r3, #4
 8003c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d902      	bls.n	8003ca4 <NVIC_EncodePriority+0x30>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3b03      	subs	r3, #3
 8003ca2:	e000      	b.n	8003ca6 <NVIC_EncodePriority+0x32>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	4313      	orrs	r3, r2
         );
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce8:	d301      	bcc.n	8003cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cea:	2301      	movs	r3, #1
 8003cec:	e00f      	b.n	8003d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <SysTick_Config+0x40>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf6:	210f      	movs	r1, #15
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	f7ff ff90 	bl	8003c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <SysTick_Config+0x40>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <SysTick_Config+0x40>)
 8003d08:	2207      	movs	r2, #7
 8003d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	e000e010 	.word	0xe000e010

08003d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff2d 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b086      	sub	sp, #24
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d44:	f7ff ff42 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	6978      	ldr	r0, [r7, #20]
 8003d50:	f7ff ff90 	bl	8003c74 <NVIC_EncodePriority>
 8003d54:	4602      	mov	r2, r0
 8003d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff5f 	bl	8003c20 <__NVIC_SetPriority>
}
 8003d62:	bf00      	nop
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff35 	bl	8003be8 <__NVIC_EnableIRQ>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ffa2 	bl	8003cd8 <SysTick_Config>
 8003d94:	4603      	mov	r3, r0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e043      	b.n	8003e3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_DMA_Init+0xa8>)
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_DMA_Init+0xac>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	009a      	lsls	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <HAL_DMA_Init+0xb0>)
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	bffdfff8 	.word	0xbffdfff8
 8003e4c:	cccccccd 	.word	0xcccccccd
 8003e50:	40020000 	.word	0x40020000

08003e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_DMA_Start_IT+0x20>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e04b      	b.n	8003f0c <HAL_DMA_Start_IT+0xb8>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d13a      	bne.n	8003efe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f9eb 	bl	8004288 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 020e 	orr.w	r2, r2, #14
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e00f      	b.n	8003eec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 020a 	orr.w	r2, r2, #10
 8003eea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e005      	b.n	8003f0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d008      	beq.n	8003f3e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2204      	movs	r2, #4
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e020      	b.n	8003f80 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 020e 	bic.w	r2, r2, #14
 8003f4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d005      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e051      	b.n	8004054 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 020e 	bic.w	r2, r2, #14
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <HAL_DMA_Abort_IT+0xd4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d029      	beq.n	800402e <HAL_DMA_Abort_IT+0xa2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a21      	ldr	r2, [pc, #132]	; (8004064 <HAL_DMA_Abort_IT+0xd8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d022      	beq.n	800402a <HAL_DMA_Abort_IT+0x9e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_DMA_Abort_IT+0xdc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01a      	beq.n	8004024 <HAL_DMA_Abort_IT+0x98>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_DMA_Abort_IT+0xe0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d012      	beq.n	800401e <HAL_DMA_Abort_IT+0x92>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <HAL_DMA_Abort_IT+0xe4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00a      	beq.n	8004018 <HAL_DMA_Abort_IT+0x8c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_DMA_Abort_IT+0xe8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d102      	bne.n	8004012 <HAL_DMA_Abort_IT+0x86>
 800400c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004010:	e00e      	b.n	8004030 <HAL_DMA_Abort_IT+0xa4>
 8004012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004016:	e00b      	b.n	8004030 <HAL_DMA_Abort_IT+0xa4>
 8004018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401c:	e008      	b.n	8004030 <HAL_DMA_Abort_IT+0xa4>
 800401e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004022:	e005      	b.n	8004030 <HAL_DMA_Abort_IT+0xa4>
 8004024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004028:	e002      	b.n	8004030 <HAL_DMA_Abort_IT+0xa4>
 800402a:	2310      	movs	r3, #16
 800402c:	e000      	b.n	8004030 <HAL_DMA_Abort_IT+0xa4>
 800402e:	2301      	movs	r3, #1
 8004030:	4a11      	ldr	r2, [pc, #68]	; (8004078 <HAL_DMA_Abort_IT+0xec>)
 8004032:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
    } 
  }
  return status;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40020008 	.word	0x40020008
 8004064:	4002001c 	.word	0x4002001c
 8004068:	40020030 	.word	0x40020030
 800406c:	40020044 	.word	0x40020044
 8004070:	40020058 	.word	0x40020058
 8004074:	4002006c 	.word	0x4002006c
 8004078:	40020000 	.word	0x40020000

0800407c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	2204      	movs	r2, #4
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d04f      	beq.n	8004144 <HAL_DMA_IRQHandler+0xc8>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04a      	beq.n	8004144 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a66      	ldr	r2, [pc, #408]	; (800426c <HAL_DMA_IRQHandler+0x1f0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d029      	beq.n	800412a <HAL_DMA_IRQHandler+0xae>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a65      	ldr	r2, [pc, #404]	; (8004270 <HAL_DMA_IRQHandler+0x1f4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d022      	beq.n	8004126 <HAL_DMA_IRQHandler+0xaa>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a63      	ldr	r2, [pc, #396]	; (8004274 <HAL_DMA_IRQHandler+0x1f8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01a      	beq.n	8004120 <HAL_DMA_IRQHandler+0xa4>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a62      	ldr	r2, [pc, #392]	; (8004278 <HAL_DMA_IRQHandler+0x1fc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d012      	beq.n	800411a <HAL_DMA_IRQHandler+0x9e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a60      	ldr	r2, [pc, #384]	; (800427c <HAL_DMA_IRQHandler+0x200>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00a      	beq.n	8004114 <HAL_DMA_IRQHandler+0x98>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a5f      	ldr	r2, [pc, #380]	; (8004280 <HAL_DMA_IRQHandler+0x204>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d102      	bne.n	800410e <HAL_DMA_IRQHandler+0x92>
 8004108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800410c:	e00e      	b.n	800412c <HAL_DMA_IRQHandler+0xb0>
 800410e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004112:	e00b      	b.n	800412c <HAL_DMA_IRQHandler+0xb0>
 8004114:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004118:	e008      	b.n	800412c <HAL_DMA_IRQHandler+0xb0>
 800411a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800411e:	e005      	b.n	800412c <HAL_DMA_IRQHandler+0xb0>
 8004120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004124:	e002      	b.n	800412c <HAL_DMA_IRQHandler+0xb0>
 8004126:	2340      	movs	r3, #64	; 0x40
 8004128:	e000      	b.n	800412c <HAL_DMA_IRQHandler+0xb0>
 800412a:	2304      	movs	r3, #4
 800412c:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_DMA_IRQHandler+0x208>)
 800412e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8094 	beq.w	8004262 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004142:	e08e      	b.n	8004262 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	2202      	movs	r2, #2
 800414a:	409a      	lsls	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d056      	beq.n	8004202 <HAL_DMA_IRQHandler+0x186>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d051      	beq.n	8004202 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 020a 	bic.w	r2, r2, #10
 800417a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a38      	ldr	r2, [pc, #224]	; (800426c <HAL_DMA_IRQHandler+0x1f0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d029      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x166>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a37      	ldr	r2, [pc, #220]	; (8004270 <HAL_DMA_IRQHandler+0x1f4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_DMA_IRQHandler+0x162>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a35      	ldr	r2, [pc, #212]	; (8004274 <HAL_DMA_IRQHandler+0x1f8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x15c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a34      	ldr	r2, [pc, #208]	; (8004278 <HAL_DMA_IRQHandler+0x1fc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d012      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x156>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a32      	ldr	r2, [pc, #200]	; (800427c <HAL_DMA_IRQHandler+0x200>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00a      	beq.n	80041cc <HAL_DMA_IRQHandler+0x150>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a31      	ldr	r2, [pc, #196]	; (8004280 <HAL_DMA_IRQHandler+0x204>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d102      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x14a>
 80041c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041c4:	e00e      	b.n	80041e4 <HAL_DMA_IRQHandler+0x168>
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	e00b      	b.n	80041e4 <HAL_DMA_IRQHandler+0x168>
 80041cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d0:	e008      	b.n	80041e4 <HAL_DMA_IRQHandler+0x168>
 80041d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d6:	e005      	b.n	80041e4 <HAL_DMA_IRQHandler+0x168>
 80041d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041dc:	e002      	b.n	80041e4 <HAL_DMA_IRQHandler+0x168>
 80041de:	2320      	movs	r3, #32
 80041e0:	e000      	b.n	80041e4 <HAL_DMA_IRQHandler+0x168>
 80041e2:	2302      	movs	r3, #2
 80041e4:	4a27      	ldr	r2, [pc, #156]	; (8004284 <HAL_DMA_IRQHandler+0x208>)
 80041e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d034      	beq.n	8004262 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004200:	e02f      	b.n	8004262 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2208      	movs	r2, #8
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d028      	beq.n	8004264 <HAL_DMA_IRQHandler+0x1e8>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 020e 	bic.w	r2, r2, #14
 800422a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
    }
  }
  return;
 8004262:	bf00      	nop
 8004264:	bf00      	nop
}
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40020008 	.word	0x40020008
 8004270:	4002001c 	.word	0x4002001c
 8004274:	40020030 	.word	0x40020030
 8004278:	40020044 	.word	0x40020044
 800427c:	40020058 	.word	0x40020058
 8004280:	4002006c 	.word	0x4002006c
 8004284:	40020000 	.word	0x40020000

08004288 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d108      	bne.n	80042c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042c6:	e007      	b.n	80042d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b08b      	sub	sp, #44	; 0x2c
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f6:	e169      	b.n	80045cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042f8:	2201      	movs	r2, #1
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	429a      	cmp	r2, r3
 8004312:	f040 8158 	bne.w	80045c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a9a      	ldr	r2, [pc, #616]	; (8004584 <HAL_GPIO_Init+0x2a0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d05e      	beq.n	80043de <HAL_GPIO_Init+0xfa>
 8004320:	4a98      	ldr	r2, [pc, #608]	; (8004584 <HAL_GPIO_Init+0x2a0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d875      	bhi.n	8004412 <HAL_GPIO_Init+0x12e>
 8004326:	4a98      	ldr	r2, [pc, #608]	; (8004588 <HAL_GPIO_Init+0x2a4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d058      	beq.n	80043de <HAL_GPIO_Init+0xfa>
 800432c:	4a96      	ldr	r2, [pc, #600]	; (8004588 <HAL_GPIO_Init+0x2a4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d86f      	bhi.n	8004412 <HAL_GPIO_Init+0x12e>
 8004332:	4a96      	ldr	r2, [pc, #600]	; (800458c <HAL_GPIO_Init+0x2a8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d052      	beq.n	80043de <HAL_GPIO_Init+0xfa>
 8004338:	4a94      	ldr	r2, [pc, #592]	; (800458c <HAL_GPIO_Init+0x2a8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d869      	bhi.n	8004412 <HAL_GPIO_Init+0x12e>
 800433e:	4a94      	ldr	r2, [pc, #592]	; (8004590 <HAL_GPIO_Init+0x2ac>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04c      	beq.n	80043de <HAL_GPIO_Init+0xfa>
 8004344:	4a92      	ldr	r2, [pc, #584]	; (8004590 <HAL_GPIO_Init+0x2ac>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d863      	bhi.n	8004412 <HAL_GPIO_Init+0x12e>
 800434a:	4a92      	ldr	r2, [pc, #584]	; (8004594 <HAL_GPIO_Init+0x2b0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d046      	beq.n	80043de <HAL_GPIO_Init+0xfa>
 8004350:	4a90      	ldr	r2, [pc, #576]	; (8004594 <HAL_GPIO_Init+0x2b0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d85d      	bhi.n	8004412 <HAL_GPIO_Init+0x12e>
 8004356:	2b12      	cmp	r3, #18
 8004358:	d82a      	bhi.n	80043b0 <HAL_GPIO_Init+0xcc>
 800435a:	2b12      	cmp	r3, #18
 800435c:	d859      	bhi.n	8004412 <HAL_GPIO_Init+0x12e>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <HAL_GPIO_Init+0x80>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	080043df 	.word	0x080043df
 8004368:	080043b9 	.word	0x080043b9
 800436c:	080043cb 	.word	0x080043cb
 8004370:	0800440d 	.word	0x0800440d
 8004374:	08004413 	.word	0x08004413
 8004378:	08004413 	.word	0x08004413
 800437c:	08004413 	.word	0x08004413
 8004380:	08004413 	.word	0x08004413
 8004384:	08004413 	.word	0x08004413
 8004388:	08004413 	.word	0x08004413
 800438c:	08004413 	.word	0x08004413
 8004390:	08004413 	.word	0x08004413
 8004394:	08004413 	.word	0x08004413
 8004398:	08004413 	.word	0x08004413
 800439c:	08004413 	.word	0x08004413
 80043a0:	08004413 	.word	0x08004413
 80043a4:	08004413 	.word	0x08004413
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	4a79      	ldr	r2, [pc, #484]	; (8004598 <HAL_GPIO_Init+0x2b4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043b6:	e02c      	b.n	8004412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	623b      	str	r3, [r7, #32]
          break;
 80043be:	e029      	b.n	8004414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	3304      	adds	r3, #4
 80043c6:	623b      	str	r3, [r7, #32]
          break;
 80043c8:	e024      	b.n	8004414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	3308      	adds	r3, #8
 80043d0:	623b      	str	r3, [r7, #32]
          break;
 80043d2:	e01f      	b.n	8004414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	330c      	adds	r3, #12
 80043da:	623b      	str	r3, [r7, #32]
          break;
 80043dc:	e01a      	b.n	8004414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043e6:	2304      	movs	r3, #4
 80043e8:	623b      	str	r3, [r7, #32]
          break;
 80043ea:	e013      	b.n	8004414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043f4:	2308      	movs	r3, #8
 80043f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	611a      	str	r2, [r3, #16]
          break;
 80043fe:	e009      	b.n	8004414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004400:	2308      	movs	r3, #8
 8004402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	615a      	str	r2, [r3, #20]
          break;
 800440a:	e003      	b.n	8004414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800440c:	2300      	movs	r3, #0
 800440e:	623b      	str	r3, [r7, #32]
          break;
 8004410:	e000      	b.n	8004414 <HAL_GPIO_Init+0x130>
          break;
 8004412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2bff      	cmp	r3, #255	; 0xff
 8004418:	d801      	bhi.n	800441e <HAL_GPIO_Init+0x13a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	e001      	b.n	8004422 <HAL_GPIO_Init+0x13e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2bff      	cmp	r3, #255	; 0xff
 8004428:	d802      	bhi.n	8004430 <HAL_GPIO_Init+0x14c>
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	e002      	b.n	8004436 <HAL_GPIO_Init+0x152>
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	3b08      	subs	r3, #8
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	210f      	movs	r1, #15
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	6a39      	ldr	r1, [r7, #32]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80b1 	beq.w	80045c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004464:	4b4d      	ldr	r3, [pc, #308]	; (800459c <HAL_GPIO_Init+0x2b8>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	4a4c      	ldr	r2, [pc, #304]	; (800459c <HAL_GPIO_Init+0x2b8>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6193      	str	r3, [r2, #24]
 8004470:	4b4a      	ldr	r3, [pc, #296]	; (800459c <HAL_GPIO_Init+0x2b8>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800447c:	4a48      	ldr	r2, [pc, #288]	; (80045a0 <HAL_GPIO_Init+0x2bc>)
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	220f      	movs	r2, #15
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a40      	ldr	r2, [pc, #256]	; (80045a4 <HAL_GPIO_Init+0x2c0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_GPIO_Init+0x1ec>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <HAL_GPIO_Init+0x2c4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00d      	beq.n	80044cc <HAL_GPIO_Init+0x1e8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3e      	ldr	r2, [pc, #248]	; (80045ac <HAL_GPIO_Init+0x2c8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <HAL_GPIO_Init+0x1e4>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3d      	ldr	r2, [pc, #244]	; (80045b0 <HAL_GPIO_Init+0x2cc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_GPIO_Init+0x1e0>
 80044c0:	2303      	movs	r3, #3
 80044c2:	e006      	b.n	80044d2 <HAL_GPIO_Init+0x1ee>
 80044c4:	2304      	movs	r3, #4
 80044c6:	e004      	b.n	80044d2 <HAL_GPIO_Init+0x1ee>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e002      	b.n	80044d2 <HAL_GPIO_Init+0x1ee>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_GPIO_Init+0x1ee>
 80044d0:	2300      	movs	r3, #0
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	f002 0203 	and.w	r2, r2, #3
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	4093      	lsls	r3, r2
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044e2:	492f      	ldr	r1, [pc, #188]	; (80045a0 <HAL_GPIO_Init+0x2bc>)
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	3302      	adds	r3, #2
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044fc:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	492c      	ldr	r1, [pc, #176]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	43db      	mvns	r3, r3
 8004512:	4928      	ldr	r1, [pc, #160]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004514:	4013      	ands	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004524:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4922      	ldr	r1, [pc, #136]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4313      	orrs	r3, r2
 800452e:	60cb      	str	r3, [r1, #12]
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	43db      	mvns	r3, r3
 800453a:	491e      	ldr	r1, [pc, #120]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 800453c:	4013      	ands	r3, r2
 800453e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	4918      	ldr	r1, [pc, #96]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800455a:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	43db      	mvns	r3, r3
 8004562:	4914      	ldr	r1, [pc, #80]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004564:	4013      	ands	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004574:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_GPIO_Init+0x2d0>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
 8004580:	e021      	b.n	80045c6 <HAL_GPIO_Init+0x2e2>
 8004582:	bf00      	nop
 8004584:	10320000 	.word	0x10320000
 8004588:	10310000 	.word	0x10310000
 800458c:	10220000 	.word	0x10220000
 8004590:	10210000 	.word	0x10210000
 8004594:	10120000 	.word	0x10120000
 8004598:	10110000 	.word	0x10110000
 800459c:	40021000 	.word	0x40021000
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40010800 	.word	0x40010800
 80045a8:	40010c00 	.word	0x40010c00
 80045ac:	40011000 	.word	0x40011000
 80045b0:	40011400 	.word	0x40011400
 80045b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_GPIO_Init+0x304>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	43db      	mvns	r3, r3
 80045c0:	4909      	ldr	r1, [pc, #36]	; (80045e8 <HAL_GPIO_Init+0x304>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	3301      	adds	r3, #1
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	fa22 f303 	lsr.w	r3, r2, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f47f ae8e 	bne.w	80042f8 <HAL_GPIO_Init+0x14>
  }
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	372c      	adds	r7, #44	; 0x2c
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	40010400 	.word	0x40010400

080045ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e001      	b.n	800460e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	807b      	strh	r3, [r7, #2]
 8004626:	4613      	mov	r3, r2
 8004628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800462a:	787b      	ldrb	r3, [r7, #1]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004636:	e003      	b.n	8004640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	041a      	lsls	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	611a      	str	r2, [r3, #16]
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800465c:	887a      	ldrh	r2, [r7, #2]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4013      	ands	r3, r2
 8004662:	041a      	lsls	r2, r3, #16
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	43d9      	mvns	r1, r3
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	400b      	ands	r3, r1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	611a      	str	r2, [r3, #16]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004692:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe f98a 	bl	80029b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40010400 	.word	0x40010400

080046ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e12b      	b.n	8004916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe ff54 	bl	8003580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004710:	f001 f960 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4a81      	ldr	r2, [pc, #516]	; (8004920 <HAL_I2C_Init+0x274>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d807      	bhi.n	8004730 <HAL_I2C_Init+0x84>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a80      	ldr	r2, [pc, #512]	; (8004924 <HAL_I2C_Init+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e006      	b.n	800473e <HAL_I2C_Init+0x92>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a7d      	ldr	r2, [pc, #500]	; (8004928 <HAL_I2C_Init+0x27c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	bf94      	ite	ls
 8004738:	2301      	movls	r3, #1
 800473a:	2300      	movhi	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0e7      	b.n	8004916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a78      	ldr	r2, [pc, #480]	; (800492c <HAL_I2C_Init+0x280>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0c9b      	lsrs	r3, r3, #18
 8004750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a6a      	ldr	r2, [pc, #424]	; (8004920 <HAL_I2C_Init+0x274>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d802      	bhi.n	8004780 <HAL_I2C_Init+0xd4>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3301      	adds	r3, #1
 800477e:	e009      	b.n	8004794 <HAL_I2C_Init+0xe8>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	4a69      	ldr	r2, [pc, #420]	; (8004930 <HAL_I2C_Init+0x284>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	3301      	adds	r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	430b      	orrs	r3, r1
 800479a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	495c      	ldr	r1, [pc, #368]	; (8004920 <HAL_I2C_Init+0x274>)
 80047b0:	428b      	cmp	r3, r1
 80047b2:	d819      	bhi.n	80047e8 <HAL_I2C_Init+0x13c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e59      	subs	r1, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c8:	400b      	ands	r3, r1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_I2C_Init+0x138>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1e59      	subs	r1, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	e051      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e04f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d111      	bne.n	8004814 <HAL_I2C_Init+0x168>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e012      	b.n	800483a <HAL_I2C_Init+0x18e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e58      	subs	r0, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	0099      	lsls	r1, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x196>
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10e      	bne.n	8004868 <HAL_I2C_Init+0x1bc>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e58      	subs	r0, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	440b      	add	r3, r1
 8004858:	fbb0 f3f3 	udiv	r3, r0, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	e00f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e58      	subs	r0, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	0099      	lsls	r1, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	fbb0 f3f3 	udiv	r3, r0, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	6809      	ldr	r1, [r1, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6911      	ldr	r1, [r2, #16]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	000186a0 	.word	0x000186a0
 8004924:	001e847f 	.word	0x001e847f
 8004928:	003d08ff 	.word	0x003d08ff
 800492c:	431bde83 	.word	0x431bde83
 8004930:	10624dd3 	.word	0x10624dd3

08004934 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	461a      	mov	r2, r3
 8004940:	460b      	mov	r3, r1
 8004942:	817b      	strh	r3, [r7, #10]
 8004944:	4613      	mov	r3, r2
 8004946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004948:	f7ff f8ee 	bl	8003b28 <HAL_GetTick>
 800494c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b20      	cmp	r3, #32
 8004958:	f040 80e0 	bne.w	8004b1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2319      	movs	r3, #25
 8004962:	2201      	movs	r2, #1
 8004964:	4970      	ldr	r1, [pc, #448]	; (8004b28 <HAL_I2C_Master_Transmit+0x1f4>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fa92 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	e0d3      	b.n	8004b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_I2C_Master_Transmit+0x50>
 8004980:	2302      	movs	r3, #2
 8004982:	e0cc      	b.n	8004b1e <HAL_I2C_Master_Transmit+0x1ea>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d007      	beq.n	80049aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2221      	movs	r2, #33	; 0x21
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2210      	movs	r2, #16
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	893a      	ldrh	r2, [r7, #8]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a50      	ldr	r2, [pc, #320]	; (8004b2c <HAL_I2C_Master_Transmit+0x1f8>)
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049ec:	8979      	ldrh	r1, [r7, #10]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f9ca 	bl	8004d8c <I2C_MasterRequestWrite>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e08d      	b.n	8004b1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a18:	e066      	b.n	8004ae8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	6a39      	ldr	r1, [r7, #32]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fb50 	bl	80050c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d107      	bne.n	8004a42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e06b      	b.n	8004b1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d11b      	bne.n	8004abc <HAL_I2C_Master_Transmit+0x188>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d017      	beq.n	8004abc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	6a39      	ldr	r1, [r7, #32]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb47 	bl	8005154 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d107      	bne.n	8004ae4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01a      	b.n	8004b1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d194      	bne.n	8004a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e000      	b.n	8004b1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	00100002 	.word	0x00100002
 8004b2c:	ffff0000 	.word	0xffff0000

08004b30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7fe fff2 	bl	8003b28 <HAL_GetTick>
 8004b44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	f040 8111 	bne.w	8004d7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2319      	movs	r3, #25
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4988      	ldr	r1, [pc, #544]	; (8004d84 <HAL_I2C_IsDeviceReady+0x254>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f994 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e104      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_I2C_IsDeviceReady+0x50>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0fd      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d007      	beq.n	8004ba6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2224      	movs	r2, #36	; 0x24
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a70      	ldr	r2, [pc, #448]	; (8004d88 <HAL_I2C_IsDeviceReady+0x258>)
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f952 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c00:	d103      	bne.n	8004c0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e0b6      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe ff83 	bl	8003b28 <HAL_GetTick>
 8004c22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c52:	e025      	b.n	8004ca0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c54:	f7fe ff68 	bl	8003b28 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <HAL_I2C_IsDeviceReady+0x13a>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	22a0      	movs	r2, #160	; 0xa0
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2ba0      	cmp	r3, #160	; 0xa0
 8004caa:	d005      	beq.n	8004cb8 <HAL_I2C_IsDeviceReady+0x188>
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_I2C_IsDeviceReady+0x188>
 8004cb2:	7dbb      	ldrb	r3, [r7, #22]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0cd      	beq.n	8004c54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d129      	bne.n	8004d22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2319      	movs	r3, #25
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4921      	ldr	r1, [pc, #132]	; (8004d84 <HAL_I2C_IsDeviceReady+0x254>)
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f8c6 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e036      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e02c      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2319      	movs	r3, #25
 8004d42:	2201      	movs	r2, #1
 8004d44:	490f      	ldr	r1, [pc, #60]	; (8004d84 <HAL_I2C_IsDeviceReady+0x254>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8a2 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e012      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	f4ff af32 	bcc.w	8004bca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	00100002 	.word	0x00100002
 8004d88:	ffff0000 	.word	0xffff0000

08004d8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d006      	beq.n	8004db6 <I2C_MasterRequestWrite+0x2a>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d003      	beq.n	8004db6 <I2C_MasterRequestWrite+0x2a>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db4:	d108      	bne.n	8004dc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e00b      	b.n	8004de0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	2b12      	cmp	r3, #18
 8004dce:	d107      	bne.n	8004de0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f84f 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e06:	d103      	bne.n	8004e10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e035      	b.n	8004e80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1c:	d108      	bne.n	8004e30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e1e:	897b      	ldrh	r3, [r7, #10]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e2c:	611a      	str	r2, [r3, #16]
 8004e2e:	e01b      	b.n	8004e68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e30:	897b      	ldrh	r3, [r7, #10]
 8004e32:	11db      	asrs	r3, r3, #7
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 0306 	and.w	r3, r3, #6
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f063 030f 	orn	r3, r3, #15
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	490e      	ldr	r1, [pc, #56]	; (8004e88 <I2C_MasterRequestWrite+0xfc>)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f898 	bl	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e010      	b.n	8004e80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4907      	ldr	r1, [pc, #28]	; (8004e8c <I2C_MasterRequestWrite+0x100>)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f888 	bl	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	00010008 	.word	0x00010008
 8004e8c:	00010002 	.word	0x00010002

08004e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea0:	e048      	b.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d044      	beq.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fe fe3d 	bl	8003b28 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d139      	bne.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10d      	bne.n	8004ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	43da      	mvns	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	e00c      	b.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d116      	bne.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e023      	b.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10d      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	43da      	mvns	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	e00c      	b.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d093      	beq.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f92:	e071      	b.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d123      	bne.n	8004fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e067      	b.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d041      	beq.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff4:	f7fe fd98 	bl	8003b28 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d302      	bcc.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d136      	bne.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10c      	bne.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e00b      	b.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	43da      	mvns	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e021      	b.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10c      	bne.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	43da      	mvns	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e00b      	b.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	43da      	mvns	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf14      	ite	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	2300      	moveq	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f47f af6d 	bne.w	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d0:	e034      	b.n	800513c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f886 	bl	80051e4 <I2C_IsAcknowledgeFailed>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e034      	b.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d028      	beq.n	800513c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fe fd1d 	bl	8003b28 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d11d      	bne.n	800513c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510a:	2b80      	cmp	r3, #128	; 0x80
 800510c:	d016      	beq.n	800513c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e007      	b.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b80      	cmp	r3, #128	; 0x80
 8005148:	d1c3      	bne.n	80050d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005160:	e034      	b.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f83e 	bl	80051e4 <I2C_IsAcknowledgeFailed>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e034      	b.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d028      	beq.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fe fcd5 	bl	8003b28 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11d      	bne.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d016      	beq.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d1c3      	bne.n	8005162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fa:	d11b      	bne.n	8005234 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005204:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	f043 0204 	orr.w	r2, r3, #4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e272      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8087 	beq.w	800536e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005260:	4b92      	ldr	r3, [pc, #584]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b04      	cmp	r3, #4
 800526a:	d00c      	beq.n	8005286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800526c:	4b8f      	ldr	r3, [pc, #572]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b08      	cmp	r3, #8
 8005276:	d112      	bne.n	800529e <HAL_RCC_OscConfig+0x5e>
 8005278:	4b8c      	ldr	r3, [pc, #560]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005284:	d10b      	bne.n	800529e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005286:	4b89      	ldr	r3, [pc, #548]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d06c      	beq.n	800536c <HAL_RCC_OscConfig+0x12c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d168      	bne.n	800536c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e24c      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x76>
 80052a8:	4b80      	ldr	r3, [pc, #512]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a7f      	ldr	r2, [pc, #508]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e02e      	b.n	8005314 <HAL_RCC_OscConfig+0xd4>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x98>
 80052be:	4b7b      	ldr	r3, [pc, #492]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a7a      	ldr	r2, [pc, #488]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	4b78      	ldr	r3, [pc, #480]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a77      	ldr	r2, [pc, #476]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e01d      	b.n	8005314 <HAL_RCC_OscConfig+0xd4>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e0:	d10c      	bne.n	80052fc <HAL_RCC_OscConfig+0xbc>
 80052e2:	4b72      	ldr	r3, [pc, #456]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a71      	ldr	r2, [pc, #452]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b6f      	ldr	r3, [pc, #444]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6e      	ldr	r2, [pc, #440]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0xd4>
 80052fc:	4b6b      	ldr	r3, [pc, #428]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6a      	ldr	r2, [pc, #424]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b68      	ldr	r3, [pc, #416]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a67      	ldr	r2, [pc, #412]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 800530e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fe fc04 	bl	8003b28 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005324:	f7fe fc00 	bl	8003b28 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e200      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	4b5d      	ldr	r3, [pc, #372]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0xe4>
 8005342:	e014      	b.n	800536e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fe fbf0 	bl	8003b28 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800534c:	f7fe fbec 	bl	8003b28 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1ec      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	4b53      	ldr	r3, [pc, #332]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x10c>
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d063      	beq.n	8005442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800537a:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005386:	4b49      	ldr	r3, [pc, #292]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b08      	cmp	r3, #8
 8005390:	d11c      	bne.n	80053cc <HAL_RCC_OscConfig+0x18c>
 8005392:	4b46      	ldr	r3, [pc, #280]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d116      	bne.n	80053cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539e:	4b43      	ldr	r3, [pc, #268]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_RCC_OscConfig+0x176>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d001      	beq.n	80053b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e1c0      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4939      	ldr	r1, [pc, #228]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ca:	e03a      	b.n	8005442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d020      	beq.n	8005416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fe fba5 	bl	8003b28 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fe fba1 	bl	8003b28 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e1a1      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4927      	ldr	r1, [pc, #156]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
 8005414:	e015      	b.n	8005442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fe fb84 	bl	8003b28 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005424:	f7fe fb80 	bl	8003b28 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e180      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03a      	beq.n	80054c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d019      	beq.n	800548a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005456:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545c:	f7fe fb64 	bl	8003b28 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005464:	f7fe fb60 	bl	8003b28 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e160      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <HAL_RCC_OscConfig+0x26c>)
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005482:	2001      	movs	r0, #1
 8005484:	f000 face 	bl	8005a24 <RCC_Delay>
 8005488:	e01c      	b.n	80054c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <HAL_RCC_OscConfig+0x274>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005490:	f7fe fb4a 	bl	8003b28 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005496:	e00f      	b.n	80054b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005498:	f7fe fb46 	bl	8003b28 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d908      	bls.n	80054b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e146      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
 80054b0:	42420000 	.word	0x42420000
 80054b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	4b92      	ldr	r3, [pc, #584]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e9      	bne.n	8005498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a6 	beq.w	800561e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d6:	4b8b      	ldr	r3, [pc, #556]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	4b88      	ldr	r3, [pc, #544]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	4a87      	ldr	r2, [pc, #540]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ec:	61d3      	str	r3, [r2, #28]
 80054ee:	4b85      	ldr	r3, [pc, #532]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fe:	4b82      	ldr	r3, [pc, #520]	; (8005708 <HAL_RCC_OscConfig+0x4c8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d118      	bne.n	800553c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550a:	4b7f      	ldr	r3, [pc, #508]	; (8005708 <HAL_RCC_OscConfig+0x4c8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7e      	ldr	r2, [pc, #504]	; (8005708 <HAL_RCC_OscConfig+0x4c8>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005516:	f7fe fb07 	bl	8003b28 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551e:	f7fe fb03 	bl	8003b28 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b64      	cmp	r3, #100	; 0x64
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e103      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	4b75      	ldr	r3, [pc, #468]	; (8005708 <HAL_RCC_OscConfig+0x4c8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x312>
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4a6e      	ldr	r2, [pc, #440]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6213      	str	r3, [r2, #32]
 8005550:	e02d      	b.n	80055ae <HAL_RCC_OscConfig+0x36e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x334>
 800555a:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4a69      	ldr	r2, [pc, #420]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	6213      	str	r3, [r2, #32]
 8005566:	4b67      	ldr	r3, [pc, #412]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4a66      	ldr	r2, [pc, #408]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	6213      	str	r3, [r2, #32]
 8005572:	e01c      	b.n	80055ae <HAL_RCC_OscConfig+0x36e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d10c      	bne.n	8005596 <HAL_RCC_OscConfig+0x356>
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4a60      	ldr	r2, [pc, #384]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	6213      	str	r3, [r2, #32]
 8005588:	4b5e      	ldr	r3, [pc, #376]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	4a5d      	ldr	r2, [pc, #372]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6213      	str	r3, [r2, #32]
 8005594:	e00b      	b.n	80055ae <HAL_RCC_OscConfig+0x36e>
 8005596:	4b5b      	ldr	r3, [pc, #364]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4a5a      	ldr	r2, [pc, #360]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	6213      	str	r3, [r2, #32]
 80055a2:	4b58      	ldr	r3, [pc, #352]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4a57      	ldr	r2, [pc, #348]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80055a8:	f023 0304 	bic.w	r3, r3, #4
 80055ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d015      	beq.n	80055e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b6:	f7fe fab7 	bl	8003b28 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fe fab3 	bl	8003b28 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e0b1      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ee      	beq.n	80055be <HAL_RCC_OscConfig+0x37e>
 80055e0:	e014      	b.n	800560c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fe faa1 	bl	8003b28 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fe fa9d 	bl	8003b28 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e09b      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005600:	4b40      	ldr	r3, [pc, #256]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ee      	bne.n	80055ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d105      	bne.n	800561e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005612:	4b3c      	ldr	r3, [pc, #240]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	4a3b      	ldr	r2, [pc, #236]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8087 	beq.w	8005736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005628:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b08      	cmp	r3, #8
 8005632:	d061      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d146      	bne.n	80056ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563c:	4b33      	ldr	r3, [pc, #204]	; (800570c <HAL_RCC_OscConfig+0x4cc>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005642:	f7fe fa71 	bl	8003b28 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fe fa6d 	bl	8003b28 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e06d      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d108      	bne.n	8005684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005672:	4b24      	ldr	r3, [pc, #144]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4921      	ldr	r1, [pc, #132]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005684:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a19      	ldr	r1, [r3, #32]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	430b      	orrs	r3, r1
 8005696:	491b      	ldr	r1, [pc, #108]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800569c:	4b1b      	ldr	r3, [pc, #108]	; (800570c <HAL_RCC_OscConfig+0x4cc>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fe fa41 	bl	8003b28 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fe fa3d 	bl	8003b28 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e03d      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056bc:	4b11      	ldr	r3, [pc, #68]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x46a>
 80056c8:	e035      	b.n	8005736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <HAL_RCC_OscConfig+0x4cc>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe fa2a 	bl	8003b28 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fe fa26 	bl	8003b28 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e026      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x498>
 80056f6:	e01e      	b.n	8005736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d107      	bne.n	8005710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e019      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
 8005704:	40021000 	.word	0x40021000
 8005708:	40007000 	.word	0x40007000
 800570c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_OscConfig+0x500>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	429a      	cmp	r2, r3
 8005722:	d106      	bne.n	8005732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000

08005744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0d0      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005758:	4b6a      	ldr	r3, [pc, #424]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d910      	bls.n	8005788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b67      	ldr	r3, [pc, #412]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 0207 	bic.w	r2, r3, #7
 800576e:	4965      	ldr	r1, [pc, #404]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	4313      	orrs	r3, r2
 8005774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4a58      	ldr	r2, [pc, #352]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4a52      	ldr	r2, [pc, #328]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d040      	beq.n	8005864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d115      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d107      	bne.n	8005812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005802:	4b41      	ldr	r3, [pc, #260]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e073      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005812:	4b3d      	ldr	r3, [pc, #244]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06b      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005822:	4b39      	ldr	r3, [pc, #228]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4936      	ldr	r1, [pc, #216]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	4313      	orrs	r3, r2
 8005832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005834:	f7fe f978 	bl	8003b28 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583a:	e00a      	b.n	8005852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583c:	f7fe f974 	bl	8003b28 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e053      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	4b2d      	ldr	r3, [pc, #180]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 020c 	and.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	429a      	cmp	r2, r3
 8005862:	d1eb      	bne.n	800583c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005864:	4b27      	ldr	r3, [pc, #156]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d210      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 0207 	bic.w	r2, r3, #7
 800587a:	4922      	ldr	r1, [pc, #136]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490a      	ldr	r1, [pc, #40]	; (800590c <HAL_RCC_ClockConfig+0x1c8>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <HAL_RCC_ClockConfig+0x1cc>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_ClockConfig+0x1d0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe f8d6 	bl	8003aa4 <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40022000 	.word	0x40022000
 8005908:	40021000 	.word	0x40021000
 800590c:	0800b10c 	.word	0x0800b10c
 8005910:	20000028 	.word	0x20000028
 8005914:	2000002c 	.word	0x2000002c

08005918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005932:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b04      	cmp	r3, #4
 8005940:	d002      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x30>
 8005942:	2b08      	cmp	r3, #8
 8005944:	d003      	beq.n	800594e <HAL_RCC_GetSysClockFreq+0x36>
 8005946:	e027      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800594a:	613b      	str	r3, [r7, #16]
      break;
 800594c:	e027      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	0c9b      	lsrs	r3, r3, #18
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005958:	5cd3      	ldrb	r3, [r2, r3]
 800595a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005966:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	0c5b      	lsrs	r3, r3, #17
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005972:	5cd3      	ldrb	r3, [r2, r3]
 8005974:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800597a:	fb03 f202 	mul.w	r2, r3, r2
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e004      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	613b      	str	r3, [r7, #16]
      break;
 8005996:	e002      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800599a:	613b      	str	r3, [r7, #16]
      break;
 800599c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800599e:	693b      	ldr	r3, [r7, #16]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000
 80059b0:	007a1200 	.word	0x007a1200
 80059b4:	0800b124 	.word	0x0800b124
 80059b8:	0800b134 	.word	0x0800b134
 80059bc:	003d0900 	.word	0x003d0900

080059c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059c4:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	20000028 	.word	0x20000028

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059d8:	f7ff fff2 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4903      	ldr	r1, [pc, #12]	; (80059f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000
 80059f8:	0800b11c 	.word	0x0800b11c

080059fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a00:	f7ff ffde 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	0adb      	lsrs	r3, r3, #11
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	0800b11c 	.word	0x0800b11c

08005a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <RCC_Delay+0x34>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <RCC_Delay+0x38>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	0a5b      	lsrs	r3, r3, #9
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a40:	bf00      	nop
  }
  while (Delay --);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	60fa      	str	r2, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f9      	bne.n	8005a40 <RCC_Delay+0x1c>
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr
 8005a58:	20000028 	.word	0x20000028
 8005a5c:	10624dd3 	.word	0x10624dd3

08005a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e042      	b.n	8005af8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fd fdb8 	bl	80035fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2224      	movs	r2, #36	; 0x24
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 ffdf 	bl	8006a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d16d      	bne.n	8005bfc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_UART_Transmit+0x2c>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e066      	b.n	8005bfe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2221      	movs	r2, #33	; 0x21
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b3e:	f7fd fff3 	bl	8003b28 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d108      	bne.n	8005b6c <HAL_UART_Transmit+0x6c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	e003      	b.n	8005b74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b74:	e02a      	b.n	8005bcc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fc6e 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e036      	b.n	8005bfe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	3302      	adds	r3, #2
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e007      	b.n	8005bbe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1cf      	bne.n	8005b76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2140      	movs	r1, #64	; 0x40
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fc3e 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e006      	b.n	8005bfe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d112      	bne.n	8005c46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_UART_Receive_IT+0x26>
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e00b      	b.n	8005c48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fc7e 	bl	800653e <UART_Start_Receive_IT>
 8005c42:	4603      	mov	r3, r0
 8005c44:	e000      	b.n	8005c48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d14a      	bne.n	8005d00 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e043      	b.n	8005d02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fc8f 	bl	80065b0 <UART_Start_Receive_DMA>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d12c      	bne.n	8005cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d125      	bne.n	8005cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f043 0310 	orr.w	r3, r3, #16
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cde:	627a      	str	r2, [r7, #36]	; 0x24
 8005ce0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6a39      	ldr	r1, [r7, #32]
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005cf2:	e002      	b.n	8005cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cfe:	e000      	b.n	8005d02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3730      	adds	r7, #48	; 0x30
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b0ba      	sub	sp, #232	; 0xe8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10f      	bne.n	8005d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_UART_IRQHandler+0x66>
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fdbe 	bl	80068ec <UART_Receive_IT>
      return;
 8005d70:	e25b      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80de 	beq.w	8005f38 <HAL_UART_IRQHandler+0x22c>
 8005d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80d1 	beq.w	8005f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_UART_IRQHandler+0xae>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <HAL_UART_IRQHandler+0xd2>
 8005dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	f043 0202 	orr.w	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_UART_IRQHandler+0xf6>
 8005dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	f043 0204 	orr.w	r2, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d011      	beq.n	8005e32 <HAL_UART_IRQHandler+0x126>
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 81f2 	beq.w	8006220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_UART_IRQHandler+0x14e>
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fd49 	bl	80068ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <HAL_UART_IRQHandler+0x17a>
 8005e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d04f      	beq.n	8005f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fc53 	bl	8006732 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d041      	beq.n	8005f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3314      	adds	r3, #20
 8005ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1d9      	bne.n	8005e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d013      	beq.n	8005f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	4a7e      	ldr	r2, [pc, #504]	; (80060ec <HAL_UART_IRQHandler+0x3e0>)
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe f846 	bl	8003f8c <HAL_DMA_Abort_IT>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	e00e      	b.n	8005f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f99c 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00a      	b.n	8005f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f998 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e006      	b.n	8005f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f994 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005f32:	e175      	b.n	8006220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	bf00      	nop
    return;
 8005f36:	e173      	b.n	8006220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	f040 814f 	bne.w	80061e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8148 	beq.w	80061e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8141 	beq.w	80061e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80b6 	beq.w	80060f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8145 	beq.w	8006224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	f080 813e 	bcs.w	8006224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	f000 8088 	beq.w	80060cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fe8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1d9      	bne.n	8005fbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800602c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006030:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006034:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800603e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e1      	bne.n	8006008 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3314      	adds	r3, #20
 800604a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006068:	66fa      	str	r2, [r7, #108]	; 0x6c
 800606a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800606e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e3      	bne.n	8006044 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80060b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e3      	bne.n	800608a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd ff24 	bl	8003f14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb f86c 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060e8:	e09c      	b.n	8006224 <HAL_UART_IRQHandler+0x518>
 80060ea:	bf00      	nop
 80060ec:	080067f7 	.word	0x080067f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 808e 	beq.w	8006228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800610c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8089 	beq.w	8006228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800613a:	647a      	str	r2, [r7, #68]	; 0x44
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	623b      	str	r3, [r7, #32]
   return(result);
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006172:	633a      	str	r2, [r7, #48]	; 0x30
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e3      	bne.n	800614e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0310 	bic.w	r3, r3, #16
 80061aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061b8:	61fa      	str	r2, [r7, #28]
 80061ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69b9      	ldr	r1, [r7, #24]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	617b      	str	r3, [r7, #20]
   return(result);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e3      	bne.n	8006194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fa fff1 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061de:	e023      	b.n	8006228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <HAL_UART_IRQHandler+0x4f4>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb10 	bl	800681e <UART_Transmit_IT>
    return;
 80061fe:	e014      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <HAL_UART_IRQHandler+0x51e>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fb4f 	bl	80068bc <UART_EndTransmit_IT>
    return;
 800621e:	e004      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
    return;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
      return;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_UART_IRQHandler+0x51e>
      return;
 8006228:	bf00      	nop
  }
}
 800622a:	37e8      	adds	r7, #232	; 0xe8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b09c      	sub	sp, #112	; 0x70
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d172      	bne.n	8006368 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	2200      	movs	r2, #0
 8006286:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629e:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80062aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3314      	adds	r3, #20
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	667b      	str	r3, [r7, #100]	; 0x64
 80062d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3314      	adds	r3, #20
 80062da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062dc:	647a      	str	r2, [r7, #68]	; 0x44
 80062de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3314      	adds	r3, #20
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	663b      	str	r3, [r7, #96]	; 0x60
 8006308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006310:	633a      	str	r2, [r7, #48]	; 0x30
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	2b01      	cmp	r3, #1
 8006332:	d119      	bne.n	8006368 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	60fb      	str	r3, [r7, #12]
   return(result);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0310 	bic.w	r3, r3, #16
 800634a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800634c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006354:	61fa      	str	r2, [r7, #28]
 8006356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	69b9      	ldr	r1, [r7, #24]
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	617b      	str	r3, [r7, #20]
   return(result);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636a:	2200      	movs	r2, #0
 800636c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	2b01      	cmp	r3, #1
 8006374:	d106      	bne.n	8006384 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800637a:	4619      	mov	r1, r3
 800637c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800637e:	f7fa ff1f 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006382:	e002      	b.n	800638a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006384:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006386:	f7fc fb4b 	bl	8002a20 <HAL_UART_RxCpltCallback>
}
 800638a:	bf00      	nop
 800638c:	3770      	adds	r7, #112	; 0x70
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d108      	bne.n	80063c0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7fa ff01 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063be:	e002      	b.n	80063c6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7ff ff3e 	bl	8006242 <HAL_UART_RxHalfCpltCallback>
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bf14      	ite	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	2300      	moveq	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b21      	cmp	r3, #33	; 0x21
 8006400:	d108      	bne.n	8006414 <UART_DMAError+0x46>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800640e:	68b8      	ldr	r0, [r7, #8]
 8006410:	f000 f968 	bl	80066e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b22      	cmp	r3, #34	; 0x22
 8006434:	d108      	bne.n	8006448 <UART_DMAError+0x7a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f000 f975 	bl	8006732 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	f043 0210 	orr.w	r2, r3, #16
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006454:	68b8      	ldr	r0, [r7, #8]
 8006456:	f7ff fefd 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b090      	sub	sp, #64	; 0x40
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006472:	e050      	b.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d04c      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800647c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <UART_WaitOnFlagUntilTimeout+0x30>
 8006482:	f7fd fb51 	bl	8003b28 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800648e:	429a      	cmp	r2, r3
 8006490:	d241      	bcs.n	8006516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064b2:	637a      	str	r2, [r7, #52]	; 0x34
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e5      	bne.n	8006492 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3314      	adds	r3, #20
 80064cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	613b      	str	r3, [r7, #16]
   return(result);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3314      	adds	r3, #20
 80064e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e6:	623a      	str	r2, [r7, #32]
 80064e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	69f9      	ldr	r1, [r7, #28]
 80064ec:	6a3a      	ldr	r2, [r7, #32]
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e5      	bne.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e00f      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4013      	ands	r3, r2
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	429a      	cmp	r2, r3
 8006532:	d09f      	beq.n	8006474 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3740      	adds	r7, #64	; 0x40
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	4613      	mov	r3, r2
 800654a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	88fa      	ldrh	r2, [r7, #6]
 8006556:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2222      	movs	r2, #34	; 0x22
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006582:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0220 	orr.w	r2, r2, #32
 80065a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b098      	sub	sp, #96	; 0x60
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2222      	movs	r2, #34	; 0x22
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	4a3e      	ldr	r2, [pc, #248]	; (80066d8 <UART_Start_Receive_DMA+0x128>)
 80065de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	4a3d      	ldr	r2, [pc, #244]	; (80066dc <UART_Start_Receive_DMA+0x12c>)
 80065e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	4a3c      	ldr	r2, [pc, #240]	; (80066e0 <UART_Start_Receive_DMA+0x130>)
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f4:	2200      	movs	r2, #0
 80065f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065f8:	f107 0308 	add.w	r3, r7, #8
 80065fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	f7fd fc20 	bl	8003e54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d019      	beq.n	8006666 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006648:	65bb      	str	r3, [r7, #88]	; 0x58
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006652:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006654:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e5      	bne.n	8006632 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	657b      	str	r3, [r7, #84]	; 0x54
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3314      	adds	r3, #20
 8006684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006686:	63ba      	str	r2, [r7, #56]	; 0x38
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800668c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	617b      	str	r3, [r7, #20]
   return(result);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b0:	653b      	str	r3, [r7, #80]	; 0x50
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3314      	adds	r3, #20
 80066b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066ba:	627a      	str	r2, [r7, #36]	; 0x24
 80066bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6a39      	ldr	r1, [r7, #32]
 80066c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3760      	adds	r7, #96	; 0x60
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	08006267 	.word	0x08006267
 80066dc:	08006393 	.word	0x08006393
 80066e0:	080063cf 	.word	0x080063cf

080066e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	61ba      	str	r2, [r7, #24]
 800670e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6979      	ldr	r1, [r7, #20]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	613b      	str	r3, [r7, #16]
   return(result);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006728:	bf00      	nop
 800672a:	3724      	adds	r7, #36	; 0x24
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006732:	b480      	push	{r7}
 8006734:	b095      	sub	sp, #84	; 0x54
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	330c      	adds	r3, #12
 8006758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800675a:	643a      	str	r2, [r7, #64]	; 0x40
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3314      	adds	r3, #20
 8006774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	61fb      	str	r3, [r7, #28]
   return(result);
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	64bb      	str	r3, [r7, #72]	; 0x48
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3314      	adds	r3, #20
 800678c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e5      	bne.n	800676e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d119      	bne.n	80067de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ca:	61ba      	str	r2, [r7, #24]
 80067cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6979      	ldr	r1, [r7, #20]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	613b      	str	r3, [r7, #16]
   return(result);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067ec:	bf00      	nop
 80067ee:	3754      	adds	r7, #84	; 0x54
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fd1f 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b21      	cmp	r3, #33	; 0x21
 8006830:	d13e      	bne.n	80068b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	d114      	bne.n	8006866 <UART_Transmit_IT+0x48>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d110      	bne.n	8006866 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006858:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	1c9a      	adds	r2, r3, #2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]
 8006864:	e008      	b.n	8006878 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6211      	str	r1, [r2, #32]
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4619      	mov	r1, r3
 8006886:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10f      	bne.n	80068ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800689a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068b0:	2302      	movs	r3, #2
  }
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr

080068bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fca7 	bl	8006230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08c      	sub	sp, #48	; 0x30
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b22      	cmp	r3, #34	; 0x22
 80068fe:	f040 80ae 	bne.w	8006a5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690a:	d117      	bne.n	800693c <UART_Receive_IT+0x50>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d113      	bne.n	800693c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692a:	b29a      	uxth	r2, r3
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	1c9a      	adds	r2, r3, #2
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
 800693a:	e026      	b.n	800698a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d007      	beq.n	8006960 <UART_Receive_IT+0x74>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <UART_Receive_IT+0x82>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d106      	bne.n	800696e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e008      	b.n	8006980 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697a:	b2da      	uxtb	r2, r3
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29b      	uxth	r3, r3
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4619      	mov	r1, r3
 8006998:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800699a:	2b00      	cmp	r3, #0
 800699c:	d15d      	bne.n	8006a5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0220 	bic.w	r2, r2, #32
 80069ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695a      	ldr	r2, [r3, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0201 	bic.w	r2, r2, #1
 80069cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d135      	bne.n	8006a50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	613b      	str	r3, [r7, #16]
   return(result);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f023 0310 	bic.w	r3, r3, #16
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	330c      	adds	r3, #12
 8006a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0a:	623a      	str	r2, [r7, #32]
 8006a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	69f9      	ldr	r1, [r7, #28]
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d10a      	bne.n	8006a42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fa fbb9 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
 8006a4e:	e002      	b.n	8006a56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7fb ffe5 	bl	8002a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e002      	b.n	8006a60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
  }
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3730      	adds	r7, #48	; 0x30
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006aa2:	f023 030c 	bic.w	r3, r3, #12
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	430b      	orrs	r3, r1
 8006aae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2c      	ldr	r2, [pc, #176]	; (8006b7c <UART_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d103      	bne.n	8006ad8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ad0:	f7fe ff94 	bl	80059fc <HAL_RCC_GetPCLK2Freq>
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	e002      	b.n	8006ade <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ad8:	f7fe ff7c 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8006adc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009a      	lsls	r2, r3, #2
 8006ae8:	441a      	add	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	4a22      	ldr	r2, [pc, #136]	; (8006b80 <UART_SetConfig+0x118>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	0119      	lsls	r1, r3, #4
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009a      	lsls	r2, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b14:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <UART_SetConfig+0x118>)
 8006b16:	fba3 0302 	umull	r0, r3, r3, r2
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2064      	movs	r0, #100	; 0x64
 8006b1e:	fb00 f303 	mul.w	r3, r0, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	3332      	adds	r3, #50	; 0x32
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <UART_SetConfig+0x118>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b34:	4419      	add	r1, r3
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009a      	lsls	r2, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b4c:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <UART_SetConfig+0x118>)
 8006b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2064      	movs	r0, #100	; 0x64
 8006b56:	fb00 f303 	mul.w	r3, r0, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	3332      	adds	r3, #50	; 0x32
 8006b60:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <UART_SetConfig+0x118>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	440a      	add	r2, r1
 8006b72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40013800 	.word	0x40013800
 8006b80:	51eb851f 	.word	0x51eb851f

08006b84 <atof>:
 8006b84:	2100      	movs	r1, #0
 8006b86:	f000 bed7 	b.w	8007938 <strtod>

08006b8a <atoi>:
 8006b8a:	220a      	movs	r2, #10
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f000 bfb5 	b.w	8007afc <strtol>
	...

08006b94 <malloc>:
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <malloc+0xc>)
 8006b96:	4601      	mov	r1, r0
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	f000 b82b 	b.w	8006bf4 <_malloc_r>
 8006b9e:	bf00      	nop
 8006ba0:	200001f8 	.word	0x200001f8

08006ba4 <free>:
 8006ba4:	4b02      	ldr	r3, [pc, #8]	; (8006bb0 <free+0xc>)
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	f002 bea9 	b.w	8009900 <_free_r>
 8006bae:	bf00      	nop
 8006bb0:	200001f8 	.word	0x200001f8

08006bb4 <sbrk_aligned>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	4e0e      	ldr	r6, [pc, #56]	; (8006bf0 <sbrk_aligned+0x3c>)
 8006bb8:	460c      	mov	r4, r1
 8006bba:	6831      	ldr	r1, [r6, #0]
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	b911      	cbnz	r1, 8006bc6 <sbrk_aligned+0x12>
 8006bc0:	f001 ff92 	bl	8008ae8 <_sbrk_r>
 8006bc4:	6030      	str	r0, [r6, #0]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f001 ff8d 	bl	8008ae8 <_sbrk_r>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d00a      	beq.n	8006be8 <sbrk_aligned+0x34>
 8006bd2:	1cc4      	adds	r4, r0, #3
 8006bd4:	f024 0403 	bic.w	r4, r4, #3
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d007      	beq.n	8006bec <sbrk_aligned+0x38>
 8006bdc:	1a21      	subs	r1, r4, r0
 8006bde:	4628      	mov	r0, r5
 8006be0:	f001 ff82 	bl	8008ae8 <_sbrk_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d101      	bne.n	8006bec <sbrk_aligned+0x38>
 8006be8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bec:	4620      	mov	r0, r4
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	20002600 	.word	0x20002600

08006bf4 <_malloc_r>:
 8006bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf8:	1ccd      	adds	r5, r1, #3
 8006bfa:	f025 0503 	bic.w	r5, r5, #3
 8006bfe:	3508      	adds	r5, #8
 8006c00:	2d0c      	cmp	r5, #12
 8006c02:	bf38      	it	cc
 8006c04:	250c      	movcc	r5, #12
 8006c06:	2d00      	cmp	r5, #0
 8006c08:	4607      	mov	r7, r0
 8006c0a:	db01      	blt.n	8006c10 <_malloc_r+0x1c>
 8006c0c:	42a9      	cmp	r1, r5
 8006c0e:	d905      	bls.n	8006c1c <_malloc_r+0x28>
 8006c10:	230c      	movs	r3, #12
 8006c12:	2600      	movs	r6, #0
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4630      	mov	r0, r6
 8006c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cf0 <_malloc_r+0xfc>
 8006c20:	f000 f868 	bl	8006cf4 <__malloc_lock>
 8006c24:	f8d8 3000 	ldr.w	r3, [r8]
 8006c28:	461c      	mov	r4, r3
 8006c2a:	bb5c      	cbnz	r4, 8006c84 <_malloc_r+0x90>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7ff ffc0 	bl	8006bb4 <sbrk_aligned>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	4604      	mov	r4, r0
 8006c38:	d155      	bne.n	8006ce6 <_malloc_r+0xf2>
 8006c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c3e:	4626      	mov	r6, r4
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	d145      	bne.n	8006cd0 <_malloc_r+0xdc>
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d048      	beq.n	8006cda <_malloc_r+0xe6>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	eb04 0903 	add.w	r9, r4, r3
 8006c52:	f001 ff49 	bl	8008ae8 <_sbrk_r>
 8006c56:	4581      	cmp	r9, r0
 8006c58:	d13f      	bne.n	8006cda <_malloc_r+0xe6>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	1a6d      	subs	r5, r5, r1
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7ff ffa7 	bl	8006bb4 <sbrk_aligned>
 8006c66:	3001      	adds	r0, #1
 8006c68:	d037      	beq.n	8006cda <_malloc_r+0xe6>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	442b      	add	r3, r5
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	f8d8 3000 	ldr.w	r3, [r8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d038      	beq.n	8006cea <_malloc_r+0xf6>
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	42a2      	cmp	r2, r4
 8006c7c:	d12b      	bne.n	8006cd6 <_malloc_r+0xe2>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	e00f      	b.n	8006ca4 <_malloc_r+0xb0>
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	1b52      	subs	r2, r2, r5
 8006c88:	d41f      	bmi.n	8006cca <_malloc_r+0xd6>
 8006c8a:	2a0b      	cmp	r2, #11
 8006c8c:	d917      	bls.n	8006cbe <_malloc_r+0xca>
 8006c8e:	1961      	adds	r1, r4, r5
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	6025      	str	r5, [r4, #0]
 8006c94:	bf18      	it	ne
 8006c96:	6059      	strne	r1, [r3, #4]
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	bf08      	it	eq
 8006c9c:	f8c8 1000 	streq.w	r1, [r8]
 8006ca0:	5162      	str	r2, [r4, r5]
 8006ca2:	604b      	str	r3, [r1, #4]
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f104 060b 	add.w	r6, r4, #11
 8006caa:	f000 f829 	bl	8006d00 <__malloc_unlock>
 8006cae:	f026 0607 	bic.w	r6, r6, #7
 8006cb2:	1d23      	adds	r3, r4, #4
 8006cb4:	1af2      	subs	r2, r6, r3
 8006cb6:	d0ae      	beq.n	8006c16 <_malloc_r+0x22>
 8006cb8:	1b9b      	subs	r3, r3, r6
 8006cba:	50a3      	str	r3, [r4, r2]
 8006cbc:	e7ab      	b.n	8006c16 <_malloc_r+0x22>
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	6862      	ldr	r2, [r4, #4]
 8006cc2:	d1dd      	bne.n	8006c80 <_malloc_r+0x8c>
 8006cc4:	f8c8 2000 	str.w	r2, [r8]
 8006cc8:	e7ec      	b.n	8006ca4 <_malloc_r+0xb0>
 8006cca:	4623      	mov	r3, r4
 8006ccc:	6864      	ldr	r4, [r4, #4]
 8006cce:	e7ac      	b.n	8006c2a <_malloc_r+0x36>
 8006cd0:	4634      	mov	r4, r6
 8006cd2:	6876      	ldr	r6, [r6, #4]
 8006cd4:	e7b4      	b.n	8006c40 <_malloc_r+0x4c>
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	e7cc      	b.n	8006c74 <_malloc_r+0x80>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	4638      	mov	r0, r7
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	f000 f80e 	bl	8006d00 <__malloc_unlock>
 8006ce4:	e797      	b.n	8006c16 <_malloc_r+0x22>
 8006ce6:	6025      	str	r5, [r4, #0]
 8006ce8:	e7dc      	b.n	8006ca4 <_malloc_r+0xb0>
 8006cea:	605b      	str	r3, [r3, #4]
 8006cec:	deff      	udf	#255	; 0xff
 8006cee:	bf00      	nop
 8006cf0:	200025fc 	.word	0x200025fc

08006cf4 <__malloc_lock>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__malloc_lock+0x8>)
 8006cf6:	f001 bf44 	b.w	8008b82 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20002744 	.word	0x20002744

08006d00 <__malloc_unlock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__malloc_unlock+0x8>)
 8006d02:	f001 bf3f 	b.w	8008b84 <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	20002744 	.word	0x20002744

08006d0c <sulp>:
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	460f      	mov	r7, r1
 8006d12:	4690      	mov	r8, r2
 8006d14:	f003 fd14 	bl	800a740 <__ulp>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	f1b8 0f00 	cmp.w	r8, #0
 8006d20:	d011      	beq.n	8006d46 <sulp+0x3a>
 8006d22:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd0b      	ble.n	8006d46 <sulp+0x3a>
 8006d2e:	2400      	movs	r4, #0
 8006d30:	051b      	lsls	r3, r3, #20
 8006d32:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	f7f9 fbd5 	bl	80004ec <__aeabi_dmul>
 8006d42:	4604      	mov	r4, r0
 8006d44:	460d      	mov	r5, r1
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d50 <_strtod_l>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	b09f      	sub	sp, #124	; 0x7c
 8006d56:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	921a      	str	r2, [sp, #104]	; 0x68
 8006d5e:	460d      	mov	r5, r1
 8006d60:	f04f 0800 	mov.w	r8, #0
 8006d64:	f04f 0900 	mov.w	r9, #0
 8006d68:	460a      	mov	r2, r1
 8006d6a:	9219      	str	r2, [sp, #100]	; 0x64
 8006d6c:	7811      	ldrb	r1, [r2, #0]
 8006d6e:	292b      	cmp	r1, #43	; 0x2b
 8006d70:	d04a      	beq.n	8006e08 <_strtod_l+0xb8>
 8006d72:	d838      	bhi.n	8006de6 <_strtod_l+0x96>
 8006d74:	290d      	cmp	r1, #13
 8006d76:	d832      	bhi.n	8006dde <_strtod_l+0x8e>
 8006d78:	2908      	cmp	r1, #8
 8006d7a:	d832      	bhi.n	8006de2 <_strtod_l+0x92>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d03b      	beq.n	8006df8 <_strtod_l+0xa8>
 8006d80:	2200      	movs	r2, #0
 8006d82:	920e      	str	r2, [sp, #56]	; 0x38
 8006d84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006d86:	7832      	ldrb	r2, [r6, #0]
 8006d88:	2a30      	cmp	r2, #48	; 0x30
 8006d8a:	f040 80b2 	bne.w	8006ef2 <_strtod_l+0x1a2>
 8006d8e:	7872      	ldrb	r2, [r6, #1]
 8006d90:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006d94:	2a58      	cmp	r2, #88	; 0x58
 8006d96:	d16e      	bne.n	8006e76 <_strtod_l+0x126>
 8006d98:	9302      	str	r3, [sp, #8]
 8006d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	ab1a      	add	r3, sp, #104	; 0x68
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	4a8c      	ldr	r2, [pc, #560]	; (8006fd8 <_strtod_l+0x288>)
 8006da6:	ab1b      	add	r3, sp, #108	; 0x6c
 8006da8:	a919      	add	r1, sp, #100	; 0x64
 8006daa:	f002 fe59 	bl	8009a60 <__gethex>
 8006dae:	f010 070f 	ands.w	r7, r0, #15
 8006db2:	4605      	mov	r5, r0
 8006db4:	d005      	beq.n	8006dc2 <_strtod_l+0x72>
 8006db6:	2f06      	cmp	r7, #6
 8006db8:	d128      	bne.n	8006e0c <_strtod_l+0xbc>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	3601      	adds	r6, #1
 8006dbe:	9619      	str	r6, [sp, #100]	; 0x64
 8006dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8006dc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 85a0 	bne.w	800790a <_strtod_l+0xbba>
 8006dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dcc:	b1cb      	cbz	r3, 8006e02 <_strtod_l+0xb2>
 8006dce:	4642      	mov	r2, r8
 8006dd0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	b01f      	add	sp, #124	; 0x7c
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	2920      	cmp	r1, #32
 8006de0:	d1ce      	bne.n	8006d80 <_strtod_l+0x30>
 8006de2:	3201      	adds	r2, #1
 8006de4:	e7c1      	b.n	8006d6a <_strtod_l+0x1a>
 8006de6:	292d      	cmp	r1, #45	; 0x2d
 8006de8:	d1ca      	bne.n	8006d80 <_strtod_l+0x30>
 8006dea:	2101      	movs	r1, #1
 8006dec:	910e      	str	r1, [sp, #56]	; 0x38
 8006dee:	1c51      	adds	r1, r2, #1
 8006df0:	9119      	str	r1, [sp, #100]	; 0x64
 8006df2:	7852      	ldrb	r2, [r2, #1]
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	d1c5      	bne.n	8006d84 <_strtod_l+0x34>
 8006df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dfa:	9519      	str	r5, [sp, #100]	; 0x64
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 8582 	bne.w	8007906 <_strtod_l+0xbb6>
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	e7e5      	b.n	8006dd4 <_strtod_l+0x84>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	e7ef      	b.n	8006dec <_strtod_l+0x9c>
 8006e0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e0e:	b13a      	cbz	r2, 8006e20 <_strtod_l+0xd0>
 8006e10:	2135      	movs	r1, #53	; 0x35
 8006e12:	a81c      	add	r0, sp, #112	; 0x70
 8006e14:	f003 fd80 	bl	800a918 <__copybits>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e1c:	f003 f964 	bl	800a0e8 <_Bfree>
 8006e20:	3f01      	subs	r7, #1
 8006e22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e24:	2f04      	cmp	r7, #4
 8006e26:	d806      	bhi.n	8006e36 <_strtod_l+0xe6>
 8006e28:	e8df f007 	tbb	[pc, r7]
 8006e2c:	201d0314 	.word	0x201d0314
 8006e30:	14          	.byte	0x14
 8006e31:	00          	.byte	0x00
 8006e32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006e36:	05e9      	lsls	r1, r5, #23
 8006e38:	bf48      	it	mi
 8006e3a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006e3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e42:	0d1b      	lsrs	r3, r3, #20
 8006e44:	051b      	lsls	r3, r3, #20
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1bb      	bne.n	8006dc2 <_strtod_l+0x72>
 8006e4a:	f001 fe6f 	bl	8008b2c <__errno>
 8006e4e:	2322      	movs	r3, #34	; 0x22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	e7b6      	b.n	8006dc2 <_strtod_l+0x72>
 8006e54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e58:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006e5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e64:	e7e7      	b.n	8006e36 <_strtod_l+0xe6>
 8006e66:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006fdc <_strtod_l+0x28c>
 8006e6a:	e7e4      	b.n	8006e36 <_strtod_l+0xe6>
 8006e6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e70:	f04f 38ff 	mov.w	r8, #4294967295
 8006e74:	e7df      	b.n	8006e36 <_strtod_l+0xe6>
 8006e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	9219      	str	r2, [sp, #100]	; 0x64
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b30      	cmp	r3, #48	; 0x30
 8006e80:	d0f9      	beq.n	8006e76 <_strtod_l+0x126>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d09d      	beq.n	8006dc2 <_strtod_l+0x72>
 8006e86:	2301      	movs	r3, #1
 8006e88:	f04f 0a00 	mov.w	sl, #0
 8006e8c:	220a      	movs	r2, #10
 8006e8e:	46d3      	mov	fp, sl
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e94:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006e9c:	7806      	ldrb	r6, [r0, #0]
 8006e9e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ea2:	b2d9      	uxtb	r1, r3
 8006ea4:	2909      	cmp	r1, #9
 8006ea6:	d926      	bls.n	8006ef6 <_strtod_l+0x1a6>
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	494d      	ldr	r1, [pc, #308]	; (8006fe0 <_strtod_l+0x290>)
 8006eac:	f001 fd4c 	bl	8008948 <strncmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d030      	beq.n	8006f16 <_strtod_l+0x1c6>
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	4632      	mov	r2, r6
 8006eb8:	4603      	mov	r3, r0
 8006eba:	465e      	mov	r6, fp
 8006ebc:	9008      	str	r0, [sp, #32]
 8006ebe:	2a65      	cmp	r2, #101	; 0x65
 8006ec0:	d001      	beq.n	8006ec6 <_strtod_l+0x176>
 8006ec2:	2a45      	cmp	r2, #69	; 0x45
 8006ec4:	d113      	bne.n	8006eee <_strtod_l+0x19e>
 8006ec6:	b91e      	cbnz	r6, 8006ed0 <_strtod_l+0x180>
 8006ec8:	9a05      	ldr	r2, [sp, #20]
 8006eca:	4302      	orrs	r2, r0
 8006ecc:	d094      	beq.n	8006df8 <_strtod_l+0xa8>
 8006ece:	2600      	movs	r6, #0
 8006ed0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006ed2:	1c6a      	adds	r2, r5, #1
 8006ed4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ed6:	786a      	ldrb	r2, [r5, #1]
 8006ed8:	2a2b      	cmp	r2, #43	; 0x2b
 8006eda:	d074      	beq.n	8006fc6 <_strtod_l+0x276>
 8006edc:	2a2d      	cmp	r2, #45	; 0x2d
 8006ede:	d078      	beq.n	8006fd2 <_strtod_l+0x282>
 8006ee0:	f04f 0c00 	mov.w	ip, #0
 8006ee4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ee8:	2909      	cmp	r1, #9
 8006eea:	d97f      	bls.n	8006fec <_strtod_l+0x29c>
 8006eec:	9519      	str	r5, [sp, #100]	; 0x64
 8006eee:	2700      	movs	r7, #0
 8006ef0:	e09e      	b.n	8007030 <_strtod_l+0x2e0>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e7c8      	b.n	8006e88 <_strtod_l+0x138>
 8006ef6:	f1bb 0f08 	cmp.w	fp, #8
 8006efa:	bfd8      	it	le
 8006efc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006efe:	f100 0001 	add.w	r0, r0, #1
 8006f02:	bfd6      	itet	le
 8006f04:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f08:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006f0c:	930a      	strle	r3, [sp, #40]	; 0x28
 8006f0e:	f10b 0b01 	add.w	fp, fp, #1
 8006f12:	9019      	str	r0, [sp, #100]	; 0x64
 8006f14:	e7c1      	b.n	8006e9a <_strtod_l+0x14a>
 8006f16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	9219      	str	r2, [sp, #100]	; 0x64
 8006f1c:	785a      	ldrb	r2, [r3, #1]
 8006f1e:	f1bb 0f00 	cmp.w	fp, #0
 8006f22:	d037      	beq.n	8006f94 <_strtod_l+0x244>
 8006f24:	465e      	mov	r6, fp
 8006f26:	9008      	str	r0, [sp, #32]
 8006f28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f2c:	2b09      	cmp	r3, #9
 8006f2e:	d912      	bls.n	8006f56 <_strtod_l+0x206>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e7c4      	b.n	8006ebe <_strtod_l+0x16e>
 8006f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f36:	3001      	adds	r0, #1
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	9219      	str	r2, [sp, #100]	; 0x64
 8006f3c:	785a      	ldrb	r2, [r3, #1]
 8006f3e:	2a30      	cmp	r2, #48	; 0x30
 8006f40:	d0f8      	beq.n	8006f34 <_strtod_l+0x1e4>
 8006f42:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	f200 84e4 	bhi.w	8007914 <_strtod_l+0xbc4>
 8006f4c:	9008      	str	r0, [sp, #32]
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4606      	mov	r6, r0
 8006f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f56:	3a30      	subs	r2, #48	; 0x30
 8006f58:	f100 0301 	add.w	r3, r0, #1
 8006f5c:	d014      	beq.n	8006f88 <_strtod_l+0x238>
 8006f5e:	9908      	ldr	r1, [sp, #32]
 8006f60:	eb00 0c06 	add.w	ip, r0, r6
 8006f64:	4419      	add	r1, r3
 8006f66:	9108      	str	r1, [sp, #32]
 8006f68:	4633      	mov	r3, r6
 8006f6a:	210a      	movs	r1, #10
 8006f6c:	4563      	cmp	r3, ip
 8006f6e:	d113      	bne.n	8006f98 <_strtod_l+0x248>
 8006f70:	1833      	adds	r3, r6, r0
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	f106 0601 	add.w	r6, r6, #1
 8006f78:	4406      	add	r6, r0
 8006f7a:	dc1a      	bgt.n	8006fb2 <_strtod_l+0x262>
 8006f7c:	230a      	movs	r3, #10
 8006f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f80:	fb03 2301 	mla	r3, r3, r1, r2
 8006f84:	930a      	str	r3, [sp, #40]	; 0x28
 8006f86:	2300      	movs	r3, #0
 8006f88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	1c51      	adds	r1, r2, #1
 8006f8e:	9119      	str	r1, [sp, #100]	; 0x64
 8006f90:	7852      	ldrb	r2, [r2, #1]
 8006f92:	e7c9      	b.n	8006f28 <_strtod_l+0x1d8>
 8006f94:	4658      	mov	r0, fp
 8006f96:	e7d2      	b.n	8006f3e <_strtod_l+0x1ee>
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	f103 0301 	add.w	r3, r3, #1
 8006f9e:	dc03      	bgt.n	8006fa8 <_strtod_l+0x258>
 8006fa0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006fa2:	434f      	muls	r7, r1
 8006fa4:	970a      	str	r7, [sp, #40]	; 0x28
 8006fa6:	e7e1      	b.n	8006f6c <_strtod_l+0x21c>
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	bfd8      	it	le
 8006fac:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006fb0:	e7dc      	b.n	8006f6c <_strtod_l+0x21c>
 8006fb2:	2e10      	cmp	r6, #16
 8006fb4:	bfdc      	itt	le
 8006fb6:	230a      	movle	r3, #10
 8006fb8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006fbc:	e7e3      	b.n	8006f86 <_strtod_l+0x236>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9308      	str	r3, [sp, #32]
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e780      	b.n	8006ec8 <_strtod_l+0x178>
 8006fc6:	f04f 0c00 	mov.w	ip, #0
 8006fca:	1caa      	adds	r2, r5, #2
 8006fcc:	9219      	str	r2, [sp, #100]	; 0x64
 8006fce:	78aa      	ldrb	r2, [r5, #2]
 8006fd0:	e788      	b.n	8006ee4 <_strtod_l+0x194>
 8006fd2:	f04f 0c01 	mov.w	ip, #1
 8006fd6:	e7f8      	b.n	8006fca <_strtod_l+0x27a>
 8006fd8:	0800b138 	.word	0x0800b138
 8006fdc:	7ff00000 	.word	0x7ff00000
 8006fe0:	0800b136 	.word	0x0800b136
 8006fe4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fe6:	1c51      	adds	r1, r2, #1
 8006fe8:	9119      	str	r1, [sp, #100]	; 0x64
 8006fea:	7852      	ldrb	r2, [r2, #1]
 8006fec:	2a30      	cmp	r2, #48	; 0x30
 8006fee:	d0f9      	beq.n	8006fe4 <_strtod_l+0x294>
 8006ff0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ff4:	2908      	cmp	r1, #8
 8006ff6:	f63f af7a 	bhi.w	8006eee <_strtod_l+0x19e>
 8006ffa:	3a30      	subs	r2, #48	; 0x30
 8006ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ffe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007000:	920c      	str	r2, [sp, #48]	; 0x30
 8007002:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007004:	1c57      	adds	r7, r2, #1
 8007006:	9719      	str	r7, [sp, #100]	; 0x64
 8007008:	7852      	ldrb	r2, [r2, #1]
 800700a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800700e:	f1be 0f09 	cmp.w	lr, #9
 8007012:	d938      	bls.n	8007086 <_strtod_l+0x336>
 8007014:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007016:	1a7f      	subs	r7, r7, r1
 8007018:	2f08      	cmp	r7, #8
 800701a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800701e:	dc03      	bgt.n	8007028 <_strtod_l+0x2d8>
 8007020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007022:	428f      	cmp	r7, r1
 8007024:	bfa8      	it	ge
 8007026:	460f      	movge	r7, r1
 8007028:	f1bc 0f00 	cmp.w	ip, #0
 800702c:	d000      	beq.n	8007030 <_strtod_l+0x2e0>
 800702e:	427f      	negs	r7, r7
 8007030:	2e00      	cmp	r6, #0
 8007032:	d14f      	bne.n	80070d4 <_strtod_l+0x384>
 8007034:	9905      	ldr	r1, [sp, #20]
 8007036:	4301      	orrs	r1, r0
 8007038:	f47f aec3 	bne.w	8006dc2 <_strtod_l+0x72>
 800703c:	2b00      	cmp	r3, #0
 800703e:	f47f aedb 	bne.w	8006df8 <_strtod_l+0xa8>
 8007042:	2a69      	cmp	r2, #105	; 0x69
 8007044:	d029      	beq.n	800709a <_strtod_l+0x34a>
 8007046:	dc26      	bgt.n	8007096 <_strtod_l+0x346>
 8007048:	2a49      	cmp	r2, #73	; 0x49
 800704a:	d026      	beq.n	800709a <_strtod_l+0x34a>
 800704c:	2a4e      	cmp	r2, #78	; 0x4e
 800704e:	f47f aed3 	bne.w	8006df8 <_strtod_l+0xa8>
 8007052:	499a      	ldr	r1, [pc, #616]	; (80072bc <_strtod_l+0x56c>)
 8007054:	a819      	add	r0, sp, #100	; 0x64
 8007056:	f002 ff45 	bl	8009ee4 <__match>
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f aecc 	beq.w	8006df8 <_strtod_l+0xa8>
 8007060:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b28      	cmp	r3, #40	; 0x28
 8007066:	d12f      	bne.n	80070c8 <_strtod_l+0x378>
 8007068:	4995      	ldr	r1, [pc, #596]	; (80072c0 <_strtod_l+0x570>)
 800706a:	aa1c      	add	r2, sp, #112	; 0x70
 800706c:	a819      	add	r0, sp, #100	; 0x64
 800706e:	f002 ff4d 	bl	8009f0c <__hexnan>
 8007072:	2805      	cmp	r0, #5
 8007074:	d128      	bne.n	80070c8 <_strtod_l+0x378>
 8007076:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007078:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800707c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007080:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007084:	e69d      	b.n	8006dc2 <_strtod_l+0x72>
 8007086:	210a      	movs	r1, #10
 8007088:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800708a:	fb01 2107 	mla	r1, r1, r7, r2
 800708e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007092:	9209      	str	r2, [sp, #36]	; 0x24
 8007094:	e7b5      	b.n	8007002 <_strtod_l+0x2b2>
 8007096:	2a6e      	cmp	r2, #110	; 0x6e
 8007098:	e7d9      	b.n	800704e <_strtod_l+0x2fe>
 800709a:	498a      	ldr	r1, [pc, #552]	; (80072c4 <_strtod_l+0x574>)
 800709c:	a819      	add	r0, sp, #100	; 0x64
 800709e:	f002 ff21 	bl	8009ee4 <__match>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f43f aea8 	beq.w	8006df8 <_strtod_l+0xa8>
 80070a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070aa:	4987      	ldr	r1, [pc, #540]	; (80072c8 <_strtod_l+0x578>)
 80070ac:	3b01      	subs	r3, #1
 80070ae:	a819      	add	r0, sp, #100	; 0x64
 80070b0:	9319      	str	r3, [sp, #100]	; 0x64
 80070b2:	f002 ff17 	bl	8009ee4 <__match>
 80070b6:	b910      	cbnz	r0, 80070be <_strtod_l+0x36e>
 80070b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070ba:	3301      	adds	r3, #1
 80070bc:	9319      	str	r3, [sp, #100]	; 0x64
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80072cc <_strtod_l+0x57c>
 80070c6:	e67c      	b.n	8006dc2 <_strtod_l+0x72>
 80070c8:	4881      	ldr	r0, [pc, #516]	; (80072d0 <_strtod_l+0x580>)
 80070ca:	f001 fd81 	bl	8008bd0 <nan>
 80070ce:	4680      	mov	r8, r0
 80070d0:	4689      	mov	r9, r1
 80070d2:	e676      	b.n	8006dc2 <_strtod_l+0x72>
 80070d4:	9b08      	ldr	r3, [sp, #32]
 80070d6:	f1bb 0f00 	cmp.w	fp, #0
 80070da:	bf08      	it	eq
 80070dc:	46b3      	moveq	fp, r6
 80070de:	1afb      	subs	r3, r7, r3
 80070e0:	2e10      	cmp	r6, #16
 80070e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070e4:	4635      	mov	r5, r6
 80070e6:	9309      	str	r3, [sp, #36]	; 0x24
 80070e8:	bfa8      	it	ge
 80070ea:	2510      	movge	r5, #16
 80070ec:	f7f9 f984 	bl	80003f8 <__aeabi_ui2d>
 80070f0:	2e09      	cmp	r6, #9
 80070f2:	4680      	mov	r8, r0
 80070f4:	4689      	mov	r9, r1
 80070f6:	dd13      	ble.n	8007120 <_strtod_l+0x3d0>
 80070f8:	4b76      	ldr	r3, [pc, #472]	; (80072d4 <_strtod_l+0x584>)
 80070fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80070fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007102:	f7f9 f9f3 	bl	80004ec <__aeabi_dmul>
 8007106:	4680      	mov	r8, r0
 8007108:	4650      	mov	r0, sl
 800710a:	4689      	mov	r9, r1
 800710c:	f7f9 f974 	bl	80003f8 <__aeabi_ui2d>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4640      	mov	r0, r8
 8007116:	4649      	mov	r1, r9
 8007118:	f7f9 f832 	bl	8000180 <__adddf3>
 800711c:	4680      	mov	r8, r0
 800711e:	4689      	mov	r9, r1
 8007120:	2e0f      	cmp	r6, #15
 8007122:	dc36      	bgt.n	8007192 <_strtod_l+0x442>
 8007124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	f43f ae4b 	beq.w	8006dc2 <_strtod_l+0x72>
 800712c:	dd22      	ble.n	8007174 <_strtod_l+0x424>
 800712e:	2b16      	cmp	r3, #22
 8007130:	dc09      	bgt.n	8007146 <_strtod_l+0x3f6>
 8007132:	4968      	ldr	r1, [pc, #416]	; (80072d4 <_strtod_l+0x584>)
 8007134:	4642      	mov	r2, r8
 8007136:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800713a:	464b      	mov	r3, r9
 800713c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007140:	f7f9 f9d4 	bl	80004ec <__aeabi_dmul>
 8007144:	e7c3      	b.n	80070ce <_strtod_l+0x37e>
 8007146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007148:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800714c:	4293      	cmp	r3, r2
 800714e:	db20      	blt.n	8007192 <_strtod_l+0x442>
 8007150:	4c60      	ldr	r4, [pc, #384]	; (80072d4 <_strtod_l+0x584>)
 8007152:	f1c6 060f 	rsb	r6, r6, #15
 8007156:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800715a:	4642      	mov	r2, r8
 800715c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007160:	464b      	mov	r3, r9
 8007162:	f7f9 f9c3 	bl	80004ec <__aeabi_dmul>
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	1b9e      	subs	r6, r3, r6
 800716a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800716e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007172:	e7e5      	b.n	8007140 <_strtod_l+0x3f0>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	3316      	adds	r3, #22
 8007178:	db0b      	blt.n	8007192 <_strtod_l+0x442>
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	4640      	mov	r0, r8
 800717e:	1bdf      	subs	r7, r3, r7
 8007180:	4b54      	ldr	r3, [pc, #336]	; (80072d4 <_strtod_l+0x584>)
 8007182:	4649      	mov	r1, r9
 8007184:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718c:	f7f9 fad8 	bl	8000740 <__aeabi_ddiv>
 8007190:	e79d      	b.n	80070ce <_strtod_l+0x37e>
 8007192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007194:	1b75      	subs	r5, r6, r5
 8007196:	441d      	add	r5, r3
 8007198:	2d00      	cmp	r5, #0
 800719a:	dd70      	ble.n	800727e <_strtod_l+0x52e>
 800719c:	f015 030f 	ands.w	r3, r5, #15
 80071a0:	d00a      	beq.n	80071b8 <_strtod_l+0x468>
 80071a2:	494c      	ldr	r1, [pc, #304]	; (80072d4 <_strtod_l+0x584>)
 80071a4:	4642      	mov	r2, r8
 80071a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ae:	464b      	mov	r3, r9
 80071b0:	f7f9 f99c 	bl	80004ec <__aeabi_dmul>
 80071b4:	4680      	mov	r8, r0
 80071b6:	4689      	mov	r9, r1
 80071b8:	f035 050f 	bics.w	r5, r5, #15
 80071bc:	d04d      	beq.n	800725a <_strtod_l+0x50a>
 80071be:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80071c2:	dd22      	ble.n	800720a <_strtod_l+0x4ba>
 80071c4:	2600      	movs	r6, #0
 80071c6:	46b3      	mov	fp, r6
 80071c8:	960b      	str	r6, [sp, #44]	; 0x2c
 80071ca:	9608      	str	r6, [sp, #32]
 80071cc:	2322      	movs	r3, #34	; 0x22
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80072cc <_strtod_l+0x57c>
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f43f adf1 	beq.w	8006dc2 <_strtod_l+0x72>
 80071e0:	4620      	mov	r0, r4
 80071e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80071e4:	f002 ff80 	bl	800a0e8 <_Bfree>
 80071e8:	4620      	mov	r0, r4
 80071ea:	9908      	ldr	r1, [sp, #32]
 80071ec:	f002 ff7c 	bl	800a0e8 <_Bfree>
 80071f0:	4659      	mov	r1, fp
 80071f2:	4620      	mov	r0, r4
 80071f4:	f002 ff78 	bl	800a0e8 <_Bfree>
 80071f8:	4620      	mov	r0, r4
 80071fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071fc:	f002 ff74 	bl	800a0e8 <_Bfree>
 8007200:	4631      	mov	r1, r6
 8007202:	4620      	mov	r0, r4
 8007204:	f002 ff70 	bl	800a0e8 <_Bfree>
 8007208:	e5db      	b.n	8006dc2 <_strtod_l+0x72>
 800720a:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <_strtod_l+0x588>)
 800720c:	4640      	mov	r0, r8
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	2300      	movs	r3, #0
 8007212:	4649      	mov	r1, r9
 8007214:	469a      	mov	sl, r3
 8007216:	112d      	asrs	r5, r5, #4
 8007218:	2d01      	cmp	r5, #1
 800721a:	dc21      	bgt.n	8007260 <_strtod_l+0x510>
 800721c:	b10b      	cbz	r3, 8007222 <_strtod_l+0x4d2>
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	492d      	ldr	r1, [pc, #180]	; (80072d8 <_strtod_l+0x588>)
 8007224:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007228:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800722c:	4642      	mov	r2, r8
 800722e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007232:	464b      	mov	r3, r9
 8007234:	f7f9 f95a 	bl	80004ec <__aeabi_dmul>
 8007238:	4b24      	ldr	r3, [pc, #144]	; (80072cc <_strtod_l+0x57c>)
 800723a:	460a      	mov	r2, r1
 800723c:	400b      	ands	r3, r1
 800723e:	4927      	ldr	r1, [pc, #156]	; (80072dc <_strtod_l+0x58c>)
 8007240:	4680      	mov	r8, r0
 8007242:	428b      	cmp	r3, r1
 8007244:	d8be      	bhi.n	80071c4 <_strtod_l+0x474>
 8007246:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800724a:	428b      	cmp	r3, r1
 800724c:	bf86      	itte	hi
 800724e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007252:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80072e0 <_strtod_l+0x590>
 8007256:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800725a:	2300      	movs	r3, #0
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	e07b      	b.n	8007358 <_strtod_l+0x608>
 8007260:	07ea      	lsls	r2, r5, #31
 8007262:	d505      	bpl.n	8007270 <_strtod_l+0x520>
 8007264:	9b05      	ldr	r3, [sp, #20]
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f93f 	bl	80004ec <__aeabi_dmul>
 800726e:	2301      	movs	r3, #1
 8007270:	9a05      	ldr	r2, [sp, #20]
 8007272:	f10a 0a01 	add.w	sl, sl, #1
 8007276:	3208      	adds	r2, #8
 8007278:	106d      	asrs	r5, r5, #1
 800727a:	9205      	str	r2, [sp, #20]
 800727c:	e7cc      	b.n	8007218 <_strtod_l+0x4c8>
 800727e:	d0ec      	beq.n	800725a <_strtod_l+0x50a>
 8007280:	426d      	negs	r5, r5
 8007282:	f015 020f 	ands.w	r2, r5, #15
 8007286:	d00a      	beq.n	800729e <_strtod_l+0x54e>
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <_strtod_l+0x584>)
 800728a:	4640      	mov	r0, r8
 800728c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007290:	4649      	mov	r1, r9
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f9 fa53 	bl	8000740 <__aeabi_ddiv>
 800729a:	4680      	mov	r8, r0
 800729c:	4689      	mov	r9, r1
 800729e:	112d      	asrs	r5, r5, #4
 80072a0:	d0db      	beq.n	800725a <_strtod_l+0x50a>
 80072a2:	2d1f      	cmp	r5, #31
 80072a4:	dd1e      	ble.n	80072e4 <_strtod_l+0x594>
 80072a6:	2600      	movs	r6, #0
 80072a8:	46b3      	mov	fp, r6
 80072aa:	960b      	str	r6, [sp, #44]	; 0x2c
 80072ac:	9608      	str	r6, [sp, #32]
 80072ae:	2322      	movs	r3, #34	; 0x22
 80072b0:	f04f 0800 	mov.w	r8, #0
 80072b4:	f04f 0900 	mov.w	r9, #0
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	e78d      	b.n	80071d8 <_strtod_l+0x488>
 80072bc:	0800b296 	.word	0x0800b296
 80072c0:	0800b14c 	.word	0x0800b14c
 80072c4:	0800b28e 	.word	0x0800b28e
 80072c8:	0800b375 	.word	0x0800b375
 80072cc:	7ff00000 	.word	0x7ff00000
 80072d0:	0800b371 	.word	0x0800b371
 80072d4:	0800b4d0 	.word	0x0800b4d0
 80072d8:	0800b4a8 	.word	0x0800b4a8
 80072dc:	7ca00000 	.word	0x7ca00000
 80072e0:	7fefffff 	.word	0x7fefffff
 80072e4:	f015 0310 	ands.w	r3, r5, #16
 80072e8:	bf18      	it	ne
 80072ea:	236a      	movne	r3, #106	; 0x6a
 80072ec:	4640      	mov	r0, r8
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	4649      	mov	r1, r9
 80072f2:	2300      	movs	r3, #0
 80072f4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80075c0 <_strtod_l+0x870>
 80072f8:	07ea      	lsls	r2, r5, #31
 80072fa:	d504      	bpl.n	8007306 <_strtod_l+0x5b6>
 80072fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007300:	f7f9 f8f4 	bl	80004ec <__aeabi_dmul>
 8007304:	2301      	movs	r3, #1
 8007306:	106d      	asrs	r5, r5, #1
 8007308:	f10a 0a08 	add.w	sl, sl, #8
 800730c:	d1f4      	bne.n	80072f8 <_strtod_l+0x5a8>
 800730e:	b10b      	cbz	r3, 8007314 <_strtod_l+0x5c4>
 8007310:	4680      	mov	r8, r0
 8007312:	4689      	mov	r9, r1
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	b1bb      	cbz	r3, 8007348 <_strtod_l+0x5f8>
 8007318:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800731c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007320:	2b00      	cmp	r3, #0
 8007322:	4649      	mov	r1, r9
 8007324:	dd10      	ble.n	8007348 <_strtod_l+0x5f8>
 8007326:	2b1f      	cmp	r3, #31
 8007328:	f340 8128 	ble.w	800757c <_strtod_l+0x82c>
 800732c:	2b34      	cmp	r3, #52	; 0x34
 800732e:	bfd8      	it	le
 8007330:	f04f 33ff 	movle.w	r3, #4294967295
 8007334:	f04f 0800 	mov.w	r8, #0
 8007338:	bfcf      	iteee	gt
 800733a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800733e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007342:	4093      	lslle	r3, r2
 8007344:	ea03 0901 	andle.w	r9, r3, r1
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	4640      	mov	r0, r8
 800734e:	4649      	mov	r1, r9
 8007350:	f7f9 fb34 	bl	80009bc <__aeabi_dcmpeq>
 8007354:	2800      	cmp	r0, #0
 8007356:	d1a6      	bne.n	80072a6 <_strtod_l+0x556>
 8007358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735a:	465a      	mov	r2, fp
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	4620      	mov	r0, r4
 8007360:	4633      	mov	r3, r6
 8007362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007364:	f002 ff28 	bl	800a1b8 <__s2b>
 8007368:	900b      	str	r0, [sp, #44]	; 0x2c
 800736a:	2800      	cmp	r0, #0
 800736c:	f43f af2a 	beq.w	80071c4 <_strtod_l+0x474>
 8007370:	2600      	movs	r6, #0
 8007372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007374:	9b08      	ldr	r3, [sp, #32]
 8007376:	2a00      	cmp	r2, #0
 8007378:	eba3 0307 	sub.w	r3, r3, r7
 800737c:	bfa8      	it	ge
 800737e:	2300      	movge	r3, #0
 8007380:	46b3      	mov	fp, r6
 8007382:	9312      	str	r3, [sp, #72]	; 0x48
 8007384:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007388:	9316      	str	r3, [sp, #88]	; 0x58
 800738a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738c:	4620      	mov	r0, r4
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	f002 fe6a 	bl	800a068 <_Balloc>
 8007394:	9008      	str	r0, [sp, #32]
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f af18 	beq.w	80071cc <_strtod_l+0x47c>
 800739c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800739e:	300c      	adds	r0, #12
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	f103 010c 	add.w	r1, r3, #12
 80073a6:	3202      	adds	r2, #2
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	f001 fc02 	bl	8008bb2 <memcpy>
 80073ae:	ab1c      	add	r3, sp, #112	; 0x70
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	ab1b      	add	r3, sp, #108	; 0x6c
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4642      	mov	r2, r8
 80073b8:	464b      	mov	r3, r9
 80073ba:	4620      	mov	r0, r4
 80073bc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80073c0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80073c4:	f003 fa24 	bl	800a810 <__d2b>
 80073c8:	901a      	str	r0, [sp, #104]	; 0x68
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f43f aefe 	beq.w	80071cc <_strtod_l+0x47c>
 80073d0:	2101      	movs	r1, #1
 80073d2:	4620      	mov	r0, r4
 80073d4:	f002 ff88 	bl	800a2e8 <__i2b>
 80073d8:	4683      	mov	fp, r0
 80073da:	2800      	cmp	r0, #0
 80073dc:	f43f aef6 	beq.w	80071cc <_strtod_l+0x47c>
 80073e0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80073e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	bfab      	itete	ge
 80073e8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80073ea:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80073ec:	eb07 0a03 	addge.w	sl, r7, r3
 80073f0:	1bdd      	sublt	r5, r3, r7
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	bfa8      	it	ge
 80073f6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80073f8:	eba7 0703 	sub.w	r7, r7, r3
 80073fc:	4417      	add	r7, r2
 80073fe:	4b71      	ldr	r3, [pc, #452]	; (80075c4 <_strtod_l+0x874>)
 8007400:	f107 37ff 	add.w	r7, r7, #4294967295
 8007404:	bfb8      	it	lt
 8007406:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800740a:	429f      	cmp	r7, r3
 800740c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007410:	f280 80c7 	bge.w	80075a2 <_strtod_l+0x852>
 8007414:	1bdb      	subs	r3, r3, r7
 8007416:	2b1f      	cmp	r3, #31
 8007418:	f04f 0101 	mov.w	r1, #1
 800741c:	eba2 0203 	sub.w	r2, r2, r3
 8007420:	f300 80b3 	bgt.w	800758a <_strtod_l+0x83a>
 8007424:	fa01 f303 	lsl.w	r3, r1, r3
 8007428:	9313      	str	r3, [sp, #76]	; 0x4c
 800742a:	2300      	movs	r3, #0
 800742c:	9310      	str	r3, [sp, #64]	; 0x40
 800742e:	eb0a 0702 	add.w	r7, sl, r2
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	45ba      	cmp	sl, r7
 8007436:	4415      	add	r5, r2
 8007438:	441d      	add	r5, r3
 800743a:	4653      	mov	r3, sl
 800743c:	bfa8      	it	ge
 800743e:	463b      	movge	r3, r7
 8007440:	42ab      	cmp	r3, r5
 8007442:	bfa8      	it	ge
 8007444:	462b      	movge	r3, r5
 8007446:	2b00      	cmp	r3, #0
 8007448:	bfc2      	ittt	gt
 800744a:	1aff      	subgt	r7, r7, r3
 800744c:	1aed      	subgt	r5, r5, r3
 800744e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007454:	2b00      	cmp	r3, #0
 8007456:	dd17      	ble.n	8007488 <_strtod_l+0x738>
 8007458:	4659      	mov	r1, fp
 800745a:	461a      	mov	r2, r3
 800745c:	4620      	mov	r0, r4
 800745e:	f003 f801 	bl	800a464 <__pow5mult>
 8007462:	4683      	mov	fp, r0
 8007464:	2800      	cmp	r0, #0
 8007466:	f43f aeb1 	beq.w	80071cc <_strtod_l+0x47c>
 800746a:	4601      	mov	r1, r0
 800746c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800746e:	4620      	mov	r0, r4
 8007470:	f002 ff50 	bl	800a314 <__multiply>
 8007474:	900a      	str	r0, [sp, #40]	; 0x28
 8007476:	2800      	cmp	r0, #0
 8007478:	f43f aea8 	beq.w	80071cc <_strtod_l+0x47c>
 800747c:	4620      	mov	r0, r4
 800747e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007480:	f002 fe32 	bl	800a0e8 <_Bfree>
 8007484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007486:	931a      	str	r3, [sp, #104]	; 0x68
 8007488:	2f00      	cmp	r7, #0
 800748a:	f300 808f 	bgt.w	80075ac <_strtod_l+0x85c>
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	dd08      	ble.n	80074a6 <_strtod_l+0x756>
 8007494:	4620      	mov	r0, r4
 8007496:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007498:	9908      	ldr	r1, [sp, #32]
 800749a:	f002 ffe3 	bl	800a464 <__pow5mult>
 800749e:	9008      	str	r0, [sp, #32]
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f43f ae93 	beq.w	80071cc <_strtod_l+0x47c>
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	dd08      	ble.n	80074bc <_strtod_l+0x76c>
 80074aa:	462a      	mov	r2, r5
 80074ac:	4620      	mov	r0, r4
 80074ae:	9908      	ldr	r1, [sp, #32]
 80074b0:	f003 f832 	bl	800a518 <__lshift>
 80074b4:	9008      	str	r0, [sp, #32]
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f43f ae88 	beq.w	80071cc <_strtod_l+0x47c>
 80074bc:	f1ba 0f00 	cmp.w	sl, #0
 80074c0:	dd08      	ble.n	80074d4 <_strtod_l+0x784>
 80074c2:	4659      	mov	r1, fp
 80074c4:	4652      	mov	r2, sl
 80074c6:	4620      	mov	r0, r4
 80074c8:	f003 f826 	bl	800a518 <__lshift>
 80074cc:	4683      	mov	fp, r0
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f43f ae7c 	beq.w	80071cc <_strtod_l+0x47c>
 80074d4:	4620      	mov	r0, r4
 80074d6:	9a08      	ldr	r2, [sp, #32]
 80074d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074da:	f003 f8a5 	bl	800a628 <__mdiff>
 80074de:	4606      	mov	r6, r0
 80074e0:	2800      	cmp	r0, #0
 80074e2:	f43f ae73 	beq.w	80071cc <_strtod_l+0x47c>
 80074e6:	2500      	movs	r5, #0
 80074e8:	68c3      	ldr	r3, [r0, #12]
 80074ea:	4659      	mov	r1, fp
 80074ec:	60c5      	str	r5, [r0, #12]
 80074ee:	930a      	str	r3, [sp, #40]	; 0x28
 80074f0:	f003 f87e 	bl	800a5f0 <__mcmp>
 80074f4:	42a8      	cmp	r0, r5
 80074f6:	da6b      	bge.n	80075d0 <_strtod_l+0x880>
 80074f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fa:	ea53 0308 	orrs.w	r3, r3, r8
 80074fe:	f040 808f 	bne.w	8007620 <_strtod_l+0x8d0>
 8007502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007506:	2b00      	cmp	r3, #0
 8007508:	f040 808a 	bne.w	8007620 <_strtod_l+0x8d0>
 800750c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007510:	0d1b      	lsrs	r3, r3, #20
 8007512:	051b      	lsls	r3, r3, #20
 8007514:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007518:	f240 8082 	bls.w	8007620 <_strtod_l+0x8d0>
 800751c:	6973      	ldr	r3, [r6, #20]
 800751e:	b913      	cbnz	r3, 8007526 <_strtod_l+0x7d6>
 8007520:	6933      	ldr	r3, [r6, #16]
 8007522:	2b01      	cmp	r3, #1
 8007524:	dd7c      	ble.n	8007620 <_strtod_l+0x8d0>
 8007526:	4631      	mov	r1, r6
 8007528:	2201      	movs	r2, #1
 800752a:	4620      	mov	r0, r4
 800752c:	f002 fff4 	bl	800a518 <__lshift>
 8007530:	4659      	mov	r1, fp
 8007532:	4606      	mov	r6, r0
 8007534:	f003 f85c 	bl	800a5f0 <__mcmp>
 8007538:	2800      	cmp	r0, #0
 800753a:	dd71      	ble.n	8007620 <_strtod_l+0x8d0>
 800753c:	9905      	ldr	r1, [sp, #20]
 800753e:	464b      	mov	r3, r9
 8007540:	4a21      	ldr	r2, [pc, #132]	; (80075c8 <_strtod_l+0x878>)
 8007542:	2900      	cmp	r1, #0
 8007544:	f000 808d 	beq.w	8007662 <_strtod_l+0x912>
 8007548:	ea02 0109 	and.w	r1, r2, r9
 800754c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007550:	f300 8087 	bgt.w	8007662 <_strtod_l+0x912>
 8007554:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007558:	f77f aea9 	ble.w	80072ae <_strtod_l+0x55e>
 800755c:	4640      	mov	r0, r8
 800755e:	4649      	mov	r1, r9
 8007560:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <_strtod_l+0x87c>)
 8007562:	2200      	movs	r2, #0
 8007564:	f7f8 ffc2 	bl	80004ec <__aeabi_dmul>
 8007568:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <_strtod_l+0x878>)
 800756a:	4680      	mov	r8, r0
 800756c:	400b      	ands	r3, r1
 800756e:	4689      	mov	r9, r1
 8007570:	2b00      	cmp	r3, #0
 8007572:	f47f ae35 	bne.w	80071e0 <_strtod_l+0x490>
 8007576:	2322      	movs	r3, #34	; 0x22
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	e631      	b.n	80071e0 <_strtod_l+0x490>
 800757c:	f04f 32ff 	mov.w	r2, #4294967295
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	ea03 0808 	and.w	r8, r3, r8
 8007588:	e6de      	b.n	8007348 <_strtod_l+0x5f8>
 800758a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800758e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007592:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007596:	37e2      	adds	r7, #226	; 0xe2
 8007598:	fa01 f307 	lsl.w	r3, r1, r7
 800759c:	9310      	str	r3, [sp, #64]	; 0x40
 800759e:	9113      	str	r1, [sp, #76]	; 0x4c
 80075a0:	e745      	b.n	800742e <_strtod_l+0x6de>
 80075a2:	2300      	movs	r3, #0
 80075a4:	9310      	str	r3, [sp, #64]	; 0x40
 80075a6:	2301      	movs	r3, #1
 80075a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80075aa:	e740      	b.n	800742e <_strtod_l+0x6de>
 80075ac:	463a      	mov	r2, r7
 80075ae:	4620      	mov	r0, r4
 80075b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075b2:	f002 ffb1 	bl	800a518 <__lshift>
 80075b6:	901a      	str	r0, [sp, #104]	; 0x68
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f47f af68 	bne.w	800748e <_strtod_l+0x73e>
 80075be:	e605      	b.n	80071cc <_strtod_l+0x47c>
 80075c0:	0800b160 	.word	0x0800b160
 80075c4:	fffffc02 	.word	0xfffffc02
 80075c8:	7ff00000 	.word	0x7ff00000
 80075cc:	39500000 	.word	0x39500000
 80075d0:	46ca      	mov	sl, r9
 80075d2:	d165      	bne.n	80076a0 <_strtod_l+0x950>
 80075d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075da:	b352      	cbz	r2, 8007632 <_strtod_l+0x8e2>
 80075dc:	4a9e      	ldr	r2, [pc, #632]	; (8007858 <_strtod_l+0xb08>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d12a      	bne.n	8007638 <_strtod_l+0x8e8>
 80075e2:	9b05      	ldr	r3, [sp, #20]
 80075e4:	4641      	mov	r1, r8
 80075e6:	b1fb      	cbz	r3, 8007628 <_strtod_l+0x8d8>
 80075e8:	4b9c      	ldr	r3, [pc, #624]	; (800785c <_strtod_l+0xb0c>)
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295
 80075ee:	ea09 0303 	and.w	r3, r9, r3
 80075f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075f6:	d81a      	bhi.n	800762e <_strtod_l+0x8de>
 80075f8:	0d1b      	lsrs	r3, r3, #20
 80075fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	4299      	cmp	r1, r3
 8007604:	d118      	bne.n	8007638 <_strtod_l+0x8e8>
 8007606:	4b96      	ldr	r3, [pc, #600]	; (8007860 <_strtod_l+0xb10>)
 8007608:	459a      	cmp	sl, r3
 800760a:	d102      	bne.n	8007612 <_strtod_l+0x8c2>
 800760c:	3101      	adds	r1, #1
 800760e:	f43f addd 	beq.w	80071cc <_strtod_l+0x47c>
 8007612:	f04f 0800 	mov.w	r8, #0
 8007616:	4b91      	ldr	r3, [pc, #580]	; (800785c <_strtod_l+0xb0c>)
 8007618:	ea0a 0303 	and.w	r3, sl, r3
 800761c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007620:	9b05      	ldr	r3, [sp, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d19a      	bne.n	800755c <_strtod_l+0x80c>
 8007626:	e5db      	b.n	80071e0 <_strtod_l+0x490>
 8007628:	f04f 33ff 	mov.w	r3, #4294967295
 800762c:	e7e9      	b.n	8007602 <_strtod_l+0x8b2>
 800762e:	4613      	mov	r3, r2
 8007630:	e7e7      	b.n	8007602 <_strtod_l+0x8b2>
 8007632:	ea53 0308 	orrs.w	r3, r3, r8
 8007636:	d081      	beq.n	800753c <_strtod_l+0x7ec>
 8007638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800763a:	b1e3      	cbz	r3, 8007676 <_strtod_l+0x926>
 800763c:	ea13 0f0a 	tst.w	r3, sl
 8007640:	d0ee      	beq.n	8007620 <_strtod_l+0x8d0>
 8007642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007644:	4640      	mov	r0, r8
 8007646:	4649      	mov	r1, r9
 8007648:	9a05      	ldr	r2, [sp, #20]
 800764a:	b1c3      	cbz	r3, 800767e <_strtod_l+0x92e>
 800764c:	f7ff fb5e 	bl	8006d0c <sulp>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007656:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007658:	f7f8 fd92 	bl	8000180 <__adddf3>
 800765c:	4680      	mov	r8, r0
 800765e:	4689      	mov	r9, r1
 8007660:	e7de      	b.n	8007620 <_strtod_l+0x8d0>
 8007662:	4013      	ands	r3, r2
 8007664:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007668:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800766c:	f04f 38ff 	mov.w	r8, #4294967295
 8007670:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007674:	e7d4      	b.n	8007620 <_strtod_l+0x8d0>
 8007676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007678:	ea13 0f08 	tst.w	r3, r8
 800767c:	e7e0      	b.n	8007640 <_strtod_l+0x8f0>
 800767e:	f7ff fb45 	bl	8006d0c <sulp>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007688:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800768a:	f7f8 fd77 	bl	800017c <__aeabi_dsub>
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	4680      	mov	r8, r0
 8007694:	4689      	mov	r9, r1
 8007696:	f7f9 f991 	bl	80009bc <__aeabi_dcmpeq>
 800769a:	2800      	cmp	r0, #0
 800769c:	d0c0      	beq.n	8007620 <_strtod_l+0x8d0>
 800769e:	e606      	b.n	80072ae <_strtod_l+0x55e>
 80076a0:	4659      	mov	r1, fp
 80076a2:	4630      	mov	r0, r6
 80076a4:	f003 f90a 	bl	800a8bc <__ratio>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80076b0:	2200      	movs	r2, #0
 80076b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076b6:	f7f9 f995 	bl	80009e4 <__aeabi_dcmple>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d06f      	beq.n	800779e <_strtod_l+0xa4e>
 80076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d17c      	bne.n	80077be <_strtod_l+0xa6e>
 80076c4:	f1b8 0f00 	cmp.w	r8, #0
 80076c8:	d159      	bne.n	800777e <_strtod_l+0xa2e>
 80076ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d17b      	bne.n	80077ca <_strtod_l+0xa7a>
 80076d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076d6:	2200      	movs	r2, #0
 80076d8:	4b62      	ldr	r3, [pc, #392]	; (8007864 <_strtod_l+0xb14>)
 80076da:	f7f9 f979 	bl	80009d0 <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d15a      	bne.n	8007798 <_strtod_l+0xa48>
 80076e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076e6:	2200      	movs	r2, #0
 80076e8:	4b5f      	ldr	r3, [pc, #380]	; (8007868 <_strtod_l+0xb18>)
 80076ea:	f7f8 feff 	bl	80004ec <__aeabi_dmul>
 80076ee:	4605      	mov	r5, r0
 80076f0:	460f      	mov	r7, r1
 80076f2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80076f6:	9506      	str	r5, [sp, #24]
 80076f8:	9307      	str	r3, [sp, #28]
 80076fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076fe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007702:	4b56      	ldr	r3, [pc, #344]	; (800785c <_strtod_l+0xb0c>)
 8007704:	4a55      	ldr	r2, [pc, #340]	; (800785c <_strtod_l+0xb0c>)
 8007706:	ea0a 0303 	and.w	r3, sl, r3
 800770a:	9313      	str	r3, [sp, #76]	; 0x4c
 800770c:	4b57      	ldr	r3, [pc, #348]	; (800786c <_strtod_l+0xb1c>)
 800770e:	ea0a 0202 	and.w	r2, sl, r2
 8007712:	429a      	cmp	r2, r3
 8007714:	f040 80b0 	bne.w	8007878 <_strtod_l+0xb28>
 8007718:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800771c:	4640      	mov	r0, r8
 800771e:	4649      	mov	r1, r9
 8007720:	f003 f80e 	bl	800a740 <__ulp>
 8007724:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007728:	f7f8 fee0 	bl	80004ec <__aeabi_dmul>
 800772c:	4642      	mov	r2, r8
 800772e:	464b      	mov	r3, r9
 8007730:	f7f8 fd26 	bl	8000180 <__adddf3>
 8007734:	f8df a124 	ldr.w	sl, [pc, #292]	; 800785c <_strtod_l+0xb0c>
 8007738:	4a4d      	ldr	r2, [pc, #308]	; (8007870 <_strtod_l+0xb20>)
 800773a:	ea01 0a0a 	and.w	sl, r1, sl
 800773e:	4592      	cmp	sl, r2
 8007740:	4680      	mov	r8, r0
 8007742:	d948      	bls.n	80077d6 <_strtod_l+0xa86>
 8007744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007746:	4b46      	ldr	r3, [pc, #280]	; (8007860 <_strtod_l+0xb10>)
 8007748:	429a      	cmp	r2, r3
 800774a:	d103      	bne.n	8007754 <_strtod_l+0xa04>
 800774c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774e:	3301      	adds	r3, #1
 8007750:	f43f ad3c 	beq.w	80071cc <_strtod_l+0x47c>
 8007754:	f04f 38ff 	mov.w	r8, #4294967295
 8007758:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007860 <_strtod_l+0xb10>
 800775c:	4620      	mov	r0, r4
 800775e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007760:	f002 fcc2 	bl	800a0e8 <_Bfree>
 8007764:	4620      	mov	r0, r4
 8007766:	9908      	ldr	r1, [sp, #32]
 8007768:	f002 fcbe 	bl	800a0e8 <_Bfree>
 800776c:	4659      	mov	r1, fp
 800776e:	4620      	mov	r0, r4
 8007770:	f002 fcba 	bl	800a0e8 <_Bfree>
 8007774:	4631      	mov	r1, r6
 8007776:	4620      	mov	r0, r4
 8007778:	f002 fcb6 	bl	800a0e8 <_Bfree>
 800777c:	e605      	b.n	800738a <_strtod_l+0x63a>
 800777e:	f1b8 0f01 	cmp.w	r8, #1
 8007782:	d103      	bne.n	800778c <_strtod_l+0xa3c>
 8007784:	f1b9 0f00 	cmp.w	r9, #0
 8007788:	f43f ad91 	beq.w	80072ae <_strtod_l+0x55e>
 800778c:	2200      	movs	r2, #0
 800778e:	4b39      	ldr	r3, [pc, #228]	; (8007874 <_strtod_l+0xb24>)
 8007790:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007792:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007796:	e016      	b.n	80077c6 <_strtod_l+0xa76>
 8007798:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800779a:	4f33      	ldr	r7, [pc, #204]	; (8007868 <_strtod_l+0xb18>)
 800779c:	e7a9      	b.n	80076f2 <_strtod_l+0x9a2>
 800779e:	4b32      	ldr	r3, [pc, #200]	; (8007868 <_strtod_l+0xb18>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077a6:	f7f8 fea1 	bl	80004ec <__aeabi_dmul>
 80077aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ac:	4605      	mov	r5, r0
 80077ae:	460f      	mov	r7, r1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d09e      	beq.n	80076f2 <_strtod_l+0x9a2>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077bc:	e79d      	b.n	80076fa <_strtod_l+0x9aa>
 80077be:	2200      	movs	r2, #0
 80077c0:	4b28      	ldr	r3, [pc, #160]	; (8007864 <_strtod_l+0xb14>)
 80077c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077c6:	4f27      	ldr	r7, [pc, #156]	; (8007864 <_strtod_l+0xb14>)
 80077c8:	e797      	b.n	80076fa <_strtod_l+0x9aa>
 80077ca:	2200      	movs	r2, #0
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <_strtod_l+0xb24>)
 80077ce:	4645      	mov	r5, r8
 80077d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077d4:	e7f7      	b.n	80077c6 <_strtod_l+0xa76>
 80077d6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	46ca      	mov	sl, r9
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1bc      	bne.n	800775c <_strtod_l+0xa0c>
 80077e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077e8:	0d1b      	lsrs	r3, r3, #20
 80077ea:	051b      	lsls	r3, r3, #20
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d1b5      	bne.n	800775c <_strtod_l+0xa0c>
 80077f0:	4628      	mov	r0, r5
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 fcac 	bl	8001150 <__aeabi_d2lz>
 80077f8:	f7f8 fe4a 	bl	8000490 <__aeabi_l2d>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4628      	mov	r0, r5
 8007802:	4639      	mov	r1, r7
 8007804:	f7f8 fcba 	bl	800017c <__aeabi_dsub>
 8007808:	460b      	mov	r3, r1
 800780a:	4602      	mov	r2, r0
 800780c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007810:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007816:	ea4a 0a08 	orr.w	sl, sl, r8
 800781a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800781e:	d06c      	beq.n	80078fa <_strtod_l+0xbaa>
 8007820:	a309      	add	r3, pc, #36	; (adr r3, 8007848 <_strtod_l+0xaf8>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f9 f8d3 	bl	80009d0 <__aeabi_dcmplt>
 800782a:	2800      	cmp	r0, #0
 800782c:	f47f acd8 	bne.w	80071e0 <_strtod_l+0x490>
 8007830:	a307      	add	r3, pc, #28	; (adr r3, 8007850 <_strtod_l+0xb00>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800783a:	f7f9 f8e7 	bl	8000a0c <__aeabi_dcmpgt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d08c      	beq.n	800775c <_strtod_l+0xa0c>
 8007842:	e4cd      	b.n	80071e0 <_strtod_l+0x490>
 8007844:	f3af 8000 	nop.w
 8007848:	94a03595 	.word	0x94a03595
 800784c:	3fdfffff 	.word	0x3fdfffff
 8007850:	35afe535 	.word	0x35afe535
 8007854:	3fe00000 	.word	0x3fe00000
 8007858:	000fffff 	.word	0x000fffff
 800785c:	7ff00000 	.word	0x7ff00000
 8007860:	7fefffff 	.word	0x7fefffff
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	3fe00000 	.word	0x3fe00000
 800786c:	7fe00000 	.word	0x7fe00000
 8007870:	7c9fffff 	.word	0x7c9fffff
 8007874:	bff00000 	.word	0xbff00000
 8007878:	9b05      	ldr	r3, [sp, #20]
 800787a:	b333      	cbz	r3, 80078ca <_strtod_l+0xb7a>
 800787c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800787e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007882:	d822      	bhi.n	80078ca <_strtod_l+0xb7a>
 8007884:	a328      	add	r3, pc, #160	; (adr r3, 8007928 <_strtod_l+0xbd8>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	4628      	mov	r0, r5
 800788c:	4639      	mov	r1, r7
 800788e:	f7f9 f8a9 	bl	80009e4 <__aeabi_dcmple>
 8007892:	b1a0      	cbz	r0, 80078be <_strtod_l+0xb6e>
 8007894:	4639      	mov	r1, r7
 8007896:	4628      	mov	r0, r5
 8007898:	f7f9 f900 	bl	8000a9c <__aeabi_d2uiz>
 800789c:	2801      	cmp	r0, #1
 800789e:	bf38      	it	cc
 80078a0:	2001      	movcc	r0, #1
 80078a2:	f7f8 fda9 	bl	80003f8 <__aeabi_ui2d>
 80078a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a8:	4605      	mov	r5, r0
 80078aa:	460f      	mov	r7, r1
 80078ac:	bb03      	cbnz	r3, 80078f0 <_strtod_l+0xba0>
 80078ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078b2:	9014      	str	r0, [sp, #80]	; 0x50
 80078b4:	9315      	str	r3, [sp, #84]	; 0x54
 80078b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078ba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80078be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078c2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	9311      	str	r3, [sp, #68]	; 0x44
 80078ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80078cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ce:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80078d2:	f002 ff35 	bl	800a740 <__ulp>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4640      	mov	r0, r8
 80078dc:	4649      	mov	r1, r9
 80078de:	f7f8 fe05 	bl	80004ec <__aeabi_dmul>
 80078e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e6:	f7f8 fc4b 	bl	8000180 <__adddf3>
 80078ea:	4680      	mov	r8, r0
 80078ec:	4689      	mov	r9, r1
 80078ee:	e774      	b.n	80077da <_strtod_l+0xa8a>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80078f8:	e7dd      	b.n	80078b6 <_strtod_l+0xb66>
 80078fa:	a30d      	add	r3, pc, #52	; (adr r3, 8007930 <_strtod_l+0xbe0>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f9 f866 	bl	80009d0 <__aeabi_dcmplt>
 8007904:	e79b      	b.n	800783e <_strtod_l+0xaee>
 8007906:	2300      	movs	r3, #0
 8007908:	930e      	str	r3, [sp, #56]	; 0x38
 800790a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800790c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	f7ff ba5b 	b.w	8006dca <_strtod_l+0x7a>
 8007914:	2a65      	cmp	r2, #101	; 0x65
 8007916:	f43f ab52 	beq.w	8006fbe <_strtod_l+0x26e>
 800791a:	2a45      	cmp	r2, #69	; 0x45
 800791c:	f43f ab4f 	beq.w	8006fbe <_strtod_l+0x26e>
 8007920:	2301      	movs	r3, #1
 8007922:	f7ff bb87 	b.w	8007034 <_strtod_l+0x2e4>
 8007926:	bf00      	nop
 8007928:	ffc00000 	.word	0xffc00000
 800792c:	41dfffff 	.word	0x41dfffff
 8007930:	94a03595 	.word	0x94a03595
 8007934:	3fcfffff 	.word	0x3fcfffff

08007938 <strtod>:
 8007938:	460a      	mov	r2, r1
 800793a:	4601      	mov	r1, r0
 800793c:	4802      	ldr	r0, [pc, #8]	; (8007948 <strtod+0x10>)
 800793e:	4b03      	ldr	r3, [pc, #12]	; (800794c <strtod+0x14>)
 8007940:	6800      	ldr	r0, [r0, #0]
 8007942:	f7ff ba05 	b.w	8006d50 <_strtod_l>
 8007946:	bf00      	nop
 8007948:	200001f8 	.word	0x200001f8
 800794c:	20000040 	.word	0x20000040

08007950 <strtof>:
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	4f24      	ldr	r7, [pc, #144]	; (80079e8 <strtof+0x98>)
 8007956:	460a      	mov	r2, r1
 8007958:	4b24      	ldr	r3, [pc, #144]	; (80079ec <strtof+0x9c>)
 800795a:	4601      	mov	r1, r0
 800795c:	6838      	ldr	r0, [r7, #0]
 800795e:	f7ff f9f7 	bl	8006d50 <_strtod_l>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4606      	mov	r6, r0
 8007968:	460c      	mov	r4, r1
 800796a:	f7f9 f859 	bl	8000a20 <__aeabi_dcmpun>
 800796e:	b168      	cbz	r0, 800798c <strtof+0x3c>
 8007970:	2c00      	cmp	r4, #0
 8007972:	481f      	ldr	r0, [pc, #124]	; (80079f0 <strtof+0xa0>)
 8007974:	da06      	bge.n	8007984 <strtof+0x34>
 8007976:	f001 f931 	bl	8008bdc <nanf>
 800797a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800797e:	4628      	mov	r0, r5
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	f001 b928 	b.w	8008bdc <nanf>
 800798c:	4621      	mov	r1, r4
 800798e:	4630      	mov	r0, r6
 8007990:	f7f9 f8a4 	bl	8000adc <__aeabi_d2f>
 8007994:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8007998:	4605      	mov	r5, r0
 800799a:	4916      	ldr	r1, [pc, #88]	; (80079f4 <strtof+0xa4>)
 800799c:	4640      	mov	r0, r8
 800799e:	f7f9 fbc1 	bl	8001124 <__aeabi_fcmpun>
 80079a2:	b9b0      	cbnz	r0, 80079d2 <strtof+0x82>
 80079a4:	4640      	mov	r0, r8
 80079a6:	4913      	ldr	r1, [pc, #76]	; (80079f4 <strtof+0xa4>)
 80079a8:	f7f9 fb9e 	bl	80010e8 <__aeabi_fcmple>
 80079ac:	b988      	cbnz	r0, 80079d2 <strtof+0x82>
 80079ae:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	4630      	mov	r0, r6
 80079b8:	4641      	mov	r1, r8
 80079ba:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <strtof+0xa8>)
 80079bc:	f7f9 f830 	bl	8000a20 <__aeabi_dcmpun>
 80079c0:	b970      	cbnz	r0, 80079e0 <strtof+0x90>
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	4630      	mov	r0, r6
 80079c8:	4641      	mov	r1, r8
 80079ca:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <strtof+0xa8>)
 80079cc:	f7f9 f80a 	bl	80009e4 <__aeabi_dcmple>
 80079d0:	b930      	cbnz	r0, 80079e0 <strtof+0x90>
 80079d2:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80079d6:	d1d2      	bne.n	800797e <strtof+0x2e>
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <strtof+0xac>)
 80079da:	4023      	ands	r3, r4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0ce      	beq.n	800797e <strtof+0x2e>
 80079e0:	2222      	movs	r2, #34	; 0x22
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e7ca      	b.n	800797e <strtof+0x2e>
 80079e8:	200001f8 	.word	0x200001f8
 80079ec:	20000040 	.word	0x20000040
 80079f0:	0800b371 	.word	0x0800b371
 80079f4:	7f7fffff 	.word	0x7f7fffff
 80079f8:	7fefffff 	.word	0x7fefffff
 80079fc:	7ff00000 	.word	0x7ff00000

08007a00 <_strtol_l.constprop.0>:
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a06:	4686      	mov	lr, r0
 8007a08:	4690      	mov	r8, r2
 8007a0a:	d001      	beq.n	8007a10 <_strtol_l.constprop.0+0x10>
 8007a0c:	2b24      	cmp	r3, #36	; 0x24
 8007a0e:	d906      	bls.n	8007a1e <_strtol_l.constprop.0+0x1e>
 8007a10:	f001 f88c 	bl	8008b2c <__errno>
 8007a14:	2316      	movs	r3, #22
 8007a16:	6003      	str	r3, [r0, #0]
 8007a18:	2000      	movs	r0, #0
 8007a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1e:	460d      	mov	r5, r1
 8007a20:	4835      	ldr	r0, [pc, #212]	; (8007af8 <_strtol_l.constprop.0+0xf8>)
 8007a22:	462a      	mov	r2, r5
 8007a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a28:	5d06      	ldrb	r6, [r0, r4]
 8007a2a:	f016 0608 	ands.w	r6, r6, #8
 8007a2e:	d1f8      	bne.n	8007a22 <_strtol_l.constprop.0+0x22>
 8007a30:	2c2d      	cmp	r4, #45	; 0x2d
 8007a32:	d12e      	bne.n	8007a92 <_strtol_l.constprop.0+0x92>
 8007a34:	2601      	movs	r6, #1
 8007a36:	782c      	ldrb	r4, [r5, #0]
 8007a38:	1c95      	adds	r5, r2, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d057      	beq.n	8007aee <_strtol_l.constprop.0+0xee>
 8007a3e:	2b10      	cmp	r3, #16
 8007a40:	d109      	bne.n	8007a56 <_strtol_l.constprop.0+0x56>
 8007a42:	2c30      	cmp	r4, #48	; 0x30
 8007a44:	d107      	bne.n	8007a56 <_strtol_l.constprop.0+0x56>
 8007a46:	782a      	ldrb	r2, [r5, #0]
 8007a48:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a4c:	2a58      	cmp	r2, #88	; 0x58
 8007a4e:	d149      	bne.n	8007ae4 <_strtol_l.constprop.0+0xe4>
 8007a50:	2310      	movs	r3, #16
 8007a52:	786c      	ldrb	r4, [r5, #1]
 8007a54:	3502      	adds	r5, #2
 8007a56:	2200      	movs	r2, #0
 8007a58:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007a5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a60:	fbbc f9f3 	udiv	r9, ip, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007a6e:	2f09      	cmp	r7, #9
 8007a70:	d814      	bhi.n	8007a9c <_strtol_l.constprop.0+0x9c>
 8007a72:	463c      	mov	r4, r7
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	dd20      	ble.n	8007aba <_strtol_l.constprop.0+0xba>
 8007a78:	1c57      	adds	r7, r2, #1
 8007a7a:	d007      	beq.n	8007a8c <_strtol_l.constprop.0+0x8c>
 8007a7c:	4581      	cmp	r9, r0
 8007a7e:	d319      	bcc.n	8007ab4 <_strtol_l.constprop.0+0xb4>
 8007a80:	d101      	bne.n	8007a86 <_strtol_l.constprop.0+0x86>
 8007a82:	45a2      	cmp	sl, r4
 8007a84:	db16      	blt.n	8007ab4 <_strtol_l.constprop.0+0xb4>
 8007a86:	2201      	movs	r2, #1
 8007a88:	fb00 4003 	mla	r0, r0, r3, r4
 8007a8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a90:	e7eb      	b.n	8007a6a <_strtol_l.constprop.0+0x6a>
 8007a92:	2c2b      	cmp	r4, #43	; 0x2b
 8007a94:	bf04      	itt	eq
 8007a96:	782c      	ldrbeq	r4, [r5, #0]
 8007a98:	1c95      	addeq	r5, r2, #2
 8007a9a:	e7ce      	b.n	8007a3a <_strtol_l.constprop.0+0x3a>
 8007a9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007aa0:	2f19      	cmp	r7, #25
 8007aa2:	d801      	bhi.n	8007aa8 <_strtol_l.constprop.0+0xa8>
 8007aa4:	3c37      	subs	r4, #55	; 0x37
 8007aa6:	e7e5      	b.n	8007a74 <_strtol_l.constprop.0+0x74>
 8007aa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007aac:	2f19      	cmp	r7, #25
 8007aae:	d804      	bhi.n	8007aba <_strtol_l.constprop.0+0xba>
 8007ab0:	3c57      	subs	r4, #87	; 0x57
 8007ab2:	e7df      	b.n	8007a74 <_strtol_l.constprop.0+0x74>
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	e7e8      	b.n	8007a8c <_strtol_l.constprop.0+0x8c>
 8007aba:	1c53      	adds	r3, r2, #1
 8007abc:	d108      	bne.n	8007ad0 <_strtol_l.constprop.0+0xd0>
 8007abe:	2322      	movs	r3, #34	; 0x22
 8007ac0:	4660      	mov	r0, ip
 8007ac2:	f8ce 3000 	str.w	r3, [lr]
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	d0a6      	beq.n	8007a1a <_strtol_l.constprop.0+0x1a>
 8007acc:	1e69      	subs	r1, r5, #1
 8007ace:	e006      	b.n	8007ade <_strtol_l.constprop.0+0xde>
 8007ad0:	b106      	cbz	r6, 8007ad4 <_strtol_l.constprop.0+0xd4>
 8007ad2:	4240      	negs	r0, r0
 8007ad4:	f1b8 0f00 	cmp.w	r8, #0
 8007ad8:	d09f      	beq.n	8007a1a <_strtol_l.constprop.0+0x1a>
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d1f6      	bne.n	8007acc <_strtol_l.constprop.0+0xcc>
 8007ade:	f8c8 1000 	str.w	r1, [r8]
 8007ae2:	e79a      	b.n	8007a1a <_strtol_l.constprop.0+0x1a>
 8007ae4:	2430      	movs	r4, #48	; 0x30
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1b5      	bne.n	8007a56 <_strtol_l.constprop.0+0x56>
 8007aea:	2308      	movs	r3, #8
 8007aec:	e7b3      	b.n	8007a56 <_strtol_l.constprop.0+0x56>
 8007aee:	2c30      	cmp	r4, #48	; 0x30
 8007af0:	d0a9      	beq.n	8007a46 <_strtol_l.constprop.0+0x46>
 8007af2:	230a      	movs	r3, #10
 8007af4:	e7af      	b.n	8007a56 <_strtol_l.constprop.0+0x56>
 8007af6:	bf00      	nop
 8007af8:	0800b189 	.word	0x0800b189

08007afc <strtol>:
 8007afc:	4613      	mov	r3, r2
 8007afe:	460a      	mov	r2, r1
 8007b00:	4601      	mov	r1, r0
 8007b02:	4802      	ldr	r0, [pc, #8]	; (8007b0c <strtol+0x10>)
 8007b04:	6800      	ldr	r0, [r0, #0]
 8007b06:	f7ff bf7b 	b.w	8007a00 <_strtol_l.constprop.0>
 8007b0a:	bf00      	nop
 8007b0c:	200001f8 	.word	0x200001f8

08007b10 <__cvt>:
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b16:	461f      	mov	r7, r3
 8007b18:	bfbb      	ittet	lt
 8007b1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007b1e:	461f      	movlt	r7, r3
 8007b20:	2300      	movge	r3, #0
 8007b22:	232d      	movlt	r3, #45	; 0x2d
 8007b24:	b088      	sub	sp, #32
 8007b26:	4614      	mov	r4, r2
 8007b28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007b2c:	7013      	strb	r3, [r2, #0]
 8007b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007b34:	f023 0820 	bic.w	r8, r3, #32
 8007b38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b3c:	d005      	beq.n	8007b4a <__cvt+0x3a>
 8007b3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b42:	d100      	bne.n	8007b46 <__cvt+0x36>
 8007b44:	3501      	adds	r5, #1
 8007b46:	2302      	movs	r3, #2
 8007b48:	e000      	b.n	8007b4c <__cvt+0x3c>
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	aa07      	add	r2, sp, #28
 8007b4e:	9204      	str	r2, [sp, #16]
 8007b50:	aa06      	add	r2, sp, #24
 8007b52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007b56:	e9cd 3500 	strd	r3, r5, [sp]
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	f001 f8eb 	bl	8008d38 <_dtoa_r>
 8007b62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b66:	4606      	mov	r6, r0
 8007b68:	d102      	bne.n	8007b70 <__cvt+0x60>
 8007b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b6c:	07db      	lsls	r3, r3, #31
 8007b6e:	d522      	bpl.n	8007bb6 <__cvt+0xa6>
 8007b70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b74:	eb06 0905 	add.w	r9, r6, r5
 8007b78:	d110      	bne.n	8007b9c <__cvt+0x8c>
 8007b7a:	7833      	ldrb	r3, [r6, #0]
 8007b7c:	2b30      	cmp	r3, #48	; 0x30
 8007b7e:	d10a      	bne.n	8007b96 <__cvt+0x86>
 8007b80:	2200      	movs	r2, #0
 8007b82:	2300      	movs	r3, #0
 8007b84:	4620      	mov	r0, r4
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 ff18 	bl	80009bc <__aeabi_dcmpeq>
 8007b8c:	b918      	cbnz	r0, 8007b96 <__cvt+0x86>
 8007b8e:	f1c5 0501 	rsb	r5, r5, #1
 8007b92:	f8ca 5000 	str.w	r5, [sl]
 8007b96:	f8da 3000 	ldr.w	r3, [sl]
 8007b9a:	4499      	add	r9, r3
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	f7f8 ff0a 	bl	80009bc <__aeabi_dcmpeq>
 8007ba8:	b108      	cbz	r0, 8007bae <__cvt+0x9e>
 8007baa:	f8cd 901c 	str.w	r9, [sp, #28]
 8007bae:	2230      	movs	r2, #48	; 0x30
 8007bb0:	9b07      	ldr	r3, [sp, #28]
 8007bb2:	454b      	cmp	r3, r9
 8007bb4:	d307      	bcc.n	8007bc6 <__cvt+0xb6>
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	9b07      	ldr	r3, [sp, #28]
 8007bba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bbc:	1b9b      	subs	r3, r3, r6
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	b008      	add	sp, #32
 8007bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc6:	1c59      	adds	r1, r3, #1
 8007bc8:	9107      	str	r1, [sp, #28]
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e7f0      	b.n	8007bb0 <__cvt+0xa0>

08007bce <__exponent>:
 8007bce:	4603      	mov	r3, r0
 8007bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd2:	2900      	cmp	r1, #0
 8007bd4:	f803 2b02 	strb.w	r2, [r3], #2
 8007bd8:	bfb6      	itet	lt
 8007bda:	222d      	movlt	r2, #45	; 0x2d
 8007bdc:	222b      	movge	r2, #43	; 0x2b
 8007bde:	4249      	neglt	r1, r1
 8007be0:	2909      	cmp	r1, #9
 8007be2:	7042      	strb	r2, [r0, #1]
 8007be4:	dd2a      	ble.n	8007c3c <__exponent+0x6e>
 8007be6:	f10d 0207 	add.w	r2, sp, #7
 8007bea:	4617      	mov	r7, r2
 8007bec:	260a      	movs	r6, #10
 8007bee:	fb91 f5f6 	sdiv	r5, r1, r6
 8007bf2:	4694      	mov	ip, r2
 8007bf4:	fb06 1415 	mls	r4, r6, r5, r1
 8007bf8:	3430      	adds	r4, #48	; 0x30
 8007bfa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007bfe:	460c      	mov	r4, r1
 8007c00:	2c63      	cmp	r4, #99	; 0x63
 8007c02:	4629      	mov	r1, r5
 8007c04:	f102 32ff 	add.w	r2, r2, #4294967295
 8007c08:	dcf1      	bgt.n	8007bee <__exponent+0x20>
 8007c0a:	3130      	adds	r1, #48	; 0x30
 8007c0c:	f1ac 0402 	sub.w	r4, ip, #2
 8007c10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c14:	4622      	mov	r2, r4
 8007c16:	1c41      	adds	r1, r0, #1
 8007c18:	42ba      	cmp	r2, r7
 8007c1a:	d30a      	bcc.n	8007c32 <__exponent+0x64>
 8007c1c:	f10d 0209 	add.w	r2, sp, #9
 8007c20:	eba2 020c 	sub.w	r2, r2, ip
 8007c24:	42bc      	cmp	r4, r7
 8007c26:	bf88      	it	hi
 8007c28:	2200      	movhi	r2, #0
 8007c2a:	4413      	add	r3, r2
 8007c2c:	1a18      	subs	r0, r3, r0
 8007c2e:	b003      	add	sp, #12
 8007c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c3a:	e7ed      	b.n	8007c18 <__exponent+0x4a>
 8007c3c:	2330      	movs	r3, #48	; 0x30
 8007c3e:	3130      	adds	r1, #48	; 0x30
 8007c40:	7083      	strb	r3, [r0, #2]
 8007c42:	70c1      	strb	r1, [r0, #3]
 8007c44:	1d03      	adds	r3, r0, #4
 8007c46:	e7f1      	b.n	8007c2c <__exponent+0x5e>

08007c48 <_printf_float>:
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	b091      	sub	sp, #68	; 0x44
 8007c4e:	460c      	mov	r4, r1
 8007c50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007c54:	4616      	mov	r6, r2
 8007c56:	461f      	mov	r7, r3
 8007c58:	4605      	mov	r5, r0
 8007c5a:	f000 ff0d 	bl	8008a78 <_localeconv_r>
 8007c5e:	6803      	ldr	r3, [r0, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	9309      	str	r3, [sp, #36]	; 0x24
 8007c64:	f7f8 fa7e 	bl	8000164 <strlen>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c70:	900a      	str	r0, [sp, #40]	; 0x28
 8007c72:	3307      	adds	r3, #7
 8007c74:	f023 0307 	bic.w	r3, r3, #7
 8007c78:	f103 0208 	add.w	r2, r3, #8
 8007c7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c80:	f8d4 b000 	ldr.w	fp, [r4]
 8007c84:	f8c8 2000 	str.w	r2, [r8]
 8007c88:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4643      	mov	r3, r8
 8007c90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c94:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	4b9c      	ldr	r3, [pc, #624]	; (8007f14 <_printf_float+0x2cc>)
 8007ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ca4:	f7f8 febc 	bl	8000a20 <__aeabi_dcmpun>
 8007ca8:	bb70      	cbnz	r0, 8007d08 <_printf_float+0xc0>
 8007caa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cae:	4650      	mov	r0, sl
 8007cb0:	4b98      	ldr	r3, [pc, #608]	; (8007f14 <_printf_float+0x2cc>)
 8007cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cb4:	f7f8 fe96 	bl	80009e4 <__aeabi_dcmple>
 8007cb8:	bb30      	cbnz	r0, 8007d08 <_printf_float+0xc0>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	4641      	mov	r1, r8
 8007cc2:	f7f8 fe85 	bl	80009d0 <__aeabi_dcmplt>
 8007cc6:	b110      	cbz	r0, 8007cce <_printf_float+0x86>
 8007cc8:	232d      	movs	r3, #45	; 0x2d
 8007cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cce:	4a92      	ldr	r2, [pc, #584]	; (8007f18 <_printf_float+0x2d0>)
 8007cd0:	4b92      	ldr	r3, [pc, #584]	; (8007f1c <_printf_float+0x2d4>)
 8007cd2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007cd6:	bf94      	ite	ls
 8007cd8:	4690      	movls	r8, r2
 8007cda:	4698      	movhi	r8, r3
 8007cdc:	2303      	movs	r3, #3
 8007cde:	f04f 0a00 	mov.w	sl, #0
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	f02b 0304 	bic.w	r3, fp, #4
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	4633      	mov	r3, r6
 8007cec:	4621      	mov	r1, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	9700      	str	r7, [sp, #0]
 8007cf2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007cf4:	f000 f9d6 	bl	80080a4 <_printf_common>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f040 8090 	bne.w	8007e1e <_printf_float+0x1d6>
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	b011      	add	sp, #68	; 0x44
 8007d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d08:	4652      	mov	r2, sl
 8007d0a:	4643      	mov	r3, r8
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	4641      	mov	r1, r8
 8007d10:	f7f8 fe86 	bl	8000a20 <__aeabi_dcmpun>
 8007d14:	b148      	cbz	r0, 8007d2a <_printf_float+0xe2>
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	bfb8      	it	lt
 8007d1c:	232d      	movlt	r3, #45	; 0x2d
 8007d1e:	4a80      	ldr	r2, [pc, #512]	; (8007f20 <_printf_float+0x2d8>)
 8007d20:	bfb8      	it	lt
 8007d22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d26:	4b7f      	ldr	r3, [pc, #508]	; (8007f24 <_printf_float+0x2dc>)
 8007d28:	e7d3      	b.n	8007cd2 <_printf_float+0x8a>
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	d142      	bne.n	8007dba <_printf_float+0x172>
 8007d34:	2306      	movs	r3, #6
 8007d36:	6063      	str	r3, [r4, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	9206      	str	r2, [sp, #24]
 8007d3c:	aa0e      	add	r2, sp, #56	; 0x38
 8007d3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007d42:	aa0d      	add	r2, sp, #52	; 0x34
 8007d44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007d48:	9203      	str	r2, [sp, #12]
 8007d4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007d4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	4652      	mov	r2, sl
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	4643      	mov	r3, r8
 8007d5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d60:	f7ff fed6 	bl	8007b10 <__cvt>
 8007d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d66:	4680      	mov	r8, r0
 8007d68:	2947      	cmp	r1, #71	; 0x47
 8007d6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d6c:	d108      	bne.n	8007d80 <_printf_float+0x138>
 8007d6e:	1cc8      	adds	r0, r1, #3
 8007d70:	db02      	blt.n	8007d78 <_printf_float+0x130>
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	4299      	cmp	r1, r3
 8007d76:	dd40      	ble.n	8007dfa <_printf_float+0x1b2>
 8007d78:	f1a9 0902 	sub.w	r9, r9, #2
 8007d7c:	fa5f f989 	uxtb.w	r9, r9
 8007d80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d84:	d81f      	bhi.n	8007dc6 <_printf_float+0x17e>
 8007d86:	464a      	mov	r2, r9
 8007d88:	3901      	subs	r1, #1
 8007d8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d8e:	910d      	str	r1, [sp, #52]	; 0x34
 8007d90:	f7ff ff1d 	bl	8007bce <__exponent>
 8007d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d96:	4682      	mov	sl, r0
 8007d98:	1813      	adds	r3, r2, r0
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	6123      	str	r3, [r4, #16]
 8007d9e:	dc02      	bgt.n	8007da6 <_printf_float+0x15e>
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	07d2      	lsls	r2, r2, #31
 8007da4:	d501      	bpl.n	8007daa <_printf_float+0x162>
 8007da6:	3301      	adds	r3, #1
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d09b      	beq.n	8007cea <_printf_float+0xa2>
 8007db2:	232d      	movs	r3, #45	; 0x2d
 8007db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db8:	e797      	b.n	8007cea <_printf_float+0xa2>
 8007dba:	2947      	cmp	r1, #71	; 0x47
 8007dbc:	d1bc      	bne.n	8007d38 <_printf_float+0xf0>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1ba      	bne.n	8007d38 <_printf_float+0xf0>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e7b7      	b.n	8007d36 <_printf_float+0xee>
 8007dc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007dca:	d118      	bne.n	8007dfe <_printf_float+0x1b6>
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	6863      	ldr	r3, [r4, #4]
 8007dd0:	dd0b      	ble.n	8007dea <_printf_float+0x1a2>
 8007dd2:	6121      	str	r1, [r4, #16]
 8007dd4:	b913      	cbnz	r3, 8007ddc <_printf_float+0x194>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	07d0      	lsls	r0, r2, #31
 8007dda:	d502      	bpl.n	8007de2 <_printf_float+0x19a>
 8007ddc:	3301      	adds	r3, #1
 8007dde:	440b      	add	r3, r1
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	f04f 0a00 	mov.w	sl, #0
 8007de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007de8:	e7df      	b.n	8007daa <_printf_float+0x162>
 8007dea:	b913      	cbnz	r3, 8007df2 <_printf_float+0x1aa>
 8007dec:	6822      	ldr	r2, [r4, #0]
 8007dee:	07d2      	lsls	r2, r2, #31
 8007df0:	d501      	bpl.n	8007df6 <_printf_float+0x1ae>
 8007df2:	3302      	adds	r3, #2
 8007df4:	e7f4      	b.n	8007de0 <_printf_float+0x198>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7f2      	b.n	8007de0 <_printf_float+0x198>
 8007dfa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e00:	4299      	cmp	r1, r3
 8007e02:	db05      	blt.n	8007e10 <_printf_float+0x1c8>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	6121      	str	r1, [r4, #16]
 8007e08:	07d8      	lsls	r0, r3, #31
 8007e0a:	d5ea      	bpl.n	8007de2 <_printf_float+0x19a>
 8007e0c:	1c4b      	adds	r3, r1, #1
 8007e0e:	e7e7      	b.n	8007de0 <_printf_float+0x198>
 8007e10:	2900      	cmp	r1, #0
 8007e12:	bfcc      	ite	gt
 8007e14:	2201      	movgt	r2, #1
 8007e16:	f1c1 0202 	rsble	r2, r1, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	e7e0      	b.n	8007de0 <_printf_float+0x198>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	055a      	lsls	r2, r3, #21
 8007e22:	d407      	bmi.n	8007e34 <_printf_float+0x1ec>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	4642      	mov	r2, r8
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d12b      	bne.n	8007e8a <_printf_float+0x242>
 8007e32:	e764      	b.n	8007cfe <_printf_float+0xb6>
 8007e34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e38:	f240 80dd 	bls.w	8007ff6 <_printf_float+0x3ae>
 8007e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e40:	2200      	movs	r2, #0
 8007e42:	2300      	movs	r3, #0
 8007e44:	f7f8 fdba 	bl	80009bc <__aeabi_dcmpeq>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d033      	beq.n	8007eb4 <_printf_float+0x26c>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	4a35      	ldr	r2, [pc, #212]	; (8007f28 <_printf_float+0x2e0>)
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	f43f af51 	beq.w	8007cfe <_printf_float+0xb6>
 8007e5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e60:	429a      	cmp	r2, r3
 8007e62:	db02      	blt.n	8007e6a <_printf_float+0x222>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	07d8      	lsls	r0, r3, #31
 8007e68:	d50f      	bpl.n	8007e8a <_printf_float+0x242>
 8007e6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4628      	mov	r0, r5
 8007e72:	47b8      	blx	r7
 8007e74:	3001      	adds	r0, #1
 8007e76:	f43f af42 	beq.w	8007cfe <_printf_float+0xb6>
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	f104 091a 	add.w	r9, r4, #26
 8007e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e84:	3b01      	subs	r3, #1
 8007e86:	4543      	cmp	r3, r8
 8007e88:	dc09      	bgt.n	8007e9e <_printf_float+0x256>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	079b      	lsls	r3, r3, #30
 8007e8e:	f100 8104 	bmi.w	800809a <_printf_float+0x452>
 8007e92:	68e0      	ldr	r0, [r4, #12]
 8007e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e96:	4298      	cmp	r0, r3
 8007e98:	bfb8      	it	lt
 8007e9a:	4618      	movlt	r0, r3
 8007e9c:	e731      	b.n	8007d02 <_printf_float+0xba>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	464a      	mov	r2, r9
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	f43f af28 	beq.w	8007cfe <_printf_float+0xb6>
 8007eae:	f108 0801 	add.w	r8, r8, #1
 8007eb2:	e7e6      	b.n	8007e82 <_printf_float+0x23a>
 8007eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc38      	bgt.n	8007f2c <_printf_float+0x2e4>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	4a19      	ldr	r2, [pc, #100]	; (8007f28 <_printf_float+0x2e0>)
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f af1a 	beq.w	8007cfe <_printf_float+0xb6>
 8007eca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	d102      	bne.n	8007ed8 <_printf_float+0x290>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	07d9      	lsls	r1, r3, #31
 8007ed6:	d5d8      	bpl.n	8007e8a <_printf_float+0x242>
 8007ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	f43f af0b 	beq.w	8007cfe <_printf_float+0xb6>
 8007ee8:	f04f 0900 	mov.w	r9, #0
 8007eec:	f104 0a1a 	add.w	sl, r4, #26
 8007ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef2:	425b      	negs	r3, r3
 8007ef4:	454b      	cmp	r3, r9
 8007ef6:	dc01      	bgt.n	8007efc <_printf_float+0x2b4>
 8007ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007efa:	e794      	b.n	8007e26 <_printf_float+0x1de>
 8007efc:	2301      	movs	r3, #1
 8007efe:	4652      	mov	r2, sl
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f aef9 	beq.w	8007cfe <_printf_float+0xb6>
 8007f0c:	f109 0901 	add.w	r9, r9, #1
 8007f10:	e7ee      	b.n	8007ef0 <_printf_float+0x2a8>
 8007f12:	bf00      	nop
 8007f14:	7fefffff 	.word	0x7fefffff
 8007f18:	0800b289 	.word	0x0800b289
 8007f1c:	0800b28d 	.word	0x0800b28d
 8007f20:	0800b291 	.word	0x0800b291
 8007f24:	0800b295 	.word	0x0800b295
 8007f28:	0800b299 	.word	0x0800b299
 8007f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f30:	429a      	cmp	r2, r3
 8007f32:	bfa8      	it	ge
 8007f34:	461a      	movge	r2, r3
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	4691      	mov	r9, r2
 8007f3a:	dc37      	bgt.n	8007fac <_printf_float+0x364>
 8007f3c:	f04f 0b00 	mov.w	fp, #0
 8007f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f44:	f104 021a 	add.w	r2, r4, #26
 8007f48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007f4c:	ebaa 0309 	sub.w	r3, sl, r9
 8007f50:	455b      	cmp	r3, fp
 8007f52:	dc33      	bgt.n	8007fbc <_printf_float+0x374>
 8007f54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	db3b      	blt.n	8007fd4 <_printf_float+0x38c>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07da      	lsls	r2, r3, #31
 8007f60:	d438      	bmi.n	8007fd4 <_printf_float+0x38c>
 8007f62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007f66:	eba2 0903 	sub.w	r9, r2, r3
 8007f6a:	eba2 020a 	sub.w	r2, r2, sl
 8007f6e:	4591      	cmp	r9, r2
 8007f70:	bfa8      	it	ge
 8007f72:	4691      	movge	r9, r2
 8007f74:	f1b9 0f00 	cmp.w	r9, #0
 8007f78:	dc34      	bgt.n	8007fe4 <_printf_float+0x39c>
 8007f7a:	f04f 0800 	mov.w	r8, #0
 8007f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f82:	f104 0a1a 	add.w	sl, r4, #26
 8007f86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	eba3 0309 	sub.w	r3, r3, r9
 8007f90:	4543      	cmp	r3, r8
 8007f92:	f77f af7a 	ble.w	8007e8a <_printf_float+0x242>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4652      	mov	r2, sl
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f aeac 	beq.w	8007cfe <_printf_float+0xb6>
 8007fa6:	f108 0801 	add.w	r8, r8, #1
 8007faa:	e7ec      	b.n	8007f86 <_printf_float+0x33e>
 8007fac:	4613      	mov	r3, r2
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d1c0      	bne.n	8007f3c <_printf_float+0x2f4>
 8007fba:	e6a0      	b.n	8007cfe <_printf_float+0xb6>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f ae99 	beq.w	8007cfe <_printf_float+0xb6>
 8007fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fce:	f10b 0b01 	add.w	fp, fp, #1
 8007fd2:	e7b9      	b.n	8007f48 <_printf_float+0x300>
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d1bf      	bne.n	8007f62 <_printf_float+0x31a>
 8007fe2:	e68c      	b.n	8007cfe <_printf_float+0xb6>
 8007fe4:	464b      	mov	r3, r9
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	eb08 020a 	add.w	r2, r8, sl
 8007fee:	47b8      	blx	r7
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d1c2      	bne.n	8007f7a <_printf_float+0x332>
 8007ff4:	e683      	b.n	8007cfe <_printf_float+0xb6>
 8007ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ff8:	2a01      	cmp	r2, #1
 8007ffa:	dc01      	bgt.n	8008000 <_printf_float+0x3b8>
 8007ffc:	07db      	lsls	r3, r3, #31
 8007ffe:	d539      	bpl.n	8008074 <_printf_float+0x42c>
 8008000:	2301      	movs	r3, #1
 8008002:	4642      	mov	r2, r8
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f ae77 	beq.w	8007cfe <_printf_float+0xb6>
 8008010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f ae6f 	beq.w	8007cfe <_printf_float+0xb6>
 8008020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008024:	2200      	movs	r2, #0
 8008026:	2300      	movs	r3, #0
 8008028:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800802c:	f7f8 fcc6 	bl	80009bc <__aeabi_dcmpeq>
 8008030:	b9d8      	cbnz	r0, 800806a <_printf_float+0x422>
 8008032:	f109 33ff 	add.w	r3, r9, #4294967295
 8008036:	f108 0201 	add.w	r2, r8, #1
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	d10e      	bne.n	8008062 <_printf_float+0x41a>
 8008044:	e65b      	b.n	8007cfe <_printf_float+0xb6>
 8008046:	2301      	movs	r3, #1
 8008048:	464a      	mov	r2, r9
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f ae54 	beq.w	8007cfe <_printf_float+0xb6>
 8008056:	f108 0801 	add.w	r8, r8, #1
 800805a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805c:	3b01      	subs	r3, #1
 800805e:	4543      	cmp	r3, r8
 8008060:	dcf1      	bgt.n	8008046 <_printf_float+0x3fe>
 8008062:	4653      	mov	r3, sl
 8008064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008068:	e6de      	b.n	8007e28 <_printf_float+0x1e0>
 800806a:	f04f 0800 	mov.w	r8, #0
 800806e:	f104 091a 	add.w	r9, r4, #26
 8008072:	e7f2      	b.n	800805a <_printf_float+0x412>
 8008074:	2301      	movs	r3, #1
 8008076:	4642      	mov	r2, r8
 8008078:	e7df      	b.n	800803a <_printf_float+0x3f2>
 800807a:	2301      	movs	r3, #1
 800807c:	464a      	mov	r2, r9
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	f43f ae3a 	beq.w	8007cfe <_printf_float+0xb6>
 800808a:	f108 0801 	add.w	r8, r8, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008092:	1a5b      	subs	r3, r3, r1
 8008094:	4543      	cmp	r3, r8
 8008096:	dcf0      	bgt.n	800807a <_printf_float+0x432>
 8008098:	e6fb      	b.n	8007e92 <_printf_float+0x24a>
 800809a:	f04f 0800 	mov.w	r8, #0
 800809e:	f104 0919 	add.w	r9, r4, #25
 80080a2:	e7f4      	b.n	800808e <_printf_float+0x446>

080080a4 <_printf_common>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	4616      	mov	r6, r2
 80080aa:	4699      	mov	r9, r3
 80080ac:	688a      	ldr	r2, [r1, #8]
 80080ae:	690b      	ldr	r3, [r1, #16]
 80080b0:	4607      	mov	r7, r0
 80080b2:	4293      	cmp	r3, r2
 80080b4:	bfb8      	it	lt
 80080b6:	4613      	movlt	r3, r2
 80080b8:	6033      	str	r3, [r6, #0]
 80080ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080be:	460c      	mov	r4, r1
 80080c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080c4:	b10a      	cbz	r2, 80080ca <_printf_common+0x26>
 80080c6:	3301      	adds	r3, #1
 80080c8:	6033      	str	r3, [r6, #0]
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	0699      	lsls	r1, r3, #26
 80080ce:	bf42      	ittt	mi
 80080d0:	6833      	ldrmi	r3, [r6, #0]
 80080d2:	3302      	addmi	r3, #2
 80080d4:	6033      	strmi	r3, [r6, #0]
 80080d6:	6825      	ldr	r5, [r4, #0]
 80080d8:	f015 0506 	ands.w	r5, r5, #6
 80080dc:	d106      	bne.n	80080ec <_printf_common+0x48>
 80080de:	f104 0a19 	add.w	sl, r4, #25
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	6832      	ldr	r2, [r6, #0]
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	42ab      	cmp	r3, r5
 80080ea:	dc2b      	bgt.n	8008144 <_printf_common+0xa0>
 80080ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080f0:	1e13      	subs	r3, r2, #0
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	bf18      	it	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	0692      	lsls	r2, r2, #26
 80080fa:	d430      	bmi.n	800815e <_printf_common+0xba>
 80080fc:	4649      	mov	r1, r9
 80080fe:	4638      	mov	r0, r7
 8008100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d023      	beq.n	8008152 <_printf_common+0xae>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	6922      	ldr	r2, [r4, #16]
 800810e:	f003 0306 	and.w	r3, r3, #6
 8008112:	2b04      	cmp	r3, #4
 8008114:	bf14      	ite	ne
 8008116:	2500      	movne	r5, #0
 8008118:	6833      	ldreq	r3, [r6, #0]
 800811a:	f04f 0600 	mov.w	r6, #0
 800811e:	bf08      	it	eq
 8008120:	68e5      	ldreq	r5, [r4, #12]
 8008122:	f104 041a 	add.w	r4, r4, #26
 8008126:	bf08      	it	eq
 8008128:	1aed      	subeq	r5, r5, r3
 800812a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800812e:	bf08      	it	eq
 8008130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008134:	4293      	cmp	r3, r2
 8008136:	bfc4      	itt	gt
 8008138:	1a9b      	subgt	r3, r3, r2
 800813a:	18ed      	addgt	r5, r5, r3
 800813c:	42b5      	cmp	r5, r6
 800813e:	d11a      	bne.n	8008176 <_printf_common+0xd2>
 8008140:	2000      	movs	r0, #0
 8008142:	e008      	b.n	8008156 <_printf_common+0xb2>
 8008144:	2301      	movs	r3, #1
 8008146:	4652      	mov	r2, sl
 8008148:	4649      	mov	r1, r9
 800814a:	4638      	mov	r0, r7
 800814c:	47c0      	blx	r8
 800814e:	3001      	adds	r0, #1
 8008150:	d103      	bne.n	800815a <_printf_common+0xb6>
 8008152:	f04f 30ff 	mov.w	r0, #4294967295
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	3501      	adds	r5, #1
 800815c:	e7c1      	b.n	80080e2 <_printf_common+0x3e>
 800815e:	2030      	movs	r0, #48	; 0x30
 8008160:	18e1      	adds	r1, r4, r3
 8008162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800816c:	4422      	add	r2, r4
 800816e:	3302      	adds	r3, #2
 8008170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008174:	e7c2      	b.n	80080fc <_printf_common+0x58>
 8008176:	2301      	movs	r3, #1
 8008178:	4622      	mov	r2, r4
 800817a:	4649      	mov	r1, r9
 800817c:	4638      	mov	r0, r7
 800817e:	47c0      	blx	r8
 8008180:	3001      	adds	r0, #1
 8008182:	d0e6      	beq.n	8008152 <_printf_common+0xae>
 8008184:	3601      	adds	r6, #1
 8008186:	e7d9      	b.n	800813c <_printf_common+0x98>

08008188 <_printf_i>:
 8008188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	7e0f      	ldrb	r7, [r1, #24]
 800818e:	4691      	mov	r9, r2
 8008190:	2f78      	cmp	r7, #120	; 0x78
 8008192:	4680      	mov	r8, r0
 8008194:	460c      	mov	r4, r1
 8008196:	469a      	mov	sl, r3
 8008198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800819a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800819e:	d807      	bhi.n	80081b0 <_printf_i+0x28>
 80081a0:	2f62      	cmp	r7, #98	; 0x62
 80081a2:	d80a      	bhi.n	80081ba <_printf_i+0x32>
 80081a4:	2f00      	cmp	r7, #0
 80081a6:	f000 80d5 	beq.w	8008354 <_printf_i+0x1cc>
 80081aa:	2f58      	cmp	r7, #88	; 0x58
 80081ac:	f000 80c1 	beq.w	8008332 <_printf_i+0x1aa>
 80081b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081b8:	e03a      	b.n	8008230 <_printf_i+0xa8>
 80081ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081be:	2b15      	cmp	r3, #21
 80081c0:	d8f6      	bhi.n	80081b0 <_printf_i+0x28>
 80081c2:	a101      	add	r1, pc, #4	; (adr r1, 80081c8 <_printf_i+0x40>)
 80081c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081c8:	08008221 	.word	0x08008221
 80081cc:	08008235 	.word	0x08008235
 80081d0:	080081b1 	.word	0x080081b1
 80081d4:	080081b1 	.word	0x080081b1
 80081d8:	080081b1 	.word	0x080081b1
 80081dc:	080081b1 	.word	0x080081b1
 80081e0:	08008235 	.word	0x08008235
 80081e4:	080081b1 	.word	0x080081b1
 80081e8:	080081b1 	.word	0x080081b1
 80081ec:	080081b1 	.word	0x080081b1
 80081f0:	080081b1 	.word	0x080081b1
 80081f4:	0800833b 	.word	0x0800833b
 80081f8:	08008261 	.word	0x08008261
 80081fc:	080082f5 	.word	0x080082f5
 8008200:	080081b1 	.word	0x080081b1
 8008204:	080081b1 	.word	0x080081b1
 8008208:	0800835d 	.word	0x0800835d
 800820c:	080081b1 	.word	0x080081b1
 8008210:	08008261 	.word	0x08008261
 8008214:	080081b1 	.word	0x080081b1
 8008218:	080081b1 	.word	0x080081b1
 800821c:	080082fd 	.word	0x080082fd
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	1d1a      	adds	r2, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	602a      	str	r2, [r5, #0]
 8008228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800822c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008230:	2301      	movs	r3, #1
 8008232:	e0a0      	b.n	8008376 <_printf_i+0x1ee>
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	0607      	lsls	r7, r0, #24
 800823a:	f103 0104 	add.w	r1, r3, #4
 800823e:	6029      	str	r1, [r5, #0]
 8008240:	d501      	bpl.n	8008246 <_printf_i+0xbe>
 8008242:	681e      	ldr	r6, [r3, #0]
 8008244:	e003      	b.n	800824e <_printf_i+0xc6>
 8008246:	0646      	lsls	r6, r0, #25
 8008248:	d5fb      	bpl.n	8008242 <_printf_i+0xba>
 800824a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800824e:	2e00      	cmp	r6, #0
 8008250:	da03      	bge.n	800825a <_printf_i+0xd2>
 8008252:	232d      	movs	r3, #45	; 0x2d
 8008254:	4276      	negs	r6, r6
 8008256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825a:	230a      	movs	r3, #10
 800825c:	4859      	ldr	r0, [pc, #356]	; (80083c4 <_printf_i+0x23c>)
 800825e:	e012      	b.n	8008286 <_printf_i+0xfe>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	6820      	ldr	r0, [r4, #0]
 8008264:	1d19      	adds	r1, r3, #4
 8008266:	6029      	str	r1, [r5, #0]
 8008268:	0605      	lsls	r5, r0, #24
 800826a:	d501      	bpl.n	8008270 <_printf_i+0xe8>
 800826c:	681e      	ldr	r6, [r3, #0]
 800826e:	e002      	b.n	8008276 <_printf_i+0xee>
 8008270:	0641      	lsls	r1, r0, #25
 8008272:	d5fb      	bpl.n	800826c <_printf_i+0xe4>
 8008274:	881e      	ldrh	r6, [r3, #0]
 8008276:	2f6f      	cmp	r7, #111	; 0x6f
 8008278:	bf0c      	ite	eq
 800827a:	2308      	moveq	r3, #8
 800827c:	230a      	movne	r3, #10
 800827e:	4851      	ldr	r0, [pc, #324]	; (80083c4 <_printf_i+0x23c>)
 8008280:	2100      	movs	r1, #0
 8008282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008286:	6865      	ldr	r5, [r4, #4]
 8008288:	2d00      	cmp	r5, #0
 800828a:	bfa8      	it	ge
 800828c:	6821      	ldrge	r1, [r4, #0]
 800828e:	60a5      	str	r5, [r4, #8]
 8008290:	bfa4      	itt	ge
 8008292:	f021 0104 	bicge.w	r1, r1, #4
 8008296:	6021      	strge	r1, [r4, #0]
 8008298:	b90e      	cbnz	r6, 800829e <_printf_i+0x116>
 800829a:	2d00      	cmp	r5, #0
 800829c:	d04b      	beq.n	8008336 <_printf_i+0x1ae>
 800829e:	4615      	mov	r5, r2
 80082a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80082a4:	fb03 6711 	mls	r7, r3, r1, r6
 80082a8:	5dc7      	ldrb	r7, [r0, r7]
 80082aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082ae:	4637      	mov	r7, r6
 80082b0:	42bb      	cmp	r3, r7
 80082b2:	460e      	mov	r6, r1
 80082b4:	d9f4      	bls.n	80082a0 <_printf_i+0x118>
 80082b6:	2b08      	cmp	r3, #8
 80082b8:	d10b      	bne.n	80082d2 <_printf_i+0x14a>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	07de      	lsls	r6, r3, #31
 80082be:	d508      	bpl.n	80082d2 <_printf_i+0x14a>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	6861      	ldr	r1, [r4, #4]
 80082c4:	4299      	cmp	r1, r3
 80082c6:	bfde      	ittt	le
 80082c8:	2330      	movle	r3, #48	; 0x30
 80082ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082d2:	1b52      	subs	r2, r2, r5
 80082d4:	6122      	str	r2, [r4, #16]
 80082d6:	464b      	mov	r3, r9
 80082d8:	4621      	mov	r1, r4
 80082da:	4640      	mov	r0, r8
 80082dc:	f8cd a000 	str.w	sl, [sp]
 80082e0:	aa03      	add	r2, sp, #12
 80082e2:	f7ff fedf 	bl	80080a4 <_printf_common>
 80082e6:	3001      	adds	r0, #1
 80082e8:	d14a      	bne.n	8008380 <_printf_i+0x1f8>
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295
 80082ee:	b004      	add	sp, #16
 80082f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	f043 0320 	orr.w	r3, r3, #32
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	2778      	movs	r7, #120	; 0x78
 80082fe:	4832      	ldr	r0, [pc, #200]	; (80083c8 <_printf_i+0x240>)
 8008300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	6829      	ldr	r1, [r5, #0]
 8008308:	061f      	lsls	r7, r3, #24
 800830a:	f851 6b04 	ldr.w	r6, [r1], #4
 800830e:	d402      	bmi.n	8008316 <_printf_i+0x18e>
 8008310:	065f      	lsls	r7, r3, #25
 8008312:	bf48      	it	mi
 8008314:	b2b6      	uxthmi	r6, r6
 8008316:	07df      	lsls	r7, r3, #31
 8008318:	bf48      	it	mi
 800831a:	f043 0320 	orrmi.w	r3, r3, #32
 800831e:	6029      	str	r1, [r5, #0]
 8008320:	bf48      	it	mi
 8008322:	6023      	strmi	r3, [r4, #0]
 8008324:	b91e      	cbnz	r6, 800832e <_printf_i+0x1a6>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	f023 0320 	bic.w	r3, r3, #32
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	2310      	movs	r3, #16
 8008330:	e7a6      	b.n	8008280 <_printf_i+0xf8>
 8008332:	4824      	ldr	r0, [pc, #144]	; (80083c4 <_printf_i+0x23c>)
 8008334:	e7e4      	b.n	8008300 <_printf_i+0x178>
 8008336:	4615      	mov	r5, r2
 8008338:	e7bd      	b.n	80082b6 <_printf_i+0x12e>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	6826      	ldr	r6, [r4, #0]
 800833e:	1d18      	adds	r0, r3, #4
 8008340:	6961      	ldr	r1, [r4, #20]
 8008342:	6028      	str	r0, [r5, #0]
 8008344:	0635      	lsls	r5, r6, #24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	d501      	bpl.n	800834e <_printf_i+0x1c6>
 800834a:	6019      	str	r1, [r3, #0]
 800834c:	e002      	b.n	8008354 <_printf_i+0x1cc>
 800834e:	0670      	lsls	r0, r6, #25
 8008350:	d5fb      	bpl.n	800834a <_printf_i+0x1c2>
 8008352:	8019      	strh	r1, [r3, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	4615      	mov	r5, r2
 8008358:	6123      	str	r3, [r4, #16]
 800835a:	e7bc      	b.n	80082d6 <_printf_i+0x14e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	2100      	movs	r1, #0
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	602a      	str	r2, [r5, #0]
 8008364:	681d      	ldr	r5, [r3, #0]
 8008366:	6862      	ldr	r2, [r4, #4]
 8008368:	4628      	mov	r0, r5
 800836a:	f000 fc14 	bl	8008b96 <memchr>
 800836e:	b108      	cbz	r0, 8008374 <_printf_i+0x1ec>
 8008370:	1b40      	subs	r0, r0, r5
 8008372:	6060      	str	r0, [r4, #4]
 8008374:	6863      	ldr	r3, [r4, #4]
 8008376:	6123      	str	r3, [r4, #16]
 8008378:	2300      	movs	r3, #0
 800837a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837e:	e7aa      	b.n	80082d6 <_printf_i+0x14e>
 8008380:	462a      	mov	r2, r5
 8008382:	4649      	mov	r1, r9
 8008384:	4640      	mov	r0, r8
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	47d0      	blx	sl
 800838a:	3001      	adds	r0, #1
 800838c:	d0ad      	beq.n	80082ea <_printf_i+0x162>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	079b      	lsls	r3, r3, #30
 8008392:	d413      	bmi.n	80083bc <_printf_i+0x234>
 8008394:	68e0      	ldr	r0, [r4, #12]
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	4298      	cmp	r0, r3
 800839a:	bfb8      	it	lt
 800839c:	4618      	movlt	r0, r3
 800839e:	e7a6      	b.n	80082ee <_printf_i+0x166>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4632      	mov	r2, r6
 80083a4:	4649      	mov	r1, r9
 80083a6:	4640      	mov	r0, r8
 80083a8:	47d0      	blx	sl
 80083aa:	3001      	adds	r0, #1
 80083ac:	d09d      	beq.n	80082ea <_printf_i+0x162>
 80083ae:	3501      	adds	r5, #1
 80083b0:	68e3      	ldr	r3, [r4, #12]
 80083b2:	9903      	ldr	r1, [sp, #12]
 80083b4:	1a5b      	subs	r3, r3, r1
 80083b6:	42ab      	cmp	r3, r5
 80083b8:	dcf2      	bgt.n	80083a0 <_printf_i+0x218>
 80083ba:	e7eb      	b.n	8008394 <_printf_i+0x20c>
 80083bc:	2500      	movs	r5, #0
 80083be:	f104 0619 	add.w	r6, r4, #25
 80083c2:	e7f5      	b.n	80083b0 <_printf_i+0x228>
 80083c4:	0800b29b 	.word	0x0800b29b
 80083c8:	0800b2ac 	.word	0x0800b2ac

080083cc <std>:
 80083cc:	2300      	movs	r3, #0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	4604      	mov	r4, r0
 80083d2:	e9c0 3300 	strd	r3, r3, [r0]
 80083d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083da:	6083      	str	r3, [r0, #8]
 80083dc:	8181      	strh	r1, [r0, #12]
 80083de:	6643      	str	r3, [r0, #100]	; 0x64
 80083e0:	81c2      	strh	r2, [r0, #14]
 80083e2:	6183      	str	r3, [r0, #24]
 80083e4:	4619      	mov	r1, r3
 80083e6:	2208      	movs	r2, #8
 80083e8:	305c      	adds	r0, #92	; 0x5c
 80083ea:	f000 faa5 	bl	8008938 <memset>
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <std+0x58>)
 80083f0:	6224      	str	r4, [r4, #32]
 80083f2:	6263      	str	r3, [r4, #36]	; 0x24
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <std+0x5c>)
 80083f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <std+0x60>)
 80083fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083fc:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <std+0x64>)
 80083fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <std+0x68>)
 8008402:	429c      	cmp	r4, r3
 8008404:	d006      	beq.n	8008414 <std+0x48>
 8008406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800840a:	4294      	cmp	r4, r2
 800840c:	d002      	beq.n	8008414 <std+0x48>
 800840e:	33d0      	adds	r3, #208	; 0xd0
 8008410:	429c      	cmp	r4, r3
 8008412:	d105      	bne.n	8008420 <std+0x54>
 8008414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800841c:	f000 bbb0 	b.w	8008b80 <__retarget_lock_init_recursive>
 8008420:	bd10      	pop	{r4, pc}
 8008422:	bf00      	nop
 8008424:	08008789 	.word	0x08008789
 8008428:	080087ab 	.word	0x080087ab
 800842c:	080087e3 	.word	0x080087e3
 8008430:	08008807 	.word	0x08008807
 8008434:	20002604 	.word	0x20002604

08008438 <stdio_exit_handler>:
 8008438:	4a02      	ldr	r2, [pc, #8]	; (8008444 <stdio_exit_handler+0xc>)
 800843a:	4903      	ldr	r1, [pc, #12]	; (8008448 <stdio_exit_handler+0x10>)
 800843c:	4803      	ldr	r0, [pc, #12]	; (800844c <stdio_exit_handler+0x14>)
 800843e:	f000 b869 	b.w	8008514 <_fwalk_sglue>
 8008442:	bf00      	nop
 8008444:	20000034 	.word	0x20000034
 8008448:	0800ad41 	.word	0x0800ad41
 800844c:	200001ac 	.word	0x200001ac

08008450 <cleanup_stdio>:
 8008450:	6841      	ldr	r1, [r0, #4]
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <cleanup_stdio+0x34>)
 8008454:	b510      	push	{r4, lr}
 8008456:	4299      	cmp	r1, r3
 8008458:	4604      	mov	r4, r0
 800845a:	d001      	beq.n	8008460 <cleanup_stdio+0x10>
 800845c:	f002 fc70 	bl	800ad40 <_fflush_r>
 8008460:	68a1      	ldr	r1, [r4, #8]
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <cleanup_stdio+0x38>)
 8008464:	4299      	cmp	r1, r3
 8008466:	d002      	beq.n	800846e <cleanup_stdio+0x1e>
 8008468:	4620      	mov	r0, r4
 800846a:	f002 fc69 	bl	800ad40 <_fflush_r>
 800846e:	68e1      	ldr	r1, [r4, #12]
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <cleanup_stdio+0x3c>)
 8008472:	4299      	cmp	r1, r3
 8008474:	d004      	beq.n	8008480 <cleanup_stdio+0x30>
 8008476:	4620      	mov	r0, r4
 8008478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800847c:	f002 bc60 	b.w	800ad40 <_fflush_r>
 8008480:	bd10      	pop	{r4, pc}
 8008482:	bf00      	nop
 8008484:	20002604 	.word	0x20002604
 8008488:	2000266c 	.word	0x2000266c
 800848c:	200026d4 	.word	0x200026d4

08008490 <global_stdio_init.part.0>:
 8008490:	b510      	push	{r4, lr}
 8008492:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <global_stdio_init.part.0+0x30>)
 8008494:	4c0b      	ldr	r4, [pc, #44]	; (80084c4 <global_stdio_init.part.0+0x34>)
 8008496:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <global_stdio_init.part.0+0x38>)
 8008498:	4620      	mov	r0, r4
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	2104      	movs	r1, #4
 800849e:	2200      	movs	r2, #0
 80084a0:	f7ff ff94 	bl	80083cc <std>
 80084a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80084a8:	2201      	movs	r2, #1
 80084aa:	2109      	movs	r1, #9
 80084ac:	f7ff ff8e 	bl	80083cc <std>
 80084b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084b4:	2202      	movs	r2, #2
 80084b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ba:	2112      	movs	r1, #18
 80084bc:	f7ff bf86 	b.w	80083cc <std>
 80084c0:	2000273c 	.word	0x2000273c
 80084c4:	20002604 	.word	0x20002604
 80084c8:	08008439 	.word	0x08008439

080084cc <__sfp_lock_acquire>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__sfp_lock_acquire+0x8>)
 80084ce:	f000 bb58 	b.w	8008b82 <__retarget_lock_acquire_recursive>
 80084d2:	bf00      	nop
 80084d4:	20002745 	.word	0x20002745

080084d8 <__sfp_lock_release>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__sfp_lock_release+0x8>)
 80084da:	f000 bb53 	b.w	8008b84 <__retarget_lock_release_recursive>
 80084de:	bf00      	nop
 80084e0:	20002745 	.word	0x20002745

080084e4 <__sinit>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	4604      	mov	r4, r0
 80084e8:	f7ff fff0 	bl	80084cc <__sfp_lock_acquire>
 80084ec:	6a23      	ldr	r3, [r4, #32]
 80084ee:	b11b      	cbz	r3, 80084f8 <__sinit+0x14>
 80084f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f4:	f7ff bff0 	b.w	80084d8 <__sfp_lock_release>
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <__sinit+0x28>)
 80084fa:	6223      	str	r3, [r4, #32]
 80084fc:	4b04      	ldr	r3, [pc, #16]	; (8008510 <__sinit+0x2c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f5      	bne.n	80084f0 <__sinit+0xc>
 8008504:	f7ff ffc4 	bl	8008490 <global_stdio_init.part.0>
 8008508:	e7f2      	b.n	80084f0 <__sinit+0xc>
 800850a:	bf00      	nop
 800850c:	08008451 	.word	0x08008451
 8008510:	2000273c 	.word	0x2000273c

08008514 <_fwalk_sglue>:
 8008514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008518:	4607      	mov	r7, r0
 800851a:	4688      	mov	r8, r1
 800851c:	4614      	mov	r4, r2
 800851e:	2600      	movs	r6, #0
 8008520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008524:	f1b9 0901 	subs.w	r9, r9, #1
 8008528:	d505      	bpl.n	8008536 <_fwalk_sglue+0x22>
 800852a:	6824      	ldr	r4, [r4, #0]
 800852c:	2c00      	cmp	r4, #0
 800852e:	d1f7      	bne.n	8008520 <_fwalk_sglue+0xc>
 8008530:	4630      	mov	r0, r6
 8008532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d907      	bls.n	800854c <_fwalk_sglue+0x38>
 800853c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008540:	3301      	adds	r3, #1
 8008542:	d003      	beq.n	800854c <_fwalk_sglue+0x38>
 8008544:	4629      	mov	r1, r5
 8008546:	4638      	mov	r0, r7
 8008548:	47c0      	blx	r8
 800854a:	4306      	orrs	r6, r0
 800854c:	3568      	adds	r5, #104	; 0x68
 800854e:	e7e9      	b.n	8008524 <_fwalk_sglue+0x10>

08008550 <iprintf>:
 8008550:	b40f      	push	{r0, r1, r2, r3}
 8008552:	b507      	push	{r0, r1, r2, lr}
 8008554:	4906      	ldr	r1, [pc, #24]	; (8008570 <iprintf+0x20>)
 8008556:	ab04      	add	r3, sp, #16
 8008558:	6808      	ldr	r0, [r1, #0]
 800855a:	f853 2b04 	ldr.w	r2, [r3], #4
 800855e:	6881      	ldr	r1, [r0, #8]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	f002 fa51 	bl	800aa08 <_vfiprintf_r>
 8008566:	b003      	add	sp, #12
 8008568:	f85d eb04 	ldr.w	lr, [sp], #4
 800856c:	b004      	add	sp, #16
 800856e:	4770      	bx	lr
 8008570:	200001f8 	.word	0x200001f8

08008574 <_puts_r>:
 8008574:	6a03      	ldr	r3, [r0, #32]
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	4605      	mov	r5, r0
 800857a:	460e      	mov	r6, r1
 800857c:	6884      	ldr	r4, [r0, #8]
 800857e:	b90b      	cbnz	r3, 8008584 <_puts_r+0x10>
 8008580:	f7ff ffb0 	bl	80084e4 <__sinit>
 8008584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008586:	07db      	lsls	r3, r3, #31
 8008588:	d405      	bmi.n	8008596 <_puts_r+0x22>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	0598      	lsls	r0, r3, #22
 800858e:	d402      	bmi.n	8008596 <_puts_r+0x22>
 8008590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008592:	f000 faf6 	bl	8008b82 <__retarget_lock_acquire_recursive>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	0719      	lsls	r1, r3, #28
 800859a:	d513      	bpl.n	80085c4 <_puts_r+0x50>
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	b18b      	cbz	r3, 80085c4 <_puts_r+0x50>
 80085a0:	3e01      	subs	r6, #1
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085a8:	3b01      	subs	r3, #1
 80085aa:	60a3      	str	r3, [r4, #8]
 80085ac:	b9e9      	cbnz	r1, 80085ea <_puts_r+0x76>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	da2e      	bge.n	8008610 <_puts_r+0x9c>
 80085b2:	4622      	mov	r2, r4
 80085b4:	210a      	movs	r1, #10
 80085b6:	4628      	mov	r0, r5
 80085b8:	f000 f929 	bl	800880e <__swbuf_r>
 80085bc:	3001      	adds	r0, #1
 80085be:	d007      	beq.n	80085d0 <_puts_r+0x5c>
 80085c0:	250a      	movs	r5, #10
 80085c2:	e007      	b.n	80085d4 <_puts_r+0x60>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 f95e 	bl	8008888 <__swsetup_r>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d0e7      	beq.n	80085a0 <_puts_r+0x2c>
 80085d0:	f04f 35ff 	mov.w	r5, #4294967295
 80085d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085d6:	07da      	lsls	r2, r3, #31
 80085d8:	d405      	bmi.n	80085e6 <_puts_r+0x72>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	059b      	lsls	r3, r3, #22
 80085de:	d402      	bmi.n	80085e6 <_puts_r+0x72>
 80085e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e2:	f000 facf 	bl	8008b84 <__retarget_lock_release_recursive>
 80085e6:	4628      	mov	r0, r5
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	da04      	bge.n	80085f8 <_puts_r+0x84>
 80085ee:	69a2      	ldr	r2, [r4, #24]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	dc06      	bgt.n	8008602 <_puts_r+0x8e>
 80085f4:	290a      	cmp	r1, #10
 80085f6:	d004      	beq.n	8008602 <_puts_r+0x8e>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	7019      	strb	r1, [r3, #0]
 8008600:	e7cf      	b.n	80085a2 <_puts_r+0x2e>
 8008602:	4622      	mov	r2, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f000 f902 	bl	800880e <__swbuf_r>
 800860a:	3001      	adds	r0, #1
 800860c:	d1c9      	bne.n	80085a2 <_puts_r+0x2e>
 800860e:	e7df      	b.n	80085d0 <_puts_r+0x5c>
 8008610:	250a      	movs	r5, #10
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	701d      	strb	r5, [r3, #0]
 800861a:	e7db      	b.n	80085d4 <_puts_r+0x60>

0800861c <puts>:
 800861c:	4b02      	ldr	r3, [pc, #8]	; (8008628 <puts+0xc>)
 800861e:	4601      	mov	r1, r0
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f7ff bfa7 	b.w	8008574 <_puts_r>
 8008626:	bf00      	nop
 8008628:	200001f8 	.word	0x200001f8

0800862c <setvbuf>:
 800862c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008630:	461d      	mov	r5, r3
 8008632:	4b54      	ldr	r3, [pc, #336]	; (8008784 <setvbuf+0x158>)
 8008634:	4604      	mov	r4, r0
 8008636:	681f      	ldr	r7, [r3, #0]
 8008638:	460e      	mov	r6, r1
 800863a:	4690      	mov	r8, r2
 800863c:	b127      	cbz	r7, 8008648 <setvbuf+0x1c>
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	b913      	cbnz	r3, 8008648 <setvbuf+0x1c>
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff ff4e 	bl	80084e4 <__sinit>
 8008648:	f1b8 0f02 	cmp.w	r8, #2
 800864c:	d006      	beq.n	800865c <setvbuf+0x30>
 800864e:	f1b8 0f01 	cmp.w	r8, #1
 8008652:	f200 8094 	bhi.w	800877e <setvbuf+0x152>
 8008656:	2d00      	cmp	r5, #0
 8008658:	f2c0 8091 	blt.w	800877e <setvbuf+0x152>
 800865c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800865e:	07da      	lsls	r2, r3, #31
 8008660:	d405      	bmi.n	800866e <setvbuf+0x42>
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	059b      	lsls	r3, r3, #22
 8008666:	d402      	bmi.n	800866e <setvbuf+0x42>
 8008668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800866a:	f000 fa8a 	bl	8008b82 <__retarget_lock_acquire_recursive>
 800866e:	4621      	mov	r1, r4
 8008670:	4638      	mov	r0, r7
 8008672:	f002 fb65 	bl	800ad40 <_fflush_r>
 8008676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008678:	b141      	cbz	r1, 800868c <setvbuf+0x60>
 800867a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800867e:	4299      	cmp	r1, r3
 8008680:	d002      	beq.n	8008688 <setvbuf+0x5c>
 8008682:	4638      	mov	r0, r7
 8008684:	f001 f93c 	bl	8009900 <_free_r>
 8008688:	2300      	movs	r3, #0
 800868a:	6363      	str	r3, [r4, #52]	; 0x34
 800868c:	2300      	movs	r3, #0
 800868e:	61a3      	str	r3, [r4, #24]
 8008690:	6063      	str	r3, [r4, #4]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	0618      	lsls	r0, r3, #24
 8008696:	d503      	bpl.n	80086a0 <setvbuf+0x74>
 8008698:	4638      	mov	r0, r7
 800869a:	6921      	ldr	r1, [r4, #16]
 800869c:	f001 f930 	bl	8009900 <_free_r>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f1b8 0f02 	cmp.w	r8, #2
 80086a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	d05f      	beq.n	8008772 <setvbuf+0x146>
 80086b2:	ab01      	add	r3, sp, #4
 80086b4:	466a      	mov	r2, sp
 80086b6:	4621      	mov	r1, r4
 80086b8:	4638      	mov	r0, r7
 80086ba:	f002 fb7b 	bl	800adb4 <__swhatbuf_r>
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	4318      	orrs	r0, r3
 80086c2:	81a0      	strh	r0, [r4, #12]
 80086c4:	bb2d      	cbnz	r5, 8008712 <setvbuf+0xe6>
 80086c6:	9d00      	ldr	r5, [sp, #0]
 80086c8:	4628      	mov	r0, r5
 80086ca:	f7fe fa63 	bl	8006b94 <malloc>
 80086ce:	4606      	mov	r6, r0
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d150      	bne.n	8008776 <setvbuf+0x14a>
 80086d4:	f8dd 9000 	ldr.w	r9, [sp]
 80086d8:	45a9      	cmp	r9, r5
 80086da:	d13e      	bne.n	800875a <setvbuf+0x12e>
 80086dc:	f04f 35ff 	mov.w	r5, #4294967295
 80086e0:	2200      	movs	r2, #0
 80086e2:	60a2      	str	r2, [r4, #8]
 80086e4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80086e8:	6022      	str	r2, [r4, #0]
 80086ea:	6122      	str	r2, [r4, #16]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f2:	6162      	str	r2, [r4, #20]
 80086f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086f6:	f043 0302 	orr.w	r3, r3, #2
 80086fa:	07d1      	lsls	r1, r2, #31
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	d404      	bmi.n	800870a <setvbuf+0xde>
 8008700:	059b      	lsls	r3, r3, #22
 8008702:	d402      	bmi.n	800870a <setvbuf+0xde>
 8008704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008706:	f000 fa3d 	bl	8008b84 <__retarget_lock_release_recursive>
 800870a:	4628      	mov	r0, r5
 800870c:	b003      	add	sp, #12
 800870e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008712:	2e00      	cmp	r6, #0
 8008714:	d0d8      	beq.n	80086c8 <setvbuf+0x9c>
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	b913      	cbnz	r3, 8008720 <setvbuf+0xf4>
 800871a:	4638      	mov	r0, r7
 800871c:	f7ff fee2 	bl	80084e4 <__sinit>
 8008720:	f1b8 0f01 	cmp.w	r8, #1
 8008724:	bf08      	it	eq
 8008726:	89a3      	ldrheq	r3, [r4, #12]
 8008728:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800872c:	bf04      	itt	eq
 800872e:	f043 0301 	orreq.w	r3, r3, #1
 8008732:	81a3      	strheq	r3, [r4, #12]
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	6026      	str	r6, [r4, #0]
 8008738:	f013 0208 	ands.w	r2, r3, #8
 800873c:	d01d      	beq.n	800877a <setvbuf+0x14e>
 800873e:	07da      	lsls	r2, r3, #31
 8008740:	bf41      	itttt	mi
 8008742:	2200      	movmi	r2, #0
 8008744:	426d      	negmi	r5, r5
 8008746:	60a2      	strmi	r2, [r4, #8]
 8008748:	61a5      	strmi	r5, [r4, #24]
 800874a:	bf58      	it	pl
 800874c:	60a5      	strpl	r5, [r4, #8]
 800874e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008750:	f015 0501 	ands.w	r5, r5, #1
 8008754:	d0d4      	beq.n	8008700 <setvbuf+0xd4>
 8008756:	2500      	movs	r5, #0
 8008758:	e7d7      	b.n	800870a <setvbuf+0xde>
 800875a:	4648      	mov	r0, r9
 800875c:	f7fe fa1a 	bl	8006b94 <malloc>
 8008760:	4606      	mov	r6, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d0ba      	beq.n	80086dc <setvbuf+0xb0>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	464d      	mov	r5, r9
 800876a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	e7d1      	b.n	8008716 <setvbuf+0xea>
 8008772:	2500      	movs	r5, #0
 8008774:	e7b4      	b.n	80086e0 <setvbuf+0xb4>
 8008776:	46a9      	mov	r9, r5
 8008778:	e7f5      	b.n	8008766 <setvbuf+0x13a>
 800877a:	60a2      	str	r2, [r4, #8]
 800877c:	e7e7      	b.n	800874e <setvbuf+0x122>
 800877e:	f04f 35ff 	mov.w	r5, #4294967295
 8008782:	e7c2      	b.n	800870a <setvbuf+0xde>
 8008784:	200001f8 	.word	0x200001f8

08008788 <__sread>:
 8008788:	b510      	push	{r4, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008790:	f000 f998 	bl	8008ac4 <_read_r>
 8008794:	2800      	cmp	r0, #0
 8008796:	bfab      	itete	ge
 8008798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800879a:	89a3      	ldrhlt	r3, [r4, #12]
 800879c:	181b      	addge	r3, r3, r0
 800879e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087a2:	bfac      	ite	ge
 80087a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087a6:	81a3      	strhlt	r3, [r4, #12]
 80087a8:	bd10      	pop	{r4, pc}

080087aa <__swrite>:
 80087aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	461f      	mov	r7, r3
 80087b0:	898b      	ldrh	r3, [r1, #12]
 80087b2:	4605      	mov	r5, r0
 80087b4:	05db      	lsls	r3, r3, #23
 80087b6:	460c      	mov	r4, r1
 80087b8:	4616      	mov	r6, r2
 80087ba:	d505      	bpl.n	80087c8 <__swrite+0x1e>
 80087bc:	2302      	movs	r3, #2
 80087be:	2200      	movs	r2, #0
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	f000 f96c 	bl	8008aa0 <_lseek_r>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	4632      	mov	r2, r6
 80087cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	4628      	mov	r0, r5
 80087d4:	463b      	mov	r3, r7
 80087d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	f000 b993 	b.w	8008b08 <_write_r>

080087e2 <__sseek>:
 80087e2:	b510      	push	{r4, lr}
 80087e4:	460c      	mov	r4, r1
 80087e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ea:	f000 f959 	bl	8008aa0 <_lseek_r>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	bf15      	itete	ne
 80087f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087fe:	81a3      	strheq	r3, [r4, #12]
 8008800:	bf18      	it	ne
 8008802:	81a3      	strhne	r3, [r4, #12]
 8008804:	bd10      	pop	{r4, pc}

08008806 <__sclose>:
 8008806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800880a:	f000 b939 	b.w	8008a80 <_close_r>

0800880e <__swbuf_r>:
 800880e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008810:	460e      	mov	r6, r1
 8008812:	4614      	mov	r4, r2
 8008814:	4605      	mov	r5, r0
 8008816:	b118      	cbz	r0, 8008820 <__swbuf_r+0x12>
 8008818:	6a03      	ldr	r3, [r0, #32]
 800881a:	b90b      	cbnz	r3, 8008820 <__swbuf_r+0x12>
 800881c:	f7ff fe62 	bl	80084e4 <__sinit>
 8008820:	69a3      	ldr	r3, [r4, #24]
 8008822:	60a3      	str	r3, [r4, #8]
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	071a      	lsls	r2, r3, #28
 8008828:	d525      	bpl.n	8008876 <__swbuf_r+0x68>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	b31b      	cbz	r3, 8008876 <__swbuf_r+0x68>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	6922      	ldr	r2, [r4, #16]
 8008832:	b2f6      	uxtb	r6, r6
 8008834:	1a98      	subs	r0, r3, r2
 8008836:	6963      	ldr	r3, [r4, #20]
 8008838:	4637      	mov	r7, r6
 800883a:	4283      	cmp	r3, r0
 800883c:	dc04      	bgt.n	8008848 <__swbuf_r+0x3a>
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f002 fa7d 	bl	800ad40 <_fflush_r>
 8008846:	b9e0      	cbnz	r0, 8008882 <__swbuf_r+0x74>
 8008848:	68a3      	ldr	r3, [r4, #8]
 800884a:	3b01      	subs	r3, #1
 800884c:	60a3      	str	r3, [r4, #8]
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	701e      	strb	r6, [r3, #0]
 8008856:	6962      	ldr	r2, [r4, #20]
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	429a      	cmp	r2, r3
 800885c:	d004      	beq.n	8008868 <__swbuf_r+0x5a>
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	07db      	lsls	r3, r3, #31
 8008862:	d506      	bpl.n	8008872 <__swbuf_r+0x64>
 8008864:	2e0a      	cmp	r6, #10
 8008866:	d104      	bne.n	8008872 <__swbuf_r+0x64>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f002 fa68 	bl	800ad40 <_fflush_r>
 8008870:	b938      	cbnz	r0, 8008882 <__swbuf_r+0x74>
 8008872:	4638      	mov	r0, r7
 8008874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f805 	bl	8008888 <__swsetup_r>
 800887e:	2800      	cmp	r0, #0
 8008880:	d0d5      	beq.n	800882e <__swbuf_r+0x20>
 8008882:	f04f 37ff 	mov.w	r7, #4294967295
 8008886:	e7f4      	b.n	8008872 <__swbuf_r+0x64>

08008888 <__swsetup_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <__swsetup_r+0xac>)
 800888c:	4605      	mov	r5, r0
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	460c      	mov	r4, r1
 8008892:	b118      	cbz	r0, 800889c <__swsetup_r+0x14>
 8008894:	6a03      	ldr	r3, [r0, #32]
 8008896:	b90b      	cbnz	r3, 800889c <__swsetup_r+0x14>
 8008898:	f7ff fe24 	bl	80084e4 <__sinit>
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a2:	0718      	lsls	r0, r3, #28
 80088a4:	d422      	bmi.n	80088ec <__swsetup_r+0x64>
 80088a6:	06d9      	lsls	r1, r3, #27
 80088a8:	d407      	bmi.n	80088ba <__swsetup_r+0x32>
 80088aa:	2309      	movs	r3, #9
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	e034      	b.n	8008924 <__swsetup_r+0x9c>
 80088ba:	0758      	lsls	r0, r3, #29
 80088bc:	d512      	bpl.n	80088e4 <__swsetup_r+0x5c>
 80088be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c0:	b141      	cbz	r1, 80088d4 <__swsetup_r+0x4c>
 80088c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c6:	4299      	cmp	r1, r3
 80088c8:	d002      	beq.n	80088d0 <__swsetup_r+0x48>
 80088ca:	4628      	mov	r0, r5
 80088cc:	f001 f818 	bl	8009900 <_free_r>
 80088d0:	2300      	movs	r3, #0
 80088d2:	6363      	str	r3, [r4, #52]	; 0x34
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	2300      	movs	r3, #0
 80088de:	6063      	str	r3, [r4, #4]
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f043 0308 	orr.w	r3, r3, #8
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	b94b      	cbnz	r3, 8008904 <__swsetup_r+0x7c>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fa:	d003      	beq.n	8008904 <__swsetup_r+0x7c>
 80088fc:	4621      	mov	r1, r4
 80088fe:	4628      	mov	r0, r5
 8008900:	f002 fa7d 	bl	800adfe <__smakebuf_r>
 8008904:	89a0      	ldrh	r0, [r4, #12]
 8008906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800890a:	f010 0301 	ands.w	r3, r0, #1
 800890e:	d00a      	beq.n	8008926 <__swsetup_r+0x9e>
 8008910:	2300      	movs	r3, #0
 8008912:	60a3      	str	r3, [r4, #8]
 8008914:	6963      	ldr	r3, [r4, #20]
 8008916:	425b      	negs	r3, r3
 8008918:	61a3      	str	r3, [r4, #24]
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	b943      	cbnz	r3, 8008930 <__swsetup_r+0xa8>
 800891e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008922:	d1c4      	bne.n	80088ae <__swsetup_r+0x26>
 8008924:	bd38      	pop	{r3, r4, r5, pc}
 8008926:	0781      	lsls	r1, r0, #30
 8008928:	bf58      	it	pl
 800892a:	6963      	ldrpl	r3, [r4, #20]
 800892c:	60a3      	str	r3, [r4, #8]
 800892e:	e7f4      	b.n	800891a <__swsetup_r+0x92>
 8008930:	2000      	movs	r0, #0
 8008932:	e7f7      	b.n	8008924 <__swsetup_r+0x9c>
 8008934:	200001f8 	.word	0x200001f8

08008938 <memset>:
 8008938:	4603      	mov	r3, r0
 800893a:	4402      	add	r2, r0
 800893c:	4293      	cmp	r3, r2
 800893e:	d100      	bne.n	8008942 <memset+0xa>
 8008940:	4770      	bx	lr
 8008942:	f803 1b01 	strb.w	r1, [r3], #1
 8008946:	e7f9      	b.n	800893c <memset+0x4>

08008948 <strncmp>:
 8008948:	b510      	push	{r4, lr}
 800894a:	b16a      	cbz	r2, 8008968 <strncmp+0x20>
 800894c:	3901      	subs	r1, #1
 800894e:	1884      	adds	r4, r0, r2
 8008950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008954:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008958:	429a      	cmp	r2, r3
 800895a:	d103      	bne.n	8008964 <strncmp+0x1c>
 800895c:	42a0      	cmp	r0, r4
 800895e:	d001      	beq.n	8008964 <strncmp+0x1c>
 8008960:	2a00      	cmp	r2, #0
 8008962:	d1f5      	bne.n	8008950 <strncmp+0x8>
 8008964:	1ad0      	subs	r0, r2, r3
 8008966:	bd10      	pop	{r4, pc}
 8008968:	4610      	mov	r0, r2
 800896a:	e7fc      	b.n	8008966 <strncmp+0x1e>

0800896c <strncpy>:
 800896c:	4603      	mov	r3, r0
 800896e:	b510      	push	{r4, lr}
 8008970:	3901      	subs	r1, #1
 8008972:	b132      	cbz	r2, 8008982 <strncpy+0x16>
 8008974:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008978:	3a01      	subs	r2, #1
 800897a:	f803 4b01 	strb.w	r4, [r3], #1
 800897e:	2c00      	cmp	r4, #0
 8008980:	d1f7      	bne.n	8008972 <strncpy+0x6>
 8008982:	2100      	movs	r1, #0
 8008984:	441a      	add	r2, r3
 8008986:	4293      	cmp	r3, r2
 8008988:	d100      	bne.n	800898c <strncpy+0x20>
 800898a:	bd10      	pop	{r4, pc}
 800898c:	f803 1b01 	strb.w	r1, [r3], #1
 8008990:	e7f9      	b.n	8008986 <strncpy+0x1a>
	...

08008994 <strtok>:
 8008994:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <strtok+0x5c>)
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	681f      	ldr	r7, [r3, #0]
 800899c:	4605      	mov	r5, r0
 800899e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80089a0:	460e      	mov	r6, r1
 80089a2:	b9ec      	cbnz	r4, 80089e0 <strtok+0x4c>
 80089a4:	2050      	movs	r0, #80	; 0x50
 80089a6:	f7fe f8f5 	bl	8006b94 <malloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6478      	str	r0, [r7, #68]	; 0x44
 80089ae:	b920      	cbnz	r0, 80089ba <strtok+0x26>
 80089b0:	215b      	movs	r1, #91	; 0x5b
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <strtok+0x60>)
 80089b4:	4810      	ldr	r0, [pc, #64]	; (80089f8 <strtok+0x64>)
 80089b6:	f000 f915 	bl	8008be4 <__assert_func>
 80089ba:	e9c0 4400 	strd	r4, r4, [r0]
 80089be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80089c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80089c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80089ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80089ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80089d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80089d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80089da:	6184      	str	r4, [r0, #24]
 80089dc:	7704      	strb	r4, [r0, #28]
 80089de:	6244      	str	r4, [r0, #36]	; 0x24
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e6:	2301      	movs	r3, #1
 80089e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	f000 b806 	b.w	80089fc <__strtok_r>
 80089f0:	200001f8 	.word	0x200001f8
 80089f4:	0800b2bd 	.word	0x0800b2bd
 80089f8:	0800b2d4 	.word	0x0800b2d4

080089fc <__strtok_r>:
 80089fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fe:	b908      	cbnz	r0, 8008a04 <__strtok_r+0x8>
 8008a00:	6810      	ldr	r0, [r2, #0]
 8008a02:	b188      	cbz	r0, 8008a28 <__strtok_r+0x2c>
 8008a04:	4604      	mov	r4, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008a0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008a12:	b91e      	cbnz	r6, 8008a1c <__strtok_r+0x20>
 8008a14:	b965      	cbnz	r5, 8008a30 <__strtok_r+0x34>
 8008a16:	4628      	mov	r0, r5
 8008a18:	6015      	str	r5, [r2, #0]
 8008a1a:	e005      	b.n	8008a28 <__strtok_r+0x2c>
 8008a1c:	42b5      	cmp	r5, r6
 8008a1e:	d1f6      	bne.n	8008a0e <__strtok_r+0x12>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1f0      	bne.n	8008a06 <__strtok_r+0xa>
 8008a24:	6014      	str	r4, [r2, #0]
 8008a26:	7003      	strb	r3, [r0, #0]
 8008a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2a:	461c      	mov	r4, r3
 8008a2c:	e00c      	b.n	8008a48 <__strtok_r+0x4c>
 8008a2e:	b915      	cbnz	r5, 8008a36 <__strtok_r+0x3a>
 8008a30:	460e      	mov	r6, r1
 8008a32:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008a3a:	42ab      	cmp	r3, r5
 8008a3c:	d1f7      	bne.n	8008a2e <__strtok_r+0x32>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f3      	beq.n	8008a2a <__strtok_r+0x2e>
 8008a42:	2300      	movs	r3, #0
 8008a44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008a48:	6014      	str	r4, [r2, #0]
 8008a4a:	e7ed      	b.n	8008a28 <__strtok_r+0x2c>

08008a4c <strstr>:
 8008a4c:	780a      	ldrb	r2, [r1, #0]
 8008a4e:	b570      	push	{r4, r5, r6, lr}
 8008a50:	b96a      	cbnz	r2, 8008a6e <strstr+0x22>
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d109      	bne.n	8008a6c <strstr+0x20>
 8008a58:	460c      	mov	r4, r1
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0f6      	beq.n	8008a52 <strstr+0x6>
 8008a64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	d0f7      	beq.n	8008a5c <strstr+0x10>
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	7803      	ldrb	r3, [r0, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1ef      	bne.n	8008a54 <strstr+0x8>
 8008a74:	4618      	mov	r0, r3
 8008a76:	e7ec      	b.n	8008a52 <strstr+0x6>

08008a78 <_localeconv_r>:
 8008a78:	4800      	ldr	r0, [pc, #0]	; (8008a7c <_localeconv_r+0x4>)
 8008a7a:	4770      	bx	lr
 8008a7c:	20000130 	.word	0x20000130

08008a80 <_close_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	2300      	movs	r3, #0
 8008a84:	4d05      	ldr	r5, [pc, #20]	; (8008a9c <_close_r+0x1c>)
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7fa ff62 	bl	8003954 <_close>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_close_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_close_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20002740 	.word	0x20002740

08008aa0 <_lseek_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4d05      	ldr	r5, [pc, #20]	; (8008ac0 <_lseek_r+0x20>)
 8008aac:	602a      	str	r2, [r5, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f7fa ff74 	bl	800399c <_lseek>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_lseek_r+0x1e>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_lseek_r+0x1e>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20002740 	.word	0x20002740

08008ac4 <_read_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	4611      	mov	r1, r2
 8008acc:	2200      	movs	r2, #0
 8008ace:	4d05      	ldr	r5, [pc, #20]	; (8008ae4 <_read_r+0x20>)
 8008ad0:	602a      	str	r2, [r5, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f7fa ff21 	bl	800391a <_read>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_read_r+0x1e>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_read_r+0x1e>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	20002740 	.word	0x20002740

08008ae8 <_sbrk_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	2300      	movs	r3, #0
 8008aec:	4d05      	ldr	r5, [pc, #20]	; (8008b04 <_sbrk_r+0x1c>)
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	f7fa ff5e 	bl	80039b4 <_sbrk>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_sbrk_r+0x1a>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_sbrk_r+0x1a>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20002740 	.word	0x20002740

08008b08 <_write_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	2200      	movs	r2, #0
 8008b12:	4d05      	ldr	r5, [pc, #20]	; (8008b28 <_write_r+0x20>)
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7f9 fa72 	bl	8002000 <_write>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_write_r+0x1e>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_write_r+0x1e>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20002740 	.word	0x20002740

08008b2c <__errno>:
 8008b2c:	4b01      	ldr	r3, [pc, #4]	; (8008b34 <__errno+0x8>)
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	200001f8 	.word	0x200001f8

08008b38 <__libc_init_array>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	4d0c      	ldr	r5, [pc, #48]	; (8008b70 <__libc_init_array+0x38>)
 8008b3e:	4c0d      	ldr	r4, [pc, #52]	; (8008b74 <__libc_init_array+0x3c>)
 8008b40:	1b64      	subs	r4, r4, r5
 8008b42:	10a4      	asrs	r4, r4, #2
 8008b44:	42a6      	cmp	r6, r4
 8008b46:	d109      	bne.n	8008b5c <__libc_init_array+0x24>
 8008b48:	f002 fa18 	bl	800af7c <_init>
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	4d0a      	ldr	r5, [pc, #40]	; (8008b78 <__libc_init_array+0x40>)
 8008b50:	4c0a      	ldr	r4, [pc, #40]	; (8008b7c <__libc_init_array+0x44>)
 8008b52:	1b64      	subs	r4, r4, r5
 8008b54:	10a4      	asrs	r4, r4, #2
 8008b56:	42a6      	cmp	r6, r4
 8008b58:	d105      	bne.n	8008b66 <__libc_init_array+0x2e>
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b60:	4798      	blx	r3
 8008b62:	3601      	adds	r6, #1
 8008b64:	e7ee      	b.n	8008b44 <__libc_init_array+0xc>
 8008b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6a:	4798      	blx	r3
 8008b6c:	3601      	adds	r6, #1
 8008b6e:	e7f2      	b.n	8008b56 <__libc_init_array+0x1e>
 8008b70:	0800b5b8 	.word	0x0800b5b8
 8008b74:	0800b5b8 	.word	0x0800b5b8
 8008b78:	0800b5b8 	.word	0x0800b5b8
 8008b7c:	0800b5bc 	.word	0x0800b5bc

08008b80 <__retarget_lock_init_recursive>:
 8008b80:	4770      	bx	lr

08008b82 <__retarget_lock_acquire_recursive>:
 8008b82:	4770      	bx	lr

08008b84 <__retarget_lock_release_recursive>:
 8008b84:	4770      	bx	lr

08008b86 <strcpy>:
 8008b86:	4603      	mov	r3, r0
 8008b88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b8c:	f803 2b01 	strb.w	r2, [r3], #1
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d1f9      	bne.n	8008b88 <strcpy+0x2>
 8008b94:	4770      	bx	lr

08008b96 <memchr>:
 8008b96:	4603      	mov	r3, r0
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	b2c9      	uxtb	r1, r1
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	d101      	bne.n	8008ba8 <memchr+0x12>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e003      	b.n	8008bb0 <memchr+0x1a>
 8008ba8:	7804      	ldrb	r4, [r0, #0]
 8008baa:	3301      	adds	r3, #1
 8008bac:	428c      	cmp	r4, r1
 8008bae:	d1f6      	bne.n	8008b9e <memchr+0x8>
 8008bb0:	bd10      	pop	{r4, pc}

08008bb2 <memcpy>:
 8008bb2:	440a      	add	r2, r1
 8008bb4:	4291      	cmp	r1, r2
 8008bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bba:	d100      	bne.n	8008bbe <memcpy+0xc>
 8008bbc:	4770      	bx	lr
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc4:	4291      	cmp	r1, r2
 8008bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bca:	d1f9      	bne.n	8008bc0 <memcpy+0xe>
 8008bcc:	bd10      	pop	{r4, pc}
	...

08008bd0 <nan>:
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	4901      	ldr	r1, [pc, #4]	; (8008bd8 <nan+0x8>)
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	7ff80000 	.word	0x7ff80000

08008bdc <nanf>:
 8008bdc:	4800      	ldr	r0, [pc, #0]	; (8008be0 <nanf+0x4>)
 8008bde:	4770      	bx	lr
 8008be0:	7fc00000 	.word	0x7fc00000

08008be4 <__assert_func>:
 8008be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008be6:	4614      	mov	r4, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <__assert_func+0x2c>)
 8008bec:	4605      	mov	r5, r0
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68d8      	ldr	r0, [r3, #12]
 8008bf2:	b14c      	cbz	r4, 8008c08 <__assert_func+0x24>
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <__assert_func+0x30>)
 8008bf6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bfa:	9100      	str	r1, [sp, #0]
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	4906      	ldr	r1, [pc, #24]	; (8008c18 <__assert_func+0x34>)
 8008c00:	f002 f8c6 	bl	800ad90 <fiprintf>
 8008c04:	f002 f95a 	bl	800aebc <abort>
 8008c08:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <__assert_func+0x38>)
 8008c0a:	461c      	mov	r4, r3
 8008c0c:	e7f3      	b.n	8008bf6 <__assert_func+0x12>
 8008c0e:	bf00      	nop
 8008c10:	200001f8 	.word	0x200001f8
 8008c14:	0800b336 	.word	0x0800b336
 8008c18:	0800b343 	.word	0x0800b343
 8008c1c:	0800b371 	.word	0x0800b371

08008c20 <quorem>:
 8008c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	6903      	ldr	r3, [r0, #16]
 8008c26:	690c      	ldr	r4, [r1, #16]
 8008c28:	4607      	mov	r7, r0
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	db7f      	blt.n	8008d2e <quorem+0x10e>
 8008c2e:	3c01      	subs	r4, #1
 8008c30:	f100 0514 	add.w	r5, r0, #20
 8008c34:	f101 0814 	add.w	r8, r1, #20
 8008c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c46:	3301      	adds	r3, #1
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c4e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c56:	d331      	bcc.n	8008cbc <quorem+0x9c>
 8008c58:	f04f 0e00 	mov.w	lr, #0
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	46ac      	mov	ip, r5
 8008c60:	46f2      	mov	sl, lr
 8008c62:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c66:	b293      	uxth	r3, r2
 8008c68:	fb06 e303 	mla	r3, r6, r3, lr
 8008c6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c70:	0c1a      	lsrs	r2, r3, #16
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	fb06 220e 	mla	r2, r6, lr, r2
 8008c78:	ebaa 0303 	sub.w	r3, sl, r3
 8008c7c:	f8dc a000 	ldr.w	sl, [ip]
 8008c80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c84:	fa1f fa8a 	uxth.w	sl, sl
 8008c88:	4453      	add	r3, sl
 8008c8a:	f8dc a000 	ldr.w	sl, [ip]
 8008c8e:	b292      	uxth	r2, r2
 8008c90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c9e:	4581      	cmp	r9, r0
 8008ca0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ca4:	f84c 3b04 	str.w	r3, [ip], #4
 8008ca8:	d2db      	bcs.n	8008c62 <quorem+0x42>
 8008caa:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cae:	b92b      	cbnz	r3, 8008cbc <quorem+0x9c>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	429d      	cmp	r5, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	d32d      	bcc.n	8008d16 <quorem+0xf6>
 8008cba:	613c      	str	r4, [r7, #16]
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f001 fc97 	bl	800a5f0 <__mcmp>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	db23      	blt.n	8008d0e <quorem+0xee>
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	2000      	movs	r0, #0
 8008cca:	3601      	adds	r6, #1
 8008ccc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cd0:	f8d1 c000 	ldr.w	ip, [r1]
 8008cd4:	b293      	uxth	r3, r2
 8008cd6:	1ac3      	subs	r3, r0, r3
 8008cd8:	0c12      	lsrs	r2, r2, #16
 8008cda:	fa1f f08c 	uxth.w	r0, ip
 8008cde:	4403      	add	r3, r0
 8008ce0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cee:	45c1      	cmp	r9, r8
 8008cf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cf4:	f841 3b04 	str.w	r3, [r1], #4
 8008cf8:	d2e8      	bcs.n	8008ccc <quorem+0xac>
 8008cfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d02:	b922      	cbnz	r2, 8008d0e <quorem+0xee>
 8008d04:	3b04      	subs	r3, #4
 8008d06:	429d      	cmp	r5, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	d30a      	bcc.n	8008d22 <quorem+0x102>
 8008d0c:	613c      	str	r4, [r7, #16]
 8008d0e:	4630      	mov	r0, r6
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	6812      	ldr	r2, [r2, #0]
 8008d18:	3b04      	subs	r3, #4
 8008d1a:	2a00      	cmp	r2, #0
 8008d1c:	d1cd      	bne.n	8008cba <quorem+0x9a>
 8008d1e:	3c01      	subs	r4, #1
 8008d20:	e7c8      	b.n	8008cb4 <quorem+0x94>
 8008d22:	6812      	ldr	r2, [r2, #0]
 8008d24:	3b04      	subs	r3, #4
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	d1f0      	bne.n	8008d0c <quorem+0xec>
 8008d2a:	3c01      	subs	r4, #1
 8008d2c:	e7eb      	b.n	8008d06 <quorem+0xe6>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	e7ee      	b.n	8008d10 <quorem+0xf0>
 8008d32:	0000      	movs	r0, r0
 8008d34:	0000      	movs	r0, r0
	...

08008d38 <_dtoa_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	461f      	mov	r7, r3
 8008d40:	69c4      	ldr	r4, [r0, #28]
 8008d42:	b099      	sub	sp, #100	; 0x64
 8008d44:	4605      	mov	r5, r0
 8008d46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008d4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008d4e:	b974      	cbnz	r4, 8008d6e <_dtoa_r+0x36>
 8008d50:	2010      	movs	r0, #16
 8008d52:	f7fd ff1f 	bl	8006b94 <malloc>
 8008d56:	4602      	mov	r2, r0
 8008d58:	61e8      	str	r0, [r5, #28]
 8008d5a:	b920      	cbnz	r0, 8008d66 <_dtoa_r+0x2e>
 8008d5c:	21ef      	movs	r1, #239	; 0xef
 8008d5e:	4bac      	ldr	r3, [pc, #688]	; (8009010 <_dtoa_r+0x2d8>)
 8008d60:	48ac      	ldr	r0, [pc, #688]	; (8009014 <_dtoa_r+0x2dc>)
 8008d62:	f7ff ff3f 	bl	8008be4 <__assert_func>
 8008d66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d6a:	6004      	str	r4, [r0, #0]
 8008d6c:	60c4      	str	r4, [r0, #12]
 8008d6e:	69eb      	ldr	r3, [r5, #28]
 8008d70:	6819      	ldr	r1, [r3, #0]
 8008d72:	b151      	cbz	r1, 8008d8a <_dtoa_r+0x52>
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	2301      	movs	r3, #1
 8008d78:	4093      	lsls	r3, r2
 8008d7a:	604a      	str	r2, [r1, #4]
 8008d7c:	608b      	str	r3, [r1, #8]
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f001 f9b2 	bl	800a0e8 <_Bfree>
 8008d84:	2200      	movs	r2, #0
 8008d86:	69eb      	ldr	r3, [r5, #28]
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	1e3b      	subs	r3, r7, #0
 8008d8c:	bfaf      	iteee	ge
 8008d8e:	2300      	movge	r3, #0
 8008d90:	2201      	movlt	r2, #1
 8008d92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d96:	9305      	strlt	r3, [sp, #20]
 8008d98:	bfa8      	it	ge
 8008d9a:	f8c8 3000 	strge.w	r3, [r8]
 8008d9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008da2:	4b9d      	ldr	r3, [pc, #628]	; (8009018 <_dtoa_r+0x2e0>)
 8008da4:	bfb8      	it	lt
 8008da6:	f8c8 2000 	strlt.w	r2, [r8]
 8008daa:	ea33 0309 	bics.w	r3, r3, r9
 8008dae:	d119      	bne.n	8008de4 <_dtoa_r+0xac>
 8008db0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008db4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dbc:	4333      	orrs	r3, r6
 8008dbe:	f000 8589 	beq.w	80098d4 <_dtoa_r+0xb9c>
 8008dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dc4:	b953      	cbnz	r3, 8008ddc <_dtoa_r+0xa4>
 8008dc6:	4b95      	ldr	r3, [pc, #596]	; (800901c <_dtoa_r+0x2e4>)
 8008dc8:	e023      	b.n	8008e12 <_dtoa_r+0xda>
 8008dca:	4b95      	ldr	r3, [pc, #596]	; (8009020 <_dtoa_r+0x2e8>)
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	9803      	ldr	r0, [sp, #12]
 8008dd6:	b019      	add	sp, #100	; 0x64
 8008dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ddc:	4b8f      	ldr	r3, [pc, #572]	; (800901c <_dtoa_r+0x2e4>)
 8008dde:	9303      	str	r3, [sp, #12]
 8008de0:	3303      	adds	r3, #3
 8008de2:	e7f5      	b.n	8008dd0 <_dtoa_r+0x98>
 8008de4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008de8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008dec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008df0:	2200      	movs	r2, #0
 8008df2:	2300      	movs	r3, #0
 8008df4:	f7f7 fde2 	bl	80009bc <__aeabi_dcmpeq>
 8008df8:	4680      	mov	r8, r0
 8008dfa:	b160      	cbz	r0, 8008e16 <_dtoa_r+0xde>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8562 	beq.w	80098ce <_dtoa_r+0xb96>
 8008e0a:	4b86      	ldr	r3, [pc, #536]	; (8009024 <_dtoa_r+0x2ec>)
 8008e0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	9303      	str	r3, [sp, #12]
 8008e14:	e7de      	b.n	8008dd4 <_dtoa_r+0x9c>
 8008e16:	ab16      	add	r3, sp, #88	; 0x58
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	ab17      	add	r3, sp, #92	; 0x5c
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	4628      	mov	r0, r5
 8008e20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e24:	f001 fcf4 	bl	800a810 <__d2b>
 8008e28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	d07e      	beq.n	8008f30 <_dtoa_r+0x1f8>
 8008e32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e40:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e48:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4b75      	ldr	r3, [pc, #468]	; (8009028 <_dtoa_r+0x2f0>)
 8008e52:	f7f7 f993 	bl	800017c <__aeabi_dsub>
 8008e56:	a368      	add	r3, pc, #416	; (adr r3, 8008ff8 <_dtoa_r+0x2c0>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 fb46 	bl	80004ec <__aeabi_dmul>
 8008e60:	a367      	add	r3, pc, #412	; (adr r3, 8009000 <_dtoa_r+0x2c8>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f7f7 f98b 	bl	8000180 <__adddf3>
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	460f      	mov	r7, r1
 8008e70:	f7f7 fad2 	bl	8000418 <__aeabi_i2d>
 8008e74:	a364      	add	r3, pc, #400	; (adr r3, 8009008 <_dtoa_r+0x2d0>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fb37 	bl	80004ec <__aeabi_dmul>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 f97b 	bl	8000180 <__adddf3>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	f7f7 fddd 	bl	8000a4c <__aeabi_d2iz>
 8008e92:	2200      	movs	r2, #0
 8008e94:	4683      	mov	fp, r0
 8008e96:	2300      	movs	r3, #0
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 fd98 	bl	80009d0 <__aeabi_dcmplt>
 8008ea0:	b148      	cbz	r0, 8008eb6 <_dtoa_r+0x17e>
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f7f7 fab8 	bl	8000418 <__aeabi_i2d>
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	f7f7 fd86 	bl	80009bc <__aeabi_dcmpeq>
 8008eb0:	b908      	cbnz	r0, 8008eb6 <_dtoa_r+0x17e>
 8008eb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008eb6:	f1bb 0f16 	cmp.w	fp, #22
 8008eba:	d857      	bhi.n	8008f6c <_dtoa_r+0x234>
 8008ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ec0:	4b5a      	ldr	r3, [pc, #360]	; (800902c <_dtoa_r+0x2f4>)
 8008ec2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fd81 	bl	80009d0 <__aeabi_dcmplt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d04e      	beq.n	8008f70 <_dtoa_r+0x238>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ed8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008edc:	1b1b      	subs	r3, r3, r4
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	bf46      	itte	mi
 8008ee2:	f1c3 0901 	rsbmi	r9, r3, #1
 8008ee6:	2300      	movmi	r3, #0
 8008ee8:	f04f 0900 	movpl.w	r9, #0
 8008eec:	9209      	str	r2, [sp, #36]	; 0x24
 8008eee:	bf48      	it	mi
 8008ef0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008ef2:	f1bb 0f00 	cmp.w	fp, #0
 8008ef6:	db3d      	blt.n	8008f74 <_dtoa_r+0x23c>
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008efe:	445b      	add	r3, fp
 8008f00:	9309      	str	r3, [sp, #36]	; 0x24
 8008f02:	2300      	movs	r3, #0
 8008f04:	930a      	str	r3, [sp, #40]	; 0x28
 8008f06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f08:	2b09      	cmp	r3, #9
 8008f0a:	d867      	bhi.n	8008fdc <_dtoa_r+0x2a4>
 8008f0c:	2b05      	cmp	r3, #5
 8008f0e:	bfc4      	itt	gt
 8008f10:	3b04      	subgt	r3, #4
 8008f12:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f16:	bfc8      	it	gt
 8008f18:	2400      	movgt	r4, #0
 8008f1a:	f1a3 0302 	sub.w	r3, r3, #2
 8008f1e:	bfd8      	it	le
 8008f20:	2401      	movle	r4, #1
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	f200 8086 	bhi.w	8009034 <_dtoa_r+0x2fc>
 8008f28:	e8df f003 	tbb	[pc, r3]
 8008f2c:	5637392c 	.word	0x5637392c
 8008f30:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008f34:	441c      	add	r4, r3
 8008f36:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	bfc1      	itttt	gt
 8008f3e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f42:	fa09 f903 	lslgt.w	r9, r9, r3
 8008f46:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008f4a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008f4e:	bfd6      	itet	le
 8008f50:	f1c3 0320 	rsble	r3, r3, #32
 8008f54:	ea49 0003 	orrgt.w	r0, r9, r3
 8008f58:	fa06 f003 	lslle.w	r0, r6, r3
 8008f5c:	f7f7 fa4c 	bl	80003f8 <__aeabi_ui2d>
 8008f60:	2201      	movs	r2, #1
 8008f62:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f66:	3c01      	subs	r4, #1
 8008f68:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f6a:	e76f      	b.n	8008e4c <_dtoa_r+0x114>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e7b3      	b.n	8008ed8 <_dtoa_r+0x1a0>
 8008f70:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f72:	e7b2      	b.n	8008eda <_dtoa_r+0x1a2>
 8008f74:	f1cb 0300 	rsb	r3, fp, #0
 8008f78:	930a      	str	r3, [sp, #40]	; 0x28
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	eba9 090b 	sub.w	r9, r9, fp
 8008f80:	930e      	str	r3, [sp, #56]	; 0x38
 8008f82:	e7c0      	b.n	8008f06 <_dtoa_r+0x1ce>
 8008f84:	2300      	movs	r3, #0
 8008f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dc55      	bgt.n	800903a <_dtoa_r+0x302>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	461a      	mov	r2, r3
 8008f92:	9306      	str	r3, [sp, #24]
 8008f94:	9308      	str	r3, [sp, #32]
 8008f96:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f98:	e00b      	b.n	8008fb2 <_dtoa_r+0x27a>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e7f3      	b.n	8008f86 <_dtoa_r+0x24e>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fa4:	445b      	add	r3, fp
 8008fa6:	9306      	str	r3, [sp, #24]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	9308      	str	r3, [sp, #32]
 8008fae:	bfb8      	it	lt
 8008fb0:	2301      	movlt	r3, #1
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2204      	movs	r2, #4
 8008fb6:	69e8      	ldr	r0, [r5, #28]
 8008fb8:	f102 0614 	add.w	r6, r2, #20
 8008fbc:	429e      	cmp	r6, r3
 8008fbe:	d940      	bls.n	8009042 <_dtoa_r+0x30a>
 8008fc0:	6041      	str	r1, [r0, #4]
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f001 f850 	bl	800a068 <_Balloc>
 8008fc8:	9003      	str	r0, [sp, #12]
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d13c      	bne.n	8009048 <_dtoa_r+0x310>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	f240 11af 	movw	r1, #431	; 0x1af
 8008fd4:	4b16      	ldr	r3, [pc, #88]	; (8009030 <_dtoa_r+0x2f8>)
 8008fd6:	e6c3      	b.n	8008d60 <_dtoa_r+0x28>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e7e1      	b.n	8008fa0 <_dtoa_r+0x268>
 8008fdc:	2401      	movs	r4, #1
 8008fde:	2300      	movs	r3, #0
 8008fe0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008fe2:	9322      	str	r3, [sp, #136]	; 0x88
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	2200      	movs	r2, #0
 8008fea:	9306      	str	r3, [sp, #24]
 8008fec:	9308      	str	r3, [sp, #32]
 8008fee:	2312      	movs	r3, #18
 8008ff0:	e7d1      	b.n	8008f96 <_dtoa_r+0x25e>
 8008ff2:	bf00      	nop
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	636f4361 	.word	0x636f4361
 8008ffc:	3fd287a7 	.word	0x3fd287a7
 8009000:	8b60c8b3 	.word	0x8b60c8b3
 8009004:	3fc68a28 	.word	0x3fc68a28
 8009008:	509f79fb 	.word	0x509f79fb
 800900c:	3fd34413 	.word	0x3fd34413
 8009010:	0800b2bd 	.word	0x0800b2bd
 8009014:	0800b37f 	.word	0x0800b37f
 8009018:	7ff00000 	.word	0x7ff00000
 800901c:	0800b37b 	.word	0x0800b37b
 8009020:	0800b372 	.word	0x0800b372
 8009024:	0800b29a 	.word	0x0800b29a
 8009028:	3ff80000 	.word	0x3ff80000
 800902c:	0800b4d0 	.word	0x0800b4d0
 8009030:	0800b3d7 	.word	0x0800b3d7
 8009034:	2301      	movs	r3, #1
 8009036:	930b      	str	r3, [sp, #44]	; 0x2c
 8009038:	e7d4      	b.n	8008fe4 <_dtoa_r+0x2ac>
 800903a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800903c:	9306      	str	r3, [sp, #24]
 800903e:	9308      	str	r3, [sp, #32]
 8009040:	e7b7      	b.n	8008fb2 <_dtoa_r+0x27a>
 8009042:	3101      	adds	r1, #1
 8009044:	0052      	lsls	r2, r2, #1
 8009046:	e7b7      	b.n	8008fb8 <_dtoa_r+0x280>
 8009048:	69eb      	ldr	r3, [r5, #28]
 800904a:	9a03      	ldr	r2, [sp, #12]
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	9b08      	ldr	r3, [sp, #32]
 8009050:	2b0e      	cmp	r3, #14
 8009052:	f200 80a8 	bhi.w	80091a6 <_dtoa_r+0x46e>
 8009056:	2c00      	cmp	r4, #0
 8009058:	f000 80a5 	beq.w	80091a6 <_dtoa_r+0x46e>
 800905c:	f1bb 0f00 	cmp.w	fp, #0
 8009060:	dd34      	ble.n	80090cc <_dtoa_r+0x394>
 8009062:	4b9a      	ldr	r3, [pc, #616]	; (80092cc <_dtoa_r+0x594>)
 8009064:	f00b 020f 	and.w	r2, fp, #15
 8009068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009070:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009074:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009078:	ea4f 142b 	mov.w	r4, fp, asr #4
 800907c:	d016      	beq.n	80090ac <_dtoa_r+0x374>
 800907e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009082:	4b93      	ldr	r3, [pc, #588]	; (80092d0 <_dtoa_r+0x598>)
 8009084:	2703      	movs	r7, #3
 8009086:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800908a:	f7f7 fb59 	bl	8000740 <__aeabi_ddiv>
 800908e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009092:	f004 040f 	and.w	r4, r4, #15
 8009096:	4e8e      	ldr	r6, [pc, #568]	; (80092d0 <_dtoa_r+0x598>)
 8009098:	b954      	cbnz	r4, 80090b0 <_dtoa_r+0x378>
 800909a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800909e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a2:	f7f7 fb4d 	bl	8000740 <__aeabi_ddiv>
 80090a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090aa:	e029      	b.n	8009100 <_dtoa_r+0x3c8>
 80090ac:	2702      	movs	r7, #2
 80090ae:	e7f2      	b.n	8009096 <_dtoa_r+0x35e>
 80090b0:	07e1      	lsls	r1, r4, #31
 80090b2:	d508      	bpl.n	80090c6 <_dtoa_r+0x38e>
 80090b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090bc:	f7f7 fa16 	bl	80004ec <__aeabi_dmul>
 80090c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090c4:	3701      	adds	r7, #1
 80090c6:	1064      	asrs	r4, r4, #1
 80090c8:	3608      	adds	r6, #8
 80090ca:	e7e5      	b.n	8009098 <_dtoa_r+0x360>
 80090cc:	f000 80a5 	beq.w	800921a <_dtoa_r+0x4e2>
 80090d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090d4:	f1cb 0400 	rsb	r4, fp, #0
 80090d8:	4b7c      	ldr	r3, [pc, #496]	; (80092cc <_dtoa_r+0x594>)
 80090da:	f004 020f 	and.w	r2, r4, #15
 80090de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 fa01 	bl	80004ec <__aeabi_dmul>
 80090ea:	2702      	movs	r7, #2
 80090ec:	2300      	movs	r3, #0
 80090ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090f2:	4e77      	ldr	r6, [pc, #476]	; (80092d0 <_dtoa_r+0x598>)
 80090f4:	1124      	asrs	r4, r4, #4
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	f040 8084 	bne.w	8009204 <_dtoa_r+0x4cc>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1d2      	bne.n	80090a6 <_dtoa_r+0x36e>
 8009100:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009104:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 8087 	beq.w	800921e <_dtoa_r+0x4e6>
 8009110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009114:	2200      	movs	r2, #0
 8009116:	4b6f      	ldr	r3, [pc, #444]	; (80092d4 <_dtoa_r+0x59c>)
 8009118:	f7f7 fc5a 	bl	80009d0 <__aeabi_dcmplt>
 800911c:	2800      	cmp	r0, #0
 800911e:	d07e      	beq.n	800921e <_dtoa_r+0x4e6>
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d07b      	beq.n	800921e <_dtoa_r+0x4e6>
 8009126:	9b06      	ldr	r3, [sp, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	dd38      	ble.n	800919e <_dtoa_r+0x466>
 800912c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009130:	2200      	movs	r2, #0
 8009132:	4b69      	ldr	r3, [pc, #420]	; (80092d8 <_dtoa_r+0x5a0>)
 8009134:	f7f7 f9da 	bl	80004ec <__aeabi_dmul>
 8009138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800913c:	9c06      	ldr	r4, [sp, #24]
 800913e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009142:	3701      	adds	r7, #1
 8009144:	4638      	mov	r0, r7
 8009146:	f7f7 f967 	bl	8000418 <__aeabi_i2d>
 800914a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800914e:	f7f7 f9cd 	bl	80004ec <__aeabi_dmul>
 8009152:	2200      	movs	r2, #0
 8009154:	4b61      	ldr	r3, [pc, #388]	; (80092dc <_dtoa_r+0x5a4>)
 8009156:	f7f7 f813 	bl	8000180 <__adddf3>
 800915a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800915e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009162:	9611      	str	r6, [sp, #68]	; 0x44
 8009164:	2c00      	cmp	r4, #0
 8009166:	d15d      	bne.n	8009224 <_dtoa_r+0x4ec>
 8009168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800916c:	2200      	movs	r2, #0
 800916e:	4b5c      	ldr	r3, [pc, #368]	; (80092e0 <_dtoa_r+0x5a8>)
 8009170:	f7f7 f804 	bl	800017c <__aeabi_dsub>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800917c:	4633      	mov	r3, r6
 800917e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009180:	f7f7 fc44 	bl	8000a0c <__aeabi_dcmpgt>
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 8295 	bne.w	80096b4 <_dtoa_r+0x97c>
 800918a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800918e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009190:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009194:	f7f7 fc1c 	bl	80009d0 <__aeabi_dcmplt>
 8009198:	2800      	cmp	r0, #0
 800919a:	f040 8289 	bne.w	80096b0 <_dtoa_r+0x978>
 800919e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80091a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f2c0 8151 	blt.w	8009450 <_dtoa_r+0x718>
 80091ae:	f1bb 0f0e 	cmp.w	fp, #14
 80091b2:	f300 814d 	bgt.w	8009450 <_dtoa_r+0x718>
 80091b6:	4b45      	ldr	r3, [pc, #276]	; (80092cc <_dtoa_r+0x594>)
 80091b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80091c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f280 80da 	bge.w	8009380 <_dtoa_r+0x648>
 80091cc:	9b08      	ldr	r3, [sp, #32]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f300 80d6 	bgt.w	8009380 <_dtoa_r+0x648>
 80091d4:	f040 826b 	bne.w	80096ae <_dtoa_r+0x976>
 80091d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091dc:	2200      	movs	r2, #0
 80091de:	4b40      	ldr	r3, [pc, #256]	; (80092e0 <_dtoa_r+0x5a8>)
 80091e0:	f7f7 f984 	bl	80004ec <__aeabi_dmul>
 80091e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091e8:	f7f7 fc06 	bl	80009f8 <__aeabi_dcmpge>
 80091ec:	9c08      	ldr	r4, [sp, #32]
 80091ee:	4626      	mov	r6, r4
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f040 8241 	bne.w	8009678 <_dtoa_r+0x940>
 80091f6:	2331      	movs	r3, #49	; 0x31
 80091f8:	9f03      	ldr	r7, [sp, #12]
 80091fa:	f10b 0b01 	add.w	fp, fp, #1
 80091fe:	f807 3b01 	strb.w	r3, [r7], #1
 8009202:	e23d      	b.n	8009680 <_dtoa_r+0x948>
 8009204:	07e2      	lsls	r2, r4, #31
 8009206:	d505      	bpl.n	8009214 <_dtoa_r+0x4dc>
 8009208:	e9d6 2300 	ldrd	r2, r3, [r6]
 800920c:	f7f7 f96e 	bl	80004ec <__aeabi_dmul>
 8009210:	2301      	movs	r3, #1
 8009212:	3701      	adds	r7, #1
 8009214:	1064      	asrs	r4, r4, #1
 8009216:	3608      	adds	r6, #8
 8009218:	e76d      	b.n	80090f6 <_dtoa_r+0x3be>
 800921a:	2702      	movs	r7, #2
 800921c:	e770      	b.n	8009100 <_dtoa_r+0x3c8>
 800921e:	46d8      	mov	r8, fp
 8009220:	9c08      	ldr	r4, [sp, #32]
 8009222:	e78f      	b.n	8009144 <_dtoa_r+0x40c>
 8009224:	9903      	ldr	r1, [sp, #12]
 8009226:	4b29      	ldr	r3, [pc, #164]	; (80092cc <_dtoa_r+0x594>)
 8009228:	4421      	add	r1, r4
 800922a:	9112      	str	r1, [sp, #72]	; 0x48
 800922c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800922e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009232:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009236:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800923a:	2900      	cmp	r1, #0
 800923c:	d054      	beq.n	80092e8 <_dtoa_r+0x5b0>
 800923e:	2000      	movs	r0, #0
 8009240:	4928      	ldr	r1, [pc, #160]	; (80092e4 <_dtoa_r+0x5ac>)
 8009242:	f7f7 fa7d 	bl	8000740 <__aeabi_ddiv>
 8009246:	463b      	mov	r3, r7
 8009248:	4632      	mov	r2, r6
 800924a:	f7f6 ff97 	bl	800017c <__aeabi_dsub>
 800924e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009252:	9f03      	ldr	r7, [sp, #12]
 8009254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009258:	f7f7 fbf8 	bl	8000a4c <__aeabi_d2iz>
 800925c:	4604      	mov	r4, r0
 800925e:	f7f7 f8db 	bl	8000418 <__aeabi_i2d>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800926a:	f7f6 ff87 	bl	800017c <__aeabi_dsub>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	3430      	adds	r4, #48	; 0x30
 8009274:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800927c:	f807 4b01 	strb.w	r4, [r7], #1
 8009280:	f7f7 fba6 	bl	80009d0 <__aeabi_dcmplt>
 8009284:	2800      	cmp	r0, #0
 8009286:	d173      	bne.n	8009370 <_dtoa_r+0x638>
 8009288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928c:	2000      	movs	r0, #0
 800928e:	4911      	ldr	r1, [pc, #68]	; (80092d4 <_dtoa_r+0x59c>)
 8009290:	f7f6 ff74 	bl	800017c <__aeabi_dsub>
 8009294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009298:	f7f7 fb9a 	bl	80009d0 <__aeabi_dcmplt>
 800929c:	2800      	cmp	r0, #0
 800929e:	f040 80b6 	bne.w	800940e <_dtoa_r+0x6d6>
 80092a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092a4:	429f      	cmp	r7, r3
 80092a6:	f43f af7a 	beq.w	800919e <_dtoa_r+0x466>
 80092aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092ae:	2200      	movs	r2, #0
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <_dtoa_r+0x5a0>)
 80092b2:	f7f7 f91b 	bl	80004ec <__aeabi_dmul>
 80092b6:	2200      	movs	r2, #0
 80092b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c0:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <_dtoa_r+0x5a0>)
 80092c2:	f7f7 f913 	bl	80004ec <__aeabi_dmul>
 80092c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ca:	e7c3      	b.n	8009254 <_dtoa_r+0x51c>
 80092cc:	0800b4d0 	.word	0x0800b4d0
 80092d0:	0800b4a8 	.word	0x0800b4a8
 80092d4:	3ff00000 	.word	0x3ff00000
 80092d8:	40240000 	.word	0x40240000
 80092dc:	401c0000 	.word	0x401c0000
 80092e0:	40140000 	.word	0x40140000
 80092e4:	3fe00000 	.word	0x3fe00000
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f7 f8fe 	bl	80004ec <__aeabi_dmul>
 80092f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092f6:	9c03      	ldr	r4, [sp, #12]
 80092f8:	9314      	str	r3, [sp, #80]	; 0x50
 80092fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092fe:	f7f7 fba5 	bl	8000a4c <__aeabi_d2iz>
 8009302:	9015      	str	r0, [sp, #84]	; 0x54
 8009304:	f7f7 f888 	bl	8000418 <__aeabi_i2d>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009310:	f7f6 ff34 	bl	800017c <__aeabi_dsub>
 8009314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009316:	4606      	mov	r6, r0
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	f804 3b01 	strb.w	r3, [r4], #1
 800931e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009320:	460f      	mov	r7, r1
 8009322:	429c      	cmp	r4, r3
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	d124      	bne.n	8009374 <_dtoa_r+0x63c>
 800932a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800932e:	4baf      	ldr	r3, [pc, #700]	; (80095ec <_dtoa_r+0x8b4>)
 8009330:	f7f6 ff26 	bl	8000180 <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	f7f7 fb66 	bl	8000a0c <__aeabi_dcmpgt>
 8009340:	2800      	cmp	r0, #0
 8009342:	d163      	bne.n	800940c <_dtoa_r+0x6d4>
 8009344:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009348:	2000      	movs	r0, #0
 800934a:	49a8      	ldr	r1, [pc, #672]	; (80095ec <_dtoa_r+0x8b4>)
 800934c:	f7f6 ff16 	bl	800017c <__aeabi_dsub>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 fb3a 	bl	80009d0 <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f af1e 	beq.w	800919e <_dtoa_r+0x466>
 8009362:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009364:	1e7b      	subs	r3, r7, #1
 8009366:	9314      	str	r3, [sp, #80]	; 0x50
 8009368:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800936c:	2b30      	cmp	r3, #48	; 0x30
 800936e:	d0f8      	beq.n	8009362 <_dtoa_r+0x62a>
 8009370:	46c3      	mov	fp, r8
 8009372:	e03b      	b.n	80093ec <_dtoa_r+0x6b4>
 8009374:	4b9e      	ldr	r3, [pc, #632]	; (80095f0 <_dtoa_r+0x8b8>)
 8009376:	f7f7 f8b9 	bl	80004ec <__aeabi_dmul>
 800937a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800937e:	e7bc      	b.n	80092fa <_dtoa_r+0x5c2>
 8009380:	9f03      	ldr	r7, [sp, #12]
 8009382:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009386:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f7 f9d7 	bl	8000740 <__aeabi_ddiv>
 8009392:	f7f7 fb5b 	bl	8000a4c <__aeabi_d2iz>
 8009396:	4604      	mov	r4, r0
 8009398:	f7f7 f83e 	bl	8000418 <__aeabi_i2d>
 800939c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093a0:	f7f7 f8a4 	bl	80004ec <__aeabi_dmul>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f6 fee6 	bl	800017c <__aeabi_dsub>
 80093b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80093b4:	f807 6b01 	strb.w	r6, [r7], #1
 80093b8:	9e03      	ldr	r6, [sp, #12]
 80093ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80093be:	1bbe      	subs	r6, r7, r6
 80093c0:	45b4      	cmp	ip, r6
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	d136      	bne.n	8009436 <_dtoa_r+0x6fe>
 80093c8:	f7f6 feda 	bl	8000180 <__adddf3>
 80093cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d0:	4680      	mov	r8, r0
 80093d2:	4689      	mov	r9, r1
 80093d4:	f7f7 fb1a 	bl	8000a0c <__aeabi_dcmpgt>
 80093d8:	bb58      	cbnz	r0, 8009432 <_dtoa_r+0x6fa>
 80093da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093de:	4640      	mov	r0, r8
 80093e0:	4649      	mov	r1, r9
 80093e2:	f7f7 faeb 	bl	80009bc <__aeabi_dcmpeq>
 80093e6:	b108      	cbz	r0, 80093ec <_dtoa_r+0x6b4>
 80093e8:	07e3      	lsls	r3, r4, #31
 80093ea:	d422      	bmi.n	8009432 <_dtoa_r+0x6fa>
 80093ec:	4651      	mov	r1, sl
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 fe7a 	bl	800a0e8 <_Bfree>
 80093f4:	2300      	movs	r3, #0
 80093f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093f8:	703b      	strb	r3, [r7, #0]
 80093fa:	f10b 0301 	add.w	r3, fp, #1
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009402:	2b00      	cmp	r3, #0
 8009404:	f43f ace6 	beq.w	8008dd4 <_dtoa_r+0x9c>
 8009408:	601f      	str	r7, [r3, #0]
 800940a:	e4e3      	b.n	8008dd4 <_dtoa_r+0x9c>
 800940c:	4627      	mov	r7, r4
 800940e:	463b      	mov	r3, r7
 8009410:	461f      	mov	r7, r3
 8009412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009416:	2a39      	cmp	r2, #57	; 0x39
 8009418:	d107      	bne.n	800942a <_dtoa_r+0x6f2>
 800941a:	9a03      	ldr	r2, [sp, #12]
 800941c:	429a      	cmp	r2, r3
 800941e:	d1f7      	bne.n	8009410 <_dtoa_r+0x6d8>
 8009420:	2230      	movs	r2, #48	; 0x30
 8009422:	9903      	ldr	r1, [sp, #12]
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	700a      	strb	r2, [r1, #0]
 800942a:	781a      	ldrb	r2, [r3, #0]
 800942c:	3201      	adds	r2, #1
 800942e:	701a      	strb	r2, [r3, #0]
 8009430:	e79e      	b.n	8009370 <_dtoa_r+0x638>
 8009432:	46d8      	mov	r8, fp
 8009434:	e7eb      	b.n	800940e <_dtoa_r+0x6d6>
 8009436:	2200      	movs	r2, #0
 8009438:	4b6d      	ldr	r3, [pc, #436]	; (80095f0 <_dtoa_r+0x8b8>)
 800943a:	f7f7 f857 	bl	80004ec <__aeabi_dmul>
 800943e:	2200      	movs	r2, #0
 8009440:	2300      	movs	r3, #0
 8009442:	4680      	mov	r8, r0
 8009444:	4689      	mov	r9, r1
 8009446:	f7f7 fab9 	bl	80009bc <__aeabi_dcmpeq>
 800944a:	2800      	cmp	r0, #0
 800944c:	d09b      	beq.n	8009386 <_dtoa_r+0x64e>
 800944e:	e7cd      	b.n	80093ec <_dtoa_r+0x6b4>
 8009450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009452:	2a00      	cmp	r2, #0
 8009454:	f000 80c4 	beq.w	80095e0 <_dtoa_r+0x8a8>
 8009458:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800945a:	2a01      	cmp	r2, #1
 800945c:	f300 80a8 	bgt.w	80095b0 <_dtoa_r+0x878>
 8009460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009462:	2a00      	cmp	r2, #0
 8009464:	f000 80a0 	beq.w	80095a8 <_dtoa_r+0x870>
 8009468:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800946c:	464f      	mov	r7, r9
 800946e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009472:	2101      	movs	r1, #1
 8009474:	441a      	add	r2, r3
 8009476:	4628      	mov	r0, r5
 8009478:	4499      	add	r9, r3
 800947a:	9209      	str	r2, [sp, #36]	; 0x24
 800947c:	f000 ff34 	bl	800a2e8 <__i2b>
 8009480:	4606      	mov	r6, r0
 8009482:	b15f      	cbz	r7, 800949c <_dtoa_r+0x764>
 8009484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	dd08      	ble.n	800949c <_dtoa_r+0x764>
 800948a:	42bb      	cmp	r3, r7
 800948c:	bfa8      	it	ge
 800948e:	463b      	movge	r3, r7
 8009490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009492:	eba9 0903 	sub.w	r9, r9, r3
 8009496:	1aff      	subs	r7, r7, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	9309      	str	r3, [sp, #36]	; 0x24
 800949c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949e:	b1f3      	cbz	r3, 80094de <_dtoa_r+0x7a6>
 80094a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 80a0 	beq.w	80095e8 <_dtoa_r+0x8b0>
 80094a8:	2c00      	cmp	r4, #0
 80094aa:	dd10      	ble.n	80094ce <_dtoa_r+0x796>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4622      	mov	r2, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	f000 ffd7 	bl	800a464 <__pow5mult>
 80094b6:	4652      	mov	r2, sl
 80094b8:	4601      	mov	r1, r0
 80094ba:	4606      	mov	r6, r0
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 ff29 	bl	800a314 <__multiply>
 80094c2:	4680      	mov	r8, r0
 80094c4:	4651      	mov	r1, sl
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 fe0e 	bl	800a0e8 <_Bfree>
 80094cc:	46c2      	mov	sl, r8
 80094ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d0:	1b1a      	subs	r2, r3, r4
 80094d2:	d004      	beq.n	80094de <_dtoa_r+0x7a6>
 80094d4:	4651      	mov	r1, sl
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 ffc4 	bl	800a464 <__pow5mult>
 80094dc:	4682      	mov	sl, r0
 80094de:	2101      	movs	r1, #1
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 ff01 	bl	800a2e8 <__i2b>
 80094e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e8:	4604      	mov	r4, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f340 8082 	ble.w	80095f4 <_dtoa_r+0x8bc>
 80094f0:	461a      	mov	r2, r3
 80094f2:	4601      	mov	r1, r0
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 ffb5 	bl	800a464 <__pow5mult>
 80094fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094fc:	4604      	mov	r4, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	dd7b      	ble.n	80095fa <_dtoa_r+0x8c2>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	6923      	ldr	r3, [r4, #16]
 8009508:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800950c:	6918      	ldr	r0, [r3, #16]
 800950e:	f000 fe9d 	bl	800a24c <__hi0bits>
 8009512:	f1c0 0020 	rsb	r0, r0, #32
 8009516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009518:	4418      	add	r0, r3
 800951a:	f010 001f 	ands.w	r0, r0, #31
 800951e:	f000 8092 	beq.w	8009646 <_dtoa_r+0x90e>
 8009522:	f1c0 0320 	rsb	r3, r0, #32
 8009526:	2b04      	cmp	r3, #4
 8009528:	f340 8085 	ble.w	8009636 <_dtoa_r+0x8fe>
 800952c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952e:	f1c0 001c 	rsb	r0, r0, #28
 8009532:	4403      	add	r3, r0
 8009534:	4481      	add	r9, r0
 8009536:	4407      	add	r7, r0
 8009538:	9309      	str	r3, [sp, #36]	; 0x24
 800953a:	f1b9 0f00 	cmp.w	r9, #0
 800953e:	dd05      	ble.n	800954c <_dtoa_r+0x814>
 8009540:	4651      	mov	r1, sl
 8009542:	464a      	mov	r2, r9
 8009544:	4628      	mov	r0, r5
 8009546:	f000 ffe7 	bl	800a518 <__lshift>
 800954a:	4682      	mov	sl, r0
 800954c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954e:	2b00      	cmp	r3, #0
 8009550:	dd05      	ble.n	800955e <_dtoa_r+0x826>
 8009552:	4621      	mov	r1, r4
 8009554:	461a      	mov	r2, r3
 8009556:	4628      	mov	r0, r5
 8009558:	f000 ffde 	bl	800a518 <__lshift>
 800955c:	4604      	mov	r4, r0
 800955e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d072      	beq.n	800964a <_dtoa_r+0x912>
 8009564:	4621      	mov	r1, r4
 8009566:	4650      	mov	r0, sl
 8009568:	f001 f842 	bl	800a5f0 <__mcmp>
 800956c:	2800      	cmp	r0, #0
 800956e:	da6c      	bge.n	800964a <_dtoa_r+0x912>
 8009570:	2300      	movs	r3, #0
 8009572:	4651      	mov	r1, sl
 8009574:	220a      	movs	r2, #10
 8009576:	4628      	mov	r0, r5
 8009578:	f000 fdd8 	bl	800a12c <__multadd>
 800957c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957e:	4682      	mov	sl, r0
 8009580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 81ac 	beq.w	80098e2 <_dtoa_r+0xbaa>
 800958a:	2300      	movs	r3, #0
 800958c:	4631      	mov	r1, r6
 800958e:	220a      	movs	r2, #10
 8009590:	4628      	mov	r0, r5
 8009592:	f000 fdcb 	bl	800a12c <__multadd>
 8009596:	9b06      	ldr	r3, [sp, #24]
 8009598:	4606      	mov	r6, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	f300 8093 	bgt.w	80096c6 <_dtoa_r+0x98e>
 80095a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	dc59      	bgt.n	800965a <_dtoa_r+0x922>
 80095a6:	e08e      	b.n	80096c6 <_dtoa_r+0x98e>
 80095a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095ae:	e75d      	b.n	800946c <_dtoa_r+0x734>
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	1e5c      	subs	r4, r3, #1
 80095b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	bfbf      	itttt	lt
 80095ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80095be:	1ae3      	sublt	r3, r4, r3
 80095c0:	18d2      	addlt	r2, r2, r3
 80095c2:	bfa8      	it	ge
 80095c4:	1b1c      	subge	r4, r3, r4
 80095c6:	9b08      	ldr	r3, [sp, #32]
 80095c8:	bfbe      	ittt	lt
 80095ca:	940a      	strlt	r4, [sp, #40]	; 0x28
 80095cc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80095ce:	2400      	movlt	r4, #0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bfb5      	itete	lt
 80095d4:	eba9 0703 	sublt.w	r7, r9, r3
 80095d8:	464f      	movge	r7, r9
 80095da:	2300      	movlt	r3, #0
 80095dc:	9b08      	ldrge	r3, [sp, #32]
 80095de:	e747      	b.n	8009470 <_dtoa_r+0x738>
 80095e0:	464f      	mov	r7, r9
 80095e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095e6:	e74c      	b.n	8009482 <_dtoa_r+0x74a>
 80095e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ea:	e773      	b.n	80094d4 <_dtoa_r+0x79c>
 80095ec:	3fe00000 	.word	0x3fe00000
 80095f0:	40240000 	.word	0x40240000
 80095f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	dc18      	bgt.n	800962c <_dtoa_r+0x8f4>
 80095fa:	9b04      	ldr	r3, [sp, #16]
 80095fc:	b9b3      	cbnz	r3, 800962c <_dtoa_r+0x8f4>
 80095fe:	9b05      	ldr	r3, [sp, #20]
 8009600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009604:	b993      	cbnz	r3, 800962c <_dtoa_r+0x8f4>
 8009606:	9b05      	ldr	r3, [sp, #20]
 8009608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800960c:	0d1b      	lsrs	r3, r3, #20
 800960e:	051b      	lsls	r3, r3, #20
 8009610:	b17b      	cbz	r3, 8009632 <_dtoa_r+0x8fa>
 8009612:	f04f 0801 	mov.w	r8, #1
 8009616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009618:	f109 0901 	add.w	r9, r9, #1
 800961c:	3301      	adds	r3, #1
 800961e:	9309      	str	r3, [sp, #36]	; 0x24
 8009620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009622:	2b00      	cmp	r3, #0
 8009624:	f47f af6f 	bne.w	8009506 <_dtoa_r+0x7ce>
 8009628:	2001      	movs	r0, #1
 800962a:	e774      	b.n	8009516 <_dtoa_r+0x7de>
 800962c:	f04f 0800 	mov.w	r8, #0
 8009630:	e7f6      	b.n	8009620 <_dtoa_r+0x8e8>
 8009632:	4698      	mov	r8, r3
 8009634:	e7f4      	b.n	8009620 <_dtoa_r+0x8e8>
 8009636:	d080      	beq.n	800953a <_dtoa_r+0x802>
 8009638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800963a:	331c      	adds	r3, #28
 800963c:	441a      	add	r2, r3
 800963e:	4499      	add	r9, r3
 8009640:	441f      	add	r7, r3
 8009642:	9209      	str	r2, [sp, #36]	; 0x24
 8009644:	e779      	b.n	800953a <_dtoa_r+0x802>
 8009646:	4603      	mov	r3, r0
 8009648:	e7f6      	b.n	8009638 <_dtoa_r+0x900>
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	2b00      	cmp	r3, #0
 800964e:	dc34      	bgt.n	80096ba <_dtoa_r+0x982>
 8009650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009652:	2b02      	cmp	r3, #2
 8009654:	dd31      	ble.n	80096ba <_dtoa_r+0x982>
 8009656:	9b08      	ldr	r3, [sp, #32]
 8009658:	9306      	str	r3, [sp, #24]
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	b963      	cbnz	r3, 8009678 <_dtoa_r+0x940>
 800965e:	4621      	mov	r1, r4
 8009660:	2205      	movs	r2, #5
 8009662:	4628      	mov	r0, r5
 8009664:	f000 fd62 	bl	800a12c <__multadd>
 8009668:	4601      	mov	r1, r0
 800966a:	4604      	mov	r4, r0
 800966c:	4650      	mov	r0, sl
 800966e:	f000 ffbf 	bl	800a5f0 <__mcmp>
 8009672:	2800      	cmp	r0, #0
 8009674:	f73f adbf 	bgt.w	80091f6 <_dtoa_r+0x4be>
 8009678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800967a:	9f03      	ldr	r7, [sp, #12]
 800967c:	ea6f 0b03 	mvn.w	fp, r3
 8009680:	f04f 0800 	mov.w	r8, #0
 8009684:	4621      	mov	r1, r4
 8009686:	4628      	mov	r0, r5
 8009688:	f000 fd2e 	bl	800a0e8 <_Bfree>
 800968c:	2e00      	cmp	r6, #0
 800968e:	f43f aead 	beq.w	80093ec <_dtoa_r+0x6b4>
 8009692:	f1b8 0f00 	cmp.w	r8, #0
 8009696:	d005      	beq.n	80096a4 <_dtoa_r+0x96c>
 8009698:	45b0      	cmp	r8, r6
 800969a:	d003      	beq.n	80096a4 <_dtoa_r+0x96c>
 800969c:	4641      	mov	r1, r8
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 fd22 	bl	800a0e8 <_Bfree>
 80096a4:	4631      	mov	r1, r6
 80096a6:	4628      	mov	r0, r5
 80096a8:	f000 fd1e 	bl	800a0e8 <_Bfree>
 80096ac:	e69e      	b.n	80093ec <_dtoa_r+0x6b4>
 80096ae:	2400      	movs	r4, #0
 80096b0:	4626      	mov	r6, r4
 80096b2:	e7e1      	b.n	8009678 <_dtoa_r+0x940>
 80096b4:	46c3      	mov	fp, r8
 80096b6:	4626      	mov	r6, r4
 80096b8:	e59d      	b.n	80091f6 <_dtoa_r+0x4be>
 80096ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 80c8 	beq.w	8009852 <_dtoa_r+0xb1a>
 80096c2:	9b08      	ldr	r3, [sp, #32]
 80096c4:	9306      	str	r3, [sp, #24]
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	dd05      	ble.n	80096d6 <_dtoa_r+0x99e>
 80096ca:	4631      	mov	r1, r6
 80096cc:	463a      	mov	r2, r7
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 ff22 	bl	800a518 <__lshift>
 80096d4:	4606      	mov	r6, r0
 80096d6:	f1b8 0f00 	cmp.w	r8, #0
 80096da:	d05b      	beq.n	8009794 <_dtoa_r+0xa5c>
 80096dc:	4628      	mov	r0, r5
 80096de:	6871      	ldr	r1, [r6, #4]
 80096e0:	f000 fcc2 	bl	800a068 <_Balloc>
 80096e4:	4607      	mov	r7, r0
 80096e6:	b928      	cbnz	r0, 80096f4 <_dtoa_r+0x9bc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	f240 21ef 	movw	r1, #751	; 0x2ef
 80096ee:	4b81      	ldr	r3, [pc, #516]	; (80098f4 <_dtoa_r+0xbbc>)
 80096f0:	f7ff bb36 	b.w	8008d60 <_dtoa_r+0x28>
 80096f4:	6932      	ldr	r2, [r6, #16]
 80096f6:	f106 010c 	add.w	r1, r6, #12
 80096fa:	3202      	adds	r2, #2
 80096fc:	0092      	lsls	r2, r2, #2
 80096fe:	300c      	adds	r0, #12
 8009700:	f7ff fa57 	bl	8008bb2 <memcpy>
 8009704:	2201      	movs	r2, #1
 8009706:	4639      	mov	r1, r7
 8009708:	4628      	mov	r0, r5
 800970a:	f000 ff05 	bl	800a518 <__lshift>
 800970e:	46b0      	mov	r8, r6
 8009710:	4606      	mov	r6, r0
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	9a03      	ldr	r2, [sp, #12]
 8009716:	3301      	adds	r3, #1
 8009718:	9308      	str	r3, [sp, #32]
 800971a:	9b06      	ldr	r3, [sp, #24]
 800971c:	4413      	add	r3, r2
 800971e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009720:	9b04      	ldr	r3, [sp, #16]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	930a      	str	r3, [sp, #40]	; 0x28
 8009728:	9b08      	ldr	r3, [sp, #32]
 800972a:	4621      	mov	r1, r4
 800972c:	3b01      	subs	r3, #1
 800972e:	4650      	mov	r0, sl
 8009730:	9304      	str	r3, [sp, #16]
 8009732:	f7ff fa75 	bl	8008c20 <quorem>
 8009736:	4641      	mov	r1, r8
 8009738:	9006      	str	r0, [sp, #24]
 800973a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800973e:	4650      	mov	r0, sl
 8009740:	f000 ff56 	bl	800a5f0 <__mcmp>
 8009744:	4632      	mov	r2, r6
 8009746:	9009      	str	r0, [sp, #36]	; 0x24
 8009748:	4621      	mov	r1, r4
 800974a:	4628      	mov	r0, r5
 800974c:	f000 ff6c 	bl	800a628 <__mdiff>
 8009750:	68c2      	ldr	r2, [r0, #12]
 8009752:	4607      	mov	r7, r0
 8009754:	bb02      	cbnz	r2, 8009798 <_dtoa_r+0xa60>
 8009756:	4601      	mov	r1, r0
 8009758:	4650      	mov	r0, sl
 800975a:	f000 ff49 	bl	800a5f0 <__mcmp>
 800975e:	4602      	mov	r2, r0
 8009760:	4639      	mov	r1, r7
 8009762:	4628      	mov	r0, r5
 8009764:	920c      	str	r2, [sp, #48]	; 0x30
 8009766:	f000 fcbf 	bl	800a0e8 <_Bfree>
 800976a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800976c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800976e:	9f08      	ldr	r7, [sp, #32]
 8009770:	ea43 0102 	orr.w	r1, r3, r2
 8009774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009776:	4319      	orrs	r1, r3
 8009778:	d110      	bne.n	800979c <_dtoa_r+0xa64>
 800977a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800977e:	d029      	beq.n	80097d4 <_dtoa_r+0xa9c>
 8009780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	dd02      	ble.n	800978c <_dtoa_r+0xa54>
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800978c:	9b04      	ldr	r3, [sp, #16]
 800978e:	f883 9000 	strb.w	r9, [r3]
 8009792:	e777      	b.n	8009684 <_dtoa_r+0x94c>
 8009794:	4630      	mov	r0, r6
 8009796:	e7ba      	b.n	800970e <_dtoa_r+0x9d6>
 8009798:	2201      	movs	r2, #1
 800979a:	e7e1      	b.n	8009760 <_dtoa_r+0xa28>
 800979c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979e:	2b00      	cmp	r3, #0
 80097a0:	db04      	blt.n	80097ac <_dtoa_r+0xa74>
 80097a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80097a4:	430b      	orrs	r3, r1
 80097a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097a8:	430b      	orrs	r3, r1
 80097aa:	d120      	bne.n	80097ee <_dtoa_r+0xab6>
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	dded      	ble.n	800978c <_dtoa_r+0xa54>
 80097b0:	4651      	mov	r1, sl
 80097b2:	2201      	movs	r2, #1
 80097b4:	4628      	mov	r0, r5
 80097b6:	f000 feaf 	bl	800a518 <__lshift>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4682      	mov	sl, r0
 80097be:	f000 ff17 	bl	800a5f0 <__mcmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	dc03      	bgt.n	80097ce <_dtoa_r+0xa96>
 80097c6:	d1e1      	bne.n	800978c <_dtoa_r+0xa54>
 80097c8:	f019 0f01 	tst.w	r9, #1
 80097cc:	d0de      	beq.n	800978c <_dtoa_r+0xa54>
 80097ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097d2:	d1d8      	bne.n	8009786 <_dtoa_r+0xa4e>
 80097d4:	2339      	movs	r3, #57	; 0x39
 80097d6:	9a04      	ldr	r2, [sp, #16]
 80097d8:	7013      	strb	r3, [r2, #0]
 80097da:	463b      	mov	r3, r7
 80097dc:	461f      	mov	r7, r3
 80097de:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	2a39      	cmp	r2, #57	; 0x39
 80097e6:	d06b      	beq.n	80098c0 <_dtoa_r+0xb88>
 80097e8:	3201      	adds	r2, #1
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	e74a      	b.n	8009684 <_dtoa_r+0x94c>
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	dd07      	ble.n	8009802 <_dtoa_r+0xaca>
 80097f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097f6:	d0ed      	beq.n	80097d4 <_dtoa_r+0xa9c>
 80097f8:	9a04      	ldr	r2, [sp, #16]
 80097fa:	f109 0301 	add.w	r3, r9, #1
 80097fe:	7013      	strb	r3, [r2, #0]
 8009800:	e740      	b.n	8009684 <_dtoa_r+0x94c>
 8009802:	9b08      	ldr	r3, [sp, #32]
 8009804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009806:	f803 9c01 	strb.w	r9, [r3, #-1]
 800980a:	4293      	cmp	r3, r2
 800980c:	d042      	beq.n	8009894 <_dtoa_r+0xb5c>
 800980e:	4651      	mov	r1, sl
 8009810:	2300      	movs	r3, #0
 8009812:	220a      	movs	r2, #10
 8009814:	4628      	mov	r0, r5
 8009816:	f000 fc89 	bl	800a12c <__multadd>
 800981a:	45b0      	cmp	r8, r6
 800981c:	4682      	mov	sl, r0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	f04f 020a 	mov.w	r2, #10
 8009826:	4641      	mov	r1, r8
 8009828:	4628      	mov	r0, r5
 800982a:	d107      	bne.n	800983c <_dtoa_r+0xb04>
 800982c:	f000 fc7e 	bl	800a12c <__multadd>
 8009830:	4680      	mov	r8, r0
 8009832:	4606      	mov	r6, r0
 8009834:	9b08      	ldr	r3, [sp, #32]
 8009836:	3301      	adds	r3, #1
 8009838:	9308      	str	r3, [sp, #32]
 800983a:	e775      	b.n	8009728 <_dtoa_r+0x9f0>
 800983c:	f000 fc76 	bl	800a12c <__multadd>
 8009840:	4631      	mov	r1, r6
 8009842:	4680      	mov	r8, r0
 8009844:	2300      	movs	r3, #0
 8009846:	220a      	movs	r2, #10
 8009848:	4628      	mov	r0, r5
 800984a:	f000 fc6f 	bl	800a12c <__multadd>
 800984e:	4606      	mov	r6, r0
 8009850:	e7f0      	b.n	8009834 <_dtoa_r+0xafc>
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	9306      	str	r3, [sp, #24]
 8009856:	9f03      	ldr	r7, [sp, #12]
 8009858:	4621      	mov	r1, r4
 800985a:	4650      	mov	r0, sl
 800985c:	f7ff f9e0 	bl	8008c20 <quorem>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009866:	f807 9b01 	strb.w	r9, [r7], #1
 800986a:	1afa      	subs	r2, r7, r3
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	4293      	cmp	r3, r2
 8009870:	dd07      	ble.n	8009882 <_dtoa_r+0xb4a>
 8009872:	4651      	mov	r1, sl
 8009874:	2300      	movs	r3, #0
 8009876:	220a      	movs	r2, #10
 8009878:	4628      	mov	r0, r5
 800987a:	f000 fc57 	bl	800a12c <__multadd>
 800987e:	4682      	mov	sl, r0
 8009880:	e7ea      	b.n	8009858 <_dtoa_r+0xb20>
 8009882:	9b06      	ldr	r3, [sp, #24]
 8009884:	f04f 0800 	mov.w	r8, #0
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfcc      	ite	gt
 800988c:	461f      	movgt	r7, r3
 800988e:	2701      	movle	r7, #1
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	441f      	add	r7, r3
 8009894:	4651      	mov	r1, sl
 8009896:	2201      	movs	r2, #1
 8009898:	4628      	mov	r0, r5
 800989a:	f000 fe3d 	bl	800a518 <__lshift>
 800989e:	4621      	mov	r1, r4
 80098a0:	4682      	mov	sl, r0
 80098a2:	f000 fea5 	bl	800a5f0 <__mcmp>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	dc97      	bgt.n	80097da <_dtoa_r+0xaa2>
 80098aa:	d102      	bne.n	80098b2 <_dtoa_r+0xb7a>
 80098ac:	f019 0f01 	tst.w	r9, #1
 80098b0:	d193      	bne.n	80097da <_dtoa_r+0xaa2>
 80098b2:	463b      	mov	r3, r7
 80098b4:	461f      	mov	r7, r3
 80098b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ba:	2a30      	cmp	r2, #48	; 0x30
 80098bc:	d0fa      	beq.n	80098b4 <_dtoa_r+0xb7c>
 80098be:	e6e1      	b.n	8009684 <_dtoa_r+0x94c>
 80098c0:	9a03      	ldr	r2, [sp, #12]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d18a      	bne.n	80097dc <_dtoa_r+0xaa4>
 80098c6:	2331      	movs	r3, #49	; 0x31
 80098c8:	f10b 0b01 	add.w	fp, fp, #1
 80098cc:	e797      	b.n	80097fe <_dtoa_r+0xac6>
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <_dtoa_r+0xbc0>)
 80098d0:	f7ff ba9f 	b.w	8008e12 <_dtoa_r+0xda>
 80098d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f47f aa77 	bne.w	8008dca <_dtoa_r+0x92>
 80098dc:	4b07      	ldr	r3, [pc, #28]	; (80098fc <_dtoa_r+0xbc4>)
 80098de:	f7ff ba98 	b.w	8008e12 <_dtoa_r+0xda>
 80098e2:	9b06      	ldr	r3, [sp, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dcb6      	bgt.n	8009856 <_dtoa_r+0xb1e>
 80098e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	f73f aeb5 	bgt.w	800965a <_dtoa_r+0x922>
 80098f0:	e7b1      	b.n	8009856 <_dtoa_r+0xb1e>
 80098f2:	bf00      	nop
 80098f4:	0800b3d7 	.word	0x0800b3d7
 80098f8:	0800b299 	.word	0x0800b299
 80098fc:	0800b372 	.word	0x0800b372

08009900 <_free_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4605      	mov	r5, r0
 8009904:	2900      	cmp	r1, #0
 8009906:	d040      	beq.n	800998a <_free_r+0x8a>
 8009908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800990c:	1f0c      	subs	r4, r1, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	bfb8      	it	lt
 8009912:	18e4      	addlt	r4, r4, r3
 8009914:	f7fd f9ee 	bl	8006cf4 <__malloc_lock>
 8009918:	4a1c      	ldr	r2, [pc, #112]	; (800998c <_free_r+0x8c>)
 800991a:	6813      	ldr	r3, [r2, #0]
 800991c:	b933      	cbnz	r3, 800992c <_free_r+0x2c>
 800991e:	6063      	str	r3, [r4, #4]
 8009920:	6014      	str	r4, [r2, #0]
 8009922:	4628      	mov	r0, r5
 8009924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009928:	f7fd b9ea 	b.w	8006d00 <__malloc_unlock>
 800992c:	42a3      	cmp	r3, r4
 800992e:	d908      	bls.n	8009942 <_free_r+0x42>
 8009930:	6820      	ldr	r0, [r4, #0]
 8009932:	1821      	adds	r1, r4, r0
 8009934:	428b      	cmp	r3, r1
 8009936:	bf01      	itttt	eq
 8009938:	6819      	ldreq	r1, [r3, #0]
 800993a:	685b      	ldreq	r3, [r3, #4]
 800993c:	1809      	addeq	r1, r1, r0
 800993e:	6021      	streq	r1, [r4, #0]
 8009940:	e7ed      	b.n	800991e <_free_r+0x1e>
 8009942:	461a      	mov	r2, r3
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	b10b      	cbz	r3, 800994c <_free_r+0x4c>
 8009948:	42a3      	cmp	r3, r4
 800994a:	d9fa      	bls.n	8009942 <_free_r+0x42>
 800994c:	6811      	ldr	r1, [r2, #0]
 800994e:	1850      	adds	r0, r2, r1
 8009950:	42a0      	cmp	r0, r4
 8009952:	d10b      	bne.n	800996c <_free_r+0x6c>
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	4401      	add	r1, r0
 8009958:	1850      	adds	r0, r2, r1
 800995a:	4283      	cmp	r3, r0
 800995c:	6011      	str	r1, [r2, #0]
 800995e:	d1e0      	bne.n	8009922 <_free_r+0x22>
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4408      	add	r0, r1
 8009966:	6010      	str	r0, [r2, #0]
 8009968:	6053      	str	r3, [r2, #4]
 800996a:	e7da      	b.n	8009922 <_free_r+0x22>
 800996c:	d902      	bls.n	8009974 <_free_r+0x74>
 800996e:	230c      	movs	r3, #12
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	e7d6      	b.n	8009922 <_free_r+0x22>
 8009974:	6820      	ldr	r0, [r4, #0]
 8009976:	1821      	adds	r1, r4, r0
 8009978:	428b      	cmp	r3, r1
 800997a:	bf01      	itttt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	1809      	addeq	r1, r1, r0
 8009982:	6021      	streq	r1, [r4, #0]
 8009984:	6063      	str	r3, [r4, #4]
 8009986:	6054      	str	r4, [r2, #4]
 8009988:	e7cb      	b.n	8009922 <_free_r+0x22>
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	200025fc 	.word	0x200025fc

08009990 <rshift>:
 8009990:	6903      	ldr	r3, [r0, #16]
 8009992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800999a:	f100 0414 	add.w	r4, r0, #20
 800999e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099a2:	dd46      	ble.n	8009a32 <rshift+0xa2>
 80099a4:	f011 011f 	ands.w	r1, r1, #31
 80099a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099b0:	d10c      	bne.n	80099cc <rshift+0x3c>
 80099b2:	4629      	mov	r1, r5
 80099b4:	f100 0710 	add.w	r7, r0, #16
 80099b8:	42b1      	cmp	r1, r6
 80099ba:	d335      	bcc.n	8009a28 <rshift+0x98>
 80099bc:	1a9b      	subs	r3, r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	1eea      	subs	r2, r5, #3
 80099c2:	4296      	cmp	r6, r2
 80099c4:	bf38      	it	cc
 80099c6:	2300      	movcc	r3, #0
 80099c8:	4423      	add	r3, r4
 80099ca:	e015      	b.n	80099f8 <rshift+0x68>
 80099cc:	46a1      	mov	r9, r4
 80099ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099d2:	f1c1 0820 	rsb	r8, r1, #32
 80099d6:	40cf      	lsrs	r7, r1
 80099d8:	f105 0e04 	add.w	lr, r5, #4
 80099dc:	4576      	cmp	r6, lr
 80099de:	46f4      	mov	ip, lr
 80099e0:	d816      	bhi.n	8009a10 <rshift+0x80>
 80099e2:	1a9a      	subs	r2, r3, r2
 80099e4:	0092      	lsls	r2, r2, #2
 80099e6:	3a04      	subs	r2, #4
 80099e8:	3501      	adds	r5, #1
 80099ea:	42ae      	cmp	r6, r5
 80099ec:	bf38      	it	cc
 80099ee:	2200      	movcc	r2, #0
 80099f0:	18a3      	adds	r3, r4, r2
 80099f2:	50a7      	str	r7, [r4, r2]
 80099f4:	b107      	cbz	r7, 80099f8 <rshift+0x68>
 80099f6:	3304      	adds	r3, #4
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	eba3 0204 	sub.w	r2, r3, r4
 80099fe:	bf08      	it	eq
 8009a00:	2300      	moveq	r3, #0
 8009a02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a06:	6102      	str	r2, [r0, #16]
 8009a08:	bf08      	it	eq
 8009a0a:	6143      	streq	r3, [r0, #20]
 8009a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a10:	f8dc c000 	ldr.w	ip, [ip]
 8009a14:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a18:	ea4c 0707 	orr.w	r7, ip, r7
 8009a1c:	f849 7b04 	str.w	r7, [r9], #4
 8009a20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a24:	40cf      	lsrs	r7, r1
 8009a26:	e7d9      	b.n	80099dc <rshift+0x4c>
 8009a28:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a30:	e7c2      	b.n	80099b8 <rshift+0x28>
 8009a32:	4623      	mov	r3, r4
 8009a34:	e7e0      	b.n	80099f8 <rshift+0x68>

08009a36 <__hexdig_fun>:
 8009a36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d802      	bhi.n	8009a44 <__hexdig_fun+0xe>
 8009a3e:	3820      	subs	r0, #32
 8009a40:	b2c0      	uxtb	r0, r0
 8009a42:	4770      	bx	lr
 8009a44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a48:	2b05      	cmp	r3, #5
 8009a4a:	d801      	bhi.n	8009a50 <__hexdig_fun+0x1a>
 8009a4c:	3847      	subs	r0, #71	; 0x47
 8009a4e:	e7f7      	b.n	8009a40 <__hexdig_fun+0xa>
 8009a50:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a54:	2b05      	cmp	r3, #5
 8009a56:	d801      	bhi.n	8009a5c <__hexdig_fun+0x26>
 8009a58:	3827      	subs	r0, #39	; 0x27
 8009a5a:	e7f1      	b.n	8009a40 <__hexdig_fun+0xa>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	4770      	bx	lr

08009a60 <__gethex>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	4681      	mov	r9, r0
 8009a66:	468a      	mov	sl, r1
 8009a68:	4617      	mov	r7, r2
 8009a6a:	680a      	ldr	r2, [r1, #0]
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	f102 0b02 	add.w	fp, r2, #2
 8009a72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	32fe      	adds	r2, #254	; 0xfe
 8009a7e:	eb02 030b 	add.w	r3, r2, fp
 8009a82:	46d8      	mov	r8, fp
 8009a84:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	2830      	cmp	r0, #48	; 0x30
 8009a8c:	d0f7      	beq.n	8009a7e <__gethex+0x1e>
 8009a8e:	f7ff ffd2 	bl	8009a36 <__hexdig_fun>
 8009a92:	4604      	mov	r4, r0
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d138      	bne.n	8009b0a <__gethex+0xaa>
 8009a98:	2201      	movs	r2, #1
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	49a7      	ldr	r1, [pc, #668]	; (8009d3c <__gethex+0x2dc>)
 8009a9e:	f7fe ff53 	bl	8008948 <strncmp>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d169      	bne.n	8009b7c <__gethex+0x11c>
 8009aa8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009aac:	465d      	mov	r5, fp
 8009aae:	f7ff ffc2 	bl	8009a36 <__hexdig_fun>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d064      	beq.n	8009b80 <__gethex+0x120>
 8009ab6:	465a      	mov	r2, fp
 8009ab8:	7810      	ldrb	r0, [r2, #0]
 8009aba:	4690      	mov	r8, r2
 8009abc:	2830      	cmp	r0, #48	; 0x30
 8009abe:	f102 0201 	add.w	r2, r2, #1
 8009ac2:	d0f9      	beq.n	8009ab8 <__gethex+0x58>
 8009ac4:	f7ff ffb7 	bl	8009a36 <__hexdig_fun>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	fab0 f480 	clz	r4, r0
 8009ace:	465e      	mov	r6, fp
 8009ad0:	0964      	lsrs	r4, r4, #5
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	4615      	mov	r5, r2
 8009ad8:	7828      	ldrb	r0, [r5, #0]
 8009ada:	3201      	adds	r2, #1
 8009adc:	f7ff ffab 	bl	8009a36 <__hexdig_fun>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d1f8      	bne.n	8009ad6 <__gethex+0x76>
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	4994      	ldr	r1, [pc, #592]	; (8009d3c <__gethex+0x2dc>)
 8009aea:	f7fe ff2d 	bl	8008948 <strncmp>
 8009aee:	b978      	cbnz	r0, 8009b10 <__gethex+0xb0>
 8009af0:	b946      	cbnz	r6, 8009b04 <__gethex+0xa4>
 8009af2:	1c6e      	adds	r6, r5, #1
 8009af4:	4632      	mov	r2, r6
 8009af6:	4615      	mov	r5, r2
 8009af8:	7828      	ldrb	r0, [r5, #0]
 8009afa:	3201      	adds	r2, #1
 8009afc:	f7ff ff9b 	bl	8009a36 <__hexdig_fun>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d1f8      	bne.n	8009af6 <__gethex+0x96>
 8009b04:	1b73      	subs	r3, r6, r5
 8009b06:	009e      	lsls	r6, r3, #2
 8009b08:	e004      	b.n	8009b14 <__gethex+0xb4>
 8009b0a:	2400      	movs	r4, #0
 8009b0c:	4626      	mov	r6, r4
 8009b0e:	e7e1      	b.n	8009ad4 <__gethex+0x74>
 8009b10:	2e00      	cmp	r6, #0
 8009b12:	d1f7      	bne.n	8009b04 <__gethex+0xa4>
 8009b14:	782b      	ldrb	r3, [r5, #0]
 8009b16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b1a:	2b50      	cmp	r3, #80	; 0x50
 8009b1c:	d13d      	bne.n	8009b9a <__gethex+0x13a>
 8009b1e:	786b      	ldrb	r3, [r5, #1]
 8009b20:	2b2b      	cmp	r3, #43	; 0x2b
 8009b22:	d02f      	beq.n	8009b84 <__gethex+0x124>
 8009b24:	2b2d      	cmp	r3, #45	; 0x2d
 8009b26:	d031      	beq.n	8009b8c <__gethex+0x12c>
 8009b28:	f04f 0b00 	mov.w	fp, #0
 8009b2c:	1c69      	adds	r1, r5, #1
 8009b2e:	7808      	ldrb	r0, [r1, #0]
 8009b30:	f7ff ff81 	bl	8009a36 <__hexdig_fun>
 8009b34:	1e42      	subs	r2, r0, #1
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	2a18      	cmp	r2, #24
 8009b3a:	d82e      	bhi.n	8009b9a <__gethex+0x13a>
 8009b3c:	f1a0 0210 	sub.w	r2, r0, #16
 8009b40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b44:	f7ff ff77 	bl	8009a36 <__hexdig_fun>
 8009b48:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b4c:	fa5f fc8c 	uxtb.w	ip, ip
 8009b50:	f1bc 0f18 	cmp.w	ip, #24
 8009b54:	d91d      	bls.n	8009b92 <__gethex+0x132>
 8009b56:	f1bb 0f00 	cmp.w	fp, #0
 8009b5a:	d000      	beq.n	8009b5e <__gethex+0xfe>
 8009b5c:	4252      	negs	r2, r2
 8009b5e:	4416      	add	r6, r2
 8009b60:	f8ca 1000 	str.w	r1, [sl]
 8009b64:	b1dc      	cbz	r4, 8009b9e <__gethex+0x13e>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bf14      	ite	ne
 8009b6c:	f04f 0800 	movne.w	r8, #0
 8009b70:	f04f 0806 	moveq.w	r8, #6
 8009b74:	4640      	mov	r0, r8
 8009b76:	b005      	add	sp, #20
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	4645      	mov	r5, r8
 8009b7e:	4626      	mov	r6, r4
 8009b80:	2401      	movs	r4, #1
 8009b82:	e7c7      	b.n	8009b14 <__gethex+0xb4>
 8009b84:	f04f 0b00 	mov.w	fp, #0
 8009b88:	1ca9      	adds	r1, r5, #2
 8009b8a:	e7d0      	b.n	8009b2e <__gethex+0xce>
 8009b8c:	f04f 0b01 	mov.w	fp, #1
 8009b90:	e7fa      	b.n	8009b88 <__gethex+0x128>
 8009b92:	230a      	movs	r3, #10
 8009b94:	fb03 0002 	mla	r0, r3, r2, r0
 8009b98:	e7d0      	b.n	8009b3c <__gethex+0xdc>
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	e7e0      	b.n	8009b60 <__gethex+0x100>
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	eba5 0308 	sub.w	r3, r5, r8
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	2b07      	cmp	r3, #7
 8009ba8:	dc0a      	bgt.n	8009bc0 <__gethex+0x160>
 8009baa:	4648      	mov	r0, r9
 8009bac:	f000 fa5c 	bl	800a068 <_Balloc>
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	b940      	cbnz	r0, 8009bc6 <__gethex+0x166>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	21e4      	movs	r1, #228	; 0xe4
 8009bb8:	4b61      	ldr	r3, [pc, #388]	; (8009d40 <__gethex+0x2e0>)
 8009bba:	4862      	ldr	r0, [pc, #392]	; (8009d44 <__gethex+0x2e4>)
 8009bbc:	f7ff f812 	bl	8008be4 <__assert_func>
 8009bc0:	3101      	adds	r1, #1
 8009bc2:	105b      	asrs	r3, r3, #1
 8009bc4:	e7ef      	b.n	8009ba6 <__gethex+0x146>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	469b      	mov	fp, r3
 8009bca:	f100 0a14 	add.w	sl, r0, #20
 8009bce:	f8cd a004 	str.w	sl, [sp, #4]
 8009bd2:	45a8      	cmp	r8, r5
 8009bd4:	d344      	bcc.n	8009c60 <__gethex+0x200>
 8009bd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f848 bb04 	str.w	fp, [r8], #4
 8009be0:	eba8 080a 	sub.w	r8, r8, sl
 8009be4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009be8:	6122      	str	r2, [r4, #16]
 8009bea:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009bee:	f000 fb2d 	bl	800a24c <__hi0bits>
 8009bf2:	683d      	ldr	r5, [r7, #0]
 8009bf4:	eba8 0800 	sub.w	r8, r8, r0
 8009bf8:	45a8      	cmp	r8, r5
 8009bfa:	dd59      	ble.n	8009cb0 <__gethex+0x250>
 8009bfc:	eba8 0805 	sub.w	r8, r8, r5
 8009c00:	4641      	mov	r1, r8
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 feab 	bl	800a95e <__any_on>
 8009c08:	4683      	mov	fp, r0
 8009c0a:	b1b8      	cbz	r0, 8009c3c <__gethex+0x1dc>
 8009c0c:	f04f 0b01 	mov.w	fp, #1
 8009c10:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c14:	1159      	asrs	r1, r3, #5
 8009c16:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c1a:	f003 021f 	and.w	r2, r3, #31
 8009c1e:	fa0b f202 	lsl.w	r2, fp, r2
 8009c22:	420a      	tst	r2, r1
 8009c24:	d00a      	beq.n	8009c3c <__gethex+0x1dc>
 8009c26:	455b      	cmp	r3, fp
 8009c28:	dd06      	ble.n	8009c38 <__gethex+0x1d8>
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f1a8 0102 	sub.w	r1, r8, #2
 8009c30:	f000 fe95 	bl	800a95e <__any_on>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d138      	bne.n	8009caa <__gethex+0x24a>
 8009c38:	f04f 0b02 	mov.w	fp, #2
 8009c3c:	4641      	mov	r1, r8
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7ff fea6 	bl	8009990 <rshift>
 8009c44:	4446      	add	r6, r8
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	42b3      	cmp	r3, r6
 8009c4a:	da41      	bge.n	8009cd0 <__gethex+0x270>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4648      	mov	r0, r9
 8009c50:	f000 fa4a 	bl	800a0e8 <_Bfree>
 8009c54:	2300      	movs	r3, #0
 8009c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c58:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	e789      	b.n	8009b74 <__gethex+0x114>
 8009c60:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009c64:	2a2e      	cmp	r2, #46	; 0x2e
 8009c66:	d014      	beq.n	8009c92 <__gethex+0x232>
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	d106      	bne.n	8009c7a <__gethex+0x21a>
 8009c6c:	9b01      	ldr	r3, [sp, #4]
 8009c6e:	f843 bb04 	str.w	fp, [r3], #4
 8009c72:	f04f 0b00 	mov.w	fp, #0
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	465b      	mov	r3, fp
 8009c7a:	7828      	ldrb	r0, [r5, #0]
 8009c7c:	9303      	str	r3, [sp, #12]
 8009c7e:	f7ff feda 	bl	8009a36 <__hexdig_fun>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	f000 000f 	and.w	r0, r0, #15
 8009c88:	4098      	lsls	r0, r3
 8009c8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009c8e:	3304      	adds	r3, #4
 8009c90:	e79f      	b.n	8009bd2 <__gethex+0x172>
 8009c92:	45a8      	cmp	r8, r5
 8009c94:	d8e8      	bhi.n	8009c68 <__gethex+0x208>
 8009c96:	2201      	movs	r2, #1
 8009c98:	4628      	mov	r0, r5
 8009c9a:	4928      	ldr	r1, [pc, #160]	; (8009d3c <__gethex+0x2dc>)
 8009c9c:	9303      	str	r3, [sp, #12]
 8009c9e:	f7fe fe53 	bl	8008948 <strncmp>
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d1df      	bne.n	8009c68 <__gethex+0x208>
 8009ca8:	e793      	b.n	8009bd2 <__gethex+0x172>
 8009caa:	f04f 0b03 	mov.w	fp, #3
 8009cae:	e7c5      	b.n	8009c3c <__gethex+0x1dc>
 8009cb0:	da0b      	bge.n	8009cca <__gethex+0x26a>
 8009cb2:	eba5 0808 	sub.w	r8, r5, r8
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4642      	mov	r2, r8
 8009cba:	4648      	mov	r0, r9
 8009cbc:	f000 fc2c 	bl	800a518 <__lshift>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	eba6 0608 	sub.w	r6, r6, r8
 8009cc6:	f100 0a14 	add.w	sl, r0, #20
 8009cca:	f04f 0b00 	mov.w	fp, #0
 8009cce:	e7ba      	b.n	8009c46 <__gethex+0x1e6>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	42b3      	cmp	r3, r6
 8009cd4:	dd74      	ble.n	8009dc0 <__gethex+0x360>
 8009cd6:	1b9e      	subs	r6, r3, r6
 8009cd8:	42b5      	cmp	r5, r6
 8009cda:	dc35      	bgt.n	8009d48 <__gethex+0x2e8>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d023      	beq.n	8009d2a <__gethex+0x2ca>
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d025      	beq.n	8009d32 <__gethex+0x2d2>
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d115      	bne.n	8009d16 <__gethex+0x2b6>
 8009cea:	42b5      	cmp	r5, r6
 8009cec:	d113      	bne.n	8009d16 <__gethex+0x2b6>
 8009cee:	2d01      	cmp	r5, #1
 8009cf0:	d10b      	bne.n	8009d0a <__gethex+0x2aa>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	9a02      	ldr	r2, [sp, #8]
 8009cf6:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	6123      	str	r3, [r4, #16]
 8009d00:	f8ca 3000 	str.w	r3, [sl]
 8009d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d06:	601c      	str	r4, [r3, #0]
 8009d08:	e734      	b.n	8009b74 <__gethex+0x114>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	1e69      	subs	r1, r5, #1
 8009d0e:	f000 fe26 	bl	800a95e <__any_on>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d1ed      	bne.n	8009cf2 <__gethex+0x292>
 8009d16:	4621      	mov	r1, r4
 8009d18:	4648      	mov	r0, r9
 8009d1a:	f000 f9e5 	bl	800a0e8 <_Bfree>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d22:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	e724      	b.n	8009b74 <__gethex+0x114>
 8009d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1f2      	bne.n	8009d16 <__gethex+0x2b6>
 8009d30:	e7df      	b.n	8009cf2 <__gethex+0x292>
 8009d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1dc      	bne.n	8009cf2 <__gethex+0x292>
 8009d38:	e7ed      	b.n	8009d16 <__gethex+0x2b6>
 8009d3a:	bf00      	nop
 8009d3c:	0800b136 	.word	0x0800b136
 8009d40:	0800b3d7 	.word	0x0800b3d7
 8009d44:	0800b3e8 	.word	0x0800b3e8
 8009d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8009d4c:	f1bb 0f00 	cmp.w	fp, #0
 8009d50:	d133      	bne.n	8009dba <__gethex+0x35a>
 8009d52:	f1b8 0f00 	cmp.w	r8, #0
 8009d56:	d004      	beq.n	8009d62 <__gethex+0x302>
 8009d58:	4641      	mov	r1, r8
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fdff 	bl	800a95e <__any_on>
 8009d60:	4683      	mov	fp, r0
 8009d62:	2301      	movs	r3, #1
 8009d64:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009d68:	f008 081f 	and.w	r8, r8, #31
 8009d6c:	fa03 f308 	lsl.w	r3, r3, r8
 8009d70:	f04f 0802 	mov.w	r8, #2
 8009d74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4213      	tst	r3, r2
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	bf18      	it	ne
 8009d80:	f04b 0b02 	orrne.w	fp, fp, #2
 8009d84:	1bad      	subs	r5, r5, r6
 8009d86:	f7ff fe03 	bl	8009990 <rshift>
 8009d8a:	687e      	ldr	r6, [r7, #4]
 8009d8c:	f1bb 0f00 	cmp.w	fp, #0
 8009d90:	d04a      	beq.n	8009e28 <__gethex+0x3c8>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d016      	beq.n	8009dc6 <__gethex+0x366>
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d018      	beq.n	8009dce <__gethex+0x36e>
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d109      	bne.n	8009db4 <__gethex+0x354>
 8009da0:	f01b 0f02 	tst.w	fp, #2
 8009da4:	d006      	beq.n	8009db4 <__gethex+0x354>
 8009da6:	f8da 3000 	ldr.w	r3, [sl]
 8009daa:	ea4b 0b03 	orr.w	fp, fp, r3
 8009dae:	f01b 0f01 	tst.w	fp, #1
 8009db2:	d10f      	bne.n	8009dd4 <__gethex+0x374>
 8009db4:	f048 0810 	orr.w	r8, r8, #16
 8009db8:	e036      	b.n	8009e28 <__gethex+0x3c8>
 8009dba:	f04f 0b01 	mov.w	fp, #1
 8009dbe:	e7d0      	b.n	8009d62 <__gethex+0x302>
 8009dc0:	f04f 0801 	mov.w	r8, #1
 8009dc4:	e7e2      	b.n	8009d8c <__gethex+0x32c>
 8009dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dc8:	f1c3 0301 	rsb	r3, r3, #1
 8009dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0ef      	beq.n	8009db4 <__gethex+0x354>
 8009dd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009dd8:	f104 0214 	add.w	r2, r4, #20
 8009ddc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	2300      	movs	r3, #0
 8009de4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009de8:	4694      	mov	ip, r2
 8009dea:	f852 1b04 	ldr.w	r1, [r2], #4
 8009dee:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009df2:	d01e      	beq.n	8009e32 <__gethex+0x3d2>
 8009df4:	3101      	adds	r1, #1
 8009df6:	f8cc 1000 	str.w	r1, [ip]
 8009dfa:	f1b8 0f02 	cmp.w	r8, #2
 8009dfe:	f104 0214 	add.w	r2, r4, #20
 8009e02:	d13d      	bne.n	8009e80 <__gethex+0x420>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	42ab      	cmp	r3, r5
 8009e0a:	d10b      	bne.n	8009e24 <__gethex+0x3c4>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	1169      	asrs	r1, r5, #5
 8009e10:	f005 051f 	and.w	r5, r5, #31
 8009e14:	fa03 f505 	lsl.w	r5, r3, r5
 8009e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e1c:	421d      	tst	r5, r3
 8009e1e:	bf18      	it	ne
 8009e20:	f04f 0801 	movne.w	r8, #1
 8009e24:	f048 0820 	orr.w	r8, r8, #32
 8009e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e2a:	601c      	str	r4, [r3, #0]
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	601e      	str	r6, [r3, #0]
 8009e30:	e6a0      	b.n	8009b74 <__gethex+0x114>
 8009e32:	4290      	cmp	r0, r2
 8009e34:	f842 3c04 	str.w	r3, [r2, #-4]
 8009e38:	d8d6      	bhi.n	8009de8 <__gethex+0x388>
 8009e3a:	68a2      	ldr	r2, [r4, #8]
 8009e3c:	4593      	cmp	fp, r2
 8009e3e:	db17      	blt.n	8009e70 <__gethex+0x410>
 8009e40:	6861      	ldr	r1, [r4, #4]
 8009e42:	4648      	mov	r0, r9
 8009e44:	3101      	adds	r1, #1
 8009e46:	f000 f90f 	bl	800a068 <_Balloc>
 8009e4a:	4682      	mov	sl, r0
 8009e4c:	b918      	cbnz	r0, 8009e56 <__gethex+0x3f6>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	2184      	movs	r1, #132	; 0x84
 8009e52:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <__gethex+0x45c>)
 8009e54:	e6b1      	b.n	8009bba <__gethex+0x15a>
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	f104 010c 	add.w	r1, r4, #12
 8009e5c:	3202      	adds	r2, #2
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	300c      	adds	r0, #12
 8009e62:	f7fe fea6 	bl	8008bb2 <memcpy>
 8009e66:	4621      	mov	r1, r4
 8009e68:	4648      	mov	r0, r9
 8009e6a:	f000 f93d 	bl	800a0e8 <_Bfree>
 8009e6e:	4654      	mov	r4, sl
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	1c51      	adds	r1, r2, #1
 8009e74:	6121      	str	r1, [r4, #16]
 8009e76:	2101      	movs	r1, #1
 8009e78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e7c:	6151      	str	r1, [r2, #20]
 8009e7e:	e7bc      	b.n	8009dfa <__gethex+0x39a>
 8009e80:	6921      	ldr	r1, [r4, #16]
 8009e82:	4559      	cmp	r1, fp
 8009e84:	dd0b      	ble.n	8009e9e <__gethex+0x43e>
 8009e86:	2101      	movs	r1, #1
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f7ff fd81 	bl	8009990 <rshift>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3601      	adds	r6, #1
 8009e92:	42b3      	cmp	r3, r6
 8009e94:	f6ff aeda 	blt.w	8009c4c <__gethex+0x1ec>
 8009e98:	f04f 0801 	mov.w	r8, #1
 8009e9c:	e7c2      	b.n	8009e24 <__gethex+0x3c4>
 8009e9e:	f015 051f 	ands.w	r5, r5, #31
 8009ea2:	d0f9      	beq.n	8009e98 <__gethex+0x438>
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	f1c5 0520 	rsb	r5, r5, #32
 8009eaa:	441a      	add	r2, r3
 8009eac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009eb0:	f000 f9cc 	bl	800a24c <__hi0bits>
 8009eb4:	42a8      	cmp	r0, r5
 8009eb6:	dbe6      	blt.n	8009e86 <__gethex+0x426>
 8009eb8:	e7ee      	b.n	8009e98 <__gethex+0x438>
 8009eba:	bf00      	nop
 8009ebc:	0800b3d7 	.word	0x0800b3d7

08009ec0 <L_shift>:
 8009ec0:	f1c2 0208 	rsb	r2, r2, #8
 8009ec4:	0092      	lsls	r2, r2, #2
 8009ec6:	b570      	push	{r4, r5, r6, lr}
 8009ec8:	f1c2 0620 	rsb	r6, r2, #32
 8009ecc:	6843      	ldr	r3, [r0, #4]
 8009ece:	6804      	ldr	r4, [r0, #0]
 8009ed0:	fa03 f506 	lsl.w	r5, r3, r6
 8009ed4:	432c      	orrs	r4, r5
 8009ed6:	40d3      	lsrs	r3, r2
 8009ed8:	6004      	str	r4, [r0, #0]
 8009eda:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ede:	4288      	cmp	r0, r1
 8009ee0:	d3f4      	bcc.n	8009ecc <L_shift+0xc>
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <__match>:
 8009ee4:	b530      	push	{r4, r5, lr}
 8009ee6:	6803      	ldr	r3, [r0, #0]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eee:	b914      	cbnz	r4, 8009ef6 <__match+0x12>
 8009ef0:	6003      	str	r3, [r0, #0]
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	bd30      	pop	{r4, r5, pc}
 8009ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009efa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009efe:	2d19      	cmp	r5, #25
 8009f00:	bf98      	it	ls
 8009f02:	3220      	addls	r2, #32
 8009f04:	42a2      	cmp	r2, r4
 8009f06:	d0f0      	beq.n	8009eea <__match+0x6>
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e7f3      	b.n	8009ef4 <__match+0x10>

08009f0c <__hexnan>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	2500      	movs	r5, #0
 8009f12:	680b      	ldr	r3, [r1, #0]
 8009f14:	4682      	mov	sl, r0
 8009f16:	115e      	asrs	r6, r3, #5
 8009f18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f1c:	f013 031f 	ands.w	r3, r3, #31
 8009f20:	bf18      	it	ne
 8009f22:	3604      	addne	r6, #4
 8009f24:	1f37      	subs	r7, r6, #4
 8009f26:	4690      	mov	r8, r2
 8009f28:	46b9      	mov	r9, r7
 8009f2a:	463c      	mov	r4, r7
 8009f2c:	46ab      	mov	fp, r5
 8009f2e:	b087      	sub	sp, #28
 8009f30:	6801      	ldr	r1, [r0, #0]
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f38:	9502      	str	r5, [sp, #8]
 8009f3a:	784a      	ldrb	r2, [r1, #1]
 8009f3c:	1c4b      	adds	r3, r1, #1
 8009f3e:	9303      	str	r3, [sp, #12]
 8009f40:	b342      	cbz	r2, 8009f94 <__hexnan+0x88>
 8009f42:	4610      	mov	r0, r2
 8009f44:	9105      	str	r1, [sp, #20]
 8009f46:	9204      	str	r2, [sp, #16]
 8009f48:	f7ff fd75 	bl	8009a36 <__hexdig_fun>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d14f      	bne.n	8009ff0 <__hexnan+0xe4>
 8009f50:	9a04      	ldr	r2, [sp, #16]
 8009f52:	9905      	ldr	r1, [sp, #20]
 8009f54:	2a20      	cmp	r2, #32
 8009f56:	d818      	bhi.n	8009f8a <__hexnan+0x7e>
 8009f58:	9b02      	ldr	r3, [sp, #8]
 8009f5a:	459b      	cmp	fp, r3
 8009f5c:	dd13      	ble.n	8009f86 <__hexnan+0x7a>
 8009f5e:	454c      	cmp	r4, r9
 8009f60:	d206      	bcs.n	8009f70 <__hexnan+0x64>
 8009f62:	2d07      	cmp	r5, #7
 8009f64:	dc04      	bgt.n	8009f70 <__hexnan+0x64>
 8009f66:	462a      	mov	r2, r5
 8009f68:	4649      	mov	r1, r9
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff ffa8 	bl	8009ec0 <L_shift>
 8009f70:	4544      	cmp	r4, r8
 8009f72:	d950      	bls.n	800a016 <__hexnan+0x10a>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f1a4 0904 	sub.w	r9, r4, #4
 8009f7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f7e:	461d      	mov	r5, r3
 8009f80:	464c      	mov	r4, r9
 8009f82:	f8cd b008 	str.w	fp, [sp, #8]
 8009f86:	9903      	ldr	r1, [sp, #12]
 8009f88:	e7d7      	b.n	8009f3a <__hexnan+0x2e>
 8009f8a:	2a29      	cmp	r2, #41	; 0x29
 8009f8c:	d155      	bne.n	800a03a <__hexnan+0x12e>
 8009f8e:	3102      	adds	r1, #2
 8009f90:	f8ca 1000 	str.w	r1, [sl]
 8009f94:	f1bb 0f00 	cmp.w	fp, #0
 8009f98:	d04f      	beq.n	800a03a <__hexnan+0x12e>
 8009f9a:	454c      	cmp	r4, r9
 8009f9c:	d206      	bcs.n	8009fac <__hexnan+0xa0>
 8009f9e:	2d07      	cmp	r5, #7
 8009fa0:	dc04      	bgt.n	8009fac <__hexnan+0xa0>
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7ff ff8a 	bl	8009ec0 <L_shift>
 8009fac:	4544      	cmp	r4, r8
 8009fae:	d934      	bls.n	800a01a <__hexnan+0x10e>
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	f1a8 0204 	sub.w	r2, r8, #4
 8009fb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fba:	429f      	cmp	r7, r3
 8009fbc:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fc0:	d2f9      	bcs.n	8009fb6 <__hexnan+0xaa>
 8009fc2:	1b3b      	subs	r3, r7, r4
 8009fc4:	f023 0303 	bic.w	r3, r3, #3
 8009fc8:	3304      	adds	r3, #4
 8009fca:	3e03      	subs	r6, #3
 8009fcc:	3401      	adds	r4, #1
 8009fce:	42a6      	cmp	r6, r4
 8009fd0:	bf38      	it	cc
 8009fd2:	2304      	movcc	r3, #4
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4443      	add	r3, r8
 8009fd8:	f843 2b04 	str.w	r2, [r3], #4
 8009fdc:	429f      	cmp	r7, r3
 8009fde:	d2fb      	bcs.n	8009fd8 <__hexnan+0xcc>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	b91b      	cbnz	r3, 8009fec <__hexnan+0xe0>
 8009fe4:	4547      	cmp	r7, r8
 8009fe6:	d126      	bne.n	800a036 <__hexnan+0x12a>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	2005      	movs	r0, #5
 8009fee:	e025      	b.n	800a03c <__hexnan+0x130>
 8009ff0:	3501      	adds	r5, #1
 8009ff2:	2d08      	cmp	r5, #8
 8009ff4:	f10b 0b01 	add.w	fp, fp, #1
 8009ff8:	dd06      	ble.n	800a008 <__hexnan+0xfc>
 8009ffa:	4544      	cmp	r4, r8
 8009ffc:	d9c3      	bls.n	8009f86 <__hexnan+0x7a>
 8009ffe:	2300      	movs	r3, #0
 800a000:	2501      	movs	r5, #1
 800a002:	f844 3c04 	str.w	r3, [r4, #-4]
 800a006:	3c04      	subs	r4, #4
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	f000 000f 	and.w	r0, r0, #15
 800a00e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a012:	6020      	str	r0, [r4, #0]
 800a014:	e7b7      	b.n	8009f86 <__hexnan+0x7a>
 800a016:	2508      	movs	r5, #8
 800a018:	e7b5      	b.n	8009f86 <__hexnan+0x7a>
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0df      	beq.n	8009fe0 <__hexnan+0xd4>
 800a020:	f04f 32ff 	mov.w	r2, #4294967295
 800a024:	f1c3 0320 	rsb	r3, r3, #32
 800a028:	40da      	lsrs	r2, r3
 800a02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a02e:	4013      	ands	r3, r2
 800a030:	f846 3c04 	str.w	r3, [r6, #-4]
 800a034:	e7d4      	b.n	8009fe0 <__hexnan+0xd4>
 800a036:	3f04      	subs	r7, #4
 800a038:	e7d2      	b.n	8009fe0 <__hexnan+0xd4>
 800a03a:	2004      	movs	r0, #4
 800a03c:	b007      	add	sp, #28
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a042 <__ascii_mbtowc>:
 800a042:	b082      	sub	sp, #8
 800a044:	b901      	cbnz	r1, 800a048 <__ascii_mbtowc+0x6>
 800a046:	a901      	add	r1, sp, #4
 800a048:	b142      	cbz	r2, 800a05c <__ascii_mbtowc+0x1a>
 800a04a:	b14b      	cbz	r3, 800a060 <__ascii_mbtowc+0x1e>
 800a04c:	7813      	ldrb	r3, [r2, #0]
 800a04e:	600b      	str	r3, [r1, #0]
 800a050:	7812      	ldrb	r2, [r2, #0]
 800a052:	1e10      	subs	r0, r2, #0
 800a054:	bf18      	it	ne
 800a056:	2001      	movne	r0, #1
 800a058:	b002      	add	sp, #8
 800a05a:	4770      	bx	lr
 800a05c:	4610      	mov	r0, r2
 800a05e:	e7fb      	b.n	800a058 <__ascii_mbtowc+0x16>
 800a060:	f06f 0001 	mvn.w	r0, #1
 800a064:	e7f8      	b.n	800a058 <__ascii_mbtowc+0x16>
	...

0800a068 <_Balloc>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	69c6      	ldr	r6, [r0, #28]
 800a06c:	4604      	mov	r4, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	b976      	cbnz	r6, 800a090 <_Balloc+0x28>
 800a072:	2010      	movs	r0, #16
 800a074:	f7fc fd8e 	bl	8006b94 <malloc>
 800a078:	4602      	mov	r2, r0
 800a07a:	61e0      	str	r0, [r4, #28]
 800a07c:	b920      	cbnz	r0, 800a088 <_Balloc+0x20>
 800a07e:	216b      	movs	r1, #107	; 0x6b
 800a080:	4b17      	ldr	r3, [pc, #92]	; (800a0e0 <_Balloc+0x78>)
 800a082:	4818      	ldr	r0, [pc, #96]	; (800a0e4 <_Balloc+0x7c>)
 800a084:	f7fe fdae 	bl	8008be4 <__assert_func>
 800a088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a08c:	6006      	str	r6, [r0, #0]
 800a08e:	60c6      	str	r6, [r0, #12]
 800a090:	69e6      	ldr	r6, [r4, #28]
 800a092:	68f3      	ldr	r3, [r6, #12]
 800a094:	b183      	cbz	r3, 800a0b8 <_Balloc+0x50>
 800a096:	69e3      	ldr	r3, [r4, #28]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a09e:	b9b8      	cbnz	r0, 800a0d0 <_Balloc+0x68>
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0a6:	1d72      	adds	r2, r6, #5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	f000 ff0d 	bl	800aeca <_calloc_r>
 800a0b0:	b160      	cbz	r0, 800a0cc <_Balloc+0x64>
 800a0b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0b6:	e00e      	b.n	800a0d6 <_Balloc+0x6e>
 800a0b8:	2221      	movs	r2, #33	; 0x21
 800a0ba:	2104      	movs	r1, #4
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 ff04 	bl	800aeca <_calloc_r>
 800a0c2:	69e3      	ldr	r3, [r4, #28]
 800a0c4:	60f0      	str	r0, [r6, #12]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e4      	bne.n	800a096 <_Balloc+0x2e>
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	6802      	ldr	r2, [r0, #0]
 800a0d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0dc:	e7f7      	b.n	800a0ce <_Balloc+0x66>
 800a0de:	bf00      	nop
 800a0e0:	0800b2bd 	.word	0x0800b2bd
 800a0e4:	0800b448 	.word	0x0800b448

0800a0e8 <_Bfree>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	69c6      	ldr	r6, [r0, #28]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	b976      	cbnz	r6, 800a110 <_Bfree+0x28>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7fc fd4e 	bl	8006b94 <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	61e8      	str	r0, [r5, #28]
 800a0fc:	b920      	cbnz	r0, 800a108 <_Bfree+0x20>
 800a0fe:	218f      	movs	r1, #143	; 0x8f
 800a100:	4b08      	ldr	r3, [pc, #32]	; (800a124 <_Bfree+0x3c>)
 800a102:	4809      	ldr	r0, [pc, #36]	; (800a128 <_Bfree+0x40>)
 800a104:	f7fe fd6e 	bl	8008be4 <__assert_func>
 800a108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a10c:	6006      	str	r6, [r0, #0]
 800a10e:	60c6      	str	r6, [r0, #12]
 800a110:	b13c      	cbz	r4, 800a122 <_Bfree+0x3a>
 800a112:	69eb      	ldr	r3, [r5, #28]
 800a114:	6862      	ldr	r2, [r4, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a11c:	6021      	str	r1, [r4, #0]
 800a11e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	0800b2bd 	.word	0x0800b2bd
 800a128:	0800b448 	.word	0x0800b448

0800a12c <__multadd>:
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	4607      	mov	r7, r0
 800a132:	460c      	mov	r4, r1
 800a134:	461e      	mov	r6, r3
 800a136:	2000      	movs	r0, #0
 800a138:	690d      	ldr	r5, [r1, #16]
 800a13a:	f101 0c14 	add.w	ip, r1, #20
 800a13e:	f8dc 3000 	ldr.w	r3, [ip]
 800a142:	3001      	adds	r0, #1
 800a144:	b299      	uxth	r1, r3
 800a146:	fb02 6101 	mla	r1, r2, r1, r6
 800a14a:	0c1e      	lsrs	r6, r3, #16
 800a14c:	0c0b      	lsrs	r3, r1, #16
 800a14e:	fb02 3306 	mla	r3, r2, r6, r3
 800a152:	b289      	uxth	r1, r1
 800a154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a158:	4285      	cmp	r5, r0
 800a15a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a15e:	f84c 1b04 	str.w	r1, [ip], #4
 800a162:	dcec      	bgt.n	800a13e <__multadd+0x12>
 800a164:	b30e      	cbz	r6, 800a1aa <__multadd+0x7e>
 800a166:	68a3      	ldr	r3, [r4, #8]
 800a168:	42ab      	cmp	r3, r5
 800a16a:	dc19      	bgt.n	800a1a0 <__multadd+0x74>
 800a16c:	6861      	ldr	r1, [r4, #4]
 800a16e:	4638      	mov	r0, r7
 800a170:	3101      	adds	r1, #1
 800a172:	f7ff ff79 	bl	800a068 <_Balloc>
 800a176:	4680      	mov	r8, r0
 800a178:	b928      	cbnz	r0, 800a186 <__multadd+0x5a>
 800a17a:	4602      	mov	r2, r0
 800a17c:	21ba      	movs	r1, #186	; 0xba
 800a17e:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <__multadd+0x84>)
 800a180:	480c      	ldr	r0, [pc, #48]	; (800a1b4 <__multadd+0x88>)
 800a182:	f7fe fd2f 	bl	8008be4 <__assert_func>
 800a186:	6922      	ldr	r2, [r4, #16]
 800a188:	f104 010c 	add.w	r1, r4, #12
 800a18c:	3202      	adds	r2, #2
 800a18e:	0092      	lsls	r2, r2, #2
 800a190:	300c      	adds	r0, #12
 800a192:	f7fe fd0e 	bl	8008bb2 <memcpy>
 800a196:	4621      	mov	r1, r4
 800a198:	4638      	mov	r0, r7
 800a19a:	f7ff ffa5 	bl	800a0e8 <_Bfree>
 800a19e:	4644      	mov	r4, r8
 800a1a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	615e      	str	r6, [r3, #20]
 800a1a8:	6125      	str	r5, [r4, #16]
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b0:	0800b3d7 	.word	0x0800b3d7
 800a1b4:	0800b448 	.word	0x0800b448

0800a1b8 <__s2b>:
 800a1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1bc:	4615      	mov	r5, r2
 800a1be:	2209      	movs	r2, #9
 800a1c0:	461f      	mov	r7, r3
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	db09      	blt.n	800a1e8 <__s2b+0x30>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff ff47 	bl	800a068 <_Balloc>
 800a1da:	b940      	cbnz	r0, 800a1ee <__s2b+0x36>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	21d3      	movs	r1, #211	; 0xd3
 800a1e0:	4b18      	ldr	r3, [pc, #96]	; (800a244 <__s2b+0x8c>)
 800a1e2:	4819      	ldr	r0, [pc, #100]	; (800a248 <__s2b+0x90>)
 800a1e4:	f7fe fcfe 	bl	8008be4 <__assert_func>
 800a1e8:	0052      	lsls	r2, r2, #1
 800a1ea:	3101      	adds	r1, #1
 800a1ec:	e7f0      	b.n	800a1d0 <__s2b+0x18>
 800a1ee:	9b08      	ldr	r3, [sp, #32]
 800a1f0:	2d09      	cmp	r5, #9
 800a1f2:	6143      	str	r3, [r0, #20]
 800a1f4:	f04f 0301 	mov.w	r3, #1
 800a1f8:	6103      	str	r3, [r0, #16]
 800a1fa:	dd16      	ble.n	800a22a <__s2b+0x72>
 800a1fc:	f104 0909 	add.w	r9, r4, #9
 800a200:	46c8      	mov	r8, r9
 800a202:	442c      	add	r4, r5
 800a204:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a208:	4601      	mov	r1, r0
 800a20a:	220a      	movs	r2, #10
 800a20c:	4630      	mov	r0, r6
 800a20e:	3b30      	subs	r3, #48	; 0x30
 800a210:	f7ff ff8c 	bl	800a12c <__multadd>
 800a214:	45a0      	cmp	r8, r4
 800a216:	d1f5      	bne.n	800a204 <__s2b+0x4c>
 800a218:	f1a5 0408 	sub.w	r4, r5, #8
 800a21c:	444c      	add	r4, r9
 800a21e:	1b2d      	subs	r5, r5, r4
 800a220:	1963      	adds	r3, r4, r5
 800a222:	42bb      	cmp	r3, r7
 800a224:	db04      	blt.n	800a230 <__s2b+0x78>
 800a226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22a:	2509      	movs	r5, #9
 800a22c:	340a      	adds	r4, #10
 800a22e:	e7f6      	b.n	800a21e <__s2b+0x66>
 800a230:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a234:	4601      	mov	r1, r0
 800a236:	220a      	movs	r2, #10
 800a238:	4630      	mov	r0, r6
 800a23a:	3b30      	subs	r3, #48	; 0x30
 800a23c:	f7ff ff76 	bl	800a12c <__multadd>
 800a240:	e7ee      	b.n	800a220 <__s2b+0x68>
 800a242:	bf00      	nop
 800a244:	0800b3d7 	.word	0x0800b3d7
 800a248:	0800b448 	.word	0x0800b448

0800a24c <__hi0bits>:
 800a24c:	0c02      	lsrs	r2, r0, #16
 800a24e:	0412      	lsls	r2, r2, #16
 800a250:	4603      	mov	r3, r0
 800a252:	b9ca      	cbnz	r2, 800a288 <__hi0bits+0x3c>
 800a254:	0403      	lsls	r3, r0, #16
 800a256:	2010      	movs	r0, #16
 800a258:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a25c:	bf04      	itt	eq
 800a25e:	021b      	lsleq	r3, r3, #8
 800a260:	3008      	addeq	r0, #8
 800a262:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a266:	bf04      	itt	eq
 800a268:	011b      	lsleq	r3, r3, #4
 800a26a:	3004      	addeq	r0, #4
 800a26c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a270:	bf04      	itt	eq
 800a272:	009b      	lsleq	r3, r3, #2
 800a274:	3002      	addeq	r0, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	db05      	blt.n	800a286 <__hi0bits+0x3a>
 800a27a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a27e:	f100 0001 	add.w	r0, r0, #1
 800a282:	bf08      	it	eq
 800a284:	2020      	moveq	r0, #32
 800a286:	4770      	bx	lr
 800a288:	2000      	movs	r0, #0
 800a28a:	e7e5      	b.n	800a258 <__hi0bits+0xc>

0800a28c <__lo0bits>:
 800a28c:	6803      	ldr	r3, [r0, #0]
 800a28e:	4602      	mov	r2, r0
 800a290:	f013 0007 	ands.w	r0, r3, #7
 800a294:	d00b      	beq.n	800a2ae <__lo0bits+0x22>
 800a296:	07d9      	lsls	r1, r3, #31
 800a298:	d421      	bmi.n	800a2de <__lo0bits+0x52>
 800a29a:	0798      	lsls	r0, r3, #30
 800a29c:	bf49      	itett	mi
 800a29e:	085b      	lsrmi	r3, r3, #1
 800a2a0:	089b      	lsrpl	r3, r3, #2
 800a2a2:	2001      	movmi	r0, #1
 800a2a4:	6013      	strmi	r3, [r2, #0]
 800a2a6:	bf5c      	itt	pl
 800a2a8:	2002      	movpl	r0, #2
 800a2aa:	6013      	strpl	r3, [r2, #0]
 800a2ac:	4770      	bx	lr
 800a2ae:	b299      	uxth	r1, r3
 800a2b0:	b909      	cbnz	r1, 800a2b6 <__lo0bits+0x2a>
 800a2b2:	2010      	movs	r0, #16
 800a2b4:	0c1b      	lsrs	r3, r3, #16
 800a2b6:	b2d9      	uxtb	r1, r3
 800a2b8:	b909      	cbnz	r1, 800a2be <__lo0bits+0x32>
 800a2ba:	3008      	adds	r0, #8
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	0719      	lsls	r1, r3, #28
 800a2c0:	bf04      	itt	eq
 800a2c2:	091b      	lsreq	r3, r3, #4
 800a2c4:	3004      	addeq	r0, #4
 800a2c6:	0799      	lsls	r1, r3, #30
 800a2c8:	bf04      	itt	eq
 800a2ca:	089b      	lsreq	r3, r3, #2
 800a2cc:	3002      	addeq	r0, #2
 800a2ce:	07d9      	lsls	r1, r3, #31
 800a2d0:	d403      	bmi.n	800a2da <__lo0bits+0x4e>
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	f100 0001 	add.w	r0, r0, #1
 800a2d8:	d003      	beq.n	800a2e2 <__lo0bits+0x56>
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	4770      	bx	lr
 800a2de:	2000      	movs	r0, #0
 800a2e0:	4770      	bx	lr
 800a2e2:	2020      	movs	r0, #32
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <__i2b>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	f7ff febb 	bl	800a068 <_Balloc>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	b928      	cbnz	r0, 800a302 <__i2b+0x1a>
 800a2f6:	f240 1145 	movw	r1, #325	; 0x145
 800a2fa:	4b04      	ldr	r3, [pc, #16]	; (800a30c <__i2b+0x24>)
 800a2fc:	4804      	ldr	r0, [pc, #16]	; (800a310 <__i2b+0x28>)
 800a2fe:	f7fe fc71 	bl	8008be4 <__assert_func>
 800a302:	2301      	movs	r3, #1
 800a304:	6144      	str	r4, [r0, #20]
 800a306:	6103      	str	r3, [r0, #16]
 800a308:	bd10      	pop	{r4, pc}
 800a30a:	bf00      	nop
 800a30c:	0800b3d7 	.word	0x0800b3d7
 800a310:	0800b448 	.word	0x0800b448

0800a314 <__multiply>:
 800a314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a318:	4691      	mov	r9, r2
 800a31a:	690a      	ldr	r2, [r1, #16]
 800a31c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a320:	460c      	mov	r4, r1
 800a322:	429a      	cmp	r2, r3
 800a324:	bfbe      	ittt	lt
 800a326:	460b      	movlt	r3, r1
 800a328:	464c      	movlt	r4, r9
 800a32a:	4699      	movlt	r9, r3
 800a32c:	6927      	ldr	r7, [r4, #16]
 800a32e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a332:	68a3      	ldr	r3, [r4, #8]
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	eb07 060a 	add.w	r6, r7, sl
 800a33a:	42b3      	cmp	r3, r6
 800a33c:	b085      	sub	sp, #20
 800a33e:	bfb8      	it	lt
 800a340:	3101      	addlt	r1, #1
 800a342:	f7ff fe91 	bl	800a068 <_Balloc>
 800a346:	b930      	cbnz	r0, 800a356 <__multiply+0x42>
 800a348:	4602      	mov	r2, r0
 800a34a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a34e:	4b43      	ldr	r3, [pc, #268]	; (800a45c <__multiply+0x148>)
 800a350:	4843      	ldr	r0, [pc, #268]	; (800a460 <__multiply+0x14c>)
 800a352:	f7fe fc47 	bl	8008be4 <__assert_func>
 800a356:	f100 0514 	add.w	r5, r0, #20
 800a35a:	462b      	mov	r3, r5
 800a35c:	2200      	movs	r2, #0
 800a35e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a362:	4543      	cmp	r3, r8
 800a364:	d321      	bcc.n	800a3aa <__multiply+0x96>
 800a366:	f104 0314 	add.w	r3, r4, #20
 800a36a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a36e:	f109 0314 	add.w	r3, r9, #20
 800a372:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a376:	9202      	str	r2, [sp, #8]
 800a378:	1b3a      	subs	r2, r7, r4
 800a37a:	3a15      	subs	r2, #21
 800a37c:	f022 0203 	bic.w	r2, r2, #3
 800a380:	3204      	adds	r2, #4
 800a382:	f104 0115 	add.w	r1, r4, #21
 800a386:	428f      	cmp	r7, r1
 800a388:	bf38      	it	cc
 800a38a:	2204      	movcc	r2, #4
 800a38c:	9201      	str	r2, [sp, #4]
 800a38e:	9a02      	ldr	r2, [sp, #8]
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	429a      	cmp	r2, r3
 800a394:	d80c      	bhi.n	800a3b0 <__multiply+0x9c>
 800a396:	2e00      	cmp	r6, #0
 800a398:	dd03      	ble.n	800a3a2 <__multiply+0x8e>
 800a39a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d05a      	beq.n	800a458 <__multiply+0x144>
 800a3a2:	6106      	str	r6, [r0, #16]
 800a3a4:	b005      	add	sp, #20
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	f843 2b04 	str.w	r2, [r3], #4
 800a3ae:	e7d8      	b.n	800a362 <__multiply+0x4e>
 800a3b0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3b4:	f1ba 0f00 	cmp.w	sl, #0
 800a3b8:	d023      	beq.n	800a402 <__multiply+0xee>
 800a3ba:	46a9      	mov	r9, r5
 800a3bc:	f04f 0c00 	mov.w	ip, #0
 800a3c0:	f104 0e14 	add.w	lr, r4, #20
 800a3c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3c8:	f8d9 1000 	ldr.w	r1, [r9]
 800a3cc:	fa1f fb82 	uxth.w	fp, r2
 800a3d0:	b289      	uxth	r1, r1
 800a3d2:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3d6:	4461      	add	r1, ip
 800a3d8:	f8d9 c000 	ldr.w	ip, [r9]
 800a3dc:	0c12      	lsrs	r2, r2, #16
 800a3de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a3e2:	fb0a c202 	mla	r2, sl, r2, ip
 800a3e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3ea:	b289      	uxth	r1, r1
 800a3ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3f0:	4577      	cmp	r7, lr
 800a3f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3f6:	f849 1b04 	str.w	r1, [r9], #4
 800a3fa:	d8e3      	bhi.n	800a3c4 <__multiply+0xb0>
 800a3fc:	9a01      	ldr	r2, [sp, #4]
 800a3fe:	f845 c002 	str.w	ip, [r5, r2]
 800a402:	9a03      	ldr	r2, [sp, #12]
 800a404:	3304      	adds	r3, #4
 800a406:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a40a:	f1b9 0f00 	cmp.w	r9, #0
 800a40e:	d021      	beq.n	800a454 <__multiply+0x140>
 800a410:	46ae      	mov	lr, r5
 800a412:	f04f 0a00 	mov.w	sl, #0
 800a416:	6829      	ldr	r1, [r5, #0]
 800a418:	f104 0c14 	add.w	ip, r4, #20
 800a41c:	f8bc b000 	ldrh.w	fp, [ip]
 800a420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a424:	b289      	uxth	r1, r1
 800a426:	fb09 220b 	mla	r2, r9, fp, r2
 800a42a:	4452      	add	r2, sl
 800a42c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a430:	f84e 1b04 	str.w	r1, [lr], #4
 800a434:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a438:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a43c:	f8be 1000 	ldrh.w	r1, [lr]
 800a440:	4567      	cmp	r7, ip
 800a442:	fb09 110a 	mla	r1, r9, sl, r1
 800a446:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a44a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a44e:	d8e5      	bhi.n	800a41c <__multiply+0x108>
 800a450:	9a01      	ldr	r2, [sp, #4]
 800a452:	50a9      	str	r1, [r5, r2]
 800a454:	3504      	adds	r5, #4
 800a456:	e79a      	b.n	800a38e <__multiply+0x7a>
 800a458:	3e01      	subs	r6, #1
 800a45a:	e79c      	b.n	800a396 <__multiply+0x82>
 800a45c:	0800b3d7 	.word	0x0800b3d7
 800a460:	0800b448 	.word	0x0800b448

0800a464 <__pow5mult>:
 800a464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a468:	4615      	mov	r5, r2
 800a46a:	f012 0203 	ands.w	r2, r2, #3
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	d007      	beq.n	800a484 <__pow5mult+0x20>
 800a474:	4c25      	ldr	r4, [pc, #148]	; (800a50c <__pow5mult+0xa8>)
 800a476:	3a01      	subs	r2, #1
 800a478:	2300      	movs	r3, #0
 800a47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a47e:	f7ff fe55 	bl	800a12c <__multadd>
 800a482:	4607      	mov	r7, r0
 800a484:	10ad      	asrs	r5, r5, #2
 800a486:	d03d      	beq.n	800a504 <__pow5mult+0xa0>
 800a488:	69f4      	ldr	r4, [r6, #28]
 800a48a:	b97c      	cbnz	r4, 800a4ac <__pow5mult+0x48>
 800a48c:	2010      	movs	r0, #16
 800a48e:	f7fc fb81 	bl	8006b94 <malloc>
 800a492:	4602      	mov	r2, r0
 800a494:	61f0      	str	r0, [r6, #28]
 800a496:	b928      	cbnz	r0, 800a4a4 <__pow5mult+0x40>
 800a498:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a49c:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <__pow5mult+0xac>)
 800a49e:	481d      	ldr	r0, [pc, #116]	; (800a514 <__pow5mult+0xb0>)
 800a4a0:	f7fe fba0 	bl	8008be4 <__assert_func>
 800a4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4a8:	6004      	str	r4, [r0, #0]
 800a4aa:	60c4      	str	r4, [r0, #12]
 800a4ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4b4:	b94c      	cbnz	r4, 800a4ca <__pow5mult+0x66>
 800a4b6:	f240 2171 	movw	r1, #625	; 0x271
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7ff ff14 	bl	800a2e8 <__i2b>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4c8:	6003      	str	r3, [r0, #0]
 800a4ca:	f04f 0900 	mov.w	r9, #0
 800a4ce:	07eb      	lsls	r3, r5, #31
 800a4d0:	d50a      	bpl.n	800a4e8 <__pow5mult+0x84>
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7ff ff1c 	bl	800a314 <__multiply>
 800a4dc:	4680      	mov	r8, r0
 800a4de:	4639      	mov	r1, r7
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff fe01 	bl	800a0e8 <_Bfree>
 800a4e6:	4647      	mov	r7, r8
 800a4e8:	106d      	asrs	r5, r5, #1
 800a4ea:	d00b      	beq.n	800a504 <__pow5mult+0xa0>
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	b938      	cbnz	r0, 800a500 <__pow5mult+0x9c>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff ff0d 	bl	800a314 <__multiply>
 800a4fa:	6020      	str	r0, [r4, #0]
 800a4fc:	f8c0 9000 	str.w	r9, [r0]
 800a500:	4604      	mov	r4, r0
 800a502:	e7e4      	b.n	800a4ce <__pow5mult+0x6a>
 800a504:	4638      	mov	r0, r7
 800a506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a50a:	bf00      	nop
 800a50c:	0800b598 	.word	0x0800b598
 800a510:	0800b2bd 	.word	0x0800b2bd
 800a514:	0800b448 	.word	0x0800b448

0800a518 <__lshift>:
 800a518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	460c      	mov	r4, r1
 800a51e:	4607      	mov	r7, r0
 800a520:	4691      	mov	r9, r2
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	6849      	ldr	r1, [r1, #4]
 800a526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a530:	f108 0601 	add.w	r6, r8, #1
 800a534:	42b3      	cmp	r3, r6
 800a536:	db0b      	blt.n	800a550 <__lshift+0x38>
 800a538:	4638      	mov	r0, r7
 800a53a:	f7ff fd95 	bl	800a068 <_Balloc>
 800a53e:	4605      	mov	r5, r0
 800a540:	b948      	cbnz	r0, 800a556 <__lshift+0x3e>
 800a542:	4602      	mov	r2, r0
 800a544:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a548:	4b27      	ldr	r3, [pc, #156]	; (800a5e8 <__lshift+0xd0>)
 800a54a:	4828      	ldr	r0, [pc, #160]	; (800a5ec <__lshift+0xd4>)
 800a54c:	f7fe fb4a 	bl	8008be4 <__assert_func>
 800a550:	3101      	adds	r1, #1
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	e7ee      	b.n	800a534 <__lshift+0x1c>
 800a556:	2300      	movs	r3, #0
 800a558:	f100 0114 	add.w	r1, r0, #20
 800a55c:	f100 0210 	add.w	r2, r0, #16
 800a560:	4618      	mov	r0, r3
 800a562:	4553      	cmp	r3, sl
 800a564:	db33      	blt.n	800a5ce <__lshift+0xb6>
 800a566:	6920      	ldr	r0, [r4, #16]
 800a568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a56c:	f104 0314 	add.w	r3, r4, #20
 800a570:	f019 091f 	ands.w	r9, r9, #31
 800a574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a57c:	d02b      	beq.n	800a5d6 <__lshift+0xbe>
 800a57e:	468a      	mov	sl, r1
 800a580:	2200      	movs	r2, #0
 800a582:	f1c9 0e20 	rsb	lr, r9, #32
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	fa00 f009 	lsl.w	r0, r0, r9
 800a58c:	4310      	orrs	r0, r2
 800a58e:	f84a 0b04 	str.w	r0, [sl], #4
 800a592:	f853 2b04 	ldr.w	r2, [r3], #4
 800a596:	459c      	cmp	ip, r3
 800a598:	fa22 f20e 	lsr.w	r2, r2, lr
 800a59c:	d8f3      	bhi.n	800a586 <__lshift+0x6e>
 800a59e:	ebac 0304 	sub.w	r3, ip, r4
 800a5a2:	3b15      	subs	r3, #21
 800a5a4:	f023 0303 	bic.w	r3, r3, #3
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	f104 0015 	add.w	r0, r4, #21
 800a5ae:	4584      	cmp	ip, r0
 800a5b0:	bf38      	it	cc
 800a5b2:	2304      	movcc	r3, #4
 800a5b4:	50ca      	str	r2, [r1, r3]
 800a5b6:	b10a      	cbz	r2, 800a5bc <__lshift+0xa4>
 800a5b8:	f108 0602 	add.w	r6, r8, #2
 800a5bc:	3e01      	subs	r6, #1
 800a5be:	4638      	mov	r0, r7
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	612e      	str	r6, [r5, #16]
 800a5c4:	f7ff fd90 	bl	800a0e8 <_Bfree>
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	e7c5      	b.n	800a562 <__lshift+0x4a>
 800a5d6:	3904      	subs	r1, #4
 800a5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5dc:	459c      	cmp	ip, r3
 800a5de:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5e2:	d8f9      	bhi.n	800a5d8 <__lshift+0xc0>
 800a5e4:	e7ea      	b.n	800a5bc <__lshift+0xa4>
 800a5e6:	bf00      	nop
 800a5e8:	0800b3d7 	.word	0x0800b3d7
 800a5ec:	0800b448 	.word	0x0800b448

0800a5f0 <__mcmp>:
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	690a      	ldr	r2, [r1, #16]
 800a5f4:	6900      	ldr	r0, [r0, #16]
 800a5f6:	b530      	push	{r4, r5, lr}
 800a5f8:	1a80      	subs	r0, r0, r2
 800a5fa:	d10d      	bne.n	800a618 <__mcmp+0x28>
 800a5fc:	3314      	adds	r3, #20
 800a5fe:	3114      	adds	r1, #20
 800a600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a60c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a610:	4295      	cmp	r5, r2
 800a612:	d002      	beq.n	800a61a <__mcmp+0x2a>
 800a614:	d304      	bcc.n	800a620 <__mcmp+0x30>
 800a616:	2001      	movs	r0, #1
 800a618:	bd30      	pop	{r4, r5, pc}
 800a61a:	42a3      	cmp	r3, r4
 800a61c:	d3f4      	bcc.n	800a608 <__mcmp+0x18>
 800a61e:	e7fb      	b.n	800a618 <__mcmp+0x28>
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	e7f8      	b.n	800a618 <__mcmp+0x28>
	...

0800a628 <__mdiff>:
 800a628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	460d      	mov	r5, r1
 800a62e:	4607      	mov	r7, r0
 800a630:	4611      	mov	r1, r2
 800a632:	4628      	mov	r0, r5
 800a634:	4614      	mov	r4, r2
 800a636:	f7ff ffdb 	bl	800a5f0 <__mcmp>
 800a63a:	1e06      	subs	r6, r0, #0
 800a63c:	d111      	bne.n	800a662 <__mdiff+0x3a>
 800a63e:	4631      	mov	r1, r6
 800a640:	4638      	mov	r0, r7
 800a642:	f7ff fd11 	bl	800a068 <_Balloc>
 800a646:	4602      	mov	r2, r0
 800a648:	b928      	cbnz	r0, 800a656 <__mdiff+0x2e>
 800a64a:	f240 2137 	movw	r1, #567	; 0x237
 800a64e:	4b3a      	ldr	r3, [pc, #232]	; (800a738 <__mdiff+0x110>)
 800a650:	483a      	ldr	r0, [pc, #232]	; (800a73c <__mdiff+0x114>)
 800a652:	f7fe fac7 	bl	8008be4 <__assert_func>
 800a656:	2301      	movs	r3, #1
 800a658:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a65c:	4610      	mov	r0, r2
 800a65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a662:	bfa4      	itt	ge
 800a664:	4623      	movge	r3, r4
 800a666:	462c      	movge	r4, r5
 800a668:	4638      	mov	r0, r7
 800a66a:	6861      	ldr	r1, [r4, #4]
 800a66c:	bfa6      	itte	ge
 800a66e:	461d      	movge	r5, r3
 800a670:	2600      	movge	r6, #0
 800a672:	2601      	movlt	r6, #1
 800a674:	f7ff fcf8 	bl	800a068 <_Balloc>
 800a678:	4602      	mov	r2, r0
 800a67a:	b918      	cbnz	r0, 800a684 <__mdiff+0x5c>
 800a67c:	f240 2145 	movw	r1, #581	; 0x245
 800a680:	4b2d      	ldr	r3, [pc, #180]	; (800a738 <__mdiff+0x110>)
 800a682:	e7e5      	b.n	800a650 <__mdiff+0x28>
 800a684:	f102 0814 	add.w	r8, r2, #20
 800a688:	46c2      	mov	sl, r8
 800a68a:	f04f 0c00 	mov.w	ip, #0
 800a68e:	6927      	ldr	r7, [r4, #16]
 800a690:	60c6      	str	r6, [r0, #12]
 800a692:	692e      	ldr	r6, [r5, #16]
 800a694:	f104 0014 	add.w	r0, r4, #20
 800a698:	f105 0914 	add.w	r9, r5, #20
 800a69c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a6a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6a4:	3410      	adds	r4, #16
 800a6a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a6aa:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6ae:	fa1f f18b 	uxth.w	r1, fp
 800a6b2:	4461      	add	r1, ip
 800a6b4:	fa1f fc83 	uxth.w	ip, r3
 800a6b8:	0c1b      	lsrs	r3, r3, #16
 800a6ba:	eba1 010c 	sub.w	r1, r1, ip
 800a6be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a6c6:	b289      	uxth	r1, r1
 800a6c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a6cc:	454e      	cmp	r6, r9
 800a6ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a6d2:	f84a 1b04 	str.w	r1, [sl], #4
 800a6d6:	d8e6      	bhi.n	800a6a6 <__mdiff+0x7e>
 800a6d8:	1b73      	subs	r3, r6, r5
 800a6da:	3b15      	subs	r3, #21
 800a6dc:	f023 0303 	bic.w	r3, r3, #3
 800a6e0:	3515      	adds	r5, #21
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	42ae      	cmp	r6, r5
 800a6e6:	bf38      	it	cc
 800a6e8:	2304      	movcc	r3, #4
 800a6ea:	4418      	add	r0, r3
 800a6ec:	4443      	add	r3, r8
 800a6ee:	461e      	mov	r6, r3
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	4575      	cmp	r5, lr
 800a6f4:	d30e      	bcc.n	800a714 <__mdiff+0xec>
 800a6f6:	f10e 0103 	add.w	r1, lr, #3
 800a6fa:	1a09      	subs	r1, r1, r0
 800a6fc:	f021 0103 	bic.w	r1, r1, #3
 800a700:	3803      	subs	r0, #3
 800a702:	4586      	cmp	lr, r0
 800a704:	bf38      	it	cc
 800a706:	2100      	movcc	r1, #0
 800a708:	440b      	add	r3, r1
 800a70a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a70e:	b189      	cbz	r1, 800a734 <__mdiff+0x10c>
 800a710:	6117      	str	r7, [r2, #16]
 800a712:	e7a3      	b.n	800a65c <__mdiff+0x34>
 800a714:	f855 8b04 	ldr.w	r8, [r5], #4
 800a718:	fa1f f188 	uxth.w	r1, r8
 800a71c:	4461      	add	r1, ip
 800a71e:	140c      	asrs	r4, r1, #16
 800a720:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a724:	b289      	uxth	r1, r1
 800a726:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a72a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a72e:	f846 1b04 	str.w	r1, [r6], #4
 800a732:	e7de      	b.n	800a6f2 <__mdiff+0xca>
 800a734:	3f01      	subs	r7, #1
 800a736:	e7e8      	b.n	800a70a <__mdiff+0xe2>
 800a738:	0800b3d7 	.word	0x0800b3d7
 800a73c:	0800b448 	.word	0x0800b448

0800a740 <__ulp>:
 800a740:	4b0e      	ldr	r3, [pc, #56]	; (800a77c <__ulp+0x3c>)
 800a742:	400b      	ands	r3, r1
 800a744:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	dc08      	bgt.n	800a75e <__ulp+0x1e>
 800a74c:	425b      	negs	r3, r3
 800a74e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a752:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a756:	da04      	bge.n	800a762 <__ulp+0x22>
 800a758:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a75c:	4113      	asrs	r3, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	e008      	b.n	800a774 <__ulp+0x34>
 800a762:	f1a2 0314 	sub.w	r3, r2, #20
 800a766:	2b1e      	cmp	r3, #30
 800a768:	bfd6      	itet	le
 800a76a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a76e:	2201      	movgt	r2, #1
 800a770:	40da      	lsrle	r2, r3
 800a772:	2300      	movs	r3, #0
 800a774:	4619      	mov	r1, r3
 800a776:	4610      	mov	r0, r2
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	7ff00000 	.word	0x7ff00000

0800a780 <__b2d>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	6905      	ldr	r5, [r0, #16]
 800a784:	f100 0714 	add.w	r7, r0, #20
 800a788:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a78c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a790:	1f2e      	subs	r6, r5, #4
 800a792:	4620      	mov	r0, r4
 800a794:	f7ff fd5a 	bl	800a24c <__hi0bits>
 800a798:	f1c0 0220 	rsb	r2, r0, #32
 800a79c:	280a      	cmp	r0, #10
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a80c <__b2d+0x8c>
 800a7a4:	600a      	str	r2, [r1, #0]
 800a7a6:	dc12      	bgt.n	800a7ce <__b2d+0x4e>
 800a7a8:	f1c0 0e0b 	rsb	lr, r0, #11
 800a7ac:	fa24 f20e 	lsr.w	r2, r4, lr
 800a7b0:	42b7      	cmp	r7, r6
 800a7b2:	ea42 010c 	orr.w	r1, r2, ip
 800a7b6:	bf2c      	ite	cs
 800a7b8:	2200      	movcs	r2, #0
 800a7ba:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a7be:	3315      	adds	r3, #21
 800a7c0:	fa04 f303 	lsl.w	r3, r4, r3
 800a7c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ce:	42b7      	cmp	r7, r6
 800a7d0:	bf2e      	itee	cs
 800a7d2:	2200      	movcs	r2, #0
 800a7d4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a7d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7dc:	3b0b      	subs	r3, #11
 800a7de:	d012      	beq.n	800a806 <__b2d+0x86>
 800a7e0:	f1c3 0520 	rsb	r5, r3, #32
 800a7e4:	fa22 f105 	lsr.w	r1, r2, r5
 800a7e8:	409c      	lsls	r4, r3
 800a7ea:	430c      	orrs	r4, r1
 800a7ec:	42be      	cmp	r6, r7
 800a7ee:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a7f2:	bf94      	ite	ls
 800a7f4:	2400      	movls	r4, #0
 800a7f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7fa:	409a      	lsls	r2, r3
 800a7fc:	40ec      	lsrs	r4, r5
 800a7fe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a802:	4322      	orrs	r2, r4
 800a804:	e7e1      	b.n	800a7ca <__b2d+0x4a>
 800a806:	ea44 010c 	orr.w	r1, r4, ip
 800a80a:	e7de      	b.n	800a7ca <__b2d+0x4a>
 800a80c:	3ff00000 	.word	0x3ff00000

0800a810 <__d2b>:
 800a810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a812:	2101      	movs	r1, #1
 800a814:	4617      	mov	r7, r2
 800a816:	461c      	mov	r4, r3
 800a818:	9e08      	ldr	r6, [sp, #32]
 800a81a:	f7ff fc25 	bl	800a068 <_Balloc>
 800a81e:	4605      	mov	r5, r0
 800a820:	b930      	cbnz	r0, 800a830 <__d2b+0x20>
 800a822:	4602      	mov	r2, r0
 800a824:	f240 310f 	movw	r1, #783	; 0x30f
 800a828:	4b22      	ldr	r3, [pc, #136]	; (800a8b4 <__d2b+0xa4>)
 800a82a:	4823      	ldr	r0, [pc, #140]	; (800a8b8 <__d2b+0xa8>)
 800a82c:	f7fe f9da 	bl	8008be4 <__assert_func>
 800a830:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a834:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a838:	bb24      	cbnz	r4, 800a884 <__d2b+0x74>
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	d026      	beq.n	800a88e <__d2b+0x7e>
 800a840:	4668      	mov	r0, sp
 800a842:	9700      	str	r7, [sp, #0]
 800a844:	f7ff fd22 	bl	800a28c <__lo0bits>
 800a848:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a84c:	b1e8      	cbz	r0, 800a88a <__d2b+0x7a>
 800a84e:	f1c0 0320 	rsb	r3, r0, #32
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
 800a856:	430b      	orrs	r3, r1
 800a858:	40c2      	lsrs	r2, r0
 800a85a:	616b      	str	r3, [r5, #20]
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf14      	ite	ne
 800a864:	2102      	movne	r1, #2
 800a866:	2101      	moveq	r1, #1
 800a868:	61ab      	str	r3, [r5, #24]
 800a86a:	6129      	str	r1, [r5, #16]
 800a86c:	b1bc      	cbz	r4, 800a89e <__d2b+0x8e>
 800a86e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a872:	4404      	add	r4, r0
 800a874:	6034      	str	r4, [r6, #0]
 800a876:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87c:	6018      	str	r0, [r3, #0]
 800a87e:	4628      	mov	r0, r5
 800a880:	b003      	add	sp, #12
 800a882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a888:	e7d7      	b.n	800a83a <__d2b+0x2a>
 800a88a:	6169      	str	r1, [r5, #20]
 800a88c:	e7e7      	b.n	800a85e <__d2b+0x4e>
 800a88e:	a801      	add	r0, sp, #4
 800a890:	f7ff fcfc 	bl	800a28c <__lo0bits>
 800a894:	9b01      	ldr	r3, [sp, #4]
 800a896:	2101      	movs	r1, #1
 800a898:	616b      	str	r3, [r5, #20]
 800a89a:	3020      	adds	r0, #32
 800a89c:	e7e5      	b.n	800a86a <__d2b+0x5a>
 800a89e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8a2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a8a6:	6030      	str	r0, [r6, #0]
 800a8a8:	6918      	ldr	r0, [r3, #16]
 800a8aa:	f7ff fccf 	bl	800a24c <__hi0bits>
 800a8ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a8b2:	e7e2      	b.n	800a87a <__d2b+0x6a>
 800a8b4:	0800b3d7 	.word	0x0800b3d7
 800a8b8:	0800b448 	.word	0x0800b448

0800a8bc <__ratio>:
 800a8bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	4688      	mov	r8, r1
 800a8c2:	4669      	mov	r1, sp
 800a8c4:	4681      	mov	r9, r0
 800a8c6:	f7ff ff5b 	bl	800a780 <__b2d>
 800a8ca:	460f      	mov	r7, r1
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	a901      	add	r1, sp, #4
 800a8d4:	f7ff ff54 	bl	800a780 <__b2d>
 800a8d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8e0:	468b      	mov	fp, r1
 800a8e2:	eba3 0c02 	sub.w	ip, r3, r2
 800a8e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfd5      	itete	le
 800a8f4:	460a      	movle	r2, r1
 800a8f6:	462a      	movgt	r2, r5
 800a8f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8fc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a900:	bfd8      	it	le
 800a902:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a906:	465b      	mov	r3, fp
 800a908:	4602      	mov	r2, r0
 800a90a:	4639      	mov	r1, r7
 800a90c:	4620      	mov	r0, r4
 800a90e:	f7f5 ff17 	bl	8000740 <__aeabi_ddiv>
 800a912:	b003      	add	sp, #12
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a918 <__copybits>:
 800a918:	3901      	subs	r1, #1
 800a91a:	b570      	push	{r4, r5, r6, lr}
 800a91c:	1149      	asrs	r1, r1, #5
 800a91e:	6914      	ldr	r4, [r2, #16]
 800a920:	3101      	adds	r1, #1
 800a922:	f102 0314 	add.w	r3, r2, #20
 800a926:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a92a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a92e:	1f05      	subs	r5, r0, #4
 800a930:	42a3      	cmp	r3, r4
 800a932:	d30c      	bcc.n	800a94e <__copybits+0x36>
 800a934:	1aa3      	subs	r3, r4, r2
 800a936:	3b11      	subs	r3, #17
 800a938:	f023 0303 	bic.w	r3, r3, #3
 800a93c:	3211      	adds	r2, #17
 800a93e:	42a2      	cmp	r2, r4
 800a940:	bf88      	it	hi
 800a942:	2300      	movhi	r3, #0
 800a944:	4418      	add	r0, r3
 800a946:	2300      	movs	r3, #0
 800a948:	4288      	cmp	r0, r1
 800a94a:	d305      	bcc.n	800a958 <__copybits+0x40>
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
 800a94e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a952:	f845 6f04 	str.w	r6, [r5, #4]!
 800a956:	e7eb      	b.n	800a930 <__copybits+0x18>
 800a958:	f840 3b04 	str.w	r3, [r0], #4
 800a95c:	e7f4      	b.n	800a948 <__copybits+0x30>

0800a95e <__any_on>:
 800a95e:	f100 0214 	add.w	r2, r0, #20
 800a962:	6900      	ldr	r0, [r0, #16]
 800a964:	114b      	asrs	r3, r1, #5
 800a966:	4298      	cmp	r0, r3
 800a968:	b510      	push	{r4, lr}
 800a96a:	db11      	blt.n	800a990 <__any_on+0x32>
 800a96c:	dd0a      	ble.n	800a984 <__any_on+0x26>
 800a96e:	f011 011f 	ands.w	r1, r1, #31
 800a972:	d007      	beq.n	800a984 <__any_on+0x26>
 800a974:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a978:	fa24 f001 	lsr.w	r0, r4, r1
 800a97c:	fa00 f101 	lsl.w	r1, r0, r1
 800a980:	428c      	cmp	r4, r1
 800a982:	d10b      	bne.n	800a99c <__any_on+0x3e>
 800a984:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a988:	4293      	cmp	r3, r2
 800a98a:	d803      	bhi.n	800a994 <__any_on+0x36>
 800a98c:	2000      	movs	r0, #0
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	4603      	mov	r3, r0
 800a992:	e7f7      	b.n	800a984 <__any_on+0x26>
 800a994:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a998:	2900      	cmp	r1, #0
 800a99a:	d0f5      	beq.n	800a988 <__any_on+0x2a>
 800a99c:	2001      	movs	r0, #1
 800a99e:	e7f6      	b.n	800a98e <__any_on+0x30>

0800a9a0 <__ascii_wctomb>:
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	b141      	cbz	r1, 800a9b8 <__ascii_wctomb+0x18>
 800a9a6:	2aff      	cmp	r2, #255	; 0xff
 800a9a8:	d904      	bls.n	800a9b4 <__ascii_wctomb+0x14>
 800a9aa:	228a      	movs	r2, #138	; 0x8a
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	4770      	bx	lr
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	700a      	strb	r2, [r1, #0]
 800a9b8:	4770      	bx	lr

0800a9ba <__sfputc_r>:
 800a9ba:	6893      	ldr	r3, [r2, #8]
 800a9bc:	b410      	push	{r4}
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	6093      	str	r3, [r2, #8]
 800a9c4:	da07      	bge.n	800a9d6 <__sfputc_r+0x1c>
 800a9c6:	6994      	ldr	r4, [r2, #24]
 800a9c8:	42a3      	cmp	r3, r4
 800a9ca:	db01      	blt.n	800a9d0 <__sfputc_r+0x16>
 800a9cc:	290a      	cmp	r1, #10
 800a9ce:	d102      	bne.n	800a9d6 <__sfputc_r+0x1c>
 800a9d0:	bc10      	pop	{r4}
 800a9d2:	f7fd bf1c 	b.w	800880e <__swbuf_r>
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	1c58      	adds	r0, r3, #1
 800a9da:	6010      	str	r0, [r2, #0]
 800a9dc:	7019      	strb	r1, [r3, #0]
 800a9de:	4608      	mov	r0, r1
 800a9e0:	bc10      	pop	{r4}
 800a9e2:	4770      	bx	lr

0800a9e4 <__sfputs_r>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	460f      	mov	r7, r1
 800a9ea:	4614      	mov	r4, r2
 800a9ec:	18d5      	adds	r5, r2, r3
 800a9ee:	42ac      	cmp	r4, r5
 800a9f0:	d101      	bne.n	800a9f6 <__sfputs_r+0x12>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e007      	b.n	800aa06 <__sfputs_r+0x22>
 800a9f6:	463a      	mov	r2, r7
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fe:	f7ff ffdc 	bl	800a9ba <__sfputc_r>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d1f3      	bne.n	800a9ee <__sfputs_r+0xa>
 800aa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa08 <_vfiprintf_r>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	4614      	mov	r4, r2
 800aa10:	4698      	mov	r8, r3
 800aa12:	4606      	mov	r6, r0
 800aa14:	b09d      	sub	sp, #116	; 0x74
 800aa16:	b118      	cbz	r0, 800aa20 <_vfiprintf_r+0x18>
 800aa18:	6a03      	ldr	r3, [r0, #32]
 800aa1a:	b90b      	cbnz	r3, 800aa20 <_vfiprintf_r+0x18>
 800aa1c:	f7fd fd62 	bl	80084e4 <__sinit>
 800aa20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa22:	07d9      	lsls	r1, r3, #31
 800aa24:	d405      	bmi.n	800aa32 <_vfiprintf_r+0x2a>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	059a      	lsls	r2, r3, #22
 800aa2a:	d402      	bmi.n	800aa32 <_vfiprintf_r+0x2a>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa2e:	f7fe f8a8 	bl	8008b82 <__retarget_lock_acquire_recursive>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	071b      	lsls	r3, r3, #28
 800aa36:	d501      	bpl.n	800aa3c <_vfiprintf_r+0x34>
 800aa38:	692b      	ldr	r3, [r5, #16]
 800aa3a:	b99b      	cbnz	r3, 800aa64 <_vfiprintf_r+0x5c>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7fd ff22 	bl	8008888 <__swsetup_r>
 800aa44:	b170      	cbz	r0, 800aa64 <_vfiprintf_r+0x5c>
 800aa46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa48:	07dc      	lsls	r4, r3, #31
 800aa4a:	d504      	bpl.n	800aa56 <_vfiprintf_r+0x4e>
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	b01d      	add	sp, #116	; 0x74
 800aa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	0598      	lsls	r0, r3, #22
 800aa5a:	d4f7      	bmi.n	800aa4c <_vfiprintf_r+0x44>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa5e:	f7fe f891 	bl	8008b84 <__retarget_lock_release_recursive>
 800aa62:	e7f3      	b.n	800aa4c <_vfiprintf_r+0x44>
 800aa64:	2300      	movs	r3, #0
 800aa66:	9309      	str	r3, [sp, #36]	; 0x24
 800aa68:	2320      	movs	r3, #32
 800aa6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa6e:	2330      	movs	r3, #48	; 0x30
 800aa70:	f04f 0901 	mov.w	r9, #1
 800aa74:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa78:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ac28 <_vfiprintf_r+0x220>
 800aa7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa80:	4623      	mov	r3, r4
 800aa82:	469a      	mov	sl, r3
 800aa84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa88:	b10a      	cbz	r2, 800aa8e <_vfiprintf_r+0x86>
 800aa8a:	2a25      	cmp	r2, #37	; 0x25
 800aa8c:	d1f9      	bne.n	800aa82 <_vfiprintf_r+0x7a>
 800aa8e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa92:	d00b      	beq.n	800aaac <_vfiprintf_r+0xa4>
 800aa94:	465b      	mov	r3, fp
 800aa96:	4622      	mov	r2, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ffa2 	bl	800a9e4 <__sfputs_r>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f000 80a9 	beq.w	800abf8 <_vfiprintf_r+0x1f0>
 800aaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa8:	445a      	add	r2, fp
 800aaaa:	9209      	str	r2, [sp, #36]	; 0x24
 800aaac:	f89a 3000 	ldrb.w	r3, [sl]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80a1 	beq.w	800abf8 <_vfiprintf_r+0x1f0>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aac0:	f10a 0a01 	add.w	sl, sl, #1
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	9307      	str	r3, [sp, #28]
 800aac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aacc:	931a      	str	r3, [sp, #104]	; 0x68
 800aace:	4654      	mov	r4, sl
 800aad0:	2205      	movs	r2, #5
 800aad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad6:	4854      	ldr	r0, [pc, #336]	; (800ac28 <_vfiprintf_r+0x220>)
 800aad8:	f7fe f85d 	bl	8008b96 <memchr>
 800aadc:	9a04      	ldr	r2, [sp, #16]
 800aade:	b9d8      	cbnz	r0, 800ab18 <_vfiprintf_r+0x110>
 800aae0:	06d1      	lsls	r1, r2, #27
 800aae2:	bf44      	itt	mi
 800aae4:	2320      	movmi	r3, #32
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaea:	0713      	lsls	r3, r2, #28
 800aaec:	bf44      	itt	mi
 800aaee:	232b      	movmi	r3, #43	; 0x2b
 800aaf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf8:	2b2a      	cmp	r3, #42	; 0x2a
 800aafa:	d015      	beq.n	800ab28 <_vfiprintf_r+0x120>
 800aafc:	4654      	mov	r4, sl
 800aafe:	2000      	movs	r0, #0
 800ab00:	f04f 0c0a 	mov.w	ip, #10
 800ab04:	9a07      	ldr	r2, [sp, #28]
 800ab06:	4621      	mov	r1, r4
 800ab08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab0c:	3b30      	subs	r3, #48	; 0x30
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d94d      	bls.n	800abae <_vfiprintf_r+0x1a6>
 800ab12:	b1b0      	cbz	r0, 800ab42 <_vfiprintf_r+0x13a>
 800ab14:	9207      	str	r2, [sp, #28]
 800ab16:	e014      	b.n	800ab42 <_vfiprintf_r+0x13a>
 800ab18:	eba0 0308 	sub.w	r3, r0, r8
 800ab1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab20:	4313      	orrs	r3, r2
 800ab22:	46a2      	mov	sl, r4
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	e7d2      	b.n	800aace <_vfiprintf_r+0xc6>
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	1d19      	adds	r1, r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	9103      	str	r1, [sp, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bfbb      	ittet	lt
 800ab34:	425b      	neglt	r3, r3
 800ab36:	f042 0202 	orrlt.w	r2, r2, #2
 800ab3a:	9307      	strge	r3, [sp, #28]
 800ab3c:	9307      	strlt	r3, [sp, #28]
 800ab3e:	bfb8      	it	lt
 800ab40:	9204      	strlt	r2, [sp, #16]
 800ab42:	7823      	ldrb	r3, [r4, #0]
 800ab44:	2b2e      	cmp	r3, #46	; 0x2e
 800ab46:	d10c      	bne.n	800ab62 <_vfiprintf_r+0x15a>
 800ab48:	7863      	ldrb	r3, [r4, #1]
 800ab4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab4c:	d134      	bne.n	800abb8 <_vfiprintf_r+0x1b0>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	3402      	adds	r4, #2
 800ab52:	1d1a      	adds	r2, r3, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	9203      	str	r2, [sp, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bfb8      	it	lt
 800ab5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab60:	9305      	str	r3, [sp, #20]
 800ab62:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac2c <_vfiprintf_r+0x224>
 800ab66:	2203      	movs	r2, #3
 800ab68:	4650      	mov	r0, sl
 800ab6a:	7821      	ldrb	r1, [r4, #0]
 800ab6c:	f7fe f813 	bl	8008b96 <memchr>
 800ab70:	b138      	cbz	r0, 800ab82 <_vfiprintf_r+0x17a>
 800ab72:	2240      	movs	r2, #64	; 0x40
 800ab74:	9b04      	ldr	r3, [sp, #16]
 800ab76:	eba0 000a 	sub.w	r0, r0, sl
 800ab7a:	4082      	lsls	r2, r0
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	3401      	adds	r4, #1
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab86:	2206      	movs	r2, #6
 800ab88:	4829      	ldr	r0, [pc, #164]	; (800ac30 <_vfiprintf_r+0x228>)
 800ab8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab8e:	f7fe f802 	bl	8008b96 <memchr>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d03f      	beq.n	800ac16 <_vfiprintf_r+0x20e>
 800ab96:	4b27      	ldr	r3, [pc, #156]	; (800ac34 <_vfiprintf_r+0x22c>)
 800ab98:	bb1b      	cbnz	r3, 800abe2 <_vfiprintf_r+0x1da>
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	3307      	adds	r3, #7
 800ab9e:	f023 0307 	bic.w	r3, r3, #7
 800aba2:	3308      	adds	r3, #8
 800aba4:	9303      	str	r3, [sp, #12]
 800aba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba8:	443b      	add	r3, r7
 800abaa:	9309      	str	r3, [sp, #36]	; 0x24
 800abac:	e768      	b.n	800aa80 <_vfiprintf_r+0x78>
 800abae:	460c      	mov	r4, r1
 800abb0:	2001      	movs	r0, #1
 800abb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abb6:	e7a6      	b.n	800ab06 <_vfiprintf_r+0xfe>
 800abb8:	2300      	movs	r3, #0
 800abba:	f04f 0c0a 	mov.w	ip, #10
 800abbe:	4619      	mov	r1, r3
 800abc0:	3401      	adds	r4, #1
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	4620      	mov	r0, r4
 800abc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abca:	3a30      	subs	r2, #48	; 0x30
 800abcc:	2a09      	cmp	r2, #9
 800abce:	d903      	bls.n	800abd8 <_vfiprintf_r+0x1d0>
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0c6      	beq.n	800ab62 <_vfiprintf_r+0x15a>
 800abd4:	9105      	str	r1, [sp, #20]
 800abd6:	e7c4      	b.n	800ab62 <_vfiprintf_r+0x15a>
 800abd8:	4604      	mov	r4, r0
 800abda:	2301      	movs	r3, #1
 800abdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe0:	e7f0      	b.n	800abc4 <_vfiprintf_r+0x1bc>
 800abe2:	ab03      	add	r3, sp, #12
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	462a      	mov	r2, r5
 800abe8:	4630      	mov	r0, r6
 800abea:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <_vfiprintf_r+0x230>)
 800abec:	a904      	add	r1, sp, #16
 800abee:	f7fd f82b 	bl	8007c48 <_printf_float>
 800abf2:	4607      	mov	r7, r0
 800abf4:	1c78      	adds	r0, r7, #1
 800abf6:	d1d6      	bne.n	800aba6 <_vfiprintf_r+0x19e>
 800abf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abfa:	07d9      	lsls	r1, r3, #31
 800abfc:	d405      	bmi.n	800ac0a <_vfiprintf_r+0x202>
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	059a      	lsls	r2, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_vfiprintf_r+0x202>
 800ac04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac06:	f7fd ffbd 	bl	8008b84 <__retarget_lock_release_recursive>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	065b      	lsls	r3, r3, #25
 800ac0e:	f53f af1d 	bmi.w	800aa4c <_vfiprintf_r+0x44>
 800ac12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac14:	e71c      	b.n	800aa50 <_vfiprintf_r+0x48>
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <_vfiprintf_r+0x230>)
 800ac20:	a904      	add	r1, sp, #16
 800ac22:	f7fd fab1 	bl	8008188 <_printf_i>
 800ac26:	e7e4      	b.n	800abf2 <_vfiprintf_r+0x1ea>
 800ac28:	0800b5a4 	.word	0x0800b5a4
 800ac2c:	0800b5aa 	.word	0x0800b5aa
 800ac30:	0800b5ae 	.word	0x0800b5ae
 800ac34:	08007c49 	.word	0x08007c49
 800ac38:	0800a9e5 	.word	0x0800a9e5

0800ac3c <__sflush_r>:
 800ac3c:	898a      	ldrh	r2, [r1, #12]
 800ac3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac40:	4605      	mov	r5, r0
 800ac42:	0710      	lsls	r0, r2, #28
 800ac44:	460c      	mov	r4, r1
 800ac46:	d457      	bmi.n	800acf8 <__sflush_r+0xbc>
 800ac48:	684b      	ldr	r3, [r1, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dc04      	bgt.n	800ac58 <__sflush_r+0x1c>
 800ac4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	dc01      	bgt.n	800ac58 <__sflush_r+0x1c>
 800ac54:	2000      	movs	r0, #0
 800ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac5a:	2e00      	cmp	r6, #0
 800ac5c:	d0fa      	beq.n	800ac54 <__sflush_r+0x18>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac64:	682f      	ldr	r7, [r5, #0]
 800ac66:	6a21      	ldr	r1, [r4, #32]
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	d032      	beq.n	800acd2 <__sflush_r+0x96>
 800ac6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	075a      	lsls	r2, r3, #29
 800ac72:	d505      	bpl.n	800ac80 <__sflush_r+0x44>
 800ac74:	6863      	ldr	r3, [r4, #4]
 800ac76:	1ac0      	subs	r0, r0, r3
 800ac78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac7a:	b10b      	cbz	r3, 800ac80 <__sflush_r+0x44>
 800ac7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac7e:	1ac0      	subs	r0, r0, r3
 800ac80:	2300      	movs	r3, #0
 800ac82:	4602      	mov	r2, r0
 800ac84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac86:	4628      	mov	r0, r5
 800ac88:	6a21      	ldr	r1, [r4, #32]
 800ac8a:	47b0      	blx	r6
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	d106      	bne.n	800aca0 <__sflush_r+0x64>
 800ac92:	6829      	ldr	r1, [r5, #0]
 800ac94:	291d      	cmp	r1, #29
 800ac96:	d82b      	bhi.n	800acf0 <__sflush_r+0xb4>
 800ac98:	4a28      	ldr	r2, [pc, #160]	; (800ad3c <__sflush_r+0x100>)
 800ac9a:	410a      	asrs	r2, r1
 800ac9c:	07d6      	lsls	r6, r2, #31
 800ac9e:	d427      	bmi.n	800acf0 <__sflush_r+0xb4>
 800aca0:	2200      	movs	r2, #0
 800aca2:	6062      	str	r2, [r4, #4]
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	04d9      	lsls	r1, r3, #19
 800aca8:	6022      	str	r2, [r4, #0]
 800acaa:	d504      	bpl.n	800acb6 <__sflush_r+0x7a>
 800acac:	1c42      	adds	r2, r0, #1
 800acae:	d101      	bne.n	800acb4 <__sflush_r+0x78>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b903      	cbnz	r3, 800acb6 <__sflush_r+0x7a>
 800acb4:	6560      	str	r0, [r4, #84]	; 0x54
 800acb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acb8:	602f      	str	r7, [r5, #0]
 800acba:	2900      	cmp	r1, #0
 800acbc:	d0ca      	beq.n	800ac54 <__sflush_r+0x18>
 800acbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc2:	4299      	cmp	r1, r3
 800acc4:	d002      	beq.n	800accc <__sflush_r+0x90>
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7fe fe1a 	bl	8009900 <_free_r>
 800accc:	2000      	movs	r0, #0
 800acce:	6360      	str	r0, [r4, #52]	; 0x34
 800acd0:	e7c1      	b.n	800ac56 <__sflush_r+0x1a>
 800acd2:	2301      	movs	r3, #1
 800acd4:	4628      	mov	r0, r5
 800acd6:	47b0      	blx	r6
 800acd8:	1c41      	adds	r1, r0, #1
 800acda:	d1c8      	bne.n	800ac6e <__sflush_r+0x32>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0c5      	beq.n	800ac6e <__sflush_r+0x32>
 800ace2:	2b1d      	cmp	r3, #29
 800ace4:	d001      	beq.n	800acea <__sflush_r+0xae>
 800ace6:	2b16      	cmp	r3, #22
 800ace8:	d101      	bne.n	800acee <__sflush_r+0xb2>
 800acea:	602f      	str	r7, [r5, #0]
 800acec:	e7b2      	b.n	800ac54 <__sflush_r+0x18>
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	e7ae      	b.n	800ac56 <__sflush_r+0x1a>
 800acf8:	690f      	ldr	r7, [r1, #16]
 800acfa:	2f00      	cmp	r7, #0
 800acfc:	d0aa      	beq.n	800ac54 <__sflush_r+0x18>
 800acfe:	0793      	lsls	r3, r2, #30
 800ad00:	bf18      	it	ne
 800ad02:	2300      	movne	r3, #0
 800ad04:	680e      	ldr	r6, [r1, #0]
 800ad06:	bf08      	it	eq
 800ad08:	694b      	ldreq	r3, [r1, #20]
 800ad0a:	1bf6      	subs	r6, r6, r7
 800ad0c:	600f      	str	r7, [r1, #0]
 800ad0e:	608b      	str	r3, [r1, #8]
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	dd9f      	ble.n	800ac54 <__sflush_r+0x18>
 800ad14:	4633      	mov	r3, r6
 800ad16:	463a      	mov	r2, r7
 800ad18:	4628      	mov	r0, r5
 800ad1a:	6a21      	ldr	r1, [r4, #32]
 800ad1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ad20:	47e0      	blx	ip
 800ad22:	2800      	cmp	r0, #0
 800ad24:	dc06      	bgt.n	800ad34 <__sflush_r+0xf8>
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad30:	81a3      	strh	r3, [r4, #12]
 800ad32:	e790      	b.n	800ac56 <__sflush_r+0x1a>
 800ad34:	4407      	add	r7, r0
 800ad36:	1a36      	subs	r6, r6, r0
 800ad38:	e7ea      	b.n	800ad10 <__sflush_r+0xd4>
 800ad3a:	bf00      	nop
 800ad3c:	dfbffffe 	.word	0xdfbffffe

0800ad40 <_fflush_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	690b      	ldr	r3, [r1, #16]
 800ad44:	4605      	mov	r5, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	b913      	cbnz	r3, 800ad50 <_fflush_r+0x10>
 800ad4a:	2500      	movs	r5, #0
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	b118      	cbz	r0, 800ad5a <_fflush_r+0x1a>
 800ad52:	6a03      	ldr	r3, [r0, #32]
 800ad54:	b90b      	cbnz	r3, 800ad5a <_fflush_r+0x1a>
 800ad56:	f7fd fbc5 	bl	80084e4 <__sinit>
 800ad5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0f3      	beq.n	800ad4a <_fflush_r+0xa>
 800ad62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad64:	07d0      	lsls	r0, r2, #31
 800ad66:	d404      	bmi.n	800ad72 <_fflush_r+0x32>
 800ad68:	0599      	lsls	r1, r3, #22
 800ad6a:	d402      	bmi.n	800ad72 <_fflush_r+0x32>
 800ad6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad6e:	f7fd ff08 	bl	8008b82 <__retarget_lock_acquire_recursive>
 800ad72:	4628      	mov	r0, r5
 800ad74:	4621      	mov	r1, r4
 800ad76:	f7ff ff61 	bl	800ac3c <__sflush_r>
 800ad7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	07da      	lsls	r2, r3, #31
 800ad80:	d4e4      	bmi.n	800ad4c <_fflush_r+0xc>
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	059b      	lsls	r3, r3, #22
 800ad86:	d4e1      	bmi.n	800ad4c <_fflush_r+0xc>
 800ad88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad8a:	f7fd fefb 	bl	8008b84 <__retarget_lock_release_recursive>
 800ad8e:	e7dd      	b.n	800ad4c <_fflush_r+0xc>

0800ad90 <fiprintf>:
 800ad90:	b40e      	push	{r1, r2, r3}
 800ad92:	b503      	push	{r0, r1, lr}
 800ad94:	4601      	mov	r1, r0
 800ad96:	ab03      	add	r3, sp, #12
 800ad98:	4805      	ldr	r0, [pc, #20]	; (800adb0 <fiprintf+0x20>)
 800ad9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9e:	6800      	ldr	r0, [r0, #0]
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	f7ff fe31 	bl	800aa08 <_vfiprintf_r>
 800ada6:	b002      	add	sp, #8
 800ada8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adac:	b003      	add	sp, #12
 800adae:	4770      	bx	lr
 800adb0:	200001f8 	.word	0x200001f8

0800adb4 <__swhatbuf_r>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	460c      	mov	r4, r1
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	4615      	mov	r5, r2
 800adbe:	2900      	cmp	r1, #0
 800adc0:	461e      	mov	r6, r3
 800adc2:	b096      	sub	sp, #88	; 0x58
 800adc4:	da0c      	bge.n	800ade0 <__swhatbuf_r+0x2c>
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	2100      	movs	r1, #0
 800adca:	f013 0f80 	tst.w	r3, #128	; 0x80
 800adce:	bf0c      	ite	eq
 800add0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800add4:	2340      	movne	r3, #64	; 0x40
 800add6:	2000      	movs	r0, #0
 800add8:	6031      	str	r1, [r6, #0]
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	b016      	add	sp, #88	; 0x58
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	466a      	mov	r2, sp
 800ade2:	f000 f849 	bl	800ae78 <_fstat_r>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	dbed      	blt.n	800adc6 <__swhatbuf_r+0x12>
 800adea:	9901      	ldr	r1, [sp, #4]
 800adec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800adf0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800adf4:	4259      	negs	r1, r3
 800adf6:	4159      	adcs	r1, r3
 800adf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfc:	e7eb      	b.n	800add6 <__swhatbuf_r+0x22>

0800adfe <__smakebuf_r>:
 800adfe:	898b      	ldrh	r3, [r1, #12]
 800ae00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae02:	079d      	lsls	r5, r3, #30
 800ae04:	4606      	mov	r6, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	d507      	bpl.n	800ae1a <__smakebuf_r+0x1c>
 800ae0a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	2301      	movs	r3, #1
 800ae14:	6163      	str	r3, [r4, #20]
 800ae16:	b002      	add	sp, #8
 800ae18:	bd70      	pop	{r4, r5, r6, pc}
 800ae1a:	466a      	mov	r2, sp
 800ae1c:	ab01      	add	r3, sp, #4
 800ae1e:	f7ff ffc9 	bl	800adb4 <__swhatbuf_r>
 800ae22:	9900      	ldr	r1, [sp, #0]
 800ae24:	4605      	mov	r5, r0
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7fb fee4 	bl	8006bf4 <_malloc_r>
 800ae2c:	b948      	cbnz	r0, 800ae42 <__smakebuf_r+0x44>
 800ae2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae32:	059a      	lsls	r2, r3, #22
 800ae34:	d4ef      	bmi.n	800ae16 <__smakebuf_r+0x18>
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	f043 0302 	orr.w	r3, r3, #2
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	e7e3      	b.n	800ae0a <__smakebuf_r+0xc>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	6020      	str	r0, [r4, #0]
 800ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	9b00      	ldr	r3, [sp, #0]
 800ae4e:	6120      	str	r0, [r4, #16]
 800ae50:	6163      	str	r3, [r4, #20]
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	b15b      	cbz	r3, 800ae6e <__smakebuf_r+0x70>
 800ae56:	4630      	mov	r0, r6
 800ae58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae5c:	f000 f81e 	bl	800ae9c <_isatty_r>
 800ae60:	b128      	cbz	r0, 800ae6e <__smakebuf_r+0x70>
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	f023 0303 	bic.w	r3, r3, #3
 800ae68:	f043 0301 	orr.w	r3, r3, #1
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	431d      	orrs	r5, r3
 800ae72:	81a5      	strh	r5, [r4, #12]
 800ae74:	e7cf      	b.n	800ae16 <__smakebuf_r+0x18>
	...

0800ae78 <_fstat_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4d06      	ldr	r5, [pc, #24]	; (800ae98 <_fstat_r+0x20>)
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	4611      	mov	r1, r2
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	f7f8 fd70 	bl	800396a <_fstat>
 800ae8a:	1c43      	adds	r3, r0, #1
 800ae8c:	d102      	bne.n	800ae94 <_fstat_r+0x1c>
 800ae8e:	682b      	ldr	r3, [r5, #0]
 800ae90:	b103      	cbz	r3, 800ae94 <_fstat_r+0x1c>
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	bd38      	pop	{r3, r4, r5, pc}
 800ae96:	bf00      	nop
 800ae98:	20002740 	.word	0x20002740

0800ae9c <_isatty_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	2300      	movs	r3, #0
 800aea0:	4d05      	ldr	r5, [pc, #20]	; (800aeb8 <_isatty_r+0x1c>)
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	f7f8 fd6e 	bl	8003988 <_isatty>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_isatty_r+0x1a>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_isatty_r+0x1a>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	20002740 	.word	0x20002740

0800aebc <abort>:
 800aebc:	2006      	movs	r0, #6
 800aebe:	b508      	push	{r3, lr}
 800aec0:	f000 f840 	bl	800af44 <raise>
 800aec4:	2001      	movs	r0, #1
 800aec6:	f7f8 fd1e 	bl	8003906 <_exit>

0800aeca <_calloc_r>:
 800aeca:	b570      	push	{r4, r5, r6, lr}
 800aecc:	fba1 5402 	umull	r5, r4, r1, r2
 800aed0:	b934      	cbnz	r4, 800aee0 <_calloc_r+0x16>
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7fb fe8e 	bl	8006bf4 <_malloc_r>
 800aed8:	4606      	mov	r6, r0
 800aeda:	b928      	cbnz	r0, 800aee8 <_calloc_r+0x1e>
 800aedc:	4630      	mov	r0, r6
 800aede:	bd70      	pop	{r4, r5, r6, pc}
 800aee0:	220c      	movs	r2, #12
 800aee2:	2600      	movs	r6, #0
 800aee4:	6002      	str	r2, [r0, #0]
 800aee6:	e7f9      	b.n	800aedc <_calloc_r+0x12>
 800aee8:	462a      	mov	r2, r5
 800aeea:	4621      	mov	r1, r4
 800aeec:	f7fd fd24 	bl	8008938 <memset>
 800aef0:	e7f4      	b.n	800aedc <_calloc_r+0x12>

0800aef2 <_raise_r>:
 800aef2:	291f      	cmp	r1, #31
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	d904      	bls.n	800af06 <_raise_r+0x14>
 800aefc:	2316      	movs	r3, #22
 800aefe:	6003      	str	r3, [r0, #0]
 800af00:	f04f 30ff 	mov.w	r0, #4294967295
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af08:	b112      	cbz	r2, 800af10 <_raise_r+0x1e>
 800af0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af0e:	b94b      	cbnz	r3, 800af24 <_raise_r+0x32>
 800af10:	4620      	mov	r0, r4
 800af12:	f000 f831 	bl	800af78 <_getpid_r>
 800af16:	462a      	mov	r2, r5
 800af18:	4601      	mov	r1, r0
 800af1a:	4620      	mov	r0, r4
 800af1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af20:	f000 b818 	b.w	800af54 <_kill_r>
 800af24:	2b01      	cmp	r3, #1
 800af26:	d00a      	beq.n	800af3e <_raise_r+0x4c>
 800af28:	1c59      	adds	r1, r3, #1
 800af2a:	d103      	bne.n	800af34 <_raise_r+0x42>
 800af2c:	2316      	movs	r3, #22
 800af2e:	6003      	str	r3, [r0, #0]
 800af30:	2001      	movs	r0, #1
 800af32:	e7e7      	b.n	800af04 <_raise_r+0x12>
 800af34:	2400      	movs	r4, #0
 800af36:	4628      	mov	r0, r5
 800af38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af3c:	4798      	blx	r3
 800af3e:	2000      	movs	r0, #0
 800af40:	e7e0      	b.n	800af04 <_raise_r+0x12>
	...

0800af44 <raise>:
 800af44:	4b02      	ldr	r3, [pc, #8]	; (800af50 <raise+0xc>)
 800af46:	4601      	mov	r1, r0
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f7ff bfd2 	b.w	800aef2 <_raise_r>
 800af4e:	bf00      	nop
 800af50:	200001f8 	.word	0x200001f8

0800af54 <_kill_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	2300      	movs	r3, #0
 800af58:	4d06      	ldr	r5, [pc, #24]	; (800af74 <_kill_r+0x20>)
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	4611      	mov	r1, r2
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f7f8 fcc0 	bl	80038e6 <_kill>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d102      	bne.n	800af70 <_kill_r+0x1c>
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	b103      	cbz	r3, 800af70 <_kill_r+0x1c>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	bf00      	nop
 800af74:	20002740 	.word	0x20002740

0800af78 <_getpid_r>:
 800af78:	f7f8 bcae 	b.w	80038d8 <_getpid>

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr
