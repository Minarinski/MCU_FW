
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002498  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080025a4  080025a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d0  080025d0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d0  080025d0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d0  080025d0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d0  080025d0  000035d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025d4  080025d4  000035d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080025e4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080025e4  00004158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cac  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001862  00000000  00000000  0000dce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0000f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  0000fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164b7  00000000  00000000  000105f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c056  00000000  00000000  00026ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080db3  00000000  00000000  00032b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b38b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002650  00000000  00000000  000b38fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b5f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800258c 	.word	0x0800258c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800258c 	.word	0x0800258c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb6e 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f91c 	bl	8000394 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f86e 	bl	800023c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f8c2 	bl	80002ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000168:	f000 f8ea 	bl	8000340 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800016c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000170:	4810      	ldr	r0, [pc, #64]	@ (80001b4 <main+0x68>)
 8000172:	f000 ff3f 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 8000176:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800017a:	480e      	ldr	r0, [pc, #56]	@ (80001b4 <main+0x68>)
 800017c:	f000 ff3a 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_8);
 8000180:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000184:	480c      	ldr	r0, [pc, #48]	@ (80001b8 <main+0x6c>)
 8000186:	f000 ff35 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_9);
 800018a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800018e:	480a      	ldr	r0, [pc, #40]	@ (80001b8 <main+0x6c>)
 8000190:	f000 ff30 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8000194:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000198:	4807      	ldr	r0, [pc, #28]	@ (80001b8 <main+0x6c>)
 800019a:	f000 ff2b 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800019e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001a2:	4805      	ldr	r0, [pc, #20]	@ (80001b8 <main+0x6c>)
 80001a4:	f000 ff26 	bl	8000ff4 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ac:	f000 fba2 	bl	80008f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 80001b0:	bf00      	nop
 80001b2:	e7db      	b.n	800016c <main+0x20>
 80001b4:	40010800 	.word	0x40010800
 80001b8:	40010c00 	.word	0x40010c00

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	@ 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 f9b2 	bl	8002534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ea:	2302      	movs	r3, #2
 80001ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ee:	2300      	movs	r3, #0
 80001f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80001f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80001f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 f857 	bl	80012b0 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000208:	f000 f94e 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fac5 	bl	80017b4 <HAL_RCC_ClockConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000230:	f000 f93a 	bl	80004a8 <Error_Handler>
  }
}
 8000234:	bf00      	nop
 8000236:	3740      	adds	r7, #64	@ 0x40
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <MX_I2C1_Init+0x50>)
 8000242:	4a13      	ldr	r2, [pc, #76]	@ (8000290 <MX_I2C1_Init+0x54>)
 8000244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000246:	4b11      	ldr	r3, [pc, #68]	@ (800028c <MX_I2C1_Init+0x50>)
 8000248:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <MX_I2C1_Init+0x58>)
 800024a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800024c:	4b0f      	ldr	r3, [pc, #60]	@ (800028c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000252:	4b0e      	ldr	r3, [pc, #56]	@ (800028c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <MX_I2C1_Init+0x50>)
 800025a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800025e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	@ (800028c <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <MX_I2C1_Init+0x50>)
 800027a:	f000 fed5 	bl	8001028 <HAL_I2C_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f910 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	40005400 	.word	0x40005400
 8000294:	000186a0 	.word	0x000186a0

08000298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <MX_USART1_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002d0:	f001 fbfe 	bl	8001ad0 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f8e5 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000007c 	.word	0x2000007c
 80002e8:	40013800 	.word	0x40013800

080002ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	@ (800033c <MX_USART2_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000324:	f001 fbd4 	bl	8001ad0 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f8bb 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000c4 	.word	0x200000c4
 800033c:	40004400 	.word	0x40004400

08000340 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	@ (8000390 <MX_USART3_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800034a:	4b10      	ldr	r3, [pc, #64]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 800034c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000350:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <MX_USART3_UART_Init+0x4c>)
 8000378:	f001 fbaa 	bl	8001ad0 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000382:	f000 f891 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	2000010c 	.word	0x2000010c
 8000390:	40004800 	.word	0x40004800

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000498 <MX_GPIO_Init+0x104>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000498 <MX_GPIO_Init+0x104>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b38      	ldr	r3, [pc, #224]	@ (8000498 <MX_GPIO_Init+0x104>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b35      	ldr	r3, [pc, #212]	@ (8000498 <MX_GPIO_Init+0x104>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a34      	ldr	r2, [pc, #208]	@ (8000498 <MX_GPIO_Init+0x104>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <MX_GPIO_Init+0x104>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f641 0103 	movw	r1, #6147	@ 0x1803
 80003de:	482f      	ldr	r0, [pc, #188]	@ (800049c <MX_GPIO_Init+0x108>)
 80003e0:	f000 fdf0 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 41c6 	mov.w	r1, #25344	@ 0x6300
 80003ea:	482d      	ldr	r0, [pc, #180]	@ (80004a0 <MX_GPIO_Init+0x10c>)
 80003ec:	f000 fdea 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin;
 80003f0:	f641 0303 	movw	r3, #6147	@ 0x1803
 80003f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2302      	movs	r3, #2
 8000400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	4619      	mov	r1, r3
 8000408:	4824      	ldr	r0, [pc, #144]	@ (800049c <MX_GPIO_Init+0x108>)
 800040a:	f000 fc57 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 800040e:	2310      	movs	r3, #16
 8000410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4619      	mov	r1, r3
 8000420:	481e      	ldr	r0, [pc, #120]	@ (800049c <MX_GPIO_Init+0x108>)
 8000422:	f000 fc4b 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000426:	23e0      	movs	r3, #224	@ 0xe0
 8000428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800042a:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0x110>)
 800042c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	4619      	mov	r1, r3
 8000438:	4818      	ldr	r0, [pc, #96]	@ (800049c <MX_GPIO_Init+0x108>)
 800043a:	f000 fc3f 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN5_Pin;
 800043e:	2303      	movs	r3, #3
 8000440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_GPIO_Init+0x110>)
 8000444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	4619      	mov	r1, r3
 8000450:	4813      	ldr	r0, [pc, #76]	@ (80004a0 <MX_GPIO_Init+0x10c>)
 8000452:	f000 fc33 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
  GPIO_InitStruct.Pin = STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin;
 8000456:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 800045a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0308 	add.w	r3, r7, #8
 800046c:	4619      	mov	r1, r3
 800046e:	480c      	ldr	r0, [pc, #48]	@ (80004a0 <MX_GPIO_Init+0x10c>)
 8000470:	f000 fc24 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SLCT_Pin */
  GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8000474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047e:	2301      	movs	r3, #1
 8000480:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	@ (800049c <MX_GPIO_Init+0x108>)
 800048a:	f000 fc17 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010800 	.word	0x40010800
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	10110000 	.word	0x10110000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <HAL_I2C_MspInit+0x70>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d123      	bne.n	8000580 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <HAL_I2C_MspInit+0x74>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <HAL_I2C_MspInit+0x74>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <HAL_I2C_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000550:	23c0      	movs	r3, #192	@ 0xc0
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000554:	2312      	movs	r3, #18
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000558:	2303      	movs	r3, #3
 800055a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	480b      	ldr	r0, [pc, #44]	@ (8000590 <HAL_I2C_MspInit+0x78>)
 8000564:	f000 fbaa 	bl	8000cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <HAL_I2C_MspInit+0x74>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4a07      	ldr	r2, [pc, #28]	@ (800058c <HAL_I2C_MspInit+0x74>)
 800056e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000572:	61d3      	str	r3, [r2, #28]
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_I2C_MspInit+0x74>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40005400 	.word	0x40005400
 800058c:	40021000 	.word	0x40021000
 8000590:	40010c00 	.word	0x40010c00

08000594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	@ 0x30
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a5f      	ldr	r2, [pc, #380]	@ (800072c <HAL_UART_MspInit+0x198>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d13a      	bne.n	800062a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a5d      	ldr	r2, [pc, #372]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b58      	ldr	r3, [pc, #352]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a57      	ldr	r2, [pc, #348]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b55      	ldr	r3, [pc, #340]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4619      	mov	r1, r3
 80005f8:	484e      	ldr	r0, [pc, #312]	@ (8000734 <HAL_UART_MspInit+0x1a0>)
 80005fa:	f000 fb5f 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4619      	mov	r1, r3
 8000612:	4848      	ldr	r0, [pc, #288]	@ (8000734 <HAL_UART_MspInit+0x1a0>)
 8000614:	f000 fb52 	bl	8000cbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2025      	movs	r0, #37	@ 0x25
 800061e:	f000 fa64 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000622:	2025      	movs	r0, #37	@ 0x25
 8000624:	f000 fa7d 	bl	8000b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000628:	e07c      	b.n	8000724 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <HAL_UART_MspInit+0x1a4>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d138      	bne.n	80006a6 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000634:	4b3e      	ldr	r3, [pc, #248]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	4a3d      	ldr	r2, [pc, #244]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 800063a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063e:	61d3      	str	r3, [r2, #28]
 8000640:	4b3b      	ldr	r3, [pc, #236]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b38      	ldr	r3, [pc, #224]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a37      	ldr	r2, [pc, #220]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000664:	2304      	movs	r3, #4
 8000666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4619      	mov	r1, r3
 8000676:	482f      	ldr	r0, [pc, #188]	@ (8000734 <HAL_UART_MspInit+0x1a0>)
 8000678:	f000 fb20 	bl	8000cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800067c:	2308      	movs	r3, #8
 800067e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4619      	mov	r1, r3
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <HAL_UART_MspInit+0x1a0>)
 8000690:	f000 fb14 	bl	8000cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2026      	movs	r0, #38	@ 0x26
 800069a:	f000 fa26 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800069e:	2026      	movs	r0, #38	@ 0x26
 80006a0:	f000 fa3f 	bl	8000b22 <HAL_NVIC_EnableIRQ>
}
 80006a4:	e03e      	b.n	8000724 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a24      	ldr	r2, [pc, #144]	@ (800073c <HAL_UART_MspInit+0x1a8>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d139      	bne.n	8000724 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80006b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006ba:	61d3      	str	r3, [r2, #28]
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_UART_MspInit+0x19c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	@ (8000740 <HAL_UART_MspInit+0x1ac>)
 80006f6:	f000 fae1 	bl	8000cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <HAL_UART_MspInit+0x1ac>)
 8000710:	f000 fad4 	bl	8000cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2027      	movs	r0, #39	@ 0x27
 800071a:	f000 f9e6 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800071e:	2027      	movs	r0, #39	@ 0x27
 8000720:	f000 f9ff 	bl	8000b22 <HAL_NVIC_EnableIRQ>
}
 8000724:	bf00      	nop
 8000726:	3730      	adds	r7, #48	@ 0x30
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013800 	.word	0x40013800
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	40004400 	.word	0x40004400
 800073c:	40004800 	.word	0x40004800
 8000740:	40010c00 	.word	0x40010c00

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f892 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007a0:	4802      	ldr	r0, [pc, #8]	@ (80007ac <USART1_IRQHandler+0x10>)
 80007a2:	f001 f9e5 	bl	8001b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000007c 	.word	0x2000007c

080007b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <USART2_IRQHandler+0x10>)
 80007b6:	f001 f9db 	bl	8001b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000c4 	.word	0x200000c4

080007c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007c8:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <USART3_IRQHandler+0x10>)
 80007ca:	f001 f9d1 	bl	8001b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000010c 	.word	0x2000010c

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff fff8 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000800:	4c09      	ldr	r4, [pc, #36]	@ (8000828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f001 fe99 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fc9b 	bl	800014c <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000820:	080025d8 	.word	0x080025d8
  ldr r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000828:	20000158 	.word	0x20000158

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f947 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fe32 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f95f 	bl	8000b3e <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f927 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000154 	.word	0x20000154

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	@ (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000154 	.word	0x20000154

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4906      	ldr	r1, [pc, #24]	@ (80009d4 <__NVIC_EnableIRQ+0x34>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	@ (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	@ 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	@ 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff2d 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff42 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff35 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffa2 	bl	8000a90 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d008      	beq.n	8000b80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2204      	movs	r2, #4
 8000b72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e020      	b.n	8000bc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 020e 	bic.w	r2, r2, #14
 8000b8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0201 	bic.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d005      	beq.n	8000bf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2204      	movs	r2, #4
 8000be8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e051      	b.n	8000c94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 020e 	bic.w	r2, r2, #14
 8000bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0201 	bic.w	r2, r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a22      	ldr	r2, [pc, #136]	@ (8000ca0 <HAL_DMA_Abort_IT+0xd4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d029      	beq.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <HAL_DMA_Abort_IT+0xd8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d022      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x9e>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca8 <HAL_DMA_Abort_IT+0xdc>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01a      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x98>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <HAL_DMA_Abort_IT+0xe0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d012      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x92>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb0 <HAL_DMA_Abort_IT+0xe4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00a      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x8c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <HAL_DMA_Abort_IT+0xe8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d102      	bne.n	8000c52 <HAL_DMA_Abort_IT+0x86>
 8000c4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c50:	e00e      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c56:	e00b      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5c:	e008      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	e005      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c68:	e002      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	e000      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4a11      	ldr	r2, [pc, #68]	@ (8000cb8 <HAL_DMA_Abort_IT+0xec>)
 8000c72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	4798      	blx	r3
    } 
  }
  return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40020008 	.word	0x40020008
 8000ca4:	4002001c 	.word	0x4002001c
 8000ca8:	40020030 	.word	0x40020030
 8000cac:	40020044 	.word	0x40020044
 8000cb0:	40020058 	.word	0x40020058
 8000cb4:	4002006c 	.word	0x4002006c
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	@ 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	@ (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	@ (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	@ (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	@ (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	@ (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	@ (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	@ (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	@ (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	@ (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	@ (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	@ (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	@ (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	@ 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	@ 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	@ (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	@ (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	@ (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	@ (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	@ (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	@ (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	492c      	ldr	r1, [pc, #176]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4922      	ldr	r1, [pc, #136]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4918      	ldr	r1, [pc, #96]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	@ 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43d9      	mvns	r1, r3
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	400b      	ands	r3, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	611a      	str	r2, [r3, #16]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e12b      	b.n	8001292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa62 	bl	8000518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2224      	movs	r2, #36	@ 0x24
 8001058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800107a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800108a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800108c:	f000 fcda 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8001090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a81      	ldr	r2, [pc, #516]	@ (800129c <HAL_I2C_Init+0x274>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d807      	bhi.n	80010ac <HAL_I2C_Init+0x84>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a80      	ldr	r2, [pc, #512]	@ (80012a0 <HAL_I2C_Init+0x278>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	bf94      	ite	ls
 80010a4:	2301      	movls	r3, #1
 80010a6:	2300      	movhi	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e006      	b.n	80010ba <HAL_I2C_Init+0x92>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a7d      	ldr	r2, [pc, #500]	@ (80012a4 <HAL_I2C_Init+0x27c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	bf94      	ite	ls
 80010b4:	2301      	movls	r3, #1
 80010b6:	2300      	movhi	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0e7      	b.n	8001292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4a78      	ldr	r2, [pc, #480]	@ (80012a8 <HAL_I2C_Init+0x280>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a6a      	ldr	r2, [pc, #424]	@ (800129c <HAL_I2C_Init+0x274>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d802      	bhi.n	80010fc <HAL_I2C_Init+0xd4>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	e009      	b.n	8001110 <HAL_I2C_Init+0xe8>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a69      	ldr	r2, [pc, #420]	@ (80012ac <HAL_I2C_Init+0x284>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	3301      	adds	r3, #1
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	430b      	orrs	r3, r1
 8001116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	495c      	ldr	r1, [pc, #368]	@ (800129c <HAL_I2C_Init+0x274>)
 800112c:	428b      	cmp	r3, r1
 800112e:	d819      	bhi.n	8001164 <HAL_I2C_Init+0x13c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e59      	subs	r1, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fbb1 f3f3 	udiv	r3, r1, r3
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001144:	400b      	ands	r3, r1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_I2C_Init+0x138>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1e59      	subs	r1, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fbb1 f3f3 	udiv	r3, r1, r3
 8001158:	3301      	adds	r3, #1
 800115a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115e:	e051      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001160:	2304      	movs	r3, #4
 8001162:	e04f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <HAL_I2C_Init+0x168>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1e58      	subs	r0, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	440b      	add	r3, r1
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e012      	b.n	80011b6 <HAL_I2C_Init+0x18e>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e58      	subs	r0, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	0099      	lsls	r1, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Init+0x196>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e022      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10e      	bne.n	80011e4 <HAL_I2C_Init+0x1bc>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1e58      	subs	r0, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	440b      	add	r3, r1
 80011d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e2:	e00f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e58      	subs	r0, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	0099      	lsls	r1, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	6809      	ldr	r1, [r1, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001232:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6911      	ldr	r1, [r2, #16]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68d2      	ldr	r2, [r2, #12]
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	430b      	orrs	r3, r1
 8001246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2220      	movs	r2, #32
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	000186a0 	.word	0x000186a0
 80012a0:	001e847f 	.word	0x001e847f
 80012a4:	003d08ff 	.word	0x003d08ff
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e272      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8087 	beq.w	80013de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d0:	4b92      	ldr	r3, [pc, #584]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d00c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012dc:	4b8f      	ldr	r3, [pc, #572]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d112      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
 80012e8:	4b8c      	ldr	r3, [pc, #560]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b89      	ldr	r3, [pc, #548]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06c      	beq.n	80013dc <HAL_RCC_OscConfig+0x12c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d168      	bne.n	80013dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e24c      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x76>
 8001318:	4b80      	ldr	r3, [pc, #512]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a7f      	ldr	r2, [pc, #508]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e02e      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x98>
 800132e:	4b7b      	ldr	r3, [pc, #492]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a7a      	ldr	r2, [pc, #488]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b78      	ldr	r3, [pc, #480]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a77      	ldr	r2, [pc, #476]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0xbc>
 8001352:	4b72      	ldr	r3, [pc, #456]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a71      	ldr	r2, [pc, #452]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b6f      	ldr	r3, [pc, #444]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a6e      	ldr	r2, [pc, #440]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 800136c:	4b6b      	ldr	r3, [pc, #428]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6a      	ldr	r2, [pc, #424]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b68      	ldr	r3, [pc, #416]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a67      	ldr	r2, [pc, #412]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001382:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff faa8 	bl	80008e0 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff faa4 	bl	80008e0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e200      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b5d      	ldr	r3, [pc, #372]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xe4>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fa94 	bl	80008e0 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fa90 	bl	80008e0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	@ 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e1ec      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b53      	ldr	r3, [pc, #332]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x10c>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ea:	4b4c      	ldr	r3, [pc, #304]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013f6:	4b49      	ldr	r3, [pc, #292]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x18c>
 8001402:	4b46      	ldr	r3, [pc, #280]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b43      	ldr	r3, [pc, #268]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x176>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1c0      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b3d      	ldr	r3, [pc, #244]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4939      	ldr	r1, [pc, #228]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e03a      	b.n	80014b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <HAL_RCC_OscConfig+0x270>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fa49 	bl	80008e0 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fa45 	bl	80008e0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1a1      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4927      	ldr	r1, [pc, #156]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_RCC_OscConfig+0x270>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fa28 	bl	80008e0 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fa24 	bl	80008e0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e180      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d03a      	beq.n	8001534 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d019      	beq.n	80014fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_RCC_OscConfig+0x274>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fa08 	bl	80008e0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fa04 	bl	80008e0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e160      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 face 	bl	8001a94 <RCC_Delay>
 80014f8:	e01c      	b.n	8001534 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_RCC_OscConfig+0x274>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff f9ee 	bl	80008e0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001506:	e00f      	b.n	8001528 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff f9ea 	bl	80008e0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d908      	bls.n	8001528 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e146      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	42420000 	.word	0x42420000
 8001524:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e9      	bne.n	8001508 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80a6 	beq.w	800168e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b88      	ldr	r3, [pc, #544]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a87      	ldr	r2, [pc, #540]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b85      	ldr	r3, [pc, #532]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b82      	ldr	r3, [pc, #520]	@ (8001778 <HAL_RCC_OscConfig+0x4c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157a:	4b7f      	ldr	r3, [pc, #508]	@ (8001778 <HAL_RCC_OscConfig+0x4c8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7e      	ldr	r2, [pc, #504]	@ (8001778 <HAL_RCC_OscConfig+0x4c8>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff f9ab 	bl	80008e0 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff f9a7 	bl	80008e0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	@ 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e103      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b75      	ldr	r3, [pc, #468]	@ (8001778 <HAL_RCC_OscConfig+0x4c8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x312>
 80015b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e02d      	b.n	800161e <HAL_RCC_OscConfig+0x36e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x334>
 80015ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a69      	ldr	r2, [pc, #420]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b67      	ldr	r3, [pc, #412]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a66      	ldr	r2, [pc, #408]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	e01c      	b.n	800161e <HAL_RCC_OscConfig+0x36e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d10c      	bne.n	8001606 <HAL_RCC_OscConfig+0x356>
 80015ec:	4b61      	ldr	r3, [pc, #388]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a60      	ldr	r2, [pc, #384]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e00b      	b.n	800161e <HAL_RCC_OscConfig+0x36e>
 8001606:	4b5b      	ldr	r3, [pc, #364]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a5a      	ldr	r2, [pc, #360]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b58      	ldr	r3, [pc, #352]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a57      	ldr	r2, [pc, #348]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d015      	beq.n	8001652 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff f95b 	bl	80008e0 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff f957 	bl	80008e0 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0b1      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ee      	beq.n	800162e <HAL_RCC_OscConfig+0x37e>
 8001650:	e014      	b.n	800167c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff f945 	bl	80008e0 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff f941 	bl	80008e0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e09b      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	4b40      	ldr	r3, [pc, #256]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ee      	bne.n	800165a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d105      	bne.n	800168e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001682:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a3b      	ldr	r2, [pc, #236]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8087 	beq.w	80017a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001698:	4b36      	ldr	r3, [pc, #216]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d061      	beq.n	8001768 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d146      	bne.n	800173a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ac:	4b33      	ldr	r3, [pc, #204]	@ (800177c <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f915 	bl	80008e0 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f911 	bl	80008e0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e06d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e0:	d108      	bne.n	80016f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4921      	ldr	r1, [pc, #132]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a19      	ldr	r1, [r3, #32]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	430b      	orrs	r3, r1
 8001706:	491b      	ldr	r1, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_RCC_OscConfig+0x4cc>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff f8e5 	bl	80008e0 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff f8e1 	bl	80008e0 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x46a>
 8001738:	e035      	b.n	80017a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_RCC_OscConfig+0x4cc>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff f8ce 	bl	80008e0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff f8ca 	bl	80008e0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e026      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x498>
 8001766:	e01e      	b.n	80017a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e019      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
 8001774:	40021000 	.word	0x40021000
 8001778:	40007000 	.word	0x40007000
 800177c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	429a      	cmp	r2, r3
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0d0      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d910      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b67      	ldr	r3, [pc, #412]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 0207 	bic.w	r2, r3, #7
 80017de:	4965      	ldr	r1, [pc, #404]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a58      	ldr	r2, [pc, #352]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800181a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001832:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d040      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d115      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e073      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06b      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b39      	ldr	r3, [pc, #228]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4936      	ldr	r1, [pc, #216]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f81c 	bl	80008e0 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff f818 	bl	80008e0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e053      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d210      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 0207 	bic.w	r2, r3, #7
 80018ea:	4922      	ldr	r1, [pc, #136]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	490a      	ldr	r1, [pc, #40]	@ (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <HAL_RCC_ClockConfig+0x1cc>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_ClockConfig+0x1d0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe ff7a 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000
 8001978:	40021000 	.word	0x40021000
 800197c:	080025a4 	.word	0x080025a4
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x30>
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x36>
 80019b6:	e027      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ba:	613b      	str	r3, [r7, #16]
      break;
 80019bc:	e027      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d010      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0c5b      	lsrs	r3, r3, #17
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e004      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a0c      	ldr	r2, [pc, #48]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0xa4>)
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	613b      	str	r3, [r7, #16]
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0a:	613b      	str	r3, [r7, #16]
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	693b      	ldr	r3, [r7, #16]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	007a1200 	.word	0x007a1200
 8001a24:	080025bc 	.word	0x080025bc
 8001a28:	080025cc 	.word	0x080025cc
 8001a2c:	003d0900 	.word	0x003d0900

08001a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a34:	4b02      	ldr	r3, [pc, #8]	@ (8001a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000000 	.word	0x20000000

08001a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a48:	f7ff fff2 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	@ (8001a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	080025b4 	.word	0x080025b4

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0adb      	lsrs	r3, r3, #11
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	@ (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	080025b4 	.word	0x080025b4

08001a94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <RCC_Delay+0x34>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <RCC_Delay+0x38>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0a5b      	lsrs	r3, r3, #9
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ab0:	bf00      	nop
  }
  while (Delay --);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	60fa      	str	r2, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f9      	bne.n	8001ab0 <RCC_Delay+0x1c>
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	10624dd3 	.word	0x10624dd3

08001ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e042      	b.n	8001b68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd4c 	bl	8000594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2224      	movs	r2, #36	@ 0x24
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fc7f 	bl	8002418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0ba      	sub	sp, #232	@ 0xe8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_UART_IRQHandler+0x66>
 8001bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fb63 	bl	800229a <UART_Receive_IT>
      return;
 8001bd4:	e25b      	b.n	800208e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80de 	beq.w	8001d9c <HAL_UART_IRQHandler+0x22c>
 8001be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bf0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80d1 	beq.w	8001d9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_UART_IRQHandler+0xae>
 8001c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_UART_IRQHandler+0xd2>
 8001c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f043 0202 	orr.w	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_UART_IRQHandler+0xf6>
 8001c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f043 0204 	orr.w	r2, r3, #4
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <HAL_UART_IRQHandler+0x126>
 8001c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0208 	orr.w	r2, r3, #8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 81f2 	beq.w	8002084 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_UART_IRQHandler+0x14e>
 8001cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 faee 	bl	800229a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_UART_IRQHandler+0x17a>
 8001ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d04f      	beq.n	8001d8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f9f8 	bl	80020e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d041      	beq.n	8001d82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3314      	adds	r3, #20
 8001d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d0c:	e853 3f00 	ldrex	r3, [r3]
 8001d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3314      	adds	r3, #20
 8001d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d3a:	e841 2300 	strex	r3, r2, [r1]
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1d9      	bne.n	8001cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d013      	beq.n	8001d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d56:	4a7e      	ldr	r2, [pc, #504]	@ (8001f50 <HAL_UART_IRQHandler+0x3e0>)
 8001d58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe ff34 	bl	8000bcc <HAL_DMA_Abort_IT>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d74:	4610      	mov	r0, r2
 8001d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d78:	e00e      	b.n	8001d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f99c 	bl	80020b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	e00a      	b.n	8001d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f998 	bl	80020b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d88:	e006      	b.n	8001d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f994 	bl	80020b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001d96:	e175      	b.n	8002084 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d98:	bf00      	nop
    return;
 8001d9a:	e173      	b.n	8002084 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	f040 814f 	bne.w	8002044 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8148 	beq.w	8002044 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8141 	beq.w	8002044 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b6 	beq.w	8001f54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8145 	beq.w	8002088 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e06:	429a      	cmp	r2, r3
 8001e08:	f080 813e 	bcs.w	8002088 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	f000 8088 	beq.w	8001f30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	330c      	adds	r3, #12
 8001e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e2e:	e853 3f00 	ldrex	r3, [r3]
 8001e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	330c      	adds	r3, #12
 8001e48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e5c:	e841 2300 	strex	r3, r2, [r1]
 8001e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1d9      	bne.n	8001e20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3314      	adds	r3, #20
 8001e72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e76:	e853 3f00 	ldrex	r3, [r3]
 8001e7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e9c:	e841 2300 	strex	r3, r2, [r1]
 8001ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e1      	bne.n	8001e6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3314      	adds	r3, #20
 8001eae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eb2:	e853 3f00 	ldrex	r3, [r3]
 8001eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ecc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ece:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ed2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ed4:	e841 2300 	strex	r3, r2, [r1]
 8001ed8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e3      	bne.n	8001ea8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
 8001efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f00:	f023 0310 	bic.w	r3, r3, #16
 8001f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f1a:	e841 2300 	strex	r3, r2, [r1]
 8001f1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e3      	bne.n	8001eee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fe13 	bl	8000b56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8bf 	bl	80020ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f4c:	e09c      	b.n	8002088 <HAL_UART_IRQHandler+0x518>
 8001f4e:	bf00      	nop
 8001f50:	080021a5 	.word	0x080021a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 808e 	beq.w	800208c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8089 	beq.w	800208c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f84:	e853 3f00 	ldrex	r3, [r3]
 8001f88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001f9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001fa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001fa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fa6:	e841 2300 	strex	r3, r2, [r1]
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1e3      	bne.n	8001f7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3314      	adds	r3, #20
 8001fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001fd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fde:	e841 2300 	strex	r3, r2, [r1]
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e3      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	e853 3f00 	ldrex	r3, [r3]
 8002006:	60fb      	str	r3, [r7, #12]
   return(result);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0310 	bic.w	r3, r3, #16
 800200e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	330c      	adds	r3, #12
 8002018:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800201c:	61fa      	str	r2, [r7, #28]
 800201e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002020:	69b9      	ldr	r1, [r7, #24]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	e841 2300 	strex	r3, r2, [r1]
 8002028:	617b      	str	r3, [r7, #20]
   return(result);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e3      	bne.n	8001ff8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f844 	bl	80020ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002042:	e023      	b.n	800208c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <HAL_UART_IRQHandler+0x4f4>
 8002050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8b5 	bl	80021cc <UART_Transmit_IT>
    return;
 8002062:	e014      	b.n	800208e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <HAL_UART_IRQHandler+0x51e>
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8f4 	bl	800226a <UART_EndTransmit_IT>
    return;
 8002082:	e004      	b.n	800208e <HAL_UART_IRQHandler+0x51e>
    return;
 8002084:	bf00      	nop
 8002086:	e002      	b.n	800208e <HAL_UART_IRQHandler+0x51e>
      return;
 8002088:	bf00      	nop
 800208a:	e000      	b.n	800208e <HAL_UART_IRQHandler+0x51e>
      return;
 800208c:	bf00      	nop
  }
}
 800208e:	37e8      	adds	r7, #232	@ 0xe8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b095      	sub	sp, #84	@ 0x54
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f2:	e853 3f00 	ldrex	r3, [r3]
 80020f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	330c      	adds	r3, #12
 8002106:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002108:	643a      	str	r2, [r7, #64]	@ 0x40
 800210a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800210e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002110:	e841 2300 	strex	r3, r2, [r1]
 8002114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e5      	bne.n	80020e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3314      	adds	r3, #20
 8002122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	e853 3f00 	ldrex	r3, [r3]
 800212a:	61fb      	str	r3, [r7, #28]
   return(result);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3314      	adds	r3, #20
 800213a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800213c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002144:	e841 2300 	strex	r3, r2, [r1]
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e5      	bne.n	800211c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	2b01      	cmp	r3, #1
 8002156:	d119      	bne.n	800218c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	60bb      	str	r3, [r7, #8]
   return(result);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f023 0310 	bic.w	r3, r3, #16
 800216e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002178:	61ba      	str	r2, [r7, #24]
 800217a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	6979      	ldr	r1, [r7, #20]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	613b      	str	r3, [r7, #16]
   return(result);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800219a:	bf00      	nop
 800219c:	3754      	adds	r7, #84	@ 0x54
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff ff7a 	bl	80020b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b21      	cmp	r3, #33	@ 0x21
 80021de:	d13e      	bne.n	800225e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e8:	d114      	bne.n	8002214 <UART_Transmit_IT+0x48>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d110      	bne.n	8002214 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002206:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	1c9a      	adds	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	e008      	b.n	8002226 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	1c59      	adds	r1, r3, #1
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6211      	str	r1, [r2, #32]
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4619      	mov	r1, r3
 8002234:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002248:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002258:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff02 	bl	8002094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08c      	sub	sp, #48	@ 0x30
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b22      	cmp	r3, #34	@ 0x22
 80022ac:	f040 80ae 	bne.w	800240c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b8:	d117      	bne.n	80022ea <UART_Receive_IT+0x50>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d113      	bne.n	80022ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d8:	b29a      	uxth	r2, r3
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	1c9a      	adds	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80022e8:	e026      	b.n	8002338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022fc:	d007      	beq.n	800230e <UART_Receive_IT+0x74>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10a      	bne.n	800231c <UART_Receive_IT+0x82>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e008      	b.n	800232e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002328:	b2da      	uxtb	r2, r3
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4619      	mov	r1, r3
 8002346:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002348:	2b00      	cmp	r3, #0
 800234a:	d15d      	bne.n	8002408 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0220 	bic.w	r2, r2, #32
 800235a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800236a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	2b01      	cmp	r3, #1
 8002390:	d135      	bne.n	80023fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	330c      	adds	r3, #12
 800239e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	e853 3f00 	ldrex	r3, [r3]
 80023a6:	613b      	str	r3, [r7, #16]
   return(result);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f023 0310 	bic.w	r3, r3, #16
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	623a      	str	r2, [r7, #32]
 80023ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023bc:	69f9      	ldr	r1, [r7, #28]
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	e841 2300 	strex	r3, r2, [r1]
 80023c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e5      	bne.n	8002398 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d10a      	bne.n	80023f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fe67 	bl	80020ca <HAL_UARTEx_RxEventCallback>
 80023fc:	e002      	b.n	8002404 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fe51 	bl	80020a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e002      	b.n	800240e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3730      	adds	r7, #48	@ 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002452:	f023 030c 	bic.w	r3, r3, #12
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	430b      	orrs	r3, r1
 800245e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2c      	ldr	r2, [pc, #176]	@ (800252c <UART_SetConfig+0x114>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d103      	bne.n	8002488 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002480:	f7ff faf4 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	e002      	b.n	800248e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002488:	f7ff fadc 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 800248c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <UART_SetConfig+0x118>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	0119      	lsls	r1, r3, #4
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009a      	lsls	r2, r3, #2
 80024b8:	441a      	add	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <UART_SetConfig+0x118>)
 80024c6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2064      	movs	r0, #100	@ 0x64
 80024ce:	fb00 f303 	mul.w	r3, r0, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	3332      	adds	r3, #50	@ 0x32
 80024d8:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <UART_SetConfig+0x118>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e4:	4419      	add	r1, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <UART_SetConfig+0x118>)
 80024fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2064      	movs	r0, #100	@ 0x64
 8002506:	fb00 f303 	mul.w	r3, r0, r3
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	3332      	adds	r3, #50	@ 0x32
 8002510:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <UART_SetConfig+0x118>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	440a      	add	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40013800 	.word	0x40013800
 8002530:	51eb851f 	.word	0x51eb851f

08002534 <memset>:
 8002534:	4603      	mov	r3, r0
 8002536:	4402      	add	r2, r0
 8002538:	4293      	cmp	r3, r2
 800253a:	d100      	bne.n	800253e <memset+0xa>
 800253c:	4770      	bx	lr
 800253e:	f803 1b01 	strb.w	r1, [r3], #1
 8002542:	e7f9      	b.n	8002538 <memset+0x4>

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	2600      	movs	r6, #0
 8002548:	4d0c      	ldr	r5, [pc, #48]	@ (800257c <__libc_init_array+0x38>)
 800254a:	4c0d      	ldr	r4, [pc, #52]	@ (8002580 <__libc_init_array+0x3c>)
 800254c:	1b64      	subs	r4, r4, r5
 800254e:	10a4      	asrs	r4, r4, #2
 8002550:	42a6      	cmp	r6, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	f000 f81a 	bl	800258c <_init>
 8002558:	2600      	movs	r6, #0
 800255a:	4d0a      	ldr	r5, [pc, #40]	@ (8002584 <__libc_init_array+0x40>)
 800255c:	4c0a      	ldr	r4, [pc, #40]	@ (8002588 <__libc_init_array+0x44>)
 800255e:	1b64      	subs	r4, r4, r5
 8002560:	10a4      	asrs	r4, r4, #2
 8002562:	42a6      	cmp	r6, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f855 3b04 	ldr.w	r3, [r5], #4
 800256c:	4798      	blx	r3
 800256e:	3601      	adds	r6, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f855 3b04 	ldr.w	r3, [r5], #4
 8002576:	4798      	blx	r3
 8002578:	3601      	adds	r6, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080025d0 	.word	0x080025d0
 8002580:	080025d0 	.word	0x080025d0
 8002584:	080025d0 	.word	0x080025d0
 8002588:	080025d4 	.word	0x080025d4

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	bf00      	nop
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
