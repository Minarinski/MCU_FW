
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800b9c0  0800b9c0  0001b9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c120  0800c120  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c120  0800c120  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c120  0800c120  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c120  0800c120  0001c120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c128  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002570  20000210  0800c334  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002780  0800c334  00022780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c857  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed8  00000000  00000000  0002cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000911  00000000  00000000  0002f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001844d  00000000  00000000  0002fe51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eaee  00000000  00000000  0004829e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000879d1  00000000  00000000  00056d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000469c  00000000  00000000  000de760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e2dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9a4 	.word	0x0800b9a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800b9a4 	.word	0x0800b9a4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc37 	bl	80009d0 <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9ad 	bl	80004ec <__aeabi_dmul>
 8001192:	f7ff fc83 	bl	8000a9c <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f92e 	bl	80003f8 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f9a4 	bl	80004ec <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffe6 	bl	800017c <__aeabi_dsub>
 80011b0:	f7ff fc74 	bl	8000a9c <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
    oldPos = newPos; //keep track of the last position in the buffer
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d2:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	4413      	add	r3, r2
 80011de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e2:	dd22      	ble.n	800122a <HAL_UARTEx_RxEventCallback+0x6a>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011ec:	81fb      	strh	r3, [r7, #14]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 80011f6:	4413      	add	r3, r2
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	4920      	ldr	r1, [pc, #128]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f008 f9ec 	bl	80095da <memcpy>

        oldPos = 0;  // point to the start of the buffer
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 800120c:	1899      	adds	r1, r3, r2
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001218:	f008 f9df 	bl	80095da <memcpy>
        newPos = (Size-datatocopy);  // update the position
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	e010      	b.n	800124c <HAL_UARTEx_RxEventCallback+0x8c>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001232:	4413      	add	r3, r2
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	4911      	ldr	r1, [pc, #68]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001238:	4618      	mov	r0, r3
 800123a:	f008 f9ce 	bl	80095da <memcpy>
        newPos = Size+oldPos; //update buffer position
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	4413      	add	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 800124a:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	490b      	ldr	r1, [pc, #44]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001252:	f005 fa0f 	bl	8006674 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); //disable the half transfer interrupt
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_UARTEx_RxEventCallback+0xc4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000218a 	.word	0x2000218a
 8001274:	20002188 	.word	0x20002188
 8001278:	200021cc 	.word	0x200021cc
 800127c:	2000218c 	.word	0x2000218c
 8001280:	20000310 	.word	0x20000310
 8001284:	20000358 	.word	0x20000358

08001288 <LCD_SendInternal>:

//LCD ============================================
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	460b      	mov	r3, r1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	b299      	uxth	r1, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2201      	movs	r2, #1
 80012a4:	4822      	ldr	r0, [pc, #136]	; (8001330 <LCD_SendInternal+0xa8>)
 80012a6:	f004 f955 	bl	8005554 <HAL_I2C_IsDeviceReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d000      	beq.n	80012b6 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80012b4:	e7f1      	b.n	800129a <LCD_SendInternal+0x12>
			break;
 80012b6:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f043 030c 	orr.w	r3, r3, #12
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | LCD_BACKLIGHT;
 80012d6:	7bba      	ldrb	r2, [r7, #14]
 80012d8:	797b      	ldrb	r3, [r7, #5]
 80012da:	4313      	orrs	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012e6:	7b7a      	ldrb	r2, [r7, #13]
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f043 030c 	orr.w	r3, r3, #12
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | LCD_BACKLIGHT;
 80012f6:	7b7a      	ldrb	r2, [r7, #13]
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	b299      	uxth	r1, r3
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2304      	movs	r3, #4
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <LCD_SendInternal+0xa8>)
 8001318:	f004 f81e 	bl	8005358 <HAL_I2C_Master_Transmit>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001320:	2005      	movs	r0, #5
 8001322:	f003 f91d 	bl	8004560 <HAL_Delay>
	return res;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000022c 	.word	0x2000022c

08001334 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2200      	movs	r2, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff9c 	bl	8001288 <LCD_SendInternal>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8001368:	79b9      	ldrb	r1, [r7, #6]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2201      	movs	r2, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff8a 	bl	8001288 <LCD_SendInternal>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0x30);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2130      	movs	r1, #48	; 0x30
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffd2 	bl	8001334 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0x02);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffcd 	bl	8001334 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	210c      	movs	r1, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffc8 	bl	8001334 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffc3 	bl	8001334 <LCD_SendCommand>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	6039      	str	r1, [r7, #0]
 80013c0:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80013c2:	e009      	b.n	80013d8 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffc3 	bl	8001358 <LCD_SendData>
		str++;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f1      	bne.n	80013c4 <LCD_SendString+0xe>
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	603a      	str	r2, [r7, #0]
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	460b      	mov	r3, r1
 80013f8:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001404:	b25b      	sxtb	r3, r3
 8001406:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8001408:	7afa      	ldrb	r2, [r7, #11]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff90 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e00b      	b.n	8001432 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff96 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b07      	cmp	r3, #7
 8001436:	ddf0      	ble.n	800141a <LCD_SET_CGRAM+0x30>
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <LCD_Write_Info>:

void LCD_Write_Info(struct DataFlash nowData, struct DataFlash nextData) {
 8001444:	b084      	sub	sp, #16
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	f107 0c10 	add.w	ip, r7, #16
 8001450:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8001454:	2101      	movs	r1, #1
 8001456:	204e      	movs	r0, #78	; 0x4e
 8001458:	f7ff ff6c 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	204e      	movs	r0, #78	; 0x4e
 8001460:	f7ff ff68 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 8001464:	f107 0315 	add.w	r3, r7, #21
 8001468:	4619      	mov	r1, r3
 800146a:	204e      	movs	r0, #78	; 0x4e
 800146c:	f7ff ffa3 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	204e      	movs	r0, #78	; 0x4e
 8001474:	f7ff ff70 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	e006      	b.n	800148c <LCD_Write_Info+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800147e:	2114      	movs	r1, #20
 8001480:	204e      	movs	r0, #78	; 0x4e
 8001482:	f7ff ff57 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b0a      	cmp	r3, #10
 8001490:	ddf5      	ble.n	800147e <LCD_Write_Info+0x3a>
	}
	printf("flag = %d\r\n", upDownFlag);
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <LCD_Write_Info+0xf8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <LCD_Write_Info+0xfc>)
 800149a:	f007 fd6d 	bl	8008f78 <iprintf>
	if(!upDownFlag)
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <LCD_Write_Info+0xf8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d104      	bne.n	80014b0 <LCD_Write_Info+0x6c>
		LCD_SendData(LCD_ADDR, 1);
 80014a6:	2101      	movs	r1, #1
 80014a8:	204e      	movs	r0, #78	; 0x4e
 80014aa:	f7ff ff55 	bl	8001358 <LCD_SendData>
 80014ae:	e003      	b.n	80014b8 <LCD_Write_Info+0x74>
	else
		LCD_SendData(LCD_ADDR, 2);
 80014b0:	2102      	movs	r1, #2
 80014b2:	204e      	movs	r0, #78	; 0x4e
 80014b4:	f7ff ff50 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 80014b8:	21c0      	movs	r1, #192	; 0xc0
 80014ba:	204e      	movs	r0, #78	; 0x4e
 80014bc:	f7ff ff3a 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 80014c0:	2103      	movs	r1, #3
 80014c2:	204e      	movs	r0, #78	; 0x4e
 80014c4:	f7ff ff48 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 80014c8:	f107 031a 	add.w	r3, r7, #26
 80014cc:	4619      	mov	r1, r3
 80014ce:	204e      	movs	r0, #78	; 0x4e
 80014d0:	f7ff ff71 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 80014d4:	2103      	movs	r1, #3
 80014d6:	204e      	movs	r0, #78	; 0x4e
 80014d8:	f7ff ff3e 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014dc:	2103      	movs	r1, #3
 80014de:	204e      	movs	r0, #78	; 0x4e
 80014e0:	f7ff ff3a 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014e4:	2103      	movs	r1, #3
 80014e6:	204e      	movs	r0, #78	; 0x4e
 80014e8:	f7ff ff36 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nextData.busStopID);
 80014ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014f0:	330a      	adds	r3, #10
 80014f2:	4619      	mov	r1, r3
 80014f4:	204e      	movs	r0, #78	; 0x4e
 80014f6:	f7ff ff5e 	bl	80013b6 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	e006      	b.n	800150e <LCD_Write_Info+0xca>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8001500:	2114      	movs	r1, #20
 8001502:	204e      	movs	r0, #78	; 0x4e
 8001504:	f7ff ff16 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	ddf5      	ble.n	8001500 <LCD_Write_Info+0xbc>
	}
	if(!upDownFlag)
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <LCD_Write_Info+0xf8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d104      	bne.n	8001526 <LCD_Write_Info+0xe2>
		LCD_SendData(LCD_ADDR, 1);
 800151c:	2101      	movs	r1, #1
 800151e:	204e      	movs	r0, #78	; 0x4e
 8001520:	f7ff ff1a 	bl	8001358 <LCD_SendData>
	else
		LCD_SendData(LCD_ADDR, 2);
}
 8001524:	e003      	b.n	800152e <LCD_Write_Info+0xea>
		LCD_SendData(LCD_ADDR, 2);
 8001526:	2102      	movs	r1, #2
 8001528:	204e      	movs	r0, #78	; 0x4e
 800152a:	f7ff ff15 	bl	8001358 <LCD_SendData>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001538:	b004      	add	sp, #16
 800153a:	4770      	bx	lr
 800153c:	20002186 	.word	0x20002186
 8001540:	0800b9c0 	.word	0x0800b9c0

08001544 <updateLCD>:

void updateLCD() {
 8001544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001548:	b096      	sub	sp, #88	; 0x58
 800154a:	af16      	add	r7, sp, #88	; 0x58
	LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <updateLCD+0xac>)
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <updateLCD+0xac>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	4827      	ldr	r0, [pc, #156]	; (80015f4 <updateLCD+0xb0>)
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	0119      	lsls	r1, r3, #4
 8001560:	440b      	add	r3, r1
 8001562:	18c4      	adds	r4, r0, r3
 8001564:	4923      	ldr	r1, [pc, #140]	; (80015f4 <updateLCD+0xb0>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	011a      	lsls	r2, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	440b      	add	r3, r1
 8001572:	461d      	mov	r5, r3
 8001574:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8001578:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800157c:	4666      	mov	r6, ip
 800157e:	462b      	mov	r3, r5
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800158a:	3510      	adds	r5, #16
 800158c:	f10c 0c10 	add.w	ip, ip, #16
 8001590:	4575      	cmp	r5, lr
 8001592:	d1f3      	bne.n	800157c <updateLCD+0x38>
 8001594:	4663      	mov	r3, ip
 8001596:	462a      	mov	r2, r5
 8001598:	8811      	ldrh	r1, [r2, #0]
 800159a:	7892      	ldrb	r2, [r2, #2]
 800159c:	8019      	strh	r1, [r3, #0]
 800159e:	709a      	strb	r2, [r3, #2]
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	469a      	mov	sl, r3
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	4699      	mov	r9, r3
 80015a8:	68a3      	ldr	r3, [r4, #8]
 80015aa:	4698      	mov	r8, r3
 80015ac:	68e3      	ldr	r3, [r4, #12]
 80015ae:	469e      	mov	lr, r3
 80015b0:	3410      	adds	r4, #16
 80015b2:	466e      	mov	r6, sp
 80015b4:	f104 0c20 	add.w	ip, r4, #32
 80015b8:	4635      	mov	r5, r6
 80015ba:	4623      	mov	r3, r4
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	3410      	adds	r4, #16
 80015c8:	3610      	adds	r6, #16
 80015ca:	4564      	cmp	r4, ip
 80015cc:	d1f4      	bne.n	80015b8 <updateLCD+0x74>
 80015ce:	4633      	mov	r3, r6
 80015d0:	4622      	mov	r2, r4
 80015d2:	8811      	ldrh	r1, [r2, #0]
 80015d4:	7892      	ldrb	r2, [r2, #2]
 80015d6:	8019      	strh	r1, [r3, #0]
 80015d8:	709a      	strb	r2, [r3, #2]
 80015da:	4650      	mov	r0, sl
 80015dc:	4649      	mov	r1, r9
 80015de:	4642      	mov	r2, r8
 80015e0:	4673      	mov	r3, lr
 80015e2:	f7ff ff2f 	bl	8001444 <LCD_Write_Info>
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ee:	bf00      	nop
 80015f0:	20002180 	.word	0x20002180
 80015f4:	2000039c 	.word	0x2000039c

080015f8 <notGPSLCD>:

void notGPSLCD(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 80015fe:	2101      	movs	r1, #1
 8001600:	204e      	movs	r0, #78	; 0x4e
 8001602:	f7ff fe97 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	204e      	movs	r0, #78	; 0x4e
 800160a:	f7ff fe93 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, data[0].busRouteno);
 800160e:	4925      	ldr	r1, [pc, #148]	; (80016a4 <notGPSLCD+0xac>)
 8001610:	204e      	movs	r0, #78	; 0x4e
 8001612:	f7ff fed0 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	204e      	movs	r0, #78	; 0x4e
 800161a:	f7ff fe9d 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	e006      	b.n	8001632 <notGPSLCD+0x3a>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8001624:	2114      	movs	r1, #20
 8001626:	204e      	movs	r0, #78	; 0x4e
 8001628:	f7ff fe84 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0a      	cmp	r3, #10
 8001636:	ddf5      	ble.n	8001624 <notGPSLCD+0x2c>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001638:	2101      	movs	r1, #1
 800163a:	204e      	movs	r0, #78	; 0x4e
 800163c:	f7ff fe8c 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001640:	21c0      	movs	r1, #192	; 0xc0
 8001642:	204e      	movs	r0, #78	; 0x4e
 8001644:	f7ff fe76 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 8001648:	2103      	movs	r1, #3
 800164a:	204e      	movs	r0, #78	; 0x4e
 800164c:	f7ff fe84 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "-----");
 8001650:	4915      	ldr	r1, [pc, #84]	; (80016a8 <notGPSLCD+0xb0>)
 8001652:	204e      	movs	r0, #78	; 0x4e
 8001654:	f7ff feaf 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 8001658:	2103      	movs	r1, #3
 800165a:	204e      	movs	r0, #78	; 0x4e
 800165c:	f7ff fe7c 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8001660:	2103      	movs	r1, #3
 8001662:	204e      	movs	r0, #78	; 0x4e
 8001664:	f7ff fe78 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8001668:	2103      	movs	r1, #3
 800166a:	204e      	movs	r0, #78	; 0x4e
 800166c:	f7ff fe74 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "-----");
 8001670:	490d      	ldr	r1, [pc, #52]	; (80016a8 <notGPSLCD+0xb0>)
 8001672:	204e      	movs	r0, #78	; 0x4e
 8001674:	f7ff fe9f 	bl	80013b6 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	e006      	b.n	800168c <notGPSLCD+0x94>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800167e:	2114      	movs	r1, #20
 8001680:	204e      	movs	r0, #78	; 0x4e
 8001682:	f7ff fe57 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	ddf5      	ble.n	800167e <notGPSLCD+0x86>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001692:	2101      	movs	r1, #1
 8001694:	204e      	movs	r0, #78	; 0x4e
 8001696:	f7ff fe5f 	bl	8001358 <LCD_SendData>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200003a1 	.word	0x200003a1
 80016a8:	0800b9cc 	.word	0x0800b9cc

080016ac <LCD_Write_Arrive>:

void LCD_Write_Arrive(struct DataFlash nowData) {
 80016ac:	b084      	sub	sp, #16
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	f107 0c10 	add.w	ip, r7, #16
 80016b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 80016bc:	2101      	movs	r1, #1
 80016be:	204e      	movs	r0, #78	; 0x4e
 80016c0:	f7ff fe38 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	204e      	movs	r0, #78	; 0x4e
 80016c8:	f7ff fe34 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 80016cc:	f107 0315 	add.w	r3, r7, #21
 80016d0:	4619      	mov	r1, r3
 80016d2:	204e      	movs	r0, #78	; 0x4e
 80016d4:	f7ff fe6f 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	204e      	movs	r0, #78	; 0x4e
 80016dc:	f7ff fe3c 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	e006      	b.n	80016f4 <LCD_Write_Arrive+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80016e6:	2114      	movs	r1, #20
 80016e8:	204e      	movs	r0, #78	; 0x4e
 80016ea:	f7ff fe23 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b0a      	cmp	r3, #10
 80016f8:	ddf5      	ble.n	80016e6 <LCD_Write_Arrive+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 80016fa:	2101      	movs	r1, #1
 80016fc:	204e      	movs	r0, #78	; 0x4e
 80016fe:	f7ff fe2b 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001702:	21c0      	movs	r1, #192	; 0xc0
 8001704:	204e      	movs	r0, #78	; 0x4e
 8001706:	f7ff fe15 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 800170a:	2103      	movs	r1, #3
 800170c:	204e      	movs	r0, #78	; 0x4e
 800170e:	f7ff fe23 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8001712:	2103      	movs	r1, #3
 8001714:	204e      	movs	r0, #78	; 0x4e
 8001716:	f7ff fe1f 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 800171a:	2103      	movs	r1, #3
 800171c:	204e      	movs	r0, #78	; 0x4e
 800171e:	f7ff fe1b 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 8001722:	f107 031a 	add.w	r3, r7, #26
 8001726:	4619      	mov	r1, r3
 8001728:	204e      	movs	r0, #78	; 0x4e
 800172a:	f7ff fe44 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 4);
 800172e:	2104      	movs	r1, #4
 8001730:	204e      	movs	r0, #78	; 0x4e
 8001732:	f7ff fe11 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 8001736:	2104      	movs	r1, #4
 8001738:	204e      	movs	r0, #78	; 0x4e
 800173a:	f7ff fe0d 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 800173e:	2104      	movs	r1, #4
 8001740:	204e      	movs	r0, #78	; 0x4e
 8001742:	f7ff fe09 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 4; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	e006      	b.n	800175a <LCD_Write_Arrive+0xae>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800174c:	2114      	movs	r1, #20
 800174e:	204e      	movs	r0, #78	; 0x4e
 8001750:	f7ff fdf0 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 4; i++) {
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b03      	cmp	r3, #3
 800175e:	ddf5      	ble.n	800174c <LCD_Write_Arrive+0xa0>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001760:	2101      	movs	r1, #1
 8001762:	204e      	movs	r0, #78	; 0x4e
 8001764:	f7ff fdf8 	bl	8001358 <LCD_SendData>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001772:	b004      	add	sp, #16
 8001774:	4770      	bx	lr
	...

08001778 <Flash_Unlock>:

//Flash===========================================================

int dataIdx = 0;

void Flash_Unlock(void) {
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;  // Key1
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <Flash_Unlock+0x18>)
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <Flash_Unlock+0x1c>)
 8001780:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;  // Key2
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <Flash_Unlock+0x18>)
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <Flash_Unlock+0x20>)
 8001786:	605a      	str	r2, [r3, #4]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40022000 	.word	0x40022000
 8001794:	45670123 	.word	0x45670123
 8001798:	cdef89ab 	.word	0xcdef89ab

0800179c <Flash_Lock>:

void Flash_Lock(void) {
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <Flash_Lock+0x18>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <Flash_Lock+0x18>)
 80017a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017aa:	6113      	str	r3, [r2, #16]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40022000 	.word	0x40022000

080017b8 <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t data) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
	while (FLASH->SR & FLASH_SR_BSY)
 80017c4:	bf00      	nop
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <Flash_Write+0x54>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f9      	bne.n	80017c6 <Flash_Write+0xe>
		;  // Busy flag 체크

	FLASH->CR |= FLASH_CR_PG;  // Programming mode ?��?��
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <Flash_Write+0x54>)
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <Flash_Write+0x54>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*) address = data;  // ?��?��?�� 기록
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	b292      	uxth	r2, r2
 80017e4:	801a      	strh	r2, [r3, #0]

	while (FLASH->SR & FLASH_SR_BSY)
 80017e6:	bf00      	nop
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <Flash_Write+0x54>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f9      	bne.n	80017e8 <Flash_Write+0x30>
		;  // Busy flag 체크

	FLASH->CR &= ~FLASH_CR_PG;  // Programming mode ?��?��
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <Flash_Write+0x54>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <Flash_Write+0x54>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6113      	str	r3, [r2, #16]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <Flash_Write_Char>:
	uint16_t value = (uint16_t) strtol((const char*) StrData, NULL, 10);
	Flash_Write(address, value);  // ?��?�� 값을 ?��?��?�� 메모리에 ???��
	Flash_Lock();  // ?��?��?�� 메모�???? ?���????
}

uint32_t Flash_Write_Char(uint32_t address, uint8_t CharData) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	Flash_Unlock();
 800181c:	f7ff ffac 	bl	8001778 <Flash_Unlock>
	Flash_Write(address, CharData);
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	4619      	mov	r1, r3
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffc7 	bl	80017b8 <Flash_Write>
	Flash_Lock();
 800182a:	f7ff ffb7 	bl	800179c <Flash_Lock>
	return address + 0x02;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3302      	adds	r3, #2
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <Flash_Write_Str>:

uint32_t Flash_Write_Str(uint32_t address, uint8_t *StrData) {
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e00b      	b.n	8001862 <Flash_Write_Str+0x28>
		address = Flash_Write_Char(address, StrData[i]);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffdb 	bl	8001810 <Flash_Write_Char>
 800185a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fc7e 	bl	8000164 <strlen>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8ec      	bhi.n	800184a <Flash_Write_Str+0x10>
	}
	//printf("%x\r\n", address);
	return address;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t address, uint8_t *StrData) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	char *token;

	token = strtok(StrData, ",");
 8001886:	4999      	ldr	r1, [pc, #612]	; (8001aec <Flash_Write_Data+0x270>)
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f007 fd97 	bl	80093bc <strtok>
 800188e:	60f8      	str	r0, [r7, #12]
	if (token[0] == 'D') {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b44      	cmp	r3, #68	; 0x44
 8001896:	f040 80a7 	bne.w	80019e8 <Flash_Write_Data+0x16c>
		token = strtok(NULL, ",");
 800189a:	4994      	ldr	r1, [pc, #592]	; (8001aec <Flash_Write_Data+0x270>)
 800189c:	2000      	movs	r0, #0
 800189e:	f007 fd8d 	bl	80093bc <strtok>
 80018a2:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02c      	beq.n	8001904 <Flash_Write_Data+0x88>
			strncpy(data[dataIdx].busNM, token,
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <Flash_Write_Data+0x274>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	011a      	lsls	r2, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	4a8e      	ldr	r2, [pc, #568]	; (8001af4 <Flash_Write_Data+0x278>)
 80018ba:	4413      	add	r3, r2
 80018bc:	2204      	movs	r2, #4
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f007 fd67 	bl	8009394 <strncpy>
					sizeof(data[dataIdx].busNM) - 1);
			data[dataIdx].busNM[sizeof(data[dataIdx].busNM) - 1] = '\0';
 80018c6:	4b8a      	ldr	r3, [pc, #552]	; (8001af0 <Flash_Write_Data+0x274>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	498a      	ldr	r1, [pc, #552]	; (8001af4 <Flash_Write_Data+0x278>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	011a      	lsls	r2, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	3304      	adds	r3, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busNM);
 80018de:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <Flash_Write_Data+0x274>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	011a      	lsls	r2, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	4a81      	ldr	r2, [pc, #516]	; (8001af4 <Flash_Write_Data+0x278>)
 80018ee:	4413      	add	r3, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa1 	bl	800183a <Flash_Write_Str>
 80018f8:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff87 	bl	8001810 <Flash_Write_Char>
 8001902:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001904:	4979      	ldr	r1, [pc, #484]	; (8001aec <Flash_Write_Data+0x270>)
 8001906:	2000      	movs	r0, #0
 8001908:	f007 fd58 	bl	80093bc <strtok>
 800190c:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d02e      	beq.n	8001972 <Flash_Write_Data+0xf6>
			strncpy(data[dataIdx].busRouteno, token,
 8001914:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <Flash_Write_Data+0x274>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	011a      	lsls	r2, r3, #4
 8001920:	4413      	add	r3, r2
 8001922:	4a74      	ldr	r2, [pc, #464]	; (8001af4 <Flash_Write_Data+0x278>)
 8001924:	4413      	add	r3, r2
 8001926:	3305      	adds	r3, #5
 8001928:	2204      	movs	r2, #4
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	f007 fd31 	bl	8009394 <strncpy>
					sizeof(data[dataIdx].busRouteno) - 1);
			data[dataIdx].busRouteno[sizeof(data[dataIdx].busRouteno) - 1] =
 8001932:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <Flash_Write_Data+0x274>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	496f      	ldr	r1, [pc, #444]	; (8001af4 <Flash_Write_Data+0x278>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	011a      	lsls	r2, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	440b      	add	r3, r1
 8001944:	3309      	adds	r3, #9
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
					'\0';
			address = Flash_Write_Str(address, data[dataIdx].busRouteno);
 800194a:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <Flash_Write_Data+0x274>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	011a      	lsls	r2, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	4a66      	ldr	r2, [pc, #408]	; (8001af4 <Flash_Write_Data+0x278>)
 800195a:	4413      	add	r3, r2
 800195c:	3305      	adds	r3, #5
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff6a 	bl	800183a <Flash_Write_Str>
 8001966:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff50 	bl	8001810 <Flash_Write_Char>
 8001970:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001972:	495e      	ldr	r1, [pc, #376]	; (8001aec <Flash_Write_Data+0x270>)
 8001974:	2000      	movs	r0, #0
 8001976:	f007 fd21 	bl	80093bc <strtok>
 800197a:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80af 	beq.w	8001ae2 <Flash_Write_Data+0x266>
			strncpy(data[dataIdx].busStopID, token,
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <Flash_Write_Data+0x274>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	011a      	lsls	r2, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	3308      	adds	r3, #8
 8001994:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <Flash_Write_Data+0x278>)
 8001996:	4413      	add	r3, r2
 8001998:	3302      	adds	r3, #2
 800199a:	2207      	movs	r2, #7
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fcf8 	bl	8009394 <strncpy>
					sizeof(data[dataIdx].busStopID) - 1);
			data[dataIdx].busStopID[sizeof(data[dataIdx].busStopID) - 1] = '\0';
 80019a4:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <Flash_Write_Data+0x274>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4952      	ldr	r1, [pc, #328]	; (8001af4 <Flash_Write_Data+0x278>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	011a      	lsls	r2, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	3311      	adds	r3, #17
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busStopID);
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <Flash_Write_Data+0x274>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	011a      	lsls	r2, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	3308      	adds	r3, #8
 80019cc:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <Flash_Write_Data+0x278>)
 80019ce:	4413      	add	r3, r2
 80019d0:	3302      	adds	r3, #2
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff30 	bl	800183a <Flash_Write_Str>
 80019da:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff16 	bl	8001810 <Flash_Write_Char>
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	e07c      	b.n	8001ae2 <Flash_Write_Data+0x266>
		}
	} else {
		token = strtok(NULL, ",");
 80019e8:	4940      	ldr	r1, [pc, #256]	; (8001aec <Flash_Write_Data+0x270>)
 80019ea:	2000      	movs	r0, #0
 80019ec:	f007 fce6 	bl	80093bc <strtok>
 80019f0:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d030      	beq.n	8001a5a <Flash_Write_Data+0x1de>
			strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <Flash_Write_Data+0x274>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	011a      	lsls	r2, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	3310      	adds	r3, #16
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <Flash_Write_Data+0x278>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f007 fcbe 	bl	8009394 <strncpy>
			data[dataIdx].lati[sizeof(data[dataIdx].lati) - 1] = '\0';
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <Flash_Write_Data+0x274>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <Flash_Write_Data+0x278>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	011a      	lsls	r2, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3321      	adds	r3, #33	; 0x21
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].lati);
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <Flash_Write_Data+0x274>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	011a      	lsls	r2, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3310      	adds	r3, #16
 8001a40:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <Flash_Write_Data+0x278>)
 8001a42:	4413      	add	r3, r2
 8001a44:	3302      	adds	r3, #2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fef6 	bl	800183a <Flash_Write_Str>
 8001a4e:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fedc 	bl	8001810 <Flash_Write_Char>
 8001a58:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001a5a:	4924      	ldr	r1, [pc, #144]	; (8001aec <Flash_Write_Data+0x270>)
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f007 fcad 	bl	80093bc <strtok>
 8001a62:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d030      	beq.n	8001acc <Flash_Write_Data+0x250>
			strncpy(data[dataIdx].longi, token,
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <Flash_Write_Data+0x274>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	011a      	lsls	r2, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	3320      	adds	r3, #32
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <Flash_Write_Data+0x278>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 fc85 	bl	8009394 <strncpy>
					sizeof(data[dataIdx].longi) - 1);
			data[dataIdx].longi[sizeof(data[dataIdx].longi) - 1] = '\0';
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <Flash_Write_Data+0x274>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4919      	ldr	r1, [pc, #100]	; (8001af4 <Flash_Write_Data+0x278>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	011a      	lsls	r2, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3331      	adds	r3, #49	; 0x31
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].longi);
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <Flash_Write_Data+0x274>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	011a      	lsls	r2, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3320      	adds	r3, #32
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <Flash_Write_Data+0x278>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff febd 	bl	800183a <Flash_Write_Str>
 8001ac0:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, '!');
 8001ac2:	2121      	movs	r1, #33	; 0x21
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fea3 	bl	8001810 <Flash_Write_Char>
 8001aca:	6078      	str	r0, [r7, #4]
		}
		dataIdx += 1;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <Flash_Write_Data+0x274>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <Flash_Write_Data+0x274>)
 8001ad4:	6013      	str	r3, [r2, #0]
		if (dataIdx == 2) {
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <Flash_Write_Data+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d101      	bne.n	8001ae2 <Flash_Write_Data+0x266>
			updateLCD();
 8001ade:	f7ff fd31 	bl	8001544 <updateLCD>
		}
	}
//	printf("busNM:%s, busRouteNo:%s, BusStopID:%s, lati:%s, longi:%s\r\n",
//			data.busNM, data.busRouteno, data.busStopID, data.lati, data.longi);
	return address;
 8001ae2:	687b      	ldr	r3, [r7, #4]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0800b9d4 	.word	0x0800b9d4
 8001af0:	2000240c 	.word	0x2000240c
 8001af4:	2000039c 	.word	0x2000039c

08001af8 <Flash_Read>:

uint16_t Flash_Read(uint32_t address) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) address; // �?????��?�� ?��?��?�� 메모�???? 주소?��?�� ?��?��?�� ?���????
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <Flash_Erase_Page>:

void Flash_Erase_Page(uint32_t address) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	Flash_Unlock();  // ?��?��?�� 메모�???? ?��?��
 8001b18:	f7ff fe2e 	bl	8001778 <Flash_Unlock>

	FLASH->CR |= FLASH_CR_PER;   // Page Erase 비트 ?��?��
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6113      	str	r3, [r2, #16]
	FLASH->AR = address;         // �?????�� ?��?���?????�� 주소 ?��?��
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;  // Erase ?��?��
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b38:	6113      	str	r3, [r2, #16]

	while (FLASH->SR & FLASH_SR_BSY)
 8001b3a:	bf00      	nop
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <Flash_Erase_Page+0x2c>
		;  // ?��?��?�� ?��료될 ?��까�? ??�????

	FLASH->CR &= ~FLASH_CR_PER;  // Page Erase 비트 ?��?��
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <Flash_Erase_Page+0x50>)
 8001b4e:	f023 0302 	bic.w	r3, r3, #2
 8001b52:	6113      	str	r3, [r2, #16]

	Flash_Lock();  // ?��?��?�� 메모�???? ?���????
 8001b54:	f7ff fe22 	bl	800179c <Flash_Lock>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40022000 	.word	0x40022000

08001b64 <splitData>:

void splitData(char *strData) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	char *token;

	token = strtok(strData, ","); // CarNM
 8001b6c:	4934      	ldr	r1, [pc, #208]	; (8001c40 <splitData+0xdc>)
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f007 fc24 	bl	80093bc <strtok>
 8001b74:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <splitData+0xe0>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	011a      	lsls	r2, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	4a30      	ldr	r2, [pc, #192]	; (8001c48 <splitData+0xe4>)
 8001b86:	4413      	add	r3, r2
 8001b88:	2204      	movs	r2, #4
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f007 fc01 	bl	8009394 <strncpy>

	token = strtok(NULL, ","); // RouteNo
 8001b92:	492b      	ldr	r1, [pc, #172]	; (8001c40 <splitData+0xdc>)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f007 fc11 	bl	80093bc <strtok>
 8001b9a:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busRouteno, token,
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <splitData+0xe0>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	011a      	lsls	r2, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <splitData+0xe4>)
 8001bac:	4413      	add	r3, r2
 8001bae:	3305      	adds	r3, #5
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	68f9      	ldr	r1, [r7, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fbed 	bl	8009394 <strncpy>
			sizeof(data[dataIdx].busRouteno) - 1);

	token = strtok(NULL, ","); // StopID
 8001bba:	4921      	ldr	r1, [pc, #132]	; (8001c40 <splitData+0xdc>)
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f007 fbfd 	bl	80093bc <strtok>
 8001bc2:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busStopID, token,
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <splitData+0xe0>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	011a      	lsls	r2, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <splitData+0xe4>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	2207      	movs	r2, #7
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 fbd8 	bl	8009394 <strncpy>
			sizeof(data[dataIdx].busStopID) - 1);

	token = strtok(NULL, ","); // lati
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <splitData+0xdc>)
 8001be6:	2000      	movs	r0, #0
 8001be8:	f007 fbe8 	bl	80093bc <strtok>
 8001bec:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <splitData+0xe0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	011a      	lsls	r2, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <splitData+0xe4>)
 8001c00:	4413      	add	r3, r2
 8001c02:	3302      	adds	r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	68f9      	ldr	r1, [r7, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f007 fbc3 	bl	8009394 <strncpy>

	token = strtok(NULL, "!"); // longi
 8001c0e:	490f      	ldr	r1, [pc, #60]	; (8001c4c <splitData+0xe8>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f007 fbd3 	bl	80093bc <strtok>
 8001c16:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <splitData+0xe0>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	011a      	lsls	r2, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	3320      	adds	r3, #32
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <splitData+0xe4>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f007 fbae 	bl	8009394 <strncpy>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0800b9d4 	.word	0x0800b9d4
 8001c44:	2000240c 	.word	0x2000240c
 8001c48:	2000039c 	.word	0x2000039c
 8001c4c:	0800b9d8 	.word	0x0800b9d8

08001c50 <CallData>:

uint32_t CallData(uint32_t address) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b096      	sub	sp, #88	; 0x58
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	char a[70] = { 0, };
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2242      	movs	r2, #66	; 0x42
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 fb7b 	bl	8009360 <memset>
	int i = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		a[i] = (char) Flash_Read(address);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff42 	bl	8001af8 <Flash_Read>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b2d9      	uxtb	r1, r3
 8001c78:	f107 020c 	add.w	r2, r7, #12
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	4413      	add	r3, r2
 8001c80:	460a      	mov	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
		address += 0x02;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3302      	adds	r3, #2
 8001c88:	607b      	str	r3, [r7, #4]
		if (a[i] == 0xFF) {
 8001c8a:	f107 020c 	add.w	r2, r7, #12
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	4413      	add	r3, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2bff      	cmp	r3, #255	; 0xff
 8001c96:	d101      	bne.n	8001c9c <CallData+0x4c>
			return address;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	e01e      	b.n	8001cda <CallData+0x8a>
		}
		if (a[i] == '!') {
 8001c9c:	f107 020c 	add.w	r2, r7, #12
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b21      	cmp	r3, #33	; 0x21
 8001ca8:	d113      	bne.n	8001cd2 <CallData+0x82>
			splitData(a);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff58 	bl	8001b64 <splitData>
			dataIdx += 1;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <CallData+0x94>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <CallData+0x94>)
 8001cbc:	6013      	str	r3, [r2, #0]
			i = -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
			memset(a, 0, 60);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	223c      	movs	r2, #60	; 0x3c
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f007 fb47 	bl	8009360 <memset>
		}
		i += 1;
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	657b      	str	r3, [r7, #84]	; 0x54
		a[i] = (char) Flash_Read(address);
 8001cd8:	e7c9      	b.n	8001c6e <CallData+0x1e>
	}
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3758      	adds	r7, #88	; 0x58
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000240c 	.word	0x2000240c

08001ce8 <Flash_Clear>:

void Flash_Clear(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
		Flash_Erase_Page(0x0800CC00);
 8001cec:	480b      	ldr	r0, [pc, #44]	; (8001d1c <Flash_Clear+0x34>)
 8001cee:	f7ff ff0f 	bl	8001b10 <Flash_Erase_Page>
		Flash_Erase_Page(0x0800D000);
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <Flash_Clear+0x38>)
 8001cf4:	f7ff ff0c 	bl	8001b10 <Flash_Erase_Page>
		Flash_Erase_Page(0x0800D400);
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <Flash_Clear+0x3c>)
 8001cfa:	f7ff ff09 	bl	8001b10 <Flash_Erase_Page>
		Flash_Erase_Page(0x0800D800);
 8001cfe:	480a      	ldr	r0, [pc, #40]	; (8001d28 <Flash_Clear+0x40>)
 8001d00:	f7ff ff06 	bl	8001b10 <Flash_Erase_Page>
		Flash_Erase_Page(0x0800DC00);
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <Flash_Clear+0x44>)
 8001d06:	f7ff ff03 	bl	8001b10 <Flash_Erase_Page>
		Flash_Erase_Page(0x0800E000);
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <Flash_Clear+0x48>)
 8001d0c:	f7ff ff00 	bl	8001b10 <Flash_Erase_Page>
		Flash_Erase_Page(0x0800E400);
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <Flash_Clear+0x4c>)
 8001d12:	f7ff fefd 	bl	8001b10 <Flash_Erase_Page>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0800cc00 	.word	0x0800cc00
 8001d20:	0800d000 	.word	0x0800d000
 8001d24:	0800d400 	.word	0x0800d400
 8001d28:	0800d800 	.word	0x0800d800
 8001d2c:	0800dc00 	.word	0x0800dc00
 8001d30:	0800e000 	.word	0x0800e000
 8001d34:	0800e400 	.word	0x0800e400

08001d38 <convertToDecimalDegrees>:

// GPS=======================================================
char latitude[16];
char longitude[16];

double convertToDecimalDegrees(const char *coordinate, char type) {
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
	int degrees;
	double minutes;
	double decimalDegrees;

	if (type == 'L') { // Latitude
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b4c      	cmp	r3, #76	; 0x4c
 8001d48:	d116      	bne.n	8001d78 <convertToDecimalDegrees+0x40>
		// �?? ?�� ?���?? (?��)
		degrees = (coordinate[0] - '0') * 10 + (coordinate[1] - '0'); // dd
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b30      	subs	r3, #48	; 0x30
 8001d64:	4413      	add	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
		// ?��머�? �??�?? (�??)
		minutes = atof(coordinate + 2); // mm.mmmm
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fc1b 	bl	80075a8 <atof>
 8001d72:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d76:	e025      	b.n	8001dc4 <convertToDecimalDegrees+0x8c>
	} else if (type == 'G') { // Longitude
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b47      	cmp	r3, #71	; 0x47
 8001d7c:	d11d      	bne.n	8001dba <convertToDecimalDegrees+0x82>
		// �?? ?�� ?���?? (?��)
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3b30      	subs	r3, #48	; 0x30
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	fb02 f103 	mul.w	r1, r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	18ca      	adds	r2, r1, r3
				+ (coordinate[2] - '0'); // ddd
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3302      	adds	r3, #2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3b30      	subs	r3, #48	; 0x30
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001da6:	4413      	add	r3, r2
 8001da8:	61fb      	str	r3, [r7, #28]
		// ?��머�? �??�?? (�??)
		minutes = atof(coordinate + 3); // mm.mmmm
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3303      	adds	r3, #3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 fbfa 	bl	80075a8 <atof>
 8001db4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001db8:	e004      	b.n	8001dc4 <convertToDecimalDegrees+0x8c>
	} else {
		printf("Invalid type\n");
 8001dba:	4811      	ldr	r0, [pc, #68]	; (8001e00 <convertToDecimalDegrees+0xc8>)
 8001dbc:	f007 f942 	bl	8009044 <puts>
		return;
 8001dc0:	bf00      	nop
 8001dc2:	e017      	b.n	8001df4 <convertToDecimalDegrees+0xbc>
	}

	// ?��?��?�� �??�?? 계산
	decimalDegrees = degrees + (minutes / 60.0);
 8001dc4:	69f8      	ldr	r0, [r7, #28]
 8001dc6:	f7fe fb27 	bl	8000418 <__aeabi_i2d>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	460d      	mov	r5, r1
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <convertToDecimalDegrees+0xcc>)
 8001dd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dd8:	f7fe fcb2 	bl	8000740 <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe f9cc 	bl	8000180 <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decimalDegrees;
 8001df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800b9dc 	.word	0x0800b9dc
 8001e04:	404e0000 	.word	0x404e0000

08001e08 <parseGPSData>:

void parseGPSData(uint8_t *buffer, uint16_t size) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
	char *nmeaGGA = NULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
	double la, lo;
	//xprintf("%s", (char*)buffer);
	// DMA 버퍼?��?�� $GPGGA 문자?��?�� �????��
	nmeaGGA = strstr((char*) buffer, "GLL");
 8001e18:	4938      	ldr	r1, [pc, #224]	; (8001efc <parseGPSData+0xf4>)
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f007 fb2a 	bl	8009474 <strstr>
 8001e20:	60f8      	str	r0, [r7, #12]
	if (nmeaGGA != NULL) {
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d064      	beq.n	8001ef2 <parseGPSData+0xea>
		char *token;

		// NMEA 메시�??? ?��?��?��
		token = strtok(nmeaGGA, ",");
 8001e28:	4935      	ldr	r1, [pc, #212]	; (8001f00 <parseGPSData+0xf8>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f007 fac6 	bl	80093bc <strtok>
 8001e30:	60b8      	str	r0, [r7, #8]

//        // UTC ?���??? (무시)
//        token = strtok(NULL, ",");

		// ?��?��
		token = strtok(NULL, ",");
 8001e32:	4933      	ldr	r1, [pc, #204]	; (8001f00 <parseGPSData+0xf8>)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f007 fac1 	bl	80093bc <strtok>
 8001e3a:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <parseGPSData+0x56>
			strncpy(latitude, token, sizeof(latitude) - 1);
 8001e42:	220f      	movs	r2, #15
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	482f      	ldr	r0, [pc, #188]	; (8001f04 <parseGPSData+0xfc>)
 8001e48:	f007 faa4 	bl	8009394 <strncpy>
			latitude[sizeof(latitude) - 1] = '\0';
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <parseGPSData+0xfc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	73da      	strb	r2, [r3, #15]
			la = convertToDecimalDegrees(latitude, 'L');
 8001e52:	214c      	movs	r1, #76	; 0x4c
 8001e54:	482b      	ldr	r0, [pc, #172]	; (8001f04 <parseGPSData+0xfc>)
 8001e56:	f7ff ff6f 	bl	8001d38 <convertToDecimalDegrees>
 8001e5a:	e9c7 0106 	strd	r0, r1, [r7, #24]
		}

		// N/S ?��?��
		token = strtok(NULL, ",");
 8001e5e:	4928      	ldr	r1, [pc, #160]	; (8001f00 <parseGPSData+0xf8>)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f007 faab 	bl	80093bc <strtok>
 8001e66:	60b8      	str	r0, [r7, #8]

		// 경도
		token = strtok(NULL, ",");
 8001e68:	4925      	ldr	r1, [pc, #148]	; (8001f00 <parseGPSData+0xf8>)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f007 faa6 	bl	80093bc <strtok>
 8001e70:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <parseGPSData+0x8c>
			strncpy(longitude, token, sizeof(longitude) - 1);
 8001e78:	220f      	movs	r2, #15
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	4822      	ldr	r0, [pc, #136]	; (8001f08 <parseGPSData+0x100>)
 8001e7e:	f007 fa89 	bl	8009394 <strncpy>
			longitude[sizeof(longitude) - 1] = '\0';
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <parseGPSData+0x100>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	73da      	strb	r2, [r3, #15]
			lo = convertToDecimalDegrees(longitude, 'G');
 8001e88:	2147      	movs	r1, #71	; 0x47
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <parseGPSData+0x100>)
 8001e8c:	f7ff ff54 	bl	8001d38 <convertToDecimalDegrees>
 8001e90:	e9c7 0104 	strd	r0, r1, [r7, #16]
		}

		// E/W ?��?��
		token = strtok(NULL, ",");
 8001e94:	491a      	ldr	r1, [pc, #104]	; (8001f00 <parseGPSData+0xf8>)
 8001e96:	2000      	movs	r0, #0
 8001e98:	f007 fa90 	bl	80093bc <strtok>
 8001e9c:	60b8      	str	r0, [r7, #8]

		// ?��?��?�� 결과�??? ?��버그 출력
		printf("\r\nLatitude: %.6f, Longitude: %.6f\r\n", la, lo);
 8001e9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eaa:	4818      	ldr	r0, [pc, #96]	; (8001f0c <parseGPSData+0x104>)
 8001eac:	f007 f864 	bl	8008f78 <iprintf>
		if(la >= 200 || lo >= 200){
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <parseGPSData+0x108>)
 8001eb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eba:	f7fe fd9d 	bl	80009f8 <__aeabi_dcmpge>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <parseGPSData+0xd0>
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <parseGPSData+0x108>)
 8001eca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ece:	f7fe fd93 	bl	80009f8 <__aeabi_dcmpge>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <parseGPSData+0xd8>
			GPSLEDFlag = 0;
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <parseGPSData+0x10c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e002      	b.n	8001ee6 <parseGPSData+0xde>
		}
		else{
			GPSLEDFlag = 1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <parseGPSData+0x10c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
		}
		CheckGPS(la, lo);
 8001ee6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eee:	f000 f813 	bl	8001f18 <CheckGPS>
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800b9ec 	.word	0x0800b9ec
 8001f00:	0800b9d4 	.word	0x0800b9d4
 8001f04:	20002410 	.word	0x20002410
 8001f08:	20002420 	.word	0x20002420
 8001f0c:	0800b9f0 	.word	0x0800b9f0
 8001f10:	40690000 	.word	0x40690000
 8001f14:	20002184 	.word	0x20002184

08001f18 <CheckGPS>:

int checkGPSCnt = 0;

void CheckGPS(double nowLati, double nowLongi) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f22:	e9c7 2300 	strd	r2, r3, [r7]
	double busStopLati = atof(data[nowIdx].lati);
 8001f26:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <CheckGPS+0x148>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	011a      	lsls	r2, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	3310      	adds	r3, #16
 8001f36:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <CheckGPS+0x14c>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f005 fb33 	bl	80075a8 <atof>
 8001f42:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double busStopLongi = atof(data[nowIdx].longi);
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <CheckGPS+0x148>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	011a      	lsls	r2, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	3320      	adds	r3, #32
 8001f56:	4a43      	ldr	r2, [pc, #268]	; (8002064 <CheckGPS+0x14c>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 fb23 	bl	80075a8 <atof>
 8001f62:	e9c7 0104 	strd	r0, r1, [r7, #16]
	//printf("La : %f, La1 : %f\r\n", busStopLati - 0.00009, busStopLati + 0.00009);
	//printf("NowLa : %f, NowLo : %f\r\n", nowLati, nowLongi);
	//printf("First : %d\r\n", nowLati >= (busStopLati - 0.00009)
	//		&& nowLati <= (busStopLati + 0.00009));
	if (nowLati >= (busStopLati - (0.000009 * GPSRange))
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <CheckGPS+0x150>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fa54 	bl	8000418 <__aeabi_i2d>
 8001f70:	a337      	add	r3, pc, #220	; (adr r3, 8002050 <CheckGPS+0x138>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fab9 	bl	80004ec <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f82:	f7fe f8fb 	bl	800017c <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f8e:	f7fe fd33 	bl	80009f8 <__aeabi_dcmpge>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d100      	bne.n	8001f9a <CheckGPS+0x82>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
			checkGPSCnt++;
			//printf("Check!!!!!!!!\r\b");
		}
	}
}
 8001f98:	e056      	b.n	8002048 <CheckGPS+0x130>
			&& nowLati <= (busStopLati + (0.000009 * GPSRange))) {
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <CheckGPS+0x150>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa3a 	bl	8000418 <__aeabi_i2d>
 8001fa4:	a32a      	add	r3, pc, #168	; (adr r3, 8002050 <CheckGPS+0x138>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fa9f 	bl	80004ec <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fba:	f7fe f8e1 	bl	8000180 <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc6:	f7fe fd0d 	bl	80009e4 <__aeabi_dcmple>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <CheckGPS+0xba>
}
 8001fd0:	e03a      	b.n	8002048 <CheckGPS+0x130>
		if (nowLongi >= (busStopLongi - (0.000011 * GPSRange))
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <CheckGPS+0x150>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa1e 	bl	8000418 <__aeabi_i2d>
 8001fdc:	a31e      	add	r3, pc, #120	; (adr r3, 8002058 <CheckGPS+0x140>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fa83 	bl	80004ec <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fee:	f7fe f8c5 	bl	800017c <__aeabi_dsub>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ffa:	f7fe fcfd 	bl	80009f8 <__aeabi_dcmpge>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d100      	bne.n	8002006 <CheckGPS+0xee>
}
 8002004:	e020      	b.n	8002048 <CheckGPS+0x130>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <CheckGPS+0x150>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa04 	bl	8000418 <__aeabi_i2d>
 8002010:	a311      	add	r3, pc, #68	; (adr r3, 8002058 <CheckGPS+0x140>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fa69 	bl	80004ec <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002026:	f7fe f8ab 	bl	8000180 <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002032:	f7fe fcd7 	bl	80009e4 <__aeabi_dcmple>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d100      	bne.n	800203e <CheckGPS+0x126>
}
 800203c:	e004      	b.n	8002048 <CheckGPS+0x130>
			checkGPSCnt++;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <CheckGPS+0x154>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a09      	ldr	r2, [pc, #36]	; (800206c <CheckGPS+0x154>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	94ccab3f 	.word	0x94ccab3f
 8002054:	3ee2dfd6 	.word	0x3ee2dfd6
 8002058:	7cfa26a2 	.word	0x7cfa26a2
 800205c:	3ee71194 	.word	0x3ee71194
 8002060:	20002180 	.word	0x20002180
 8002064:	2000039c 	.word	0x2000039c
 8002068:	20002408 	.word	0x20002408
 800206c:	20002430 	.word	0x20002430

08002070 <NowBusStop>:
double nowSum = 999;
int idxMin = -1;
void NowBusStop(double nowLati, double nowLongi){
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b08c      	sub	sp, #48	; 0x30
 8002076:	af00      	add	r7, sp, #0
 8002078:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800207c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double busStopLati = 0;
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double busStopLongi = 0;
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int i = 0;i<150;i++){
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209c:	e0dd      	b.n	800225a <NowBusStop+0x1ea>
		busStopLati = atof(data[i].lati);
 800209e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	011a      	lsls	r2, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	3310      	adds	r3, #16
 80020ac:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <NowBusStop+0x228>)
 80020ae:	4413      	add	r3, r2
 80020b0:	3302      	adds	r3, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 fa78 	bl	80075a8 <atof>
 80020b8:	e9c7 0108 	strd	r0, r1, [r7, #32]
		busStopLongi = atof(data[i].longi);
 80020bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	011a      	lsls	r2, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	3320      	adds	r3, #32
 80020ca:	4a73      	ldr	r2, [pc, #460]	; (8002298 <NowBusStop+0x228>)
 80020cc:	4413      	add	r3, r2
 80020ce:	3302      	adds	r3, #2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 fa69 	bl	80075a8 <atof>
 80020d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
		if (nowLati >= (busStopLati - (0.000009 * GPSRange))
 80020da:	4b70      	ldr	r3, [pc, #448]	; (800229c <NowBusStop+0x22c>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f99a 	bl	8000418 <__aeabi_i2d>
 80020e4:	a368      	add	r3, pc, #416	; (adr r3, 8002288 <NowBusStop+0x218>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe f9ff 	bl	80004ec <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020f6:	f7fe f841 	bl	800017c <__aeabi_dsub>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002102:	f7fe fc79 	bl	80009f8 <__aeabi_dcmpge>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a3 	beq.w	8002254 <NowBusStop+0x1e4>
				&& nowLati <= (busStopLati + (0.000009 * GPSRange))) {
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <NowBusStop+0x22c>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f980 	bl	8000418 <__aeabi_i2d>
 8002118:	a35b      	add	r3, pc, #364	; (adr r3, 8002288 <NowBusStop+0x218>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe f9e5 	bl	80004ec <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800212e:	f7fe f827 	bl	8000180 <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800213a:	f7fe fc53 	bl	80009e4 <__aeabi_dcmple>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8087 	beq.w	8002254 <NowBusStop+0x1e4>
			if (nowLongi >= (busStopLongi - (0.000011 * GPSRange))
 8002146:	4b55      	ldr	r3, [pc, #340]	; (800229c <NowBusStop+0x22c>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f964 	bl	8000418 <__aeabi_i2d>
 8002150:	a34f      	add	r3, pc, #316	; (adr r3, 8002290 <NowBusStop+0x220>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f9c9 	bl	80004ec <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002162:	f7fe f80b 	bl	800017c <__aeabi_dsub>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216e:	f7fe fc43 	bl	80009f8 <__aeabi_dcmpge>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d06d      	beq.n	8002254 <NowBusStop+0x1e4>
					&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <NowBusStop+0x22c>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f94b 	bl	8000418 <__aeabi_i2d>
 8002182:	a343      	add	r3, pc, #268	; (adr r3, 8002290 <NowBusStop+0x220>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe f9b0 	bl	80004ec <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002198:	f7fd fff2 	bl	8000180 <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a4:	f7fe fc1e 	bl	80009e4 <__aeabi_dcmple>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d052      	beq.n	8002254 <NowBusStop+0x1e4>
				printf("\r\n%d!!!!!!!!\r\n\r\n", i);
 80021ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021b0:	483b      	ldr	r0, [pc, #236]	; (80022a0 <NowBusStop+0x230>)
 80021b2:	f006 fee1 	bl	8008f78 <iprintf>
				if(nowSum > fabs(nowLati - busStopLati) + fabs(nowLongi - busStopLongi)){
 80021b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021be:	f7fd ffdd 	bl	800017c <__aeabi_dsub>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4614      	mov	r4, r2
 80021c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80021cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d4:	f7fd ffd2 	bl	800017c <__aeabi_dsub>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4690      	mov	r8, r2
 80021de:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80021e2:	4642      	mov	r2, r8
 80021e4:	464b      	mov	r3, r9
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fd ffc9 	bl	8000180 <__adddf3>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <NowBusStop+0x234>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fbe8 	bl	80009d0 <__aeabi_dcmplt>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <NowBusStop+0x198>
					nowSum = fabs(nowLati - busStopLati) + fabs(nowLongi - busStopLongi);
					idxMin = i;
				}

				break;
 8002206:	e02c      	b.n	8002262 <NowBusStop+0x1f2>
					nowSum = fabs(nowLati - busStopLati) + fabs(nowLongi - busStopLongi);
 8002208:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002210:	f7fd ffb4 	bl	800017c <__aeabi_dsub>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4692      	mov	sl, r2
 800221a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800221e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002226:	f7fd ffa9 	bl	800017c <__aeabi_dsub>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	603a      	str	r2, [r7, #0]
 8002230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223a:	4650      	mov	r0, sl
 800223c:	4659      	mov	r1, fp
 800223e:	f7fd ff9f 	bl	8000180 <__adddf3>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4917      	ldr	r1, [pc, #92]	; (80022a4 <NowBusStop+0x234>)
 8002248:	e9c1 2300 	strd	r2, r3, [r1]
					idxMin = i;
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <NowBusStop+0x238>)
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	6013      	str	r3, [r2, #0]
				break;
 8002252:	e006      	b.n	8002262 <NowBusStop+0x1f2>
	for(int i = 0;i<150;i++){
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	3301      	adds	r3, #1
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	2b95      	cmp	r3, #149	; 0x95
 800225e:	f77f af1e 	ble.w	800209e <NowBusStop+0x2e>
			}
		}
	}
	if (idxMin != -1){
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <NowBusStop+0x238>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d006      	beq.n	800227a <NowBusStop+0x20a>
		nowIdx = idxMin;
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <NowBusStop+0x238>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <NowBusStop+0x23c>)
 8002272:	6013      	str	r3, [r2, #0]
		NowBusStopFlag = 1;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <NowBusStop+0x240>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
	}
}
 800227a:	bf00      	nop
 800227c:	3730      	adds	r7, #48	; 0x30
 800227e:	46bd      	mov	sp, r7
 8002280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002284:	f3af 8000 	nop.w
 8002288:	94ccab3f 	.word	0x94ccab3f
 800228c:	3ee2dfd6 	.word	0x3ee2dfd6
 8002290:	7cfa26a2 	.word	0x7cfa26a2
 8002294:	3ee71194 	.word	0x3ee71194
 8002298:	2000039c 	.word	0x2000039c
 800229c:	20002408 	.word	0x20002408
 80022a0:	0800ba14 	.word	0x0800ba14
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20002180 	.word	0x20002180
 80022b0:	20002185 	.word	0x20002185

080022b4 <SetMode>:
uint8_t LoRaRxBuffer[LoRa_RX_BUFFER_SIZE]; // ?��?�� ?��?��?���?? ???��?�� 버퍼
volatile uint8_t LoRaRxEnd = 0; // ?��?��?�� ?��?�� ?���?? ?��?���??
uint8_t LoRaRxData[11]; // ?��?�� ?��?��?���?? ???��?�� 버퍼
uint8_t LoRaLen = 0;

void SetMode(uint8_t mode) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d837      	bhi.n	8002334 <SetMode+0x80>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <SetMode+0x18>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022f3 	.word	0x080022f3
 80022d4:	08002309 	.word	0x08002309
 80022d8:	0800231f 	.word	0x0800231f
	case 0:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	2101      	movs	r1, #1
 80022e0:	4816      	ldr	r0, [pc, #88]	; (800233c <SetMode+0x88>)
 80022e2:	f002 feac 	bl	800503e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2102      	movs	r1, #2
 80022ea:	4814      	ldr	r0, [pc, #80]	; (800233c <SetMode+0x88>)
 80022ec:	f002 fea7 	bl	800503e <HAL_GPIO_WritePin>
		break;
 80022f0:	e020      	b.n	8002334 <SetMode+0x80>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2101      	movs	r1, #1
 80022f6:	4811      	ldr	r0, [pc, #68]	; (800233c <SetMode+0x88>)
 80022f8:	f002 fea1 	bl	800503e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2102      	movs	r1, #2
 8002300:	480e      	ldr	r0, [pc, #56]	; (800233c <SetMode+0x88>)
 8002302:	f002 fe9c 	bl	800503e <HAL_GPIO_WritePin>
		break;
 8002306:	e015      	b.n	8002334 <SetMode+0x80>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	2101      	movs	r1, #1
 800230c:	480b      	ldr	r0, [pc, #44]	; (800233c <SetMode+0x88>)
 800230e:	f002 fe96 	bl	800503e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8002312:	2201      	movs	r2, #1
 8002314:	2102      	movs	r1, #2
 8002316:	4809      	ldr	r0, [pc, #36]	; (800233c <SetMode+0x88>)
 8002318:	f002 fe91 	bl	800503e <HAL_GPIO_WritePin>
		break;
 800231c:	e00a      	b.n	8002334 <SetMode+0x80>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2101      	movs	r1, #1
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <SetMode+0x88>)
 8002324:	f002 fe8b 	bl	800503e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	2102      	movs	r1, #2
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <SetMode+0x88>)
 800232e:	f002 fe86 	bl	800503e <HAL_GPIO_WritePin>
		break;
 8002332:	bf00      	nop
	}
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010800 	.word	0x40010800

08002340 <LoRa_SendData>:

void LoRa_SendData(uint8_t *data, uint16_t length) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
	// AUX ???�� HIGH ?��?��?���?? ?��?��?��?�� 모듈?�� �??비되?��?���?? ?��?��
	while (HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET)
 800234c:	bf00      	nop
 800234e:	2110      	movs	r1, #16
 8002350:	4808      	ldr	r0, [pc, #32]	; (8002374 <LoRa_SendData+0x34>)
 8002352:	f002 fe5d 	bl	8005010 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f8      	beq.n	800234e <LoRa_SendData+0xe>
		;

	// ?��?��?�� ?��?��
	HAL_UART_Transmit(&huart2, data, length, HAL_MAX_DELAY);
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <LoRa_SendData+0x38>)
 8002366:	f004 f8dd 	bl	8006524 <HAL_UART_Transmit>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40010800 	.word	0x40010800
 8002378:	200002c8 	.word	0x200002c8

0800237c <parseLora>:
int help = 0;
int routeNo = 0;
int busNM = 0;
int arsID = 0;

void parseLora(uint8_t* loraData){
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

	if(loraData[0] == '0'){
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b30      	cmp	r3, #48	; 0x30
 800238a:	d168      	bne.n	800245e <parseLora+0xe2>
		char *token;

		token = strtok(loraData, "@");
 800238c:	495a      	ldr	r1, [pc, #360]	; (80024f8 <parseLora+0x17c>)
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f007 f814 	bl	80093bc <strtok>
 8002394:	60b8      	str	r0, [r7, #8]
		arsID = atoi(token);
 8002396:	68b8      	ldr	r0, [r7, #8]
 8002398:	f005 f909 	bl	80075ae <atoi>
 800239c:	4603      	mov	r3, r0
 800239e:	4a57      	ldr	r2, [pc, #348]	; (80024fc <parseLora+0x180>)
 80023a0:	6013      	str	r3, [r2, #0]
		printf("\r\narsID : %d!!!!!!\r\n\r\n", arsID);
 80023a2:	4b56      	ldr	r3, [pc, #344]	; (80024fc <parseLora+0x180>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4855      	ldr	r0, [pc, #340]	; (8002500 <parseLora+0x184>)
 80023aa:	f006 fde5 	bl	8008f78 <iprintf>

		for(int i = 0;i<150;i++){
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e050      	b.n	8002456 <parseLora+0xda>
			if(atoi(data[i].busRouteno) != routeNo){
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	011a      	lsls	r2, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	4a50      	ldr	r2, [pc, #320]	; (8002504 <parseLora+0x188>)
 80023c2:	4413      	add	r3, r2
 80023c4:	3305      	adds	r3, #5
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 f8f1 	bl	80075ae <atoi>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <parseLora+0x18c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d003      	beq.n	80023de <parseLora+0x62>
				printf("\r\nNOT ROUTENO\r\n\r\n");
 80023d6:	484d      	ldr	r0, [pc, #308]	; (800250c <parseLora+0x190>)
 80023d8:	f006 fe34 	bl	8009044 <puts>
				break;
 80023dc:	e087      	b.n	80024ee <parseLora+0x172>
			}
			if(atoi(data[i].busNM) != busNM){
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	011a      	lsls	r2, r3, #4
 80023e8:	4413      	add	r3, r2
 80023ea:	4a46      	ldr	r2, [pc, #280]	; (8002504 <parseLora+0x188>)
 80023ec:	4413      	add	r3, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f005 f8dd 	bl	80075ae <atoi>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <parseLora+0x194>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d003      	beq.n	8002406 <parseLora+0x8a>
				printf("\r\nNOT busNM\r\n\r\n");
 80023fe:	4845      	ldr	r0, [pc, #276]	; (8002514 <parseLora+0x198>)
 8002400:	f006 fe20 	bl	8009044 <puts>
				break;
 8002404:	e073      	b.n	80024ee <parseLora+0x172>
			}
			if(atoi(data[i].busStopID) == arsID){
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	011a      	lsls	r2, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	3308      	adds	r3, #8
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <parseLora+0x188>)
 8002416:	4413      	add	r3, r2
 8002418:	3302      	adds	r3, #2
 800241a:	4618      	mov	r0, r3
 800241c:	f005 f8c7 	bl	80075ae <atoi>
 8002420:	4602      	mov	r2, r0
 8002422:	4b36      	ldr	r3, [pc, #216]	; (80024fc <parseLora+0x180>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d112      	bne.n	8002450 <parseLora+0xd4>
				data[i].isPeople = help;
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <parseLora+0x19c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b2d8      	uxtb	r0, r3
 8002430:	4934      	ldr	r1, [pc, #208]	; (8002504 <parseLora+0x188>)
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	011a      	lsls	r2, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	440b      	add	r3, r1
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	4602      	mov	r2, r0
 8002444:	701a      	strb	r2, [r3, #0]
				printf("\r\n%d\r\n\r\n", i);
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	4834      	ldr	r0, [pc, #208]	; (800251c <parseLora+0x1a0>)
 800244a:	f006 fd95 	bl	8008f78 <iprintf>
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
//				HAL_Delay(100);
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
				break;
 800244e:	e04e      	b.n	80024ee <parseLora+0x172>
		for(int i = 0;i<150;i++){
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3301      	adds	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b95      	cmp	r3, #149	; 0x95
 800245a:	ddab      	ble.n	80023b4 <parseLora+0x38>
		busNM = (loraData[6]-'0') * 1000 + (loraData[7]-'0') * 100 + (loraData[8] - '0') * 10 + (loraData[9] - '0');
		printf("\r\nhelp : %d, routeNo : %d, busNM : %d\r\n\r\n",help, routeNo, busNM);
	}


}
 800245c:	e047      	b.n	80024ee <parseLora+0x172>
		help = loraData[0] - '0';
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3b30      	subs	r3, #48	; 0x30
 8002464:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <parseLora+0x19c>)
 8002466:	6013      	str	r3, [r2, #0]
		routeNo = (loraData[2]-'0') * 100 + (loraData[3]-'0') * 10 + (loraData[4] - '0');
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3302      	adds	r3, #2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3b30      	subs	r3, #48	; 0x30
 8002470:	2264      	movs	r2, #100	; 0x64
 8002472:	fb02 f103 	mul.w	r1, r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3303      	adds	r3, #3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	18ca      	adds	r2, r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3b30      	subs	r3, #48	; 0x30
 8002492:	4413      	add	r3, r2
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <parseLora+0x18c>)
 8002496:	6013      	str	r3, [r2, #0]
		busNM = (loraData[6]-'0') * 1000 + (loraData[7]-'0') * 100 + (loraData[8] - '0') * 10 + (loraData[9] - '0');
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3306      	adds	r3, #6
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3b30      	subs	r3, #48	; 0x30
 80024a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a4:	fb03 f202 	mul.w	r2, r3, r2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3307      	adds	r3, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b30      	subs	r3, #48	; 0x30
 80024b0:	2164      	movs	r1, #100	; 0x64
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	18d1      	adds	r1, r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3308      	adds	r3, #8
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	18ca      	adds	r2, r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3309      	adds	r3, #9
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	3b30      	subs	r3, #48	; 0x30
 80024d4:	4413      	add	r3, r2
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <parseLora+0x194>)
 80024d8:	6013      	str	r3, [r2, #0]
		printf("\r\nhelp : %d, routeNo : %d, busNM : %d\r\n\r\n",help, routeNo, busNM);
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <parseLora+0x19c>)
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <parseLora+0x18c>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <parseLora+0x194>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	480e      	ldr	r0, [pc, #56]	; (8002520 <parseLora+0x1a4>)
 80024e8:	f006 fd46 	bl	8008f78 <iprintf>
}
 80024ec:	e7ff      	b.n	80024ee <parseLora+0x172>
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	0800ba28 	.word	0x0800ba28
 80024fc:	20002490 	.word	0x20002490
 8002500:	0800ba2c 	.word	0x0800ba2c
 8002504:	2000039c 	.word	0x2000039c
 8002508:	20002488 	.word	0x20002488
 800250c:	0800ba44 	.word	0x0800ba44
 8002510:	2000248c 	.word	0x2000248c
 8002514:	0800ba58 	.word	0x0800ba58
 8002518:	20002484 	.word	0x20002484
 800251c:	0800ba68 	.word	0x0800ba68
 8002520:	0800ba74 	.word	0x0800ba74

08002524 <_write>:

uint8_t modeFlag = 0;
uint8_t pushingFlag = 0;


int _write(int file, unsigned char *p, int len) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_write+0x5c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	b29a      	uxth	r2, r3
 800253c:	230a      	movs	r3, #10
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	4810      	ldr	r0, [pc, #64]	; (8002584 <_write+0x60>)
 8002542:	f003 ffef 	bl	8006524 <HAL_UART_Transmit>
 8002546:	e016      	b.n	8002576 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <_write+0x5c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	b29a      	uxth	r2, r3
 8002554:	230a      	movs	r3, #10
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	480b      	ldr	r0, [pc, #44]	; (8002588 <_write+0x64>)
 800255a:	f003 ffe3 	bl	8006524 <HAL_UART_Transmit>
 800255e:	e00a      	b.n	8002576 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_write+0x5c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d106      	bne.n	8002576 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	b29a      	uxth	r2, r3
 800256c:	230a      	movs	r3, #10
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4806      	ldr	r0, [pc, #24]	; (800258c <_write+0x68>)
 8002572:	f003 ffd7 	bl	8006524 <HAL_UART_Transmit>
	}
	return len;
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20002494 	.word	0x20002494
 8002584:	20000280 	.word	0x20000280
 8002588:	200002c8 	.word	0x200002c8
 800258c:	20000310 	.word	0x20000310

08002590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002594:	b09e      	sub	sp, #120	; 0x78
 8002596:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002598:	f001 ff80 	bl	800449c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 800259c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a0:	f001 ffde 	bl	8004560 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a4:	f000 fc6e 	bl	8002e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a8:	f000 fd76 	bl	8003098 <MX_GPIO_Init>
  MX_DMA_Init();
 80025ac:	f000 fd56 	bl	800305c <MX_DMA_Init>
  MX_I2C1_Init();
 80025b0:	f000 fca8 	bl	8002f04 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025b4:	f000 fcd4 	bl	8002f60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025b8:	f000 fcfc 	bl	8002fb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025bc:	f000 fd24 	bl	8003008 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 80025c0:	2201      	movs	r2, #1
 80025c2:	49b2      	ldr	r1, [pc, #712]	; (800288c <main+0x2fc>)
 80025c4:	48b2      	ldr	r0, [pc, #712]	; (8002890 <main+0x300>)
 80025c6:	f004 f830 	bl	800662a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
 80025ca:	220a      	movs	r2, #10
 80025cc:	49b1      	ldr	r1, [pc, #708]	; (8002894 <main+0x304>)
 80025ce:	48b2      	ldr	r0, [pc, #712]	; (8002898 <main+0x308>)
 80025d0:	f004 f82b 	bl	800662a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rxBuffer, 1);
 80025d4:	2201      	movs	r2, #1
 80025d6:	49b1      	ldr	r1, [pc, #708]	; (800289c <main+0x30c>)
 80025d8:	48b1      	ldr	r0, [pc, #708]	; (80028a0 <main+0x310>)
 80025da:	f004 f826 	bl	800662a <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 80025de:	4bb1      	ldr	r3, [pc, #708]	; (80028a4 <main+0x314>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6898      	ldr	r0, [r3, #8]
 80025e4:	2300      	movs	r3, #0
 80025e6:	2202      	movs	r2, #2
 80025e8:	2100      	movs	r1, #0
 80025ea:	f006 fd33 	bl	8009054 <setvbuf>
	//	printf("HELL WORLD\r\n");
	LCD_Init(LCD_ADDR);
 80025ee:	204e      	movs	r0, #78	; 0x4e
 80025f0:	f7fe fec4 	bl	800137c <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 80025f4:	4aac      	ldr	r2, [pc, #688]	; (80028a8 <main+0x318>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	204e      	movs	r0, #78	; 0x4e
 80025fa:	f7fe fef6 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 80025fe:	4aab      	ldr	r2, [pc, #684]	; (80028ac <main+0x31c>)
 8002600:	2101      	movs	r1, #1
 8002602:	204e      	movs	r0, #78	; 0x4e
 8002604:	f7fe fef1 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 8002608:	4aa9      	ldr	r2, [pc, #676]	; (80028b0 <main+0x320>)
 800260a:	2102      	movs	r1, #2
 800260c:	204e      	movs	r0, #78	; 0x4e
 800260e:	f7fe feec 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 8002612:	4aa8      	ldr	r2, [pc, #672]	; (80028b4 <main+0x324>)
 8002614:	2103      	movs	r1, #3
 8002616:	204e      	movs	r0, #78	; 0x4e
 8002618:	f7fe fee7 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 800261c:	4aa6      	ldr	r2, [pc, #664]	; (80028b8 <main+0x328>)
 800261e:	2104      	movs	r1, #4
 8002620:	204e      	movs	r0, #78	; 0x4e
 8002622:	f7fe fee2 	bl	80013ea <LCD_SET_CGRAM>
//		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
//	}
//	LCD_SendData(LCD_ADDR, 1);

	//flash
	uint32_t GPSRangeFlashAddress = 0x0800C400;  // ???��?�� ?��?��?�� 메모�???? 주소
 8002626:	4ba5      	ldr	r3, [pc, #660]	; (80028bc <main+0x32c>)
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ModeFlashAddress = 0x0800CB00;  // ???��?�� ?��?��?�� 메모�???? 주소
 800262a:	4ba5      	ldr	r3, [pc, #660]	; (80028c0 <main+0x330>)
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t DataFlashAddress = 0x0800CC00; // ???��?�� ?��?��?�� 메모�???? 주소
 800262e:	4ba5      	ldr	r3, [pc, #660]	; (80028c4 <main+0x334>)
 8002630:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t InfoModeFlag = Flash_Read(ModeFlashAddress) & 0x0000FFFF;
 8002632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002634:	f7ff fa60 	bl	8001af8 <Flash_Read>
 8002638:	4603      	mov	r3, r0
 800263a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	GPSRange = Flash_Read(GPSRangeFlashAddress) & 0x0000FFFF;
 800263e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002640:	f7ff fa5a 	bl	8001af8 <Flash_Read>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b9f      	ldr	r3, [pc, #636]	; (80028c8 <main+0x338>)
 800264a:	801a      	strh	r2, [r3, #0]
	printf("Range : %d!!!!!!!!!!!!!!!!\r\n", GPSRange);
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <main+0x338>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	489e      	ldr	r0, [pc, #632]	; (80028cc <main+0x33c>)
 8002654:	f006 fc90 	bl	8008f78 <iprintf>


	//printf("ModeFlag:%d", InfoModeFlag);
	if (InfoModeFlag >= 1) {
 8002658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <main+0xda>
		DataFlashAddress = CallData(DataFlashAddress);
 8002660:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002662:	f7ff faf5 	bl	8001c50 <CallData>
 8002666:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002668:	e023      	b.n	80026b2 <main+0x122>
//		strncpy(data[1].busStopID, "44444", sizeof(data[1].busStopID) - 1);
//		strncpy(data[1].lati, "36.391567112", sizeof(data[1].lati) - 1);
//		strncpy(data[1].longi, "127.362770", sizeof(data[1].longi) - 1);

		//LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
	} else if (InfoModeFlag == 0) {
 800266a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <main+0x10c>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8002672:	2101      	movs	r1, #1
 8002674:	204e      	movs	r0, #78	; 0x4e
 8002676:	f7fe fe5d 	bl	8001334 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	204e      	movs	r0, #78	; 0x4e
 800267e:	f7fe fe59 	bl	8001334 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "DATADOWNLOAD");
 8002682:	4993      	ldr	r1, [pc, #588]	; (80028d0 <main+0x340>)
 8002684:	204e      	movs	r0, #78	; 0x4e
 8002686:	f7fe fe96 	bl	80013b6 <LCD_SendString>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 800268a:	21c0      	movs	r1, #192	; 0xc0
 800268c:	204e      	movs	r0, #78	; 0x4e
 800268e:	f7fe fe51 	bl	8001334 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "MODE");
 8002692:	4990      	ldr	r1, [pc, #576]	; (80028d4 <main+0x344>)
 8002694:	204e      	movs	r0, #78	; 0x4e
 8002696:	f7fe fe8e 	bl	80013b6 <LCD_SendString>
 800269a:	e00a      	b.n	80026b2 <main+0x122>
	} else {
		InfoModeFlag = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		Flash_Unlock();
 80026a2:	f7ff f869 	bl	8001778 <Flash_Unlock>
		Flash_Write(ModeFlashAddress, 0);
 80026a6:	2100      	movs	r1, #0
 80026a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026aa:	f7ff f885 	bl	80017b8 <Flash_Write>
		Flash_Lock();
 80026ae:	f7ff f875 	bl	800179c <Flash_Lock>
	}

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	4988      	ldr	r1, [pc, #544]	; (80028d8 <main+0x348>)
 80026b6:	487a      	ldr	r0, [pc, #488]	; (80028a0 <main+0x310>)
 80026b8:	f003 ffdc 	bl	8006674 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80026bc:	4b87      	ldr	r3, [pc, #540]	; (80028dc <main+0x34c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b86      	ldr	r3, [pc, #536]	; (80028dc <main+0x34c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
	int Serialcnt = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44

	//LoRa ================================================================
	SetMode(0);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff fdef 	bl	80022b4 <SetMode>



	//FW===================================================================
	modeFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80026d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026da:	4881      	ldr	r0, [pc, #516]	; (80028e0 <main+0x350>)
 80026dc:	f002 fc98 	bl	8005010 <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <main+0x354>)
 80026e6:	701a      	strb	r2, [r3, #0]

	GPSTick = HAL_GetTick();
 80026e8:	f001 ff30 	bl	800454c <HAL_GetTick>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a7e      	ldr	r2, [pc, #504]	; (80028e8 <main+0x358>)
 80026f0:	6013      	str	r3, [r2, #0]
	LoRaTick = HAL_GetTick();
 80026f2:	f001 ff2b 	bl	800454c <HAL_GetTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a7c      	ldr	r2, [pc, #496]	; (80028ec <main+0x35c>)
 80026fa:	6013      	str	r3, [r2, #0]
	GPSFIXTick = HAL_GetTick();
 80026fc:	f001 ff26 	bl	800454c <HAL_GetTick>
 8002700:	4603      	mov	r3, r0
 8002702:	4a7b      	ldr	r2, [pc, #492]	; (80028f0 <main+0x360>)
 8002704:	6013      	str	r3, [r2, #0]
	ArriveTick = HAL_GetTick();
 8002706:	f001 ff21 	bl	800454c <HAL_GetTick>
 800270a:	4603      	mov	r3, r0
 800270c:	4a79      	ldr	r2, [pc, #484]	; (80028f4 <main+0x364>)
 800270e:	6013      	str	r3, [r2, #0]

	uint8_t IOMode = 0; //0 : In, 1 : Out
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ArriveFlag = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
//
//
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED

		if (!modeFlag) { //Local Mode
 800271c:	4b71      	ldr	r3, [pc, #452]	; (80028e4 <main+0x354>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 82d0 	bne.w	8002cc6 <main+0x736>
			if (InfoModeFlag >= 1){
 8002726:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <main+0x1a2>
				notGPSLCD();
 800272e:	f7fe ff63 	bl	80015f8 <notGPSLCD>
			}
			while (1) {
				if (UART1_Rx_End) {
 8002732:	4b71      	ldr	r3, [pc, #452]	; (80028f8 <main+0x368>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d07f      	beq.n	800283a <main+0x2aa>
					//printf("Echo\r\n");
					if (!strcmp(UART1_Rx_Buffer, "Input")) {
 800273a:	4970      	ldr	r1, [pc, #448]	; (80028fc <main+0x36c>)
 800273c:	4870      	ldr	r0, [pc, #448]	; (8002900 <main+0x370>)
 800273e:	f7fd fd07 	bl	8000150 <strcmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <main+0x1d4>
						Flash_Erase_Page(ModeFlashAddress);
 8002748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800274a:	f7ff f9e1 	bl	8001b10 <Flash_Erase_Page>
						Flash_Unlock();
 800274e:	f7ff f813 	bl	8001778 <Flash_Unlock>
						Flash_Write(ModeFlashAddress, (uint8_t) 0);
 8002752:	2100      	movs	r1, #0
 8002754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002756:	f7ff f82f 	bl	80017b8 <Flash_Write>
						Flash_Lock();
 800275a:	f7ff f81f 	bl	800179c <Flash_Lock>
						Flash_Clear();
 800275e:	f7ff fac3 	bl	8001ce8 <Flash_Clear>
 8002762:	e056      	b.n	8002812 <main+0x282>
					} else if (!strcmp(UART1_Rx_Buffer, "OutPut")) {
 8002764:	4967      	ldr	r1, [pc, #412]	; (8002904 <main+0x374>)
 8002766:	4866      	ldr	r0, [pc, #408]	; (8002900 <main+0x370>)
 8002768:	f7fd fcf2 	bl	8000150 <strcmp>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10b      	bne.n	800278a <main+0x1fa>
						Flash_Erase_Page(ModeFlashAddress);
 8002772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002774:	f7ff f9cc 	bl	8001b10 <Flash_Erase_Page>
						Flash_Unlock();
 8002778:	f7fe fffe 	bl	8001778 <Flash_Unlock>
						Flash_Write(ModeFlashAddress, 1);
 800277c:	2101      	movs	r1, #1
 800277e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002780:	f7ff f81a 	bl	80017b8 <Flash_Write>
						Flash_Lock();
 8002784:	f7ff f80a 	bl	800179c <Flash_Lock>
 8002788:	e043      	b.n	8002812 <main+0x282>
					} else if ((!strncmp(UART1_Rx_Buffer, "Data", 4)
 800278a:	2204      	movs	r2, #4
 800278c:	495e      	ldr	r1, [pc, #376]	; (8002908 <main+0x378>)
 800278e:	485c      	ldr	r0, [pc, #368]	; (8002900 <main+0x370>)
 8002790:	f006 fdee 	bl	8009370 <strncmp>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <main+0x21a>
							|| !strncmp(UART1_Rx_Buffer, "data", 4))
 800279a:	2204      	movs	r2, #4
 800279c:	495b      	ldr	r1, [pc, #364]	; (800290c <main+0x37c>)
 800279e:	4858      	ldr	r0, [pc, #352]	; (8002900 <main+0x370>)
 80027a0:	f006 fde6 	bl	8009370 <strncmp>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <main+0x234>
							&& InfoModeFlag == 0) {
 80027aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <main+0x234>
						DataFlashAddress = Flash_Write_Data(DataFlashAddress,
 80027b2:	4953      	ldr	r1, [pc, #332]	; (8002900 <main+0x370>)
 80027b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80027b6:	f7ff f861 	bl	800187c <Flash_Write_Data>
 80027ba:	64f8      	str	r0, [r7, #76]	; 0x4c
								UART1_Rx_Buffer);
						//printf("Data\r\n");
						printf("N\r\n");
 80027bc:	4854      	ldr	r0, [pc, #336]	; (8002910 <main+0x380>)
 80027be:	f006 fc41 	bl	8009044 <puts>
 80027c2:	e026      	b.n	8002812 <main+0x282>
					} else if (!strncmp(UART1_Rx_Buffer, "range", 5)){
 80027c4:	2205      	movs	r2, #5
 80027c6:	4953      	ldr	r1, [pc, #332]	; (8002914 <main+0x384>)
 80027c8:	484d      	ldr	r0, [pc, #308]	; (8002900 <main+0x370>)
 80027ca:	f006 fdd1 	bl	8009370 <strncmp>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d11e      	bne.n	8002812 <main+0x282>
						char *token;

						token = strtok(UART1_Rx_Buffer, ",");
 80027d4:	4950      	ldr	r1, [pc, #320]	; (8002918 <main+0x388>)
 80027d6:	484a      	ldr	r0, [pc, #296]	; (8002900 <main+0x370>)
 80027d8:	f006 fdf0 	bl	80093bc <strtok>
 80027dc:	61f8      	str	r0, [r7, #28]
						token = strtok(NULL, "!");
 80027de:	494f      	ldr	r1, [pc, #316]	; (800291c <main+0x38c>)
 80027e0:	2000      	movs	r0, #0
 80027e2:	f006 fdeb 	bl	80093bc <strtok>
 80027e6:	61f8      	str	r0, [r7, #28]
						GPSRange = atoi(token);
 80027e8:	69f8      	ldr	r0, [r7, #28]
 80027ea:	f004 fee0 	bl	80075ae <atoi>
 80027ee:	4603      	mov	r3, r0
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <main+0x338>)
 80027f4:	801a      	strh	r2, [r3, #0]

						Flash_Erase_Page(GPSRangeFlashAddress);
 80027f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f8:	f7ff f98a 	bl	8001b10 <Flash_Erase_Page>
						Flash_Unlock();
 80027fc:	f7fe ffbc 	bl	8001778 <Flash_Unlock>
						Flash_Write(GPSRangeFlashAddress, (uint8_t) GPSRange);
 8002800:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <main+0x338>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4619      	mov	r1, r3
 8002808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800280a:	f7fe ffd5 	bl	80017b8 <Flash_Write>
						Flash_Lock();
 800280e:	f7fe ffc5 	bl	800179c <Flash_Lock>
					}
					//HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
					for (int i = 0; i < 50; i++) {
 8002812:	2300      	movs	r3, #0
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	e007      	b.n	8002828 <main+0x298>
						UART1_Rx_Buffer[i] = '\0';
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <main+0x370>)
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	4413      	add	r3, r2
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 8002822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002824:	3301      	adds	r3, #1
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282a:	2b31      	cmp	r3, #49	; 0x31
 800282c:	ddf4      	ble.n	8002818 <main+0x288>
					}
					UART1_Len = 0;
 800282e:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <main+0x390>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <main+0x368>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
				}

				if (InfoModeFlag) { //?��?��모드?��?��
 800283a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800283e:	2b00      	cmp	r3, #0
 8002840:	f43f af77 	beq.w	8002732 <main+0x1a2>
					if (dataReceived) {
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <main+0x394>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <main+0x2cc>
						parseGPSData(rxBuffer, RX3_BUFFER_SIZE);
 800284c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002850:	4812      	ldr	r0, [pc, #72]	; (800289c <main+0x30c>)
 8002852:	f7ff fad9 	bl	8001e08 <parseGPSData>
						dataReceived = 0;
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <main+0x394>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
					}
					if (LoRaRxEnd) {
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <main+0x398>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <main+0x3c2>
						printf("LoRa : %s, %d\r\n", LoRaRxData, strlen(LoRaRxData));
 8002866:	480b      	ldr	r0, [pc, #44]	; (8002894 <main+0x304>)
 8002868:	f7fd fc7c 	bl	8000164 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4908      	ldr	r1, [pc, #32]	; (8002894 <main+0x304>)
 8002872:	482e      	ldr	r0, [pc, #184]	; (800292c <main+0x39c>)
 8002874:	f006 fb80 	bl	8008f78 <iprintf>
						parseLora(LoRaRxData);
 8002878:	4806      	ldr	r0, [pc, #24]	; (8002894 <main+0x304>)
 800287a:	f7ff fd7f 	bl	800237c <parseLora>
						LoRa_SendData(LoRaRxData, sizeof(LoRaRxData)-1);
 800287e:	210a      	movs	r1, #10
 8002880:	4804      	ldr	r0, [pc, #16]	; (8002894 <main+0x304>)
 8002882:	f7ff fd5d 	bl	8002340 <LoRa_SendData>
						for (int i = 0; i < 11; i++) {
 8002886:	2300      	movs	r3, #0
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
 800288a:	e059      	b.n	8002940 <main+0x3b0>
 800288c:	20002498 	.word	0x20002498
 8002890:	20000280 	.word	0x20000280
 8002894:	20002478 	.word	0x20002478
 8002898:	200002c8 	.word	0x200002c8
 800289c:	200024d0 	.word	0x200024d0
 80028a0:	20000310 	.word	0x20000310
 80028a4:	20000208 	.word	0x20000208
 80028a8:	2000000c 	.word	0x2000000c
 80028ac:	20000014 	.word	0x20000014
 80028b0:	2000001c 	.word	0x2000001c
 80028b4:	20000024 	.word	0x20000024
 80028b8:	2000002c 	.word	0x2000002c
 80028bc:	0800c400 	.word	0x0800c400
 80028c0:	0800cb00 	.word	0x0800cb00
 80028c4:	0800cc00 	.word	0x0800cc00
 80028c8:	20002408 	.word	0x20002408
 80028cc:	0800baa0 	.word	0x0800baa0
 80028d0:	0800bac0 	.word	0x0800bac0
 80028d4:	0800bad0 	.word	0x0800bad0
 80028d8:	2000218c 	.word	0x2000218c
 80028dc:	20000358 	.word	0x20000358
 80028e0:	40010800 	.word	0x40010800
 80028e4:	200025d1 	.word	0x200025d1
 80028e8:	200025d4 	.word	0x200025d4
 80028ec:	200025d8 	.word	0x200025d8
 80028f0:	200025dc 	.word	0x200025dc
 80028f4:	200025e0 	.word	0x200025e0
 80028f8:	200024cf 	.word	0x200024cf
 80028fc:	0800bad8 	.word	0x0800bad8
 8002900:	2000249c 	.word	0x2000249c
 8002904:	0800bae0 	.word	0x0800bae0
 8002908:	0800bae8 	.word	0x0800bae8
 800290c:	0800baf0 	.word	0x0800baf0
 8002910:	0800baf8 	.word	0x0800baf8
 8002914:	0800bafc 	.word	0x0800bafc
 8002918:	0800b9d4 	.word	0x0800b9d4
 800291c:	0800b9d8 	.word	0x0800b9d8
 8002920:	200024ce 	.word	0x200024ce
 8002924:	200025d0 	.word	0x200025d0
 8002928:	20002474 	.word	0x20002474
 800292c:	0800bb04 	.word	0x0800bb04
							LoRaRxData[i] = '\0';
 8002930:	4a9e      	ldr	r2, [pc, #632]	; (8002bac <main+0x61c>)
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	4413      	add	r3, r2
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < 11; i++) {
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	3301      	adds	r3, #1
 800293e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	2b0a      	cmp	r3, #10
 8002944:	ddf4      	ble.n	8002930 <main+0x3a0>
						}
						LoRaLen = 0;
 8002946:	4b9a      	ldr	r3, [pc, #616]	; (8002bb0 <main+0x620>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
						LoRaRxEnd = 0; // ?��?�� ?���?? ?��?���?? 리셋
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <main+0x624>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]

					}
					if (HAL_GetTick() - GPSTick >= 1000) {
 8002952:	f001 fdfb 	bl	800454c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	4b97      	ldr	r3, [pc, #604]	; (8002bb8 <main+0x628>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002962:	d37a      	bcc.n	8002a5a <main+0x4ca>
						GPSTick = HAL_GetTick();
 8002964:	f001 fdf2 	bl	800454c <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	4a93      	ldr	r2, [pc, #588]	; (8002bb8 <main+0x628>)
 800296c:	6013      	str	r3, [r2, #0]
						//printf("CNT : %d\r\n", checkGPSCnt);
						if (checkGPSCnt >= 2) {
 800296e:	4b93      	ldr	r3, [pc, #588]	; (8002bbc <main+0x62c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	dd4b      	ble.n	8002a0e <main+0x47e>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 8002976:	2200      	movs	r2, #0
 8002978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800297c:	4890      	ldr	r0, [pc, #576]	; (8002bc0 <main+0x630>)
 800297e:	f002 fb5e 	bl	800503e <HAL_GPIO_WritePin>
							if(IOMode == 0){
 8002982:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002986:	2b00      	cmp	r3, #0
 8002988:	d138      	bne.n	80029fc <main+0x46c>
								LCD_Write_Arrive(data[nowIdx]);
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <main+0x634>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	498e      	ldr	r1, [pc, #568]	; (8002bc8 <main+0x638>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	011a      	lsls	r2, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	440b      	add	r3, r1
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4692      	mov	sl, r2
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4691      	mov	r9, r2
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4690      	mov	r8, r2
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4696      	mov	lr, r2
 80029ac:	f103 0410 	add.w	r4, r3, #16
 80029b0:	466e      	mov	r6, sp
 80029b2:	f104 0c20 	add.w	ip, r4, #32
 80029b6:	4635      	mov	r5, r6
 80029b8:	4623      	mov	r3, r4
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c4:	3410      	adds	r4, #16
 80029c6:	3610      	adds	r6, #16
 80029c8:	4564      	cmp	r4, ip
 80029ca:	d1f4      	bne.n	80029b6 <main+0x426>
 80029cc:	4633      	mov	r3, r6
 80029ce:	4622      	mov	r2, r4
 80029d0:	8811      	ldrh	r1, [r2, #0]
 80029d2:	7892      	ldrb	r2, [r2, #2]
 80029d4:	8019      	strh	r1, [r3, #0]
 80029d6:	709a      	strb	r2, [r3, #2]
 80029d8:	4650      	mov	r0, sl
 80029da:	4649      	mov	r1, r9
 80029dc:	4642      	mov	r2, r8
 80029de:	4673      	mov	r3, lr
 80029e0:	f7fe fe64 	bl	80016ac <LCD_Write_Arrive>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 80029e4:	2201      	movs	r2, #1
 80029e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ea:	4875      	ldr	r0, [pc, #468]	; (8002bc0 <main+0x630>)
 80029ec:	f002 fb27 	bl	800503e <HAL_GPIO_WritePin>
								ArriveFlag = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
								helpBuzzer = 0;
 80029f6:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <main+0x63c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
							}

							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 80029fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a00:	486f      	ldr	r0, [pc, #444]	; (8002bc0 <main+0x630>)
 8002a02:	f002 fb34 	bl	800506e <HAL_GPIO_TogglePin>
							IOMode = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002a0c:	e022      	b.n	8002a54 <main+0x4c4>
						}
						else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a14:	486a      	ldr	r0, [pc, #424]	; (8002bc0 <main+0x630>)
 8002a16:	f002 fb12 	bl	800503e <HAL_GPIO_WritePin>
							if(IOMode == 1){
 8002a1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10f      	bne.n	8002a42 <main+0x4b2>
								nowIdx++;
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <main+0x634>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a66      	ldr	r2, [pc, #408]	; (8002bc4 <main+0x634>)
 8002a2a:	6013      	str	r3, [r2, #0]
								updateLCD();
 8002a2c:	f7fe fd8a 	bl	8001544 <updateLCD>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 8002a30:	2201      	movs	r2, #1
 8002a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a36:	4862      	ldr	r0, [pc, #392]	; (8002bc0 <main+0x630>)
 8002a38:	f002 fb01 	bl	800503e <HAL_GPIO_WritePin>
								ArriveFlag = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
							}

							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //Stop LED
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a48:	485d      	ldr	r0, [pc, #372]	; (8002bc0 <main+0x630>)
 8002a4a:	f002 faf8 	bl	800503e <HAL_GPIO_WritePin>
							IOMode = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						}
						checkGPSCnt = 0;
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <main+0x62c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
					}

					if (HAL_GetTick() - GPSFIXTick >= 100) {
 8002a5a:	f001 fd77 	bl	800454c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <main+0x640>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b63      	cmp	r3, #99	; 0x63
 8002a68:	d949      	bls.n	8002afe <main+0x56e>
						//printf("%s\r\n", DataBuffer);
						nmea_parse(&myData, DataBuffer);
 8002a6a:	495a      	ldr	r1, [pc, #360]	; (8002bd4 <main+0x644>)
 8002a6c:	485a      	ldr	r0, [pc, #360]	; (8002bd8 <main+0x648>)
 8002a6e:	f001 f9b7 	bl	8003de0 <nmea_parse>
						if(myData.fix == 0){
 8002a72:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <main+0x648>)
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <main+0x506>
								GPSFIXTick = HAL_GetTick();
 8002a7a:	f001 fd67 	bl	800454c <HAL_GetTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a53      	ldr	r2, [pc, #332]	; (8002bd0 <main+0x640>)
 8002a82:	6013      	str	r3, [r2, #0]
								HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 8002a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a88:	484d      	ldr	r0, [pc, #308]	; (8002bc0 <main+0x630>)
 8002a8a:	f002 faf0 	bl	800506e <HAL_GPIO_TogglePin>
								//printf("%d: No fix\r\n", Serialcnt);
								Serialcnt++;
 8002a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a90:	3301      	adds	r3, #1
 8002a92:	647b      	str	r3, [r7, #68]	; 0x44
 8002a94:	e033      	b.n	8002afe <main+0x56e>
						}
						else{
							if(NowBusStopFlag == 0){
 8002a96:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <main+0x64c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d121      	bne.n	8002ae2 <main+0x552>
								if(myData.latitude > 0 && myData.longitude > 0){
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <main+0x648>)
 8002aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	f7fd ffae 	bl	8000a0c <__aeabi_dcmpgt>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d015      	beq.n	8002ae2 <main+0x552>
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <main+0x648>)
 8002ab8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	f7fd ffa2 	bl	8000a0c <__aeabi_dcmpgt>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <main+0x552>

									//printf("%f, %f\r\n", myData.latitude, myData.longitude);
									NowBusStop(myData.latitude, myData.longitude);
 8002ace:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <main+0x648>)
 8002ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad4:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <main+0x648>)
 8002ad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ada:	f7ff fac9 	bl	8002070 <NowBusStop>
									updateLCD();
 8002ade:	f7fe fd31 	bl	8001544 <updateLCD>
								}
							}
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); //GPS LED
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ae8:	4835      	ldr	r0, [pc, #212]	; (8002bc0 <main+0x630>)
 8002aea:	f002 faa8 	bl	800503e <HAL_GPIO_WritePin>
//							printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
//											Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
							CheckGPS(myData.latitude, myData.longitude);
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <main+0x648>)
 8002af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af4:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <main+0x648>)
 8002af6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002afa:	f7ff fa0d 	bl	8001f18 <CheckGPS>
						}
					}
					if (HAL_GetTick() - BtnTick >= 2000 && pushingFlag){
 8002afe:	f001 fd25 	bl	800454c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <main+0x650>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b0e:	d322      	bcc.n	8002b56 <main+0x5c6>
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <main+0x654>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01e      	beq.n	8002b56 <main+0x5c6>
						pushingFlag = 0;
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <main+0x654>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
						upDownFlag = (upDownFlag+1)%2;
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <main+0x658>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	bfb8      	it	lt
 8002b2c:	425b      	neglt	r3, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <main+0x658>)
 8002b32:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8002b34:	2201      	movs	r2, #1
 8002b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b3a:	4821      	ldr	r0, [pc, #132]	; (8002bc0 <main+0x630>)
 8002b3c:	f002 fa7f 	bl	800503e <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8002b40:	2064      	movs	r0, #100	; 0x64
 8002b42:	f001 fd0d 	bl	8004560 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4c:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <main+0x630>)
 8002b4e:	f002 fa76 	bl	800503e <HAL_GPIO_WritePin>
						updateLCD();
 8002b52:	f7fe fcf7 	bl	8001544 <updateLCD>
					}
					if(NowBusStopFlag){
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <main+0x64c>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f43f ade9 	beq.w	8002732 <main+0x1a2>
						if(HAL_GetTick() - ArriveTick >= 100){
 8002b60:	f001 fcf4 	bl	800454c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b21      	ldr	r3, [pc, #132]	; (8002bec <main+0x65c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b63      	cmp	r3, #99	; 0x63
 8002b6e:	f240 808e 	bls.w	8002c8e <main+0x6fe>
							ArriveTick = HAL_GetTick();
 8002b72:	f001 fceb 	bl	800454c <HAL_GetTick>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <main+0x65c>)
 8002b7a:	6013      	str	r3, [r2, #0]
							if(data[nowIdx].isPeople == 1){
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <main+0x634>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4911      	ldr	r1, [pc, #68]	; (8002bc8 <main+0x638>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	011a      	lsls	r2, r3, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3332      	adds	r3, #50	; 0x32
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d134      	bne.n	8002c00 <main+0x670>
								if(ArriveFlag == 1){
 8002b96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d12a      	bne.n	8002bf4 <main+0x664>
									HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ba2:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <main+0x660>)
 8002ba4:	f002 fa63 	bl	800506e <HAL_GPIO_TogglePin>
 8002ba8:	e02a      	b.n	8002c00 <main+0x670>
 8002baa:	bf00      	nop
 8002bac:	20002478 	.word	0x20002478
 8002bb0:	20002483 	.word	0x20002483
 8002bb4:	20002474 	.word	0x20002474
 8002bb8:	200025d4 	.word	0x200025d4
 8002bbc:	20002430 	.word	0x20002430
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	20002180 	.word	0x20002180
 8002bc8:	2000039c 	.word	0x2000039c
 8002bcc:	200025e8 	.word	0x200025e8
 8002bd0:	200025dc 	.word	0x200025dc
 8002bd4:	200021cc 	.word	0x200021cc
 8002bd8:	200023d0 	.word	0x200023d0
 8002bdc:	20002185 	.word	0x20002185
 8002be0:	200025e4 	.word	0x200025e4
 8002be4:	200025d2 	.word	0x200025d2
 8002be8:	20002186 	.word	0x20002186
 8002bec:	200025e0 	.word	0x200025e0
 8002bf0:	40010800 	.word	0x40010800
								}
								else{
									HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //LAMP1
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bfa:	488d      	ldr	r0, [pc, #564]	; (8002e30 <main+0x8a0>)
 8002bfc:	f002 fa1f 	bl	800503e <HAL_GPIO_WritePin>
								}
							}
							if(data[nowIdx].isPeople == 2){
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <main+0x8a4>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	498c      	ldr	r1, [pc, #560]	; (8002e38 <main+0x8a8>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	011a      	lsls	r2, r3, #4
 8002c0e:	4413      	add	r3, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	3332      	adds	r3, #50	; 0x32
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d133      	bne.n	8002c82 <main+0x6f2>
								if(ArriveFlag == 1){
 8002c1a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d128      	bne.n	8002c74 <main+0x6e4>
									HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c26:	4882      	ldr	r0, [pc, #520]	; (8002e30 <main+0x8a0>)
 8002c28:	f002 fa21 	bl	800506e <HAL_GPIO_TogglePin>
									if(helpBuzzer % 2 == 0 && (helpBuzzer+1) % 5 && helpBuzzer < 9){
 8002c2c:	4b83      	ldr	r3, [pc, #524]	; (8002e3c <main+0x8ac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d12a      	bne.n	8002c8e <main+0x6fe>
 8002c38:	4b80      	ldr	r3, [pc, #512]	; (8002e3c <main+0x8ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1c59      	adds	r1, r3, #1
 8002c3e:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <main+0x8b0>)
 8002c40:	fb83 2301 	smull	r2, r3, r3, r1
 8002c44:	105a      	asrs	r2, r3, #1
 8002c46:	17cb      	asrs	r3, r1, #31
 8002c48:	1ad2      	subs	r2, r2, r3
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	1aca      	subs	r2, r1, r3
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d01b      	beq.n	8002c8e <main+0x6fe>
 8002c56:	4b79      	ldr	r3, [pc, #484]	; (8002e3c <main+0x8ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	dc17      	bgt.n	8002c8e <main+0x6fe>
										helpBuzzer++;
 8002c5e:	4b77      	ldr	r3, [pc, #476]	; (8002e3c <main+0x8ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <main+0x8ac>)
 8002c66:	6013      	str	r3, [r2, #0]
										HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c6c:	4875      	ldr	r0, [pc, #468]	; (8002e44 <main+0x8b4>)
 8002c6e:	f002 f9fe 	bl	800506e <HAL_GPIO_TogglePin>
 8002c72:	e00c      	b.n	8002c8e <main+0x6fe>
									}
								}
								else{
									HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //LAMP1
 8002c74:	2201      	movs	r2, #1
 8002c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c7a:	486d      	ldr	r0, [pc, #436]	; (8002e30 <main+0x8a0>)
 8002c7c:	f002 f9df 	bl	800503e <HAL_GPIO_WritePin>
 8002c80:	e005      	b.n	8002c8e <main+0x6fe>
								}
							}
							else{
								HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); //LAMP1
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c88:	4869      	ldr	r0, [pc, #420]	; (8002e30 <main+0x8a0>)
 8002c8a:	f002 f9d8 	bl	800503e <HAL_GPIO_WritePin>
							}
						}

						if(data[nowIdx+1].isPeople == 1){
 8002c8e:	4b69      	ldr	r3, [pc, #420]	; (8002e34 <main+0x8a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	4968      	ldr	r1, [pc, #416]	; (8002e38 <main+0x8a8>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3332      	adds	r3, #50	; 0x32
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <main+0x728>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1); //LAMP2
 8002caa:	2201      	movs	r2, #1
 8002cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cb0:	485f      	ldr	r0, [pc, #380]	; (8002e30 <main+0x8a0>)
 8002cb2:	f002 f9c4 	bl	800503e <HAL_GPIO_WritePin>
 8002cb6:	e53c      	b.n	8002732 <main+0x1a2>
						}
						else{
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0); //LAMP2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cbe:	485c      	ldr	r0, [pc, #368]	; (8002e30 <main+0x8a0>)
 8002cc0:	f002 f9bd 	bl	800503e <HAL_GPIO_WritePin>
				if (UART1_Rx_End) {
 8002cc4:	e535      	b.n	8002732 <main+0x1a2>
				}
			}
		}

		else{ //Remote Mode
			uint8_t data[] = "1,604,1315";
 8002cc6:	4a60      	ldr	r2, [pc, #384]	; (8002e48 <main+0x8b8>)
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cce:	c303      	stmia	r3!, {r0, r1}
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	0c12      	lsrs	r2, r2, #16
 8002cd6:	701a      	strb	r2, [r3, #0]
			uint8_t data3[] = "000033333@";
 8002cd8:	4a5c      	ldr	r2, [pc, #368]	; (8002e4c <main+0x8bc>)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cde:	c303      	stmia	r3!, {r0, r1}
 8002ce0:	801a      	strh	r2, [r3, #0]
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	0c12      	lsrs	r2, r2, #16
 8002ce6:	701a      	strb	r2, [r3, #0]
			uint8_t uartLoraFlag = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			while(1){
				if (UART1_Rx_End) {
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <main+0x8c0>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03b      	beq.n	8002d6e <main+0x7de>
					//printf("Re:%s, %d!!!!\r\n", UART1_Rx_Buffer, strlen(UART1_Rx_Buffer));
					char* token;

					token = strtok(UART1_Rx_Buffer, "!");
 8002cf6:	4957      	ldr	r1, [pc, #348]	; (8002e54 <main+0x8c4>)
 8002cf8:	4857      	ldr	r0, [pc, #348]	; (8002e58 <main+0x8c8>)
 8002cfa:	f006 fb5f 	bl	80093bc <strtok>
 8002cfe:	6238      	str	r0, [r7, #32]
					strncpy(data, token, 10);
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	220a      	movs	r2, #10
 8002d06:	6a39      	ldr	r1, [r7, #32]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f006 fb43 	bl	8009394 <strncpy>
					printf("\r\nRe:%s!!!!!\r\n\r\n", data);
 8002d0e:	f107 0310 	add.w	r3, r7, #16
 8002d12:	4619      	mov	r1, r3
 8002d14:	4851      	ldr	r0, [pc, #324]	; (8002e5c <main+0x8cc>)
 8002d16:	f006 f92f 	bl	8008f78 <iprintf>

					token = strtok(NULL, "!");
 8002d1a:	494e      	ldr	r1, [pc, #312]	; (8002e54 <main+0x8c4>)
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f006 fb4d 	bl	80093bc <strtok>
 8002d22:	6238      	str	r0, [r7, #32]
					strncpy(data3, token, 10);
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	220a      	movs	r2, #10
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f006 fb32 	bl	8009394 <strncpy>
					printf("\r\nRe:%s!!!!!\r\n\r\n", data3);
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4849      	ldr	r0, [pc, #292]	; (8002e5c <main+0x8cc>)
 8002d36:	f006 f91f 	bl	8008f78 <iprintf>

					for (int i = 0; i < 50; i++) {
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	e007      	b.n	8002d50 <main+0x7c0>
						UART1_Rx_Buffer[i] = '\0';
 8002d40:	4a45      	ldr	r2, [pc, #276]	; (8002e58 <main+0x8c8>)
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	4413      	add	r3, r2
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	2b31      	cmp	r3, #49	; 0x31
 8002d54:	ddf4      	ble.n	8002d40 <main+0x7b0>
					}
					//LoRa_SendData(UART1_Rx_Buffer, strlen((char*)UART1_Rx_Buffer));
					UART1_Len = 0;
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <main+0x8d0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <main+0x8c0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
					uartLoraFlag = 1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					asd = 0;
 8002d68:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <main+0x8d4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
				}
				if (LoRaRxEnd) {
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <main+0x8d8>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d021      	beq.n	8002dbc <main+0x82c>
					printf("LoRa : %s, %d\r\n", LoRaRxData, strlen(LoRaRxData));
 8002d78:	483c      	ldr	r0, [pc, #240]	; (8002e6c <main+0x8dc>)
 8002d7a:	f7fd f9f3 	bl	8000164 <strlen>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	493a      	ldr	r1, [pc, #232]	; (8002e6c <main+0x8dc>)
 8002d84:	483a      	ldr	r0, [pc, #232]	; (8002e70 <main+0x8e0>)
 8002d86:	f006 f8f7 	bl	8008f78 <iprintf>
					asd++;
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <main+0x8d4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a34      	ldr	r2, [pc, #208]	; (8002e64 <main+0x8d4>)
 8002d92:	6013      	str	r3, [r2, #0]
					for (int i = 0; i < 11; i++) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d98:	e007      	b.n	8002daa <main+0x81a>
						LoRaRxData[i] = '\0';
 8002d9a:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <main+0x8dc>)
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	4413      	add	r3, r2
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 11; i++) {
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	3301      	adds	r3, #1
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	2b0a      	cmp	r3, #10
 8002dae:	ddf4      	ble.n	8002d9a <main+0x80a>
					}
					LoRaLen = 0;
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <main+0x8e4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
					LoRaRxEnd = 0; // ?��?�� ?���?? ?��?���?? 리셋
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <main+0x8d8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GetTick() - LoRaTick >= 3000 && uartLoraFlag == 1) {
 8002dbc:	f001 fbc6 	bl	800454c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <main+0x8e8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d98e      	bls.n	8002cee <main+0x75e>
 8002dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d18a      	bne.n	8002cee <main+0x75e>
					LoRaTick = HAL_GetTick();
 8002dd8:	f001 fbb8 	bl	800454c <HAL_GetTick>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <main+0x8e8>)
 8002de0:	6013      	str	r3, [r2, #0]
					if(asd < 2){
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <main+0x8d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	dc1d      	bgt.n	8002e26 <main+0x896>
						if(asd%2 == 0){
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <main+0x8d4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <main+0x880>
							printf("data : %s\r\n", data);
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	481f      	ldr	r0, [pc, #124]	; (8002e7c <main+0x8ec>)
 8002dfe:	f006 f8bb 	bl	8008f78 <iprintf>
							LoRa_SendData(data, sizeof(data)-1);
 8002e02:	f107 0310 	add.w	r3, r7, #16
 8002e06:	210a      	movs	r1, #10
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fa99 	bl	8002340 <LoRa_SendData>
 8002e0e:	e76e      	b.n	8002cee <main+0x75e>
							//printf("%s\r\n", data);
						}
						else{
							printf("data3 : %s\r\n", data3);
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	481a      	ldr	r0, [pc, #104]	; (8002e80 <main+0x8f0>)
 8002e16:	f006 f8af 	bl	8008f78 <iprintf>
							LoRa_SendData(data3, sizeof(data3)-1);
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	210a      	movs	r1, #10
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fa8e 	bl	8002340 <LoRa_SendData>
 8002e24:	e763      	b.n	8002cee <main+0x75e>
							//printf("%s\r\n", data3);
						}
					}
					else{
						uartLoraFlag = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if (UART1_Rx_End) {
 8002e2c:	e75f      	b.n	8002cee <main+0x75e>
 8002e2e:	bf00      	nop
 8002e30:	40010800 	.word	0x40010800
 8002e34:	20002180 	.word	0x20002180
 8002e38:	2000039c 	.word	0x2000039c
 8002e3c:	200025e8 	.word	0x200025e8
 8002e40:	66666667 	.word	0x66666667
 8002e44:	40010c00 	.word	0x40010c00
 8002e48:	0800bb44 	.word	0x0800bb44
 8002e4c:	0800bb50 	.word	0x0800bb50
 8002e50:	200024cf 	.word	0x200024cf
 8002e54:	0800b9d8 	.word	0x0800b9d8
 8002e58:	2000249c 	.word	0x2000249c
 8002e5c:	0800bb14 	.word	0x0800bb14
 8002e60:	200024ce 	.word	0x200024ce
 8002e64:	20000034 	.word	0x20000034
 8002e68:	20002474 	.word	0x20002474
 8002e6c:	20002478 	.word	0x20002478
 8002e70:	0800bb04 	.word	0x0800bb04
 8002e74:	20002483 	.word	0x20002483
 8002e78:	200025d8 	.word	0x200025d8
 8002e7c:	0800bb28 	.word	0x0800bb28
 8002e80:	0800bb34 	.word	0x0800bb34

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b090      	sub	sp, #64	; 0x40
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 0318 	add.w	r3, r7, #24
 8002e8e:	2228      	movs	r2, #40	; 0x28
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f006 fa64 	bl	8009360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002eba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fecd 	bl	8005c64 <HAL_RCC_OscConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002ed0:	f000 fb64 	bl	800359c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 f93b 	bl	8006168 <HAL_RCC_ClockConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002ef8:	f000 fb50 	bl	800359c <Error_Handler>
  }
}
 8002efc:	bf00      	nop
 8002efe:	3740      	adds	r7, #64	; 0x40
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <MX_I2C1_Init+0x54>)
 8002f0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <MX_I2C1_Init+0x58>)
 8002f12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <MX_I2C1_Init+0x50>)
 8002f42:	f002 f8c5 	bl	80050d0 <HAL_I2C_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f4c:	f000 fb26 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000022c 	.word	0x2000022c
 8002f58:	40005400 	.word	0x40005400
 8002f5c:	000186a0 	.word	0x000186a0

08002f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_USART1_UART_Init+0x50>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f98:	f003 fa74 	bl	8006484 <HAL_UART_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fa2:	f000 fafb 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000280 	.word	0x20000280
 8002fb0:	40013800 	.word	0x40013800

08002fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <MX_USART2_UART_Init+0x50>)
 8002fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_USART2_UART_Init+0x4c>)
 8002fec:	f003 fa4a 	bl	8006484 <HAL_UART_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ff6:	f000 fad1 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200002c8 	.word	0x200002c8
 8003004:	40004400 	.word	0x40004400

08003008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <MX_USART3_UART_Init+0x50>)
 8003010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 8003014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8003018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 800302e:	220c      	movs	r2, #12
 8003030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <MX_USART3_UART_Init+0x4c>)
 8003040:	f003 fa20 	bl	8006484 <HAL_UART_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800304a:	f000 faa7 	bl	800359c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000310 	.word	0x20000310
 8003058:	40004800 	.word	0x40004800

0800305c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_DMA_Init+0x38>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <MX_DMA_Init+0x38>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6153      	str	r3, [r2, #20]
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_DMA_Init+0x38>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	200d      	movs	r0, #13
 8003080:	f001 fb69 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003084:	200d      	movs	r0, #13
 8003086:	f001 fb82 	bl	800478e <HAL_NVIC_EnableIRQ>

}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	4b47      	ldr	r3, [pc, #284]	; (80031cc <MX_GPIO_Init+0x134>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a46      	ldr	r2, [pc, #280]	; (80031cc <MX_GPIO_Init+0x134>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b44      	ldr	r3, [pc, #272]	; (80031cc <MX_GPIO_Init+0x134>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <MX_GPIO_Init+0x134>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a40      	ldr	r2, [pc, #256]	; (80031cc <MX_GPIO_Init+0x134>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <MX_GPIO_Init+0x134>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin, GPIO_PIN_RESET);
 80030dc:	2200      	movs	r2, #0
 80030de:	f641 0103 	movw	r1, #6147	; 0x1803
 80030e2:	483b      	ldr	r0, [pc, #236]	; (80031d0 <MX_GPIO_Init+0x138>)
 80030e4:	f001 ffab 	bl	800503e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80030ee:	4839      	ldr	r0, [pc, #228]	; (80031d4 <MX_GPIO_Init+0x13c>)
 80030f0:	f001 ffa5 	bl	800503e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin;
 80030f4:	f641 0303 	movw	r3, #6147	; 0x1803
 80030f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fa:	2301      	movs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2302      	movs	r3, #2
 8003104:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4619      	mov	r1, r3
 800310c:	4830      	ldr	r0, [pc, #192]	; (80031d0 <MX_GPIO_Init+0x138>)
 800310e:	f001 fdfb 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8003112:	2310      	movs	r3, #16
 8003114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	4619      	mov	r1, r3
 8003124:	482a      	ldr	r0, [pc, #168]	; (80031d0 <MX_GPIO_Init+0x138>)
 8003126:	f001 fdef 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800312a:	23e0      	movs	r3, #224	; 0xe0
 800312c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <MX_GPIO_Init+0x140>)
 8003130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	4619      	mov	r1, r3
 800313c:	4824      	ldr	r0, [pc, #144]	; (80031d0 <MX_GPIO_Init+0x138>)
 800313e:	f001 fde3 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN5_Pin;
 8003142:	2303      	movs	r3, #3
 8003144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <MX_GPIO_Init+0x140>)
 8003148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314e:	f107 0308 	add.w	r3, r7, #8
 8003152:	4619      	mov	r1, r3
 8003154:	481f      	ldr	r0, [pc, #124]	; (80031d4 <MX_GPIO_Init+0x13c>)
 8003156:	f001 fdd7 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
  GPIO_InitStruct.Pin = STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin;
 800315a:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 800315e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003160:	2301      	movs	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2302      	movs	r3, #2
 800316a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	f107 0308 	add.w	r3, r7, #8
 8003170:	4619      	mov	r1, r3
 8003172:	4818      	ldr	r0, [pc, #96]	; (80031d4 <MX_GPIO_Init+0x13c>)
 8003174:	f001 fdc8 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SLCT_Pin */
  GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8003178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003182:	2301      	movs	r3, #1
 8003184:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4619      	mov	r1, r3
 800318c:	4810      	ldr	r0, [pc, #64]	; (80031d0 <MX_GPIO_Init+0x138>)
 800318e:	f001 fdbb 	bl	8004d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	2006      	movs	r0, #6
 8003198:	f001 fadd 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800319c:	2006      	movs	r0, #6
 800319e:	f001 faf6 	bl	800478e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	2007      	movs	r0, #7
 80031a8:	f001 fad5 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031ac:	2007      	movs	r0, #7
 80031ae:	f001 faee 	bl	800478e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	2017      	movs	r0, #23
 80031b8:	f001 facd 	bl	8004756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031bc:	2017      	movs	r0, #23
 80031be:	f001 fae6 	bl	800478e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010800 	.word	0x40010800
 80031d4:	40010c00 	.word	0x40010c00
 80031d8:	10310000 	.word	0x10310000

080031dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d143      	bne.n	8003274 <HAL_GPIO_EXTI_Callback+0x98>
		if(!modeFlag){ //LOCAL
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_GPIO_EXTI_Callback+0x218>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <HAL_GPIO_EXTI_Callback+0x40>
			if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){
 80031f4:	2120      	movs	r1, #32
 80031f6:	4880      	ldr	r0, [pc, #512]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80031f8:	f001 ff0a 	bl	8005010 <HAL_GPIO_ReadPin>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <HAL_GPIO_EXTI_Callback+0x38>
				BtnTick = HAL_GetTick();
 8003202:	f001 f9a3 	bl	800454c <HAL_GetTick>
 8003206:	4603      	mov	r3, r0
 8003208:	4a7c      	ldr	r2, [pc, #496]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 800320a:	6013      	str	r3, [r2, #0]
				pushingFlag = 1;
 800320c:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_GPIO_EXTI_Callback+0x224>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
			else{
				printf("0x024,30x03\r\n");
			}
		}
	}
}
 8003212:	e0ea      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				pushingFlag = 0;
 8003214:	4b7a      	ldr	r3, [pc, #488]	; (8003400 <HAL_GPIO_EXTI_Callback+0x224>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
}
 800321a:	e0e6      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){
 800321c:	2120      	movs	r1, #32
 800321e:	4876      	ldr	r0, [pc, #472]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003220:	f001 fef6 	bl	8005010 <HAL_GPIO_ReadPin>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_GPIO_EXTI_Callback+0x5a>
				BtnTick = HAL_GetTick();
 800322a:	f001 f98f 	bl	800454c <HAL_GetTick>
 800322e:	4603      	mov	r3, r0
 8003230:	4a72      	ldr	r2, [pc, #456]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	e0d9      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				if(HAL_GetTick() - BtnTick < 2000){
 8003236:	f001 f989 	bl	800454c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003246:	d203      	bcs.n	8003250 <HAL_GPIO_EXTI_Callback+0x74>
					printf("0x020,10x03\r\n");
 8003248:	486e      	ldr	r0, [pc, #440]	; (8003404 <HAL_GPIO_EXTI_Callback+0x228>)
 800324a:	f005 fefb 	bl	8009044 <puts>
}
 800324e:	e0cc      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				else if(HAL_GetTick() - BtnTick < 5000){
 8003250:	f001 f97c 	bl	800454c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	4b69      	ldr	r3, [pc, #420]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003260:	4293      	cmp	r3, r2
 8003262:	d803      	bhi.n	800326c <HAL_GPIO_EXTI_Callback+0x90>
					printf("0x020,20x03\r\n");
 8003264:	4868      	ldr	r0, [pc, #416]	; (8003408 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003266:	f005 feed 	bl	8009044 <puts>
}
 800326a:	e0be      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
					printf("0x020,30x03\r\n");
 800326c:	4867      	ldr	r0, [pc, #412]	; (800340c <HAL_GPIO_EXTI_Callback+0x230>)
 800326e:	f005 fee9 	bl	8009044 <puts>
}
 8003272:	e0ba      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d12b      	bne.n	80032d2 <HAL_GPIO_EXTI_Callback+0xf6>
		if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	485e      	ldr	r0, [pc, #376]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x21c>)
 800327e:	f001 fec7 	bl	8005010 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <HAL_GPIO_EXTI_Callback+0xb8>
			BtnTick = HAL_GetTick();
 8003288:	f001 f960 	bl	800454c <HAL_GetTick>
 800328c:	4603      	mov	r3, r0
 800328e:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 8003290:	6013      	str	r3, [r2, #0]
}
 8003292:	e0aa      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			if(HAL_GetTick() - BtnTick < 2000){
 8003294:	f001 f95a 	bl	800454c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032a4:	d203      	bcs.n	80032ae <HAL_GPIO_EXTI_Callback+0xd2>
				printf("0x021,10x03\r\n");
 80032a6:	485a      	ldr	r0, [pc, #360]	; (8003410 <HAL_GPIO_EXTI_Callback+0x234>)
 80032a8:	f005 fecc 	bl	8009044 <puts>
}
 80032ac:	e09d      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			else if(HAL_GetTick() - BtnTick < 5000){
 80032ae:	f001 f94d 	bl	800454c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b51      	ldr	r3, [pc, #324]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80032be:	4293      	cmp	r3, r2
 80032c0:	d803      	bhi.n	80032ca <HAL_GPIO_EXTI_Callback+0xee>
				printf("0x021,20x03\r\n");
 80032c2:	4854      	ldr	r0, [pc, #336]	; (8003414 <HAL_GPIO_EXTI_Callback+0x238>)
 80032c4:	f005 febe 	bl	8009044 <puts>
}
 80032c8:	e08f      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x021,30x03\r\n");
 80032ca:	4853      	ldr	r0, [pc, #332]	; (8003418 <HAL_GPIO_EXTI_Callback+0x23c>)
 80032cc:	f005 feba 	bl	8009044 <puts>
}
 80032d0:	e08b      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	2b80      	cmp	r3, #128	; 0x80
 80032d6:	d12b      	bne.n	8003330 <HAL_GPIO_EXTI_Callback+0x154>
		if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	4847      	ldr	r0, [pc, #284]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80032dc:	f001 fe98 	bl	8005010 <HAL_GPIO_ReadPin>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <HAL_GPIO_EXTI_Callback+0x116>
			BtnTick = HAL_GetTick();
 80032e6:	f001 f931 	bl	800454c <HAL_GetTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a43      	ldr	r2, [pc, #268]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 80032ee:	6013      	str	r3, [r2, #0]
}
 80032f0:	e07b      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			if(HAL_GetTick() - BtnTick < 2000){
 80032f2:	f001 f92b 	bl	800454c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b40      	ldr	r3, [pc, #256]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003302:	d203      	bcs.n	800330c <HAL_GPIO_EXTI_Callback+0x130>
				printf("0x022,10x03\r\n");
 8003304:	4845      	ldr	r0, [pc, #276]	; (800341c <HAL_GPIO_EXTI_Callback+0x240>)
 8003306:	f005 fe9d 	bl	8009044 <puts>
}
 800330a:	e06e      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			else if(HAL_GetTick() - BtnTick < 5000){
 800330c:	f001 f91e 	bl	800454c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3287 	movw	r2, #4999	; 0x1387
 800331c:	4293      	cmp	r3, r2
 800331e:	d803      	bhi.n	8003328 <HAL_GPIO_EXTI_Callback+0x14c>
				printf("0x022,20x03\r\n");
 8003320:	483f      	ldr	r0, [pc, #252]	; (8003420 <HAL_GPIO_EXTI_Callback+0x244>)
 8003322:	f005 fe8f 	bl	8009044 <puts>
}
 8003326:	e060      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x022,30x03\r\n");
 8003328:	483e      	ldr	r0, [pc, #248]	; (8003424 <HAL_GPIO_EXTI_Callback+0x248>)
 800332a:	f005 fe8b 	bl	8009044 <puts>
}
 800332e:	e05c      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d12b      	bne.n	800338e <HAL_GPIO_EXTI_Callback+0x1b2>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8003336:	2101      	movs	r1, #1
 8003338:	483b      	ldr	r0, [pc, #236]	; (8003428 <HAL_GPIO_EXTI_Callback+0x24c>)
 800333a:	f001 fe69 	bl	8005010 <HAL_GPIO_ReadPin>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_GPIO_EXTI_Callback+0x174>
			BtnTick = HAL_GetTick();
 8003344:	f001 f902 	bl	800454c <HAL_GetTick>
 8003348:	4603      	mov	r3, r0
 800334a:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 800334c:	6013      	str	r3, [r2, #0]
}
 800334e:	e04c      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			if(HAL_GetTick() - BtnTick < 2000){
 8003350:	f001 f8fc 	bl	800454c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003360:	d203      	bcs.n	800336a <HAL_GPIO_EXTI_Callback+0x18e>
				printf("0x023,10x03\r\n");
 8003362:	4832      	ldr	r0, [pc, #200]	; (800342c <HAL_GPIO_EXTI_Callback+0x250>)
 8003364:	f005 fe6e 	bl	8009044 <puts>
}
 8003368:	e03f      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			else if(HAL_GetTick() - BtnTick < 5000){
 800336a:	f001 f8ef 	bl	800454c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3287 	movw	r2, #4999	; 0x1387
 800337a:	4293      	cmp	r3, r2
 800337c:	d803      	bhi.n	8003386 <HAL_GPIO_EXTI_Callback+0x1aa>
				printf("0x023,20x03\r\n");
 800337e:	482c      	ldr	r0, [pc, #176]	; (8003430 <HAL_GPIO_EXTI_Callback+0x254>)
 8003380:	f005 fe60 	bl	8009044 <puts>
}
 8003384:	e031      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x023,30x03\r\n");
 8003386:	482b      	ldr	r0, [pc, #172]	; (8003434 <HAL_GPIO_EXTI_Callback+0x258>)
 8003388:	f005 fe5c 	bl	8009044 <puts>
}
 800338c:	e02d      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d12a      	bne.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8003394:	2102      	movs	r1, #2
 8003396:	4824      	ldr	r0, [pc, #144]	; (8003428 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003398:	f001 fe3a 	bl	8005010 <HAL_GPIO_ReadPin>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_GPIO_EXTI_Callback+0x1d2>
			BtnTick = HAL_GetTick();
 80033a2:	f001 f8d3 	bl	800454c <HAL_GetTick>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	e01d      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			if(HAL_GetTick() - BtnTick < 2000){
 80033ae:	f001 f8cd 	bl	800454c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033be:	d203      	bcs.n	80033c8 <HAL_GPIO_EXTI_Callback+0x1ec>
				printf("0x024,10x03\r\n");
 80033c0:	481d      	ldr	r0, [pc, #116]	; (8003438 <HAL_GPIO_EXTI_Callback+0x25c>)
 80033c2:	f005 fe3f 	bl	8009044 <puts>
}
 80033c6:	e010      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
			else if(HAL_GetTick() - BtnTick < 5000){
 80033c8:	f001 f8c0 	bl	800454c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_GPIO_EXTI_Callback+0x220>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3287 	movw	r2, #4999	; 0x1387
 80033d8:	4293      	cmp	r3, r2
 80033da:	d803      	bhi.n	80033e4 <HAL_GPIO_EXTI_Callback+0x208>
				printf("0x024,20x03\r\n");
 80033dc:	4817      	ldr	r0, [pc, #92]	; (800343c <HAL_GPIO_EXTI_Callback+0x260>)
 80033de:	f005 fe31 	bl	8009044 <puts>
}
 80033e2:	e002      	b.n	80033ea <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x024,30x03\r\n");
 80033e4:	4816      	ldr	r0, [pc, #88]	; (8003440 <HAL_GPIO_EXTI_Callback+0x264>)
 80033e6:	f005 fe2d 	bl	8009044 <puts>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200025d1 	.word	0x200025d1
 80033f8:	40010800 	.word	0x40010800
 80033fc:	200025e4 	.word	0x200025e4
 8003400:	200025d2 	.word	0x200025d2
 8003404:	0800bb5c 	.word	0x0800bb5c
 8003408:	0800bb6c 	.word	0x0800bb6c
 800340c:	0800bb7c 	.word	0x0800bb7c
 8003410:	0800bb8c 	.word	0x0800bb8c
 8003414:	0800bb9c 	.word	0x0800bb9c
 8003418:	0800bbac 	.word	0x0800bbac
 800341c:	0800bbbc 	.word	0x0800bbbc
 8003420:	0800bbcc 	.word	0x0800bbcc
 8003424:	0800bbdc 	.word	0x0800bbdc
 8003428:	40010c00 	.word	0x40010c00
 800342c:	0800bbec 	.word	0x0800bbec
 8003430:	0800bbfc 	.word	0x0800bbfc
 8003434:	0800bc0c 	.word	0x0800bc0c
 8003438:	0800bc1c 	.word	0x0800bc1c
 800343c:	0800bc2c 	.word	0x0800bc2c
 8003440:	0800bc3c 	.word	0x0800bc3c

08003444 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	static uint16_t index = 0;
	static uint8_t LoRaChk = 0;
	static uint16_t LoRaIdx = 0;
	if (huart->Instance == USART1) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_UART_RxCpltCallback+0x118>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d138      	bne.n	80034c8 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8003456:	4b42      	ldr	r3, [pc, #264]	; (8003560 <HAL_UART_RxCpltCallback+0x11c>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_UART_RxCpltCallback+0x120>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UART_RxCpltCallback+0x26>
 8003464:	2b01      	cmp	r3, #1
 8003466:	d00c      	beq.n	8003482 <HAL_UART_RxCpltCallback+0x3e>
 8003468:	e024      	b.n	80034b4 <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_UART_RxCpltCallback+0x124>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d103      	bne.n	800347a <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 8003472:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <HAL_UART_RxCpltCallback+0x120>)
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8003478:	e020      	b.n	80034bc <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 800347a:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <HAL_UART_RxCpltCallback+0x120>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
			break;
 8003480:	e01c      	b.n	80034bc <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 8003482:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_UART_RxCpltCallback+0x124>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d106      	bne.n	8003498 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 800348a:	4b35      	ldr	r3, [pc, #212]	; (8003560 <HAL_UART_RxCpltCallback+0x11c>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 8003490:	4b34      	ldr	r3, [pc, #208]	; (8003564 <HAL_UART_RxCpltCallback+0x120>)
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 8003496:	e011      	b.n	80034bc <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_UART_RxCpltCallback+0x128>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_UART_RxCpltCallback+0x124>)
 80034a0:	7819      	ldrb	r1, [r3, #0]
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_UART_RxCpltCallback+0x12c>)
 80034a4:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_UART_RxCpltCallback+0x128>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b2f      	ldr	r3, [pc, #188]	; (800356c <HAL_UART_RxCpltCallback+0x128>)
 80034b0:	701a      	strb	r2, [r3, #0]
			break;
 80034b2:	e003      	b.n	80034bc <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_UART_RxCpltCallback+0x120>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
			break;
 80034ba:	bf00      	nop
		}
		//HAL_UART_Transmit(&huart1, UART1_Rx_Data, 1, 10);
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 80034bc:	2201      	movs	r2, #1
 80034be:	492a      	ldr	r1, [pc, #168]	; (8003568 <HAL_UART_RxCpltCallback+0x124>)
 80034c0:	482c      	ldr	r0, [pc, #176]	; (8003574 <HAL_UART_RxCpltCallback+0x130>)
 80034c2:	f003 f8b2 	bl	800662a <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
	} else if (huart->Instance == USART3) {
		dataReceived = 1;
	}
}
 80034c6:	e045      	b.n	8003554 <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART2) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <HAL_UART_RxCpltCallback+0x134>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d138      	bne.n	8003544 <HAL_UART_RxCpltCallback+0x100>
		LoRaRxEnd = 1;
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_UART_RxCpltCallback+0x138>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
		switch (LoRaChk) {
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_UART_RxCpltCallback+0x13c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_RxCpltCallback+0xa2>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d00c      	beq.n	80034fe <HAL_UART_RxCpltCallback+0xba>
 80034e4:	e024      	b.n	8003530 <HAL_UART_RxCpltCallback+0xec>
			if (LoRaRxData[0] == 0x02) {
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_UART_RxCpltCallback+0x140>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d103      	bne.n	80034f6 <HAL_UART_RxCpltCallback+0xb2>
				LoRaChk = 1;
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_UART_RxCpltCallback+0x13c>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
			break;
 80034f4:	e020      	b.n	8003538 <HAL_UART_RxCpltCallback+0xf4>
				LoRaChk = 0;
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_UART_RxCpltCallback+0x13c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
			break;
 80034fc:	e01c      	b.n	8003538 <HAL_UART_RxCpltCallback+0xf4>
			if (LoRaRxData[0] == 0x03) {
 80034fe:	4b21      	ldr	r3, [pc, #132]	; (8003584 <HAL_UART_RxCpltCallback+0x140>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d106      	bne.n	8003514 <HAL_UART_RxCpltCallback+0xd0>
				LoRaRxEnd = 1;
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_UART_RxCpltCallback+0x138>)
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
				LoRaChk = 0;
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_UART_RxCpltCallback+0x13c>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
			break;
 8003512:	e011      	b.n	8003538 <HAL_UART_RxCpltCallback+0xf4>
				LoRaRxBuffer[UART1_Len] = LoRaRxData[0];
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_UART_RxCpltCallback+0x128>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_UART_RxCpltCallback+0x140>)
 800351c:	7819      	ldrb	r1, [r3, #0]
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_UART_RxCpltCallback+0x144>)
 8003520:	5499      	strb	r1, [r3, r2]
				LoRaLen++;
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_UART_RxCpltCallback+0x148>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_UART_RxCpltCallback+0x148>)
 800352c:	701a      	strb	r2, [r3, #0]
			break;
 800352e:	e003      	b.n	8003538 <HAL_UART_RxCpltCallback+0xf4>
			LoRaChk = 0;
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_UART_RxCpltCallback+0x13c>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
			break;
 8003536:	bf00      	nop
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
 8003538:	220a      	movs	r2, #10
 800353a:	4912      	ldr	r1, [pc, #72]	; (8003584 <HAL_UART_RxCpltCallback+0x140>)
 800353c:	4814      	ldr	r0, [pc, #80]	; (8003590 <HAL_UART_RxCpltCallback+0x14c>)
 800353e:	f003 f874 	bl	800662a <HAL_UART_Receive_IT>
}
 8003542:	e007      	b.n	8003554 <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART3) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_UART_RxCpltCallback+0x150>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d102      	bne.n	8003554 <HAL_UART_RxCpltCallback+0x110>
		dataReceived = 1;
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_UART_RxCpltCallback+0x154>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40013800 	.word	0x40013800
 8003560:	200024cf 	.word	0x200024cf
 8003564:	200025ec 	.word	0x200025ec
 8003568:	20002498 	.word	0x20002498
 800356c:	200024ce 	.word	0x200024ce
 8003570:	2000249c 	.word	0x2000249c
 8003574:	20000280 	.word	0x20000280
 8003578:	40004400 	.word	0x40004400
 800357c:	20002474 	.word	0x20002474
 8003580:	200025ed 	.word	0x200025ed
 8003584:	20002478 	.word	0x20002478
 8003588:	20002434 	.word	0x20002434
 800358c:	20002483 	.word	0x20002483
 8003590:	200002c8 	.word	0x200002c8
 8003594:	40004800 	.word	0x40004800
 8003598:	200025d0 	.word	0x200025d0

0800359c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a0:	b672      	cpsid	i
}
 80035a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035a4:	e7fe      	b.n	80035a4 <Error_Handler+0x8>

080035a6 <gps_checksum>:


char *nmeaData[15];

int gps_checksum(char *nmea_data)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fc fdd8 	bl	8000164 <strlen>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d801      	bhi.n	80035be <gps_checksum+0x18>
 80035ba:	2300      	movs	r3, #0
 80035bc:	e038      	b.n	8003630 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fc fdd0 	bl	8000164 <strlen>
 80035c4:	4603      	mov	r3, r0
 80035c6:	3b04      	subs	r3, #4
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fc fdc7 	bl	8000164 <strlen>
 80035d6:	4603      	mov	r3, r0
 80035d8:	3b03      	subs	r3, #3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e00a      	b.n	8003602 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4053      	eors	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	3301      	adds	r3, #1
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fc fdae 	bl	8000164 <strlen>
 8003608:	4603      	mov	r3, r0
 800360a:	1f5a      	subs	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	429a      	cmp	r2, r3
 8003610:	d8ec      	bhi.n	80035ec <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	2210      	movs	r2, #16
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f004 ff82 	bl	8008524 <strtol>
 8003620:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d101      	bne.n	800362e <gps_checksum+0x88>
        return 1;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <gps_checksum+0x8a>
    }
    else{
        return 0;
 800362e:	2300      	movs	r3, #0
    }
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b0b7      	sub	sp, #220	; 0xdc
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	2264      	movs	r2, #100	; 0x64
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fe85 	bl	8009360 <memset>
    char *marker = strtok(inputString, ",");
 8003656:	49c5      	ldr	r1, [pc, #788]	; (800396c <nmea_GPGGA+0x334>)
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f005 feaf 	bl	80093bc <strtok>
 800365e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003662:	e027      	b.n	80036b4 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003664:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003668:	f7fc fd7c 	bl	8000164 <strlen>
 800366c:	4603      	mov	r3, r0
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003674:	1c63      	adds	r3, r4, #1
 8003676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800367a:	4610      	mov	r0, r2
 800367c:	f003 ff9c 	bl	80075b8 <malloc>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	00a3      	lsls	r3, r4, #2
 8003686:	33d8      	adds	r3, #216	; 0xd8
 8003688:	443b      	add	r3, r7
 800368a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800368e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003692:	3b01      	subs	r3, #1
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	33d8      	adds	r3, #216	; 0xd8
 8003698:	443b      	add	r3, r7
 800369a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800369e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f005 ff83 	bl	80095ae <strcpy>
        marker = strtok(NULL, ",");
 80036a8:	49b0      	ldr	r1, [pc, #704]	; (800396c <nmea_GPGGA+0x334>)
 80036aa:	2000      	movs	r0, #0
 80036ac:	f005 fe86 	bl	80093bc <strtok>
 80036b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80036b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1d3      	bne.n	8003664 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	332c      	adds	r3, #44	; 0x2c
 80036d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 ff6a 	bl	80095ae <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80036da:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80036de:	2b53      	cmp	r3, #83	; 0x53
 80036e0:	d004      	beq.n	80036ec <nmea_GPGGA+0xb4>
 80036e2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80036e6:	2b4e      	cmp	r3, #78	; 0x4e
 80036e8:	f040 815f 	bne.w	80039aa <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036f2:	e010      	b.n	8003716 <nmea_GPGGA+0xde>
 80036f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036fa:	4413      	add	r3, r2
 80036fc:	7819      	ldrb	r1, [r3, #0]
 80036fe:	f107 021c 	add.w	r2, r7, #28
 8003702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003706:	4413      	add	r3, r2
 8003708:	460a      	mov	r2, r1
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003710:	3301      	adds	r3, #1
 8003712:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800371a:	2b01      	cmp	r3, #1
 800371c:	ddea      	ble.n	80036f4 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003724:	e011      	b.n	800374a <nmea_GPGGA+0x112>
 8003726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800372c:	3302      	adds	r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	7819      	ldrb	r1, [r3, #0]
 8003732:	f107 0214 	add.w	r2, r7, #20
 8003736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800373a:	4413      	add	r3, r2
 800373c:	460a      	mov	r2, r1
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003744:	3301      	adds	r3, #1
 8003746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800374a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800374e:	2b05      	cmp	r3, #5
 8003750:	dde9      	ble.n	8003726 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	220a      	movs	r2, #10
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fee2 	bl	8008524 <strtol>
 8003760:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f004 fe04 	bl	8008378 <strtof>
 8003770:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003774:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003778:	f7fd faba 	bl	8000cf0 <__aeabi_i2f>
 800377c:	4604      	mov	r4, r0
 800377e:	497c      	ldr	r1, [pc, #496]	; (8003970 <nmea_GPGGA+0x338>)
 8003780:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003784:	f7fd fbbc 	bl	8000f00 <__aeabi_fdiv>
 8003788:	4603      	mov	r3, r0
 800378a:	4619      	mov	r1, r3
 800378c:	4620      	mov	r0, r4
 800378e:	f7fd f9fb 	bl	8000b88 <__addsf3>
 8003792:	4603      	mov	r3, r0
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fe51 	bl	800043c <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037a8:	e010      	b.n	80037cc <nmea_GPGGA+0x194>
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b0:	4413      	add	r3, r2
 80037b2:	7819      	ldrb	r1, [r3, #0]
 80037b4:	f107 0210 	add.w	r2, r7, #16
 80037b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037bc:	4413      	add	r3, r2
 80037be:	460a      	mov	r2, r1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c6:	3301      	adds	r3, #1
 80037c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	ddea      	ble.n	80037aa <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037da:	e011      	b.n	8003800 <nmea_GPGGA+0x1c8>
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037e2:	3303      	adds	r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	7819      	ldrb	r1, [r3, #0]
 80037e8:	f107 0208 	add.w	r2, r7, #8
 80037ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037f0:	4413      	add	r3, r2
 80037f2:	460a      	mov	r2, r1
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037fa:	3301      	adds	r3, #1
 80037fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003804:	2b05      	cmp	r3, #5
 8003806:	dde9      	ble.n	80037dc <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	220a      	movs	r2, #10
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fe87 	bl	8008524 <strtol>
 8003816:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f004 fda9 	bl	8008378 <strtof>
 8003826:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800382a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800382e:	f7fd fa5f 	bl	8000cf0 <__aeabi_i2f>
 8003832:	4604      	mov	r4, r0
 8003834:	494e      	ldr	r1, [pc, #312]	; (8003970 <nmea_GPGGA+0x338>)
 8003836:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800383a:	f7fd fb61 	bl	8000f00 <__aeabi_fdiv>
 800383e:	4603      	mov	r3, r0
 8003840:	4619      	mov	r1, r3
 8003842:	4620      	mov	r0, r4
 8003844:	f7fd f9a0 	bl	8000b88 <__addsf3>
 8003848:	4603      	mov	r3, r0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fdf6 	bl	800043c <__aeabi_f2d>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003864:	f7fd f8aa 	bl	80009bc <__aeabi_dcmpeq>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d17a      	bne.n	8003964 <nmea_GPGGA+0x32c>
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800387a:	f7fd f89f 	bl	80009bc <__aeabi_dcmpeq>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d16f      	bne.n	8003964 <nmea_GPGGA+0x32c>
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <nmea_GPGGA+0x33c>)
 800388a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800388e:	f7fd f89f 	bl	80009d0 <__aeabi_dcmplt>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d065      	beq.n	8003964 <nmea_GPGGA+0x32c>
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <nmea_GPGGA+0x340>)
 800389e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80038a2:	f7fd f895 	bl	80009d0 <__aeabi_dcmplt>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05b      	beq.n	8003964 <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80038b2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 80038bc:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80038c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80038ce:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80038d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 fd4f 	bl	8008378 <strtof>
 80038da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80038e6:	f7fd fbeb 	bl	80010c0 <__aeabi_fcmpeq>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <nmea_GPGGA+0x2be>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	e001      	b.n	80038fa <nmea_GPGGA+0x2c2>
 80038f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80038fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003900:	220a      	movs	r2, #10
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f004 fe0d 	bl	8008524 <strtol>
 800390a:	4602      	mov	r2, r0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	220a      	movs	r2, #10
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fe04 	bl	8008524 <strtol>
 800391c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003924:	2b00      	cmp	r3, #0
 8003926:	bfcc      	ite	gt
 8003928:	2301      	movgt	r3, #1
 800392a:	2300      	movle	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f004 fd1d 	bl	8008378 <strtof>
 800393e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800394a:	f7fd fbb9 	bl	80010c0 <__aeabi_fcmpeq>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <nmea_GPGGA+0x322>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	e001      	b.n	800395e <nmea_GPGGA+0x326>
 800395a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003962:	e022      	b.n	80039aa <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800396a:	e016      	b.n	800399a <nmea_GPGGA+0x362>
 800396c:	0800bc4c 	.word	0x0800bc4c
 8003970:	42700000 	.word	0x42700000
 8003974:	40568000 	.word	0x40568000
 8003978:	40668000 	.word	0x40668000
 800397c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	33d8      	adds	r3, #216	; 0xd8
 8003984:	443b      	add	r3, r7
 8003986:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fe1c 	bl	80075c8 <free>
 8003990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003994:	3301      	adds	r3, #1
 8003996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800399a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800399e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dbea      	blt.n	800397c <nmea_GPGGA+0x344>
            return 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e019      	b.n	80039de <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b0:	e00e      	b.n	80039d0 <nmea_GPGGA+0x398>
 80039b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	33d8      	adds	r3, #216	; 0xd8
 80039ba:	443b      	add	r3, r7
 80039bc:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fe01 	bl	80075c8 <free>
 80039c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039d8:	429a      	cmp	r2, r3
 80039da:	dbea      	blt.n	80039b2 <nmea_GPGGA+0x37a>
    return 1;
 80039dc:	2301      	movs	r3, #1
}
 80039de:	4618      	mov	r0, r3
 80039e0:	37dc      	adds	r7, #220	; 0xdc
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop

080039e8 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b0a3      	sub	sp, #140	; 0x8c
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	2264      	movs	r2, #100	; 0x64
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f005 fcad 	bl	8009360 <memset>
    char *marker = strtok(inputString, ",");
 8003a06:	493b      	ldr	r1, [pc, #236]	; (8003af4 <nmea_GPGSA+0x10c>)
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f005 fcd7 	bl	80093bc <strtok>
 8003a0e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003a12:	e027      	b.n	8003a64 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003a14:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003a18:	f7fc fba4 	bl	8000164 <strlen>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8003a24:	1c63      	adds	r3, r4, #1
 8003a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f003 fdc4 	bl	80075b8 <malloc>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	00a3      	lsls	r3, r4, #2
 8003a36:	3388      	adds	r3, #136	; 0x88
 8003a38:	443b      	add	r3, r7
 8003a3a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a42:	3b01      	subs	r3, #1
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	3388      	adds	r3, #136	; 0x88
 8003a48:	443b      	add	r3, r7
 8003a4a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003a4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003a52:	4618      	mov	r0, r3
 8003a54:	f005 fdab 	bl	80095ae <strcpy>
        marker = strtok(NULL, ",");
 8003a58:	4926      	ldr	r1, [pc, #152]	; (8003af4 <nmea_GPGSA+0x10c>)
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f005 fcae 	bl	80093bc <strtok>
 8003a60:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1d3      	bne.n	8003a14 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	220a      	movs	r2, #10
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fd56 	bl	8008524 <strtol>
 8003a78:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bfcc      	ite	gt
 8003a80:	2301      	movgt	r3, #1
 8003a82:	2300      	movle	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8003a90:	2303      	movs	r3, #3
 8003a92:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a94:	e00e      	b.n	8003ab4 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	3388      	adds	r3, #136	; 0x88
 8003a9c:	443b      	add	r3, r7
 8003a9e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aaa:	3301      	adds	r3, #1
 8003aac:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8003aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab6:	2b0e      	cmp	r3, #14
 8003ab8:	dded      	ble.n	8003a96 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ac4:	e00b      	b.n	8003ade <nmea_GPGSA+0xf6>
 8003ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	3388      	adds	r3, #136	; 0x88
 8003acc:	443b      	add	r3, r7
 8003ace:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 fd78 	bl	80075c8 <free>
 8003ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ada:	3301      	adds	r3, #1
 8003adc:	677b      	str	r3, [r7, #116]	; 0x74
 8003ade:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dbee      	blt.n	8003ac6 <nmea_GPGSA+0xde>
    return 1;
 8003ae8:	2301      	movs	r3, #1
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	378c      	adds	r7, #140	; 0x8c
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	0800bc4c 	.word	0x0800bc4c

08003af8 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b0b7      	sub	sp, #220	; 0xdc
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0c:	2264      	movs	r2, #100	; 0x64
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f005 fc25 	bl	8009360 <memset>
    char *marker = strtok(inputString, ",");
 8003b16:	49b0      	ldr	r1, [pc, #704]	; (8003dd8 <nmea_GPGLL+0x2e0>)
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	f005 fc4f 	bl	80093bc <strtok>
 8003b1e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003b22:	e027      	b.n	8003b74 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003b24:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003b28:	f7fc fb1c 	bl	8000164 <strlen>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003b34:	1c63      	adds	r3, r4, #1
 8003b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f003 fd3c 	bl	80075b8 <malloc>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	00a3      	lsls	r3, r4, #2
 8003b46:	33d8      	adds	r3, #216	; 0xd8
 8003b48:	443b      	add	r3, r7
 8003b4a:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8003b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b52:	3b01      	subs	r3, #1
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	33d8      	adds	r3, #216	; 0xd8
 8003b58:	443b      	add	r3, r7
 8003b5a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003b5e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f005 fd23 	bl	80095ae <strcpy>
        marker = strtok(NULL, ",");
 8003b68:	499b      	ldr	r1, [pc, #620]	; (8003dd8 <nmea_GPGLL+0x2e0>)
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f005 fc26 	bl	80093bc <strtok>
 8003b70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003b74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1d3      	bne.n	8003b24 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8003b84:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003b88:	2b53      	cmp	r3, #83	; 0x53
 8003b8a:	d004      	beq.n	8003b96 <nmea_GPGLL+0x9e>
 8003b8c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003b90:	2b4e      	cmp	r3, #78	; 0x4e
 8003b92:	f040 811c 	bne.w	8003dce <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b9c:	e010      	b.n	8003bc0 <nmea_GPGLL+0xc8>
 8003b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ba4:	4413      	add	r3, r2
 8003ba6:	7819      	ldrb	r1, [r3, #0]
 8003ba8:	f107 0220 	add.w	r2, r7, #32
 8003bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bb0:	4413      	add	r3, r2
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	ddea      	ble.n	8003b9e <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bce:	e011      	b.n	8003bf4 <nmea_GPGLL+0xfc>
 8003bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	7819      	ldrb	r1, [r3, #0]
 8003bdc:	f107 0218 	add.w	r2, r7, #24
 8003be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003be4:	4413      	add	r3, r2
 8003be6:	460a      	mov	r2, r1
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	dde9      	ble.n	8003bd0 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003bfc:	f107 0320 	add.w	r3, r7, #32
 8003c00:	220a      	movs	r2, #10
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fc8d 	bl	8008524 <strtol>
 8003c0a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003c0e:	f107 0318 	add.w	r3, r7, #24
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fbaf 	bl	8008378 <strtof>
 8003c1a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003c1e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003c22:	f7fd f865 	bl	8000cf0 <__aeabi_i2f>
 8003c26:	4604      	mov	r4, r0
 8003c28:	496c      	ldr	r1, [pc, #432]	; (8003ddc <nmea_GPGLL+0x2e4>)
 8003c2a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003c2e:	f7fd f967 	bl	8000f00 <__aeabi_fdiv>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4619      	mov	r1, r3
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7fc ffa6 	bl	8000b88 <__addsf3>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fbfc 	bl	800043c <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c5a:	e010      	b.n	8003c7e <nmea_GPGLL+0x186>
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c62:	4413      	add	r3, r2
 8003c64:	7819      	ldrb	r1, [r3, #0]
 8003c66:	f107 0214 	add.w	r2, r7, #20
 8003c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6e:	4413      	add	r3, r2
 8003c70:	460a      	mov	r2, r1
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	ddea      	ble.n	8003c5c <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c8c:	e011      	b.n	8003cb2 <nmea_GPGLL+0x1ba>
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c94:	3303      	adds	r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	7819      	ldrb	r1, [r3, #0]
 8003c9a:	f107 020c 	add.w	r2, r7, #12
 8003c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ca2:	4413      	add	r3, r2
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cac:	3301      	adds	r3, #1
 8003cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	dde9      	ble.n	8003c8e <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	220a      	movs	r2, #10
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f004 fc2e 	bl	8008524 <strtol>
 8003cc8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8003ccc:	f107 030c 	add.w	r3, r7, #12
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fb50 	bl	8008378 <strtof>
 8003cd8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003cdc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003ce0:	f7fd f806 	bl	8000cf0 <__aeabi_i2f>
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	493d      	ldr	r1, [pc, #244]	; (8003ddc <nmea_GPGLL+0x2e4>)
 8003ce8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003cec:	f7fd f908 	bl	8000f00 <__aeabi_fdiv>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fc ff47 	bl	8000b88 <__addsf3>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fc fb9d 	bl	800043c <__aeabi_f2d>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8003d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d015      	beq.n	8003d3e <nmea_GPGLL+0x246>
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003d1a:	f7fd f9d1 	bl	80010c0 <__aeabi_fcmpeq>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10c      	bne.n	8003d3e <nmea_GPGLL+0x246>
 8003d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <nmea_GPGLL+0x246>
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003d34:	f7fd f9c4 	bl	80010c0 <__aeabi_fcmpeq>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01a      	beq.n	8003d74 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d44:	e00e      	b.n	8003d64 <nmea_GPGLL+0x26c>
 8003d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	33d8      	adds	r3, #216	; 0xd8
 8003d4e:	443b      	add	r3, r7
 8003d50:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 fc37 	bl	80075c8 <free>
 8003d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	dbea      	blt.n	8003d46 <nmea_GPGLL+0x24e>
            return 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e02d      	b.n	8003dd0 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003d7a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d84:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8003d8e:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003d96:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d9e:	e00e      	b.n	8003dbe <nmea_GPGLL+0x2c6>
 8003da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	33d8      	adds	r3, #216	; 0xd8
 8003da8:	443b      	add	r3, r7
 8003daa:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fc0a 	bl	80075c8 <free>
 8003db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003db8:	3301      	adds	r3, #1
 8003dba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	dbea      	blt.n	8003da0 <nmea_GPGLL+0x2a8>
            return 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	37dc      	adds	r7, #220	; 0xdc
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	0800bc4c 	.word	0x0800bc4c
 8003ddc:	42700000 	.word	0x42700000

08003de0 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
    memset(nmeaData, 0, sizeof(nmeaData));
 8003dea:	223c      	movs	r2, #60	; 0x3c
 8003dec:	2100      	movs	r1, #0
 8003dee:	484e      	ldr	r0, [pc, #312]	; (8003f28 <nmea_parse+0x148>)
 8003df0:	f005 fab6 	bl	8009360 <memset>
    char * token = strtok(buffer, "$");
 8003df4:	494d      	ldr	r1, [pc, #308]	; (8003f2c <nmea_parse+0x14c>)
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f005 fae0 	bl	80093bc <strtok>
 8003dfc:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003e02:	e01d      	b.n	8003e40 <nmea_parse+0x60>
    	nmeaData[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003e04:	6978      	ldr	r0, [r7, #20]
 8003e06:	f7fc f9ad 	bl	8000164 <strlen>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	693c      	ldr	r4, [r7, #16]
 8003e10:	1c63      	adds	r3, r4, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	4610      	mov	r0, r2
 8003e16:	f003 fbcf 	bl	80075b8 <malloc>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <nmea_parse+0x148>)
 8003e20:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(nmeaData[cnt-1], token);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	4a3f      	ldr	r2, [pc, #252]	; (8003f28 <nmea_parse+0x148>)
 8003e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f005 fbbc 	bl	80095ae <strcpy>
        token = strtok(NULL, "$");
 8003e36:	493d      	ldr	r1, [pc, #244]	; (8003f2c <nmea_parse+0x14c>)
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f005 fabf 	bl	80093bc <strtok>
 8003e3e:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1de      	bne.n	8003e04 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e052      	b.n	8003ef2 <nmea_parse+0x112>
       if(strstr(nmeaData[i], "\r\n")!=NULL && gps_checksum(nmeaData[i])){
 8003e4c:	4a36      	ldr	r2, [pc, #216]	; (8003f28 <nmea_parse+0x148>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e54:	4936      	ldr	r1, [pc, #216]	; (8003f30 <nmea_parse+0x150>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f005 fb0c 	bl	8009474 <strstr>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d044      	beq.n	8003eec <nmea_parse+0x10c>
 8003e62:	4a31      	ldr	r2, [pc, #196]	; (8003f28 <nmea_parse+0x148>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fb9b 	bl	80035a6 <gps_checksum>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d03a      	beq.n	8003eec <nmea_parse+0x10c>
           if(strstr(nmeaData[i], "GNGLL")!=NULL){
 8003e76:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <nmea_parse+0x148>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	492d      	ldr	r1, [pc, #180]	; (8003f34 <nmea_parse+0x154>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f005 faf7 	bl	8009474 <strstr>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, nmeaData[i]);
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <nmea_parse+0x148>)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fe2e 	bl	8003af8 <nmea_GPGLL>
 8003e9c:	e026      	b.n	8003eec <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGSA")!=NULL){
 8003e9e:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <nmea_parse+0x148>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	4924      	ldr	r1, [pc, #144]	; (8003f38 <nmea_parse+0x158>)
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 fae3 	bl	8009474 <strstr>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, nmeaData[i]);
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <nmea_parse+0x148>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fd92 	bl	80039e8 <nmea_GPGSA>
 8003ec4:	e012      	b.n	8003eec <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGGA")!=NULL){
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <nmea_parse+0x148>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ece:	491b      	ldr	r1, [pc, #108]	; (8003f3c <nmea_parse+0x15c>)
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 facf 	bl	8009474 <strstr>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, nmeaData[i]);
 8003edc:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <nmea_parse+0x148>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fba6 	bl	8003638 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	dba8      	blt.n	8003e4c <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(nmeaData[i]);
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	e009      	b.n	8003f14 <nmea_parse+0x134>
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <nmea_parse+0x148>)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 fb5d 	bl	80075c8 <free>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	dbf1      	blt.n	8003f00 <nmea_parse+0x120>


}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200025f0 	.word	0x200025f0
 8003f2c:	0800bc50 	.word	0x0800bc50
 8003f30:	0800bc54 	.word	0x0800bc54
 8003f34:	0800bc58 	.word	0x0800bc58
 8003f38:	0800bc60 	.word	0x0800bc60
 8003f3c:	0800bc68 	.word	0x0800bc68

08003f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_MspInit+0x5c>)
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_MspInit+0x5c>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6193      	str	r3, [r2, #24]
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_MspInit+0x5c>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_MspInit+0x5c>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <HAL_MspInit+0x5c>)
 8003f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f68:	61d3      	str	r3, [r2, #28]
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_MspInit+0x5c>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_MspInit+0x60>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <HAL_MspInit+0x60>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40010000 	.word	0x40010000

08003fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 0310 	add.w	r3, r7, #16
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a15      	ldr	r2, [pc, #84]	; (8004014 <HAL_I2C_MspInit+0x70>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d123      	bne.n	800400c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <HAL_I2C_MspInit+0x74>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_I2C_MspInit+0x74>)
 8003fca:	f043 0308 	orr.w	r3, r3, #8
 8003fce:	6193      	str	r3, [r2, #24]
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_I2C_MspInit+0x74>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fdc:	23c0      	movs	r3, #192	; 0xc0
 8003fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe0:	2312      	movs	r3, #18
 8003fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe8:	f107 0310 	add.w	r3, r7, #16
 8003fec:	4619      	mov	r1, r3
 8003fee:	480b      	ldr	r0, [pc, #44]	; (800401c <HAL_I2C_MspInit+0x78>)
 8003ff0:	f000 fe8a 	bl	8004d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_I2C_MspInit+0x74>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4a07      	ldr	r2, [pc, #28]	; (8004018 <HAL_I2C_MspInit+0x74>)
 8003ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ffe:	61d3      	str	r3, [r2, #28]
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_I2C_MspInit+0x74>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800400c:	bf00      	nop
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40005400 	.word	0x40005400
 8004018:	40021000 	.word	0x40021000
 800401c:	40010c00 	.word	0x40010c00

08004020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0320 	add.w	r3, r7, #32
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a72      	ldr	r2, [pc, #456]	; (8004204 <HAL_UART_MspInit+0x1e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d13a      	bne.n	80040b6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004040:	4b71      	ldr	r3, [pc, #452]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4a70      	ldr	r2, [pc, #448]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 8004046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800404a:	6193      	str	r3, [r2, #24]
 800404c:	4b6e      	ldr	r3, [pc, #440]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	4b6b      	ldr	r3, [pc, #428]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	6193      	str	r3, [r2, #24]
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800407a:	2303      	movs	r3, #3
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	f107 0320 	add.w	r3, r7, #32
 8004082:	4619      	mov	r1, r3
 8004084:	4861      	ldr	r0, [pc, #388]	; (800420c <HAL_UART_MspInit+0x1ec>)
 8004086:	f000 fe3f 	bl	8004d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800408a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800408e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	f107 0320 	add.w	r3, r7, #32
 800409c:	4619      	mov	r1, r3
 800409e:	485b      	ldr	r0, [pc, #364]	; (800420c <HAL_UART_MspInit+0x1ec>)
 80040a0:	f000 fe32 	bl	8004d08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040a4:	2200      	movs	r2, #0
 80040a6:	2100      	movs	r1, #0
 80040a8:	2025      	movs	r0, #37	; 0x25
 80040aa:	f000 fb54 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040ae:	2025      	movs	r0, #37	; 0x25
 80040b0:	f000 fb6d 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040b4:	e0a2      	b.n	80041fc <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a55      	ldr	r2, [pc, #340]	; (8004210 <HAL_UART_MspInit+0x1f0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d138      	bne.n	8004132 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4a50      	ldr	r2, [pc, #320]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ca:	61d3      	str	r3, [r2, #28]
 80040cc:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d8:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	4a4a      	ldr	r2, [pc, #296]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	6193      	str	r3, [r2, #24]
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040f0:	2304      	movs	r3, #4
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f4:	2302      	movs	r3, #2
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fc:	f107 0320 	add.w	r3, r7, #32
 8004100:	4619      	mov	r1, r3
 8004102:	4842      	ldr	r0, [pc, #264]	; (800420c <HAL_UART_MspInit+0x1ec>)
 8004104:	f000 fe00 	bl	8004d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004108:	2308      	movs	r3, #8
 800410a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800410c:	2300      	movs	r3, #0
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	f107 0320 	add.w	r3, r7, #32
 8004118:	4619      	mov	r1, r3
 800411a:	483c      	ldr	r0, [pc, #240]	; (800420c <HAL_UART_MspInit+0x1ec>)
 800411c:	f000 fdf4 	bl	8004d08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004120:	2200      	movs	r2, #0
 8004122:	2100      	movs	r1, #0
 8004124:	2026      	movs	r0, #38	; 0x26
 8004126:	f000 fb16 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800412a:	2026      	movs	r0, #38	; 0x26
 800412c:	f000 fb2f 	bl	800478e <HAL_NVIC_EnableIRQ>
}
 8004130:	e064      	b.n	80041fc <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a37      	ldr	r2, [pc, #220]	; (8004214 <HAL_UART_MspInit+0x1f4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d15f      	bne.n	80041fc <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	4a31      	ldr	r2, [pc, #196]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 8004142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004146:	61d3      	str	r3, [r2, #28]
 8004148:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 800415a:	f043 0308 	orr.w	r3, r3, #8
 800415e:	6193      	str	r3, [r2, #24]
 8004160:	4b29      	ldr	r3, [pc, #164]	; (8004208 <HAL_UART_MspInit+0x1e8>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800416c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004172:	2302      	movs	r3, #2
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004176:	2303      	movs	r3, #3
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417a:	f107 0320 	add.w	r3, r7, #32
 800417e:	4619      	mov	r1, r3
 8004180:	4825      	ldr	r0, [pc, #148]	; (8004218 <HAL_UART_MspInit+0x1f8>)
 8004182:	f000 fdc1 	bl	8004d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800418a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004194:	f107 0320 	add.w	r3, r7, #32
 8004198:	4619      	mov	r1, r3
 800419a:	481f      	ldr	r0, [pc, #124]	; (8004218 <HAL_UART_MspInit+0x1f8>)
 800419c:	f000 fdb4 	bl	8004d08 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_UART_MspInit+0x200>)
 80041a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041c6:	2220      	movs	r2, #32
 80041c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80041d0:	4812      	ldr	r0, [pc, #72]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041d2:	f000 faf7 	bl	80047c4 <HAL_DMA_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80041dc:	f7ff f9de 	bl	800359c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a0e      	ldr	r2, [pc, #56]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80041e6:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_UART_MspInit+0x1fc>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	2027      	movs	r0, #39	; 0x27
 80041f2:	f000 fab0 	bl	8004756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80041f6:	2027      	movs	r0, #39	; 0x27
 80041f8:	f000 fac9 	bl	800478e <HAL_NVIC_EnableIRQ>
}
 80041fc:	bf00      	nop
 80041fe:	3730      	adds	r7, #48	; 0x30
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40013800 	.word	0x40013800
 8004208:	40021000 	.word	0x40021000
 800420c:	40010800 	.word	0x40010800
 8004210:	40004400 	.word	0x40004400
 8004214:	40004800 	.word	0x40004800
 8004218:	40010c00 	.word	0x40010c00
 800421c:	20000358 	.word	0x20000358
 8004220:	40020030 	.word	0x40020030

08004224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004228:	e7fe      	b.n	8004228 <NMI_Handler+0x4>

0800422a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800422e:	e7fe      	b.n	800422e <HardFault_Handler+0x4>

08004230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004234:	e7fe      	b.n	8004234 <MemManage_Handler+0x4>

08004236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800423a:	e7fe      	b.n	800423a <BusFault_Handler+0x4>

0800423c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004240:	e7fe      	b.n	8004240 <UsageFault_Handler+0x4>

08004242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800426a:	f000 f95d 	bl	8004528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}

08004272 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8004276:	2001      	movs	r0, #1
 8004278:	f000 ff12 	bl	80050a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800427c:	bf00      	nop
 800427e:	bd80      	pop	{r7, pc}

08004280 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8004284:	2002      	movs	r0, #2
 8004286:	f000 ff0b 	bl	80050a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004294:	4802      	ldr	r0, [pc, #8]	; (80042a0 <DMA1_Channel3_IRQHandler+0x10>)
 8004296:	f000 fc03 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000358 	.word	0x20000358

080042a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80042a8:	2020      	movs	r0, #32
 80042aa:	f000 fef9 	bl	80050a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80042ae:	2040      	movs	r0, #64	; 0x40
 80042b0:	f000 fef6 	bl	80050a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 80042b4:	2080      	movs	r0, #128	; 0x80
 80042b6:	f000 fef3 	bl	80050a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <USART1_IRQHandler+0x10>)
 80042c6:	f002 fa33 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000280 	.word	0x20000280

080042d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <USART2_IRQHandler+0x10>)
 80042da:	f002 fa29 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200002c8 	.word	0x200002c8

080042e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <USART3_IRQHandler+0x10>)
 80042ee:	f002 fa1f 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000310 	.word	0x20000310

080042fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return 1;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <_kill>:

int _kill(int pid, int sig)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004314:	f005 f91e 	bl	8009554 <__errno>
 8004318:	4603      	mov	r3, r0
 800431a:	2216      	movs	r2, #22
 800431c:	601a      	str	r2, [r3, #0]
  return -1;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <_exit>:

void _exit (int status)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004332:	f04f 31ff 	mov.w	r1, #4294967295
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff ffe7 	bl	800430a <_kill>
  while (1) {}    /* Make sure we hang here */
 800433c:	e7fe      	b.n	800433c <_exit+0x12>

0800433e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e00a      	b.n	8004366 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004350:	f3af 8000 	nop.w
 8004354:	4601      	mov	r1, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	60ba      	str	r2, [r7, #8]
 800435c:	b2ca      	uxtb	r2, r1
 800435e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3301      	adds	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	dbf0      	blt.n	8004350 <_read+0x12>
  }

  return len;
 800436e:	687b      	ldr	r3, [r7, #4]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439e:	605a      	str	r2, [r3, #4]
  return 0;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <_isatty>:

int _isatty(int file)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043b4:	2301      	movs	r3, #1
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <_sbrk+0x5c>)
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <_sbrk+0x60>)
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <_sbrk+0x64>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <_sbrk+0x64>)
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <_sbrk+0x68>)
 80043f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <_sbrk+0x64>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	429a      	cmp	r2, r3
 8004406:	d207      	bcs.n	8004418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004408:	f005 f8a4 	bl	8009554 <__errno>
 800440c:	4603      	mov	r3, r0
 800440e:	220c      	movs	r2, #12
 8004410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
 8004416:	e009      	b.n	800442c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <_sbrk+0x64>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <_sbrk+0x64>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	4a05      	ldr	r2, [pc, #20]	; (800443c <_sbrk+0x64>)
 8004428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800442a:	68fb      	ldr	r3, [r7, #12]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20005000 	.word	0x20005000
 8004438:	00000400 	.word	0x00000400
 800443c:	2000262c 	.word	0x2000262c
 8004440:	20002780 	.word	0x20002780

08004444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004450:	f7ff fff8 	bl	8004444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004454:	480b      	ldr	r0, [pc, #44]	; (8004484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004456:	490c      	ldr	r1, [pc, #48]	; (8004488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <LoopFillZerobss+0x16>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800445c:	e002      	b.n	8004464 <LoopCopyDataInit>

0800445e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004462:	3304      	adds	r3, #4

08004464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004468:	d3f9      	bcc.n	800445e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800446c:	4c09      	ldr	r4, [pc, #36]	; (8004494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800446e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004470:	e001      	b.n	8004476 <LoopFillZerobss>

08004472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004474:	3204      	adds	r2, #4

08004476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004478:	d3fb      	bcc.n	8004472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800447a:	f005 f871 	bl	8009560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800447e:	f7fe f887 	bl	8002590 <main>
  bx lr
 8004482:	4770      	bx	lr
  ldr r0, =_sdata
 8004484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004488:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800448c:	0800c128 	.word	0x0800c128
  ldr r2, =_sbss
 8004490:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004494:	20002780 	.word	0x20002780

08004498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004498:	e7fe      	b.n	8004498 <ADC1_2_IRQHandler>
	...

0800449c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HAL_Init+0x28>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <HAL_Init+0x28>)
 80044a6:	f043 0310 	orr.w	r3, r3, #16
 80044aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ac:	2003      	movs	r0, #3
 80044ae:	f000 f947 	bl	8004740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044b2:	200f      	movs	r0, #15
 80044b4:	f000 f808 	bl	80044c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044b8:	f7ff fd42 	bl	8003f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40022000 	.word	0x40022000

080044c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_InitTick+0x54>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_InitTick+0x58>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	4619      	mov	r1, r3
 80044da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044de:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f95f 	bl	80047aa <HAL_SYSTICK_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e00e      	b.n	8004514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b0f      	cmp	r3, #15
 80044fa:	d80a      	bhi.n	8004512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044fc:	2200      	movs	r2, #0
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	f000 f927 	bl	8004756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004508:	4a06      	ldr	r2, [pc, #24]	; (8004524 <HAL_InitTick+0x5c>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000038 	.word	0x20000038
 8004520:	20000040 	.word	0x20000040
 8004524:	2000003c 	.word	0x2000003c

08004528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_IncTick+0x1c>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_IncTick+0x20>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4413      	add	r3, r2
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <HAL_IncTick+0x20>)
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	20000040 	.word	0x20000040
 8004548:	20002630 	.word	0x20002630

0800454c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return uwTick;
 8004550:	4b02      	ldr	r3, [pc, #8]	; (800455c <HAL_GetTick+0x10>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	20002630 	.word	0x20002630

08004560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7ff fff0 	bl	800454c <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d005      	beq.n	8004586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_Delay+0x44>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004586:	bf00      	nop
 8004588:	f7ff ffe0 	bl	800454c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	429a      	cmp	r2, r3
 8004596:	d8f7      	bhi.n	8004588 <HAL_Delay+0x28>
  {
  }
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000040 	.word	0x20000040

080045a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045c4:	4013      	ands	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	60d3      	str	r3, [r2, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <__NVIC_GetPriorityGrouping+0x18>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 0307 	and.w	r3, r3, #7
}
 80045fe:	4618      	mov	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	db0b      	blt.n	8004636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	4906      	ldr	r1, [pc, #24]	; (8004640 <__NVIC_EnableIRQ+0x34>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2001      	movs	r0, #1
 800462e:	fa00 f202 	lsl.w	r2, r0, r2
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	e000e100 	.word	0xe000e100

08004644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	2b00      	cmp	r3, #0
 8004656:	db0a      	blt.n	800466e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	490c      	ldr	r1, [pc, #48]	; (8004690 <__NVIC_SetPriority+0x4c>)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	440b      	add	r3, r1
 8004668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800466c:	e00a      	b.n	8004684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4908      	ldr	r1, [pc, #32]	; (8004694 <__NVIC_SetPriority+0x50>)
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3b04      	subs	r3, #4
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	440b      	add	r3, r1
 8004682:	761a      	strb	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e100 	.word	0xe000e100
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	bf28      	it	cs
 80046b6:	2304      	movcs	r3, #4
 80046b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3304      	adds	r3, #4
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d902      	bls.n	80046c8 <NVIC_EncodePriority+0x30>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3b03      	subs	r3, #3
 80046c6:	e000      	b.n	80046ca <NVIC_EncodePriority+0x32>
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e0:	f04f 31ff 	mov.w	r1, #4294967295
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	43d9      	mvns	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	4313      	orrs	r3, r2
         );
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470c:	d301      	bcc.n	8004712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800470e:	2301      	movs	r3, #1
 8004710:	e00f      	b.n	8004732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <SysTick_Config+0x40>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3b01      	subs	r3, #1
 8004718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471a:	210f      	movs	r1, #15
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	f7ff ff90 	bl	8004644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <SysTick_Config+0x40>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472a:	4b04      	ldr	r3, [pc, #16]	; (800473c <SysTick_Config+0x40>)
 800472c:	2207      	movs	r2, #7
 800472e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	e000e010 	.word	0xe000e010

08004740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff2d 	bl	80045a8 <__NVIC_SetPriorityGrouping>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004768:	f7ff ff42 	bl	80045f0 <__NVIC_GetPriorityGrouping>
 800476c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f7ff ff90 	bl	8004698 <NVIC_EncodePriority>
 8004778:	4602      	mov	r2, r0
 800477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff5f 	bl	8004644 <__NVIC_SetPriority>
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff35 	bl	800460c <__NVIC_EnableIRQ>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ffa2 	bl	80046fc <SysTick_Config>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e043      	b.n	8004862 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_DMA_Init+0xa8>)
 80047e2:	4413      	add	r3, r2
 80047e4:	4a22      	ldr	r2, [pc, #136]	; (8004870 <HAL_DMA_Init+0xac>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	009a      	lsls	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <HAL_DMA_Init+0xb0>)
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800480e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	bffdfff8 	.word	0xbffdfff8
 8004870:	cccccccd 	.word	0xcccccccd
 8004874:	40020000 	.word	0x40020000

08004878 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_DMA_Start_IT+0x20>
 8004894:	2302      	movs	r3, #2
 8004896:	e04b      	b.n	8004930 <HAL_DMA_Start_IT+0xb8>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d13a      	bne.n	8004922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f9eb 	bl	8004cac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 020e 	orr.w	r2, r2, #14
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e00f      	b.n	8004910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0204 	bic.w	r2, r2, #4
 80048fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 020a 	orr.w	r2, r2, #10
 800490e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e005      	b.n	800492e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800492a:	2302      	movs	r3, #2
 800492c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d008      	beq.n	8004962 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2204      	movs	r2, #4
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e020      	b.n	80049a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 020e 	bic.w	r2, r2, #14
 8004970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	2101      	movs	r1, #1
 800498c:	fa01 f202 	lsl.w	r2, r1, r2
 8004990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d005      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e051      	b.n	8004a78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020e 	bic.w	r2, r2, #14
 80049e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <HAL_DMA_Abort_IT+0xd4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d029      	beq.n	8004a52 <HAL_DMA_Abort_IT+0xa2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <HAL_DMA_Abort_IT+0xd8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_Abort_IT+0x9e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_DMA_Abort_IT+0xdc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01a      	beq.n	8004a48 <HAL_DMA_Abort_IT+0x98>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <HAL_DMA_Abort_IT+0xe0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d012      	beq.n	8004a42 <HAL_DMA_Abort_IT+0x92>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <HAL_DMA_Abort_IT+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00a      	beq.n	8004a3c <HAL_DMA_Abort_IT+0x8c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_DMA_Abort_IT+0xe8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d102      	bne.n	8004a36 <HAL_DMA_Abort_IT+0x86>
 8004a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a34:	e00e      	b.n	8004a54 <HAL_DMA_Abort_IT+0xa4>
 8004a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a3a:	e00b      	b.n	8004a54 <HAL_DMA_Abort_IT+0xa4>
 8004a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a40:	e008      	b.n	8004a54 <HAL_DMA_Abort_IT+0xa4>
 8004a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a46:	e005      	b.n	8004a54 <HAL_DMA_Abort_IT+0xa4>
 8004a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4c:	e002      	b.n	8004a54 <HAL_DMA_Abort_IT+0xa4>
 8004a4e:	2310      	movs	r3, #16
 8004a50:	e000      	b.n	8004a54 <HAL_DMA_Abort_IT+0xa4>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <HAL_DMA_Abort_IT+0xec>)
 8004a56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
    } 
  }
  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40020008 	.word	0x40020008
 8004a88:	4002001c 	.word	0x4002001c
 8004a8c:	40020030 	.word	0x40020030
 8004a90:	40020044 	.word	0x40020044
 8004a94:	40020058 	.word	0x40020058
 8004a98:	4002006c 	.word	0x4002006c
 8004a9c:	40020000 	.word	0x40020000

08004aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	2204      	movs	r2, #4
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d04f      	beq.n	8004b68 <HAL_DMA_IRQHandler+0xc8>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d04a      	beq.n	8004b68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a66      	ldr	r2, [pc, #408]	; (8004c90 <HAL_DMA_IRQHandler+0x1f0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d029      	beq.n	8004b4e <HAL_DMA_IRQHandler+0xae>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a65      	ldr	r2, [pc, #404]	; (8004c94 <HAL_DMA_IRQHandler+0x1f4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xaa>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a63      	ldr	r2, [pc, #396]	; (8004c98 <HAL_DMA_IRQHandler+0x1f8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01a      	beq.n	8004b44 <HAL_DMA_IRQHandler+0xa4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a62      	ldr	r2, [pc, #392]	; (8004c9c <HAL_DMA_IRQHandler+0x1fc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d012      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x9e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a60      	ldr	r2, [pc, #384]	; (8004ca0 <HAL_DMA_IRQHandler+0x200>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00a      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x98>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5f      	ldr	r2, [pc, #380]	; (8004ca4 <HAL_DMA_IRQHandler+0x204>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d102      	bne.n	8004b32 <HAL_DMA_IRQHandler+0x92>
 8004b2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b30:	e00e      	b.n	8004b50 <HAL_DMA_IRQHandler+0xb0>
 8004b32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b36:	e00b      	b.n	8004b50 <HAL_DMA_IRQHandler+0xb0>
 8004b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b3c:	e008      	b.n	8004b50 <HAL_DMA_IRQHandler+0xb0>
 8004b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b42:	e005      	b.n	8004b50 <HAL_DMA_IRQHandler+0xb0>
 8004b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b48:	e002      	b.n	8004b50 <HAL_DMA_IRQHandler+0xb0>
 8004b4a:	2340      	movs	r3, #64	; 0x40
 8004b4c:	e000      	b.n	8004b50 <HAL_DMA_IRQHandler+0xb0>
 8004b4e:	2304      	movs	r3, #4
 8004b50:	4a55      	ldr	r2, [pc, #340]	; (8004ca8 <HAL_DMA_IRQHandler+0x208>)
 8004b52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 8094 	beq.w	8004c86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004b66:	e08e      	b.n	8004c86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d056      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x186>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d051      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 020a 	bic.w	r2, r2, #10
 8004b9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a38      	ldr	r2, [pc, #224]	; (8004c90 <HAL_DMA_IRQHandler+0x1f0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d029      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x166>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a37      	ldr	r2, [pc, #220]	; (8004c94 <HAL_DMA_IRQHandler+0x1f4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x162>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a35      	ldr	r2, [pc, #212]	; (8004c98 <HAL_DMA_IRQHandler+0x1f8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01a      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x15c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <HAL_DMA_IRQHandler+0x1fc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d012      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x156>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a32      	ldr	r2, [pc, #200]	; (8004ca0 <HAL_DMA_IRQHandler+0x200>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x150>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a31      	ldr	r2, [pc, #196]	; (8004ca4 <HAL_DMA_IRQHandler+0x204>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d102      	bne.n	8004bea <HAL_DMA_IRQHandler+0x14a>
 8004be4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004be8:	e00e      	b.n	8004c08 <HAL_DMA_IRQHandler+0x168>
 8004bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bee:	e00b      	b.n	8004c08 <HAL_DMA_IRQHandler+0x168>
 8004bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf4:	e008      	b.n	8004c08 <HAL_DMA_IRQHandler+0x168>
 8004bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bfa:	e005      	b.n	8004c08 <HAL_DMA_IRQHandler+0x168>
 8004bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c00:	e002      	b.n	8004c08 <HAL_DMA_IRQHandler+0x168>
 8004c02:	2320      	movs	r3, #32
 8004c04:	e000      	b.n	8004c08 <HAL_DMA_IRQHandler+0x168>
 8004c06:	2302      	movs	r3, #2
 8004c08:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <HAL_DMA_IRQHandler+0x208>)
 8004c0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d034      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c24:	e02f      	b.n	8004c86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d028      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x1e8>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d023      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 020e 	bic.w	r2, r2, #14
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
    }
  }
  return;
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
}
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40020008 	.word	0x40020008
 8004c94:	4002001c 	.word	0x4002001c
 8004c98:	40020030 	.word	0x40020030
 8004c9c:	40020044 	.word	0x40020044
 8004ca0:	40020058 	.word	0x40020058
 8004ca4:	4002006c 	.word	0x4002006c
 8004ca8:	40020000 	.word	0x40020000

08004cac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d108      	bne.n	8004cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cea:	e007      	b.n	8004cfc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08b      	sub	sp, #44	; 0x2c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d16:	2300      	movs	r3, #0
 8004d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d1a:	e169      	b.n	8004ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f040 8158 	bne.w	8004fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4a9a      	ldr	r2, [pc, #616]	; (8004fa8 <HAL_GPIO_Init+0x2a0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d05e      	beq.n	8004e02 <HAL_GPIO_Init+0xfa>
 8004d44:	4a98      	ldr	r2, [pc, #608]	; (8004fa8 <HAL_GPIO_Init+0x2a0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d875      	bhi.n	8004e36 <HAL_GPIO_Init+0x12e>
 8004d4a:	4a98      	ldr	r2, [pc, #608]	; (8004fac <HAL_GPIO_Init+0x2a4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d058      	beq.n	8004e02 <HAL_GPIO_Init+0xfa>
 8004d50:	4a96      	ldr	r2, [pc, #600]	; (8004fac <HAL_GPIO_Init+0x2a4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d86f      	bhi.n	8004e36 <HAL_GPIO_Init+0x12e>
 8004d56:	4a96      	ldr	r2, [pc, #600]	; (8004fb0 <HAL_GPIO_Init+0x2a8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d052      	beq.n	8004e02 <HAL_GPIO_Init+0xfa>
 8004d5c:	4a94      	ldr	r2, [pc, #592]	; (8004fb0 <HAL_GPIO_Init+0x2a8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d869      	bhi.n	8004e36 <HAL_GPIO_Init+0x12e>
 8004d62:	4a94      	ldr	r2, [pc, #592]	; (8004fb4 <HAL_GPIO_Init+0x2ac>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04c      	beq.n	8004e02 <HAL_GPIO_Init+0xfa>
 8004d68:	4a92      	ldr	r2, [pc, #584]	; (8004fb4 <HAL_GPIO_Init+0x2ac>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d863      	bhi.n	8004e36 <HAL_GPIO_Init+0x12e>
 8004d6e:	4a92      	ldr	r2, [pc, #584]	; (8004fb8 <HAL_GPIO_Init+0x2b0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d046      	beq.n	8004e02 <HAL_GPIO_Init+0xfa>
 8004d74:	4a90      	ldr	r2, [pc, #576]	; (8004fb8 <HAL_GPIO_Init+0x2b0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d85d      	bhi.n	8004e36 <HAL_GPIO_Init+0x12e>
 8004d7a:	2b12      	cmp	r3, #18
 8004d7c:	d82a      	bhi.n	8004dd4 <HAL_GPIO_Init+0xcc>
 8004d7e:	2b12      	cmp	r3, #18
 8004d80:	d859      	bhi.n	8004e36 <HAL_GPIO_Init+0x12e>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_GPIO_Init+0x80>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004e03 	.word	0x08004e03
 8004d8c:	08004ddd 	.word	0x08004ddd
 8004d90:	08004def 	.word	0x08004def
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e37 	.word	0x08004e37
 8004d9c:	08004e37 	.word	0x08004e37
 8004da0:	08004e37 	.word	0x08004e37
 8004da4:	08004e37 	.word	0x08004e37
 8004da8:	08004e37 	.word	0x08004e37
 8004dac:	08004e37 	.word	0x08004e37
 8004db0:	08004e37 	.word	0x08004e37
 8004db4:	08004e37 	.word	0x08004e37
 8004db8:	08004e37 	.word	0x08004e37
 8004dbc:	08004e37 	.word	0x08004e37
 8004dc0:	08004e37 	.word	0x08004e37
 8004dc4:	08004e37 	.word	0x08004e37
 8004dc8:	08004e37 	.word	0x08004e37
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	4a79      	ldr	r2, [pc, #484]	; (8004fbc <HAL_GPIO_Init+0x2b4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004dda:	e02c      	b.n	8004e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	623b      	str	r3, [r7, #32]
          break;
 8004de2:	e029      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	3304      	adds	r3, #4
 8004dea:	623b      	str	r3, [r7, #32]
          break;
 8004dec:	e024      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	3308      	adds	r3, #8
 8004df4:	623b      	str	r3, [r7, #32]
          break;
 8004df6:	e01f      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	623b      	str	r3, [r7, #32]
          break;
 8004e00:	e01a      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	623b      	str	r3, [r7, #32]
          break;
 8004e0e:	e013      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d105      	bne.n	8004e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e18:	2308      	movs	r3, #8
 8004e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	611a      	str	r2, [r3, #16]
          break;
 8004e22:	e009      	b.n	8004e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e24:	2308      	movs	r3, #8
 8004e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	615a      	str	r2, [r3, #20]
          break;
 8004e2e:	e003      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
          break;
 8004e34:	e000      	b.n	8004e38 <HAL_GPIO_Init+0x130>
          break;
 8004e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2bff      	cmp	r3, #255	; 0xff
 8004e3c:	d801      	bhi.n	8004e42 <HAL_GPIO_Init+0x13a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	e001      	b.n	8004e46 <HAL_GPIO_Init+0x13e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2bff      	cmp	r3, #255	; 0xff
 8004e4c:	d802      	bhi.n	8004e54 <HAL_GPIO_Init+0x14c>
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	e002      	b.n	8004e5a <HAL_GPIO_Init+0x152>
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	3b08      	subs	r3, #8
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	210f      	movs	r1, #15
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	6a39      	ldr	r1, [r7, #32]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	431a      	orrs	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80b1 	beq.w	8004fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e88:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <HAL_GPIO_Init+0x2b8>)
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	4a4c      	ldr	r2, [pc, #304]	; (8004fc0 <HAL_GPIO_Init+0x2b8>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6193      	str	r3, [r2, #24]
 8004e94:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <HAL_GPIO_Init+0x2b8>)
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ea0:	4a48      	ldr	r2, [pc, #288]	; (8004fc4 <HAL_GPIO_Init+0x2bc>)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	089b      	lsrs	r3, r3, #2
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <HAL_GPIO_Init+0x2c0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_GPIO_Init+0x1ec>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3f      	ldr	r2, [pc, #252]	; (8004fcc <HAL_GPIO_Init+0x2c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_GPIO_Init+0x1e8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3e      	ldr	r2, [pc, #248]	; (8004fd0 <HAL_GPIO_Init+0x2c8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <HAL_GPIO_Init+0x1e4>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3d      	ldr	r2, [pc, #244]	; (8004fd4 <HAL_GPIO_Init+0x2cc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d101      	bne.n	8004ee8 <HAL_GPIO_Init+0x1e0>
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e006      	b.n	8004ef6 <HAL_GPIO_Init+0x1ee>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e004      	b.n	8004ef6 <HAL_GPIO_Init+0x1ee>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e002      	b.n	8004ef6 <HAL_GPIO_Init+0x1ee>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_GPIO_Init+0x1ee>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	f002 0203 	and.w	r2, r2, #3
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	4093      	lsls	r3, r2
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f06:	492f      	ldr	r1, [pc, #188]	; (8004fc4 <HAL_GPIO_Init+0x2bc>)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d006      	beq.n	8004f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	492c      	ldr	r1, [pc, #176]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]
 8004f2c:	e006      	b.n	8004f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f2e:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	4928      	ldr	r1, [pc, #160]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f48:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	4922      	ldr	r1, [pc, #136]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60cb      	str	r3, [r1, #12]
 8004f54:	e006      	b.n	8004f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f56:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	491e      	ldr	r1, [pc, #120]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4918      	ldr	r1, [pc, #96]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	e006      	b.n	8004f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	4914      	ldr	r1, [pc, #80]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d021      	beq.n	8004fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	490e      	ldr	r1, [pc, #56]	; (8004fd8 <HAL_GPIO_Init+0x2d0>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e021      	b.n	8004fea <HAL_GPIO_Init+0x2e2>
 8004fa6:	bf00      	nop
 8004fa8:	10320000 	.word	0x10320000
 8004fac:	10310000 	.word	0x10310000
 8004fb0:	10220000 	.word	0x10220000
 8004fb4:	10210000 	.word	0x10210000
 8004fb8:	10120000 	.word	0x10120000
 8004fbc:	10110000 	.word	0x10110000
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40010800 	.word	0x40010800
 8004fcc:	40010c00 	.word	0x40010c00
 8004fd0:	40011000 	.word	0x40011000
 8004fd4:	40011400 	.word	0x40011400
 8004fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_GPIO_Init+0x304>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	4909      	ldr	r1, [pc, #36]	; (800500c <HAL_GPIO_Init+0x304>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	3301      	adds	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f47f ae8e 	bne.w	8004d1c <HAL_GPIO_Init+0x14>
  }
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	372c      	adds	r7, #44	; 0x2c
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	40010400 	.word	0x40010400

08005010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e001      	b.n	8005032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	807b      	strh	r3, [r7, #2]
 800504a:	4613      	mov	r3, r2
 800504c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800504e:	787b      	ldrb	r3, [r7, #1]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800505a:	e003      	b.n	8005064 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	041a      	lsls	r2, r3, #16
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005080:	887a      	ldrh	r2, [r7, #2]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4013      	ands	r3, r2
 8005086:	041a      	lsls	r2, r3, #16
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	43d9      	mvns	r1, r3
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	400b      	ands	r3, r1
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050b6:	4a05      	ldr	r2, [pc, #20]	; (80050cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe f88c 	bl	80031dc <HAL_GPIO_EXTI_Callback>
  }
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40010400 	.word	0x40010400

080050d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e12b      	b.n	800533a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fe ff54 	bl	8003fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005134:	f001 f960 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 8005138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4a81      	ldr	r2, [pc, #516]	; (8005344 <HAL_I2C_Init+0x274>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d807      	bhi.n	8005154 <HAL_I2C_Init+0x84>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a80      	ldr	r2, [pc, #512]	; (8005348 <HAL_I2C_Init+0x278>)
 8005148:	4293      	cmp	r3, r2
 800514a:	bf94      	ite	ls
 800514c:	2301      	movls	r3, #1
 800514e:	2300      	movhi	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e006      	b.n	8005162 <HAL_I2C_Init+0x92>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a7d      	ldr	r2, [pc, #500]	; (800534c <HAL_I2C_Init+0x27c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	bf94      	ite	ls
 800515c:	2301      	movls	r3, #1
 800515e:	2300      	movhi	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0e7      	b.n	800533a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a78      	ldr	r2, [pc, #480]	; (8005350 <HAL_I2C_Init+0x280>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0c9b      	lsrs	r3, r3, #18
 8005174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4a6a      	ldr	r2, [pc, #424]	; (8005344 <HAL_I2C_Init+0x274>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d802      	bhi.n	80051a4 <HAL_I2C_Init+0xd4>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3301      	adds	r3, #1
 80051a2:	e009      	b.n	80051b8 <HAL_I2C_Init+0xe8>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	4a69      	ldr	r2, [pc, #420]	; (8005354 <HAL_I2C_Init+0x284>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	3301      	adds	r3, #1
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	430b      	orrs	r3, r1
 80051be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	495c      	ldr	r1, [pc, #368]	; (8005344 <HAL_I2C_Init+0x274>)
 80051d4:	428b      	cmp	r3, r1
 80051d6:	d819      	bhi.n	800520c <HAL_I2C_Init+0x13c>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1e59      	subs	r1, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051ec:	400b      	ands	r3, r1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_I2C_Init+0x138>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1e59      	subs	r1, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005200:	3301      	adds	r3, #1
 8005202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005206:	e051      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 8005208:	2304      	movs	r3, #4
 800520a:	e04f      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d111      	bne.n	8005238 <HAL_I2C_Init+0x168>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1e58      	subs	r0, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	440b      	add	r3, r1
 8005222:	fbb0 f3f3 	udiv	r3, r0, r3
 8005226:	3301      	adds	r3, #1
 8005228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e012      	b.n	800525e <HAL_I2C_Init+0x18e>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1e58      	subs	r0, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	0099      	lsls	r1, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	fbb0 f3f3 	udiv	r3, r0, r3
 800524e:	3301      	adds	r3, #1
 8005250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Init+0x196>
 8005262:	2301      	movs	r3, #1
 8005264:	e022      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10e      	bne.n	800528c <HAL_I2C_Init+0x1bc>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1e58      	subs	r0, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	440b      	add	r3, r1
 800527c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005280:	3301      	adds	r3, #1
 8005282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528a:	e00f      	b.n	80052ac <HAL_I2C_Init+0x1dc>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1e58      	subs	r0, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	0099      	lsls	r1, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	6809      	ldr	r1, [r1, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6911      	ldr	r1, [r2, #16]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	4311      	orrs	r1, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	000186a0 	.word	0x000186a0
 8005348:	001e847f 	.word	0x001e847f
 800534c:	003d08ff 	.word	0x003d08ff
 8005350:	431bde83 	.word	0x431bde83
 8005354:	10624dd3 	.word	0x10624dd3

08005358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	461a      	mov	r2, r3
 8005364:	460b      	mov	r3, r1
 8005366:	817b      	strh	r3, [r7, #10]
 8005368:	4613      	mov	r3, r2
 800536a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800536c:	f7ff f8ee 	bl	800454c <HAL_GetTick>
 8005370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	f040 80e0 	bne.w	8005540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2319      	movs	r3, #25
 8005386:	2201      	movs	r2, #1
 8005388:	4970      	ldr	r1, [pc, #448]	; (800554c <HAL_I2C_Master_Transmit+0x1f4>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa92 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	e0d3      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_I2C_Master_Transmit+0x50>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0cc      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d007      	beq.n	80053ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2221      	movs	r2, #33	; 0x21
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2210      	movs	r2, #16
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	893a      	ldrh	r2, [r7, #8]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a50      	ldr	r2, [pc, #320]	; (8005550 <HAL_I2C_Master_Transmit+0x1f8>)
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005410:	8979      	ldrh	r1, [r7, #10]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f9ca 	bl	80057b0 <I2C_MasterRequestWrite>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e08d      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800543c:	e066      	b.n	800550c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	6a39      	ldr	r1, [r7, #32]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fb50 	bl	8005ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b04      	cmp	r3, #4
 8005454:	d107      	bne.n	8005466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e06b      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_I2C_Master_Transmit+0x188>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d017      	beq.n	80054e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	6a39      	ldr	r1, [r7, #32]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fb47 	bl	8005b78 <I2C_WaitOnBTFFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d107      	bne.n	8005508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e01a      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d194      	bne.n	800543e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	00100002 	.word	0x00100002
 8005550:	ffff0000 	.word	0xffff0000

08005554 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	460b      	mov	r3, r1
 8005562:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7fe fff2 	bl	800454c <HAL_GetTick>
 8005568:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b20      	cmp	r3, #32
 8005578:	f040 8111 	bne.w	800579e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2319      	movs	r3, #25
 8005582:	2201      	movs	r2, #1
 8005584:	4988      	ldr	r1, [pc, #544]	; (80057a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f994 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
 8005594:	e104      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_I2C_IsDeviceReady+0x50>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0fd      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d007      	beq.n	80055ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2224      	movs	r2, #36	; 0x24
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a70      	ldr	r2, [pc, #448]	; (80057ac <HAL_I2C_IsDeviceReady+0x258>)
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2200      	movs	r2, #0
 8005606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f952 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005624:	d103      	bne.n	800562e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0b6      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005632:	897b      	ldrh	r3, [r7, #10]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005640:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005642:	f7fe ff83 	bl	800454c <HAL_GetTick>
 8005646:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005676:	e025      	b.n	80056c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005678:	f7fe ff68 	bl	800454c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d302      	bcc.n	800568e <HAL_I2C_IsDeviceReady+0x13a>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	22a0      	movs	r2, #160	; 0xa0
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2ba0      	cmp	r3, #160	; 0xa0
 80056ce:	d005      	beq.n	80056dc <HAL_I2C_IsDeviceReady+0x188>
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <HAL_I2C_IsDeviceReady+0x188>
 80056d6:	7dbb      	ldrb	r3, [r7, #22]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0cd      	beq.n	8005678 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d129      	bne.n	8005746 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005700:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2319      	movs	r3, #25
 800571e:	2201      	movs	r2, #1
 8005720:	4921      	ldr	r1, [pc, #132]	; (80057a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f8c6 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e036      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e02c      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005754:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800575e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2319      	movs	r3, #25
 8005766:	2201      	movs	r2, #1
 8005768:	490f      	ldr	r1, [pc, #60]	; (80057a8 <HAL_I2C_IsDeviceReady+0x254>)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f8a2 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e012      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	3301      	adds	r3, #1
 800577e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	f4ff af32 	bcc.w	80055ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	00100002 	.word	0x00100002
 80057ac:	ffff0000 	.word	0xffff0000

080057b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	460b      	mov	r3, r1
 80057be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d006      	beq.n	80057da <I2C_MasterRequestWrite+0x2a>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d003      	beq.n	80057da <I2C_MasterRequestWrite+0x2a>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057d8:	d108      	bne.n	80057ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e00b      	b.n	8005804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	2b12      	cmp	r3, #18
 80057f2:	d107      	bne.n	8005804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f84f 	bl	80058b4 <I2C_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582a:	d103      	bne.n	8005834 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e035      	b.n	80058a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005840:	d108      	bne.n	8005854 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005850:	611a      	str	r2, [r3, #16]
 8005852:	e01b      	b.n	800588c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005854:	897b      	ldrh	r3, [r7, #10]
 8005856:	11db      	asrs	r3, r3, #7
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f063 030f 	orn	r3, r3, #15
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	490e      	ldr	r1, [pc, #56]	; (80058ac <I2C_MasterRequestWrite+0xfc>)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f898 	bl	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e010      	b.n	80058a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005882:	897b      	ldrh	r3, [r7, #10]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4907      	ldr	r1, [pc, #28]	; (80058b0 <I2C_MasterRequestWrite+0x100>)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f888 	bl	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	00010008 	.word	0x00010008
 80058b0:	00010002 	.word	0x00010002

080058b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c4:	e048      	b.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d044      	beq.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fe fe3d 	bl	800454c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d139      	bne.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10d      	bne.n	800590a <I2C_WaitOnFlagUntilTimeout+0x56>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	43da      	mvns	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4013      	ands	r3, r2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	e00c      	b.n	8005924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	43da      	mvns	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4013      	ands	r3, r2
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	429a      	cmp	r2, r3
 8005928:	d116      	bne.n	8005958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e023      	b.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	0c1b      	lsrs	r3, r3, #16
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10d      	bne.n	800597e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	43da      	mvns	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	e00c      	b.n	8005998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	43da      	mvns	r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4013      	ands	r3, r2
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	429a      	cmp	r2, r3
 800599c:	d093      	beq.n	80058c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059b6:	e071      	b.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d123      	bne.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e067      	b.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d041      	beq.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fe fd98 	bl	800454c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d136      	bne.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10c      	bne.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e00b      	b.n	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	43da      	mvns	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e021      	b.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10c      	bne.n	8005ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	43da      	mvns	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e00b      	b.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	43da      	mvns	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bf14      	ite	ne
 8005ad2:	2301      	movne	r3, #1
 8005ad4:	2300      	moveq	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f af6d 	bne.w	80059b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af4:	e034      	b.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f886 	bl	8005c08 <I2C_IsAcknowledgeFailed>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e034      	b.n	8005b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d028      	beq.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0e:	f7fe fd1d 	bl	800454c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d302      	bcc.n	8005b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11d      	bne.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d016      	beq.n	8005b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e007      	b.n	8005b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6a:	2b80      	cmp	r3, #128	; 0x80
 8005b6c:	d1c3      	bne.n	8005af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b84:	e034      	b.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f83e 	bl	8005c08 <I2C_IsAcknowledgeFailed>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e034      	b.n	8005c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d028      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fe fcd5 	bl	800454c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11d      	bne.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d016      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e007      	b.n	8005c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d1c3      	bne.n	8005b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1e:	d11b      	bne.n	8005c58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f043 0204 	orr.w	r2, r3, #4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e272      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8087 	beq.w	8005d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c84:	4b92      	ldr	r3, [pc, #584]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 030c 	and.w	r3, r3, #12
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d00c      	beq.n	8005caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c90:	4b8f      	ldr	r3, [pc, #572]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d112      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x5e>
 8005c9c:	4b8c      	ldr	r3, [pc, #560]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005caa:	4b89      	ldr	r3, [pc, #548]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d06c      	beq.n	8005d90 <HAL_RCC_OscConfig+0x12c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d168      	bne.n	8005d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e24c      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0x76>
 8005ccc:	4b80      	ldr	r3, [pc, #512]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a7f      	ldr	r2, [pc, #508]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e02e      	b.n	8005d38 <HAL_RCC_OscConfig+0xd4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x98>
 8005ce2:	4b7b      	ldr	r3, [pc, #492]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a7a      	ldr	r2, [pc, #488]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b78      	ldr	r3, [pc, #480]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a77      	ldr	r2, [pc, #476]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xd4>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0xbc>
 8005d06:	4b72      	ldr	r3, [pc, #456]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a71      	ldr	r2, [pc, #452]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b6f      	ldr	r3, [pc, #444]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6e      	ldr	r2, [pc, #440]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xd4>
 8005d20:	4b6b      	ldr	r3, [pc, #428]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a6a      	ldr	r2, [pc, #424]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b68      	ldr	r3, [pc, #416]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a67      	ldr	r2, [pc, #412]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fe fc04 	bl	800454c <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fe fc00 	bl	800454c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e200      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b5d      	ldr	r3, [pc, #372]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xe4>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fe fbf0 	bl	800454c <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fe fbec 	bl	800454c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e1ec      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d82:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x10c>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d9e:	4b4c      	ldr	r3, [pc, #304]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005daa:	4b49      	ldr	r3, [pc, #292]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d11c      	bne.n	8005df0 <HAL_RCC_OscConfig+0x18c>
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	4b43      	ldr	r3, [pc, #268]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_RCC_OscConfig+0x176>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e1c0      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dda:	4b3d      	ldr	r3, [pc, #244]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4939      	ldr	r1, [pc, #228]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	e03a      	b.n	8005e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df8:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <HAL_RCC_OscConfig+0x270>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfe:	f7fe fba5 	bl	800454c <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e06:	f7fe fba1 	bl	800454c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1a1      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e18:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4927      	ldr	r1, [pc, #156]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]
 8005e38:	e015      	b.n	8005e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e3a:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <HAL_RCC_OscConfig+0x270>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fe fb84 	bl	800454c <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e48:	f7fe fb80 	bl	800454c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e180      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d03a      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d019      	beq.n	8005eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7a:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <HAL_RCC_OscConfig+0x274>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e80:	f7fe fb64 	bl	800454c <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e88:	f7fe fb60 	bl	800454c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e160      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <HAL_RCC_OscConfig+0x26c>)
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	f000 face 	bl	8006448 <RCC_Delay>
 8005eac:	e01c      	b.n	8005ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_RCC_OscConfig+0x274>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb4:	f7fe fb4a 	bl	800454c <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eba:	e00f      	b.n	8005edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ebc:	f7fe fb46 	bl	800454c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d908      	bls.n	8005edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e146      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	42420000 	.word	0x42420000
 8005ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	4b92      	ldr	r3, [pc, #584]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e9      	bne.n	8005ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80a6 	beq.w	8006042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efa:	4b8b      	ldr	r3, [pc, #556]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f06:	4b88      	ldr	r3, [pc, #544]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	4a87      	ldr	r2, [pc, #540]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f10:	61d3      	str	r3, [r2, #28]
 8005f12:	4b85      	ldr	r3, [pc, #532]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f22:	4b82      	ldr	r3, [pc, #520]	; (800612c <HAL_RCC_OscConfig+0x4c8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d118      	bne.n	8005f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2e:	4b7f      	ldr	r3, [pc, #508]	; (800612c <HAL_RCC_OscConfig+0x4c8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7e      	ldr	r2, [pc, #504]	; (800612c <HAL_RCC_OscConfig+0x4c8>)
 8005f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3a:	f7fe fb07 	bl	800454c <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f42:	f7fe fb03 	bl	800454c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b64      	cmp	r3, #100	; 0x64
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e103      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f54:	4b75      	ldr	r3, [pc, #468]	; (800612c <HAL_RCC_OscConfig+0x4c8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x312>
 8005f68:	4b6f      	ldr	r3, [pc, #444]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	4a6e      	ldr	r2, [pc, #440]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	6213      	str	r3, [r2, #32]
 8005f74:	e02d      	b.n	8005fd2 <HAL_RCC_OscConfig+0x36e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x334>
 8005f7e:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	4a69      	ldr	r2, [pc, #420]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6213      	str	r3, [r2, #32]
 8005f8a:	4b67      	ldr	r3, [pc, #412]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	4a66      	ldr	r2, [pc, #408]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	6213      	str	r3, [r2, #32]
 8005f96:	e01c      	b.n	8005fd2 <HAL_RCC_OscConfig+0x36e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b05      	cmp	r3, #5
 8005f9e:	d10c      	bne.n	8005fba <HAL_RCC_OscConfig+0x356>
 8005fa0:	4b61      	ldr	r3, [pc, #388]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	4a60      	ldr	r2, [pc, #384]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fa6:	f043 0304 	orr.w	r3, r3, #4
 8005faa:	6213      	str	r3, [r2, #32]
 8005fac:	4b5e      	ldr	r3, [pc, #376]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4a5d      	ldr	r2, [pc, #372]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	6213      	str	r3, [r2, #32]
 8005fb8:	e00b      	b.n	8005fd2 <HAL_RCC_OscConfig+0x36e>
 8005fba:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	4a5a      	ldr	r2, [pc, #360]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	6213      	str	r3, [r2, #32]
 8005fc6:	4b58      	ldr	r3, [pc, #352]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4a57      	ldr	r2, [pc, #348]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d015      	beq.n	8006006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fda:	f7fe fab7 	bl	800454c <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe2:	f7fe fab3 	bl	800454c <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e0b1      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	4b4b      	ldr	r3, [pc, #300]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0ee      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x37e>
 8006004:	e014      	b.n	8006030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006006:	f7fe faa1 	bl	800454c <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600c:	e00a      	b.n	8006024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800600e:	f7fe fa9d 	bl	800454c <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f241 3288 	movw	r2, #5000	; 0x1388
 800601c:	4293      	cmp	r3, r2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e09b      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006024:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ee      	bne.n	800600e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d105      	bne.n	8006042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006036:	4b3c      	ldr	r3, [pc, #240]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4a3b      	ldr	r2, [pc, #236]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 800603c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8087 	beq.w	800615a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800604c:	4b36      	ldr	r3, [pc, #216]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 030c 	and.w	r3, r3, #12
 8006054:	2b08      	cmp	r3, #8
 8006056:	d061      	beq.n	800611c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d146      	bne.n	80060ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006060:	4b33      	ldr	r3, [pc, #204]	; (8006130 <HAL_RCC_OscConfig+0x4cc>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006066:	f7fe fa71 	bl	800454c <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800606e:	f7fe fa6d 	bl	800454c <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e06d      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006080:	4b29      	ldr	r3, [pc, #164]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006094:	d108      	bne.n	80060a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4921      	ldr	r1, [pc, #132]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060a8:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a19      	ldr	r1, [r3, #32]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	430b      	orrs	r3, r1
 80060ba:	491b      	ldr	r1, [pc, #108]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <HAL_RCC_OscConfig+0x4cc>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c6:	f7fe fa41 	bl	800454c <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ce:	f7fe fa3d 	bl	800454c <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e03d      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x46a>
 80060ec:	e035      	b.n	800615a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <HAL_RCC_OscConfig+0x4cc>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fe fa2a 	bl	800454c <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fe fa26 	bl	800454c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e026      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_RCC_OscConfig+0x4c4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x498>
 800611a:	e01e      	b.n	800615a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d107      	bne.n	8006134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e019      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
 8006128:	40021000 	.word	0x40021000
 800612c:	40007000 	.word	0x40007000
 8006130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <HAL_RCC_OscConfig+0x500>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	429a      	cmp	r2, r3
 8006146:	d106      	bne.n	8006156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d001      	beq.n	800615a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40021000 	.word	0x40021000

08006168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0d0      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800617c:	4b6a      	ldr	r3, [pc, #424]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d910      	bls.n	80061ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b67      	ldr	r3, [pc, #412]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 0207 	bic.w	r2, r3, #7
 8006192:	4965      	ldr	r1, [pc, #404]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b63      	ldr	r3, [pc, #396]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0b8      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d020      	beq.n	80061fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c4:	4b59      	ldr	r3, [pc, #356]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4a58      	ldr	r2, [pc, #352]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061dc:	4b53      	ldr	r3, [pc, #332]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4a52      	ldr	r2, [pc, #328]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80061e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	494d      	ldr	r1, [pc, #308]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d040      	beq.n	8006288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620e:	4b47      	ldr	r3, [pc, #284]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d115      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e07f      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	4b41      	ldr	r3, [pc, #260]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e073      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006236:	4b3d      	ldr	r3, [pc, #244]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e06b      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006246:	4b39      	ldr	r3, [pc, #228]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f023 0203 	bic.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4936      	ldr	r1, [pc, #216]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006254:	4313      	orrs	r3, r2
 8006256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006258:	f7fe f978 	bl	800454c <HAL_GetTick>
 800625c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	e00a      	b.n	8006276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006260:	f7fe f974 	bl	800454c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e053      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 020c 	and.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	429a      	cmp	r2, r3
 8006286:	d1eb      	bne.n	8006260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006288:	4b27      	ldr	r3, [pc, #156]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d210      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f023 0207 	bic.w	r2, r3, #7
 800629e:	4922      	ldr	r1, [pc, #136]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a6:	4b20      	ldr	r3, [pc, #128]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e032      	b.n	800631e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4916      	ldr	r1, [pc, #88]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	490e      	ldr	r1, [pc, #56]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062f6:	f000 f821 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80062fa:	4602      	mov	r2, r0
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	490a      	ldr	r1, [pc, #40]	; (8006330 <HAL_RCC_ClockConfig+0x1c8>)
 8006308:	5ccb      	ldrb	r3, [r1, r3]
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <HAL_RCC_ClockConfig+0x1cc>)
 8006310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <HAL_RCC_ClockConfig+0x1d0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe f8d6 	bl	80044c8 <HAL_InitTick>

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40022000 	.word	0x40022000
 800632c:	40021000 	.word	0x40021000
 8006330:	0800bc70 	.word	0x0800bc70
 8006334:	20000038 	.word	0x20000038
 8006338:	2000003c 	.word	0x2000003c

0800633c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006356:	4b1e      	ldr	r3, [pc, #120]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	2b04      	cmp	r3, #4
 8006364:	d002      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x30>
 8006366:	2b08      	cmp	r3, #8
 8006368:	d003      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0x36>
 800636a:	e027      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800636c:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800636e:	613b      	str	r3, [r7, #16]
      break;
 8006370:	e027      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0c9b      	lsrs	r3, r3, #18
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800637c:	5cd3      	ldrb	r3, [r2, r3]
 800637e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	0c5b      	lsrs	r3, r3, #17
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	4a11      	ldr	r2, [pc, #68]	; (80063dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006396:	5cd3      	ldrb	r3, [r2, r3]
 8006398:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800639e:	fb03 f202 	mul.w	r2, r3, r2
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	e004      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	613b      	str	r3, [r7, #16]
      break;
 80063ba:	e002      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80063be:	613b      	str	r3, [r7, #16]
      break;
 80063c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063c2:	693b      	ldr	r3, [r7, #16]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
 80063d4:	007a1200 	.word	0x007a1200
 80063d8:	0800bc88 	.word	0x0800bc88
 80063dc:	0800bc98 	.word	0x0800bc98
 80063e0:	003d0900 	.word	0x003d0900

080063e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063e8:	4b02      	ldr	r3, [pc, #8]	; (80063f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063ea:	681b      	ldr	r3, [r3, #0]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr
 80063f4:	20000038 	.word	0x20000038

080063f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063fc:	f7ff fff2 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4903      	ldr	r1, [pc, #12]	; (800641c <HAL_RCC_GetPCLK1Freq+0x24>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40021000 	.word	0x40021000
 800641c:	0800bc80 	.word	0x0800bc80

08006420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006424:	f7ff ffde 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8006428:	4602      	mov	r2, r0
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	0adb      	lsrs	r3, r3, #11
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	4903      	ldr	r1, [pc, #12]	; (8006444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006436:	5ccb      	ldrb	r3, [r1, r3]
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800643c:	4618      	mov	r0, r3
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40021000 	.word	0x40021000
 8006444:	0800bc80 	.word	0x0800bc80

08006448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <RCC_Delay+0x34>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <RCC_Delay+0x38>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0a5b      	lsrs	r3, r3, #9
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006464:	bf00      	nop
  }
  while (Delay --);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1e5a      	subs	r2, r3, #1
 800646a:	60fa      	str	r2, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f9      	bne.n	8006464 <RCC_Delay+0x1c>
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr
 800647c:	20000038 	.word	0x20000038
 8006480:	10624dd3 	.word	0x10624dd3

08006484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e042      	b.n	800651c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fd fdb8 	bl	8004020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 ffdf 	bl	800748c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b20      	cmp	r3, #32
 8006542:	d16d      	bne.n	8006620 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Transmit+0x2c>
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e066      	b.n	8006622 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2221      	movs	r2, #33	; 0x21
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006562:	f7fd fff3 	bl	800454c <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	88fa      	ldrh	r2, [r7, #6]
 8006572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d108      	bne.n	8006590 <HAL_UART_Transmit+0x6c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e003      	b.n	8006598 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006598:	e02a      	b.n	80065f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2200      	movs	r2, #0
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fc6e 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e036      	b.n	8006622 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	3302      	adds	r3, #2
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e007      	b.n	80065e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	3301      	adds	r3, #1
 80065e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1cf      	bne.n	800659a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2200      	movs	r2, #0
 8006602:	2140      	movs	r1, #64	; 0x40
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fc3e 	bl	8006e86 <UART_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e006      	b.n	8006622 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006620:	2302      	movs	r3, #2
  }
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	4613      	mov	r3, r2
 8006636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b20      	cmp	r3, #32
 8006642:	d112      	bne.n	800666a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Receive_IT+0x26>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e00b      	b.n	800666c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fc7e 	bl	8006f62 <UART_Start_Receive_IT>
 8006666:	4603      	mov	r3, r0
 8006668:	e000      	b.n	800666c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800666a:	2302      	movs	r3, #2
  }
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b20      	cmp	r3, #32
 800668c:	d14a      	bne.n	8006724 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e043      	b.n	8006726 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	461a      	mov	r2, r3
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fc8f 	bl	8006fd4 <UART_Start_Receive_DMA>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80066bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d12c      	bne.n	800671e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d125      	bne.n	8006718 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	617b      	str	r3, [r7, #20]
   return(result);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f043 0310 	orr.w	r3, r3, #16
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006702:	627a      	str	r2, [r7, #36]	; 0x24
 8006704:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6a39      	ldr	r1, [r7, #32]
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006716:	e002      	b.n	800671e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800671e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006722:	e000      	b.n	8006726 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3730      	adds	r7, #48	; 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b0ba      	sub	sp, #232	; 0xe8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800675c:	2300      	movs	r3, #0
 800675e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800676e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <HAL_UART_IRQHandler+0x66>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fdbe 	bl	8007310 <UART_Receive_IT>
      return;
 8006794:	e25b      	b.n	8006c4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80de 	beq.w	800695c <HAL_UART_IRQHandler+0x22c>
 80067a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80d1 	beq.w	800695c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <HAL_UART_IRQHandler+0xae>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d6:	f043 0201 	orr.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_UART_IRQHandler+0xd2>
 80067ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fa:	f043 0202 	orr.w	r2, r3, #2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <HAL_UART_IRQHandler+0xf6>
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	f043 0204 	orr.w	r2, r3, #4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d011      	beq.n	8006856 <HAL_UART_IRQHandler+0x126>
 8006832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800683e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	f043 0208 	orr.w	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 81f2 	beq.w	8006c44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_UART_IRQHandler+0x14e>
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fd49 	bl	8007310 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <HAL_UART_IRQHandler+0x17a>
 80068a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04f      	beq.n	800694a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fc53 	bl	8007156 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d041      	beq.n	8006942 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1d9      	bne.n	80068be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d013      	beq.n	800693a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	4a7e      	ldr	r2, [pc, #504]	; (8006b10 <HAL_UART_IRQHandler+0x3e0>)
 8006918:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe f846 	bl	80049b0 <HAL_DMA_Abort_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d016      	beq.n	8006958 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	e00e      	b.n	8006958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f99c 	bl	8006c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e00a      	b.n	8006958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f998 	bl	8006c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	e006      	b.n	8006958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f994 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006956:	e175      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	bf00      	nop
    return;
 800695a:	e173      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 814f 	bne.w	8006c04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8148 	beq.w	8006c04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8141 	beq.w	8006c04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80b6 	beq.w	8006b14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8145 	beq.w	8006c48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069c6:	429a      	cmp	r2, r3
 80069c8:	f080 813e 	bcs.w	8006c48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	f000 8088 	beq.w	8006af0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	330c      	adds	r3, #12
 8006a08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1d9      	bne.n	80069e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3314      	adds	r3, #20
 8006a32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e1      	bne.n	8006a2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e3      	bne.n	8006a68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac0:	f023 0310 	bic.w	r3, r3, #16
 8006ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ad2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ad4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ad8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fd ff24 	bl	8004938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fb5a 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b0c:	e09c      	b.n	8006c48 <HAL_UART_IRQHandler+0x518>
 8006b0e:	bf00      	nop
 8006b10:	0800721b 	.word	0x0800721b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 808e 	beq.w	8006c4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8089 	beq.w	8006c4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b5e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	623b      	str	r3, [r7, #32]
   return(result);
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b96:	633a      	str	r2, [r7, #48]	; 0x30
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e3      	bne.n	8006b72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bdc:	61fa      	str	r2, [r7, #28]
 8006bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e3      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fa fadf 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c02:	e023      	b.n	8006c4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <HAL_UART_IRQHandler+0x4f4>
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fb10 	bl	8007242 <UART_Transmit_IT>
    return;
 8006c22:	e014      	b.n	8006c4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <HAL_UART_IRQHandler+0x51e>
 8006c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fb4f 	bl	80072e0 <UART_EndTransmit_IT>
    return;
 8006c42:	e004      	b.n	8006c4e <HAL_UART_IRQHandler+0x51e>
    return;
 8006c44:	bf00      	nop
 8006c46:	e002      	b.n	8006c4e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c48:	bf00      	nop
 8006c4a:	e000      	b.n	8006c4e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c4c:	bf00      	nop
  }
}
 8006c4e:	37e8      	adds	r7, #232	; 0xe8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr

08006c66 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b09c      	sub	sp, #112	; 0x70
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d172      	bne.n	8006d8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ccc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	f023 0301 	bic.w	r3, r3, #1
 8006cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8006cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d00:	647a      	str	r2, [r7, #68]	; 0x44
 8006d02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	623b      	str	r3, [r7, #32]
   return(result);
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2a:	663b      	str	r3, [r7, #96]	; 0x60
 8006d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d34:	633a      	str	r2, [r7, #48]	; 0x30
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e5      	bne.n	8006d14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d119      	bne.n	8006d8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0310 	bic.w	r3, r3, #16
 8006d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d78:	61fa      	str	r2, [r7, #28]
 8006d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	69b9      	ldr	r1, [r7, #24]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	617b      	str	r3, [r7, #20]
   return(result);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8e:	2200      	movs	r2, #0
 8006d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d106      	bne.n	8006da8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006da2:	f7fa fa0d 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006da6:	e002      	b.n	8006dae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006da8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006daa:	f7fc fb4b 	bl	8003444 <HAL_UART_RxCpltCallback>
}
 8006dae:	bf00      	nop
 8006db0:	3770      	adds	r7, #112	; 0x70
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d108      	bne.n	8006de4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7fa f9ef 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006de2:	e002      	b.n	8006dea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff ff3e 	bl	8006c66 <HAL_UART_RxHalfCpltCallback>
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf14      	ite	ne
 8006e12:	2301      	movne	r3, #1
 8006e14:	2300      	moveq	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b21      	cmp	r3, #33	; 0x21
 8006e24:	d108      	bne.n	8006e38 <UART_DMAError+0x46>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 f968 	bl	8007108 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b22      	cmp	r3, #34	; 0x22
 8006e58:	d108      	bne.n	8006e6c <UART_DMAError+0x7a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e66:	68b8      	ldr	r0, [r7, #8]
 8006e68:	f000 f975 	bl	8007156 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e70:	f043 0210 	orr.w	r2, r3, #16
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f7ff fefd 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b090      	sub	sp, #64	; 0x40
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e96:	e050      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d04c      	beq.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ea6:	f7fd fb51 	bl	800454c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d241      	bcs.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ed6:	637a      	str	r2, [r7, #52]	; 0x34
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e5      	bne.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3314      	adds	r3, #20
 8006ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f0a:	623a      	str	r2, [r7, #32]
 8006f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	69f9      	ldr	r1, [r7, #28]
 8006f10:	6a3a      	ldr	r2, [r7, #32]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e00f      	b.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4013      	ands	r3, r2
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	bf0c      	ite	eq
 8006f4a:	2301      	moveq	r3, #1
 8006f4c:	2300      	movne	r3, #0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	79fb      	ldrb	r3, [r7, #7]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d09f      	beq.n	8006e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3740      	adds	r7, #64	; 0x40
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	88fa      	ldrh	r2, [r7, #6]
 8006f7a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2222      	movs	r2, #34	; 0x22
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fa6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0220 	orr.w	r2, r2, #32
 8006fc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr

08006fd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b098      	sub	sp, #96	; 0x60
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2222      	movs	r2, #34	; 0x22
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007000:	4a3e      	ldr	r2, [pc, #248]	; (80070fc <UART_Start_Receive_DMA+0x128>)
 8007002:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	4a3d      	ldr	r2, [pc, #244]	; (8007100 <UART_Start_Receive_DMA+0x12c>)
 800700a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007010:	4a3c      	ldr	r2, [pc, #240]	; (8007104 <UART_Start_Receive_DMA+0x130>)
 8007012:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	2200      	movs	r2, #0
 800701a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800701c:	f107 0308 	add.w	r3, r7, #8
 8007020:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3304      	adds	r3, #4
 800702c:	4619      	mov	r1, r3
 800702e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	f7fd fc20 	bl	8004878 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d019      	beq.n	800708a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706c:	65bb      	str	r3, [r7, #88]	; 0x58
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	330c      	adds	r3, #12
 8007074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007076:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007078:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800707c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3314      	adds	r3, #20
 8007090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	657b      	str	r3, [r7, #84]	; 0x54
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3314      	adds	r3, #20
 80070a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3314      	adds	r3, #20
 80070c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d4:	653b      	str	r3, [r7, #80]	; 0x50
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070de:	627a      	str	r2, [r7, #36]	; 0x24
 80070e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6a39      	ldr	r1, [r7, #32]
 80070e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3760      	adds	r7, #96	; 0x60
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	08006c8b 	.word	0x08006c8b
 8007100:	08006db7 	.word	0x08006db7
 8007104:	08006df3 	.word	0x08006df3

08007108 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	61ba      	str	r2, [r7, #24]
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	613b      	str	r3, [r7, #16]
   return(result);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e5      	bne.n	8007110 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800714c:	bf00      	nop
 800714e:	3724      	adds	r7, #36	; 0x24
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007156:	b480      	push	{r7}
 8007158:	b095      	sub	sp, #84	; 0x54
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800717e:	643a      	str	r2, [r7, #64]	; 0x40
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3314      	adds	r3, #20
 8007198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3314      	adds	r3, #20
 80071b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d119      	bne.n	8007202 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	330c      	adds	r3, #12
 80071d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f023 0310 	bic.w	r3, r3, #16
 80071e4:	647b      	str	r3, [r7, #68]	; 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071ee:	61ba      	str	r2, [r7, #24]
 80071f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6979      	ldr	r1, [r7, #20]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	613b      	str	r3, [r7, #16]
   return(result);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007210:	bf00      	nop
 8007212:	3754      	adds	r7, #84	; 0x54
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fd1f 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b21      	cmp	r3, #33	; 0x21
 8007254:	d13e      	bne.n	80072d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725e:	d114      	bne.n	800728a <UART_Transmit_IT+0x48>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d110      	bne.n	800728a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800727c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]
 8007288:	e008      	b.n	800729c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6211      	str	r1, [r2, #32]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4619      	mov	r1, r3
 80072aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10f      	bne.n	80072d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr

080072e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fca7 	bl	8006c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b22      	cmp	r3, #34	; 0x22
 8007322:	f040 80ae 	bne.w	8007482 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732e:	d117      	bne.n	8007360 <UART_Receive_IT+0x50>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d113      	bne.n	8007360 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734e:	b29a      	uxth	r2, r3
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	1c9a      	adds	r2, r3, #2
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	629a      	str	r2, [r3, #40]	; 0x28
 800735e:	e026      	b.n	80073ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007372:	d007      	beq.n	8007384 <UART_Receive_IT+0x74>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <UART_Receive_IT+0x82>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e008      	b.n	80073a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4619      	mov	r1, r3
 80073bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d15d      	bne.n	800747e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0220 	bic.w	r2, r2, #32
 80073d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0201 	bic.w	r2, r2, #1
 80073f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	2b01      	cmp	r3, #1
 8007406:	d135      	bne.n	8007474 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	613b      	str	r3, [r7, #16]
   return(result);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f023 0310 	bic.w	r3, r3, #16
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	330c      	adds	r3, #12
 800742c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742e:	623a      	str	r2, [r7, #32]
 8007430:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	69f9      	ldr	r1, [r7, #28]
 8007434:	6a3a      	ldr	r2, [r7, #32]
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	61bb      	str	r3, [r7, #24]
   return(result);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b10      	cmp	r3, #16
 800744e:	d10a      	bne.n	8007466 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7f9 fea7 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
 8007472:	e002      	b.n	800747a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fb ffe5 	bl	8003444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e002      	b.n	8007484 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	e000      	b.n	8007484 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007482:	2302      	movs	r3, #2
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	3730      	adds	r7, #48	; 0x30
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80074c6:	f023 030c 	bic.w	r3, r3, #12
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	430b      	orrs	r3, r1
 80074d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <UART_SetConfig+0x114>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d103      	bne.n	80074fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074f4:	f7fe ff94 	bl	8006420 <HAL_RCC_GetPCLK2Freq>
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	e002      	b.n	8007502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fe ff7c 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 8007500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009a      	lsls	r2, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <UART_SetConfig+0x118>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	0119      	lsls	r1, r3, #4
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009a      	lsls	r2, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	fbb2 f2f3 	udiv	r2, r2, r3
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <UART_SetConfig+0x118>)
 800753a:	fba3 0302 	umull	r0, r3, r3, r2
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	2064      	movs	r0, #100	; 0x64
 8007542:	fb00 f303 	mul.w	r3, r0, r3
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	3332      	adds	r3, #50	; 0x32
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <UART_SetConfig+0x118>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007558:	4419      	add	r1, r3
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009a      	lsls	r2, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <UART_SetConfig+0x118>)
 8007572:	fba3 0302 	umull	r0, r3, r3, r2
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2064      	movs	r0, #100	; 0x64
 800757a:	fb00 f303 	mul.w	r3, r0, r3
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	3332      	adds	r3, #50	; 0x32
 8007584:	4a07      	ldr	r2, [pc, #28]	; (80075a4 <UART_SetConfig+0x118>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	440a      	add	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40013800 	.word	0x40013800
 80075a4:	51eb851f 	.word	0x51eb851f

080075a8 <atof>:
 80075a8:	2100      	movs	r1, #0
 80075aa:	f000 bed9 	b.w	8008360 <strtod>

080075ae <atoi>:
 80075ae:	220a      	movs	r2, #10
 80075b0:	2100      	movs	r1, #0
 80075b2:	f000 bfb7 	b.w	8008524 <strtol>
	...

080075b8 <malloc>:
 80075b8:	4b02      	ldr	r3, [pc, #8]	; (80075c4 <malloc+0xc>)
 80075ba:	4601      	mov	r1, r0
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	f000 b82b 	b.w	8007618 <_malloc_r>
 80075c2:	bf00      	nop
 80075c4:	20000208 	.word	0x20000208

080075c8 <free>:
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <free+0xc>)
 80075ca:	4601      	mov	r1, r0
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	f002 beab 	b.w	800a328 <_free_r>
 80075d2:	bf00      	nop
 80075d4:	20000208 	.word	0x20000208

080075d8 <sbrk_aligned>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4e0e      	ldr	r6, [pc, #56]	; (8007614 <sbrk_aligned+0x3c>)
 80075dc:	460c      	mov	r4, r1
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	4605      	mov	r5, r0
 80075e2:	b911      	cbnz	r1, 80075ea <sbrk_aligned+0x12>
 80075e4:	f001 ff94 	bl	8009510 <_sbrk_r>
 80075e8:	6030      	str	r0, [r6, #0]
 80075ea:	4621      	mov	r1, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	f001 ff8f 	bl	8009510 <_sbrk_r>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	d00a      	beq.n	800760c <sbrk_aligned+0x34>
 80075f6:	1cc4      	adds	r4, r0, #3
 80075f8:	f024 0403 	bic.w	r4, r4, #3
 80075fc:	42a0      	cmp	r0, r4
 80075fe:	d007      	beq.n	8007610 <sbrk_aligned+0x38>
 8007600:	1a21      	subs	r1, r4, r0
 8007602:	4628      	mov	r0, r5
 8007604:	f001 ff84 	bl	8009510 <_sbrk_r>
 8007608:	3001      	adds	r0, #1
 800760a:	d101      	bne.n	8007610 <sbrk_aligned+0x38>
 800760c:	f04f 34ff 	mov.w	r4, #4294967295
 8007610:	4620      	mov	r0, r4
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	20002638 	.word	0x20002638

08007618 <_malloc_r>:
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	1ccd      	adds	r5, r1, #3
 800761e:	f025 0503 	bic.w	r5, r5, #3
 8007622:	3508      	adds	r5, #8
 8007624:	2d0c      	cmp	r5, #12
 8007626:	bf38      	it	cc
 8007628:	250c      	movcc	r5, #12
 800762a:	2d00      	cmp	r5, #0
 800762c:	4607      	mov	r7, r0
 800762e:	db01      	blt.n	8007634 <_malloc_r+0x1c>
 8007630:	42a9      	cmp	r1, r5
 8007632:	d905      	bls.n	8007640 <_malloc_r+0x28>
 8007634:	230c      	movs	r3, #12
 8007636:	2600      	movs	r6, #0
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	4630      	mov	r0, r6
 800763c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007640:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007714 <_malloc_r+0xfc>
 8007644:	f000 f868 	bl	8007718 <__malloc_lock>
 8007648:	f8d8 3000 	ldr.w	r3, [r8]
 800764c:	461c      	mov	r4, r3
 800764e:	bb5c      	cbnz	r4, 80076a8 <_malloc_r+0x90>
 8007650:	4629      	mov	r1, r5
 8007652:	4638      	mov	r0, r7
 8007654:	f7ff ffc0 	bl	80075d8 <sbrk_aligned>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	4604      	mov	r4, r0
 800765c:	d155      	bne.n	800770a <_malloc_r+0xf2>
 800765e:	f8d8 4000 	ldr.w	r4, [r8]
 8007662:	4626      	mov	r6, r4
 8007664:	2e00      	cmp	r6, #0
 8007666:	d145      	bne.n	80076f4 <_malloc_r+0xdc>
 8007668:	2c00      	cmp	r4, #0
 800766a:	d048      	beq.n	80076fe <_malloc_r+0xe6>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	4631      	mov	r1, r6
 8007670:	4638      	mov	r0, r7
 8007672:	eb04 0903 	add.w	r9, r4, r3
 8007676:	f001 ff4b 	bl	8009510 <_sbrk_r>
 800767a:	4581      	cmp	r9, r0
 800767c:	d13f      	bne.n	80076fe <_malloc_r+0xe6>
 800767e:	6821      	ldr	r1, [r4, #0]
 8007680:	4638      	mov	r0, r7
 8007682:	1a6d      	subs	r5, r5, r1
 8007684:	4629      	mov	r1, r5
 8007686:	f7ff ffa7 	bl	80075d8 <sbrk_aligned>
 800768a:	3001      	adds	r0, #1
 800768c:	d037      	beq.n	80076fe <_malloc_r+0xe6>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	442b      	add	r3, r5
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	f8d8 3000 	ldr.w	r3, [r8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d038      	beq.n	800770e <_malloc_r+0xf6>
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	42a2      	cmp	r2, r4
 80076a0:	d12b      	bne.n	80076fa <_malloc_r+0xe2>
 80076a2:	2200      	movs	r2, #0
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	e00f      	b.n	80076c8 <_malloc_r+0xb0>
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	1b52      	subs	r2, r2, r5
 80076ac:	d41f      	bmi.n	80076ee <_malloc_r+0xd6>
 80076ae:	2a0b      	cmp	r2, #11
 80076b0:	d917      	bls.n	80076e2 <_malloc_r+0xca>
 80076b2:	1961      	adds	r1, r4, r5
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	6025      	str	r5, [r4, #0]
 80076b8:	bf18      	it	ne
 80076ba:	6059      	strne	r1, [r3, #4]
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	bf08      	it	eq
 80076c0:	f8c8 1000 	streq.w	r1, [r8]
 80076c4:	5162      	str	r2, [r4, r5]
 80076c6:	604b      	str	r3, [r1, #4]
 80076c8:	4638      	mov	r0, r7
 80076ca:	f104 060b 	add.w	r6, r4, #11
 80076ce:	f000 f829 	bl	8007724 <__malloc_unlock>
 80076d2:	f026 0607 	bic.w	r6, r6, #7
 80076d6:	1d23      	adds	r3, r4, #4
 80076d8:	1af2      	subs	r2, r6, r3
 80076da:	d0ae      	beq.n	800763a <_malloc_r+0x22>
 80076dc:	1b9b      	subs	r3, r3, r6
 80076de:	50a3      	str	r3, [r4, r2]
 80076e0:	e7ab      	b.n	800763a <_malloc_r+0x22>
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	6862      	ldr	r2, [r4, #4]
 80076e6:	d1dd      	bne.n	80076a4 <_malloc_r+0x8c>
 80076e8:	f8c8 2000 	str.w	r2, [r8]
 80076ec:	e7ec      	b.n	80076c8 <_malloc_r+0xb0>
 80076ee:	4623      	mov	r3, r4
 80076f0:	6864      	ldr	r4, [r4, #4]
 80076f2:	e7ac      	b.n	800764e <_malloc_r+0x36>
 80076f4:	4634      	mov	r4, r6
 80076f6:	6876      	ldr	r6, [r6, #4]
 80076f8:	e7b4      	b.n	8007664 <_malloc_r+0x4c>
 80076fa:	4613      	mov	r3, r2
 80076fc:	e7cc      	b.n	8007698 <_malloc_r+0x80>
 80076fe:	230c      	movs	r3, #12
 8007700:	4638      	mov	r0, r7
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	f000 f80e 	bl	8007724 <__malloc_unlock>
 8007708:	e797      	b.n	800763a <_malloc_r+0x22>
 800770a:	6025      	str	r5, [r4, #0]
 800770c:	e7dc      	b.n	80076c8 <_malloc_r+0xb0>
 800770e:	605b      	str	r3, [r3, #4]
 8007710:	deff      	udf	#255	; 0xff
 8007712:	bf00      	nop
 8007714:	20002634 	.word	0x20002634

08007718 <__malloc_lock>:
 8007718:	4801      	ldr	r0, [pc, #4]	; (8007720 <__malloc_lock+0x8>)
 800771a:	f001 bf46 	b.w	80095aa <__retarget_lock_acquire_recursive>
 800771e:	bf00      	nop
 8007720:	2000277c 	.word	0x2000277c

08007724 <__malloc_unlock>:
 8007724:	4801      	ldr	r0, [pc, #4]	; (800772c <__malloc_unlock+0x8>)
 8007726:	f001 bf41 	b.w	80095ac <__retarget_lock_release_recursive>
 800772a:	bf00      	nop
 800772c:	2000277c 	.word	0x2000277c

08007730 <sulp>:
 8007730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007734:	460f      	mov	r7, r1
 8007736:	4690      	mov	r8, r2
 8007738:	f003 fd16 	bl	800b168 <__ulp>
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	f1b8 0f00 	cmp.w	r8, #0
 8007744:	d011      	beq.n	800776a <sulp+0x3a>
 8007746:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800774a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800774e:	2b00      	cmp	r3, #0
 8007750:	dd0b      	ble.n	800776a <sulp+0x3a>
 8007752:	2400      	movs	r4, #0
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800775a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800775e:	4622      	mov	r2, r4
 8007760:	462b      	mov	r3, r5
 8007762:	f7f8 fec3 	bl	80004ec <__aeabi_dmul>
 8007766:	4604      	mov	r4, r0
 8007768:	460d      	mov	r5, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007772:	0000      	movs	r0, r0
 8007774:	0000      	movs	r0, r0
	...

08007778 <_strtod_l>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	b09f      	sub	sp, #124	; 0x7c
 800777e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007780:	2200      	movs	r2, #0
 8007782:	4604      	mov	r4, r0
 8007784:	921a      	str	r2, [sp, #104]	; 0x68
 8007786:	460d      	mov	r5, r1
 8007788:	f04f 0800 	mov.w	r8, #0
 800778c:	f04f 0900 	mov.w	r9, #0
 8007790:	460a      	mov	r2, r1
 8007792:	9219      	str	r2, [sp, #100]	; 0x64
 8007794:	7811      	ldrb	r1, [r2, #0]
 8007796:	292b      	cmp	r1, #43	; 0x2b
 8007798:	d04a      	beq.n	8007830 <_strtod_l+0xb8>
 800779a:	d838      	bhi.n	800780e <_strtod_l+0x96>
 800779c:	290d      	cmp	r1, #13
 800779e:	d832      	bhi.n	8007806 <_strtod_l+0x8e>
 80077a0:	2908      	cmp	r1, #8
 80077a2:	d832      	bhi.n	800780a <_strtod_l+0x92>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d03b      	beq.n	8007820 <_strtod_l+0xa8>
 80077a8:	2200      	movs	r2, #0
 80077aa:	920e      	str	r2, [sp, #56]	; 0x38
 80077ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80077ae:	7832      	ldrb	r2, [r6, #0]
 80077b0:	2a30      	cmp	r2, #48	; 0x30
 80077b2:	f040 80b2 	bne.w	800791a <_strtod_l+0x1a2>
 80077b6:	7872      	ldrb	r2, [r6, #1]
 80077b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80077bc:	2a58      	cmp	r2, #88	; 0x58
 80077be:	d16e      	bne.n	800789e <_strtod_l+0x126>
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c4:	4620      	mov	r0, r4
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	ab1a      	add	r3, sp, #104	; 0x68
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	4a8c      	ldr	r2, [pc, #560]	; (8007a00 <_strtod_l+0x288>)
 80077ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80077d0:	a919      	add	r1, sp, #100	; 0x64
 80077d2:	f002 fe59 	bl	800a488 <__gethex>
 80077d6:	f010 070f 	ands.w	r7, r0, #15
 80077da:	4605      	mov	r5, r0
 80077dc:	d005      	beq.n	80077ea <_strtod_l+0x72>
 80077de:	2f06      	cmp	r7, #6
 80077e0:	d128      	bne.n	8007834 <_strtod_l+0xbc>
 80077e2:	2300      	movs	r3, #0
 80077e4:	3601      	adds	r6, #1
 80077e6:	9619      	str	r6, [sp, #100]	; 0x64
 80077e8:	930e      	str	r3, [sp, #56]	; 0x38
 80077ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 85a0 	bne.w	8008332 <_strtod_l+0xbba>
 80077f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077f4:	b1cb      	cbz	r3, 800782a <_strtod_l+0xb2>
 80077f6:	4642      	mov	r2, r8
 80077f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077fc:	4610      	mov	r0, r2
 80077fe:	4619      	mov	r1, r3
 8007800:	b01f      	add	sp, #124	; 0x7c
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	2920      	cmp	r1, #32
 8007808:	d1ce      	bne.n	80077a8 <_strtod_l+0x30>
 800780a:	3201      	adds	r2, #1
 800780c:	e7c1      	b.n	8007792 <_strtod_l+0x1a>
 800780e:	292d      	cmp	r1, #45	; 0x2d
 8007810:	d1ca      	bne.n	80077a8 <_strtod_l+0x30>
 8007812:	2101      	movs	r1, #1
 8007814:	910e      	str	r1, [sp, #56]	; 0x38
 8007816:	1c51      	adds	r1, r2, #1
 8007818:	9119      	str	r1, [sp, #100]	; 0x64
 800781a:	7852      	ldrb	r2, [r2, #1]
 800781c:	2a00      	cmp	r2, #0
 800781e:	d1c5      	bne.n	80077ac <_strtod_l+0x34>
 8007820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007822:	9519      	str	r5, [sp, #100]	; 0x64
 8007824:	2b00      	cmp	r3, #0
 8007826:	f040 8582 	bne.w	800832e <_strtod_l+0xbb6>
 800782a:	4642      	mov	r2, r8
 800782c:	464b      	mov	r3, r9
 800782e:	e7e5      	b.n	80077fc <_strtod_l+0x84>
 8007830:	2100      	movs	r1, #0
 8007832:	e7ef      	b.n	8007814 <_strtod_l+0x9c>
 8007834:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007836:	b13a      	cbz	r2, 8007848 <_strtod_l+0xd0>
 8007838:	2135      	movs	r1, #53	; 0x35
 800783a:	a81c      	add	r0, sp, #112	; 0x70
 800783c:	f003 fd80 	bl	800b340 <__copybits>
 8007840:	4620      	mov	r0, r4
 8007842:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007844:	f003 f964 	bl	800ab10 <_Bfree>
 8007848:	3f01      	subs	r7, #1
 800784a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800784c:	2f04      	cmp	r7, #4
 800784e:	d806      	bhi.n	800785e <_strtod_l+0xe6>
 8007850:	e8df f007 	tbb	[pc, r7]
 8007854:	201d0314 	.word	0x201d0314
 8007858:	14          	.byte	0x14
 8007859:	00          	.byte	0x00
 800785a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800785e:	05e9      	lsls	r1, r5, #23
 8007860:	bf48      	it	mi
 8007862:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007866:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800786a:	0d1b      	lsrs	r3, r3, #20
 800786c:	051b      	lsls	r3, r3, #20
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1bb      	bne.n	80077ea <_strtod_l+0x72>
 8007872:	f001 fe6f 	bl	8009554 <__errno>
 8007876:	2322      	movs	r3, #34	; 0x22
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	e7b6      	b.n	80077ea <_strtod_l+0x72>
 800787c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007880:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007884:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007888:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800788c:	e7e7      	b.n	800785e <_strtod_l+0xe6>
 800788e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007a04 <_strtod_l+0x28c>
 8007892:	e7e4      	b.n	800785e <_strtod_l+0xe6>
 8007894:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007898:	f04f 38ff 	mov.w	r8, #4294967295
 800789c:	e7df      	b.n	800785e <_strtod_l+0xe6>
 800789e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	9219      	str	r2, [sp, #100]	; 0x64
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b30      	cmp	r3, #48	; 0x30
 80078a8:	d0f9      	beq.n	800789e <_strtod_l+0x126>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d09d      	beq.n	80077ea <_strtod_l+0x72>
 80078ae:	2301      	movs	r3, #1
 80078b0:	f04f 0a00 	mov.w	sl, #0
 80078b4:	220a      	movs	r2, #10
 80078b6:	46d3      	mov	fp, sl
 80078b8:	9305      	str	r3, [sp, #20]
 80078ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80078c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80078c4:	7806      	ldrb	r6, [r0, #0]
 80078c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80078ca:	b2d9      	uxtb	r1, r3
 80078cc:	2909      	cmp	r1, #9
 80078ce:	d926      	bls.n	800791e <_strtod_l+0x1a6>
 80078d0:	2201      	movs	r2, #1
 80078d2:	494d      	ldr	r1, [pc, #308]	; (8007a08 <_strtod_l+0x290>)
 80078d4:	f001 fd4c 	bl	8009370 <strncmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d030      	beq.n	800793e <_strtod_l+0x1c6>
 80078dc:	2000      	movs	r0, #0
 80078de:	4632      	mov	r2, r6
 80078e0:	4603      	mov	r3, r0
 80078e2:	465e      	mov	r6, fp
 80078e4:	9008      	str	r0, [sp, #32]
 80078e6:	2a65      	cmp	r2, #101	; 0x65
 80078e8:	d001      	beq.n	80078ee <_strtod_l+0x176>
 80078ea:	2a45      	cmp	r2, #69	; 0x45
 80078ec:	d113      	bne.n	8007916 <_strtod_l+0x19e>
 80078ee:	b91e      	cbnz	r6, 80078f8 <_strtod_l+0x180>
 80078f0:	9a05      	ldr	r2, [sp, #20]
 80078f2:	4302      	orrs	r2, r0
 80078f4:	d094      	beq.n	8007820 <_strtod_l+0xa8>
 80078f6:	2600      	movs	r6, #0
 80078f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80078fa:	1c6a      	adds	r2, r5, #1
 80078fc:	9219      	str	r2, [sp, #100]	; 0x64
 80078fe:	786a      	ldrb	r2, [r5, #1]
 8007900:	2a2b      	cmp	r2, #43	; 0x2b
 8007902:	d074      	beq.n	80079ee <_strtod_l+0x276>
 8007904:	2a2d      	cmp	r2, #45	; 0x2d
 8007906:	d078      	beq.n	80079fa <_strtod_l+0x282>
 8007908:	f04f 0c00 	mov.w	ip, #0
 800790c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007910:	2909      	cmp	r1, #9
 8007912:	d97f      	bls.n	8007a14 <_strtod_l+0x29c>
 8007914:	9519      	str	r5, [sp, #100]	; 0x64
 8007916:	2700      	movs	r7, #0
 8007918:	e09e      	b.n	8007a58 <_strtod_l+0x2e0>
 800791a:	2300      	movs	r3, #0
 800791c:	e7c8      	b.n	80078b0 <_strtod_l+0x138>
 800791e:	f1bb 0f08 	cmp.w	fp, #8
 8007922:	bfd8      	it	le
 8007924:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007926:	f100 0001 	add.w	r0, r0, #1
 800792a:	bfd6      	itet	le
 800792c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007930:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007934:	930a      	strle	r3, [sp, #40]	; 0x28
 8007936:	f10b 0b01 	add.w	fp, fp, #1
 800793a:	9019      	str	r0, [sp, #100]	; 0x64
 800793c:	e7c1      	b.n	80078c2 <_strtod_l+0x14a>
 800793e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	9219      	str	r2, [sp, #100]	; 0x64
 8007944:	785a      	ldrb	r2, [r3, #1]
 8007946:	f1bb 0f00 	cmp.w	fp, #0
 800794a:	d037      	beq.n	80079bc <_strtod_l+0x244>
 800794c:	465e      	mov	r6, fp
 800794e:	9008      	str	r0, [sp, #32]
 8007950:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007954:	2b09      	cmp	r3, #9
 8007956:	d912      	bls.n	800797e <_strtod_l+0x206>
 8007958:	2301      	movs	r3, #1
 800795a:	e7c4      	b.n	80078e6 <_strtod_l+0x16e>
 800795c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800795e:	3001      	adds	r0, #1
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	9219      	str	r2, [sp, #100]	; 0x64
 8007964:	785a      	ldrb	r2, [r3, #1]
 8007966:	2a30      	cmp	r2, #48	; 0x30
 8007968:	d0f8      	beq.n	800795c <_strtod_l+0x1e4>
 800796a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800796e:	2b08      	cmp	r3, #8
 8007970:	f200 84e4 	bhi.w	800833c <_strtod_l+0xbc4>
 8007974:	9008      	str	r0, [sp, #32]
 8007976:	2000      	movs	r0, #0
 8007978:	4606      	mov	r6, r0
 800797a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797c:	930b      	str	r3, [sp, #44]	; 0x2c
 800797e:	3a30      	subs	r2, #48	; 0x30
 8007980:	f100 0301 	add.w	r3, r0, #1
 8007984:	d014      	beq.n	80079b0 <_strtod_l+0x238>
 8007986:	9908      	ldr	r1, [sp, #32]
 8007988:	eb00 0c06 	add.w	ip, r0, r6
 800798c:	4419      	add	r1, r3
 800798e:	9108      	str	r1, [sp, #32]
 8007990:	4633      	mov	r3, r6
 8007992:	210a      	movs	r1, #10
 8007994:	4563      	cmp	r3, ip
 8007996:	d113      	bne.n	80079c0 <_strtod_l+0x248>
 8007998:	1833      	adds	r3, r6, r0
 800799a:	2b08      	cmp	r3, #8
 800799c:	f106 0601 	add.w	r6, r6, #1
 80079a0:	4406      	add	r6, r0
 80079a2:	dc1a      	bgt.n	80079da <_strtod_l+0x262>
 80079a4:	230a      	movs	r3, #10
 80079a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079a8:	fb03 2301 	mla	r3, r3, r1, r2
 80079ac:	930a      	str	r3, [sp, #40]	; 0x28
 80079ae:	2300      	movs	r3, #0
 80079b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079b2:	4618      	mov	r0, r3
 80079b4:	1c51      	adds	r1, r2, #1
 80079b6:	9119      	str	r1, [sp, #100]	; 0x64
 80079b8:	7852      	ldrb	r2, [r2, #1]
 80079ba:	e7c9      	b.n	8007950 <_strtod_l+0x1d8>
 80079bc:	4658      	mov	r0, fp
 80079be:	e7d2      	b.n	8007966 <_strtod_l+0x1ee>
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	f103 0301 	add.w	r3, r3, #1
 80079c6:	dc03      	bgt.n	80079d0 <_strtod_l+0x258>
 80079c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80079ca:	434f      	muls	r7, r1
 80079cc:	970a      	str	r7, [sp, #40]	; 0x28
 80079ce:	e7e1      	b.n	8007994 <_strtod_l+0x21c>
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	bfd8      	it	le
 80079d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80079d8:	e7dc      	b.n	8007994 <_strtod_l+0x21c>
 80079da:	2e10      	cmp	r6, #16
 80079dc:	bfdc      	itt	le
 80079de:	230a      	movle	r3, #10
 80079e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80079e4:	e7e3      	b.n	80079ae <_strtod_l+0x236>
 80079e6:	2300      	movs	r3, #0
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	2301      	movs	r3, #1
 80079ec:	e780      	b.n	80078f0 <_strtod_l+0x178>
 80079ee:	f04f 0c00 	mov.w	ip, #0
 80079f2:	1caa      	adds	r2, r5, #2
 80079f4:	9219      	str	r2, [sp, #100]	; 0x64
 80079f6:	78aa      	ldrb	r2, [r5, #2]
 80079f8:	e788      	b.n	800790c <_strtod_l+0x194>
 80079fa:	f04f 0c01 	mov.w	ip, #1
 80079fe:	e7f8      	b.n	80079f2 <_strtod_l+0x27a>
 8007a00:	0800bc9c 	.word	0x0800bc9c
 8007a04:	7ff00000 	.word	0x7ff00000
 8007a08:	0800bc9a 	.word	0x0800bc9a
 8007a0c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a0e:	1c51      	adds	r1, r2, #1
 8007a10:	9119      	str	r1, [sp, #100]	; 0x64
 8007a12:	7852      	ldrb	r2, [r2, #1]
 8007a14:	2a30      	cmp	r2, #48	; 0x30
 8007a16:	d0f9      	beq.n	8007a0c <_strtod_l+0x294>
 8007a18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007a1c:	2908      	cmp	r1, #8
 8007a1e:	f63f af7a 	bhi.w	8007916 <_strtod_l+0x19e>
 8007a22:	3a30      	subs	r2, #48	; 0x30
 8007a24:	9209      	str	r2, [sp, #36]	; 0x24
 8007a26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a28:	920c      	str	r2, [sp, #48]	; 0x30
 8007a2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a2c:	1c57      	adds	r7, r2, #1
 8007a2e:	9719      	str	r7, [sp, #100]	; 0x64
 8007a30:	7852      	ldrb	r2, [r2, #1]
 8007a32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007a36:	f1be 0f09 	cmp.w	lr, #9
 8007a3a:	d938      	bls.n	8007aae <_strtod_l+0x336>
 8007a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a3e:	1a7f      	subs	r7, r7, r1
 8007a40:	2f08      	cmp	r7, #8
 8007a42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007a46:	dc03      	bgt.n	8007a50 <_strtod_l+0x2d8>
 8007a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a4a:	428f      	cmp	r7, r1
 8007a4c:	bfa8      	it	ge
 8007a4e:	460f      	movge	r7, r1
 8007a50:	f1bc 0f00 	cmp.w	ip, #0
 8007a54:	d000      	beq.n	8007a58 <_strtod_l+0x2e0>
 8007a56:	427f      	negs	r7, r7
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	d14f      	bne.n	8007afc <_strtod_l+0x384>
 8007a5c:	9905      	ldr	r1, [sp, #20]
 8007a5e:	4301      	orrs	r1, r0
 8007a60:	f47f aec3 	bne.w	80077ea <_strtod_l+0x72>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f47f aedb 	bne.w	8007820 <_strtod_l+0xa8>
 8007a6a:	2a69      	cmp	r2, #105	; 0x69
 8007a6c:	d029      	beq.n	8007ac2 <_strtod_l+0x34a>
 8007a6e:	dc26      	bgt.n	8007abe <_strtod_l+0x346>
 8007a70:	2a49      	cmp	r2, #73	; 0x49
 8007a72:	d026      	beq.n	8007ac2 <_strtod_l+0x34a>
 8007a74:	2a4e      	cmp	r2, #78	; 0x4e
 8007a76:	f47f aed3 	bne.w	8007820 <_strtod_l+0xa8>
 8007a7a:	499a      	ldr	r1, [pc, #616]	; (8007ce4 <_strtod_l+0x56c>)
 8007a7c:	a819      	add	r0, sp, #100	; 0x64
 8007a7e:	f002 ff45 	bl	800a90c <__match>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f43f aecc 	beq.w	8007820 <_strtod_l+0xa8>
 8007a88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b28      	cmp	r3, #40	; 0x28
 8007a8e:	d12f      	bne.n	8007af0 <_strtod_l+0x378>
 8007a90:	4995      	ldr	r1, [pc, #596]	; (8007ce8 <_strtod_l+0x570>)
 8007a92:	aa1c      	add	r2, sp, #112	; 0x70
 8007a94:	a819      	add	r0, sp, #100	; 0x64
 8007a96:	f002 ff4d 	bl	800a934 <__hexnan>
 8007a9a:	2805      	cmp	r0, #5
 8007a9c:	d128      	bne.n	8007af0 <_strtod_l+0x378>
 8007a9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007aa0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007aa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007aa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007aac:	e69d      	b.n	80077ea <_strtod_l+0x72>
 8007aae:	210a      	movs	r1, #10
 8007ab0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ab2:	fb01 2107 	mla	r1, r1, r7, r2
 8007ab6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007aba:	9209      	str	r2, [sp, #36]	; 0x24
 8007abc:	e7b5      	b.n	8007a2a <_strtod_l+0x2b2>
 8007abe:	2a6e      	cmp	r2, #110	; 0x6e
 8007ac0:	e7d9      	b.n	8007a76 <_strtod_l+0x2fe>
 8007ac2:	498a      	ldr	r1, [pc, #552]	; (8007cec <_strtod_l+0x574>)
 8007ac4:	a819      	add	r0, sp, #100	; 0x64
 8007ac6:	f002 ff21 	bl	800a90c <__match>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f43f aea8 	beq.w	8007820 <_strtod_l+0xa8>
 8007ad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ad2:	4987      	ldr	r1, [pc, #540]	; (8007cf0 <_strtod_l+0x578>)
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	a819      	add	r0, sp, #100	; 0x64
 8007ad8:	9319      	str	r3, [sp, #100]	; 0x64
 8007ada:	f002 ff17 	bl	800a90c <__match>
 8007ade:	b910      	cbnz	r0, 8007ae6 <_strtod_l+0x36e>
 8007ae0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	9319      	str	r3, [sp, #100]	; 0x64
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007cf4 <_strtod_l+0x57c>
 8007aee:	e67c      	b.n	80077ea <_strtod_l+0x72>
 8007af0:	4881      	ldr	r0, [pc, #516]	; (8007cf8 <_strtod_l+0x580>)
 8007af2:	f001 fd81 	bl	80095f8 <nan>
 8007af6:	4680      	mov	r8, r0
 8007af8:	4689      	mov	r9, r1
 8007afa:	e676      	b.n	80077ea <_strtod_l+0x72>
 8007afc:	9b08      	ldr	r3, [sp, #32]
 8007afe:	f1bb 0f00 	cmp.w	fp, #0
 8007b02:	bf08      	it	eq
 8007b04:	46b3      	moveq	fp, r6
 8007b06:	1afb      	subs	r3, r7, r3
 8007b08:	2e10      	cmp	r6, #16
 8007b0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b0c:	4635      	mov	r5, r6
 8007b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b10:	bfa8      	it	ge
 8007b12:	2510      	movge	r5, #16
 8007b14:	f7f8 fc70 	bl	80003f8 <__aeabi_ui2d>
 8007b18:	2e09      	cmp	r6, #9
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	dd13      	ble.n	8007b48 <_strtod_l+0x3d0>
 8007b20:	4b76      	ldr	r3, [pc, #472]	; (8007cfc <_strtod_l+0x584>)
 8007b22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b2a:	f7f8 fcdf 	bl	80004ec <__aeabi_dmul>
 8007b2e:	4680      	mov	r8, r0
 8007b30:	4650      	mov	r0, sl
 8007b32:	4689      	mov	r9, r1
 8007b34:	f7f8 fc60 	bl	80003f8 <__aeabi_ui2d>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4649      	mov	r1, r9
 8007b40:	f7f8 fb1e 	bl	8000180 <__adddf3>
 8007b44:	4680      	mov	r8, r0
 8007b46:	4689      	mov	r9, r1
 8007b48:	2e0f      	cmp	r6, #15
 8007b4a:	dc36      	bgt.n	8007bba <_strtod_l+0x442>
 8007b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f43f ae4b 	beq.w	80077ea <_strtod_l+0x72>
 8007b54:	dd22      	ble.n	8007b9c <_strtod_l+0x424>
 8007b56:	2b16      	cmp	r3, #22
 8007b58:	dc09      	bgt.n	8007b6e <_strtod_l+0x3f6>
 8007b5a:	4968      	ldr	r1, [pc, #416]	; (8007cfc <_strtod_l+0x584>)
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b62:	464b      	mov	r3, r9
 8007b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b68:	f7f8 fcc0 	bl	80004ec <__aeabi_dmul>
 8007b6c:	e7c3      	b.n	8007af6 <_strtod_l+0x37e>
 8007b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b70:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007b74:	4293      	cmp	r3, r2
 8007b76:	db20      	blt.n	8007bba <_strtod_l+0x442>
 8007b78:	4c60      	ldr	r4, [pc, #384]	; (8007cfc <_strtod_l+0x584>)
 8007b7a:	f1c6 060f 	rsb	r6, r6, #15
 8007b7e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b82:	4642      	mov	r2, r8
 8007b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b88:	464b      	mov	r3, r9
 8007b8a:	f7f8 fcaf 	bl	80004ec <__aeabi_dmul>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b90:	1b9e      	subs	r6, r3, r6
 8007b92:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b9a:	e7e5      	b.n	8007b68 <_strtod_l+0x3f0>
 8007b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9e:	3316      	adds	r3, #22
 8007ba0:	db0b      	blt.n	8007bba <_strtod_l+0x442>
 8007ba2:	9b08      	ldr	r3, [sp, #32]
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	1bdf      	subs	r7, r3, r7
 8007ba8:	4b54      	ldr	r3, [pc, #336]	; (8007cfc <_strtod_l+0x584>)
 8007baa:	4649      	mov	r1, r9
 8007bac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb4:	f7f8 fdc4 	bl	8000740 <__aeabi_ddiv>
 8007bb8:	e79d      	b.n	8007af6 <_strtod_l+0x37e>
 8007bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbc:	1b75      	subs	r5, r6, r5
 8007bbe:	441d      	add	r5, r3
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	dd70      	ble.n	8007ca6 <_strtod_l+0x52e>
 8007bc4:	f015 030f 	ands.w	r3, r5, #15
 8007bc8:	d00a      	beq.n	8007be0 <_strtod_l+0x468>
 8007bca:	494c      	ldr	r1, [pc, #304]	; (8007cfc <_strtod_l+0x584>)
 8007bcc:	4642      	mov	r2, r8
 8007bce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	f7f8 fc88 	bl	80004ec <__aeabi_dmul>
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	f035 050f 	bics.w	r5, r5, #15
 8007be4:	d04d      	beq.n	8007c82 <_strtod_l+0x50a>
 8007be6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007bea:	dd22      	ble.n	8007c32 <_strtod_l+0x4ba>
 8007bec:	2600      	movs	r6, #0
 8007bee:	46b3      	mov	fp, r6
 8007bf0:	960b      	str	r6, [sp, #44]	; 0x2c
 8007bf2:	9608      	str	r6, [sp, #32]
 8007bf4:	2322      	movs	r3, #34	; 0x22
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007cf4 <_strtod_l+0x57c>
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f43f adf1 	beq.w	80077ea <_strtod_l+0x72>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c0c:	f002 ff80 	bl	800ab10 <_Bfree>
 8007c10:	4620      	mov	r0, r4
 8007c12:	9908      	ldr	r1, [sp, #32]
 8007c14:	f002 ff7c 	bl	800ab10 <_Bfree>
 8007c18:	4659      	mov	r1, fp
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f002 ff78 	bl	800ab10 <_Bfree>
 8007c20:	4620      	mov	r0, r4
 8007c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c24:	f002 ff74 	bl	800ab10 <_Bfree>
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f002 ff70 	bl	800ab10 <_Bfree>
 8007c30:	e5db      	b.n	80077ea <_strtod_l+0x72>
 8007c32:	4b33      	ldr	r3, [pc, #204]	; (8007d00 <_strtod_l+0x588>)
 8007c34:	4640      	mov	r0, r8
 8007c36:	9305      	str	r3, [sp, #20]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	469a      	mov	sl, r3
 8007c3e:	112d      	asrs	r5, r5, #4
 8007c40:	2d01      	cmp	r5, #1
 8007c42:	dc21      	bgt.n	8007c88 <_strtod_l+0x510>
 8007c44:	b10b      	cbz	r3, 8007c4a <_strtod_l+0x4d2>
 8007c46:	4680      	mov	r8, r0
 8007c48:	4689      	mov	r9, r1
 8007c4a:	492d      	ldr	r1, [pc, #180]	; (8007d00 <_strtod_l+0x588>)
 8007c4c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007c50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c54:	4642      	mov	r2, r8
 8007c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	f7f8 fc46 	bl	80004ec <__aeabi_dmul>
 8007c60:	4b24      	ldr	r3, [pc, #144]	; (8007cf4 <_strtod_l+0x57c>)
 8007c62:	460a      	mov	r2, r1
 8007c64:	400b      	ands	r3, r1
 8007c66:	4927      	ldr	r1, [pc, #156]	; (8007d04 <_strtod_l+0x58c>)
 8007c68:	4680      	mov	r8, r0
 8007c6a:	428b      	cmp	r3, r1
 8007c6c:	d8be      	bhi.n	8007bec <_strtod_l+0x474>
 8007c6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c72:	428b      	cmp	r3, r1
 8007c74:	bf86      	itte	hi
 8007c76:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c7a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007d08 <_strtod_l+0x590>
 8007c7e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c82:	2300      	movs	r3, #0
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	e07b      	b.n	8007d80 <_strtod_l+0x608>
 8007c88:	07ea      	lsls	r2, r5, #31
 8007c8a:	d505      	bpl.n	8007c98 <_strtod_l+0x520>
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 fc2b 	bl	80004ec <__aeabi_dmul>
 8007c96:	2301      	movs	r3, #1
 8007c98:	9a05      	ldr	r2, [sp, #20]
 8007c9a:	f10a 0a01 	add.w	sl, sl, #1
 8007c9e:	3208      	adds	r2, #8
 8007ca0:	106d      	asrs	r5, r5, #1
 8007ca2:	9205      	str	r2, [sp, #20]
 8007ca4:	e7cc      	b.n	8007c40 <_strtod_l+0x4c8>
 8007ca6:	d0ec      	beq.n	8007c82 <_strtod_l+0x50a>
 8007ca8:	426d      	negs	r5, r5
 8007caa:	f015 020f 	ands.w	r2, r5, #15
 8007cae:	d00a      	beq.n	8007cc6 <_strtod_l+0x54e>
 8007cb0:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <_strtod_l+0x584>)
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cb8:	4649      	mov	r1, r9
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fd3f 	bl	8000740 <__aeabi_ddiv>
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	4689      	mov	r9, r1
 8007cc6:	112d      	asrs	r5, r5, #4
 8007cc8:	d0db      	beq.n	8007c82 <_strtod_l+0x50a>
 8007cca:	2d1f      	cmp	r5, #31
 8007ccc:	dd1e      	ble.n	8007d0c <_strtod_l+0x594>
 8007cce:	2600      	movs	r6, #0
 8007cd0:	46b3      	mov	fp, r6
 8007cd2:	960b      	str	r6, [sp, #44]	; 0x2c
 8007cd4:	9608      	str	r6, [sp, #32]
 8007cd6:	2322      	movs	r3, #34	; 0x22
 8007cd8:	f04f 0800 	mov.w	r8, #0
 8007cdc:	f04f 0900 	mov.w	r9, #0
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	e78d      	b.n	8007c00 <_strtod_l+0x488>
 8007ce4:	0800bdfe 	.word	0x0800bdfe
 8007ce8:	0800bcb0 	.word	0x0800bcb0
 8007cec:	0800bdf6 	.word	0x0800bdf6
 8007cf0:	0800bedd 	.word	0x0800bedd
 8007cf4:	7ff00000 	.word	0x7ff00000
 8007cf8:	0800bed9 	.word	0x0800bed9
 8007cfc:	0800c038 	.word	0x0800c038
 8007d00:	0800c010 	.word	0x0800c010
 8007d04:	7ca00000 	.word	0x7ca00000
 8007d08:	7fefffff 	.word	0x7fefffff
 8007d0c:	f015 0310 	ands.w	r3, r5, #16
 8007d10:	bf18      	it	ne
 8007d12:	236a      	movne	r3, #106	; 0x6a
 8007d14:	4640      	mov	r0, r8
 8007d16:	9305      	str	r3, [sp, #20]
 8007d18:	4649      	mov	r1, r9
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007fe8 <_strtod_l+0x870>
 8007d20:	07ea      	lsls	r2, r5, #31
 8007d22:	d504      	bpl.n	8007d2e <_strtod_l+0x5b6>
 8007d24:	e9da 2300 	ldrd	r2, r3, [sl]
 8007d28:	f7f8 fbe0 	bl	80004ec <__aeabi_dmul>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	106d      	asrs	r5, r5, #1
 8007d30:	f10a 0a08 	add.w	sl, sl, #8
 8007d34:	d1f4      	bne.n	8007d20 <_strtod_l+0x5a8>
 8007d36:	b10b      	cbz	r3, 8007d3c <_strtod_l+0x5c4>
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4689      	mov	r9, r1
 8007d3c:	9b05      	ldr	r3, [sp, #20]
 8007d3e:	b1bb      	cbz	r3, 8007d70 <_strtod_l+0x5f8>
 8007d40:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007d44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	dd10      	ble.n	8007d70 <_strtod_l+0x5f8>
 8007d4e:	2b1f      	cmp	r3, #31
 8007d50:	f340 8128 	ble.w	8007fa4 <_strtod_l+0x82c>
 8007d54:	2b34      	cmp	r3, #52	; 0x34
 8007d56:	bfd8      	it	le
 8007d58:	f04f 33ff 	movle.w	r3, #4294967295
 8007d5c:	f04f 0800 	mov.w	r8, #0
 8007d60:	bfcf      	iteee	gt
 8007d62:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d66:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d6a:	4093      	lslle	r3, r2
 8007d6c:	ea03 0901 	andle.w	r9, r3, r1
 8007d70:	2200      	movs	r2, #0
 8007d72:	2300      	movs	r3, #0
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 fe20 	bl	80009bc <__aeabi_dcmpeq>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d1a6      	bne.n	8007cce <_strtod_l+0x556>
 8007d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d82:	465a      	mov	r2, fp
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4620      	mov	r0, r4
 8007d88:	4633      	mov	r3, r6
 8007d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d8c:	f002 ff28 	bl	800abe0 <__s2b>
 8007d90:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f af2a 	beq.w	8007bec <_strtod_l+0x474>
 8007d98:	2600      	movs	r6, #0
 8007d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	eba3 0307 	sub.w	r3, r3, r7
 8007da4:	bfa8      	it	ge
 8007da6:	2300      	movge	r3, #0
 8007da8:	46b3      	mov	fp, r6
 8007daa:	9312      	str	r3, [sp, #72]	; 0x48
 8007dac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007db0:	9316      	str	r3, [sp, #88]	; 0x58
 8007db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db4:	4620      	mov	r0, r4
 8007db6:	6859      	ldr	r1, [r3, #4]
 8007db8:	f002 fe6a 	bl	800aa90 <_Balloc>
 8007dbc:	9008      	str	r0, [sp, #32]
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f af18 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc6:	300c      	adds	r0, #12
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	f103 010c 	add.w	r1, r3, #12
 8007dce:	3202      	adds	r2, #2
 8007dd0:	0092      	lsls	r2, r2, #2
 8007dd2:	f001 fc02 	bl	80095da <memcpy>
 8007dd6:	ab1c      	add	r3, sp, #112	; 0x70
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	4642      	mov	r2, r8
 8007de0:	464b      	mov	r3, r9
 8007de2:	4620      	mov	r0, r4
 8007de4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007de8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007dec:	f003 fa24 	bl	800b238 <__d2b>
 8007df0:	901a      	str	r0, [sp, #104]	; 0x68
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f43f aefe 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007df8:	2101      	movs	r1, #1
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f002 ff88 	bl	800ad10 <__i2b>
 8007e00:	4683      	mov	fp, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f43f aef6 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007e08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007e0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e0c:	2f00      	cmp	r7, #0
 8007e0e:	bfab      	itete	ge
 8007e10:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007e12:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007e14:	eb07 0a03 	addge.w	sl, r7, r3
 8007e18:	1bdd      	sublt	r5, r3, r7
 8007e1a:	9b05      	ldr	r3, [sp, #20]
 8007e1c:	bfa8      	it	ge
 8007e1e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007e20:	eba7 0703 	sub.w	r7, r7, r3
 8007e24:	4417      	add	r7, r2
 8007e26:	4b71      	ldr	r3, [pc, #452]	; (8007fec <_strtod_l+0x874>)
 8007e28:	f107 37ff 	add.w	r7, r7, #4294967295
 8007e2c:	bfb8      	it	lt
 8007e2e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007e32:	429f      	cmp	r7, r3
 8007e34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e38:	f280 80c7 	bge.w	8007fca <_strtod_l+0x852>
 8007e3c:	1bdb      	subs	r3, r3, r7
 8007e3e:	2b1f      	cmp	r3, #31
 8007e40:	f04f 0101 	mov.w	r1, #1
 8007e44:	eba2 0203 	sub.w	r2, r2, r3
 8007e48:	f300 80b3 	bgt.w	8007fb2 <_strtod_l+0x83a>
 8007e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e52:	2300      	movs	r3, #0
 8007e54:	9310      	str	r3, [sp, #64]	; 0x40
 8007e56:	eb0a 0702 	add.w	r7, sl, r2
 8007e5a:	9b05      	ldr	r3, [sp, #20]
 8007e5c:	45ba      	cmp	sl, r7
 8007e5e:	4415      	add	r5, r2
 8007e60:	441d      	add	r5, r3
 8007e62:	4653      	mov	r3, sl
 8007e64:	bfa8      	it	ge
 8007e66:	463b      	movge	r3, r7
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	bfa8      	it	ge
 8007e6c:	462b      	movge	r3, r5
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfc2      	ittt	gt
 8007e72:	1aff      	subgt	r7, r7, r3
 8007e74:	1aed      	subgt	r5, r5, r3
 8007e76:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd17      	ble.n	8007eb0 <_strtod_l+0x738>
 8007e80:	4659      	mov	r1, fp
 8007e82:	461a      	mov	r2, r3
 8007e84:	4620      	mov	r0, r4
 8007e86:	f003 f801 	bl	800ae8c <__pow5mult>
 8007e8a:	4683      	mov	fp, r0
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f aeb1 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007e92:	4601      	mov	r1, r0
 8007e94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e96:	4620      	mov	r0, r4
 8007e98:	f002 ff50 	bl	800ad3c <__multiply>
 8007e9c:	900a      	str	r0, [sp, #40]	; 0x28
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f aea8 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ea8:	f002 fe32 	bl	800ab10 <_Bfree>
 8007eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eae:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb0:	2f00      	cmp	r7, #0
 8007eb2:	f300 808f 	bgt.w	8007fd4 <_strtod_l+0x85c>
 8007eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dd08      	ble.n	8007ece <_strtod_l+0x756>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ec0:	9908      	ldr	r1, [sp, #32]
 8007ec2:	f002 ffe3 	bl	800ae8c <__pow5mult>
 8007ec6:	9008      	str	r0, [sp, #32]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f43f ae93 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	dd08      	ble.n	8007ee4 <_strtod_l+0x76c>
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	9908      	ldr	r1, [sp, #32]
 8007ed8:	f003 f832 	bl	800af40 <__lshift>
 8007edc:	9008      	str	r0, [sp, #32]
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f ae88 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007ee4:	f1ba 0f00 	cmp.w	sl, #0
 8007ee8:	dd08      	ble.n	8007efc <_strtod_l+0x784>
 8007eea:	4659      	mov	r1, fp
 8007eec:	4652      	mov	r2, sl
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f003 f826 	bl	800af40 <__lshift>
 8007ef4:	4683      	mov	fp, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f ae7c 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007efc:	4620      	mov	r0, r4
 8007efe:	9a08      	ldr	r2, [sp, #32]
 8007f00:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f02:	f003 f8a5 	bl	800b050 <__mdiff>
 8007f06:	4606      	mov	r6, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f ae73 	beq.w	8007bf4 <_strtod_l+0x47c>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	68c3      	ldr	r3, [r0, #12]
 8007f12:	4659      	mov	r1, fp
 8007f14:	60c5      	str	r5, [r0, #12]
 8007f16:	930a      	str	r3, [sp, #40]	; 0x28
 8007f18:	f003 f87e 	bl	800b018 <__mcmp>
 8007f1c:	42a8      	cmp	r0, r5
 8007f1e:	da6b      	bge.n	8007ff8 <_strtod_l+0x880>
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	ea53 0308 	orrs.w	r3, r3, r8
 8007f26:	f040 808f 	bne.w	8008048 <_strtod_l+0x8d0>
 8007f2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 808a 	bne.w	8008048 <_strtod_l+0x8d0>
 8007f34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f38:	0d1b      	lsrs	r3, r3, #20
 8007f3a:	051b      	lsls	r3, r3, #20
 8007f3c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f40:	f240 8082 	bls.w	8008048 <_strtod_l+0x8d0>
 8007f44:	6973      	ldr	r3, [r6, #20]
 8007f46:	b913      	cbnz	r3, 8007f4e <_strtod_l+0x7d6>
 8007f48:	6933      	ldr	r3, [r6, #16]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	dd7c      	ble.n	8008048 <_strtod_l+0x8d0>
 8007f4e:	4631      	mov	r1, r6
 8007f50:	2201      	movs	r2, #1
 8007f52:	4620      	mov	r0, r4
 8007f54:	f002 fff4 	bl	800af40 <__lshift>
 8007f58:	4659      	mov	r1, fp
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	f003 f85c 	bl	800b018 <__mcmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	dd71      	ble.n	8008048 <_strtod_l+0x8d0>
 8007f64:	9905      	ldr	r1, [sp, #20]
 8007f66:	464b      	mov	r3, r9
 8007f68:	4a21      	ldr	r2, [pc, #132]	; (8007ff0 <_strtod_l+0x878>)
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	f000 808d 	beq.w	800808a <_strtod_l+0x912>
 8007f70:	ea02 0109 	and.w	r1, r2, r9
 8007f74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f78:	f300 8087 	bgt.w	800808a <_strtod_l+0x912>
 8007f7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f80:	f77f aea9 	ble.w	8007cd6 <_strtod_l+0x55e>
 8007f84:	4640      	mov	r0, r8
 8007f86:	4649      	mov	r1, r9
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <_strtod_l+0x87c>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f7f8 faae 	bl	80004ec <__aeabi_dmul>
 8007f90:	4b17      	ldr	r3, [pc, #92]	; (8007ff0 <_strtod_l+0x878>)
 8007f92:	4680      	mov	r8, r0
 8007f94:	400b      	ands	r3, r1
 8007f96:	4689      	mov	r9, r1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f47f ae35 	bne.w	8007c08 <_strtod_l+0x490>
 8007f9e:	2322      	movs	r3, #34	; 0x22
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	e631      	b.n	8007c08 <_strtod_l+0x490>
 8007fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	ea03 0808 	and.w	r8, r3, r8
 8007fb0:	e6de      	b.n	8007d70 <_strtod_l+0x5f8>
 8007fb2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007fb6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007fba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007fbe:	37e2      	adds	r7, #226	; 0xe2
 8007fc0:	fa01 f307 	lsl.w	r3, r1, r7
 8007fc4:	9310      	str	r3, [sp, #64]	; 0x40
 8007fc6:	9113      	str	r1, [sp, #76]	; 0x4c
 8007fc8:	e745      	b.n	8007e56 <_strtod_l+0x6de>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9310      	str	r3, [sp, #64]	; 0x40
 8007fce:	2301      	movs	r3, #1
 8007fd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fd2:	e740      	b.n	8007e56 <_strtod_l+0x6de>
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fda:	f002 ffb1 	bl	800af40 <__lshift>
 8007fde:	901a      	str	r0, [sp, #104]	; 0x68
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f47f af68 	bne.w	8007eb6 <_strtod_l+0x73e>
 8007fe6:	e605      	b.n	8007bf4 <_strtod_l+0x47c>
 8007fe8:	0800bcc8 	.word	0x0800bcc8
 8007fec:	fffffc02 	.word	0xfffffc02
 8007ff0:	7ff00000 	.word	0x7ff00000
 8007ff4:	39500000 	.word	0x39500000
 8007ff8:	46ca      	mov	sl, r9
 8007ffa:	d165      	bne.n	80080c8 <_strtod_l+0x950>
 8007ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ffe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008002:	b352      	cbz	r2, 800805a <_strtod_l+0x8e2>
 8008004:	4a9e      	ldr	r2, [pc, #632]	; (8008280 <_strtod_l+0xb08>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d12a      	bne.n	8008060 <_strtod_l+0x8e8>
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	4641      	mov	r1, r8
 800800e:	b1fb      	cbz	r3, 8008050 <_strtod_l+0x8d8>
 8008010:	4b9c      	ldr	r3, [pc, #624]	; (8008284 <_strtod_l+0xb0c>)
 8008012:	f04f 32ff 	mov.w	r2, #4294967295
 8008016:	ea09 0303 	and.w	r3, r9, r3
 800801a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800801e:	d81a      	bhi.n	8008056 <_strtod_l+0x8de>
 8008020:	0d1b      	lsrs	r3, r3, #20
 8008022:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	4299      	cmp	r1, r3
 800802c:	d118      	bne.n	8008060 <_strtod_l+0x8e8>
 800802e:	4b96      	ldr	r3, [pc, #600]	; (8008288 <_strtod_l+0xb10>)
 8008030:	459a      	cmp	sl, r3
 8008032:	d102      	bne.n	800803a <_strtod_l+0x8c2>
 8008034:	3101      	adds	r1, #1
 8008036:	f43f addd 	beq.w	8007bf4 <_strtod_l+0x47c>
 800803a:	f04f 0800 	mov.w	r8, #0
 800803e:	4b91      	ldr	r3, [pc, #580]	; (8008284 <_strtod_l+0xb0c>)
 8008040:	ea0a 0303 	and.w	r3, sl, r3
 8008044:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008048:	9b05      	ldr	r3, [sp, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d19a      	bne.n	8007f84 <_strtod_l+0x80c>
 800804e:	e5db      	b.n	8007c08 <_strtod_l+0x490>
 8008050:	f04f 33ff 	mov.w	r3, #4294967295
 8008054:	e7e9      	b.n	800802a <_strtod_l+0x8b2>
 8008056:	4613      	mov	r3, r2
 8008058:	e7e7      	b.n	800802a <_strtod_l+0x8b2>
 800805a:	ea53 0308 	orrs.w	r3, r3, r8
 800805e:	d081      	beq.n	8007f64 <_strtod_l+0x7ec>
 8008060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008062:	b1e3      	cbz	r3, 800809e <_strtod_l+0x926>
 8008064:	ea13 0f0a 	tst.w	r3, sl
 8008068:	d0ee      	beq.n	8008048 <_strtod_l+0x8d0>
 800806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	9a05      	ldr	r2, [sp, #20]
 8008072:	b1c3      	cbz	r3, 80080a6 <_strtod_l+0x92e>
 8008074:	f7ff fb5c 	bl	8007730 <sulp>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800807e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008080:	f7f8 f87e 	bl	8000180 <__adddf3>
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	e7de      	b.n	8008048 <_strtod_l+0x8d0>
 800808a:	4013      	ands	r3, r2
 800808c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008090:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008094:	f04f 38ff 	mov.w	r8, #4294967295
 8008098:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800809c:	e7d4      	b.n	8008048 <_strtod_l+0x8d0>
 800809e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080a0:	ea13 0f08 	tst.w	r3, r8
 80080a4:	e7e0      	b.n	8008068 <_strtod_l+0x8f0>
 80080a6:	f7ff fb43 	bl	8007730 <sulp>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080b2:	f7f8 f863 	bl	800017c <__aeabi_dsub>
 80080b6:	2200      	movs	r2, #0
 80080b8:	2300      	movs	r3, #0
 80080ba:	4680      	mov	r8, r0
 80080bc:	4689      	mov	r9, r1
 80080be:	f7f8 fc7d 	bl	80009bc <__aeabi_dcmpeq>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d0c0      	beq.n	8008048 <_strtod_l+0x8d0>
 80080c6:	e606      	b.n	8007cd6 <_strtod_l+0x55e>
 80080c8:	4659      	mov	r1, fp
 80080ca:	4630      	mov	r0, r6
 80080cc:	f003 f90a 	bl	800b2e4 <__ratio>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80080d8:	2200      	movs	r2, #0
 80080da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080de:	f7f8 fc81 	bl	80009e4 <__aeabi_dcmple>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d06f      	beq.n	80081c6 <_strtod_l+0xa4e>
 80080e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d17c      	bne.n	80081e6 <_strtod_l+0xa6e>
 80080ec:	f1b8 0f00 	cmp.w	r8, #0
 80080f0:	d159      	bne.n	80081a6 <_strtod_l+0xa2e>
 80080f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d17b      	bne.n	80081f2 <_strtod_l+0xa7a>
 80080fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080fe:	2200      	movs	r2, #0
 8008100:	4b62      	ldr	r3, [pc, #392]	; (800828c <_strtod_l+0xb14>)
 8008102:	f7f8 fc65 	bl	80009d0 <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d15a      	bne.n	80081c0 <_strtod_l+0xa48>
 800810a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800810e:	2200      	movs	r2, #0
 8008110:	4b5f      	ldr	r3, [pc, #380]	; (8008290 <_strtod_l+0xb18>)
 8008112:	f7f8 f9eb 	bl	80004ec <__aeabi_dmul>
 8008116:	4605      	mov	r5, r0
 8008118:	460f      	mov	r7, r1
 800811a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800811e:	9506      	str	r5, [sp, #24]
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008126:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800812a:	4b56      	ldr	r3, [pc, #344]	; (8008284 <_strtod_l+0xb0c>)
 800812c:	4a55      	ldr	r2, [pc, #340]	; (8008284 <_strtod_l+0xb0c>)
 800812e:	ea0a 0303 	and.w	r3, sl, r3
 8008132:	9313      	str	r3, [sp, #76]	; 0x4c
 8008134:	4b57      	ldr	r3, [pc, #348]	; (8008294 <_strtod_l+0xb1c>)
 8008136:	ea0a 0202 	and.w	r2, sl, r2
 800813a:	429a      	cmp	r2, r3
 800813c:	f040 80b0 	bne.w	80082a0 <_strtod_l+0xb28>
 8008140:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008144:	4640      	mov	r0, r8
 8008146:	4649      	mov	r1, r9
 8008148:	f003 f80e 	bl	800b168 <__ulp>
 800814c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008150:	f7f8 f9cc 	bl	80004ec <__aeabi_dmul>
 8008154:	4642      	mov	r2, r8
 8008156:	464b      	mov	r3, r9
 8008158:	f7f8 f812 	bl	8000180 <__adddf3>
 800815c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008284 <_strtod_l+0xb0c>
 8008160:	4a4d      	ldr	r2, [pc, #308]	; (8008298 <_strtod_l+0xb20>)
 8008162:	ea01 0a0a 	and.w	sl, r1, sl
 8008166:	4592      	cmp	sl, r2
 8008168:	4680      	mov	r8, r0
 800816a:	d948      	bls.n	80081fe <_strtod_l+0xa86>
 800816c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800816e:	4b46      	ldr	r3, [pc, #280]	; (8008288 <_strtod_l+0xb10>)
 8008170:	429a      	cmp	r2, r3
 8008172:	d103      	bne.n	800817c <_strtod_l+0xa04>
 8008174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008176:	3301      	adds	r3, #1
 8008178:	f43f ad3c 	beq.w	8007bf4 <_strtod_l+0x47c>
 800817c:	f04f 38ff 	mov.w	r8, #4294967295
 8008180:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008288 <_strtod_l+0xb10>
 8008184:	4620      	mov	r0, r4
 8008186:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008188:	f002 fcc2 	bl	800ab10 <_Bfree>
 800818c:	4620      	mov	r0, r4
 800818e:	9908      	ldr	r1, [sp, #32]
 8008190:	f002 fcbe 	bl	800ab10 <_Bfree>
 8008194:	4659      	mov	r1, fp
 8008196:	4620      	mov	r0, r4
 8008198:	f002 fcba 	bl	800ab10 <_Bfree>
 800819c:	4631      	mov	r1, r6
 800819e:	4620      	mov	r0, r4
 80081a0:	f002 fcb6 	bl	800ab10 <_Bfree>
 80081a4:	e605      	b.n	8007db2 <_strtod_l+0x63a>
 80081a6:	f1b8 0f01 	cmp.w	r8, #1
 80081aa:	d103      	bne.n	80081b4 <_strtod_l+0xa3c>
 80081ac:	f1b9 0f00 	cmp.w	r9, #0
 80081b0:	f43f ad91 	beq.w	8007cd6 <_strtod_l+0x55e>
 80081b4:	2200      	movs	r2, #0
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <_strtod_l+0xb24>)
 80081b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80081ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081be:	e016      	b.n	80081ee <_strtod_l+0xa76>
 80081c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80081c2:	4f33      	ldr	r7, [pc, #204]	; (8008290 <_strtod_l+0xb18>)
 80081c4:	e7a9      	b.n	800811a <_strtod_l+0x9a2>
 80081c6:	4b32      	ldr	r3, [pc, #200]	; (8008290 <_strtod_l+0xb18>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081ce:	f7f8 f98d 	bl	80004ec <__aeabi_dmul>
 80081d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d4:	4605      	mov	r5, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d09e      	beq.n	800811a <_strtod_l+0x9a2>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081e4:	e79d      	b.n	8008122 <_strtod_l+0x9aa>
 80081e6:	2200      	movs	r2, #0
 80081e8:	4b28      	ldr	r3, [pc, #160]	; (800828c <_strtod_l+0xb14>)
 80081ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081ee:	4f27      	ldr	r7, [pc, #156]	; (800828c <_strtod_l+0xb14>)
 80081f0:	e797      	b.n	8008122 <_strtod_l+0x9aa>
 80081f2:	2200      	movs	r2, #0
 80081f4:	4b29      	ldr	r3, [pc, #164]	; (800829c <_strtod_l+0xb24>)
 80081f6:	4645      	mov	r5, r8
 80081f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081fc:	e7f7      	b.n	80081ee <_strtod_l+0xa76>
 80081fe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008202:	9b05      	ldr	r3, [sp, #20]
 8008204:	46ca      	mov	sl, r9
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1bc      	bne.n	8008184 <_strtod_l+0xa0c>
 800820a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800820e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008210:	0d1b      	lsrs	r3, r3, #20
 8008212:	051b      	lsls	r3, r3, #20
 8008214:	429a      	cmp	r2, r3
 8008216:	d1b5      	bne.n	8008184 <_strtod_l+0xa0c>
 8008218:	4628      	mov	r0, r5
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 ff98 	bl	8001150 <__aeabi_d2lz>
 8008220:	f7f8 f936 	bl	8000490 <__aeabi_l2d>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4628      	mov	r0, r5
 800822a:	4639      	mov	r1, r7
 800822c:	f7f7 ffa6 	bl	800017c <__aeabi_dsub>
 8008230:	460b      	mov	r3, r1
 8008232:	4602      	mov	r2, r0
 8008234:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008238:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008242:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008246:	d06c      	beq.n	8008322 <_strtod_l+0xbaa>
 8008248:	a309      	add	r3, pc, #36	; (adr r3, 8008270 <_strtod_l+0xaf8>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 fbbf 	bl	80009d0 <__aeabi_dcmplt>
 8008252:	2800      	cmp	r0, #0
 8008254:	f47f acd8 	bne.w	8007c08 <_strtod_l+0x490>
 8008258:	a307      	add	r3, pc, #28	; (adr r3, 8008278 <_strtod_l+0xb00>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008262:	f7f8 fbd3 	bl	8000a0c <__aeabi_dcmpgt>
 8008266:	2800      	cmp	r0, #0
 8008268:	d08c      	beq.n	8008184 <_strtod_l+0xa0c>
 800826a:	e4cd      	b.n	8007c08 <_strtod_l+0x490>
 800826c:	f3af 8000 	nop.w
 8008270:	94a03595 	.word	0x94a03595
 8008274:	3fdfffff 	.word	0x3fdfffff
 8008278:	35afe535 	.word	0x35afe535
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	000fffff 	.word	0x000fffff
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	7fefffff 	.word	0x7fefffff
 800828c:	3ff00000 	.word	0x3ff00000
 8008290:	3fe00000 	.word	0x3fe00000
 8008294:	7fe00000 	.word	0x7fe00000
 8008298:	7c9fffff 	.word	0x7c9fffff
 800829c:	bff00000 	.word	0xbff00000
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	b333      	cbz	r3, 80082f2 <_strtod_l+0xb7a>
 80082a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082aa:	d822      	bhi.n	80082f2 <_strtod_l+0xb7a>
 80082ac:	a328      	add	r3, pc, #160	; (adr r3, 8008350 <_strtod_l+0xbd8>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	4628      	mov	r0, r5
 80082b4:	4639      	mov	r1, r7
 80082b6:	f7f8 fb95 	bl	80009e4 <__aeabi_dcmple>
 80082ba:	b1a0      	cbz	r0, 80082e6 <_strtod_l+0xb6e>
 80082bc:	4639      	mov	r1, r7
 80082be:	4628      	mov	r0, r5
 80082c0:	f7f8 fbec 	bl	8000a9c <__aeabi_d2uiz>
 80082c4:	2801      	cmp	r0, #1
 80082c6:	bf38      	it	cc
 80082c8:	2001      	movcc	r0, #1
 80082ca:	f7f8 f895 	bl	80003f8 <__aeabi_ui2d>
 80082ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d0:	4605      	mov	r5, r0
 80082d2:	460f      	mov	r7, r1
 80082d4:	bb03      	cbnz	r3, 8008318 <_strtod_l+0xba0>
 80082d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082da:	9014      	str	r0, [sp, #80]	; 0x50
 80082dc:	9315      	str	r3, [sp, #84]	; 0x54
 80082de:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80082e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082ea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	9311      	str	r3, [sp, #68]	; 0x44
 80082f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082f6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80082fa:	f002 ff35 	bl	800b168 <__ulp>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4640      	mov	r0, r8
 8008304:	4649      	mov	r1, r9
 8008306:	f7f8 f8f1 	bl	80004ec <__aeabi_dmul>
 800830a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800830c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800830e:	f7f7 ff37 	bl	8000180 <__adddf3>
 8008312:	4680      	mov	r8, r0
 8008314:	4689      	mov	r9, r1
 8008316:	e774      	b.n	8008202 <_strtod_l+0xa8a>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008320:	e7dd      	b.n	80082de <_strtod_l+0xb66>
 8008322:	a30d      	add	r3, pc, #52	; (adr r3, 8008358 <_strtod_l+0xbe0>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f8 fb52 	bl	80009d0 <__aeabi_dcmplt>
 800832c:	e79b      	b.n	8008266 <_strtod_l+0xaee>
 800832e:	2300      	movs	r3, #0
 8008330:	930e      	str	r3, [sp, #56]	; 0x38
 8008332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008334:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f7ff ba5b 	b.w	80077f2 <_strtod_l+0x7a>
 800833c:	2a65      	cmp	r2, #101	; 0x65
 800833e:	f43f ab52 	beq.w	80079e6 <_strtod_l+0x26e>
 8008342:	2a45      	cmp	r2, #69	; 0x45
 8008344:	f43f ab4f 	beq.w	80079e6 <_strtod_l+0x26e>
 8008348:	2301      	movs	r3, #1
 800834a:	f7ff bb87 	b.w	8007a5c <_strtod_l+0x2e4>
 800834e:	bf00      	nop
 8008350:	ffc00000 	.word	0xffc00000
 8008354:	41dfffff 	.word	0x41dfffff
 8008358:	94a03595 	.word	0x94a03595
 800835c:	3fcfffff 	.word	0x3fcfffff

08008360 <strtod>:
 8008360:	460a      	mov	r2, r1
 8008362:	4601      	mov	r1, r0
 8008364:	4802      	ldr	r0, [pc, #8]	; (8008370 <strtod+0x10>)
 8008366:	4b03      	ldr	r3, [pc, #12]	; (8008374 <strtod+0x14>)
 8008368:	6800      	ldr	r0, [r0, #0]
 800836a:	f7ff ba05 	b.w	8007778 <_strtod_l>
 800836e:	bf00      	nop
 8008370:	20000208 	.word	0x20000208
 8008374:	20000050 	.word	0x20000050

08008378 <strtof>:
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	4f24      	ldr	r7, [pc, #144]	; (8008410 <strtof+0x98>)
 800837e:	460a      	mov	r2, r1
 8008380:	4b24      	ldr	r3, [pc, #144]	; (8008414 <strtof+0x9c>)
 8008382:	4601      	mov	r1, r0
 8008384:	6838      	ldr	r0, [r7, #0]
 8008386:	f7ff f9f7 	bl	8007778 <_strtod_l>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4606      	mov	r6, r0
 8008390:	460c      	mov	r4, r1
 8008392:	f7f8 fb45 	bl	8000a20 <__aeabi_dcmpun>
 8008396:	b168      	cbz	r0, 80083b4 <strtof+0x3c>
 8008398:	2c00      	cmp	r4, #0
 800839a:	481f      	ldr	r0, [pc, #124]	; (8008418 <strtof+0xa0>)
 800839c:	da06      	bge.n	80083ac <strtof+0x34>
 800839e:	f001 f931 	bl	8009604 <nanf>
 80083a2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80083a6:	4628      	mov	r0, r5
 80083a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b0:	f001 b928 	b.w	8009604 <nanf>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7f8 fb90 	bl	8000adc <__aeabi_d2f>
 80083bc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80083c0:	4605      	mov	r5, r0
 80083c2:	4916      	ldr	r1, [pc, #88]	; (800841c <strtof+0xa4>)
 80083c4:	4640      	mov	r0, r8
 80083c6:	f7f8 fead 	bl	8001124 <__aeabi_fcmpun>
 80083ca:	b9b0      	cbnz	r0, 80083fa <strtof+0x82>
 80083cc:	4640      	mov	r0, r8
 80083ce:	4913      	ldr	r1, [pc, #76]	; (800841c <strtof+0xa4>)
 80083d0:	f7f8 fe8a 	bl	80010e8 <__aeabi_fcmple>
 80083d4:	b988      	cbnz	r0, 80083fa <strtof+0x82>
 80083d6:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	4630      	mov	r0, r6
 80083e0:	4641      	mov	r1, r8
 80083e2:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <strtof+0xa8>)
 80083e4:	f7f8 fb1c 	bl	8000a20 <__aeabi_dcmpun>
 80083e8:	b970      	cbnz	r0, 8008408 <strtof+0x90>
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295
 80083ee:	4630      	mov	r0, r6
 80083f0:	4641      	mov	r1, r8
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <strtof+0xa8>)
 80083f4:	f7f8 faf6 	bl	80009e4 <__aeabi_dcmple>
 80083f8:	b930      	cbnz	r0, 8008408 <strtof+0x90>
 80083fa:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80083fe:	d1d2      	bne.n	80083a6 <strtof+0x2e>
 8008400:	4b08      	ldr	r3, [pc, #32]	; (8008424 <strtof+0xac>)
 8008402:	4023      	ands	r3, r4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0ce      	beq.n	80083a6 <strtof+0x2e>
 8008408:	2222      	movs	r2, #34	; 0x22
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e7ca      	b.n	80083a6 <strtof+0x2e>
 8008410:	20000208 	.word	0x20000208
 8008414:	20000050 	.word	0x20000050
 8008418:	0800bed9 	.word	0x0800bed9
 800841c:	7f7fffff 	.word	0x7f7fffff
 8008420:	7fefffff 	.word	0x7fefffff
 8008424:	7ff00000 	.word	0x7ff00000

08008428 <_strtol_l.constprop.0>:
 8008428:	2b01      	cmp	r3, #1
 800842a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842e:	4686      	mov	lr, r0
 8008430:	4690      	mov	r8, r2
 8008432:	d001      	beq.n	8008438 <_strtol_l.constprop.0+0x10>
 8008434:	2b24      	cmp	r3, #36	; 0x24
 8008436:	d906      	bls.n	8008446 <_strtol_l.constprop.0+0x1e>
 8008438:	f001 f88c 	bl	8009554 <__errno>
 800843c:	2316      	movs	r3, #22
 800843e:	6003      	str	r3, [r0, #0]
 8008440:	2000      	movs	r0, #0
 8008442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008446:	460d      	mov	r5, r1
 8008448:	4835      	ldr	r0, [pc, #212]	; (8008520 <_strtol_l.constprop.0+0xf8>)
 800844a:	462a      	mov	r2, r5
 800844c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008450:	5d06      	ldrb	r6, [r0, r4]
 8008452:	f016 0608 	ands.w	r6, r6, #8
 8008456:	d1f8      	bne.n	800844a <_strtol_l.constprop.0+0x22>
 8008458:	2c2d      	cmp	r4, #45	; 0x2d
 800845a:	d12e      	bne.n	80084ba <_strtol_l.constprop.0+0x92>
 800845c:	2601      	movs	r6, #1
 800845e:	782c      	ldrb	r4, [r5, #0]
 8008460:	1c95      	adds	r5, r2, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d057      	beq.n	8008516 <_strtol_l.constprop.0+0xee>
 8008466:	2b10      	cmp	r3, #16
 8008468:	d109      	bne.n	800847e <_strtol_l.constprop.0+0x56>
 800846a:	2c30      	cmp	r4, #48	; 0x30
 800846c:	d107      	bne.n	800847e <_strtol_l.constprop.0+0x56>
 800846e:	782a      	ldrb	r2, [r5, #0]
 8008470:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008474:	2a58      	cmp	r2, #88	; 0x58
 8008476:	d149      	bne.n	800850c <_strtol_l.constprop.0+0xe4>
 8008478:	2310      	movs	r3, #16
 800847a:	786c      	ldrb	r4, [r5, #1]
 800847c:	3502      	adds	r5, #2
 800847e:	2200      	movs	r2, #0
 8008480:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008484:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008488:	fbbc f9f3 	udiv	r9, ip, r3
 800848c:	4610      	mov	r0, r2
 800848e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008492:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008496:	2f09      	cmp	r7, #9
 8008498:	d814      	bhi.n	80084c4 <_strtol_l.constprop.0+0x9c>
 800849a:	463c      	mov	r4, r7
 800849c:	42a3      	cmp	r3, r4
 800849e:	dd20      	ble.n	80084e2 <_strtol_l.constprop.0+0xba>
 80084a0:	1c57      	adds	r7, r2, #1
 80084a2:	d007      	beq.n	80084b4 <_strtol_l.constprop.0+0x8c>
 80084a4:	4581      	cmp	r9, r0
 80084a6:	d319      	bcc.n	80084dc <_strtol_l.constprop.0+0xb4>
 80084a8:	d101      	bne.n	80084ae <_strtol_l.constprop.0+0x86>
 80084aa:	45a2      	cmp	sl, r4
 80084ac:	db16      	blt.n	80084dc <_strtol_l.constprop.0+0xb4>
 80084ae:	2201      	movs	r2, #1
 80084b0:	fb00 4003 	mla	r0, r0, r3, r4
 80084b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084b8:	e7eb      	b.n	8008492 <_strtol_l.constprop.0+0x6a>
 80084ba:	2c2b      	cmp	r4, #43	; 0x2b
 80084bc:	bf04      	itt	eq
 80084be:	782c      	ldrbeq	r4, [r5, #0]
 80084c0:	1c95      	addeq	r5, r2, #2
 80084c2:	e7ce      	b.n	8008462 <_strtol_l.constprop.0+0x3a>
 80084c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80084c8:	2f19      	cmp	r7, #25
 80084ca:	d801      	bhi.n	80084d0 <_strtol_l.constprop.0+0xa8>
 80084cc:	3c37      	subs	r4, #55	; 0x37
 80084ce:	e7e5      	b.n	800849c <_strtol_l.constprop.0+0x74>
 80084d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80084d4:	2f19      	cmp	r7, #25
 80084d6:	d804      	bhi.n	80084e2 <_strtol_l.constprop.0+0xba>
 80084d8:	3c57      	subs	r4, #87	; 0x57
 80084da:	e7df      	b.n	800849c <_strtol_l.constprop.0+0x74>
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	e7e8      	b.n	80084b4 <_strtol_l.constprop.0+0x8c>
 80084e2:	1c53      	adds	r3, r2, #1
 80084e4:	d108      	bne.n	80084f8 <_strtol_l.constprop.0+0xd0>
 80084e6:	2322      	movs	r3, #34	; 0x22
 80084e8:	4660      	mov	r0, ip
 80084ea:	f8ce 3000 	str.w	r3, [lr]
 80084ee:	f1b8 0f00 	cmp.w	r8, #0
 80084f2:	d0a6      	beq.n	8008442 <_strtol_l.constprop.0+0x1a>
 80084f4:	1e69      	subs	r1, r5, #1
 80084f6:	e006      	b.n	8008506 <_strtol_l.constprop.0+0xde>
 80084f8:	b106      	cbz	r6, 80084fc <_strtol_l.constprop.0+0xd4>
 80084fa:	4240      	negs	r0, r0
 80084fc:	f1b8 0f00 	cmp.w	r8, #0
 8008500:	d09f      	beq.n	8008442 <_strtol_l.constprop.0+0x1a>
 8008502:	2a00      	cmp	r2, #0
 8008504:	d1f6      	bne.n	80084f4 <_strtol_l.constprop.0+0xcc>
 8008506:	f8c8 1000 	str.w	r1, [r8]
 800850a:	e79a      	b.n	8008442 <_strtol_l.constprop.0+0x1a>
 800850c:	2430      	movs	r4, #48	; 0x30
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1b5      	bne.n	800847e <_strtol_l.constprop.0+0x56>
 8008512:	2308      	movs	r3, #8
 8008514:	e7b3      	b.n	800847e <_strtol_l.constprop.0+0x56>
 8008516:	2c30      	cmp	r4, #48	; 0x30
 8008518:	d0a9      	beq.n	800846e <_strtol_l.constprop.0+0x46>
 800851a:	230a      	movs	r3, #10
 800851c:	e7af      	b.n	800847e <_strtol_l.constprop.0+0x56>
 800851e:	bf00      	nop
 8008520:	0800bcf1 	.word	0x0800bcf1

08008524 <strtol>:
 8008524:	4613      	mov	r3, r2
 8008526:	460a      	mov	r2, r1
 8008528:	4601      	mov	r1, r0
 800852a:	4802      	ldr	r0, [pc, #8]	; (8008534 <strtol+0x10>)
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f7ff bf7b 	b.w	8008428 <_strtol_l.constprop.0>
 8008532:	bf00      	nop
 8008534:	20000208 	.word	0x20000208

08008538 <__cvt>:
 8008538:	2b00      	cmp	r3, #0
 800853a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853e:	461f      	mov	r7, r3
 8008540:	bfbb      	ittet	lt
 8008542:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008546:	461f      	movlt	r7, r3
 8008548:	2300      	movge	r3, #0
 800854a:	232d      	movlt	r3, #45	; 0x2d
 800854c:	b088      	sub	sp, #32
 800854e:	4614      	mov	r4, r2
 8008550:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008552:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008554:	7013      	strb	r3, [r2, #0]
 8008556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008558:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800855c:	f023 0820 	bic.w	r8, r3, #32
 8008560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008564:	d005      	beq.n	8008572 <__cvt+0x3a>
 8008566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800856a:	d100      	bne.n	800856e <__cvt+0x36>
 800856c:	3501      	adds	r5, #1
 800856e:	2302      	movs	r3, #2
 8008570:	e000      	b.n	8008574 <__cvt+0x3c>
 8008572:	2303      	movs	r3, #3
 8008574:	aa07      	add	r2, sp, #28
 8008576:	9204      	str	r2, [sp, #16]
 8008578:	aa06      	add	r2, sp, #24
 800857a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800857e:	e9cd 3500 	strd	r3, r5, [sp]
 8008582:	4622      	mov	r2, r4
 8008584:	463b      	mov	r3, r7
 8008586:	f001 f8eb 	bl	8009760 <_dtoa_r>
 800858a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800858e:	4606      	mov	r6, r0
 8008590:	d102      	bne.n	8008598 <__cvt+0x60>
 8008592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008594:	07db      	lsls	r3, r3, #31
 8008596:	d522      	bpl.n	80085de <__cvt+0xa6>
 8008598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800859c:	eb06 0905 	add.w	r9, r6, r5
 80085a0:	d110      	bne.n	80085c4 <__cvt+0x8c>
 80085a2:	7833      	ldrb	r3, [r6, #0]
 80085a4:	2b30      	cmp	r3, #48	; 0x30
 80085a6:	d10a      	bne.n	80085be <__cvt+0x86>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4620      	mov	r0, r4
 80085ae:	4639      	mov	r1, r7
 80085b0:	f7f8 fa04 	bl	80009bc <__aeabi_dcmpeq>
 80085b4:	b918      	cbnz	r0, 80085be <__cvt+0x86>
 80085b6:	f1c5 0501 	rsb	r5, r5, #1
 80085ba:	f8ca 5000 	str.w	r5, [sl]
 80085be:	f8da 3000 	ldr.w	r3, [sl]
 80085c2:	4499      	add	r9, r3
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	4620      	mov	r0, r4
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 f9f6 	bl	80009bc <__aeabi_dcmpeq>
 80085d0:	b108      	cbz	r0, 80085d6 <__cvt+0x9e>
 80085d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80085d6:	2230      	movs	r2, #48	; 0x30
 80085d8:	9b07      	ldr	r3, [sp, #28]
 80085da:	454b      	cmp	r3, r9
 80085dc:	d307      	bcc.n	80085ee <__cvt+0xb6>
 80085de:	4630      	mov	r0, r6
 80085e0:	9b07      	ldr	r3, [sp, #28]
 80085e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085e4:	1b9b      	subs	r3, r3, r6
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	b008      	add	sp, #32
 80085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ee:	1c59      	adds	r1, r3, #1
 80085f0:	9107      	str	r1, [sp, #28]
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	e7f0      	b.n	80085d8 <__cvt+0xa0>

080085f6 <__exponent>:
 80085f6:	4603      	mov	r3, r0
 80085f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085fa:	2900      	cmp	r1, #0
 80085fc:	f803 2b02 	strb.w	r2, [r3], #2
 8008600:	bfb6      	itet	lt
 8008602:	222d      	movlt	r2, #45	; 0x2d
 8008604:	222b      	movge	r2, #43	; 0x2b
 8008606:	4249      	neglt	r1, r1
 8008608:	2909      	cmp	r1, #9
 800860a:	7042      	strb	r2, [r0, #1]
 800860c:	dd2a      	ble.n	8008664 <__exponent+0x6e>
 800860e:	f10d 0207 	add.w	r2, sp, #7
 8008612:	4617      	mov	r7, r2
 8008614:	260a      	movs	r6, #10
 8008616:	fb91 f5f6 	sdiv	r5, r1, r6
 800861a:	4694      	mov	ip, r2
 800861c:	fb06 1415 	mls	r4, r6, r5, r1
 8008620:	3430      	adds	r4, #48	; 0x30
 8008622:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008626:	460c      	mov	r4, r1
 8008628:	2c63      	cmp	r4, #99	; 0x63
 800862a:	4629      	mov	r1, r5
 800862c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008630:	dcf1      	bgt.n	8008616 <__exponent+0x20>
 8008632:	3130      	adds	r1, #48	; 0x30
 8008634:	f1ac 0402 	sub.w	r4, ip, #2
 8008638:	f802 1c01 	strb.w	r1, [r2, #-1]
 800863c:	4622      	mov	r2, r4
 800863e:	1c41      	adds	r1, r0, #1
 8008640:	42ba      	cmp	r2, r7
 8008642:	d30a      	bcc.n	800865a <__exponent+0x64>
 8008644:	f10d 0209 	add.w	r2, sp, #9
 8008648:	eba2 020c 	sub.w	r2, r2, ip
 800864c:	42bc      	cmp	r4, r7
 800864e:	bf88      	it	hi
 8008650:	2200      	movhi	r2, #0
 8008652:	4413      	add	r3, r2
 8008654:	1a18      	subs	r0, r3, r0
 8008656:	b003      	add	sp, #12
 8008658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800865e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008662:	e7ed      	b.n	8008640 <__exponent+0x4a>
 8008664:	2330      	movs	r3, #48	; 0x30
 8008666:	3130      	adds	r1, #48	; 0x30
 8008668:	7083      	strb	r3, [r0, #2]
 800866a:	70c1      	strb	r1, [r0, #3]
 800866c:	1d03      	adds	r3, r0, #4
 800866e:	e7f1      	b.n	8008654 <__exponent+0x5e>

08008670 <_printf_float>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	b091      	sub	sp, #68	; 0x44
 8008676:	460c      	mov	r4, r1
 8008678:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800867c:	4616      	mov	r6, r2
 800867e:	461f      	mov	r7, r3
 8008680:	4605      	mov	r5, r0
 8008682:	f000 ff0d 	bl	80094a0 <_localeconv_r>
 8008686:	6803      	ldr	r3, [r0, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	9309      	str	r3, [sp, #36]	; 0x24
 800868c:	f7f7 fd6a 	bl	8000164 <strlen>
 8008690:	2300      	movs	r3, #0
 8008692:	930e      	str	r3, [sp, #56]	; 0x38
 8008694:	f8d8 3000 	ldr.w	r3, [r8]
 8008698:	900a      	str	r0, [sp, #40]	; 0x28
 800869a:	3307      	adds	r3, #7
 800869c:	f023 0307 	bic.w	r3, r3, #7
 80086a0:	f103 0208 	add.w	r2, r3, #8
 80086a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80086a8:	f8d4 b000 	ldr.w	fp, [r4]
 80086ac:	f8c8 2000 	str.w	r2, [r8]
 80086b0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80086b4:	4652      	mov	r2, sl
 80086b6:	4643      	mov	r3, r8
 80086b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086bc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80086c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	4650      	mov	r0, sl
 80086c8:	4b9c      	ldr	r3, [pc, #624]	; (800893c <_printf_float+0x2cc>)
 80086ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086cc:	f7f8 f9a8 	bl	8000a20 <__aeabi_dcmpun>
 80086d0:	bb70      	cbnz	r0, 8008730 <_printf_float+0xc0>
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295
 80086d6:	4650      	mov	r0, sl
 80086d8:	4b98      	ldr	r3, [pc, #608]	; (800893c <_printf_float+0x2cc>)
 80086da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086dc:	f7f8 f982 	bl	80009e4 <__aeabi_dcmple>
 80086e0:	bb30      	cbnz	r0, 8008730 <_printf_float+0xc0>
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	4650      	mov	r0, sl
 80086e8:	4641      	mov	r1, r8
 80086ea:	f7f8 f971 	bl	80009d0 <__aeabi_dcmplt>
 80086ee:	b110      	cbz	r0, 80086f6 <_printf_float+0x86>
 80086f0:	232d      	movs	r3, #45	; 0x2d
 80086f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f6:	4a92      	ldr	r2, [pc, #584]	; (8008940 <_printf_float+0x2d0>)
 80086f8:	4b92      	ldr	r3, [pc, #584]	; (8008944 <_printf_float+0x2d4>)
 80086fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086fe:	bf94      	ite	ls
 8008700:	4690      	movls	r8, r2
 8008702:	4698      	movhi	r8, r3
 8008704:	2303      	movs	r3, #3
 8008706:	f04f 0a00 	mov.w	sl, #0
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	f02b 0304 	bic.w	r3, fp, #4
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	4633      	mov	r3, r6
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	9700      	str	r7, [sp, #0]
 800871a:	aa0f      	add	r2, sp, #60	; 0x3c
 800871c:	f000 f9d6 	bl	8008acc <_printf_common>
 8008720:	3001      	adds	r0, #1
 8008722:	f040 8090 	bne.w	8008846 <_printf_float+0x1d6>
 8008726:	f04f 30ff 	mov.w	r0, #4294967295
 800872a:	b011      	add	sp, #68	; 0x44
 800872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	4652      	mov	r2, sl
 8008732:	4643      	mov	r3, r8
 8008734:	4650      	mov	r0, sl
 8008736:	4641      	mov	r1, r8
 8008738:	f7f8 f972 	bl	8000a20 <__aeabi_dcmpun>
 800873c:	b148      	cbz	r0, 8008752 <_printf_float+0xe2>
 800873e:	f1b8 0f00 	cmp.w	r8, #0
 8008742:	bfb8      	it	lt
 8008744:	232d      	movlt	r3, #45	; 0x2d
 8008746:	4a80      	ldr	r2, [pc, #512]	; (8008948 <_printf_float+0x2d8>)
 8008748:	bfb8      	it	lt
 800874a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800874e:	4b7f      	ldr	r3, [pc, #508]	; (800894c <_printf_float+0x2dc>)
 8008750:	e7d3      	b.n	80086fa <_printf_float+0x8a>
 8008752:	6863      	ldr	r3, [r4, #4]
 8008754:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	d142      	bne.n	80087e2 <_printf_float+0x172>
 800875c:	2306      	movs	r3, #6
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	9206      	str	r2, [sp, #24]
 8008764:	aa0e      	add	r2, sp, #56	; 0x38
 8008766:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800876a:	aa0d      	add	r2, sp, #52	; 0x34
 800876c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008770:	9203      	str	r2, [sp, #12]
 8008772:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008776:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	4652      	mov	r2, sl
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4628      	mov	r0, r5
 8008784:	4643      	mov	r3, r8
 8008786:	910b      	str	r1, [sp, #44]	; 0x2c
 8008788:	f7ff fed6 	bl	8008538 <__cvt>
 800878c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800878e:	4680      	mov	r8, r0
 8008790:	2947      	cmp	r1, #71	; 0x47
 8008792:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008794:	d108      	bne.n	80087a8 <_printf_float+0x138>
 8008796:	1cc8      	adds	r0, r1, #3
 8008798:	db02      	blt.n	80087a0 <_printf_float+0x130>
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	4299      	cmp	r1, r3
 800879e:	dd40      	ble.n	8008822 <_printf_float+0x1b2>
 80087a0:	f1a9 0902 	sub.w	r9, r9, #2
 80087a4:	fa5f f989 	uxtb.w	r9, r9
 80087a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087ac:	d81f      	bhi.n	80087ee <_printf_float+0x17e>
 80087ae:	464a      	mov	r2, r9
 80087b0:	3901      	subs	r1, #1
 80087b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087b6:	910d      	str	r1, [sp, #52]	; 0x34
 80087b8:	f7ff ff1d 	bl	80085f6 <__exponent>
 80087bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087be:	4682      	mov	sl, r0
 80087c0:	1813      	adds	r3, r2, r0
 80087c2:	2a01      	cmp	r2, #1
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	dc02      	bgt.n	80087ce <_printf_float+0x15e>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d2      	lsls	r2, r2, #31
 80087cc:	d501      	bpl.n	80087d2 <_printf_float+0x162>
 80087ce:	3301      	adds	r3, #1
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d09b      	beq.n	8008712 <_printf_float+0xa2>
 80087da:	232d      	movs	r3, #45	; 0x2d
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e0:	e797      	b.n	8008712 <_printf_float+0xa2>
 80087e2:	2947      	cmp	r1, #71	; 0x47
 80087e4:	d1bc      	bne.n	8008760 <_printf_float+0xf0>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1ba      	bne.n	8008760 <_printf_float+0xf0>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e7b7      	b.n	800875e <_printf_float+0xee>
 80087ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80087f2:	d118      	bne.n	8008826 <_printf_float+0x1b6>
 80087f4:	2900      	cmp	r1, #0
 80087f6:	6863      	ldr	r3, [r4, #4]
 80087f8:	dd0b      	ble.n	8008812 <_printf_float+0x1a2>
 80087fa:	6121      	str	r1, [r4, #16]
 80087fc:	b913      	cbnz	r3, 8008804 <_printf_float+0x194>
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	07d0      	lsls	r0, r2, #31
 8008802:	d502      	bpl.n	800880a <_printf_float+0x19a>
 8008804:	3301      	adds	r3, #1
 8008806:	440b      	add	r3, r1
 8008808:	6123      	str	r3, [r4, #16]
 800880a:	f04f 0a00 	mov.w	sl, #0
 800880e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008810:	e7df      	b.n	80087d2 <_printf_float+0x162>
 8008812:	b913      	cbnz	r3, 800881a <_printf_float+0x1aa>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	07d2      	lsls	r2, r2, #31
 8008818:	d501      	bpl.n	800881e <_printf_float+0x1ae>
 800881a:	3302      	adds	r3, #2
 800881c:	e7f4      	b.n	8008808 <_printf_float+0x198>
 800881e:	2301      	movs	r3, #1
 8008820:	e7f2      	b.n	8008808 <_printf_float+0x198>
 8008822:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008828:	4299      	cmp	r1, r3
 800882a:	db05      	blt.n	8008838 <_printf_float+0x1c8>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	6121      	str	r1, [r4, #16]
 8008830:	07d8      	lsls	r0, r3, #31
 8008832:	d5ea      	bpl.n	800880a <_printf_float+0x19a>
 8008834:	1c4b      	adds	r3, r1, #1
 8008836:	e7e7      	b.n	8008808 <_printf_float+0x198>
 8008838:	2900      	cmp	r1, #0
 800883a:	bfcc      	ite	gt
 800883c:	2201      	movgt	r2, #1
 800883e:	f1c1 0202 	rsble	r2, r1, #2
 8008842:	4413      	add	r3, r2
 8008844:	e7e0      	b.n	8008808 <_printf_float+0x198>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	055a      	lsls	r2, r3, #21
 800884a:	d407      	bmi.n	800885c <_printf_float+0x1ec>
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	4642      	mov	r2, r8
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	d12b      	bne.n	80088b2 <_printf_float+0x242>
 800885a:	e764      	b.n	8008726 <_printf_float+0xb6>
 800885c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008860:	f240 80dd 	bls.w	8008a1e <_printf_float+0x3ae>
 8008864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008868:	2200      	movs	r2, #0
 800886a:	2300      	movs	r3, #0
 800886c:	f7f8 f8a6 	bl	80009bc <__aeabi_dcmpeq>
 8008870:	2800      	cmp	r0, #0
 8008872:	d033      	beq.n	80088dc <_printf_float+0x26c>
 8008874:	2301      	movs	r3, #1
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	4a35      	ldr	r2, [pc, #212]	; (8008950 <_printf_float+0x2e0>)
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f af51 	beq.w	8008726 <_printf_float+0xb6>
 8008884:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008888:	429a      	cmp	r2, r3
 800888a:	db02      	blt.n	8008892 <_printf_float+0x222>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	07d8      	lsls	r0, r3, #31
 8008890:	d50f      	bpl.n	80088b2 <_printf_float+0x242>
 8008892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f af42 	beq.w	8008726 <_printf_float+0xb6>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	f104 091a 	add.w	r9, r4, #26
 80088aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4543      	cmp	r3, r8
 80088b0:	dc09      	bgt.n	80088c6 <_printf_float+0x256>
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	079b      	lsls	r3, r3, #30
 80088b6:	f100 8104 	bmi.w	8008ac2 <_printf_float+0x452>
 80088ba:	68e0      	ldr	r0, [r4, #12]
 80088bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088be:	4298      	cmp	r0, r3
 80088c0:	bfb8      	it	lt
 80088c2:	4618      	movlt	r0, r3
 80088c4:	e731      	b.n	800872a <_printf_float+0xba>
 80088c6:	2301      	movs	r3, #1
 80088c8:	464a      	mov	r2, r9
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	f43f af28 	beq.w	8008726 <_printf_float+0xb6>
 80088d6:	f108 0801 	add.w	r8, r8, #1
 80088da:	e7e6      	b.n	80088aa <_printf_float+0x23a>
 80088dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dc38      	bgt.n	8008954 <_printf_float+0x2e4>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	4a19      	ldr	r2, [pc, #100]	; (8008950 <_printf_float+0x2e0>)
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	f43f af1a 	beq.w	8008726 <_printf_float+0xb6>
 80088f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80088f6:	4313      	orrs	r3, r2
 80088f8:	d102      	bne.n	8008900 <_printf_float+0x290>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	07d9      	lsls	r1, r3, #31
 80088fe:	d5d8      	bpl.n	80088b2 <_printf_float+0x242>
 8008900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008904:	4631      	mov	r1, r6
 8008906:	4628      	mov	r0, r5
 8008908:	47b8      	blx	r7
 800890a:	3001      	adds	r0, #1
 800890c:	f43f af0b 	beq.w	8008726 <_printf_float+0xb6>
 8008910:	f04f 0900 	mov.w	r9, #0
 8008914:	f104 0a1a 	add.w	sl, r4, #26
 8008918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800891a:	425b      	negs	r3, r3
 800891c:	454b      	cmp	r3, r9
 800891e:	dc01      	bgt.n	8008924 <_printf_float+0x2b4>
 8008920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008922:	e794      	b.n	800884e <_printf_float+0x1de>
 8008924:	2301      	movs	r3, #1
 8008926:	4652      	mov	r2, sl
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f aef9 	beq.w	8008726 <_printf_float+0xb6>
 8008934:	f109 0901 	add.w	r9, r9, #1
 8008938:	e7ee      	b.n	8008918 <_printf_float+0x2a8>
 800893a:	bf00      	nop
 800893c:	7fefffff 	.word	0x7fefffff
 8008940:	0800bdf1 	.word	0x0800bdf1
 8008944:	0800bdf5 	.word	0x0800bdf5
 8008948:	0800bdf9 	.word	0x0800bdf9
 800894c:	0800bdfd 	.word	0x0800bdfd
 8008950:	0800be01 	.word	0x0800be01
 8008954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008958:	429a      	cmp	r2, r3
 800895a:	bfa8      	it	ge
 800895c:	461a      	movge	r2, r3
 800895e:	2a00      	cmp	r2, #0
 8008960:	4691      	mov	r9, r2
 8008962:	dc37      	bgt.n	80089d4 <_printf_float+0x364>
 8008964:	f04f 0b00 	mov.w	fp, #0
 8008968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800896c:	f104 021a 	add.w	r2, r4, #26
 8008970:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008974:	ebaa 0309 	sub.w	r3, sl, r9
 8008978:	455b      	cmp	r3, fp
 800897a:	dc33      	bgt.n	80089e4 <_printf_float+0x374>
 800897c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008980:	429a      	cmp	r2, r3
 8008982:	db3b      	blt.n	80089fc <_printf_float+0x38c>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	07da      	lsls	r2, r3, #31
 8008988:	d438      	bmi.n	80089fc <_printf_float+0x38c>
 800898a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800898e:	eba2 0903 	sub.w	r9, r2, r3
 8008992:	eba2 020a 	sub.w	r2, r2, sl
 8008996:	4591      	cmp	r9, r2
 8008998:	bfa8      	it	ge
 800899a:	4691      	movge	r9, r2
 800899c:	f1b9 0f00 	cmp.w	r9, #0
 80089a0:	dc34      	bgt.n	8008a0c <_printf_float+0x39c>
 80089a2:	f04f 0800 	mov.w	r8, #0
 80089a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089aa:	f104 0a1a 	add.w	sl, r4, #26
 80089ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	eba3 0309 	sub.w	r3, r3, r9
 80089b8:	4543      	cmp	r3, r8
 80089ba:	f77f af7a 	ble.w	80088b2 <_printf_float+0x242>
 80089be:	2301      	movs	r3, #1
 80089c0:	4652      	mov	r2, sl
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	f43f aeac 	beq.w	8008726 <_printf_float+0xb6>
 80089ce:	f108 0801 	add.w	r8, r8, #1
 80089d2:	e7ec      	b.n	80089ae <_printf_float+0x33e>
 80089d4:	4613      	mov	r3, r2
 80089d6:	4631      	mov	r1, r6
 80089d8:	4642      	mov	r2, r8
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	d1c0      	bne.n	8008964 <_printf_float+0x2f4>
 80089e2:	e6a0      	b.n	8008726 <_printf_float+0xb6>
 80089e4:	2301      	movs	r3, #1
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f ae99 	beq.w	8008726 <_printf_float+0xb6>
 80089f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089f6:	f10b 0b01 	add.w	fp, fp, #1
 80089fa:	e7b9      	b.n	8008970 <_printf_float+0x300>
 80089fc:	4631      	mov	r1, r6
 80089fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	d1bf      	bne.n	800898a <_printf_float+0x31a>
 8008a0a:	e68c      	b.n	8008726 <_printf_float+0xb6>
 8008a0c:	464b      	mov	r3, r9
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	eb08 020a 	add.w	r2, r8, sl
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d1c2      	bne.n	80089a2 <_printf_float+0x332>
 8008a1c:	e683      	b.n	8008726 <_printf_float+0xb6>
 8008a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a20:	2a01      	cmp	r2, #1
 8008a22:	dc01      	bgt.n	8008a28 <_printf_float+0x3b8>
 8008a24:	07db      	lsls	r3, r3, #31
 8008a26:	d539      	bpl.n	8008a9c <_printf_float+0x42c>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f ae77 	beq.w	8008726 <_printf_float+0xb6>
 8008a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f ae6f 	beq.w	8008726 <_printf_float+0xb6>
 8008a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008a54:	f7f7 ffb2 	bl	80009bc <__aeabi_dcmpeq>
 8008a58:	b9d8      	cbnz	r0, 8008a92 <_printf_float+0x422>
 8008a5a:	f109 33ff 	add.w	r3, r9, #4294967295
 8008a5e:	f108 0201 	add.w	r2, r8, #1
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d10e      	bne.n	8008a8a <_printf_float+0x41a>
 8008a6c:	e65b      	b.n	8008726 <_printf_float+0xb6>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	464a      	mov	r2, r9
 8008a72:	4631      	mov	r1, r6
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f43f ae54 	beq.w	8008726 <_printf_float+0xb6>
 8008a7e:	f108 0801 	add.w	r8, r8, #1
 8008a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a84:	3b01      	subs	r3, #1
 8008a86:	4543      	cmp	r3, r8
 8008a88:	dcf1      	bgt.n	8008a6e <_printf_float+0x3fe>
 8008a8a:	4653      	mov	r3, sl
 8008a8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a90:	e6de      	b.n	8008850 <_printf_float+0x1e0>
 8008a92:	f04f 0800 	mov.w	r8, #0
 8008a96:	f104 091a 	add.w	r9, r4, #26
 8008a9a:	e7f2      	b.n	8008a82 <_printf_float+0x412>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4642      	mov	r2, r8
 8008aa0:	e7df      	b.n	8008a62 <_printf_float+0x3f2>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	464a      	mov	r2, r9
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f ae3a 	beq.w	8008726 <_printf_float+0xb6>
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	68e3      	ldr	r3, [r4, #12]
 8008ab8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008aba:	1a5b      	subs	r3, r3, r1
 8008abc:	4543      	cmp	r3, r8
 8008abe:	dcf0      	bgt.n	8008aa2 <_printf_float+0x432>
 8008ac0:	e6fb      	b.n	80088ba <_printf_float+0x24a>
 8008ac2:	f04f 0800 	mov.w	r8, #0
 8008ac6:	f104 0919 	add.w	r9, r4, #25
 8008aca:	e7f4      	b.n	8008ab6 <_printf_float+0x446>

08008acc <_printf_common>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	4699      	mov	r9, r3
 8008ad4:	688a      	ldr	r2, [r1, #8]
 8008ad6:	690b      	ldr	r3, [r1, #16]
 8008ad8:	4607      	mov	r7, r0
 8008ada:	4293      	cmp	r3, r2
 8008adc:	bfb8      	it	lt
 8008ade:	4613      	movlt	r3, r2
 8008ae0:	6033      	str	r3, [r6, #0]
 8008ae2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aec:	b10a      	cbz	r2, 8008af2 <_printf_common+0x26>
 8008aee:	3301      	adds	r3, #1
 8008af0:	6033      	str	r3, [r6, #0]
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	0699      	lsls	r1, r3, #26
 8008af6:	bf42      	ittt	mi
 8008af8:	6833      	ldrmi	r3, [r6, #0]
 8008afa:	3302      	addmi	r3, #2
 8008afc:	6033      	strmi	r3, [r6, #0]
 8008afe:	6825      	ldr	r5, [r4, #0]
 8008b00:	f015 0506 	ands.w	r5, r5, #6
 8008b04:	d106      	bne.n	8008b14 <_printf_common+0x48>
 8008b06:	f104 0a19 	add.w	sl, r4, #25
 8008b0a:	68e3      	ldr	r3, [r4, #12]
 8008b0c:	6832      	ldr	r2, [r6, #0]
 8008b0e:	1a9b      	subs	r3, r3, r2
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	dc2b      	bgt.n	8008b6c <_printf_common+0xa0>
 8008b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b18:	1e13      	subs	r3, r2, #0
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	bf18      	it	ne
 8008b1e:	2301      	movne	r3, #1
 8008b20:	0692      	lsls	r2, r2, #26
 8008b22:	d430      	bmi.n	8008b86 <_printf_common+0xba>
 8008b24:	4649      	mov	r1, r9
 8008b26:	4638      	mov	r0, r7
 8008b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b2c:	47c0      	blx	r8
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d023      	beq.n	8008b7a <_printf_common+0xae>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	6922      	ldr	r2, [r4, #16]
 8008b36:	f003 0306 	and.w	r3, r3, #6
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	bf14      	ite	ne
 8008b3e:	2500      	movne	r5, #0
 8008b40:	6833      	ldreq	r3, [r6, #0]
 8008b42:	f04f 0600 	mov.w	r6, #0
 8008b46:	bf08      	it	eq
 8008b48:	68e5      	ldreq	r5, [r4, #12]
 8008b4a:	f104 041a 	add.w	r4, r4, #26
 8008b4e:	bf08      	it	eq
 8008b50:	1aed      	subeq	r5, r5, r3
 8008b52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b56:	bf08      	it	eq
 8008b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	bfc4      	itt	gt
 8008b60:	1a9b      	subgt	r3, r3, r2
 8008b62:	18ed      	addgt	r5, r5, r3
 8008b64:	42b5      	cmp	r5, r6
 8008b66:	d11a      	bne.n	8008b9e <_printf_common+0xd2>
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e008      	b.n	8008b7e <_printf_common+0xb2>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d103      	bne.n	8008b82 <_printf_common+0xb6>
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	3501      	adds	r5, #1
 8008b84:	e7c1      	b.n	8008b0a <_printf_common+0x3e>
 8008b86:	2030      	movs	r0, #48	; 0x30
 8008b88:	18e1      	adds	r1, r4, r3
 8008b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b94:	4422      	add	r2, r4
 8008b96:	3302      	adds	r3, #2
 8008b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b9c:	e7c2      	b.n	8008b24 <_printf_common+0x58>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	47c0      	blx	r8
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d0e6      	beq.n	8008b7a <_printf_common+0xae>
 8008bac:	3601      	adds	r6, #1
 8008bae:	e7d9      	b.n	8008b64 <_printf_common+0x98>

08008bb0 <_printf_i>:
 8008bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	7e0f      	ldrb	r7, [r1, #24]
 8008bb6:	4691      	mov	r9, r2
 8008bb8:	2f78      	cmp	r7, #120	; 0x78
 8008bba:	4680      	mov	r8, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	469a      	mov	sl, r3
 8008bc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bc6:	d807      	bhi.n	8008bd8 <_printf_i+0x28>
 8008bc8:	2f62      	cmp	r7, #98	; 0x62
 8008bca:	d80a      	bhi.n	8008be2 <_printf_i+0x32>
 8008bcc:	2f00      	cmp	r7, #0
 8008bce:	f000 80d5 	beq.w	8008d7c <_printf_i+0x1cc>
 8008bd2:	2f58      	cmp	r7, #88	; 0x58
 8008bd4:	f000 80c1 	beq.w	8008d5a <_printf_i+0x1aa>
 8008bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008be0:	e03a      	b.n	8008c58 <_printf_i+0xa8>
 8008be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008be6:	2b15      	cmp	r3, #21
 8008be8:	d8f6      	bhi.n	8008bd8 <_printf_i+0x28>
 8008bea:	a101      	add	r1, pc, #4	; (adr r1, 8008bf0 <_printf_i+0x40>)
 8008bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bf0:	08008c49 	.word	0x08008c49
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	08008bd9 	.word	0x08008bd9
 8008bfc:	08008bd9 	.word	0x08008bd9
 8008c00:	08008bd9 	.word	0x08008bd9
 8008c04:	08008bd9 	.word	0x08008bd9
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008bd9 	.word	0x08008bd9
 8008c10:	08008bd9 	.word	0x08008bd9
 8008c14:	08008bd9 	.word	0x08008bd9
 8008c18:	08008bd9 	.word	0x08008bd9
 8008c1c:	08008d63 	.word	0x08008d63
 8008c20:	08008c89 	.word	0x08008c89
 8008c24:	08008d1d 	.word	0x08008d1d
 8008c28:	08008bd9 	.word	0x08008bd9
 8008c2c:	08008bd9 	.word	0x08008bd9
 8008c30:	08008d85 	.word	0x08008d85
 8008c34:	08008bd9 	.word	0x08008bd9
 8008c38:	08008c89 	.word	0x08008c89
 8008c3c:	08008bd9 	.word	0x08008bd9
 8008c40:	08008bd9 	.word	0x08008bd9
 8008c44:	08008d25 	.word	0x08008d25
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	1d1a      	adds	r2, r3, #4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	602a      	str	r2, [r5, #0]
 8008c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e0a0      	b.n	8008d9e <_printf_i+0x1ee>
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	0607      	lsls	r7, r0, #24
 8008c62:	f103 0104 	add.w	r1, r3, #4
 8008c66:	6029      	str	r1, [r5, #0]
 8008c68:	d501      	bpl.n	8008c6e <_printf_i+0xbe>
 8008c6a:	681e      	ldr	r6, [r3, #0]
 8008c6c:	e003      	b.n	8008c76 <_printf_i+0xc6>
 8008c6e:	0646      	lsls	r6, r0, #25
 8008c70:	d5fb      	bpl.n	8008c6a <_printf_i+0xba>
 8008c72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	da03      	bge.n	8008c82 <_printf_i+0xd2>
 8008c7a:	232d      	movs	r3, #45	; 0x2d
 8008c7c:	4276      	negs	r6, r6
 8008c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c82:	230a      	movs	r3, #10
 8008c84:	4859      	ldr	r0, [pc, #356]	; (8008dec <_printf_i+0x23c>)
 8008c86:	e012      	b.n	8008cae <_printf_i+0xfe>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	6820      	ldr	r0, [r4, #0]
 8008c8c:	1d19      	adds	r1, r3, #4
 8008c8e:	6029      	str	r1, [r5, #0]
 8008c90:	0605      	lsls	r5, r0, #24
 8008c92:	d501      	bpl.n	8008c98 <_printf_i+0xe8>
 8008c94:	681e      	ldr	r6, [r3, #0]
 8008c96:	e002      	b.n	8008c9e <_printf_i+0xee>
 8008c98:	0641      	lsls	r1, r0, #25
 8008c9a:	d5fb      	bpl.n	8008c94 <_printf_i+0xe4>
 8008c9c:	881e      	ldrh	r6, [r3, #0]
 8008c9e:	2f6f      	cmp	r7, #111	; 0x6f
 8008ca0:	bf0c      	ite	eq
 8008ca2:	2308      	moveq	r3, #8
 8008ca4:	230a      	movne	r3, #10
 8008ca6:	4851      	ldr	r0, [pc, #324]	; (8008dec <_printf_i+0x23c>)
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cae:	6865      	ldr	r5, [r4, #4]
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	bfa8      	it	ge
 8008cb4:	6821      	ldrge	r1, [r4, #0]
 8008cb6:	60a5      	str	r5, [r4, #8]
 8008cb8:	bfa4      	itt	ge
 8008cba:	f021 0104 	bicge.w	r1, r1, #4
 8008cbe:	6021      	strge	r1, [r4, #0]
 8008cc0:	b90e      	cbnz	r6, 8008cc6 <_printf_i+0x116>
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	d04b      	beq.n	8008d5e <_printf_i+0x1ae>
 8008cc6:	4615      	mov	r5, r2
 8008cc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ccc:	fb03 6711 	mls	r7, r3, r1, r6
 8008cd0:	5dc7      	ldrb	r7, [r0, r7]
 8008cd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cd6:	4637      	mov	r7, r6
 8008cd8:	42bb      	cmp	r3, r7
 8008cda:	460e      	mov	r6, r1
 8008cdc:	d9f4      	bls.n	8008cc8 <_printf_i+0x118>
 8008cde:	2b08      	cmp	r3, #8
 8008ce0:	d10b      	bne.n	8008cfa <_printf_i+0x14a>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	07de      	lsls	r6, r3, #31
 8008ce6:	d508      	bpl.n	8008cfa <_printf_i+0x14a>
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	6861      	ldr	r1, [r4, #4]
 8008cec:	4299      	cmp	r1, r3
 8008cee:	bfde      	ittt	le
 8008cf0:	2330      	movle	r3, #48	; 0x30
 8008cf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cfa:	1b52      	subs	r2, r2, r5
 8008cfc:	6122      	str	r2, [r4, #16]
 8008cfe:	464b      	mov	r3, r9
 8008d00:	4621      	mov	r1, r4
 8008d02:	4640      	mov	r0, r8
 8008d04:	f8cd a000 	str.w	sl, [sp]
 8008d08:	aa03      	add	r2, sp, #12
 8008d0a:	f7ff fedf 	bl	8008acc <_printf_common>
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d14a      	bne.n	8008da8 <_printf_i+0x1f8>
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295
 8008d16:	b004      	add	sp, #16
 8008d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	f043 0320 	orr.w	r3, r3, #32
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	2778      	movs	r7, #120	; 0x78
 8008d26:	4832      	ldr	r0, [pc, #200]	; (8008df0 <_printf_i+0x240>)
 8008d28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	6829      	ldr	r1, [r5, #0]
 8008d30:	061f      	lsls	r7, r3, #24
 8008d32:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d36:	d402      	bmi.n	8008d3e <_printf_i+0x18e>
 8008d38:	065f      	lsls	r7, r3, #25
 8008d3a:	bf48      	it	mi
 8008d3c:	b2b6      	uxthmi	r6, r6
 8008d3e:	07df      	lsls	r7, r3, #31
 8008d40:	bf48      	it	mi
 8008d42:	f043 0320 	orrmi.w	r3, r3, #32
 8008d46:	6029      	str	r1, [r5, #0]
 8008d48:	bf48      	it	mi
 8008d4a:	6023      	strmi	r3, [r4, #0]
 8008d4c:	b91e      	cbnz	r6, 8008d56 <_printf_i+0x1a6>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f023 0320 	bic.w	r3, r3, #32
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	2310      	movs	r3, #16
 8008d58:	e7a6      	b.n	8008ca8 <_printf_i+0xf8>
 8008d5a:	4824      	ldr	r0, [pc, #144]	; (8008dec <_printf_i+0x23c>)
 8008d5c:	e7e4      	b.n	8008d28 <_printf_i+0x178>
 8008d5e:	4615      	mov	r5, r2
 8008d60:	e7bd      	b.n	8008cde <_printf_i+0x12e>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	6826      	ldr	r6, [r4, #0]
 8008d66:	1d18      	adds	r0, r3, #4
 8008d68:	6961      	ldr	r1, [r4, #20]
 8008d6a:	6028      	str	r0, [r5, #0]
 8008d6c:	0635      	lsls	r5, r6, #24
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	d501      	bpl.n	8008d76 <_printf_i+0x1c6>
 8008d72:	6019      	str	r1, [r3, #0]
 8008d74:	e002      	b.n	8008d7c <_printf_i+0x1cc>
 8008d76:	0670      	lsls	r0, r6, #25
 8008d78:	d5fb      	bpl.n	8008d72 <_printf_i+0x1c2>
 8008d7a:	8019      	strh	r1, [r3, #0]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4615      	mov	r5, r2
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	e7bc      	b.n	8008cfe <_printf_i+0x14e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	2100      	movs	r1, #0
 8008d88:	1d1a      	adds	r2, r3, #4
 8008d8a:	602a      	str	r2, [r5, #0]
 8008d8c:	681d      	ldr	r5, [r3, #0]
 8008d8e:	6862      	ldr	r2, [r4, #4]
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 fc14 	bl	80095be <memchr>
 8008d96:	b108      	cbz	r0, 8008d9c <_printf_i+0x1ec>
 8008d98:	1b40      	subs	r0, r0, r5
 8008d9a:	6060      	str	r0, [r4, #4]
 8008d9c:	6863      	ldr	r3, [r4, #4]
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	2300      	movs	r3, #0
 8008da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da6:	e7aa      	b.n	8008cfe <_printf_i+0x14e>
 8008da8:	462a      	mov	r2, r5
 8008daa:	4649      	mov	r1, r9
 8008dac:	4640      	mov	r0, r8
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	47d0      	blx	sl
 8008db2:	3001      	adds	r0, #1
 8008db4:	d0ad      	beq.n	8008d12 <_printf_i+0x162>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	079b      	lsls	r3, r3, #30
 8008dba:	d413      	bmi.n	8008de4 <_printf_i+0x234>
 8008dbc:	68e0      	ldr	r0, [r4, #12]
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	4298      	cmp	r0, r3
 8008dc2:	bfb8      	it	lt
 8008dc4:	4618      	movlt	r0, r3
 8008dc6:	e7a6      	b.n	8008d16 <_printf_i+0x166>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4632      	mov	r2, r6
 8008dcc:	4649      	mov	r1, r9
 8008dce:	4640      	mov	r0, r8
 8008dd0:	47d0      	blx	sl
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d09d      	beq.n	8008d12 <_printf_i+0x162>
 8008dd6:	3501      	adds	r5, #1
 8008dd8:	68e3      	ldr	r3, [r4, #12]
 8008dda:	9903      	ldr	r1, [sp, #12]
 8008ddc:	1a5b      	subs	r3, r3, r1
 8008dde:	42ab      	cmp	r3, r5
 8008de0:	dcf2      	bgt.n	8008dc8 <_printf_i+0x218>
 8008de2:	e7eb      	b.n	8008dbc <_printf_i+0x20c>
 8008de4:	2500      	movs	r5, #0
 8008de6:	f104 0619 	add.w	r6, r4, #25
 8008dea:	e7f5      	b.n	8008dd8 <_printf_i+0x228>
 8008dec:	0800be03 	.word	0x0800be03
 8008df0:	0800be14 	.word	0x0800be14

08008df4 <std>:
 8008df4:	2300      	movs	r3, #0
 8008df6:	b510      	push	{r4, lr}
 8008df8:	4604      	mov	r4, r0
 8008dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8008dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e02:	6083      	str	r3, [r0, #8]
 8008e04:	8181      	strh	r1, [r0, #12]
 8008e06:	6643      	str	r3, [r0, #100]	; 0x64
 8008e08:	81c2      	strh	r2, [r0, #14]
 8008e0a:	6183      	str	r3, [r0, #24]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	2208      	movs	r2, #8
 8008e10:	305c      	adds	r0, #92	; 0x5c
 8008e12:	f000 faa5 	bl	8009360 <memset>
 8008e16:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <std+0x58>)
 8008e18:	6224      	str	r4, [r4, #32]
 8008e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <std+0x5c>)
 8008e1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <std+0x60>)
 8008e22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e24:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <std+0x64>)
 8008e26:	6323      	str	r3, [r4, #48]	; 0x30
 8008e28:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <std+0x68>)
 8008e2a:	429c      	cmp	r4, r3
 8008e2c:	d006      	beq.n	8008e3c <std+0x48>
 8008e2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008e32:	4294      	cmp	r4, r2
 8008e34:	d002      	beq.n	8008e3c <std+0x48>
 8008e36:	33d0      	adds	r3, #208	; 0xd0
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d105      	bne.n	8008e48 <std+0x54>
 8008e3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e44:	f000 bbb0 	b.w	80095a8 <__retarget_lock_init_recursive>
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	bf00      	nop
 8008e4c:	080091b1 	.word	0x080091b1
 8008e50:	080091d3 	.word	0x080091d3
 8008e54:	0800920b 	.word	0x0800920b
 8008e58:	0800922f 	.word	0x0800922f
 8008e5c:	2000263c 	.word	0x2000263c

08008e60 <stdio_exit_handler>:
 8008e60:	4a02      	ldr	r2, [pc, #8]	; (8008e6c <stdio_exit_handler+0xc>)
 8008e62:	4903      	ldr	r1, [pc, #12]	; (8008e70 <stdio_exit_handler+0x10>)
 8008e64:	4803      	ldr	r0, [pc, #12]	; (8008e74 <stdio_exit_handler+0x14>)
 8008e66:	f000 b869 	b.w	8008f3c <_fwalk_sglue>
 8008e6a:	bf00      	nop
 8008e6c:	20000044 	.word	0x20000044
 8008e70:	0800b769 	.word	0x0800b769
 8008e74:	200001bc 	.word	0x200001bc

08008e78 <cleanup_stdio>:
 8008e78:	6841      	ldr	r1, [r0, #4]
 8008e7a:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <cleanup_stdio+0x34>)
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	4604      	mov	r4, r0
 8008e82:	d001      	beq.n	8008e88 <cleanup_stdio+0x10>
 8008e84:	f002 fc70 	bl	800b768 <_fflush_r>
 8008e88:	68a1      	ldr	r1, [r4, #8]
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <cleanup_stdio+0x38>)
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	d002      	beq.n	8008e96 <cleanup_stdio+0x1e>
 8008e90:	4620      	mov	r0, r4
 8008e92:	f002 fc69 	bl	800b768 <_fflush_r>
 8008e96:	68e1      	ldr	r1, [r4, #12]
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <cleanup_stdio+0x3c>)
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	d004      	beq.n	8008ea8 <cleanup_stdio+0x30>
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea4:	f002 bc60 	b.w	800b768 <_fflush_r>
 8008ea8:	bd10      	pop	{r4, pc}
 8008eaa:	bf00      	nop
 8008eac:	2000263c 	.word	0x2000263c
 8008eb0:	200026a4 	.word	0x200026a4
 8008eb4:	2000270c 	.word	0x2000270c

08008eb8 <global_stdio_init.part.0>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <global_stdio_init.part.0+0x30>)
 8008ebc:	4c0b      	ldr	r4, [pc, #44]	; (8008eec <global_stdio_init.part.0+0x34>)
 8008ebe:	4a0c      	ldr	r2, [pc, #48]	; (8008ef0 <global_stdio_init.part.0+0x38>)
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f7ff ff94 	bl	8008df4 <std>
 8008ecc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	2109      	movs	r1, #9
 8008ed4:	f7ff ff8e 	bl	8008df4 <std>
 8008ed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008edc:	2202      	movs	r2, #2
 8008ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee2:	2112      	movs	r1, #18
 8008ee4:	f7ff bf86 	b.w	8008df4 <std>
 8008ee8:	20002774 	.word	0x20002774
 8008eec:	2000263c 	.word	0x2000263c
 8008ef0:	08008e61 	.word	0x08008e61

08008ef4 <__sfp_lock_acquire>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__sfp_lock_acquire+0x8>)
 8008ef6:	f000 bb58 	b.w	80095aa <__retarget_lock_acquire_recursive>
 8008efa:	bf00      	nop
 8008efc:	2000277d 	.word	0x2000277d

08008f00 <__sfp_lock_release>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__sfp_lock_release+0x8>)
 8008f02:	f000 bb53 	b.w	80095ac <__retarget_lock_release_recursive>
 8008f06:	bf00      	nop
 8008f08:	2000277d 	.word	0x2000277d

08008f0c <__sinit>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	4604      	mov	r4, r0
 8008f10:	f7ff fff0 	bl	8008ef4 <__sfp_lock_acquire>
 8008f14:	6a23      	ldr	r3, [r4, #32]
 8008f16:	b11b      	cbz	r3, 8008f20 <__sinit+0x14>
 8008f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f1c:	f7ff bff0 	b.w	8008f00 <__sfp_lock_release>
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <__sinit+0x28>)
 8008f22:	6223      	str	r3, [r4, #32]
 8008f24:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <__sinit+0x2c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f5      	bne.n	8008f18 <__sinit+0xc>
 8008f2c:	f7ff ffc4 	bl	8008eb8 <global_stdio_init.part.0>
 8008f30:	e7f2      	b.n	8008f18 <__sinit+0xc>
 8008f32:	bf00      	nop
 8008f34:	08008e79 	.word	0x08008e79
 8008f38:	20002774 	.word	0x20002774

08008f3c <_fwalk_sglue>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	4607      	mov	r7, r0
 8008f42:	4688      	mov	r8, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	2600      	movs	r6, #0
 8008f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8008f50:	d505      	bpl.n	8008f5e <_fwalk_sglue+0x22>
 8008f52:	6824      	ldr	r4, [r4, #0]
 8008f54:	2c00      	cmp	r4, #0
 8008f56:	d1f7      	bne.n	8008f48 <_fwalk_sglue+0xc>
 8008f58:	4630      	mov	r0, r6
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d907      	bls.n	8008f74 <_fwalk_sglue+0x38>
 8008f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	d003      	beq.n	8008f74 <_fwalk_sglue+0x38>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4638      	mov	r0, r7
 8008f70:	47c0      	blx	r8
 8008f72:	4306      	orrs	r6, r0
 8008f74:	3568      	adds	r5, #104	; 0x68
 8008f76:	e7e9      	b.n	8008f4c <_fwalk_sglue+0x10>

08008f78 <iprintf>:
 8008f78:	b40f      	push	{r0, r1, r2, r3}
 8008f7a:	b507      	push	{r0, r1, r2, lr}
 8008f7c:	4906      	ldr	r1, [pc, #24]	; (8008f98 <iprintf+0x20>)
 8008f7e:	ab04      	add	r3, sp, #16
 8008f80:	6808      	ldr	r0, [r1, #0]
 8008f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f86:	6881      	ldr	r1, [r0, #8]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	f002 fa51 	bl	800b430 <_vfiprintf_r>
 8008f8e:	b003      	add	sp, #12
 8008f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f94:	b004      	add	sp, #16
 8008f96:	4770      	bx	lr
 8008f98:	20000208 	.word	0x20000208

08008f9c <_puts_r>:
 8008f9c:	6a03      	ldr	r3, [r0, #32]
 8008f9e:	b570      	push	{r4, r5, r6, lr}
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460e      	mov	r6, r1
 8008fa4:	6884      	ldr	r4, [r0, #8]
 8008fa6:	b90b      	cbnz	r3, 8008fac <_puts_r+0x10>
 8008fa8:	f7ff ffb0 	bl	8008f0c <__sinit>
 8008fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fae:	07db      	lsls	r3, r3, #31
 8008fb0:	d405      	bmi.n	8008fbe <_puts_r+0x22>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	0598      	lsls	r0, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_puts_r+0x22>
 8008fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fba:	f000 faf6 	bl	80095aa <__retarget_lock_acquire_recursive>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	0719      	lsls	r1, r3, #28
 8008fc2:	d513      	bpl.n	8008fec <_puts_r+0x50>
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	b18b      	cbz	r3, 8008fec <_puts_r+0x50>
 8008fc8:	3e01      	subs	r6, #1
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	60a3      	str	r3, [r4, #8]
 8008fd4:	b9e9      	cbnz	r1, 8009012 <_puts_r+0x76>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da2e      	bge.n	8009038 <_puts_r+0x9c>
 8008fda:	4622      	mov	r2, r4
 8008fdc:	210a      	movs	r1, #10
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f929 	bl	8009236 <__swbuf_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d007      	beq.n	8008ff8 <_puts_r+0x5c>
 8008fe8:	250a      	movs	r5, #10
 8008fea:	e007      	b.n	8008ffc <_puts_r+0x60>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 f95e 	bl	80092b0 <__swsetup_r>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d0e7      	beq.n	8008fc8 <_puts_r+0x2c>
 8008ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8008ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ffe:	07da      	lsls	r2, r3, #31
 8009000:	d405      	bmi.n	800900e <_puts_r+0x72>
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	059b      	lsls	r3, r3, #22
 8009006:	d402      	bmi.n	800900e <_puts_r+0x72>
 8009008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900a:	f000 facf 	bl	80095ac <__retarget_lock_release_recursive>
 800900e:	4628      	mov	r0, r5
 8009010:	bd70      	pop	{r4, r5, r6, pc}
 8009012:	2b00      	cmp	r3, #0
 8009014:	da04      	bge.n	8009020 <_puts_r+0x84>
 8009016:	69a2      	ldr	r2, [r4, #24]
 8009018:	429a      	cmp	r2, r3
 800901a:	dc06      	bgt.n	800902a <_puts_r+0x8e>
 800901c:	290a      	cmp	r1, #10
 800901e:	d004      	beq.n	800902a <_puts_r+0x8e>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	6022      	str	r2, [r4, #0]
 8009026:	7019      	strb	r1, [r3, #0]
 8009028:	e7cf      	b.n	8008fca <_puts_r+0x2e>
 800902a:	4622      	mov	r2, r4
 800902c:	4628      	mov	r0, r5
 800902e:	f000 f902 	bl	8009236 <__swbuf_r>
 8009032:	3001      	adds	r0, #1
 8009034:	d1c9      	bne.n	8008fca <_puts_r+0x2e>
 8009036:	e7df      	b.n	8008ff8 <_puts_r+0x5c>
 8009038:	250a      	movs	r5, #10
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	6022      	str	r2, [r4, #0]
 8009040:	701d      	strb	r5, [r3, #0]
 8009042:	e7db      	b.n	8008ffc <_puts_r+0x60>

08009044 <puts>:
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <puts+0xc>)
 8009046:	4601      	mov	r1, r0
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f7ff bfa7 	b.w	8008f9c <_puts_r>
 800904e:	bf00      	nop
 8009050:	20000208 	.word	0x20000208

08009054 <setvbuf>:
 8009054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009058:	461d      	mov	r5, r3
 800905a:	4b54      	ldr	r3, [pc, #336]	; (80091ac <setvbuf+0x158>)
 800905c:	4604      	mov	r4, r0
 800905e:	681f      	ldr	r7, [r3, #0]
 8009060:	460e      	mov	r6, r1
 8009062:	4690      	mov	r8, r2
 8009064:	b127      	cbz	r7, 8009070 <setvbuf+0x1c>
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	b913      	cbnz	r3, 8009070 <setvbuf+0x1c>
 800906a:	4638      	mov	r0, r7
 800906c:	f7ff ff4e 	bl	8008f0c <__sinit>
 8009070:	f1b8 0f02 	cmp.w	r8, #2
 8009074:	d006      	beq.n	8009084 <setvbuf+0x30>
 8009076:	f1b8 0f01 	cmp.w	r8, #1
 800907a:	f200 8094 	bhi.w	80091a6 <setvbuf+0x152>
 800907e:	2d00      	cmp	r5, #0
 8009080:	f2c0 8091 	blt.w	80091a6 <setvbuf+0x152>
 8009084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009086:	07da      	lsls	r2, r3, #31
 8009088:	d405      	bmi.n	8009096 <setvbuf+0x42>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	d402      	bmi.n	8009096 <setvbuf+0x42>
 8009090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009092:	f000 fa8a 	bl	80095aa <__retarget_lock_acquire_recursive>
 8009096:	4621      	mov	r1, r4
 8009098:	4638      	mov	r0, r7
 800909a:	f002 fb65 	bl	800b768 <_fflush_r>
 800909e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a0:	b141      	cbz	r1, 80090b4 <setvbuf+0x60>
 80090a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a6:	4299      	cmp	r1, r3
 80090a8:	d002      	beq.n	80090b0 <setvbuf+0x5c>
 80090aa:	4638      	mov	r0, r7
 80090ac:	f001 f93c 	bl	800a328 <_free_r>
 80090b0:	2300      	movs	r3, #0
 80090b2:	6363      	str	r3, [r4, #52]	; 0x34
 80090b4:	2300      	movs	r3, #0
 80090b6:	61a3      	str	r3, [r4, #24]
 80090b8:	6063      	str	r3, [r4, #4]
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	0618      	lsls	r0, r3, #24
 80090be:	d503      	bpl.n	80090c8 <setvbuf+0x74>
 80090c0:	4638      	mov	r0, r7
 80090c2:	6921      	ldr	r1, [r4, #16]
 80090c4:	f001 f930 	bl	800a328 <_free_r>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f1b8 0f02 	cmp.w	r8, #2
 80090ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80090d2:	f023 0303 	bic.w	r3, r3, #3
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	d05f      	beq.n	800919a <setvbuf+0x146>
 80090da:	ab01      	add	r3, sp, #4
 80090dc:	466a      	mov	r2, sp
 80090de:	4621      	mov	r1, r4
 80090e0:	4638      	mov	r0, r7
 80090e2:	f002 fb7b 	bl	800b7dc <__swhatbuf_r>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	4318      	orrs	r0, r3
 80090ea:	81a0      	strh	r0, [r4, #12]
 80090ec:	bb2d      	cbnz	r5, 800913a <setvbuf+0xe6>
 80090ee:	9d00      	ldr	r5, [sp, #0]
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7fe fa61 	bl	80075b8 <malloc>
 80090f6:	4606      	mov	r6, r0
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d150      	bne.n	800919e <setvbuf+0x14a>
 80090fc:	f8dd 9000 	ldr.w	r9, [sp]
 8009100:	45a9      	cmp	r9, r5
 8009102:	d13e      	bne.n	8009182 <setvbuf+0x12e>
 8009104:	f04f 35ff 	mov.w	r5, #4294967295
 8009108:	2200      	movs	r2, #0
 800910a:	60a2      	str	r2, [r4, #8]
 800910c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009110:	6022      	str	r2, [r4, #0]
 8009112:	6122      	str	r2, [r4, #16]
 8009114:	2201      	movs	r2, #1
 8009116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911a:	6162      	str	r2, [r4, #20]
 800911c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800911e:	f043 0302 	orr.w	r3, r3, #2
 8009122:	07d1      	lsls	r1, r2, #31
 8009124:	81a3      	strh	r3, [r4, #12]
 8009126:	d404      	bmi.n	8009132 <setvbuf+0xde>
 8009128:	059b      	lsls	r3, r3, #22
 800912a:	d402      	bmi.n	8009132 <setvbuf+0xde>
 800912c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800912e:	f000 fa3d 	bl	80095ac <__retarget_lock_release_recursive>
 8009132:	4628      	mov	r0, r5
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913a:	2e00      	cmp	r6, #0
 800913c:	d0d8      	beq.n	80090f0 <setvbuf+0x9c>
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	b913      	cbnz	r3, 8009148 <setvbuf+0xf4>
 8009142:	4638      	mov	r0, r7
 8009144:	f7ff fee2 	bl	8008f0c <__sinit>
 8009148:	f1b8 0f01 	cmp.w	r8, #1
 800914c:	bf08      	it	eq
 800914e:	89a3      	ldrheq	r3, [r4, #12]
 8009150:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009154:	bf04      	itt	eq
 8009156:	f043 0301 	orreq.w	r3, r3, #1
 800915a:	81a3      	strheq	r3, [r4, #12]
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	6026      	str	r6, [r4, #0]
 8009160:	f013 0208 	ands.w	r2, r3, #8
 8009164:	d01d      	beq.n	80091a2 <setvbuf+0x14e>
 8009166:	07da      	lsls	r2, r3, #31
 8009168:	bf41      	itttt	mi
 800916a:	2200      	movmi	r2, #0
 800916c:	426d      	negmi	r5, r5
 800916e:	60a2      	strmi	r2, [r4, #8]
 8009170:	61a5      	strmi	r5, [r4, #24]
 8009172:	bf58      	it	pl
 8009174:	60a5      	strpl	r5, [r4, #8]
 8009176:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009178:	f015 0501 	ands.w	r5, r5, #1
 800917c:	d0d4      	beq.n	8009128 <setvbuf+0xd4>
 800917e:	2500      	movs	r5, #0
 8009180:	e7d7      	b.n	8009132 <setvbuf+0xde>
 8009182:	4648      	mov	r0, r9
 8009184:	f7fe fa18 	bl	80075b8 <malloc>
 8009188:	4606      	mov	r6, r0
 800918a:	2800      	cmp	r0, #0
 800918c:	d0ba      	beq.n	8009104 <setvbuf+0xb0>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	464d      	mov	r5, r9
 8009192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	e7d1      	b.n	800913e <setvbuf+0xea>
 800919a:	2500      	movs	r5, #0
 800919c:	e7b4      	b.n	8009108 <setvbuf+0xb4>
 800919e:	46a9      	mov	r9, r5
 80091a0:	e7f5      	b.n	800918e <setvbuf+0x13a>
 80091a2:	60a2      	str	r2, [r4, #8]
 80091a4:	e7e7      	b.n	8009176 <setvbuf+0x122>
 80091a6:	f04f 35ff 	mov.w	r5, #4294967295
 80091aa:	e7c2      	b.n	8009132 <setvbuf+0xde>
 80091ac:	20000208 	.word	0x20000208

080091b0 <__sread>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	460c      	mov	r4, r1
 80091b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b8:	f000 f998 	bl	80094ec <_read_r>
 80091bc:	2800      	cmp	r0, #0
 80091be:	bfab      	itete	ge
 80091c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091c2:	89a3      	ldrhlt	r3, [r4, #12]
 80091c4:	181b      	addge	r3, r3, r0
 80091c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091ca:	bfac      	ite	ge
 80091cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80091ce:	81a3      	strhlt	r3, [r4, #12]
 80091d0:	bd10      	pop	{r4, pc}

080091d2 <__swrite>:
 80091d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d6:	461f      	mov	r7, r3
 80091d8:	898b      	ldrh	r3, [r1, #12]
 80091da:	4605      	mov	r5, r0
 80091dc:	05db      	lsls	r3, r3, #23
 80091de:	460c      	mov	r4, r1
 80091e0:	4616      	mov	r6, r2
 80091e2:	d505      	bpl.n	80091f0 <__swrite+0x1e>
 80091e4:	2302      	movs	r3, #2
 80091e6:	2200      	movs	r2, #0
 80091e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ec:	f000 f96c 	bl	80094c8 <_lseek_r>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	4632      	mov	r2, r6
 80091f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	4628      	mov	r0, r5
 80091fc:	463b      	mov	r3, r7
 80091fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009206:	f000 b993 	b.w	8009530 <_write_r>

0800920a <__sseek>:
 800920a:	b510      	push	{r4, lr}
 800920c:	460c      	mov	r4, r1
 800920e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009212:	f000 f959 	bl	80094c8 <_lseek_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	bf15      	itete	ne
 800921c:	6560      	strne	r0, [r4, #84]	; 0x54
 800921e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009226:	81a3      	strheq	r3, [r4, #12]
 8009228:	bf18      	it	ne
 800922a:	81a3      	strhne	r3, [r4, #12]
 800922c:	bd10      	pop	{r4, pc}

0800922e <__sclose>:
 800922e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009232:	f000 b939 	b.w	80094a8 <_close_r>

08009236 <__swbuf_r>:
 8009236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009238:	460e      	mov	r6, r1
 800923a:	4614      	mov	r4, r2
 800923c:	4605      	mov	r5, r0
 800923e:	b118      	cbz	r0, 8009248 <__swbuf_r+0x12>
 8009240:	6a03      	ldr	r3, [r0, #32]
 8009242:	b90b      	cbnz	r3, 8009248 <__swbuf_r+0x12>
 8009244:	f7ff fe62 	bl	8008f0c <__sinit>
 8009248:	69a3      	ldr	r3, [r4, #24]
 800924a:	60a3      	str	r3, [r4, #8]
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	071a      	lsls	r2, r3, #28
 8009250:	d525      	bpl.n	800929e <__swbuf_r+0x68>
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	b31b      	cbz	r3, 800929e <__swbuf_r+0x68>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	6922      	ldr	r2, [r4, #16]
 800925a:	b2f6      	uxtb	r6, r6
 800925c:	1a98      	subs	r0, r3, r2
 800925e:	6963      	ldr	r3, [r4, #20]
 8009260:	4637      	mov	r7, r6
 8009262:	4283      	cmp	r3, r0
 8009264:	dc04      	bgt.n	8009270 <__swbuf_r+0x3a>
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f002 fa7d 	bl	800b768 <_fflush_r>
 800926e:	b9e0      	cbnz	r0, 80092aa <__swbuf_r+0x74>
 8009270:	68a3      	ldr	r3, [r4, #8]
 8009272:	3b01      	subs	r3, #1
 8009274:	60a3      	str	r3, [r4, #8]
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	701e      	strb	r6, [r3, #0]
 800927e:	6962      	ldr	r2, [r4, #20]
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	429a      	cmp	r2, r3
 8009284:	d004      	beq.n	8009290 <__swbuf_r+0x5a>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	07db      	lsls	r3, r3, #31
 800928a:	d506      	bpl.n	800929a <__swbuf_r+0x64>
 800928c:	2e0a      	cmp	r6, #10
 800928e:	d104      	bne.n	800929a <__swbuf_r+0x64>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f002 fa68 	bl	800b768 <_fflush_r>
 8009298:	b938      	cbnz	r0, 80092aa <__swbuf_r+0x74>
 800929a:	4638      	mov	r0, r7
 800929c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f000 f805 	bl	80092b0 <__swsetup_r>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d0d5      	beq.n	8009256 <__swbuf_r+0x20>
 80092aa:	f04f 37ff 	mov.w	r7, #4294967295
 80092ae:	e7f4      	b.n	800929a <__swbuf_r+0x64>

080092b0 <__swsetup_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4b2a      	ldr	r3, [pc, #168]	; (800935c <__swsetup_r+0xac>)
 80092b4:	4605      	mov	r5, r0
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	460c      	mov	r4, r1
 80092ba:	b118      	cbz	r0, 80092c4 <__swsetup_r+0x14>
 80092bc:	6a03      	ldr	r3, [r0, #32]
 80092be:	b90b      	cbnz	r3, 80092c4 <__swsetup_r+0x14>
 80092c0:	f7ff fe24 	bl	8008f0c <__sinit>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092ca:	0718      	lsls	r0, r3, #28
 80092cc:	d422      	bmi.n	8009314 <__swsetup_r+0x64>
 80092ce:	06d9      	lsls	r1, r3, #27
 80092d0:	d407      	bmi.n	80092e2 <__swsetup_r+0x32>
 80092d2:	2309      	movs	r3, #9
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	e034      	b.n	800934c <__swsetup_r+0x9c>
 80092e2:	0758      	lsls	r0, r3, #29
 80092e4:	d512      	bpl.n	800930c <__swsetup_r+0x5c>
 80092e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092e8:	b141      	cbz	r1, 80092fc <__swsetup_r+0x4c>
 80092ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ee:	4299      	cmp	r1, r3
 80092f0:	d002      	beq.n	80092f8 <__swsetup_r+0x48>
 80092f2:	4628      	mov	r0, r5
 80092f4:	f001 f818 	bl	800a328 <_free_r>
 80092f8:	2300      	movs	r3, #0
 80092fa:	6363      	str	r3, [r4, #52]	; 0x34
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	2300      	movs	r3, #0
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f043 0308 	orr.w	r3, r3, #8
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	b94b      	cbnz	r3, 800932c <__swsetup_r+0x7c>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800931e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009322:	d003      	beq.n	800932c <__swsetup_r+0x7c>
 8009324:	4621      	mov	r1, r4
 8009326:	4628      	mov	r0, r5
 8009328:	f002 fa7d 	bl	800b826 <__smakebuf_r>
 800932c:	89a0      	ldrh	r0, [r4, #12]
 800932e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009332:	f010 0301 	ands.w	r3, r0, #1
 8009336:	d00a      	beq.n	800934e <__swsetup_r+0x9e>
 8009338:	2300      	movs	r3, #0
 800933a:	60a3      	str	r3, [r4, #8]
 800933c:	6963      	ldr	r3, [r4, #20]
 800933e:	425b      	negs	r3, r3
 8009340:	61a3      	str	r3, [r4, #24]
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	b943      	cbnz	r3, 8009358 <__swsetup_r+0xa8>
 8009346:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800934a:	d1c4      	bne.n	80092d6 <__swsetup_r+0x26>
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	0781      	lsls	r1, r0, #30
 8009350:	bf58      	it	pl
 8009352:	6963      	ldrpl	r3, [r4, #20]
 8009354:	60a3      	str	r3, [r4, #8]
 8009356:	e7f4      	b.n	8009342 <__swsetup_r+0x92>
 8009358:	2000      	movs	r0, #0
 800935a:	e7f7      	b.n	800934c <__swsetup_r+0x9c>
 800935c:	20000208 	.word	0x20000208

08009360 <memset>:
 8009360:	4603      	mov	r3, r0
 8009362:	4402      	add	r2, r0
 8009364:	4293      	cmp	r3, r2
 8009366:	d100      	bne.n	800936a <memset+0xa>
 8009368:	4770      	bx	lr
 800936a:	f803 1b01 	strb.w	r1, [r3], #1
 800936e:	e7f9      	b.n	8009364 <memset+0x4>

08009370 <strncmp>:
 8009370:	b510      	push	{r4, lr}
 8009372:	b16a      	cbz	r2, 8009390 <strncmp+0x20>
 8009374:	3901      	subs	r1, #1
 8009376:	1884      	adds	r4, r0, r2
 8009378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009380:	429a      	cmp	r2, r3
 8009382:	d103      	bne.n	800938c <strncmp+0x1c>
 8009384:	42a0      	cmp	r0, r4
 8009386:	d001      	beq.n	800938c <strncmp+0x1c>
 8009388:	2a00      	cmp	r2, #0
 800938a:	d1f5      	bne.n	8009378 <strncmp+0x8>
 800938c:	1ad0      	subs	r0, r2, r3
 800938e:	bd10      	pop	{r4, pc}
 8009390:	4610      	mov	r0, r2
 8009392:	e7fc      	b.n	800938e <strncmp+0x1e>

08009394 <strncpy>:
 8009394:	4603      	mov	r3, r0
 8009396:	b510      	push	{r4, lr}
 8009398:	3901      	subs	r1, #1
 800939a:	b132      	cbz	r2, 80093aa <strncpy+0x16>
 800939c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80093a0:	3a01      	subs	r2, #1
 80093a2:	f803 4b01 	strb.w	r4, [r3], #1
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	d1f7      	bne.n	800939a <strncpy+0x6>
 80093aa:	2100      	movs	r1, #0
 80093ac:	441a      	add	r2, r3
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d100      	bne.n	80093b4 <strncpy+0x20>
 80093b2:	bd10      	pop	{r4, pc}
 80093b4:	f803 1b01 	strb.w	r1, [r3], #1
 80093b8:	e7f9      	b.n	80093ae <strncpy+0x1a>
	...

080093bc <strtok>:
 80093bc:	4b16      	ldr	r3, [pc, #88]	; (8009418 <strtok+0x5c>)
 80093be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	681f      	ldr	r7, [r3, #0]
 80093c4:	4605      	mov	r5, r0
 80093c6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80093c8:	460e      	mov	r6, r1
 80093ca:	b9ec      	cbnz	r4, 8009408 <strtok+0x4c>
 80093cc:	2050      	movs	r0, #80	; 0x50
 80093ce:	f7fe f8f3 	bl	80075b8 <malloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6478      	str	r0, [r7, #68]	; 0x44
 80093d6:	b920      	cbnz	r0, 80093e2 <strtok+0x26>
 80093d8:	215b      	movs	r1, #91	; 0x5b
 80093da:	4b10      	ldr	r3, [pc, #64]	; (800941c <strtok+0x60>)
 80093dc:	4810      	ldr	r0, [pc, #64]	; (8009420 <strtok+0x64>)
 80093de:	f000 f915 	bl	800960c <__assert_func>
 80093e2:	e9c0 4400 	strd	r4, r4, [r0]
 80093e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80093ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80093ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80093f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80093f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80093fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80093fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009402:	6184      	str	r4, [r0, #24]
 8009404:	7704      	strb	r4, [r0, #28]
 8009406:	6244      	str	r4, [r0, #36]	; 0x24
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800940e:	2301      	movs	r3, #1
 8009410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	f000 b806 	b.w	8009424 <__strtok_r>
 8009418:	20000208 	.word	0x20000208
 800941c:	0800be25 	.word	0x0800be25
 8009420:	0800be3c 	.word	0x0800be3c

08009424 <__strtok_r>:
 8009424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009426:	b908      	cbnz	r0, 800942c <__strtok_r+0x8>
 8009428:	6810      	ldr	r0, [r2, #0]
 800942a:	b188      	cbz	r0, 8009450 <__strtok_r+0x2c>
 800942c:	4604      	mov	r4, r0
 800942e:	460f      	mov	r7, r1
 8009430:	4620      	mov	r0, r4
 8009432:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009436:	f817 6b01 	ldrb.w	r6, [r7], #1
 800943a:	b91e      	cbnz	r6, 8009444 <__strtok_r+0x20>
 800943c:	b965      	cbnz	r5, 8009458 <__strtok_r+0x34>
 800943e:	4628      	mov	r0, r5
 8009440:	6015      	str	r5, [r2, #0]
 8009442:	e005      	b.n	8009450 <__strtok_r+0x2c>
 8009444:	42b5      	cmp	r5, r6
 8009446:	d1f6      	bne.n	8009436 <__strtok_r+0x12>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1f0      	bne.n	800942e <__strtok_r+0xa>
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	7003      	strb	r3, [r0, #0]
 8009450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009452:	461c      	mov	r4, r3
 8009454:	e00c      	b.n	8009470 <__strtok_r+0x4c>
 8009456:	b915      	cbnz	r5, 800945e <__strtok_r+0x3a>
 8009458:	460e      	mov	r6, r1
 800945a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800945e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009462:	42ab      	cmp	r3, r5
 8009464:	d1f7      	bne.n	8009456 <__strtok_r+0x32>
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0f3      	beq.n	8009452 <__strtok_r+0x2e>
 800946a:	2300      	movs	r3, #0
 800946c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009470:	6014      	str	r4, [r2, #0]
 8009472:	e7ed      	b.n	8009450 <__strtok_r+0x2c>

08009474 <strstr>:
 8009474:	780a      	ldrb	r2, [r1, #0]
 8009476:	b570      	push	{r4, r5, r6, lr}
 8009478:	b96a      	cbnz	r2, 8009496 <strstr+0x22>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	429a      	cmp	r2, r3
 800947e:	d109      	bne.n	8009494 <strstr+0x20>
 8009480:	460c      	mov	r4, r1
 8009482:	4605      	mov	r5, r0
 8009484:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009488:	2b00      	cmp	r3, #0
 800948a:	d0f6      	beq.n	800947a <strstr+0x6>
 800948c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009490:	429e      	cmp	r6, r3
 8009492:	d0f7      	beq.n	8009484 <strstr+0x10>
 8009494:	3001      	adds	r0, #1
 8009496:	7803      	ldrb	r3, [r0, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1ef      	bne.n	800947c <strstr+0x8>
 800949c:	4618      	mov	r0, r3
 800949e:	e7ec      	b.n	800947a <strstr+0x6>

080094a0 <_localeconv_r>:
 80094a0:	4800      	ldr	r0, [pc, #0]	; (80094a4 <_localeconv_r+0x4>)
 80094a2:	4770      	bx	lr
 80094a4:	20000140 	.word	0x20000140

080094a8 <_close_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	2300      	movs	r3, #0
 80094ac:	4d05      	ldr	r5, [pc, #20]	; (80094c4 <_close_r+0x1c>)
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	f7fa ff60 	bl	8004378 <_close>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_close_r+0x1a>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_close_r+0x1a>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20002778 	.word	0x20002778

080094c8 <_lseek_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	2200      	movs	r2, #0
 80094d2:	4d05      	ldr	r5, [pc, #20]	; (80094e8 <_lseek_r+0x20>)
 80094d4:	602a      	str	r2, [r5, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7fa ff72 	bl	80043c0 <_lseek>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_lseek_r+0x1e>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_lseek_r+0x1e>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20002778 	.word	0x20002778

080094ec <_read_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	2200      	movs	r2, #0
 80094f6:	4d05      	ldr	r5, [pc, #20]	; (800950c <_read_r+0x20>)
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7fa ff1f 	bl	800433e <_read>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_read_r+0x1e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_read_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20002778 	.word	0x20002778

08009510 <_sbrk_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	2300      	movs	r3, #0
 8009514:	4d05      	ldr	r5, [pc, #20]	; (800952c <_sbrk_r+0x1c>)
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	f7fa ff5c 	bl	80043d8 <_sbrk>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_sbrk_r+0x1a>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_sbrk_r+0x1a>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20002778 	.word	0x20002778

08009530 <_write_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	4611      	mov	r1, r2
 8009538:	2200      	movs	r2, #0
 800953a:	4d05      	ldr	r5, [pc, #20]	; (8009550 <_write_r+0x20>)
 800953c:	602a      	str	r2, [r5, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	f7f8 fff0 	bl	8002524 <_write>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_write_r+0x1e>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_write_r+0x1e>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20002778 	.word	0x20002778

08009554 <__errno>:
 8009554:	4b01      	ldr	r3, [pc, #4]	; (800955c <__errno+0x8>)
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000208 	.word	0x20000208

08009560 <__libc_init_array>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	2600      	movs	r6, #0
 8009564:	4d0c      	ldr	r5, [pc, #48]	; (8009598 <__libc_init_array+0x38>)
 8009566:	4c0d      	ldr	r4, [pc, #52]	; (800959c <__libc_init_array+0x3c>)
 8009568:	1b64      	subs	r4, r4, r5
 800956a:	10a4      	asrs	r4, r4, #2
 800956c:	42a6      	cmp	r6, r4
 800956e:	d109      	bne.n	8009584 <__libc_init_array+0x24>
 8009570:	f002 fa18 	bl	800b9a4 <_init>
 8009574:	2600      	movs	r6, #0
 8009576:	4d0a      	ldr	r5, [pc, #40]	; (80095a0 <__libc_init_array+0x40>)
 8009578:	4c0a      	ldr	r4, [pc, #40]	; (80095a4 <__libc_init_array+0x44>)
 800957a:	1b64      	subs	r4, r4, r5
 800957c:	10a4      	asrs	r4, r4, #2
 800957e:	42a6      	cmp	r6, r4
 8009580:	d105      	bne.n	800958e <__libc_init_array+0x2e>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	f855 3b04 	ldr.w	r3, [r5], #4
 8009588:	4798      	blx	r3
 800958a:	3601      	adds	r6, #1
 800958c:	e7ee      	b.n	800956c <__libc_init_array+0xc>
 800958e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009592:	4798      	blx	r3
 8009594:	3601      	adds	r6, #1
 8009596:	e7f2      	b.n	800957e <__libc_init_array+0x1e>
 8009598:	0800c120 	.word	0x0800c120
 800959c:	0800c120 	.word	0x0800c120
 80095a0:	0800c120 	.word	0x0800c120
 80095a4:	0800c124 	.word	0x0800c124

080095a8 <__retarget_lock_init_recursive>:
 80095a8:	4770      	bx	lr

080095aa <__retarget_lock_acquire_recursive>:
 80095aa:	4770      	bx	lr

080095ac <__retarget_lock_release_recursive>:
 80095ac:	4770      	bx	lr

080095ae <strcpy>:
 80095ae:	4603      	mov	r3, r0
 80095b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095b4:	f803 2b01 	strb.w	r2, [r3], #1
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	d1f9      	bne.n	80095b0 <strcpy+0x2>
 80095bc:	4770      	bx	lr

080095be <memchr>:
 80095be:	4603      	mov	r3, r0
 80095c0:	b510      	push	{r4, lr}
 80095c2:	b2c9      	uxtb	r1, r1
 80095c4:	4402      	add	r2, r0
 80095c6:	4293      	cmp	r3, r2
 80095c8:	4618      	mov	r0, r3
 80095ca:	d101      	bne.n	80095d0 <memchr+0x12>
 80095cc:	2000      	movs	r0, #0
 80095ce:	e003      	b.n	80095d8 <memchr+0x1a>
 80095d0:	7804      	ldrb	r4, [r0, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	428c      	cmp	r4, r1
 80095d6:	d1f6      	bne.n	80095c6 <memchr+0x8>
 80095d8:	bd10      	pop	{r4, pc}

080095da <memcpy>:
 80095da:	440a      	add	r2, r1
 80095dc:	4291      	cmp	r1, r2
 80095de:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e2:	d100      	bne.n	80095e6 <memcpy+0xc>
 80095e4:	4770      	bx	lr
 80095e6:	b510      	push	{r4, lr}
 80095e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ec:	4291      	cmp	r1, r2
 80095ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f2:	d1f9      	bne.n	80095e8 <memcpy+0xe>
 80095f4:	bd10      	pop	{r4, pc}
	...

080095f8 <nan>:
 80095f8:	2000      	movs	r0, #0
 80095fa:	4901      	ldr	r1, [pc, #4]	; (8009600 <nan+0x8>)
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	7ff80000 	.word	0x7ff80000

08009604 <nanf>:
 8009604:	4800      	ldr	r0, [pc, #0]	; (8009608 <nanf+0x4>)
 8009606:	4770      	bx	lr
 8009608:	7fc00000 	.word	0x7fc00000

0800960c <__assert_func>:
 800960c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800960e:	4614      	mov	r4, r2
 8009610:	461a      	mov	r2, r3
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <__assert_func+0x2c>)
 8009614:	4605      	mov	r5, r0
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68d8      	ldr	r0, [r3, #12]
 800961a:	b14c      	cbz	r4, 8009630 <__assert_func+0x24>
 800961c:	4b07      	ldr	r3, [pc, #28]	; (800963c <__assert_func+0x30>)
 800961e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009622:	9100      	str	r1, [sp, #0]
 8009624:	462b      	mov	r3, r5
 8009626:	4906      	ldr	r1, [pc, #24]	; (8009640 <__assert_func+0x34>)
 8009628:	f002 f8c6 	bl	800b7b8 <fiprintf>
 800962c:	f002 f95a 	bl	800b8e4 <abort>
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <__assert_func+0x38>)
 8009632:	461c      	mov	r4, r3
 8009634:	e7f3      	b.n	800961e <__assert_func+0x12>
 8009636:	bf00      	nop
 8009638:	20000208 	.word	0x20000208
 800963c:	0800be9e 	.word	0x0800be9e
 8009640:	0800beab 	.word	0x0800beab
 8009644:	0800bed9 	.word	0x0800bed9

08009648 <quorem>:
 8009648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	6903      	ldr	r3, [r0, #16]
 800964e:	690c      	ldr	r4, [r1, #16]
 8009650:	4607      	mov	r7, r0
 8009652:	42a3      	cmp	r3, r4
 8009654:	db7f      	blt.n	8009756 <quorem+0x10e>
 8009656:	3c01      	subs	r4, #1
 8009658:	f100 0514 	add.w	r5, r0, #20
 800965c:	f101 0814 	add.w	r8, r1, #20
 8009660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800966a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800966e:	3301      	adds	r3, #1
 8009670:	429a      	cmp	r2, r3
 8009672:	fbb2 f6f3 	udiv	r6, r2, r3
 8009676:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800967a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800967e:	d331      	bcc.n	80096e4 <quorem+0x9c>
 8009680:	f04f 0e00 	mov.w	lr, #0
 8009684:	4640      	mov	r0, r8
 8009686:	46ac      	mov	ip, r5
 8009688:	46f2      	mov	sl, lr
 800968a:	f850 2b04 	ldr.w	r2, [r0], #4
 800968e:	b293      	uxth	r3, r2
 8009690:	fb06 e303 	mla	r3, r6, r3, lr
 8009694:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009698:	0c1a      	lsrs	r2, r3, #16
 800969a:	b29b      	uxth	r3, r3
 800969c:	fb06 220e 	mla	r2, r6, lr, r2
 80096a0:	ebaa 0303 	sub.w	r3, sl, r3
 80096a4:	f8dc a000 	ldr.w	sl, [ip]
 80096a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096ac:	fa1f fa8a 	uxth.w	sl, sl
 80096b0:	4453      	add	r3, sl
 80096b2:	f8dc a000 	ldr.w	sl, [ip]
 80096b6:	b292      	uxth	r2, r2
 80096b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80096bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096c6:	4581      	cmp	r9, r0
 80096c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096cc:	f84c 3b04 	str.w	r3, [ip], #4
 80096d0:	d2db      	bcs.n	800968a <quorem+0x42>
 80096d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80096d6:	b92b      	cbnz	r3, 80096e4 <quorem+0x9c>
 80096d8:	9b01      	ldr	r3, [sp, #4]
 80096da:	3b04      	subs	r3, #4
 80096dc:	429d      	cmp	r5, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	d32d      	bcc.n	800973e <quorem+0xf6>
 80096e2:	613c      	str	r4, [r7, #16]
 80096e4:	4638      	mov	r0, r7
 80096e6:	f001 fc97 	bl	800b018 <__mcmp>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	db23      	blt.n	8009736 <quorem+0xee>
 80096ee:	4629      	mov	r1, r5
 80096f0:	2000      	movs	r0, #0
 80096f2:	3601      	adds	r6, #1
 80096f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80096f8:	f8d1 c000 	ldr.w	ip, [r1]
 80096fc:	b293      	uxth	r3, r2
 80096fe:	1ac3      	subs	r3, r0, r3
 8009700:	0c12      	lsrs	r2, r2, #16
 8009702:	fa1f f08c 	uxth.w	r0, ip
 8009706:	4403      	add	r3, r0
 8009708:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800970c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009710:	b29b      	uxth	r3, r3
 8009712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009716:	45c1      	cmp	r9, r8
 8009718:	ea4f 4022 	mov.w	r0, r2, asr #16
 800971c:	f841 3b04 	str.w	r3, [r1], #4
 8009720:	d2e8      	bcs.n	80096f4 <quorem+0xac>
 8009722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800972a:	b922      	cbnz	r2, 8009736 <quorem+0xee>
 800972c:	3b04      	subs	r3, #4
 800972e:	429d      	cmp	r5, r3
 8009730:	461a      	mov	r2, r3
 8009732:	d30a      	bcc.n	800974a <quorem+0x102>
 8009734:	613c      	str	r4, [r7, #16]
 8009736:	4630      	mov	r0, r6
 8009738:	b003      	add	sp, #12
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	6812      	ldr	r2, [r2, #0]
 8009740:	3b04      	subs	r3, #4
 8009742:	2a00      	cmp	r2, #0
 8009744:	d1cd      	bne.n	80096e2 <quorem+0x9a>
 8009746:	3c01      	subs	r4, #1
 8009748:	e7c8      	b.n	80096dc <quorem+0x94>
 800974a:	6812      	ldr	r2, [r2, #0]
 800974c:	3b04      	subs	r3, #4
 800974e:	2a00      	cmp	r2, #0
 8009750:	d1f0      	bne.n	8009734 <quorem+0xec>
 8009752:	3c01      	subs	r4, #1
 8009754:	e7eb      	b.n	800972e <quorem+0xe6>
 8009756:	2000      	movs	r0, #0
 8009758:	e7ee      	b.n	8009738 <quorem+0xf0>
 800975a:	0000      	movs	r0, r0
 800975c:	0000      	movs	r0, r0
	...

08009760 <_dtoa_r>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	4616      	mov	r6, r2
 8009766:	461f      	mov	r7, r3
 8009768:	69c4      	ldr	r4, [r0, #28]
 800976a:	b099      	sub	sp, #100	; 0x64
 800976c:	4605      	mov	r5, r0
 800976e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009772:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009776:	b974      	cbnz	r4, 8009796 <_dtoa_r+0x36>
 8009778:	2010      	movs	r0, #16
 800977a:	f7fd ff1d 	bl	80075b8 <malloc>
 800977e:	4602      	mov	r2, r0
 8009780:	61e8      	str	r0, [r5, #28]
 8009782:	b920      	cbnz	r0, 800978e <_dtoa_r+0x2e>
 8009784:	21ef      	movs	r1, #239	; 0xef
 8009786:	4bac      	ldr	r3, [pc, #688]	; (8009a38 <_dtoa_r+0x2d8>)
 8009788:	48ac      	ldr	r0, [pc, #688]	; (8009a3c <_dtoa_r+0x2dc>)
 800978a:	f7ff ff3f 	bl	800960c <__assert_func>
 800978e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009792:	6004      	str	r4, [r0, #0]
 8009794:	60c4      	str	r4, [r0, #12]
 8009796:	69eb      	ldr	r3, [r5, #28]
 8009798:	6819      	ldr	r1, [r3, #0]
 800979a:	b151      	cbz	r1, 80097b2 <_dtoa_r+0x52>
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	2301      	movs	r3, #1
 80097a0:	4093      	lsls	r3, r2
 80097a2:	604a      	str	r2, [r1, #4]
 80097a4:	608b      	str	r3, [r1, #8]
 80097a6:	4628      	mov	r0, r5
 80097a8:	f001 f9b2 	bl	800ab10 <_Bfree>
 80097ac:	2200      	movs	r2, #0
 80097ae:	69eb      	ldr	r3, [r5, #28]
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	1e3b      	subs	r3, r7, #0
 80097b4:	bfaf      	iteee	ge
 80097b6:	2300      	movge	r3, #0
 80097b8:	2201      	movlt	r2, #1
 80097ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097be:	9305      	strlt	r3, [sp, #20]
 80097c0:	bfa8      	it	ge
 80097c2:	f8c8 3000 	strge.w	r3, [r8]
 80097c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80097ca:	4b9d      	ldr	r3, [pc, #628]	; (8009a40 <_dtoa_r+0x2e0>)
 80097cc:	bfb8      	it	lt
 80097ce:	f8c8 2000 	strlt.w	r2, [r8]
 80097d2:	ea33 0309 	bics.w	r3, r3, r9
 80097d6:	d119      	bne.n	800980c <_dtoa_r+0xac>
 80097d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80097dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097e4:	4333      	orrs	r3, r6
 80097e6:	f000 8589 	beq.w	800a2fc <_dtoa_r+0xb9c>
 80097ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097ec:	b953      	cbnz	r3, 8009804 <_dtoa_r+0xa4>
 80097ee:	4b95      	ldr	r3, [pc, #596]	; (8009a44 <_dtoa_r+0x2e4>)
 80097f0:	e023      	b.n	800983a <_dtoa_r+0xda>
 80097f2:	4b95      	ldr	r3, [pc, #596]	; (8009a48 <_dtoa_r+0x2e8>)
 80097f4:	9303      	str	r3, [sp, #12]
 80097f6:	3308      	adds	r3, #8
 80097f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	9803      	ldr	r0, [sp, #12]
 80097fe:	b019      	add	sp, #100	; 0x64
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	4b8f      	ldr	r3, [pc, #572]	; (8009a44 <_dtoa_r+0x2e4>)
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	3303      	adds	r3, #3
 800980a:	e7f5      	b.n	80097f8 <_dtoa_r+0x98>
 800980c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009810:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	f7f7 f8ce 	bl	80009bc <__aeabi_dcmpeq>
 8009820:	4680      	mov	r8, r0
 8009822:	b160      	cbz	r0, 800983e <_dtoa_r+0xde>
 8009824:	2301      	movs	r3, #1
 8009826:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8562 	beq.w	800a2f6 <_dtoa_r+0xb96>
 8009832:	4b86      	ldr	r3, [pc, #536]	; (8009a4c <_dtoa_r+0x2ec>)
 8009834:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	3b01      	subs	r3, #1
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	e7de      	b.n	80097fc <_dtoa_r+0x9c>
 800983e:	ab16      	add	r3, sp, #88	; 0x58
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	ab17      	add	r3, sp, #92	; 0x5c
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	4628      	mov	r0, r5
 8009848:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800984c:	f001 fcf4 	bl	800b238 <__d2b>
 8009850:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009854:	4682      	mov	sl, r0
 8009856:	2c00      	cmp	r4, #0
 8009858:	d07e      	beq.n	8009958 <_dtoa_r+0x1f8>
 800985a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800985e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009860:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009868:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800986c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009870:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009874:	4619      	mov	r1, r3
 8009876:	2200      	movs	r2, #0
 8009878:	4b75      	ldr	r3, [pc, #468]	; (8009a50 <_dtoa_r+0x2f0>)
 800987a:	f7f6 fc7f 	bl	800017c <__aeabi_dsub>
 800987e:	a368      	add	r3, pc, #416	; (adr r3, 8009a20 <_dtoa_r+0x2c0>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 fe32 	bl	80004ec <__aeabi_dmul>
 8009888:	a367      	add	r3, pc, #412	; (adr r3, 8009a28 <_dtoa_r+0x2c8>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 fc77 	bl	8000180 <__adddf3>
 8009892:	4606      	mov	r6, r0
 8009894:	4620      	mov	r0, r4
 8009896:	460f      	mov	r7, r1
 8009898:	f7f6 fdbe 	bl	8000418 <__aeabi_i2d>
 800989c:	a364      	add	r3, pc, #400	; (adr r3, 8009a30 <_dtoa_r+0x2d0>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f7f6 fe23 	bl	80004ec <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4630      	mov	r0, r6
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f6 fc67 	bl	8000180 <__adddf3>
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	f7f7 f8c9 	bl	8000a4c <__aeabi_d2iz>
 80098ba:	2200      	movs	r2, #0
 80098bc:	4683      	mov	fp, r0
 80098be:	2300      	movs	r3, #0
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f7 f884 	bl	80009d0 <__aeabi_dcmplt>
 80098c8:	b148      	cbz	r0, 80098de <_dtoa_r+0x17e>
 80098ca:	4658      	mov	r0, fp
 80098cc:	f7f6 fda4 	bl	8000418 <__aeabi_i2d>
 80098d0:	4632      	mov	r2, r6
 80098d2:	463b      	mov	r3, r7
 80098d4:	f7f7 f872 	bl	80009bc <__aeabi_dcmpeq>
 80098d8:	b908      	cbnz	r0, 80098de <_dtoa_r+0x17e>
 80098da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098de:	f1bb 0f16 	cmp.w	fp, #22
 80098e2:	d857      	bhi.n	8009994 <_dtoa_r+0x234>
 80098e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e8:	4b5a      	ldr	r3, [pc, #360]	; (8009a54 <_dtoa_r+0x2f4>)
 80098ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f7f7 f86d 	bl	80009d0 <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d04e      	beq.n	8009998 <_dtoa_r+0x238>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009900:	930f      	str	r3, [sp, #60]	; 0x3c
 8009902:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009904:	1b1b      	subs	r3, r3, r4
 8009906:	1e5a      	subs	r2, r3, #1
 8009908:	bf46      	itte	mi
 800990a:	f1c3 0901 	rsbmi	r9, r3, #1
 800990e:	2300      	movmi	r3, #0
 8009910:	f04f 0900 	movpl.w	r9, #0
 8009914:	9209      	str	r2, [sp, #36]	; 0x24
 8009916:	bf48      	it	mi
 8009918:	9309      	strmi	r3, [sp, #36]	; 0x24
 800991a:	f1bb 0f00 	cmp.w	fp, #0
 800991e:	db3d      	blt.n	800999c <_dtoa_r+0x23c>
 8009920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009922:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009926:	445b      	add	r3, fp
 8009928:	9309      	str	r3, [sp, #36]	; 0x24
 800992a:	2300      	movs	r3, #0
 800992c:	930a      	str	r3, [sp, #40]	; 0x28
 800992e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009930:	2b09      	cmp	r3, #9
 8009932:	d867      	bhi.n	8009a04 <_dtoa_r+0x2a4>
 8009934:	2b05      	cmp	r3, #5
 8009936:	bfc4      	itt	gt
 8009938:	3b04      	subgt	r3, #4
 800993a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800993c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800993e:	bfc8      	it	gt
 8009940:	2400      	movgt	r4, #0
 8009942:	f1a3 0302 	sub.w	r3, r3, #2
 8009946:	bfd8      	it	le
 8009948:	2401      	movle	r4, #1
 800994a:	2b03      	cmp	r3, #3
 800994c:	f200 8086 	bhi.w	8009a5c <_dtoa_r+0x2fc>
 8009950:	e8df f003 	tbb	[pc, r3]
 8009954:	5637392c 	.word	0x5637392c
 8009958:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800995c:	441c      	add	r4, r3
 800995e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009962:	2b20      	cmp	r3, #32
 8009964:	bfc1      	itttt	gt
 8009966:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800996a:	fa09 f903 	lslgt.w	r9, r9, r3
 800996e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009972:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009976:	bfd6      	itet	le
 8009978:	f1c3 0320 	rsble	r3, r3, #32
 800997c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009980:	fa06 f003 	lslle.w	r0, r6, r3
 8009984:	f7f6 fd38 	bl	80003f8 <__aeabi_ui2d>
 8009988:	2201      	movs	r2, #1
 800998a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800998e:	3c01      	subs	r4, #1
 8009990:	9213      	str	r2, [sp, #76]	; 0x4c
 8009992:	e76f      	b.n	8009874 <_dtoa_r+0x114>
 8009994:	2301      	movs	r3, #1
 8009996:	e7b3      	b.n	8009900 <_dtoa_r+0x1a0>
 8009998:	900f      	str	r0, [sp, #60]	; 0x3c
 800999a:	e7b2      	b.n	8009902 <_dtoa_r+0x1a2>
 800999c:	f1cb 0300 	rsb	r3, fp, #0
 80099a0:	930a      	str	r3, [sp, #40]	; 0x28
 80099a2:	2300      	movs	r3, #0
 80099a4:	eba9 090b 	sub.w	r9, r9, fp
 80099a8:	930e      	str	r3, [sp, #56]	; 0x38
 80099aa:	e7c0      	b.n	800992e <_dtoa_r+0x1ce>
 80099ac:	2300      	movs	r3, #0
 80099ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80099b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	dc55      	bgt.n	8009a62 <_dtoa_r+0x302>
 80099b6:	2301      	movs	r3, #1
 80099b8:	461a      	mov	r2, r3
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	9308      	str	r3, [sp, #32]
 80099be:	9223      	str	r2, [sp, #140]	; 0x8c
 80099c0:	e00b      	b.n	80099da <_dtoa_r+0x27a>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e7f3      	b.n	80099ae <_dtoa_r+0x24e>
 80099c6:	2300      	movs	r3, #0
 80099c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80099ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099cc:	445b      	add	r3, fp
 80099ce:	9306      	str	r3, [sp, #24]
 80099d0:	3301      	adds	r3, #1
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	9308      	str	r3, [sp, #32]
 80099d6:	bfb8      	it	lt
 80099d8:	2301      	movlt	r3, #1
 80099da:	2100      	movs	r1, #0
 80099dc:	2204      	movs	r2, #4
 80099de:	69e8      	ldr	r0, [r5, #28]
 80099e0:	f102 0614 	add.w	r6, r2, #20
 80099e4:	429e      	cmp	r6, r3
 80099e6:	d940      	bls.n	8009a6a <_dtoa_r+0x30a>
 80099e8:	6041      	str	r1, [r0, #4]
 80099ea:	4628      	mov	r0, r5
 80099ec:	f001 f850 	bl	800aa90 <_Balloc>
 80099f0:	9003      	str	r0, [sp, #12]
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d13c      	bne.n	8009a70 <_dtoa_r+0x310>
 80099f6:	4602      	mov	r2, r0
 80099f8:	f240 11af 	movw	r1, #431	; 0x1af
 80099fc:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <_dtoa_r+0x2f8>)
 80099fe:	e6c3      	b.n	8009788 <_dtoa_r+0x28>
 8009a00:	2301      	movs	r3, #1
 8009a02:	e7e1      	b.n	80099c8 <_dtoa_r+0x268>
 8009a04:	2401      	movs	r4, #1
 8009a06:	2300      	movs	r3, #0
 8009a08:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a0a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a10:	2200      	movs	r2, #0
 8009a12:	9306      	str	r3, [sp, #24]
 8009a14:	9308      	str	r3, [sp, #32]
 8009a16:	2312      	movs	r3, #18
 8009a18:	e7d1      	b.n	80099be <_dtoa_r+0x25e>
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w
 8009a20:	636f4361 	.word	0x636f4361
 8009a24:	3fd287a7 	.word	0x3fd287a7
 8009a28:	8b60c8b3 	.word	0x8b60c8b3
 8009a2c:	3fc68a28 	.word	0x3fc68a28
 8009a30:	509f79fb 	.word	0x509f79fb
 8009a34:	3fd34413 	.word	0x3fd34413
 8009a38:	0800be25 	.word	0x0800be25
 8009a3c:	0800bee7 	.word	0x0800bee7
 8009a40:	7ff00000 	.word	0x7ff00000
 8009a44:	0800bee3 	.word	0x0800bee3
 8009a48:	0800beda 	.word	0x0800beda
 8009a4c:	0800be02 	.word	0x0800be02
 8009a50:	3ff80000 	.word	0x3ff80000
 8009a54:	0800c038 	.word	0x0800c038
 8009a58:	0800bf3f 	.word	0x0800bf3f
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a60:	e7d4      	b.n	8009a0c <_dtoa_r+0x2ac>
 8009a62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a64:	9306      	str	r3, [sp, #24]
 8009a66:	9308      	str	r3, [sp, #32]
 8009a68:	e7b7      	b.n	80099da <_dtoa_r+0x27a>
 8009a6a:	3101      	adds	r1, #1
 8009a6c:	0052      	lsls	r2, r2, #1
 8009a6e:	e7b7      	b.n	80099e0 <_dtoa_r+0x280>
 8009a70:	69eb      	ldr	r3, [r5, #28]
 8009a72:	9a03      	ldr	r2, [sp, #12]
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	2b0e      	cmp	r3, #14
 8009a7a:	f200 80a8 	bhi.w	8009bce <_dtoa_r+0x46e>
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	f000 80a5 	beq.w	8009bce <_dtoa_r+0x46e>
 8009a84:	f1bb 0f00 	cmp.w	fp, #0
 8009a88:	dd34      	ble.n	8009af4 <_dtoa_r+0x394>
 8009a8a:	4b9a      	ldr	r3, [pc, #616]	; (8009cf4 <_dtoa_r+0x594>)
 8009a8c:	f00b 020f 	and.w	r2, fp, #15
 8009a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009aa0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009aa4:	d016      	beq.n	8009ad4 <_dtoa_r+0x374>
 8009aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009aaa:	4b93      	ldr	r3, [pc, #588]	; (8009cf8 <_dtoa_r+0x598>)
 8009aac:	2703      	movs	r7, #3
 8009aae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ab2:	f7f6 fe45 	bl	8000740 <__aeabi_ddiv>
 8009ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aba:	f004 040f 	and.w	r4, r4, #15
 8009abe:	4e8e      	ldr	r6, [pc, #568]	; (8009cf8 <_dtoa_r+0x598>)
 8009ac0:	b954      	cbnz	r4, 8009ad8 <_dtoa_r+0x378>
 8009ac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aca:	f7f6 fe39 	bl	8000740 <__aeabi_ddiv>
 8009ace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad2:	e029      	b.n	8009b28 <_dtoa_r+0x3c8>
 8009ad4:	2702      	movs	r7, #2
 8009ad6:	e7f2      	b.n	8009abe <_dtoa_r+0x35e>
 8009ad8:	07e1      	lsls	r1, r4, #31
 8009ada:	d508      	bpl.n	8009aee <_dtoa_r+0x38e>
 8009adc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ae4:	f7f6 fd02 	bl	80004ec <__aeabi_dmul>
 8009ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009aec:	3701      	adds	r7, #1
 8009aee:	1064      	asrs	r4, r4, #1
 8009af0:	3608      	adds	r6, #8
 8009af2:	e7e5      	b.n	8009ac0 <_dtoa_r+0x360>
 8009af4:	f000 80a5 	beq.w	8009c42 <_dtoa_r+0x4e2>
 8009af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009afc:	f1cb 0400 	rsb	r4, fp, #0
 8009b00:	4b7c      	ldr	r3, [pc, #496]	; (8009cf4 <_dtoa_r+0x594>)
 8009b02:	f004 020f 	and.w	r2, r4, #15
 8009b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fced 	bl	80004ec <__aeabi_dmul>
 8009b12:	2702      	movs	r7, #2
 8009b14:	2300      	movs	r3, #0
 8009b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b1a:	4e77      	ldr	r6, [pc, #476]	; (8009cf8 <_dtoa_r+0x598>)
 8009b1c:	1124      	asrs	r4, r4, #4
 8009b1e:	2c00      	cmp	r4, #0
 8009b20:	f040 8084 	bne.w	8009c2c <_dtoa_r+0x4cc>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1d2      	bne.n	8009ace <_dtoa_r+0x36e>
 8009b28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 8087 	beq.w	8009c46 <_dtoa_r+0x4e6>
 8009b38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4b6f      	ldr	r3, [pc, #444]	; (8009cfc <_dtoa_r+0x59c>)
 8009b40:	f7f6 ff46 	bl	80009d0 <__aeabi_dcmplt>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d07e      	beq.n	8009c46 <_dtoa_r+0x4e6>
 8009b48:	9b08      	ldr	r3, [sp, #32]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d07b      	beq.n	8009c46 <_dtoa_r+0x4e6>
 8009b4e:	9b06      	ldr	r3, [sp, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dd38      	ble.n	8009bc6 <_dtoa_r+0x466>
 8009b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4b69      	ldr	r3, [pc, #420]	; (8009d00 <_dtoa_r+0x5a0>)
 8009b5c:	f7f6 fcc6 	bl	80004ec <__aeabi_dmul>
 8009b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b64:	9c06      	ldr	r4, [sp, #24]
 8009b66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009b6a:	3701      	adds	r7, #1
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f7f6 fc53 	bl	8000418 <__aeabi_i2d>
 8009b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b76:	f7f6 fcb9 	bl	80004ec <__aeabi_dmul>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4b61      	ldr	r3, [pc, #388]	; (8009d04 <_dtoa_r+0x5a4>)
 8009b7e:	f7f6 faff 	bl	8000180 <__adddf3>
 8009b82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009b86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b8a:	9611      	str	r6, [sp, #68]	; 0x44
 8009b8c:	2c00      	cmp	r4, #0
 8009b8e:	d15d      	bne.n	8009c4c <_dtoa_r+0x4ec>
 8009b90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b94:	2200      	movs	r2, #0
 8009b96:	4b5c      	ldr	r3, [pc, #368]	; (8009d08 <_dtoa_r+0x5a8>)
 8009b98:	f7f6 faf0 	bl	800017c <__aeabi_dsub>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ba4:	4633      	mov	r3, r6
 8009ba6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ba8:	f7f6 ff30 	bl	8000a0c <__aeabi_dcmpgt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f040 8295 	bne.w	800a0dc <_dtoa_r+0x97c>
 8009bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009bbc:	f7f6 ff08 	bl	80009d0 <__aeabi_dcmplt>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f040 8289 	bne.w	800a0d8 <_dtoa_r+0x978>
 8009bc6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009bca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f2c0 8151 	blt.w	8009e78 <_dtoa_r+0x718>
 8009bd6:	f1bb 0f0e 	cmp.w	fp, #14
 8009bda:	f300 814d 	bgt.w	8009e78 <_dtoa_r+0x718>
 8009bde:	4b45      	ldr	r3, [pc, #276]	; (8009cf4 <_dtoa_r+0x594>)
 8009be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009be4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009be8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009bec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f280 80da 	bge.w	8009da8 <_dtoa_r+0x648>
 8009bf4:	9b08      	ldr	r3, [sp, #32]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f300 80d6 	bgt.w	8009da8 <_dtoa_r+0x648>
 8009bfc:	f040 826b 	bne.w	800a0d6 <_dtoa_r+0x976>
 8009c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c04:	2200      	movs	r2, #0
 8009c06:	4b40      	ldr	r3, [pc, #256]	; (8009d08 <_dtoa_r+0x5a8>)
 8009c08:	f7f6 fc70 	bl	80004ec <__aeabi_dmul>
 8009c0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c10:	f7f6 fef2 	bl	80009f8 <__aeabi_dcmpge>
 8009c14:	9c08      	ldr	r4, [sp, #32]
 8009c16:	4626      	mov	r6, r4
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	f040 8241 	bne.w	800a0a0 <_dtoa_r+0x940>
 8009c1e:	2331      	movs	r3, #49	; 0x31
 8009c20:	9f03      	ldr	r7, [sp, #12]
 8009c22:	f10b 0b01 	add.w	fp, fp, #1
 8009c26:	f807 3b01 	strb.w	r3, [r7], #1
 8009c2a:	e23d      	b.n	800a0a8 <_dtoa_r+0x948>
 8009c2c:	07e2      	lsls	r2, r4, #31
 8009c2e:	d505      	bpl.n	8009c3c <_dtoa_r+0x4dc>
 8009c30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c34:	f7f6 fc5a 	bl	80004ec <__aeabi_dmul>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	3701      	adds	r7, #1
 8009c3c:	1064      	asrs	r4, r4, #1
 8009c3e:	3608      	adds	r6, #8
 8009c40:	e76d      	b.n	8009b1e <_dtoa_r+0x3be>
 8009c42:	2702      	movs	r7, #2
 8009c44:	e770      	b.n	8009b28 <_dtoa_r+0x3c8>
 8009c46:	46d8      	mov	r8, fp
 8009c48:	9c08      	ldr	r4, [sp, #32]
 8009c4a:	e78f      	b.n	8009b6c <_dtoa_r+0x40c>
 8009c4c:	9903      	ldr	r1, [sp, #12]
 8009c4e:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <_dtoa_r+0x594>)
 8009c50:	4421      	add	r1, r4
 8009c52:	9112      	str	r1, [sp, #72]	; 0x48
 8009c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c5a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009c5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d054      	beq.n	8009d10 <_dtoa_r+0x5b0>
 8009c66:	2000      	movs	r0, #0
 8009c68:	4928      	ldr	r1, [pc, #160]	; (8009d0c <_dtoa_r+0x5ac>)
 8009c6a:	f7f6 fd69 	bl	8000740 <__aeabi_ddiv>
 8009c6e:	463b      	mov	r3, r7
 8009c70:	4632      	mov	r2, r6
 8009c72:	f7f6 fa83 	bl	800017c <__aeabi_dsub>
 8009c76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c7a:	9f03      	ldr	r7, [sp, #12]
 8009c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c80:	f7f6 fee4 	bl	8000a4c <__aeabi_d2iz>
 8009c84:	4604      	mov	r4, r0
 8009c86:	f7f6 fbc7 	bl	8000418 <__aeabi_i2d>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c92:	f7f6 fa73 	bl	800017c <__aeabi_dsub>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	3430      	adds	r4, #48	; 0x30
 8009c9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ca4:	f807 4b01 	strb.w	r4, [r7], #1
 8009ca8:	f7f6 fe92 	bl	80009d0 <__aeabi_dcmplt>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d173      	bne.n	8009d98 <_dtoa_r+0x638>
 8009cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4911      	ldr	r1, [pc, #68]	; (8009cfc <_dtoa_r+0x59c>)
 8009cb8:	f7f6 fa60 	bl	800017c <__aeabi_dsub>
 8009cbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cc0:	f7f6 fe86 	bl	80009d0 <__aeabi_dcmplt>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f040 80b6 	bne.w	8009e36 <_dtoa_r+0x6d6>
 8009cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ccc:	429f      	cmp	r7, r3
 8009cce:	f43f af7a 	beq.w	8009bc6 <_dtoa_r+0x466>
 8009cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <_dtoa_r+0x5a0>)
 8009cda:	f7f6 fc07 	bl	80004ec <__aeabi_dmul>
 8009cde:	2200      	movs	r2, #0
 8009ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce8:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <_dtoa_r+0x5a0>)
 8009cea:	f7f6 fbff 	bl	80004ec <__aeabi_dmul>
 8009cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cf2:	e7c3      	b.n	8009c7c <_dtoa_r+0x51c>
 8009cf4:	0800c038 	.word	0x0800c038
 8009cf8:	0800c010 	.word	0x0800c010
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	40240000 	.word	0x40240000
 8009d04:	401c0000 	.word	0x401c0000
 8009d08:	40140000 	.word	0x40140000
 8009d0c:	3fe00000 	.word	0x3fe00000
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fbea 	bl	80004ec <__aeabi_dmul>
 8009d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d1e:	9c03      	ldr	r4, [sp, #12]
 8009d20:	9314      	str	r3, [sp, #80]	; 0x50
 8009d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d26:	f7f6 fe91 	bl	8000a4c <__aeabi_d2iz>
 8009d2a:	9015      	str	r0, [sp, #84]	; 0x54
 8009d2c:	f7f6 fb74 	bl	8000418 <__aeabi_i2d>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d38:	f7f6 fa20 	bl	800017c <__aeabi_dsub>
 8009d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d3e:	4606      	mov	r6, r0
 8009d40:	3330      	adds	r3, #48	; 0x30
 8009d42:	f804 3b01 	strb.w	r3, [r4], #1
 8009d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d48:	460f      	mov	r7, r1
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	d124      	bne.n	8009d9c <_dtoa_r+0x63c>
 8009d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d56:	4baf      	ldr	r3, [pc, #700]	; (800a014 <_dtoa_r+0x8b4>)
 8009d58:	f7f6 fa12 	bl	8000180 <__adddf3>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4630      	mov	r0, r6
 8009d62:	4639      	mov	r1, r7
 8009d64:	f7f6 fe52 	bl	8000a0c <__aeabi_dcmpgt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d163      	bne.n	8009e34 <_dtoa_r+0x6d4>
 8009d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d70:	2000      	movs	r0, #0
 8009d72:	49a8      	ldr	r1, [pc, #672]	; (800a014 <_dtoa_r+0x8b4>)
 8009d74:	f7f6 fa02 	bl	800017c <__aeabi_dsub>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fe26 	bl	80009d0 <__aeabi_dcmplt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f af1e 	beq.w	8009bc6 <_dtoa_r+0x466>
 8009d8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009d8c:	1e7b      	subs	r3, r7, #1
 8009d8e:	9314      	str	r3, [sp, #80]	; 0x50
 8009d90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009d94:	2b30      	cmp	r3, #48	; 0x30
 8009d96:	d0f8      	beq.n	8009d8a <_dtoa_r+0x62a>
 8009d98:	46c3      	mov	fp, r8
 8009d9a:	e03b      	b.n	8009e14 <_dtoa_r+0x6b4>
 8009d9c:	4b9e      	ldr	r3, [pc, #632]	; (800a018 <_dtoa_r+0x8b8>)
 8009d9e:	f7f6 fba5 	bl	80004ec <__aeabi_dmul>
 8009da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009da6:	e7bc      	b.n	8009d22 <_dtoa_r+0x5c2>
 8009da8:	9f03      	ldr	r7, [sp, #12]
 8009daa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db2:	4640      	mov	r0, r8
 8009db4:	4649      	mov	r1, r9
 8009db6:	f7f6 fcc3 	bl	8000740 <__aeabi_ddiv>
 8009dba:	f7f6 fe47 	bl	8000a4c <__aeabi_d2iz>
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	f7f6 fb2a 	bl	8000418 <__aeabi_i2d>
 8009dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dc8:	f7f6 fb90 	bl	80004ec <__aeabi_dmul>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7f6 f9d2 	bl	800017c <__aeabi_dsub>
 8009dd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009ddc:	f807 6b01 	strb.w	r6, [r7], #1
 8009de0:	9e03      	ldr	r6, [sp, #12]
 8009de2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009de6:	1bbe      	subs	r6, r7, r6
 8009de8:	45b4      	cmp	ip, r6
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	d136      	bne.n	8009e5e <_dtoa_r+0x6fe>
 8009df0:	f7f6 f9c6 	bl	8000180 <__adddf3>
 8009df4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009df8:	4680      	mov	r8, r0
 8009dfa:	4689      	mov	r9, r1
 8009dfc:	f7f6 fe06 	bl	8000a0c <__aeabi_dcmpgt>
 8009e00:	bb58      	cbnz	r0, 8009e5a <_dtoa_r+0x6fa>
 8009e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 fdd7 	bl	80009bc <__aeabi_dcmpeq>
 8009e0e:	b108      	cbz	r0, 8009e14 <_dtoa_r+0x6b4>
 8009e10:	07e3      	lsls	r3, r4, #31
 8009e12:	d422      	bmi.n	8009e5a <_dtoa_r+0x6fa>
 8009e14:	4651      	mov	r1, sl
 8009e16:	4628      	mov	r0, r5
 8009e18:	f000 fe7a 	bl	800ab10 <_Bfree>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e20:	703b      	strb	r3, [r7, #0]
 8009e22:	f10b 0301 	add.w	r3, fp, #1
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f43f ace6 	beq.w	80097fc <_dtoa_r+0x9c>
 8009e30:	601f      	str	r7, [r3, #0]
 8009e32:	e4e3      	b.n	80097fc <_dtoa_r+0x9c>
 8009e34:	4627      	mov	r7, r4
 8009e36:	463b      	mov	r3, r7
 8009e38:	461f      	mov	r7, r3
 8009e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e3e:	2a39      	cmp	r2, #57	; 0x39
 8009e40:	d107      	bne.n	8009e52 <_dtoa_r+0x6f2>
 8009e42:	9a03      	ldr	r2, [sp, #12]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d1f7      	bne.n	8009e38 <_dtoa_r+0x6d8>
 8009e48:	2230      	movs	r2, #48	; 0x30
 8009e4a:	9903      	ldr	r1, [sp, #12]
 8009e4c:	f108 0801 	add.w	r8, r8, #1
 8009e50:	700a      	strb	r2, [r1, #0]
 8009e52:	781a      	ldrb	r2, [r3, #0]
 8009e54:	3201      	adds	r2, #1
 8009e56:	701a      	strb	r2, [r3, #0]
 8009e58:	e79e      	b.n	8009d98 <_dtoa_r+0x638>
 8009e5a:	46d8      	mov	r8, fp
 8009e5c:	e7eb      	b.n	8009e36 <_dtoa_r+0x6d6>
 8009e5e:	2200      	movs	r2, #0
 8009e60:	4b6d      	ldr	r3, [pc, #436]	; (800a018 <_dtoa_r+0x8b8>)
 8009e62:	f7f6 fb43 	bl	80004ec <__aeabi_dmul>
 8009e66:	2200      	movs	r2, #0
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4680      	mov	r8, r0
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	f7f6 fda5 	bl	80009bc <__aeabi_dcmpeq>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d09b      	beq.n	8009dae <_dtoa_r+0x64e>
 8009e76:	e7cd      	b.n	8009e14 <_dtoa_r+0x6b4>
 8009e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e7a:	2a00      	cmp	r2, #0
 8009e7c:	f000 80c4 	beq.w	800a008 <_dtoa_r+0x8a8>
 8009e80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e82:	2a01      	cmp	r2, #1
 8009e84:	f300 80a8 	bgt.w	8009fd8 <_dtoa_r+0x878>
 8009e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	f000 80a0 	beq.w	8009fd0 <_dtoa_r+0x870>
 8009e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e94:	464f      	mov	r7, r9
 8009e96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	441a      	add	r2, r3
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	4499      	add	r9, r3
 8009ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea4:	f000 ff34 	bl	800ad10 <__i2b>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	b15f      	cbz	r7, 8009ec4 <_dtoa_r+0x764>
 8009eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dd08      	ble.n	8009ec4 <_dtoa_r+0x764>
 8009eb2:	42bb      	cmp	r3, r7
 8009eb4:	bfa8      	it	ge
 8009eb6:	463b      	movge	r3, r7
 8009eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eba:	eba9 0903 	sub.w	r9, r9, r3
 8009ebe:	1aff      	subs	r7, r7, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec6:	b1f3      	cbz	r3, 8009f06 <_dtoa_r+0x7a6>
 8009ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 80a0 	beq.w	800a010 <_dtoa_r+0x8b0>
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	dd10      	ble.n	8009ef6 <_dtoa_r+0x796>
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f000 ffd7 	bl	800ae8c <__pow5mult>
 8009ede:	4652      	mov	r2, sl
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 ff29 	bl	800ad3c <__multiply>
 8009eea:	4680      	mov	r8, r0
 8009eec:	4651      	mov	r1, sl
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f000 fe0e 	bl	800ab10 <_Bfree>
 8009ef4:	46c2      	mov	sl, r8
 8009ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef8:	1b1a      	subs	r2, r3, r4
 8009efa:	d004      	beq.n	8009f06 <_dtoa_r+0x7a6>
 8009efc:	4651      	mov	r1, sl
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 ffc4 	bl	800ae8c <__pow5mult>
 8009f04:	4682      	mov	sl, r0
 8009f06:	2101      	movs	r1, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 ff01 	bl	800ad10 <__i2b>
 8009f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f10:	4604      	mov	r4, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f340 8082 	ble.w	800a01c <_dtoa_r+0x8bc>
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f000 ffb5 	bl	800ae8c <__pow5mult>
 8009f22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f24:	4604      	mov	r4, r0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	dd7b      	ble.n	800a022 <_dtoa_r+0x8c2>
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f34:	6918      	ldr	r0, [r3, #16]
 8009f36:	f000 fe9d 	bl	800ac74 <__hi0bits>
 8009f3a:	f1c0 0020 	rsb	r0, r0, #32
 8009f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f40:	4418      	add	r0, r3
 8009f42:	f010 001f 	ands.w	r0, r0, #31
 8009f46:	f000 8092 	beq.w	800a06e <_dtoa_r+0x90e>
 8009f4a:	f1c0 0320 	rsb	r3, r0, #32
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	f340 8085 	ble.w	800a05e <_dtoa_r+0x8fe>
 8009f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f56:	f1c0 001c 	rsb	r0, r0, #28
 8009f5a:	4403      	add	r3, r0
 8009f5c:	4481      	add	r9, r0
 8009f5e:	4407      	add	r7, r0
 8009f60:	9309      	str	r3, [sp, #36]	; 0x24
 8009f62:	f1b9 0f00 	cmp.w	r9, #0
 8009f66:	dd05      	ble.n	8009f74 <_dtoa_r+0x814>
 8009f68:	4651      	mov	r1, sl
 8009f6a:	464a      	mov	r2, r9
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 ffe7 	bl	800af40 <__lshift>
 8009f72:	4682      	mov	sl, r0
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dd05      	ble.n	8009f86 <_dtoa_r+0x826>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f000 ffde 	bl	800af40 <__lshift>
 8009f84:	4604      	mov	r4, r0
 8009f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d072      	beq.n	800a072 <_dtoa_r+0x912>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4650      	mov	r0, sl
 8009f90:	f001 f842 	bl	800b018 <__mcmp>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	da6c      	bge.n	800a072 <_dtoa_r+0x912>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4651      	mov	r1, sl
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 fdd8 	bl	800ab54 <__multadd>
 8009fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa6:	4682      	mov	sl, r0
 8009fa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 81ac 	beq.w	800a30a <_dtoa_r+0xbaa>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f000 fdcb 	bl	800ab54 <__multadd>
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f300 8093 	bgt.w	800a0ee <_dtoa_r+0x98e>
 8009fc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	dc59      	bgt.n	800a082 <_dtoa_r+0x922>
 8009fce:	e08e      	b.n	800a0ee <_dtoa_r+0x98e>
 8009fd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009fd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fd6:	e75d      	b.n	8009e94 <_dtoa_r+0x734>
 8009fd8:	9b08      	ldr	r3, [sp, #32]
 8009fda:	1e5c      	subs	r4, r3, #1
 8009fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	bfbf      	itttt	lt
 8009fe2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009fe4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009fe6:	1ae3      	sublt	r3, r4, r3
 8009fe8:	18d2      	addlt	r2, r2, r3
 8009fea:	bfa8      	it	ge
 8009fec:	1b1c      	subge	r4, r3, r4
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	bfbe      	ittt	lt
 8009ff2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009ff4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009ff6:	2400      	movlt	r4, #0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfb5      	itete	lt
 8009ffc:	eba9 0703 	sublt.w	r7, r9, r3
 800a000:	464f      	movge	r7, r9
 800a002:	2300      	movlt	r3, #0
 800a004:	9b08      	ldrge	r3, [sp, #32]
 800a006:	e747      	b.n	8009e98 <_dtoa_r+0x738>
 800a008:	464f      	mov	r7, r9
 800a00a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a00c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a00e:	e74c      	b.n	8009eaa <_dtoa_r+0x74a>
 800a010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a012:	e773      	b.n	8009efc <_dtoa_r+0x79c>
 800a014:	3fe00000 	.word	0x3fe00000
 800a018:	40240000 	.word	0x40240000
 800a01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a01e:	2b01      	cmp	r3, #1
 800a020:	dc18      	bgt.n	800a054 <_dtoa_r+0x8f4>
 800a022:	9b04      	ldr	r3, [sp, #16]
 800a024:	b9b3      	cbnz	r3, 800a054 <_dtoa_r+0x8f4>
 800a026:	9b05      	ldr	r3, [sp, #20]
 800a028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a02c:	b993      	cbnz	r3, 800a054 <_dtoa_r+0x8f4>
 800a02e:	9b05      	ldr	r3, [sp, #20]
 800a030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a034:	0d1b      	lsrs	r3, r3, #20
 800a036:	051b      	lsls	r3, r3, #20
 800a038:	b17b      	cbz	r3, 800a05a <_dtoa_r+0x8fa>
 800a03a:	f04f 0801 	mov.w	r8, #1
 800a03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a040:	f109 0901 	add.w	r9, r9, #1
 800a044:	3301      	adds	r3, #1
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f47f af6f 	bne.w	8009f2e <_dtoa_r+0x7ce>
 800a050:	2001      	movs	r0, #1
 800a052:	e774      	b.n	8009f3e <_dtoa_r+0x7de>
 800a054:	f04f 0800 	mov.w	r8, #0
 800a058:	e7f6      	b.n	800a048 <_dtoa_r+0x8e8>
 800a05a:	4698      	mov	r8, r3
 800a05c:	e7f4      	b.n	800a048 <_dtoa_r+0x8e8>
 800a05e:	d080      	beq.n	8009f62 <_dtoa_r+0x802>
 800a060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a062:	331c      	adds	r3, #28
 800a064:	441a      	add	r2, r3
 800a066:	4499      	add	r9, r3
 800a068:	441f      	add	r7, r3
 800a06a:	9209      	str	r2, [sp, #36]	; 0x24
 800a06c:	e779      	b.n	8009f62 <_dtoa_r+0x802>
 800a06e:	4603      	mov	r3, r0
 800a070:	e7f6      	b.n	800a060 <_dtoa_r+0x900>
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	2b00      	cmp	r3, #0
 800a076:	dc34      	bgt.n	800a0e2 <_dtoa_r+0x982>
 800a078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	dd31      	ble.n	800a0e2 <_dtoa_r+0x982>
 800a07e:	9b08      	ldr	r3, [sp, #32]
 800a080:	9306      	str	r3, [sp, #24]
 800a082:	9b06      	ldr	r3, [sp, #24]
 800a084:	b963      	cbnz	r3, 800a0a0 <_dtoa_r+0x940>
 800a086:	4621      	mov	r1, r4
 800a088:	2205      	movs	r2, #5
 800a08a:	4628      	mov	r0, r5
 800a08c:	f000 fd62 	bl	800ab54 <__multadd>
 800a090:	4601      	mov	r1, r0
 800a092:	4604      	mov	r4, r0
 800a094:	4650      	mov	r0, sl
 800a096:	f000 ffbf 	bl	800b018 <__mcmp>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	f73f adbf 	bgt.w	8009c1e <_dtoa_r+0x4be>
 800a0a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0a2:	9f03      	ldr	r7, [sp, #12]
 800a0a4:	ea6f 0b03 	mvn.w	fp, r3
 800a0a8:	f04f 0800 	mov.w	r8, #0
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f000 fd2e 	bl	800ab10 <_Bfree>
 800a0b4:	2e00      	cmp	r6, #0
 800a0b6:	f43f aead 	beq.w	8009e14 <_dtoa_r+0x6b4>
 800a0ba:	f1b8 0f00 	cmp.w	r8, #0
 800a0be:	d005      	beq.n	800a0cc <_dtoa_r+0x96c>
 800a0c0:	45b0      	cmp	r8, r6
 800a0c2:	d003      	beq.n	800a0cc <_dtoa_r+0x96c>
 800a0c4:	4641      	mov	r1, r8
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 fd22 	bl	800ab10 <_Bfree>
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f000 fd1e 	bl	800ab10 <_Bfree>
 800a0d4:	e69e      	b.n	8009e14 <_dtoa_r+0x6b4>
 800a0d6:	2400      	movs	r4, #0
 800a0d8:	4626      	mov	r6, r4
 800a0da:	e7e1      	b.n	800a0a0 <_dtoa_r+0x940>
 800a0dc:	46c3      	mov	fp, r8
 800a0de:	4626      	mov	r6, r4
 800a0e0:	e59d      	b.n	8009c1e <_dtoa_r+0x4be>
 800a0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 80c8 	beq.w	800a27a <_dtoa_r+0xb1a>
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	9306      	str	r3, [sp, #24]
 800a0ee:	2f00      	cmp	r7, #0
 800a0f0:	dd05      	ble.n	800a0fe <_dtoa_r+0x99e>
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f000 ff22 	bl	800af40 <__lshift>
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	f1b8 0f00 	cmp.w	r8, #0
 800a102:	d05b      	beq.n	800a1bc <_dtoa_r+0xa5c>
 800a104:	4628      	mov	r0, r5
 800a106:	6871      	ldr	r1, [r6, #4]
 800a108:	f000 fcc2 	bl	800aa90 <_Balloc>
 800a10c:	4607      	mov	r7, r0
 800a10e:	b928      	cbnz	r0, 800a11c <_dtoa_r+0x9bc>
 800a110:	4602      	mov	r2, r0
 800a112:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a116:	4b81      	ldr	r3, [pc, #516]	; (800a31c <_dtoa_r+0xbbc>)
 800a118:	f7ff bb36 	b.w	8009788 <_dtoa_r+0x28>
 800a11c:	6932      	ldr	r2, [r6, #16]
 800a11e:	f106 010c 	add.w	r1, r6, #12
 800a122:	3202      	adds	r2, #2
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	300c      	adds	r0, #12
 800a128:	f7ff fa57 	bl	80095da <memcpy>
 800a12c:	2201      	movs	r2, #1
 800a12e:	4639      	mov	r1, r7
 800a130:	4628      	mov	r0, r5
 800a132:	f000 ff05 	bl	800af40 <__lshift>
 800a136:	46b0      	mov	r8, r6
 800a138:	4606      	mov	r6, r0
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	9a03      	ldr	r2, [sp, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	9b06      	ldr	r3, [sp, #24]
 800a144:	4413      	add	r3, r2
 800a146:	930b      	str	r3, [sp, #44]	; 0x2c
 800a148:	9b04      	ldr	r3, [sp, #16]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	930a      	str	r3, [sp, #40]	; 0x28
 800a150:	9b08      	ldr	r3, [sp, #32]
 800a152:	4621      	mov	r1, r4
 800a154:	3b01      	subs	r3, #1
 800a156:	4650      	mov	r0, sl
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	f7ff fa75 	bl	8009648 <quorem>
 800a15e:	4641      	mov	r1, r8
 800a160:	9006      	str	r0, [sp, #24]
 800a162:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a166:	4650      	mov	r0, sl
 800a168:	f000 ff56 	bl	800b018 <__mcmp>
 800a16c:	4632      	mov	r2, r6
 800a16e:	9009      	str	r0, [sp, #36]	; 0x24
 800a170:	4621      	mov	r1, r4
 800a172:	4628      	mov	r0, r5
 800a174:	f000 ff6c 	bl	800b050 <__mdiff>
 800a178:	68c2      	ldr	r2, [r0, #12]
 800a17a:	4607      	mov	r7, r0
 800a17c:	bb02      	cbnz	r2, 800a1c0 <_dtoa_r+0xa60>
 800a17e:	4601      	mov	r1, r0
 800a180:	4650      	mov	r0, sl
 800a182:	f000 ff49 	bl	800b018 <__mcmp>
 800a186:	4602      	mov	r2, r0
 800a188:	4639      	mov	r1, r7
 800a18a:	4628      	mov	r0, r5
 800a18c:	920c      	str	r2, [sp, #48]	; 0x30
 800a18e:	f000 fcbf 	bl	800ab10 <_Bfree>
 800a192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a196:	9f08      	ldr	r7, [sp, #32]
 800a198:	ea43 0102 	orr.w	r1, r3, r2
 800a19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19e:	4319      	orrs	r1, r3
 800a1a0:	d110      	bne.n	800a1c4 <_dtoa_r+0xa64>
 800a1a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1a6:	d029      	beq.n	800a1fc <_dtoa_r+0xa9c>
 800a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dd02      	ble.n	800a1b4 <_dtoa_r+0xa54>
 800a1ae:	9b06      	ldr	r3, [sp, #24]
 800a1b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	f883 9000 	strb.w	r9, [r3]
 800a1ba:	e777      	b.n	800a0ac <_dtoa_r+0x94c>
 800a1bc:	4630      	mov	r0, r6
 800a1be:	e7ba      	b.n	800a136 <_dtoa_r+0x9d6>
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	e7e1      	b.n	800a188 <_dtoa_r+0xa28>
 800a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	db04      	blt.n	800a1d4 <_dtoa_r+0xa74>
 800a1ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	d120      	bne.n	800a216 <_dtoa_r+0xab6>
 800a1d4:	2a00      	cmp	r2, #0
 800a1d6:	dded      	ble.n	800a1b4 <_dtoa_r+0xa54>
 800a1d8:	4651      	mov	r1, sl
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 feaf 	bl	800af40 <__lshift>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	f000 ff17 	bl	800b018 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	dc03      	bgt.n	800a1f6 <_dtoa_r+0xa96>
 800a1ee:	d1e1      	bne.n	800a1b4 <_dtoa_r+0xa54>
 800a1f0:	f019 0f01 	tst.w	r9, #1
 800a1f4:	d0de      	beq.n	800a1b4 <_dtoa_r+0xa54>
 800a1f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1fa:	d1d8      	bne.n	800a1ae <_dtoa_r+0xa4e>
 800a1fc:	2339      	movs	r3, #57	; 0x39
 800a1fe:	9a04      	ldr	r2, [sp, #16]
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	463b      	mov	r3, r7
 800a204:	461f      	mov	r7, r3
 800a206:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2a39      	cmp	r2, #57	; 0x39
 800a20e:	d06b      	beq.n	800a2e8 <_dtoa_r+0xb88>
 800a210:	3201      	adds	r2, #1
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e74a      	b.n	800a0ac <_dtoa_r+0x94c>
 800a216:	2a00      	cmp	r2, #0
 800a218:	dd07      	ble.n	800a22a <_dtoa_r+0xaca>
 800a21a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a21e:	d0ed      	beq.n	800a1fc <_dtoa_r+0xa9c>
 800a220:	9a04      	ldr	r2, [sp, #16]
 800a222:	f109 0301 	add.w	r3, r9, #1
 800a226:	7013      	strb	r3, [r2, #0]
 800a228:	e740      	b.n	800a0ac <_dtoa_r+0x94c>
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a22e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a232:	4293      	cmp	r3, r2
 800a234:	d042      	beq.n	800a2bc <_dtoa_r+0xb5c>
 800a236:	4651      	mov	r1, sl
 800a238:	2300      	movs	r3, #0
 800a23a:	220a      	movs	r2, #10
 800a23c:	4628      	mov	r0, r5
 800a23e:	f000 fc89 	bl	800ab54 <__multadd>
 800a242:	45b0      	cmp	r8, r6
 800a244:	4682      	mov	sl, r0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	f04f 020a 	mov.w	r2, #10
 800a24e:	4641      	mov	r1, r8
 800a250:	4628      	mov	r0, r5
 800a252:	d107      	bne.n	800a264 <_dtoa_r+0xb04>
 800a254:	f000 fc7e 	bl	800ab54 <__multadd>
 800a258:	4680      	mov	r8, r0
 800a25a:	4606      	mov	r6, r0
 800a25c:	9b08      	ldr	r3, [sp, #32]
 800a25e:	3301      	adds	r3, #1
 800a260:	9308      	str	r3, [sp, #32]
 800a262:	e775      	b.n	800a150 <_dtoa_r+0x9f0>
 800a264:	f000 fc76 	bl	800ab54 <__multadd>
 800a268:	4631      	mov	r1, r6
 800a26a:	4680      	mov	r8, r0
 800a26c:	2300      	movs	r3, #0
 800a26e:	220a      	movs	r2, #10
 800a270:	4628      	mov	r0, r5
 800a272:	f000 fc6f 	bl	800ab54 <__multadd>
 800a276:	4606      	mov	r6, r0
 800a278:	e7f0      	b.n	800a25c <_dtoa_r+0xafc>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	9306      	str	r3, [sp, #24]
 800a27e:	9f03      	ldr	r7, [sp, #12]
 800a280:	4621      	mov	r1, r4
 800a282:	4650      	mov	r0, sl
 800a284:	f7ff f9e0 	bl	8009648 <quorem>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a28e:	f807 9b01 	strb.w	r9, [r7], #1
 800a292:	1afa      	subs	r2, r7, r3
 800a294:	9b06      	ldr	r3, [sp, #24]
 800a296:	4293      	cmp	r3, r2
 800a298:	dd07      	ble.n	800a2aa <_dtoa_r+0xb4a>
 800a29a:	4651      	mov	r1, sl
 800a29c:	2300      	movs	r3, #0
 800a29e:	220a      	movs	r2, #10
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 fc57 	bl	800ab54 <__multadd>
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	e7ea      	b.n	800a280 <_dtoa_r+0xb20>
 800a2aa:	9b06      	ldr	r3, [sp, #24]
 800a2ac:	f04f 0800 	mov.w	r8, #0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bfcc      	ite	gt
 800a2b4:	461f      	movgt	r7, r3
 800a2b6:	2701      	movle	r7, #1
 800a2b8:	9b03      	ldr	r3, [sp, #12]
 800a2ba:	441f      	add	r7, r3
 800a2bc:	4651      	mov	r1, sl
 800a2be:	2201      	movs	r2, #1
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f000 fe3d 	bl	800af40 <__lshift>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	f000 fea5 	bl	800b018 <__mcmp>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	dc97      	bgt.n	800a202 <_dtoa_r+0xaa2>
 800a2d2:	d102      	bne.n	800a2da <_dtoa_r+0xb7a>
 800a2d4:	f019 0f01 	tst.w	r9, #1
 800a2d8:	d193      	bne.n	800a202 <_dtoa_r+0xaa2>
 800a2da:	463b      	mov	r3, r7
 800a2dc:	461f      	mov	r7, r3
 800a2de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2e2:	2a30      	cmp	r2, #48	; 0x30
 800a2e4:	d0fa      	beq.n	800a2dc <_dtoa_r+0xb7c>
 800a2e6:	e6e1      	b.n	800a0ac <_dtoa_r+0x94c>
 800a2e8:	9a03      	ldr	r2, [sp, #12]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d18a      	bne.n	800a204 <_dtoa_r+0xaa4>
 800a2ee:	2331      	movs	r3, #49	; 0x31
 800a2f0:	f10b 0b01 	add.w	fp, fp, #1
 800a2f4:	e797      	b.n	800a226 <_dtoa_r+0xac6>
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <_dtoa_r+0xbc0>)
 800a2f8:	f7ff ba9f 	b.w	800983a <_dtoa_r+0xda>
 800a2fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f47f aa77 	bne.w	80097f2 <_dtoa_r+0x92>
 800a304:	4b07      	ldr	r3, [pc, #28]	; (800a324 <_dtoa_r+0xbc4>)
 800a306:	f7ff ba98 	b.w	800983a <_dtoa_r+0xda>
 800a30a:	9b06      	ldr	r3, [sp, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dcb6      	bgt.n	800a27e <_dtoa_r+0xb1e>
 800a310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a312:	2b02      	cmp	r3, #2
 800a314:	f73f aeb5 	bgt.w	800a082 <_dtoa_r+0x922>
 800a318:	e7b1      	b.n	800a27e <_dtoa_r+0xb1e>
 800a31a:	bf00      	nop
 800a31c:	0800bf3f 	.word	0x0800bf3f
 800a320:	0800be01 	.word	0x0800be01
 800a324:	0800beda 	.word	0x0800beda

0800a328 <_free_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4605      	mov	r5, r0
 800a32c:	2900      	cmp	r1, #0
 800a32e:	d040      	beq.n	800a3b2 <_free_r+0x8a>
 800a330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a334:	1f0c      	subs	r4, r1, #4
 800a336:	2b00      	cmp	r3, #0
 800a338:	bfb8      	it	lt
 800a33a:	18e4      	addlt	r4, r4, r3
 800a33c:	f7fd f9ec 	bl	8007718 <__malloc_lock>
 800a340:	4a1c      	ldr	r2, [pc, #112]	; (800a3b4 <_free_r+0x8c>)
 800a342:	6813      	ldr	r3, [r2, #0]
 800a344:	b933      	cbnz	r3, 800a354 <_free_r+0x2c>
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	6014      	str	r4, [r2, #0]
 800a34a:	4628      	mov	r0, r5
 800a34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a350:	f7fd b9e8 	b.w	8007724 <__malloc_unlock>
 800a354:	42a3      	cmp	r3, r4
 800a356:	d908      	bls.n	800a36a <_free_r+0x42>
 800a358:	6820      	ldr	r0, [r4, #0]
 800a35a:	1821      	adds	r1, r4, r0
 800a35c:	428b      	cmp	r3, r1
 800a35e:	bf01      	itttt	eq
 800a360:	6819      	ldreq	r1, [r3, #0]
 800a362:	685b      	ldreq	r3, [r3, #4]
 800a364:	1809      	addeq	r1, r1, r0
 800a366:	6021      	streq	r1, [r4, #0]
 800a368:	e7ed      	b.n	800a346 <_free_r+0x1e>
 800a36a:	461a      	mov	r2, r3
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	b10b      	cbz	r3, 800a374 <_free_r+0x4c>
 800a370:	42a3      	cmp	r3, r4
 800a372:	d9fa      	bls.n	800a36a <_free_r+0x42>
 800a374:	6811      	ldr	r1, [r2, #0]
 800a376:	1850      	adds	r0, r2, r1
 800a378:	42a0      	cmp	r0, r4
 800a37a:	d10b      	bne.n	800a394 <_free_r+0x6c>
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	4401      	add	r1, r0
 800a380:	1850      	adds	r0, r2, r1
 800a382:	4283      	cmp	r3, r0
 800a384:	6011      	str	r1, [r2, #0]
 800a386:	d1e0      	bne.n	800a34a <_free_r+0x22>
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	4408      	add	r0, r1
 800a38e:	6010      	str	r0, [r2, #0]
 800a390:	6053      	str	r3, [r2, #4]
 800a392:	e7da      	b.n	800a34a <_free_r+0x22>
 800a394:	d902      	bls.n	800a39c <_free_r+0x74>
 800a396:	230c      	movs	r3, #12
 800a398:	602b      	str	r3, [r5, #0]
 800a39a:	e7d6      	b.n	800a34a <_free_r+0x22>
 800a39c:	6820      	ldr	r0, [r4, #0]
 800a39e:	1821      	adds	r1, r4, r0
 800a3a0:	428b      	cmp	r3, r1
 800a3a2:	bf01      	itttt	eq
 800a3a4:	6819      	ldreq	r1, [r3, #0]
 800a3a6:	685b      	ldreq	r3, [r3, #4]
 800a3a8:	1809      	addeq	r1, r1, r0
 800a3aa:	6021      	streq	r1, [r4, #0]
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	6054      	str	r4, [r2, #4]
 800a3b0:	e7cb      	b.n	800a34a <_free_r+0x22>
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20002634 	.word	0x20002634

0800a3b8 <rshift>:
 800a3b8:	6903      	ldr	r3, [r0, #16]
 800a3ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3c2:	f100 0414 	add.w	r4, r0, #20
 800a3c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3ca:	dd46      	ble.n	800a45a <rshift+0xa2>
 800a3cc:	f011 011f 	ands.w	r1, r1, #31
 800a3d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3d8:	d10c      	bne.n	800a3f4 <rshift+0x3c>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f100 0710 	add.w	r7, r0, #16
 800a3e0:	42b1      	cmp	r1, r6
 800a3e2:	d335      	bcc.n	800a450 <rshift+0x98>
 800a3e4:	1a9b      	subs	r3, r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	1eea      	subs	r2, r5, #3
 800a3ea:	4296      	cmp	r6, r2
 800a3ec:	bf38      	it	cc
 800a3ee:	2300      	movcc	r3, #0
 800a3f0:	4423      	add	r3, r4
 800a3f2:	e015      	b.n	800a420 <rshift+0x68>
 800a3f4:	46a1      	mov	r9, r4
 800a3f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3fa:	f1c1 0820 	rsb	r8, r1, #32
 800a3fe:	40cf      	lsrs	r7, r1
 800a400:	f105 0e04 	add.w	lr, r5, #4
 800a404:	4576      	cmp	r6, lr
 800a406:	46f4      	mov	ip, lr
 800a408:	d816      	bhi.n	800a438 <rshift+0x80>
 800a40a:	1a9a      	subs	r2, r3, r2
 800a40c:	0092      	lsls	r2, r2, #2
 800a40e:	3a04      	subs	r2, #4
 800a410:	3501      	adds	r5, #1
 800a412:	42ae      	cmp	r6, r5
 800a414:	bf38      	it	cc
 800a416:	2200      	movcc	r2, #0
 800a418:	18a3      	adds	r3, r4, r2
 800a41a:	50a7      	str	r7, [r4, r2]
 800a41c:	b107      	cbz	r7, 800a420 <rshift+0x68>
 800a41e:	3304      	adds	r3, #4
 800a420:	42a3      	cmp	r3, r4
 800a422:	eba3 0204 	sub.w	r2, r3, r4
 800a426:	bf08      	it	eq
 800a428:	2300      	moveq	r3, #0
 800a42a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a42e:	6102      	str	r2, [r0, #16]
 800a430:	bf08      	it	eq
 800a432:	6143      	streq	r3, [r0, #20]
 800a434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a438:	f8dc c000 	ldr.w	ip, [ip]
 800a43c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a440:	ea4c 0707 	orr.w	r7, ip, r7
 800a444:	f849 7b04 	str.w	r7, [r9], #4
 800a448:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a44c:	40cf      	lsrs	r7, r1
 800a44e:	e7d9      	b.n	800a404 <rshift+0x4c>
 800a450:	f851 cb04 	ldr.w	ip, [r1], #4
 800a454:	f847 cf04 	str.w	ip, [r7, #4]!
 800a458:	e7c2      	b.n	800a3e0 <rshift+0x28>
 800a45a:	4623      	mov	r3, r4
 800a45c:	e7e0      	b.n	800a420 <rshift+0x68>

0800a45e <__hexdig_fun>:
 800a45e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a462:	2b09      	cmp	r3, #9
 800a464:	d802      	bhi.n	800a46c <__hexdig_fun+0xe>
 800a466:	3820      	subs	r0, #32
 800a468:	b2c0      	uxtb	r0, r0
 800a46a:	4770      	bx	lr
 800a46c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a470:	2b05      	cmp	r3, #5
 800a472:	d801      	bhi.n	800a478 <__hexdig_fun+0x1a>
 800a474:	3847      	subs	r0, #71	; 0x47
 800a476:	e7f7      	b.n	800a468 <__hexdig_fun+0xa>
 800a478:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a47c:	2b05      	cmp	r3, #5
 800a47e:	d801      	bhi.n	800a484 <__hexdig_fun+0x26>
 800a480:	3827      	subs	r0, #39	; 0x27
 800a482:	e7f1      	b.n	800a468 <__hexdig_fun+0xa>
 800a484:	2000      	movs	r0, #0
 800a486:	4770      	bx	lr

0800a488 <__gethex>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	4681      	mov	r9, r0
 800a48e:	468a      	mov	sl, r1
 800a490:	4617      	mov	r7, r2
 800a492:	680a      	ldr	r2, [r1, #0]
 800a494:	b085      	sub	sp, #20
 800a496:	f102 0b02 	add.w	fp, r2, #2
 800a49a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a49e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4a2:	9302      	str	r3, [sp, #8]
 800a4a4:	32fe      	adds	r2, #254	; 0xfe
 800a4a6:	eb02 030b 	add.w	r3, r2, fp
 800a4aa:	46d8      	mov	r8, fp
 800a4ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	2830      	cmp	r0, #48	; 0x30
 800a4b4:	d0f7      	beq.n	800a4a6 <__gethex+0x1e>
 800a4b6:	f7ff ffd2 	bl	800a45e <__hexdig_fun>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d138      	bne.n	800a532 <__gethex+0xaa>
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	49a7      	ldr	r1, [pc, #668]	; (800a764 <__gethex+0x2dc>)
 800a4c6:	f7fe ff53 	bl	8009370 <strncmp>
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d169      	bne.n	800a5a4 <__gethex+0x11c>
 800a4d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a4d4:	465d      	mov	r5, fp
 800a4d6:	f7ff ffc2 	bl	800a45e <__hexdig_fun>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d064      	beq.n	800a5a8 <__gethex+0x120>
 800a4de:	465a      	mov	r2, fp
 800a4e0:	7810      	ldrb	r0, [r2, #0]
 800a4e2:	4690      	mov	r8, r2
 800a4e4:	2830      	cmp	r0, #48	; 0x30
 800a4e6:	f102 0201 	add.w	r2, r2, #1
 800a4ea:	d0f9      	beq.n	800a4e0 <__gethex+0x58>
 800a4ec:	f7ff ffb7 	bl	800a45e <__hexdig_fun>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	fab0 f480 	clz	r4, r0
 800a4f6:	465e      	mov	r6, fp
 800a4f8:	0964      	lsrs	r4, r4, #5
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	4615      	mov	r5, r2
 800a500:	7828      	ldrb	r0, [r5, #0]
 800a502:	3201      	adds	r2, #1
 800a504:	f7ff ffab 	bl	800a45e <__hexdig_fun>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d1f8      	bne.n	800a4fe <__gethex+0x76>
 800a50c:	2201      	movs	r2, #1
 800a50e:	4628      	mov	r0, r5
 800a510:	4994      	ldr	r1, [pc, #592]	; (800a764 <__gethex+0x2dc>)
 800a512:	f7fe ff2d 	bl	8009370 <strncmp>
 800a516:	b978      	cbnz	r0, 800a538 <__gethex+0xb0>
 800a518:	b946      	cbnz	r6, 800a52c <__gethex+0xa4>
 800a51a:	1c6e      	adds	r6, r5, #1
 800a51c:	4632      	mov	r2, r6
 800a51e:	4615      	mov	r5, r2
 800a520:	7828      	ldrb	r0, [r5, #0]
 800a522:	3201      	adds	r2, #1
 800a524:	f7ff ff9b 	bl	800a45e <__hexdig_fun>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d1f8      	bne.n	800a51e <__gethex+0x96>
 800a52c:	1b73      	subs	r3, r6, r5
 800a52e:	009e      	lsls	r6, r3, #2
 800a530:	e004      	b.n	800a53c <__gethex+0xb4>
 800a532:	2400      	movs	r4, #0
 800a534:	4626      	mov	r6, r4
 800a536:	e7e1      	b.n	800a4fc <__gethex+0x74>
 800a538:	2e00      	cmp	r6, #0
 800a53a:	d1f7      	bne.n	800a52c <__gethex+0xa4>
 800a53c:	782b      	ldrb	r3, [r5, #0]
 800a53e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a542:	2b50      	cmp	r3, #80	; 0x50
 800a544:	d13d      	bne.n	800a5c2 <__gethex+0x13a>
 800a546:	786b      	ldrb	r3, [r5, #1]
 800a548:	2b2b      	cmp	r3, #43	; 0x2b
 800a54a:	d02f      	beq.n	800a5ac <__gethex+0x124>
 800a54c:	2b2d      	cmp	r3, #45	; 0x2d
 800a54e:	d031      	beq.n	800a5b4 <__gethex+0x12c>
 800a550:	f04f 0b00 	mov.w	fp, #0
 800a554:	1c69      	adds	r1, r5, #1
 800a556:	7808      	ldrb	r0, [r1, #0]
 800a558:	f7ff ff81 	bl	800a45e <__hexdig_fun>
 800a55c:	1e42      	subs	r2, r0, #1
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	2a18      	cmp	r2, #24
 800a562:	d82e      	bhi.n	800a5c2 <__gethex+0x13a>
 800a564:	f1a0 0210 	sub.w	r2, r0, #16
 800a568:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a56c:	f7ff ff77 	bl	800a45e <__hexdig_fun>
 800a570:	f100 3cff 	add.w	ip, r0, #4294967295
 800a574:	fa5f fc8c 	uxtb.w	ip, ip
 800a578:	f1bc 0f18 	cmp.w	ip, #24
 800a57c:	d91d      	bls.n	800a5ba <__gethex+0x132>
 800a57e:	f1bb 0f00 	cmp.w	fp, #0
 800a582:	d000      	beq.n	800a586 <__gethex+0xfe>
 800a584:	4252      	negs	r2, r2
 800a586:	4416      	add	r6, r2
 800a588:	f8ca 1000 	str.w	r1, [sl]
 800a58c:	b1dc      	cbz	r4, 800a5c6 <__gethex+0x13e>
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	bf14      	ite	ne
 800a594:	f04f 0800 	movne.w	r8, #0
 800a598:	f04f 0806 	moveq.w	r8, #6
 800a59c:	4640      	mov	r0, r8
 800a59e:	b005      	add	sp, #20
 800a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a4:	4645      	mov	r5, r8
 800a5a6:	4626      	mov	r6, r4
 800a5a8:	2401      	movs	r4, #1
 800a5aa:	e7c7      	b.n	800a53c <__gethex+0xb4>
 800a5ac:	f04f 0b00 	mov.w	fp, #0
 800a5b0:	1ca9      	adds	r1, r5, #2
 800a5b2:	e7d0      	b.n	800a556 <__gethex+0xce>
 800a5b4:	f04f 0b01 	mov.w	fp, #1
 800a5b8:	e7fa      	b.n	800a5b0 <__gethex+0x128>
 800a5ba:	230a      	movs	r3, #10
 800a5bc:	fb03 0002 	mla	r0, r3, r2, r0
 800a5c0:	e7d0      	b.n	800a564 <__gethex+0xdc>
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	e7e0      	b.n	800a588 <__gethex+0x100>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	eba5 0308 	sub.w	r3, r5, r8
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	2b07      	cmp	r3, #7
 800a5d0:	dc0a      	bgt.n	800a5e8 <__gethex+0x160>
 800a5d2:	4648      	mov	r0, r9
 800a5d4:	f000 fa5c 	bl	800aa90 <_Balloc>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	b940      	cbnz	r0, 800a5ee <__gethex+0x166>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	21e4      	movs	r1, #228	; 0xe4
 800a5e0:	4b61      	ldr	r3, [pc, #388]	; (800a768 <__gethex+0x2e0>)
 800a5e2:	4862      	ldr	r0, [pc, #392]	; (800a76c <__gethex+0x2e4>)
 800a5e4:	f7ff f812 	bl	800960c <__assert_func>
 800a5e8:	3101      	adds	r1, #1
 800a5ea:	105b      	asrs	r3, r3, #1
 800a5ec:	e7ef      	b.n	800a5ce <__gethex+0x146>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	469b      	mov	fp, r3
 800a5f2:	f100 0a14 	add.w	sl, r0, #20
 800a5f6:	f8cd a004 	str.w	sl, [sp, #4]
 800a5fa:	45a8      	cmp	r8, r5
 800a5fc:	d344      	bcc.n	800a688 <__gethex+0x200>
 800a5fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a602:	4658      	mov	r0, fp
 800a604:	f848 bb04 	str.w	fp, [r8], #4
 800a608:	eba8 080a 	sub.w	r8, r8, sl
 800a60c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a610:	6122      	str	r2, [r4, #16]
 800a612:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a616:	f000 fb2d 	bl	800ac74 <__hi0bits>
 800a61a:	683d      	ldr	r5, [r7, #0]
 800a61c:	eba8 0800 	sub.w	r8, r8, r0
 800a620:	45a8      	cmp	r8, r5
 800a622:	dd59      	ble.n	800a6d8 <__gethex+0x250>
 800a624:	eba8 0805 	sub.w	r8, r8, r5
 800a628:	4641      	mov	r1, r8
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 feab 	bl	800b386 <__any_on>
 800a630:	4683      	mov	fp, r0
 800a632:	b1b8      	cbz	r0, 800a664 <__gethex+0x1dc>
 800a634:	f04f 0b01 	mov.w	fp, #1
 800a638:	f108 33ff 	add.w	r3, r8, #4294967295
 800a63c:	1159      	asrs	r1, r3, #5
 800a63e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a642:	f003 021f 	and.w	r2, r3, #31
 800a646:	fa0b f202 	lsl.w	r2, fp, r2
 800a64a:	420a      	tst	r2, r1
 800a64c:	d00a      	beq.n	800a664 <__gethex+0x1dc>
 800a64e:	455b      	cmp	r3, fp
 800a650:	dd06      	ble.n	800a660 <__gethex+0x1d8>
 800a652:	4620      	mov	r0, r4
 800a654:	f1a8 0102 	sub.w	r1, r8, #2
 800a658:	f000 fe95 	bl	800b386 <__any_on>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d138      	bne.n	800a6d2 <__gethex+0x24a>
 800a660:	f04f 0b02 	mov.w	fp, #2
 800a664:	4641      	mov	r1, r8
 800a666:	4620      	mov	r0, r4
 800a668:	f7ff fea6 	bl	800a3b8 <rshift>
 800a66c:	4446      	add	r6, r8
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	42b3      	cmp	r3, r6
 800a672:	da41      	bge.n	800a6f8 <__gethex+0x270>
 800a674:	4621      	mov	r1, r4
 800a676:	4648      	mov	r0, r9
 800a678:	f000 fa4a 	bl	800ab10 <_Bfree>
 800a67c:	2300      	movs	r3, #0
 800a67e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a680:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	e789      	b.n	800a59c <__gethex+0x114>
 800a688:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a68c:	2a2e      	cmp	r2, #46	; 0x2e
 800a68e:	d014      	beq.n	800a6ba <__gethex+0x232>
 800a690:	2b20      	cmp	r3, #32
 800a692:	d106      	bne.n	800a6a2 <__gethex+0x21a>
 800a694:	9b01      	ldr	r3, [sp, #4]
 800a696:	f843 bb04 	str.w	fp, [r3], #4
 800a69a:	f04f 0b00 	mov.w	fp, #0
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	465b      	mov	r3, fp
 800a6a2:	7828      	ldrb	r0, [r5, #0]
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	f7ff feda 	bl	800a45e <__hexdig_fun>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	f000 000f 	and.w	r0, r0, #15
 800a6b0:	4098      	lsls	r0, r3
 800a6b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	e79f      	b.n	800a5fa <__gethex+0x172>
 800a6ba:	45a8      	cmp	r8, r5
 800a6bc:	d8e8      	bhi.n	800a690 <__gethex+0x208>
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	4928      	ldr	r1, [pc, #160]	; (800a764 <__gethex+0x2dc>)
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	f7fe fe53 	bl	8009370 <strncmp>
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d1df      	bne.n	800a690 <__gethex+0x208>
 800a6d0:	e793      	b.n	800a5fa <__gethex+0x172>
 800a6d2:	f04f 0b03 	mov.w	fp, #3
 800a6d6:	e7c5      	b.n	800a664 <__gethex+0x1dc>
 800a6d8:	da0b      	bge.n	800a6f2 <__gethex+0x26a>
 800a6da:	eba5 0808 	sub.w	r8, r5, r8
 800a6de:	4621      	mov	r1, r4
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	4648      	mov	r0, r9
 800a6e4:	f000 fc2c 	bl	800af40 <__lshift>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	eba6 0608 	sub.w	r6, r6, r8
 800a6ee:	f100 0a14 	add.w	sl, r0, #20
 800a6f2:	f04f 0b00 	mov.w	fp, #0
 800a6f6:	e7ba      	b.n	800a66e <__gethex+0x1e6>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	42b3      	cmp	r3, r6
 800a6fc:	dd74      	ble.n	800a7e8 <__gethex+0x360>
 800a6fe:	1b9e      	subs	r6, r3, r6
 800a700:	42b5      	cmp	r5, r6
 800a702:	dc35      	bgt.n	800a770 <__gethex+0x2e8>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d023      	beq.n	800a752 <__gethex+0x2ca>
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d025      	beq.n	800a75a <__gethex+0x2d2>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d115      	bne.n	800a73e <__gethex+0x2b6>
 800a712:	42b5      	cmp	r5, r6
 800a714:	d113      	bne.n	800a73e <__gethex+0x2b6>
 800a716:	2d01      	cmp	r5, #1
 800a718:	d10b      	bne.n	800a732 <__gethex+0x2aa>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	9a02      	ldr	r2, [sp, #8]
 800a71e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	2301      	movs	r3, #1
 800a726:	6123      	str	r3, [r4, #16]
 800a728:	f8ca 3000 	str.w	r3, [sl]
 800a72c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a72e:	601c      	str	r4, [r3, #0]
 800a730:	e734      	b.n	800a59c <__gethex+0x114>
 800a732:	4620      	mov	r0, r4
 800a734:	1e69      	subs	r1, r5, #1
 800a736:	f000 fe26 	bl	800b386 <__any_on>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d1ed      	bne.n	800a71a <__gethex+0x292>
 800a73e:	4621      	mov	r1, r4
 800a740:	4648      	mov	r0, r9
 800a742:	f000 f9e5 	bl	800ab10 <_Bfree>
 800a746:	2300      	movs	r3, #0
 800a748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a74a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	e724      	b.n	800a59c <__gethex+0x114>
 800a752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1f2      	bne.n	800a73e <__gethex+0x2b6>
 800a758:	e7df      	b.n	800a71a <__gethex+0x292>
 800a75a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1dc      	bne.n	800a71a <__gethex+0x292>
 800a760:	e7ed      	b.n	800a73e <__gethex+0x2b6>
 800a762:	bf00      	nop
 800a764:	0800bc9a 	.word	0x0800bc9a
 800a768:	0800bf3f 	.word	0x0800bf3f
 800a76c:	0800bf50 	.word	0x0800bf50
 800a770:	f106 38ff 	add.w	r8, r6, #4294967295
 800a774:	f1bb 0f00 	cmp.w	fp, #0
 800a778:	d133      	bne.n	800a7e2 <__gethex+0x35a>
 800a77a:	f1b8 0f00 	cmp.w	r8, #0
 800a77e:	d004      	beq.n	800a78a <__gethex+0x302>
 800a780:	4641      	mov	r1, r8
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fdff 	bl	800b386 <__any_on>
 800a788:	4683      	mov	fp, r0
 800a78a:	2301      	movs	r3, #1
 800a78c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a790:	f008 081f 	and.w	r8, r8, #31
 800a794:	fa03 f308 	lsl.w	r3, r3, r8
 800a798:	f04f 0802 	mov.w	r8, #2
 800a79c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4213      	tst	r3, r2
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bf18      	it	ne
 800a7a8:	f04b 0b02 	orrne.w	fp, fp, #2
 800a7ac:	1bad      	subs	r5, r5, r6
 800a7ae:	f7ff fe03 	bl	800a3b8 <rshift>
 800a7b2:	687e      	ldr	r6, [r7, #4]
 800a7b4:	f1bb 0f00 	cmp.w	fp, #0
 800a7b8:	d04a      	beq.n	800a850 <__gethex+0x3c8>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d016      	beq.n	800a7ee <__gethex+0x366>
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	d018      	beq.n	800a7f6 <__gethex+0x36e>
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d109      	bne.n	800a7dc <__gethex+0x354>
 800a7c8:	f01b 0f02 	tst.w	fp, #2
 800a7cc:	d006      	beq.n	800a7dc <__gethex+0x354>
 800a7ce:	f8da 3000 	ldr.w	r3, [sl]
 800a7d2:	ea4b 0b03 	orr.w	fp, fp, r3
 800a7d6:	f01b 0f01 	tst.w	fp, #1
 800a7da:	d10f      	bne.n	800a7fc <__gethex+0x374>
 800a7dc:	f048 0810 	orr.w	r8, r8, #16
 800a7e0:	e036      	b.n	800a850 <__gethex+0x3c8>
 800a7e2:	f04f 0b01 	mov.w	fp, #1
 800a7e6:	e7d0      	b.n	800a78a <__gethex+0x302>
 800a7e8:	f04f 0801 	mov.w	r8, #1
 800a7ec:	e7e2      	b.n	800a7b4 <__gethex+0x32c>
 800a7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7f0:	f1c3 0301 	rsb	r3, r3, #1
 800a7f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0ef      	beq.n	800a7dc <__gethex+0x354>
 800a7fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a800:	f104 0214 	add.w	r2, r4, #20
 800a804:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	2300      	movs	r3, #0
 800a80c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a810:	4694      	mov	ip, r2
 800a812:	f852 1b04 	ldr.w	r1, [r2], #4
 800a816:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a81a:	d01e      	beq.n	800a85a <__gethex+0x3d2>
 800a81c:	3101      	adds	r1, #1
 800a81e:	f8cc 1000 	str.w	r1, [ip]
 800a822:	f1b8 0f02 	cmp.w	r8, #2
 800a826:	f104 0214 	add.w	r2, r4, #20
 800a82a:	d13d      	bne.n	800a8a8 <__gethex+0x420>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	3b01      	subs	r3, #1
 800a830:	42ab      	cmp	r3, r5
 800a832:	d10b      	bne.n	800a84c <__gethex+0x3c4>
 800a834:	2301      	movs	r3, #1
 800a836:	1169      	asrs	r1, r5, #5
 800a838:	f005 051f 	and.w	r5, r5, #31
 800a83c:	fa03 f505 	lsl.w	r5, r3, r5
 800a840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a844:	421d      	tst	r5, r3
 800a846:	bf18      	it	ne
 800a848:	f04f 0801 	movne.w	r8, #1
 800a84c:	f048 0820 	orr.w	r8, r8, #32
 800a850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a852:	601c      	str	r4, [r3, #0]
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	601e      	str	r6, [r3, #0]
 800a858:	e6a0      	b.n	800a59c <__gethex+0x114>
 800a85a:	4290      	cmp	r0, r2
 800a85c:	f842 3c04 	str.w	r3, [r2, #-4]
 800a860:	d8d6      	bhi.n	800a810 <__gethex+0x388>
 800a862:	68a2      	ldr	r2, [r4, #8]
 800a864:	4593      	cmp	fp, r2
 800a866:	db17      	blt.n	800a898 <__gethex+0x410>
 800a868:	6861      	ldr	r1, [r4, #4]
 800a86a:	4648      	mov	r0, r9
 800a86c:	3101      	adds	r1, #1
 800a86e:	f000 f90f 	bl	800aa90 <_Balloc>
 800a872:	4682      	mov	sl, r0
 800a874:	b918      	cbnz	r0, 800a87e <__gethex+0x3f6>
 800a876:	4602      	mov	r2, r0
 800a878:	2184      	movs	r1, #132	; 0x84
 800a87a:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <__gethex+0x45c>)
 800a87c:	e6b1      	b.n	800a5e2 <__gethex+0x15a>
 800a87e:	6922      	ldr	r2, [r4, #16]
 800a880:	f104 010c 	add.w	r1, r4, #12
 800a884:	3202      	adds	r2, #2
 800a886:	0092      	lsls	r2, r2, #2
 800a888:	300c      	adds	r0, #12
 800a88a:	f7fe fea6 	bl	80095da <memcpy>
 800a88e:	4621      	mov	r1, r4
 800a890:	4648      	mov	r0, r9
 800a892:	f000 f93d 	bl	800ab10 <_Bfree>
 800a896:	4654      	mov	r4, sl
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	1c51      	adds	r1, r2, #1
 800a89c:	6121      	str	r1, [r4, #16]
 800a89e:	2101      	movs	r1, #1
 800a8a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a8a4:	6151      	str	r1, [r2, #20]
 800a8a6:	e7bc      	b.n	800a822 <__gethex+0x39a>
 800a8a8:	6921      	ldr	r1, [r4, #16]
 800a8aa:	4559      	cmp	r1, fp
 800a8ac:	dd0b      	ble.n	800a8c6 <__gethex+0x43e>
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7ff fd81 	bl	800a3b8 <rshift>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	3601      	adds	r6, #1
 800a8ba:	42b3      	cmp	r3, r6
 800a8bc:	f6ff aeda 	blt.w	800a674 <__gethex+0x1ec>
 800a8c0:	f04f 0801 	mov.w	r8, #1
 800a8c4:	e7c2      	b.n	800a84c <__gethex+0x3c4>
 800a8c6:	f015 051f 	ands.w	r5, r5, #31
 800a8ca:	d0f9      	beq.n	800a8c0 <__gethex+0x438>
 800a8cc:	9b01      	ldr	r3, [sp, #4]
 800a8ce:	f1c5 0520 	rsb	r5, r5, #32
 800a8d2:	441a      	add	r2, r3
 800a8d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a8d8:	f000 f9cc 	bl	800ac74 <__hi0bits>
 800a8dc:	42a8      	cmp	r0, r5
 800a8de:	dbe6      	blt.n	800a8ae <__gethex+0x426>
 800a8e0:	e7ee      	b.n	800a8c0 <__gethex+0x438>
 800a8e2:	bf00      	nop
 800a8e4:	0800bf3f 	.word	0x0800bf3f

0800a8e8 <L_shift>:
 800a8e8:	f1c2 0208 	rsb	r2, r2, #8
 800a8ec:	0092      	lsls	r2, r2, #2
 800a8ee:	b570      	push	{r4, r5, r6, lr}
 800a8f0:	f1c2 0620 	rsb	r6, r2, #32
 800a8f4:	6843      	ldr	r3, [r0, #4]
 800a8f6:	6804      	ldr	r4, [r0, #0]
 800a8f8:	fa03 f506 	lsl.w	r5, r3, r6
 800a8fc:	432c      	orrs	r4, r5
 800a8fe:	40d3      	lsrs	r3, r2
 800a900:	6004      	str	r4, [r0, #0]
 800a902:	f840 3f04 	str.w	r3, [r0, #4]!
 800a906:	4288      	cmp	r0, r1
 800a908:	d3f4      	bcc.n	800a8f4 <L_shift+0xc>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}

0800a90c <__match>:
 800a90c:	b530      	push	{r4, r5, lr}
 800a90e:	6803      	ldr	r3, [r0, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a916:	b914      	cbnz	r4, 800a91e <__match+0x12>
 800a918:	6003      	str	r3, [r0, #0]
 800a91a:	2001      	movs	r0, #1
 800a91c:	bd30      	pop	{r4, r5, pc}
 800a91e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a922:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a926:	2d19      	cmp	r5, #25
 800a928:	bf98      	it	ls
 800a92a:	3220      	addls	r2, #32
 800a92c:	42a2      	cmp	r2, r4
 800a92e:	d0f0      	beq.n	800a912 <__match+0x6>
 800a930:	2000      	movs	r0, #0
 800a932:	e7f3      	b.n	800a91c <__match+0x10>

0800a934 <__hexnan>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	2500      	movs	r5, #0
 800a93a:	680b      	ldr	r3, [r1, #0]
 800a93c:	4682      	mov	sl, r0
 800a93e:	115e      	asrs	r6, r3, #5
 800a940:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a944:	f013 031f 	ands.w	r3, r3, #31
 800a948:	bf18      	it	ne
 800a94a:	3604      	addne	r6, #4
 800a94c:	1f37      	subs	r7, r6, #4
 800a94e:	4690      	mov	r8, r2
 800a950:	46b9      	mov	r9, r7
 800a952:	463c      	mov	r4, r7
 800a954:	46ab      	mov	fp, r5
 800a956:	b087      	sub	sp, #28
 800a958:	6801      	ldr	r1, [r0, #0]
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a960:	9502      	str	r5, [sp, #8]
 800a962:	784a      	ldrb	r2, [r1, #1]
 800a964:	1c4b      	adds	r3, r1, #1
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	b342      	cbz	r2, 800a9bc <__hexnan+0x88>
 800a96a:	4610      	mov	r0, r2
 800a96c:	9105      	str	r1, [sp, #20]
 800a96e:	9204      	str	r2, [sp, #16]
 800a970:	f7ff fd75 	bl	800a45e <__hexdig_fun>
 800a974:	2800      	cmp	r0, #0
 800a976:	d14f      	bne.n	800aa18 <__hexnan+0xe4>
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	9905      	ldr	r1, [sp, #20]
 800a97c:	2a20      	cmp	r2, #32
 800a97e:	d818      	bhi.n	800a9b2 <__hexnan+0x7e>
 800a980:	9b02      	ldr	r3, [sp, #8]
 800a982:	459b      	cmp	fp, r3
 800a984:	dd13      	ble.n	800a9ae <__hexnan+0x7a>
 800a986:	454c      	cmp	r4, r9
 800a988:	d206      	bcs.n	800a998 <__hexnan+0x64>
 800a98a:	2d07      	cmp	r5, #7
 800a98c:	dc04      	bgt.n	800a998 <__hexnan+0x64>
 800a98e:	462a      	mov	r2, r5
 800a990:	4649      	mov	r1, r9
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff ffa8 	bl	800a8e8 <L_shift>
 800a998:	4544      	cmp	r4, r8
 800a99a:	d950      	bls.n	800aa3e <__hexnan+0x10a>
 800a99c:	2300      	movs	r3, #0
 800a99e:	f1a4 0904 	sub.w	r9, r4, #4
 800a9a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	464c      	mov	r4, r9
 800a9aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ae:	9903      	ldr	r1, [sp, #12]
 800a9b0:	e7d7      	b.n	800a962 <__hexnan+0x2e>
 800a9b2:	2a29      	cmp	r2, #41	; 0x29
 800a9b4:	d155      	bne.n	800aa62 <__hexnan+0x12e>
 800a9b6:	3102      	adds	r1, #2
 800a9b8:	f8ca 1000 	str.w	r1, [sl]
 800a9bc:	f1bb 0f00 	cmp.w	fp, #0
 800a9c0:	d04f      	beq.n	800aa62 <__hexnan+0x12e>
 800a9c2:	454c      	cmp	r4, r9
 800a9c4:	d206      	bcs.n	800a9d4 <__hexnan+0xa0>
 800a9c6:	2d07      	cmp	r5, #7
 800a9c8:	dc04      	bgt.n	800a9d4 <__hexnan+0xa0>
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f7ff ff8a 	bl	800a8e8 <L_shift>
 800a9d4:	4544      	cmp	r4, r8
 800a9d6:	d934      	bls.n	800aa42 <__hexnan+0x10e>
 800a9d8:	4623      	mov	r3, r4
 800a9da:	f1a8 0204 	sub.w	r2, r8, #4
 800a9de:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9e2:	429f      	cmp	r7, r3
 800a9e4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9e8:	d2f9      	bcs.n	800a9de <__hexnan+0xaa>
 800a9ea:	1b3b      	subs	r3, r7, r4
 800a9ec:	f023 0303 	bic.w	r3, r3, #3
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	3e03      	subs	r6, #3
 800a9f4:	3401      	adds	r4, #1
 800a9f6:	42a6      	cmp	r6, r4
 800a9f8:	bf38      	it	cc
 800a9fa:	2304      	movcc	r3, #4
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4443      	add	r3, r8
 800aa00:	f843 2b04 	str.w	r2, [r3], #4
 800aa04:	429f      	cmp	r7, r3
 800aa06:	d2fb      	bcs.n	800aa00 <__hexnan+0xcc>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	b91b      	cbnz	r3, 800aa14 <__hexnan+0xe0>
 800aa0c:	4547      	cmp	r7, r8
 800aa0e:	d126      	bne.n	800aa5e <__hexnan+0x12a>
 800aa10:	2301      	movs	r3, #1
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	2005      	movs	r0, #5
 800aa16:	e025      	b.n	800aa64 <__hexnan+0x130>
 800aa18:	3501      	adds	r5, #1
 800aa1a:	2d08      	cmp	r5, #8
 800aa1c:	f10b 0b01 	add.w	fp, fp, #1
 800aa20:	dd06      	ble.n	800aa30 <__hexnan+0xfc>
 800aa22:	4544      	cmp	r4, r8
 800aa24:	d9c3      	bls.n	800a9ae <__hexnan+0x7a>
 800aa26:	2300      	movs	r3, #0
 800aa28:	2501      	movs	r5, #1
 800aa2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa2e:	3c04      	subs	r4, #4
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	f000 000f 	and.w	r0, r0, #15
 800aa36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa3a:	6020      	str	r0, [r4, #0]
 800aa3c:	e7b7      	b.n	800a9ae <__hexnan+0x7a>
 800aa3e:	2508      	movs	r5, #8
 800aa40:	e7b5      	b.n	800a9ae <__hexnan+0x7a>
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0df      	beq.n	800aa08 <__hexnan+0xd4>
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4c:	f1c3 0320 	rsb	r3, r3, #32
 800aa50:	40da      	lsrs	r2, r3
 800aa52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa56:	4013      	ands	r3, r2
 800aa58:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa5c:	e7d4      	b.n	800aa08 <__hexnan+0xd4>
 800aa5e:	3f04      	subs	r7, #4
 800aa60:	e7d2      	b.n	800aa08 <__hexnan+0xd4>
 800aa62:	2004      	movs	r0, #4
 800aa64:	b007      	add	sp, #28
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa6a <__ascii_mbtowc>:
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	b901      	cbnz	r1, 800aa70 <__ascii_mbtowc+0x6>
 800aa6e:	a901      	add	r1, sp, #4
 800aa70:	b142      	cbz	r2, 800aa84 <__ascii_mbtowc+0x1a>
 800aa72:	b14b      	cbz	r3, 800aa88 <__ascii_mbtowc+0x1e>
 800aa74:	7813      	ldrb	r3, [r2, #0]
 800aa76:	600b      	str	r3, [r1, #0]
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	1e10      	subs	r0, r2, #0
 800aa7c:	bf18      	it	ne
 800aa7e:	2001      	movne	r0, #1
 800aa80:	b002      	add	sp, #8
 800aa82:	4770      	bx	lr
 800aa84:	4610      	mov	r0, r2
 800aa86:	e7fb      	b.n	800aa80 <__ascii_mbtowc+0x16>
 800aa88:	f06f 0001 	mvn.w	r0, #1
 800aa8c:	e7f8      	b.n	800aa80 <__ascii_mbtowc+0x16>
	...

0800aa90 <_Balloc>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	69c6      	ldr	r6, [r0, #28]
 800aa94:	4604      	mov	r4, r0
 800aa96:	460d      	mov	r5, r1
 800aa98:	b976      	cbnz	r6, 800aab8 <_Balloc+0x28>
 800aa9a:	2010      	movs	r0, #16
 800aa9c:	f7fc fd8c 	bl	80075b8 <malloc>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	61e0      	str	r0, [r4, #28]
 800aaa4:	b920      	cbnz	r0, 800aab0 <_Balloc+0x20>
 800aaa6:	216b      	movs	r1, #107	; 0x6b
 800aaa8:	4b17      	ldr	r3, [pc, #92]	; (800ab08 <_Balloc+0x78>)
 800aaaa:	4818      	ldr	r0, [pc, #96]	; (800ab0c <_Balloc+0x7c>)
 800aaac:	f7fe fdae 	bl	800960c <__assert_func>
 800aab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aab4:	6006      	str	r6, [r0, #0]
 800aab6:	60c6      	str	r6, [r0, #12]
 800aab8:	69e6      	ldr	r6, [r4, #28]
 800aaba:	68f3      	ldr	r3, [r6, #12]
 800aabc:	b183      	cbz	r3, 800aae0 <_Balloc+0x50>
 800aabe:	69e3      	ldr	r3, [r4, #28]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aac6:	b9b8      	cbnz	r0, 800aaf8 <_Balloc+0x68>
 800aac8:	2101      	movs	r1, #1
 800aaca:	fa01 f605 	lsl.w	r6, r1, r5
 800aace:	1d72      	adds	r2, r6, #5
 800aad0:	4620      	mov	r0, r4
 800aad2:	0092      	lsls	r2, r2, #2
 800aad4:	f000 ff0d 	bl	800b8f2 <_calloc_r>
 800aad8:	b160      	cbz	r0, 800aaf4 <_Balloc+0x64>
 800aada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aade:	e00e      	b.n	800aafe <_Balloc+0x6e>
 800aae0:	2221      	movs	r2, #33	; 0x21
 800aae2:	2104      	movs	r1, #4
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 ff04 	bl	800b8f2 <_calloc_r>
 800aaea:	69e3      	ldr	r3, [r4, #28]
 800aaec:	60f0      	str	r0, [r6, #12]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e4      	bne.n	800aabe <_Balloc+0x2e>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	6802      	ldr	r2, [r0, #0]
 800aafa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aafe:	2300      	movs	r3, #0
 800ab00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab04:	e7f7      	b.n	800aaf6 <_Balloc+0x66>
 800ab06:	bf00      	nop
 800ab08:	0800be25 	.word	0x0800be25
 800ab0c:	0800bfb0 	.word	0x0800bfb0

0800ab10 <_Bfree>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	69c6      	ldr	r6, [r0, #28]
 800ab14:	4605      	mov	r5, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	b976      	cbnz	r6, 800ab38 <_Bfree+0x28>
 800ab1a:	2010      	movs	r0, #16
 800ab1c:	f7fc fd4c 	bl	80075b8 <malloc>
 800ab20:	4602      	mov	r2, r0
 800ab22:	61e8      	str	r0, [r5, #28]
 800ab24:	b920      	cbnz	r0, 800ab30 <_Bfree+0x20>
 800ab26:	218f      	movs	r1, #143	; 0x8f
 800ab28:	4b08      	ldr	r3, [pc, #32]	; (800ab4c <_Bfree+0x3c>)
 800ab2a:	4809      	ldr	r0, [pc, #36]	; (800ab50 <_Bfree+0x40>)
 800ab2c:	f7fe fd6e 	bl	800960c <__assert_func>
 800ab30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab34:	6006      	str	r6, [r0, #0]
 800ab36:	60c6      	str	r6, [r0, #12]
 800ab38:	b13c      	cbz	r4, 800ab4a <_Bfree+0x3a>
 800ab3a:	69eb      	ldr	r3, [r5, #28]
 800ab3c:	6862      	ldr	r2, [r4, #4]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab44:	6021      	str	r1, [r4, #0]
 800ab46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	0800be25 	.word	0x0800be25
 800ab50:	0800bfb0 	.word	0x0800bfb0

0800ab54 <__multadd>:
 800ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab58:	4607      	mov	r7, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	461e      	mov	r6, r3
 800ab5e:	2000      	movs	r0, #0
 800ab60:	690d      	ldr	r5, [r1, #16]
 800ab62:	f101 0c14 	add.w	ip, r1, #20
 800ab66:	f8dc 3000 	ldr.w	r3, [ip]
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	b299      	uxth	r1, r3
 800ab6e:	fb02 6101 	mla	r1, r2, r1, r6
 800ab72:	0c1e      	lsrs	r6, r3, #16
 800ab74:	0c0b      	lsrs	r3, r1, #16
 800ab76:	fb02 3306 	mla	r3, r2, r6, r3
 800ab7a:	b289      	uxth	r1, r1
 800ab7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab80:	4285      	cmp	r5, r0
 800ab82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab86:	f84c 1b04 	str.w	r1, [ip], #4
 800ab8a:	dcec      	bgt.n	800ab66 <__multadd+0x12>
 800ab8c:	b30e      	cbz	r6, 800abd2 <__multadd+0x7e>
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	42ab      	cmp	r3, r5
 800ab92:	dc19      	bgt.n	800abc8 <__multadd+0x74>
 800ab94:	6861      	ldr	r1, [r4, #4]
 800ab96:	4638      	mov	r0, r7
 800ab98:	3101      	adds	r1, #1
 800ab9a:	f7ff ff79 	bl	800aa90 <_Balloc>
 800ab9e:	4680      	mov	r8, r0
 800aba0:	b928      	cbnz	r0, 800abae <__multadd+0x5a>
 800aba2:	4602      	mov	r2, r0
 800aba4:	21ba      	movs	r1, #186	; 0xba
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <__multadd+0x84>)
 800aba8:	480c      	ldr	r0, [pc, #48]	; (800abdc <__multadd+0x88>)
 800abaa:	f7fe fd2f 	bl	800960c <__assert_func>
 800abae:	6922      	ldr	r2, [r4, #16]
 800abb0:	f104 010c 	add.w	r1, r4, #12
 800abb4:	3202      	adds	r2, #2
 800abb6:	0092      	lsls	r2, r2, #2
 800abb8:	300c      	adds	r0, #12
 800abba:	f7fe fd0e 	bl	80095da <memcpy>
 800abbe:	4621      	mov	r1, r4
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7ff ffa5 	bl	800ab10 <_Bfree>
 800abc6:	4644      	mov	r4, r8
 800abc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abcc:	3501      	adds	r5, #1
 800abce:	615e      	str	r6, [r3, #20]
 800abd0:	6125      	str	r5, [r4, #16]
 800abd2:	4620      	mov	r0, r4
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	0800bf3f 	.word	0x0800bf3f
 800abdc:	0800bfb0 	.word	0x0800bfb0

0800abe0 <__s2b>:
 800abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe4:	4615      	mov	r5, r2
 800abe6:	2209      	movs	r2, #9
 800abe8:	461f      	mov	r7, r3
 800abea:	3308      	adds	r3, #8
 800abec:	460c      	mov	r4, r1
 800abee:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf2:	4606      	mov	r6, r0
 800abf4:	2201      	movs	r2, #1
 800abf6:	2100      	movs	r1, #0
 800abf8:	429a      	cmp	r2, r3
 800abfa:	db09      	blt.n	800ac10 <__s2b+0x30>
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ff47 	bl	800aa90 <_Balloc>
 800ac02:	b940      	cbnz	r0, 800ac16 <__s2b+0x36>
 800ac04:	4602      	mov	r2, r0
 800ac06:	21d3      	movs	r1, #211	; 0xd3
 800ac08:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <__s2b+0x8c>)
 800ac0a:	4819      	ldr	r0, [pc, #100]	; (800ac70 <__s2b+0x90>)
 800ac0c:	f7fe fcfe 	bl	800960c <__assert_func>
 800ac10:	0052      	lsls	r2, r2, #1
 800ac12:	3101      	adds	r1, #1
 800ac14:	e7f0      	b.n	800abf8 <__s2b+0x18>
 800ac16:	9b08      	ldr	r3, [sp, #32]
 800ac18:	2d09      	cmp	r5, #9
 800ac1a:	6143      	str	r3, [r0, #20]
 800ac1c:	f04f 0301 	mov.w	r3, #1
 800ac20:	6103      	str	r3, [r0, #16]
 800ac22:	dd16      	ble.n	800ac52 <__s2b+0x72>
 800ac24:	f104 0909 	add.w	r9, r4, #9
 800ac28:	46c8      	mov	r8, r9
 800ac2a:	442c      	add	r4, r5
 800ac2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac30:	4601      	mov	r1, r0
 800ac32:	220a      	movs	r2, #10
 800ac34:	4630      	mov	r0, r6
 800ac36:	3b30      	subs	r3, #48	; 0x30
 800ac38:	f7ff ff8c 	bl	800ab54 <__multadd>
 800ac3c:	45a0      	cmp	r8, r4
 800ac3e:	d1f5      	bne.n	800ac2c <__s2b+0x4c>
 800ac40:	f1a5 0408 	sub.w	r4, r5, #8
 800ac44:	444c      	add	r4, r9
 800ac46:	1b2d      	subs	r5, r5, r4
 800ac48:	1963      	adds	r3, r4, r5
 800ac4a:	42bb      	cmp	r3, r7
 800ac4c:	db04      	blt.n	800ac58 <__s2b+0x78>
 800ac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac52:	2509      	movs	r5, #9
 800ac54:	340a      	adds	r4, #10
 800ac56:	e7f6      	b.n	800ac46 <__s2b+0x66>
 800ac58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	220a      	movs	r2, #10
 800ac60:	4630      	mov	r0, r6
 800ac62:	3b30      	subs	r3, #48	; 0x30
 800ac64:	f7ff ff76 	bl	800ab54 <__multadd>
 800ac68:	e7ee      	b.n	800ac48 <__s2b+0x68>
 800ac6a:	bf00      	nop
 800ac6c:	0800bf3f 	.word	0x0800bf3f
 800ac70:	0800bfb0 	.word	0x0800bfb0

0800ac74 <__hi0bits>:
 800ac74:	0c02      	lsrs	r2, r0, #16
 800ac76:	0412      	lsls	r2, r2, #16
 800ac78:	4603      	mov	r3, r0
 800ac7a:	b9ca      	cbnz	r2, 800acb0 <__hi0bits+0x3c>
 800ac7c:	0403      	lsls	r3, r0, #16
 800ac7e:	2010      	movs	r0, #16
 800ac80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac84:	bf04      	itt	eq
 800ac86:	021b      	lsleq	r3, r3, #8
 800ac88:	3008      	addeq	r0, #8
 800ac8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac8e:	bf04      	itt	eq
 800ac90:	011b      	lsleq	r3, r3, #4
 800ac92:	3004      	addeq	r0, #4
 800ac94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac98:	bf04      	itt	eq
 800ac9a:	009b      	lsleq	r3, r3, #2
 800ac9c:	3002      	addeq	r0, #2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	db05      	blt.n	800acae <__hi0bits+0x3a>
 800aca2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aca6:	f100 0001 	add.w	r0, r0, #1
 800acaa:	bf08      	it	eq
 800acac:	2020      	moveq	r0, #32
 800acae:	4770      	bx	lr
 800acb0:	2000      	movs	r0, #0
 800acb2:	e7e5      	b.n	800ac80 <__hi0bits+0xc>

0800acb4 <__lo0bits>:
 800acb4:	6803      	ldr	r3, [r0, #0]
 800acb6:	4602      	mov	r2, r0
 800acb8:	f013 0007 	ands.w	r0, r3, #7
 800acbc:	d00b      	beq.n	800acd6 <__lo0bits+0x22>
 800acbe:	07d9      	lsls	r1, r3, #31
 800acc0:	d421      	bmi.n	800ad06 <__lo0bits+0x52>
 800acc2:	0798      	lsls	r0, r3, #30
 800acc4:	bf49      	itett	mi
 800acc6:	085b      	lsrmi	r3, r3, #1
 800acc8:	089b      	lsrpl	r3, r3, #2
 800acca:	2001      	movmi	r0, #1
 800accc:	6013      	strmi	r3, [r2, #0]
 800acce:	bf5c      	itt	pl
 800acd0:	2002      	movpl	r0, #2
 800acd2:	6013      	strpl	r3, [r2, #0]
 800acd4:	4770      	bx	lr
 800acd6:	b299      	uxth	r1, r3
 800acd8:	b909      	cbnz	r1, 800acde <__lo0bits+0x2a>
 800acda:	2010      	movs	r0, #16
 800acdc:	0c1b      	lsrs	r3, r3, #16
 800acde:	b2d9      	uxtb	r1, r3
 800ace0:	b909      	cbnz	r1, 800ace6 <__lo0bits+0x32>
 800ace2:	3008      	adds	r0, #8
 800ace4:	0a1b      	lsrs	r3, r3, #8
 800ace6:	0719      	lsls	r1, r3, #28
 800ace8:	bf04      	itt	eq
 800acea:	091b      	lsreq	r3, r3, #4
 800acec:	3004      	addeq	r0, #4
 800acee:	0799      	lsls	r1, r3, #30
 800acf0:	bf04      	itt	eq
 800acf2:	089b      	lsreq	r3, r3, #2
 800acf4:	3002      	addeq	r0, #2
 800acf6:	07d9      	lsls	r1, r3, #31
 800acf8:	d403      	bmi.n	800ad02 <__lo0bits+0x4e>
 800acfa:	085b      	lsrs	r3, r3, #1
 800acfc:	f100 0001 	add.w	r0, r0, #1
 800ad00:	d003      	beq.n	800ad0a <__lo0bits+0x56>
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	4770      	bx	lr
 800ad06:	2000      	movs	r0, #0
 800ad08:	4770      	bx	lr
 800ad0a:	2020      	movs	r0, #32
 800ad0c:	4770      	bx	lr
	...

0800ad10 <__i2b>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	460c      	mov	r4, r1
 800ad14:	2101      	movs	r1, #1
 800ad16:	f7ff febb 	bl	800aa90 <_Balloc>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	b928      	cbnz	r0, 800ad2a <__i2b+0x1a>
 800ad1e:	f240 1145 	movw	r1, #325	; 0x145
 800ad22:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <__i2b+0x24>)
 800ad24:	4804      	ldr	r0, [pc, #16]	; (800ad38 <__i2b+0x28>)
 800ad26:	f7fe fc71 	bl	800960c <__assert_func>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	6144      	str	r4, [r0, #20]
 800ad2e:	6103      	str	r3, [r0, #16]
 800ad30:	bd10      	pop	{r4, pc}
 800ad32:	bf00      	nop
 800ad34:	0800bf3f 	.word	0x0800bf3f
 800ad38:	0800bfb0 	.word	0x0800bfb0

0800ad3c <__multiply>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	4691      	mov	r9, r2
 800ad42:	690a      	ldr	r2, [r1, #16]
 800ad44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad48:	460c      	mov	r4, r1
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	bfbe      	ittt	lt
 800ad4e:	460b      	movlt	r3, r1
 800ad50:	464c      	movlt	r4, r9
 800ad52:	4699      	movlt	r9, r3
 800ad54:	6927      	ldr	r7, [r4, #16]
 800ad56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad5a:	68a3      	ldr	r3, [r4, #8]
 800ad5c:	6861      	ldr	r1, [r4, #4]
 800ad5e:	eb07 060a 	add.w	r6, r7, sl
 800ad62:	42b3      	cmp	r3, r6
 800ad64:	b085      	sub	sp, #20
 800ad66:	bfb8      	it	lt
 800ad68:	3101      	addlt	r1, #1
 800ad6a:	f7ff fe91 	bl	800aa90 <_Balloc>
 800ad6e:	b930      	cbnz	r0, 800ad7e <__multiply+0x42>
 800ad70:	4602      	mov	r2, r0
 800ad72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ad76:	4b43      	ldr	r3, [pc, #268]	; (800ae84 <__multiply+0x148>)
 800ad78:	4843      	ldr	r0, [pc, #268]	; (800ae88 <__multiply+0x14c>)
 800ad7a:	f7fe fc47 	bl	800960c <__assert_func>
 800ad7e:	f100 0514 	add.w	r5, r0, #20
 800ad82:	462b      	mov	r3, r5
 800ad84:	2200      	movs	r2, #0
 800ad86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad8a:	4543      	cmp	r3, r8
 800ad8c:	d321      	bcc.n	800add2 <__multiply+0x96>
 800ad8e:	f104 0314 	add.w	r3, r4, #20
 800ad92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad96:	f109 0314 	add.w	r3, r9, #20
 800ad9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad9e:	9202      	str	r2, [sp, #8]
 800ada0:	1b3a      	subs	r2, r7, r4
 800ada2:	3a15      	subs	r2, #21
 800ada4:	f022 0203 	bic.w	r2, r2, #3
 800ada8:	3204      	adds	r2, #4
 800adaa:	f104 0115 	add.w	r1, r4, #21
 800adae:	428f      	cmp	r7, r1
 800adb0:	bf38      	it	cc
 800adb2:	2204      	movcc	r2, #4
 800adb4:	9201      	str	r2, [sp, #4]
 800adb6:	9a02      	ldr	r2, [sp, #8]
 800adb8:	9303      	str	r3, [sp, #12]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d80c      	bhi.n	800add8 <__multiply+0x9c>
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	dd03      	ble.n	800adca <__multiply+0x8e>
 800adc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d05a      	beq.n	800ae80 <__multiply+0x144>
 800adca:	6106      	str	r6, [r0, #16]
 800adcc:	b005      	add	sp, #20
 800adce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add2:	f843 2b04 	str.w	r2, [r3], #4
 800add6:	e7d8      	b.n	800ad8a <__multiply+0x4e>
 800add8:	f8b3 a000 	ldrh.w	sl, [r3]
 800addc:	f1ba 0f00 	cmp.w	sl, #0
 800ade0:	d023      	beq.n	800ae2a <__multiply+0xee>
 800ade2:	46a9      	mov	r9, r5
 800ade4:	f04f 0c00 	mov.w	ip, #0
 800ade8:	f104 0e14 	add.w	lr, r4, #20
 800adec:	f85e 2b04 	ldr.w	r2, [lr], #4
 800adf0:	f8d9 1000 	ldr.w	r1, [r9]
 800adf4:	fa1f fb82 	uxth.w	fp, r2
 800adf8:	b289      	uxth	r1, r1
 800adfa:	fb0a 110b 	mla	r1, sl, fp, r1
 800adfe:	4461      	add	r1, ip
 800ae00:	f8d9 c000 	ldr.w	ip, [r9]
 800ae04:	0c12      	lsrs	r2, r2, #16
 800ae06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae0a:	fb0a c202 	mla	r2, sl, r2, ip
 800ae0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae12:	b289      	uxth	r1, r1
 800ae14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae18:	4577      	cmp	r7, lr
 800ae1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae1e:	f849 1b04 	str.w	r1, [r9], #4
 800ae22:	d8e3      	bhi.n	800adec <__multiply+0xb0>
 800ae24:	9a01      	ldr	r2, [sp, #4]
 800ae26:	f845 c002 	str.w	ip, [r5, r2]
 800ae2a:	9a03      	ldr	r2, [sp, #12]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae32:	f1b9 0f00 	cmp.w	r9, #0
 800ae36:	d021      	beq.n	800ae7c <__multiply+0x140>
 800ae38:	46ae      	mov	lr, r5
 800ae3a:	f04f 0a00 	mov.w	sl, #0
 800ae3e:	6829      	ldr	r1, [r5, #0]
 800ae40:	f104 0c14 	add.w	ip, r4, #20
 800ae44:	f8bc b000 	ldrh.w	fp, [ip]
 800ae48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae4c:	b289      	uxth	r1, r1
 800ae4e:	fb09 220b 	mla	r2, r9, fp, r2
 800ae52:	4452      	add	r2, sl
 800ae54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae58:	f84e 1b04 	str.w	r1, [lr], #4
 800ae5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae64:	f8be 1000 	ldrh.w	r1, [lr]
 800ae68:	4567      	cmp	r7, ip
 800ae6a:	fb09 110a 	mla	r1, r9, sl, r1
 800ae6e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ae72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae76:	d8e5      	bhi.n	800ae44 <__multiply+0x108>
 800ae78:	9a01      	ldr	r2, [sp, #4]
 800ae7a:	50a9      	str	r1, [r5, r2]
 800ae7c:	3504      	adds	r5, #4
 800ae7e:	e79a      	b.n	800adb6 <__multiply+0x7a>
 800ae80:	3e01      	subs	r6, #1
 800ae82:	e79c      	b.n	800adbe <__multiply+0x82>
 800ae84:	0800bf3f 	.word	0x0800bf3f
 800ae88:	0800bfb0 	.word	0x0800bfb0

0800ae8c <__pow5mult>:
 800ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae90:	4615      	mov	r5, r2
 800ae92:	f012 0203 	ands.w	r2, r2, #3
 800ae96:	4606      	mov	r6, r0
 800ae98:	460f      	mov	r7, r1
 800ae9a:	d007      	beq.n	800aeac <__pow5mult+0x20>
 800ae9c:	4c25      	ldr	r4, [pc, #148]	; (800af34 <__pow5mult+0xa8>)
 800ae9e:	3a01      	subs	r2, #1
 800aea0:	2300      	movs	r3, #0
 800aea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aea6:	f7ff fe55 	bl	800ab54 <__multadd>
 800aeaa:	4607      	mov	r7, r0
 800aeac:	10ad      	asrs	r5, r5, #2
 800aeae:	d03d      	beq.n	800af2c <__pow5mult+0xa0>
 800aeb0:	69f4      	ldr	r4, [r6, #28]
 800aeb2:	b97c      	cbnz	r4, 800aed4 <__pow5mult+0x48>
 800aeb4:	2010      	movs	r0, #16
 800aeb6:	f7fc fb7f 	bl	80075b8 <malloc>
 800aeba:	4602      	mov	r2, r0
 800aebc:	61f0      	str	r0, [r6, #28]
 800aebe:	b928      	cbnz	r0, 800aecc <__pow5mult+0x40>
 800aec0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aec4:	4b1c      	ldr	r3, [pc, #112]	; (800af38 <__pow5mult+0xac>)
 800aec6:	481d      	ldr	r0, [pc, #116]	; (800af3c <__pow5mult+0xb0>)
 800aec8:	f7fe fba0 	bl	800960c <__assert_func>
 800aecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aed0:	6004      	str	r4, [r0, #0]
 800aed2:	60c4      	str	r4, [r0, #12]
 800aed4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aedc:	b94c      	cbnz	r4, 800aef2 <__pow5mult+0x66>
 800aede:	f240 2171 	movw	r1, #625	; 0x271
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ff14 	bl	800ad10 <__i2b>
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	f8c8 0008 	str.w	r0, [r8, #8]
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	f04f 0900 	mov.w	r9, #0
 800aef6:	07eb      	lsls	r3, r5, #31
 800aef8:	d50a      	bpl.n	800af10 <__pow5mult+0x84>
 800aefa:	4639      	mov	r1, r7
 800aefc:	4622      	mov	r2, r4
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ff1c 	bl	800ad3c <__multiply>
 800af04:	4680      	mov	r8, r0
 800af06:	4639      	mov	r1, r7
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff fe01 	bl	800ab10 <_Bfree>
 800af0e:	4647      	mov	r7, r8
 800af10:	106d      	asrs	r5, r5, #1
 800af12:	d00b      	beq.n	800af2c <__pow5mult+0xa0>
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	b938      	cbnz	r0, 800af28 <__pow5mult+0x9c>
 800af18:	4622      	mov	r2, r4
 800af1a:	4621      	mov	r1, r4
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff ff0d 	bl	800ad3c <__multiply>
 800af22:	6020      	str	r0, [r4, #0]
 800af24:	f8c0 9000 	str.w	r9, [r0]
 800af28:	4604      	mov	r4, r0
 800af2a:	e7e4      	b.n	800aef6 <__pow5mult+0x6a>
 800af2c:	4638      	mov	r0, r7
 800af2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af32:	bf00      	nop
 800af34:	0800c100 	.word	0x0800c100
 800af38:	0800be25 	.word	0x0800be25
 800af3c:	0800bfb0 	.word	0x0800bfb0

0800af40 <__lshift>:
 800af40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af44:	460c      	mov	r4, r1
 800af46:	4607      	mov	r7, r0
 800af48:	4691      	mov	r9, r2
 800af4a:	6923      	ldr	r3, [r4, #16]
 800af4c:	6849      	ldr	r1, [r1, #4]
 800af4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af52:	68a3      	ldr	r3, [r4, #8]
 800af54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af58:	f108 0601 	add.w	r6, r8, #1
 800af5c:	42b3      	cmp	r3, r6
 800af5e:	db0b      	blt.n	800af78 <__lshift+0x38>
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff fd95 	bl	800aa90 <_Balloc>
 800af66:	4605      	mov	r5, r0
 800af68:	b948      	cbnz	r0, 800af7e <__lshift+0x3e>
 800af6a:	4602      	mov	r2, r0
 800af6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800af70:	4b27      	ldr	r3, [pc, #156]	; (800b010 <__lshift+0xd0>)
 800af72:	4828      	ldr	r0, [pc, #160]	; (800b014 <__lshift+0xd4>)
 800af74:	f7fe fb4a 	bl	800960c <__assert_func>
 800af78:	3101      	adds	r1, #1
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	e7ee      	b.n	800af5c <__lshift+0x1c>
 800af7e:	2300      	movs	r3, #0
 800af80:	f100 0114 	add.w	r1, r0, #20
 800af84:	f100 0210 	add.w	r2, r0, #16
 800af88:	4618      	mov	r0, r3
 800af8a:	4553      	cmp	r3, sl
 800af8c:	db33      	blt.n	800aff6 <__lshift+0xb6>
 800af8e:	6920      	ldr	r0, [r4, #16]
 800af90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af94:	f104 0314 	add.w	r3, r4, #20
 800af98:	f019 091f 	ands.w	r9, r9, #31
 800af9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afa4:	d02b      	beq.n	800affe <__lshift+0xbe>
 800afa6:	468a      	mov	sl, r1
 800afa8:	2200      	movs	r2, #0
 800afaa:	f1c9 0e20 	rsb	lr, r9, #32
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	fa00 f009 	lsl.w	r0, r0, r9
 800afb4:	4310      	orrs	r0, r2
 800afb6:	f84a 0b04 	str.w	r0, [sl], #4
 800afba:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbe:	459c      	cmp	ip, r3
 800afc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800afc4:	d8f3      	bhi.n	800afae <__lshift+0x6e>
 800afc6:	ebac 0304 	sub.w	r3, ip, r4
 800afca:	3b15      	subs	r3, #21
 800afcc:	f023 0303 	bic.w	r3, r3, #3
 800afd0:	3304      	adds	r3, #4
 800afd2:	f104 0015 	add.w	r0, r4, #21
 800afd6:	4584      	cmp	ip, r0
 800afd8:	bf38      	it	cc
 800afda:	2304      	movcc	r3, #4
 800afdc:	50ca      	str	r2, [r1, r3]
 800afde:	b10a      	cbz	r2, 800afe4 <__lshift+0xa4>
 800afe0:	f108 0602 	add.w	r6, r8, #2
 800afe4:	3e01      	subs	r6, #1
 800afe6:	4638      	mov	r0, r7
 800afe8:	4621      	mov	r1, r4
 800afea:	612e      	str	r6, [r5, #16]
 800afec:	f7ff fd90 	bl	800ab10 <_Bfree>
 800aff0:	4628      	mov	r0, r5
 800aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff6:	f842 0f04 	str.w	r0, [r2, #4]!
 800affa:	3301      	adds	r3, #1
 800affc:	e7c5      	b.n	800af8a <__lshift+0x4a>
 800affe:	3904      	subs	r1, #4
 800b000:	f853 2b04 	ldr.w	r2, [r3], #4
 800b004:	459c      	cmp	ip, r3
 800b006:	f841 2f04 	str.w	r2, [r1, #4]!
 800b00a:	d8f9      	bhi.n	800b000 <__lshift+0xc0>
 800b00c:	e7ea      	b.n	800afe4 <__lshift+0xa4>
 800b00e:	bf00      	nop
 800b010:	0800bf3f 	.word	0x0800bf3f
 800b014:	0800bfb0 	.word	0x0800bfb0

0800b018 <__mcmp>:
 800b018:	4603      	mov	r3, r0
 800b01a:	690a      	ldr	r2, [r1, #16]
 800b01c:	6900      	ldr	r0, [r0, #16]
 800b01e:	b530      	push	{r4, r5, lr}
 800b020:	1a80      	subs	r0, r0, r2
 800b022:	d10d      	bne.n	800b040 <__mcmp+0x28>
 800b024:	3314      	adds	r3, #20
 800b026:	3114      	adds	r1, #20
 800b028:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b02c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b030:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b034:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b038:	4295      	cmp	r5, r2
 800b03a:	d002      	beq.n	800b042 <__mcmp+0x2a>
 800b03c:	d304      	bcc.n	800b048 <__mcmp+0x30>
 800b03e:	2001      	movs	r0, #1
 800b040:	bd30      	pop	{r4, r5, pc}
 800b042:	42a3      	cmp	r3, r4
 800b044:	d3f4      	bcc.n	800b030 <__mcmp+0x18>
 800b046:	e7fb      	b.n	800b040 <__mcmp+0x28>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e7f8      	b.n	800b040 <__mcmp+0x28>
	...

0800b050 <__mdiff>:
 800b050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	460d      	mov	r5, r1
 800b056:	4607      	mov	r7, r0
 800b058:	4611      	mov	r1, r2
 800b05a:	4628      	mov	r0, r5
 800b05c:	4614      	mov	r4, r2
 800b05e:	f7ff ffdb 	bl	800b018 <__mcmp>
 800b062:	1e06      	subs	r6, r0, #0
 800b064:	d111      	bne.n	800b08a <__mdiff+0x3a>
 800b066:	4631      	mov	r1, r6
 800b068:	4638      	mov	r0, r7
 800b06a:	f7ff fd11 	bl	800aa90 <_Balloc>
 800b06e:	4602      	mov	r2, r0
 800b070:	b928      	cbnz	r0, 800b07e <__mdiff+0x2e>
 800b072:	f240 2137 	movw	r1, #567	; 0x237
 800b076:	4b3a      	ldr	r3, [pc, #232]	; (800b160 <__mdiff+0x110>)
 800b078:	483a      	ldr	r0, [pc, #232]	; (800b164 <__mdiff+0x114>)
 800b07a:	f7fe fac7 	bl	800960c <__assert_func>
 800b07e:	2301      	movs	r3, #1
 800b080:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b084:	4610      	mov	r0, r2
 800b086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08a:	bfa4      	itt	ge
 800b08c:	4623      	movge	r3, r4
 800b08e:	462c      	movge	r4, r5
 800b090:	4638      	mov	r0, r7
 800b092:	6861      	ldr	r1, [r4, #4]
 800b094:	bfa6      	itte	ge
 800b096:	461d      	movge	r5, r3
 800b098:	2600      	movge	r6, #0
 800b09a:	2601      	movlt	r6, #1
 800b09c:	f7ff fcf8 	bl	800aa90 <_Balloc>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	b918      	cbnz	r0, 800b0ac <__mdiff+0x5c>
 800b0a4:	f240 2145 	movw	r1, #581	; 0x245
 800b0a8:	4b2d      	ldr	r3, [pc, #180]	; (800b160 <__mdiff+0x110>)
 800b0aa:	e7e5      	b.n	800b078 <__mdiff+0x28>
 800b0ac:	f102 0814 	add.w	r8, r2, #20
 800b0b0:	46c2      	mov	sl, r8
 800b0b2:	f04f 0c00 	mov.w	ip, #0
 800b0b6:	6927      	ldr	r7, [r4, #16]
 800b0b8:	60c6      	str	r6, [r0, #12]
 800b0ba:	692e      	ldr	r6, [r5, #16]
 800b0bc:	f104 0014 	add.w	r0, r4, #20
 800b0c0:	f105 0914 	add.w	r9, r5, #20
 800b0c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b0c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0cc:	3410      	adds	r4, #16
 800b0ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b0d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0d6:	fa1f f18b 	uxth.w	r1, fp
 800b0da:	4461      	add	r1, ip
 800b0dc:	fa1f fc83 	uxth.w	ip, r3
 800b0e0:	0c1b      	lsrs	r3, r3, #16
 800b0e2:	eba1 010c 	sub.w	r1, r1, ip
 800b0e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b0ee:	b289      	uxth	r1, r1
 800b0f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b0f4:	454e      	cmp	r6, r9
 800b0f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b0fa:	f84a 1b04 	str.w	r1, [sl], #4
 800b0fe:	d8e6      	bhi.n	800b0ce <__mdiff+0x7e>
 800b100:	1b73      	subs	r3, r6, r5
 800b102:	3b15      	subs	r3, #21
 800b104:	f023 0303 	bic.w	r3, r3, #3
 800b108:	3515      	adds	r5, #21
 800b10a:	3304      	adds	r3, #4
 800b10c:	42ae      	cmp	r6, r5
 800b10e:	bf38      	it	cc
 800b110:	2304      	movcc	r3, #4
 800b112:	4418      	add	r0, r3
 800b114:	4443      	add	r3, r8
 800b116:	461e      	mov	r6, r3
 800b118:	4605      	mov	r5, r0
 800b11a:	4575      	cmp	r5, lr
 800b11c:	d30e      	bcc.n	800b13c <__mdiff+0xec>
 800b11e:	f10e 0103 	add.w	r1, lr, #3
 800b122:	1a09      	subs	r1, r1, r0
 800b124:	f021 0103 	bic.w	r1, r1, #3
 800b128:	3803      	subs	r0, #3
 800b12a:	4586      	cmp	lr, r0
 800b12c:	bf38      	it	cc
 800b12e:	2100      	movcc	r1, #0
 800b130:	440b      	add	r3, r1
 800b132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b136:	b189      	cbz	r1, 800b15c <__mdiff+0x10c>
 800b138:	6117      	str	r7, [r2, #16]
 800b13a:	e7a3      	b.n	800b084 <__mdiff+0x34>
 800b13c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b140:	fa1f f188 	uxth.w	r1, r8
 800b144:	4461      	add	r1, ip
 800b146:	140c      	asrs	r4, r1, #16
 800b148:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b14c:	b289      	uxth	r1, r1
 800b14e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b152:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b156:	f846 1b04 	str.w	r1, [r6], #4
 800b15a:	e7de      	b.n	800b11a <__mdiff+0xca>
 800b15c:	3f01      	subs	r7, #1
 800b15e:	e7e8      	b.n	800b132 <__mdiff+0xe2>
 800b160:	0800bf3f 	.word	0x0800bf3f
 800b164:	0800bfb0 	.word	0x0800bfb0

0800b168 <__ulp>:
 800b168:	4b0e      	ldr	r3, [pc, #56]	; (800b1a4 <__ulp+0x3c>)
 800b16a:	400b      	ands	r3, r1
 800b16c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc08      	bgt.n	800b186 <__ulp+0x1e>
 800b174:	425b      	negs	r3, r3
 800b176:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b17a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b17e:	da04      	bge.n	800b18a <__ulp+0x22>
 800b180:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b184:	4113      	asrs	r3, r2
 800b186:	2200      	movs	r2, #0
 800b188:	e008      	b.n	800b19c <__ulp+0x34>
 800b18a:	f1a2 0314 	sub.w	r3, r2, #20
 800b18e:	2b1e      	cmp	r3, #30
 800b190:	bfd6      	itet	le
 800b192:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b196:	2201      	movgt	r2, #1
 800b198:	40da      	lsrle	r2, r3
 800b19a:	2300      	movs	r3, #0
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	7ff00000 	.word	0x7ff00000

0800b1a8 <__b2d>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	6905      	ldr	r5, [r0, #16]
 800b1ac:	f100 0714 	add.w	r7, r0, #20
 800b1b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b1b4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b1b8:	1f2e      	subs	r6, r5, #4
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7ff fd5a 	bl	800ac74 <__hi0bits>
 800b1c0:	f1c0 0220 	rsb	r2, r0, #32
 800b1c4:	280a      	cmp	r0, #10
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b234 <__b2d+0x8c>
 800b1cc:	600a      	str	r2, [r1, #0]
 800b1ce:	dc12      	bgt.n	800b1f6 <__b2d+0x4e>
 800b1d0:	f1c0 0e0b 	rsb	lr, r0, #11
 800b1d4:	fa24 f20e 	lsr.w	r2, r4, lr
 800b1d8:	42b7      	cmp	r7, r6
 800b1da:	ea42 010c 	orr.w	r1, r2, ip
 800b1de:	bf2c      	ite	cs
 800b1e0:	2200      	movcs	r2, #0
 800b1e2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b1e6:	3315      	adds	r3, #21
 800b1e8:	fa04 f303 	lsl.w	r3, r4, r3
 800b1ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1f6:	42b7      	cmp	r7, r6
 800b1f8:	bf2e      	itee	cs
 800b1fa:	2200      	movcs	r2, #0
 800b1fc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b200:	f1a5 0608 	subcc.w	r6, r5, #8
 800b204:	3b0b      	subs	r3, #11
 800b206:	d012      	beq.n	800b22e <__b2d+0x86>
 800b208:	f1c3 0520 	rsb	r5, r3, #32
 800b20c:	fa22 f105 	lsr.w	r1, r2, r5
 800b210:	409c      	lsls	r4, r3
 800b212:	430c      	orrs	r4, r1
 800b214:	42be      	cmp	r6, r7
 800b216:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b21a:	bf94      	ite	ls
 800b21c:	2400      	movls	r4, #0
 800b21e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b222:	409a      	lsls	r2, r3
 800b224:	40ec      	lsrs	r4, r5
 800b226:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b22a:	4322      	orrs	r2, r4
 800b22c:	e7e1      	b.n	800b1f2 <__b2d+0x4a>
 800b22e:	ea44 010c 	orr.w	r1, r4, ip
 800b232:	e7de      	b.n	800b1f2 <__b2d+0x4a>
 800b234:	3ff00000 	.word	0x3ff00000

0800b238 <__d2b>:
 800b238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b23a:	2101      	movs	r1, #1
 800b23c:	4617      	mov	r7, r2
 800b23e:	461c      	mov	r4, r3
 800b240:	9e08      	ldr	r6, [sp, #32]
 800b242:	f7ff fc25 	bl	800aa90 <_Balloc>
 800b246:	4605      	mov	r5, r0
 800b248:	b930      	cbnz	r0, 800b258 <__d2b+0x20>
 800b24a:	4602      	mov	r2, r0
 800b24c:	f240 310f 	movw	r1, #783	; 0x30f
 800b250:	4b22      	ldr	r3, [pc, #136]	; (800b2dc <__d2b+0xa4>)
 800b252:	4823      	ldr	r0, [pc, #140]	; (800b2e0 <__d2b+0xa8>)
 800b254:	f7fe f9da 	bl	800960c <__assert_func>
 800b258:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b25c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b260:	bb24      	cbnz	r4, 800b2ac <__d2b+0x74>
 800b262:	2f00      	cmp	r7, #0
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	d026      	beq.n	800b2b6 <__d2b+0x7e>
 800b268:	4668      	mov	r0, sp
 800b26a:	9700      	str	r7, [sp, #0]
 800b26c:	f7ff fd22 	bl	800acb4 <__lo0bits>
 800b270:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b274:	b1e8      	cbz	r0, 800b2b2 <__d2b+0x7a>
 800b276:	f1c0 0320 	rsb	r3, r0, #32
 800b27a:	fa02 f303 	lsl.w	r3, r2, r3
 800b27e:	430b      	orrs	r3, r1
 800b280:	40c2      	lsrs	r2, r0
 800b282:	616b      	str	r3, [r5, #20]
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	9b01      	ldr	r3, [sp, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bf14      	ite	ne
 800b28c:	2102      	movne	r1, #2
 800b28e:	2101      	moveq	r1, #1
 800b290:	61ab      	str	r3, [r5, #24]
 800b292:	6129      	str	r1, [r5, #16]
 800b294:	b1bc      	cbz	r4, 800b2c6 <__d2b+0x8e>
 800b296:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b29a:	4404      	add	r4, r0
 800b29c:	6034      	str	r4, [r6, #0]
 800b29e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a4:	6018      	str	r0, [r3, #0]
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	b003      	add	sp, #12
 800b2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b0:	e7d7      	b.n	800b262 <__d2b+0x2a>
 800b2b2:	6169      	str	r1, [r5, #20]
 800b2b4:	e7e7      	b.n	800b286 <__d2b+0x4e>
 800b2b6:	a801      	add	r0, sp, #4
 800b2b8:	f7ff fcfc 	bl	800acb4 <__lo0bits>
 800b2bc:	9b01      	ldr	r3, [sp, #4]
 800b2be:	2101      	movs	r1, #1
 800b2c0:	616b      	str	r3, [r5, #20]
 800b2c2:	3020      	adds	r0, #32
 800b2c4:	e7e5      	b.n	800b292 <__d2b+0x5a>
 800b2c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2ca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b2ce:	6030      	str	r0, [r6, #0]
 800b2d0:	6918      	ldr	r0, [r3, #16]
 800b2d2:	f7ff fccf 	bl	800ac74 <__hi0bits>
 800b2d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b2da:	e7e2      	b.n	800b2a2 <__d2b+0x6a>
 800b2dc:	0800bf3f 	.word	0x0800bf3f
 800b2e0:	0800bfb0 	.word	0x0800bfb0

0800b2e4 <__ratio>:
 800b2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4688      	mov	r8, r1
 800b2ea:	4669      	mov	r1, sp
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	f7ff ff5b 	bl	800b1a8 <__b2d>
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	460d      	mov	r5, r1
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	a901      	add	r1, sp, #4
 800b2fc:	f7ff ff54 	bl	800b1a8 <__b2d>
 800b300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b304:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b308:	468b      	mov	fp, r1
 800b30a:	eba3 0c02 	sub.w	ip, r3, r2
 800b30e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfd5      	itete	le
 800b31c:	460a      	movle	r2, r1
 800b31e:	462a      	movgt	r2, r5
 800b320:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b324:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b328:	bfd8      	it	le
 800b32a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b32e:	465b      	mov	r3, fp
 800b330:	4602      	mov	r2, r0
 800b332:	4639      	mov	r1, r7
 800b334:	4620      	mov	r0, r4
 800b336:	f7f5 fa03 	bl	8000740 <__aeabi_ddiv>
 800b33a:	b003      	add	sp, #12
 800b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b340 <__copybits>:
 800b340:	3901      	subs	r1, #1
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	1149      	asrs	r1, r1, #5
 800b346:	6914      	ldr	r4, [r2, #16]
 800b348:	3101      	adds	r1, #1
 800b34a:	f102 0314 	add.w	r3, r2, #20
 800b34e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b352:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b356:	1f05      	subs	r5, r0, #4
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d30c      	bcc.n	800b376 <__copybits+0x36>
 800b35c:	1aa3      	subs	r3, r4, r2
 800b35e:	3b11      	subs	r3, #17
 800b360:	f023 0303 	bic.w	r3, r3, #3
 800b364:	3211      	adds	r2, #17
 800b366:	42a2      	cmp	r2, r4
 800b368:	bf88      	it	hi
 800b36a:	2300      	movhi	r3, #0
 800b36c:	4418      	add	r0, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	4288      	cmp	r0, r1
 800b372:	d305      	bcc.n	800b380 <__copybits+0x40>
 800b374:	bd70      	pop	{r4, r5, r6, pc}
 800b376:	f853 6b04 	ldr.w	r6, [r3], #4
 800b37a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b37e:	e7eb      	b.n	800b358 <__copybits+0x18>
 800b380:	f840 3b04 	str.w	r3, [r0], #4
 800b384:	e7f4      	b.n	800b370 <__copybits+0x30>

0800b386 <__any_on>:
 800b386:	f100 0214 	add.w	r2, r0, #20
 800b38a:	6900      	ldr	r0, [r0, #16]
 800b38c:	114b      	asrs	r3, r1, #5
 800b38e:	4298      	cmp	r0, r3
 800b390:	b510      	push	{r4, lr}
 800b392:	db11      	blt.n	800b3b8 <__any_on+0x32>
 800b394:	dd0a      	ble.n	800b3ac <__any_on+0x26>
 800b396:	f011 011f 	ands.w	r1, r1, #31
 800b39a:	d007      	beq.n	800b3ac <__any_on+0x26>
 800b39c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3a0:	fa24 f001 	lsr.w	r0, r4, r1
 800b3a4:	fa00 f101 	lsl.w	r1, r0, r1
 800b3a8:	428c      	cmp	r4, r1
 800b3aa:	d10b      	bne.n	800b3c4 <__any_on+0x3e>
 800b3ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d803      	bhi.n	800b3bc <__any_on+0x36>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	bd10      	pop	{r4, pc}
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	e7f7      	b.n	800b3ac <__any_on+0x26>
 800b3bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	d0f5      	beq.n	800b3b0 <__any_on+0x2a>
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	e7f6      	b.n	800b3b6 <__any_on+0x30>

0800b3c8 <__ascii_wctomb>:
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	b141      	cbz	r1, 800b3e0 <__ascii_wctomb+0x18>
 800b3ce:	2aff      	cmp	r2, #255	; 0xff
 800b3d0:	d904      	bls.n	800b3dc <__ascii_wctomb+0x14>
 800b3d2:	228a      	movs	r2, #138	; 0x8a
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	4770      	bx	lr
 800b3dc:	2001      	movs	r0, #1
 800b3de:	700a      	strb	r2, [r1, #0]
 800b3e0:	4770      	bx	lr

0800b3e2 <__sfputc_r>:
 800b3e2:	6893      	ldr	r3, [r2, #8]
 800b3e4:	b410      	push	{r4}
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	6093      	str	r3, [r2, #8]
 800b3ec:	da07      	bge.n	800b3fe <__sfputc_r+0x1c>
 800b3ee:	6994      	ldr	r4, [r2, #24]
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	db01      	blt.n	800b3f8 <__sfputc_r+0x16>
 800b3f4:	290a      	cmp	r1, #10
 800b3f6:	d102      	bne.n	800b3fe <__sfputc_r+0x1c>
 800b3f8:	bc10      	pop	{r4}
 800b3fa:	f7fd bf1c 	b.w	8009236 <__swbuf_r>
 800b3fe:	6813      	ldr	r3, [r2, #0]
 800b400:	1c58      	adds	r0, r3, #1
 800b402:	6010      	str	r0, [r2, #0]
 800b404:	7019      	strb	r1, [r3, #0]
 800b406:	4608      	mov	r0, r1
 800b408:	bc10      	pop	{r4}
 800b40a:	4770      	bx	lr

0800b40c <__sfputs_r>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	4606      	mov	r6, r0
 800b410:	460f      	mov	r7, r1
 800b412:	4614      	mov	r4, r2
 800b414:	18d5      	adds	r5, r2, r3
 800b416:	42ac      	cmp	r4, r5
 800b418:	d101      	bne.n	800b41e <__sfputs_r+0x12>
 800b41a:	2000      	movs	r0, #0
 800b41c:	e007      	b.n	800b42e <__sfputs_r+0x22>
 800b41e:	463a      	mov	r2, r7
 800b420:	4630      	mov	r0, r6
 800b422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b426:	f7ff ffdc 	bl	800b3e2 <__sfputc_r>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d1f3      	bne.n	800b416 <__sfputs_r+0xa>
 800b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b430 <_vfiprintf_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	460d      	mov	r5, r1
 800b436:	4614      	mov	r4, r2
 800b438:	4698      	mov	r8, r3
 800b43a:	4606      	mov	r6, r0
 800b43c:	b09d      	sub	sp, #116	; 0x74
 800b43e:	b118      	cbz	r0, 800b448 <_vfiprintf_r+0x18>
 800b440:	6a03      	ldr	r3, [r0, #32]
 800b442:	b90b      	cbnz	r3, 800b448 <_vfiprintf_r+0x18>
 800b444:	f7fd fd62 	bl	8008f0c <__sinit>
 800b448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b44a:	07d9      	lsls	r1, r3, #31
 800b44c:	d405      	bmi.n	800b45a <_vfiprintf_r+0x2a>
 800b44e:	89ab      	ldrh	r3, [r5, #12]
 800b450:	059a      	lsls	r2, r3, #22
 800b452:	d402      	bmi.n	800b45a <_vfiprintf_r+0x2a>
 800b454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b456:	f7fe f8a8 	bl	80095aa <__retarget_lock_acquire_recursive>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	071b      	lsls	r3, r3, #28
 800b45e:	d501      	bpl.n	800b464 <_vfiprintf_r+0x34>
 800b460:	692b      	ldr	r3, [r5, #16]
 800b462:	b99b      	cbnz	r3, 800b48c <_vfiprintf_r+0x5c>
 800b464:	4629      	mov	r1, r5
 800b466:	4630      	mov	r0, r6
 800b468:	f7fd ff22 	bl	80092b0 <__swsetup_r>
 800b46c:	b170      	cbz	r0, 800b48c <_vfiprintf_r+0x5c>
 800b46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b470:	07dc      	lsls	r4, r3, #31
 800b472:	d504      	bpl.n	800b47e <_vfiprintf_r+0x4e>
 800b474:	f04f 30ff 	mov.w	r0, #4294967295
 800b478:	b01d      	add	sp, #116	; 0x74
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	89ab      	ldrh	r3, [r5, #12]
 800b480:	0598      	lsls	r0, r3, #22
 800b482:	d4f7      	bmi.n	800b474 <_vfiprintf_r+0x44>
 800b484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b486:	f7fe f891 	bl	80095ac <__retarget_lock_release_recursive>
 800b48a:	e7f3      	b.n	800b474 <_vfiprintf_r+0x44>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	2320      	movs	r3, #32
 800b492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b496:	2330      	movs	r3, #48	; 0x30
 800b498:	f04f 0901 	mov.w	r9, #1
 800b49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b650 <_vfiprintf_r+0x220>
 800b4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	469a      	mov	sl, r3
 800b4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b0:	b10a      	cbz	r2, 800b4b6 <_vfiprintf_r+0x86>
 800b4b2:	2a25      	cmp	r2, #37	; 0x25
 800b4b4:	d1f9      	bne.n	800b4aa <_vfiprintf_r+0x7a>
 800b4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ba:	d00b      	beq.n	800b4d4 <_vfiprintf_r+0xa4>
 800b4bc:	465b      	mov	r3, fp
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7ff ffa2 	bl	800b40c <__sfputs_r>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	f000 80a9 	beq.w	800b620 <_vfiprintf_r+0x1f0>
 800b4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d0:	445a      	add	r2, fp
 800b4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 80a1 	beq.w	800b620 <_vfiprintf_r+0x1f0>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e8:	f10a 0a01 	add.w	sl, sl, #1
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b4f6:	4654      	mov	r4, sl
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fe:	4854      	ldr	r0, [pc, #336]	; (800b650 <_vfiprintf_r+0x220>)
 800b500:	f7fe f85d 	bl	80095be <memchr>
 800b504:	9a04      	ldr	r2, [sp, #16]
 800b506:	b9d8      	cbnz	r0, 800b540 <_vfiprintf_r+0x110>
 800b508:	06d1      	lsls	r1, r2, #27
 800b50a:	bf44      	itt	mi
 800b50c:	2320      	movmi	r3, #32
 800b50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b512:	0713      	lsls	r3, r2, #28
 800b514:	bf44      	itt	mi
 800b516:	232b      	movmi	r3, #43	; 0x2b
 800b518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51c:	f89a 3000 	ldrb.w	r3, [sl]
 800b520:	2b2a      	cmp	r3, #42	; 0x2a
 800b522:	d015      	beq.n	800b550 <_vfiprintf_r+0x120>
 800b524:	4654      	mov	r4, sl
 800b526:	2000      	movs	r0, #0
 800b528:	f04f 0c0a 	mov.w	ip, #10
 800b52c:	9a07      	ldr	r2, [sp, #28]
 800b52e:	4621      	mov	r1, r4
 800b530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b534:	3b30      	subs	r3, #48	; 0x30
 800b536:	2b09      	cmp	r3, #9
 800b538:	d94d      	bls.n	800b5d6 <_vfiprintf_r+0x1a6>
 800b53a:	b1b0      	cbz	r0, 800b56a <_vfiprintf_r+0x13a>
 800b53c:	9207      	str	r2, [sp, #28]
 800b53e:	e014      	b.n	800b56a <_vfiprintf_r+0x13a>
 800b540:	eba0 0308 	sub.w	r3, r0, r8
 800b544:	fa09 f303 	lsl.w	r3, r9, r3
 800b548:	4313      	orrs	r3, r2
 800b54a:	46a2      	mov	sl, r4
 800b54c:	9304      	str	r3, [sp, #16]
 800b54e:	e7d2      	b.n	800b4f6 <_vfiprintf_r+0xc6>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	1d19      	adds	r1, r3, #4
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	9103      	str	r1, [sp, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bfbb      	ittet	lt
 800b55c:	425b      	neglt	r3, r3
 800b55e:	f042 0202 	orrlt.w	r2, r2, #2
 800b562:	9307      	strge	r3, [sp, #28]
 800b564:	9307      	strlt	r3, [sp, #28]
 800b566:	bfb8      	it	lt
 800b568:	9204      	strlt	r2, [sp, #16]
 800b56a:	7823      	ldrb	r3, [r4, #0]
 800b56c:	2b2e      	cmp	r3, #46	; 0x2e
 800b56e:	d10c      	bne.n	800b58a <_vfiprintf_r+0x15a>
 800b570:	7863      	ldrb	r3, [r4, #1]
 800b572:	2b2a      	cmp	r3, #42	; 0x2a
 800b574:	d134      	bne.n	800b5e0 <_vfiprintf_r+0x1b0>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	3402      	adds	r4, #2
 800b57a:	1d1a      	adds	r2, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	9203      	str	r2, [sp, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfb8      	it	lt
 800b584:	f04f 33ff 	movlt.w	r3, #4294967295
 800b588:	9305      	str	r3, [sp, #20]
 800b58a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b654 <_vfiprintf_r+0x224>
 800b58e:	2203      	movs	r2, #3
 800b590:	4650      	mov	r0, sl
 800b592:	7821      	ldrb	r1, [r4, #0]
 800b594:	f7fe f813 	bl	80095be <memchr>
 800b598:	b138      	cbz	r0, 800b5aa <_vfiprintf_r+0x17a>
 800b59a:	2240      	movs	r2, #64	; 0x40
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	eba0 000a 	sub.w	r0, r0, sl
 800b5a2:	4082      	lsls	r2, r0
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ae:	2206      	movs	r2, #6
 800b5b0:	4829      	ldr	r0, [pc, #164]	; (800b658 <_vfiprintf_r+0x228>)
 800b5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5b6:	f7fe f802 	bl	80095be <memchr>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d03f      	beq.n	800b63e <_vfiprintf_r+0x20e>
 800b5be:	4b27      	ldr	r3, [pc, #156]	; (800b65c <_vfiprintf_r+0x22c>)
 800b5c0:	bb1b      	cbnz	r3, 800b60a <_vfiprintf_r+0x1da>
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	3307      	adds	r3, #7
 800b5c6:	f023 0307 	bic.w	r3, r3, #7
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d0:	443b      	add	r3, r7
 800b5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d4:	e768      	b.n	800b4a8 <_vfiprintf_r+0x78>
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	2001      	movs	r0, #1
 800b5da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5de:	e7a6      	b.n	800b52e <_vfiprintf_r+0xfe>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f04f 0c0a 	mov.w	ip, #10
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	3401      	adds	r4, #1
 800b5ea:	9305      	str	r3, [sp, #20]
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f2:	3a30      	subs	r2, #48	; 0x30
 800b5f4:	2a09      	cmp	r2, #9
 800b5f6:	d903      	bls.n	800b600 <_vfiprintf_r+0x1d0>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d0c6      	beq.n	800b58a <_vfiprintf_r+0x15a>
 800b5fc:	9105      	str	r1, [sp, #20]
 800b5fe:	e7c4      	b.n	800b58a <_vfiprintf_r+0x15a>
 800b600:	4604      	mov	r4, r0
 800b602:	2301      	movs	r3, #1
 800b604:	fb0c 2101 	mla	r1, ip, r1, r2
 800b608:	e7f0      	b.n	800b5ec <_vfiprintf_r+0x1bc>
 800b60a:	ab03      	add	r3, sp, #12
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	462a      	mov	r2, r5
 800b610:	4630      	mov	r0, r6
 800b612:	4b13      	ldr	r3, [pc, #76]	; (800b660 <_vfiprintf_r+0x230>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	f7fd f82b 	bl	8008670 <_printf_float>
 800b61a:	4607      	mov	r7, r0
 800b61c:	1c78      	adds	r0, r7, #1
 800b61e:	d1d6      	bne.n	800b5ce <_vfiprintf_r+0x19e>
 800b620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b622:	07d9      	lsls	r1, r3, #31
 800b624:	d405      	bmi.n	800b632 <_vfiprintf_r+0x202>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	059a      	lsls	r2, r3, #22
 800b62a:	d402      	bmi.n	800b632 <_vfiprintf_r+0x202>
 800b62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b62e:	f7fd ffbd 	bl	80095ac <__retarget_lock_release_recursive>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	065b      	lsls	r3, r3, #25
 800b636:	f53f af1d 	bmi.w	800b474 <_vfiprintf_r+0x44>
 800b63a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b63c:	e71c      	b.n	800b478 <_vfiprintf_r+0x48>
 800b63e:	ab03      	add	r3, sp, #12
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	462a      	mov	r2, r5
 800b644:	4630      	mov	r0, r6
 800b646:	4b06      	ldr	r3, [pc, #24]	; (800b660 <_vfiprintf_r+0x230>)
 800b648:	a904      	add	r1, sp, #16
 800b64a:	f7fd fab1 	bl	8008bb0 <_printf_i>
 800b64e:	e7e4      	b.n	800b61a <_vfiprintf_r+0x1ea>
 800b650:	0800c10c 	.word	0x0800c10c
 800b654:	0800c112 	.word	0x0800c112
 800b658:	0800c116 	.word	0x0800c116
 800b65c:	08008671 	.word	0x08008671
 800b660:	0800b40d 	.word	0x0800b40d

0800b664 <__sflush_r>:
 800b664:	898a      	ldrh	r2, [r1, #12]
 800b666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b668:	4605      	mov	r5, r0
 800b66a:	0710      	lsls	r0, r2, #28
 800b66c:	460c      	mov	r4, r1
 800b66e:	d457      	bmi.n	800b720 <__sflush_r+0xbc>
 800b670:	684b      	ldr	r3, [r1, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc04      	bgt.n	800b680 <__sflush_r+0x1c>
 800b676:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	dc01      	bgt.n	800b680 <__sflush_r+0x1c>
 800b67c:	2000      	movs	r0, #0
 800b67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b682:	2e00      	cmp	r6, #0
 800b684:	d0fa      	beq.n	800b67c <__sflush_r+0x18>
 800b686:	2300      	movs	r3, #0
 800b688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b68c:	682f      	ldr	r7, [r5, #0]
 800b68e:	6a21      	ldr	r1, [r4, #32]
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	d032      	beq.n	800b6fa <__sflush_r+0x96>
 800b694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	075a      	lsls	r2, r3, #29
 800b69a:	d505      	bpl.n	800b6a8 <__sflush_r+0x44>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	1ac0      	subs	r0, r0, r3
 800b6a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6a2:	b10b      	cbz	r3, 800b6a8 <__sflush_r+0x44>
 800b6a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6a6:	1ac0      	subs	r0, r0, r3
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	6a21      	ldr	r1, [r4, #32]
 800b6b2:	47b0      	blx	r6
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	d106      	bne.n	800b6c8 <__sflush_r+0x64>
 800b6ba:	6829      	ldr	r1, [r5, #0]
 800b6bc:	291d      	cmp	r1, #29
 800b6be:	d82b      	bhi.n	800b718 <__sflush_r+0xb4>
 800b6c0:	4a28      	ldr	r2, [pc, #160]	; (800b764 <__sflush_r+0x100>)
 800b6c2:	410a      	asrs	r2, r1
 800b6c4:	07d6      	lsls	r6, r2, #31
 800b6c6:	d427      	bmi.n	800b718 <__sflush_r+0xb4>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	6062      	str	r2, [r4, #4]
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	04d9      	lsls	r1, r3, #19
 800b6d0:	6022      	str	r2, [r4, #0]
 800b6d2:	d504      	bpl.n	800b6de <__sflush_r+0x7a>
 800b6d4:	1c42      	adds	r2, r0, #1
 800b6d6:	d101      	bne.n	800b6dc <__sflush_r+0x78>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b903      	cbnz	r3, 800b6de <__sflush_r+0x7a>
 800b6dc:	6560      	str	r0, [r4, #84]	; 0x54
 800b6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6e0:	602f      	str	r7, [r5, #0]
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	d0ca      	beq.n	800b67c <__sflush_r+0x18>
 800b6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ea:	4299      	cmp	r1, r3
 800b6ec:	d002      	beq.n	800b6f4 <__sflush_r+0x90>
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7fe fe1a 	bl	800a328 <_free_r>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6f8:	e7c1      	b.n	800b67e <__sflush_r+0x1a>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	47b0      	blx	r6
 800b700:	1c41      	adds	r1, r0, #1
 800b702:	d1c8      	bne.n	800b696 <__sflush_r+0x32>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0c5      	beq.n	800b696 <__sflush_r+0x32>
 800b70a:	2b1d      	cmp	r3, #29
 800b70c:	d001      	beq.n	800b712 <__sflush_r+0xae>
 800b70e:	2b16      	cmp	r3, #22
 800b710:	d101      	bne.n	800b716 <__sflush_r+0xb2>
 800b712:	602f      	str	r7, [r5, #0]
 800b714:	e7b2      	b.n	800b67c <__sflush_r+0x18>
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	e7ae      	b.n	800b67e <__sflush_r+0x1a>
 800b720:	690f      	ldr	r7, [r1, #16]
 800b722:	2f00      	cmp	r7, #0
 800b724:	d0aa      	beq.n	800b67c <__sflush_r+0x18>
 800b726:	0793      	lsls	r3, r2, #30
 800b728:	bf18      	it	ne
 800b72a:	2300      	movne	r3, #0
 800b72c:	680e      	ldr	r6, [r1, #0]
 800b72e:	bf08      	it	eq
 800b730:	694b      	ldreq	r3, [r1, #20]
 800b732:	1bf6      	subs	r6, r6, r7
 800b734:	600f      	str	r7, [r1, #0]
 800b736:	608b      	str	r3, [r1, #8]
 800b738:	2e00      	cmp	r6, #0
 800b73a:	dd9f      	ble.n	800b67c <__sflush_r+0x18>
 800b73c:	4633      	mov	r3, r6
 800b73e:	463a      	mov	r2, r7
 800b740:	4628      	mov	r0, r5
 800b742:	6a21      	ldr	r1, [r4, #32]
 800b744:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b748:	47e0      	blx	ip
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dc06      	bgt.n	800b75c <__sflush_r+0xf8>
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f04f 30ff 	mov.w	r0, #4294967295
 800b754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b758:	81a3      	strh	r3, [r4, #12]
 800b75a:	e790      	b.n	800b67e <__sflush_r+0x1a>
 800b75c:	4407      	add	r7, r0
 800b75e:	1a36      	subs	r6, r6, r0
 800b760:	e7ea      	b.n	800b738 <__sflush_r+0xd4>
 800b762:	bf00      	nop
 800b764:	dfbffffe 	.word	0xdfbffffe

0800b768 <_fflush_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	690b      	ldr	r3, [r1, #16]
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	b913      	cbnz	r3, 800b778 <_fflush_r+0x10>
 800b772:	2500      	movs	r5, #0
 800b774:	4628      	mov	r0, r5
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	b118      	cbz	r0, 800b782 <_fflush_r+0x1a>
 800b77a:	6a03      	ldr	r3, [r0, #32]
 800b77c:	b90b      	cbnz	r3, 800b782 <_fflush_r+0x1a>
 800b77e:	f7fd fbc5 	bl	8008f0c <__sinit>
 800b782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f3      	beq.n	800b772 <_fflush_r+0xa>
 800b78a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b78c:	07d0      	lsls	r0, r2, #31
 800b78e:	d404      	bmi.n	800b79a <_fflush_r+0x32>
 800b790:	0599      	lsls	r1, r3, #22
 800b792:	d402      	bmi.n	800b79a <_fflush_r+0x32>
 800b794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b796:	f7fd ff08 	bl	80095aa <__retarget_lock_acquire_recursive>
 800b79a:	4628      	mov	r0, r5
 800b79c:	4621      	mov	r1, r4
 800b79e:	f7ff ff61 	bl	800b664 <__sflush_r>
 800b7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d4e4      	bmi.n	800b774 <_fflush_r+0xc>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	059b      	lsls	r3, r3, #22
 800b7ae:	d4e1      	bmi.n	800b774 <_fflush_r+0xc>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b2:	f7fd fefb 	bl	80095ac <__retarget_lock_release_recursive>
 800b7b6:	e7dd      	b.n	800b774 <_fflush_r+0xc>

0800b7b8 <fiprintf>:
 800b7b8:	b40e      	push	{r1, r2, r3}
 800b7ba:	b503      	push	{r0, r1, lr}
 800b7bc:	4601      	mov	r1, r0
 800b7be:	ab03      	add	r3, sp, #12
 800b7c0:	4805      	ldr	r0, [pc, #20]	; (800b7d8 <fiprintf+0x20>)
 800b7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c6:	6800      	ldr	r0, [r0, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	f7ff fe31 	bl	800b430 <_vfiprintf_r>
 800b7ce:	b002      	add	sp, #8
 800b7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d4:	b003      	add	sp, #12
 800b7d6:	4770      	bx	lr
 800b7d8:	20000208 	.word	0x20000208

0800b7dc <__swhatbuf_r>:
 800b7dc:	b570      	push	{r4, r5, r6, lr}
 800b7de:	460c      	mov	r4, r1
 800b7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	2900      	cmp	r1, #0
 800b7e8:	461e      	mov	r6, r3
 800b7ea:	b096      	sub	sp, #88	; 0x58
 800b7ec:	da0c      	bge.n	800b808 <__swhatbuf_r+0x2c>
 800b7ee:	89a3      	ldrh	r3, [r4, #12]
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7f6:	bf0c      	ite	eq
 800b7f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7fc:	2340      	movne	r3, #64	; 0x40
 800b7fe:	2000      	movs	r0, #0
 800b800:	6031      	str	r1, [r6, #0]
 800b802:	602b      	str	r3, [r5, #0]
 800b804:	b016      	add	sp, #88	; 0x58
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	466a      	mov	r2, sp
 800b80a:	f000 f849 	bl	800b8a0 <_fstat_r>
 800b80e:	2800      	cmp	r0, #0
 800b810:	dbed      	blt.n	800b7ee <__swhatbuf_r+0x12>
 800b812:	9901      	ldr	r1, [sp, #4]
 800b814:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b818:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b81c:	4259      	negs	r1, r3
 800b81e:	4159      	adcs	r1, r3
 800b820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b824:	e7eb      	b.n	800b7fe <__swhatbuf_r+0x22>

0800b826 <__smakebuf_r>:
 800b826:	898b      	ldrh	r3, [r1, #12]
 800b828:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b82a:	079d      	lsls	r5, r3, #30
 800b82c:	4606      	mov	r6, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	d507      	bpl.n	800b842 <__smakebuf_r+0x1c>
 800b832:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b836:	6023      	str	r3, [r4, #0]
 800b838:	6123      	str	r3, [r4, #16]
 800b83a:	2301      	movs	r3, #1
 800b83c:	6163      	str	r3, [r4, #20]
 800b83e:	b002      	add	sp, #8
 800b840:	bd70      	pop	{r4, r5, r6, pc}
 800b842:	466a      	mov	r2, sp
 800b844:	ab01      	add	r3, sp, #4
 800b846:	f7ff ffc9 	bl	800b7dc <__swhatbuf_r>
 800b84a:	9900      	ldr	r1, [sp, #0]
 800b84c:	4605      	mov	r5, r0
 800b84e:	4630      	mov	r0, r6
 800b850:	f7fb fee2 	bl	8007618 <_malloc_r>
 800b854:	b948      	cbnz	r0, 800b86a <__smakebuf_r+0x44>
 800b856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85a:	059a      	lsls	r2, r3, #22
 800b85c:	d4ef      	bmi.n	800b83e <__smakebuf_r+0x18>
 800b85e:	f023 0303 	bic.w	r3, r3, #3
 800b862:	f043 0302 	orr.w	r3, r3, #2
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	e7e3      	b.n	800b832 <__smakebuf_r+0xc>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	6020      	str	r0, [r4, #0]
 800b86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	9b00      	ldr	r3, [sp, #0]
 800b876:	6120      	str	r0, [r4, #16]
 800b878:	6163      	str	r3, [r4, #20]
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	b15b      	cbz	r3, 800b896 <__smakebuf_r+0x70>
 800b87e:	4630      	mov	r0, r6
 800b880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b884:	f000 f81e 	bl	800b8c4 <_isatty_r>
 800b888:	b128      	cbz	r0, 800b896 <__smakebuf_r+0x70>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f023 0303 	bic.w	r3, r3, #3
 800b890:	f043 0301 	orr.w	r3, r3, #1
 800b894:	81a3      	strh	r3, [r4, #12]
 800b896:	89a3      	ldrh	r3, [r4, #12]
 800b898:	431d      	orrs	r5, r3
 800b89a:	81a5      	strh	r5, [r4, #12]
 800b89c:	e7cf      	b.n	800b83e <__smakebuf_r+0x18>
	...

0800b8a0 <_fstat_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_fstat_r+0x20>)
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f7f8 fd6e 	bl	800438e <_fstat>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_fstat_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_fstat_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	20002778 	.word	0x20002778

0800b8c4 <_isatty_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4d05      	ldr	r5, [pc, #20]	; (800b8e0 <_isatty_r+0x1c>)
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	f7f8 fd6c 	bl	80043ac <_isatty>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_isatty_r+0x1a>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_isatty_r+0x1a>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20002778 	.word	0x20002778

0800b8e4 <abort>:
 800b8e4:	2006      	movs	r0, #6
 800b8e6:	b508      	push	{r3, lr}
 800b8e8:	f000 f840 	bl	800b96c <raise>
 800b8ec:	2001      	movs	r0, #1
 800b8ee:	f7f8 fd1c 	bl	800432a <_exit>

0800b8f2 <_calloc_r>:
 800b8f2:	b570      	push	{r4, r5, r6, lr}
 800b8f4:	fba1 5402 	umull	r5, r4, r1, r2
 800b8f8:	b934      	cbnz	r4, 800b908 <_calloc_r+0x16>
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7fb fe8c 	bl	8007618 <_malloc_r>
 800b900:	4606      	mov	r6, r0
 800b902:	b928      	cbnz	r0, 800b910 <_calloc_r+0x1e>
 800b904:	4630      	mov	r0, r6
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	220c      	movs	r2, #12
 800b90a:	2600      	movs	r6, #0
 800b90c:	6002      	str	r2, [r0, #0]
 800b90e:	e7f9      	b.n	800b904 <_calloc_r+0x12>
 800b910:	462a      	mov	r2, r5
 800b912:	4621      	mov	r1, r4
 800b914:	f7fd fd24 	bl	8009360 <memset>
 800b918:	e7f4      	b.n	800b904 <_calloc_r+0x12>

0800b91a <_raise_r>:
 800b91a:	291f      	cmp	r1, #31
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	d904      	bls.n	800b92e <_raise_r+0x14>
 800b924:	2316      	movs	r3, #22
 800b926:	6003      	str	r3, [r0, #0]
 800b928:	f04f 30ff 	mov.w	r0, #4294967295
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
 800b92e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b930:	b112      	cbz	r2, 800b938 <_raise_r+0x1e>
 800b932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b936:	b94b      	cbnz	r3, 800b94c <_raise_r+0x32>
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 f831 	bl	800b9a0 <_getpid_r>
 800b93e:	462a      	mov	r2, r5
 800b940:	4601      	mov	r1, r0
 800b942:	4620      	mov	r0, r4
 800b944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b948:	f000 b818 	b.w	800b97c <_kill_r>
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d00a      	beq.n	800b966 <_raise_r+0x4c>
 800b950:	1c59      	adds	r1, r3, #1
 800b952:	d103      	bne.n	800b95c <_raise_r+0x42>
 800b954:	2316      	movs	r3, #22
 800b956:	6003      	str	r3, [r0, #0]
 800b958:	2001      	movs	r0, #1
 800b95a:	e7e7      	b.n	800b92c <_raise_r+0x12>
 800b95c:	2400      	movs	r4, #0
 800b95e:	4628      	mov	r0, r5
 800b960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b964:	4798      	blx	r3
 800b966:	2000      	movs	r0, #0
 800b968:	e7e0      	b.n	800b92c <_raise_r+0x12>
	...

0800b96c <raise>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	; (800b978 <raise+0xc>)
 800b96e:	4601      	mov	r1, r0
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	f7ff bfd2 	b.w	800b91a <_raise_r>
 800b976:	bf00      	nop
 800b978:	20000208 	.word	0x20000208

0800b97c <_kill_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	2300      	movs	r3, #0
 800b980:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_kill_r+0x20>)
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	4611      	mov	r1, r2
 800b988:	602b      	str	r3, [r5, #0]
 800b98a:	f7f8 fcbe 	bl	800430a <_kill>
 800b98e:	1c43      	adds	r3, r0, #1
 800b990:	d102      	bne.n	800b998 <_kill_r+0x1c>
 800b992:	682b      	ldr	r3, [r5, #0]
 800b994:	b103      	cbz	r3, 800b998 <_kill_r+0x1c>
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	bd38      	pop	{r3, r4, r5, pc}
 800b99a:	bf00      	nop
 800b99c:	20002778 	.word	0x20002778

0800b9a0 <_getpid_r>:
 800b9a0:	f7f8 bcac 	b.w	80042fc <_getpid>

0800b9a4 <_init>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	bf00      	nop
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr

0800b9b0 <_fini>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	bf00      	nop
 800b9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b6:	bc08      	pop	{r3}
 800b9b8:	469e      	mov	lr, r3
 800b9ba:	4770      	bx	lr
