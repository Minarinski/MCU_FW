
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006c88  08006c88  00016c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800709c  0800709c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800709c  0800709c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800709c  0800709c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  080070a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001fc  080072a0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080072a0  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1f9  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bea  00000000  00000000  0002b461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002d050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000836  00000000  00000000  0002dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f81  00000000  00000000  0002e30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d198  00000000  00000000  0004628f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086b79  00000000  00000000  00053427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bcc  00000000  00000000  000d9fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ddb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c6c 	.word	0x08006c6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08006c6c 	.word	0x08006c6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <LCD_SendInternal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	460b      	mov	r3, r1
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	4613      	mov	r3, r2
 8000a98:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <LCD_SendInternal+0xa8>)
 8000aa6:	f001 fd11 	bl	80024cc <HAL_I2C_IsDeviceReady>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d000      	beq.n	8000ab6 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ab4:	e7f1      	b.n	8000a9a <LCD_SendInternal+0x12>
            break;
 8000ab6:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|LCD_BACKLIGHT|LCD_PIN_EN;
 8000ac6:	7bba      	ldrb	r2, [r7, #14]
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|LCD_BACKLIGHT;
 8000ad6:	7bba      	ldrb	r2, [r7, #14]
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|LCD_BACKLIGHT|LCD_PIN_EN;
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f043 030c 	orr.w	r3, r3, #12
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|LCD_BACKLIGHT;
 8000af6:	7b7a      	ldrb	r2, [r7, #13]
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2304      	movs	r3, #4
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <LCD_SendInternal+0xa8>)
 8000b18:	f001 fbda 	bl	80022d0 <HAL_I2C_Master_Transmit>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000b20:	2005      	movs	r0, #5
 8000b22:	f000 fedf 	bl	80018e4 <HAL_Delay>
    return res;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000218 	.word	0x20000218

08000b34 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000b44:	79b9      	ldrb	r1, [r7, #6]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff9c 	bl	8000a88 <LCD_SendInternal>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8000b68:	79b9      	ldrb	r1, [r7, #6]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8a 	bl	8000a88 <LCD_SendInternal>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0x30);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2130      	movs	r1, #48	; 0x30
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffd2 	bl	8000b34 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0x02);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffcd 	bl	8000b34 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	210c      	movs	r1, #12
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffc8 	bl	8000b34 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffc3 	bl	8000b34 <LCD_SendCommand>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	6039      	str	r1, [r7, #0]
 8000bc0:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000bc2:	e009      	b.n	8000bd8 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffc3 	bl	8000b58 <LCD_SendData>
        str++;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f1      	bne.n	8000bc4 <LCD_SendString+0xe>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	603a      	str	r2, [r7, #0]
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8000c08:	7afa      	ldrb	r2, [r7, #11]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff90 	bl	8000b34 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e00b      	b.n	8000c32 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff96 	bl	8000b58 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	ddf0      	ble.n	8000c1a <LCD_SET_CGRAM+0x30>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <_write>:
uint8_t UART1_Len = 0;

unsigned char UART1_Rx_End = 0;


int _write(int file, unsigned char *p, int len) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_write+0x5c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d107      	bne.n	8000c68 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <_write+0x60>)
 8000c62:	f002 fc1b 	bl	800349c <HAL_UART_Transmit>
 8000c66:	e016      	b.n	8000c96 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <_write+0x5c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	230a      	movs	r3, #10
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <_write+0x64>)
 8000c7a:	f002 fc0f 	bl	800349c <HAL_UART_Transmit>
 8000c7e:	e00a      	b.n	8000c96 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_write+0x5c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d106      	bne.n	8000c96 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <_write+0x68>)
 8000c92:	f002 fc03 	bl	800349c <HAL_UART_Transmit>
	}
	return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000344 	.word	0x20000344
 8000ca4:	2000026c 	.word	0x2000026c
 8000ca8:	200002b4 	.word	0x200002b4
 8000cac:	200002fc 	.word	0x200002fc

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fdb3 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f8ed 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 f9d7 	bl	8001070 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cc2:	f000 f929 	bl	8000f18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000cc6:	f000 f955 	bl	8000f74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 f97d 	bl	8000fc8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000cce:	f000 f9a5 	bl	800101c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	495a      	ldr	r1, [pc, #360]	; (8000e40 <main+0x190>)
 8000cd6:	485b      	ldr	r0, [pc, #364]	; (8000e44 <main+0x194>)
 8000cd8:	f002 fc63 	bl	80035a2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	495a      	ldr	r1, [pc, #360]	; (8000e48 <main+0x198>)
 8000ce0:	485a      	ldr	r0, [pc, #360]	; (8000e4c <main+0x19c>)
 8000ce2:	f002 fc5e 	bl	80035a2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4959      	ldr	r1, [pc, #356]	; (8000e50 <main+0x1a0>)
 8000cea:	485a      	ldr	r0, [pc, #360]	; (8000e54 <main+0x1a4>)
 8000cec:	f002 fc59 	bl	80035a2 <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000cf0:	4b59      	ldr	r3, [pc, #356]	; (8000e58 <main+0x1a8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6898      	ldr	r0, [r3, #8]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f003 ff84 	bl	8004c08 <setvbuf>
	printf("HELL WORLD\r\n");
 8000d00:	4856      	ldr	r0, [pc, #344]	; (8000e5c <main+0x1ac>)
 8000d02:	f003 ff79 	bl	8004bf8 <puts>
	LCD_Init(LCD_ADDR);
 8000d06:	204e      	movs	r0, #78	; 0x4e
 8000d08:	f7ff ff38 	bl	8000b7c <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <main+0x1b0>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	204e      	movs	r0, #78	; 0x4e
 8000d12:	f7ff ff6a 	bl	8000bea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 8000d16:	4a53      	ldr	r2, [pc, #332]	; (8000e64 <main+0x1b4>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	204e      	movs	r0, #78	; 0x4e
 8000d1c:	f7ff ff65 	bl	8000bea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 8000d20:	4a51      	ldr	r2, [pc, #324]	; (8000e68 <main+0x1b8>)
 8000d22:	2102      	movs	r1, #2
 8000d24:	204e      	movs	r0, #78	; 0x4e
 8000d26:	f7ff ff60 	bl	8000bea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 8000d2a:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <main+0x1bc>)
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	204e      	movs	r0, #78	; 0x4e
 8000d30:	f7ff ff5b 	bl	8000bea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 8000d34:	4a4e      	ldr	r2, [pc, #312]	; (8000e70 <main+0x1c0>)
 8000d36:	2104      	movs	r1, #4
 8000d38:	204e      	movs	r0, #78	; 0x4e
 8000d3a:	f7ff ff56 	bl	8000bea <LCD_SET_CGRAM>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	204e      	movs	r0, #78	; 0x4e
 8000d42:	f7ff fef7 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	204e      	movs	r0, #78	; 0x4e
 8000d4a:	f7ff fef3 	bl	8000b34 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "604");
 8000d4e:	4949      	ldr	r1, [pc, #292]	; (8000e74 <main+0x1c4>)
 8000d50:	204e      	movs	r0, #78	; 0x4e
 8000d52:	f7ff ff30 	bl	8000bb6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	204e      	movs	r0, #78	; 0x4e
 8000d5a:	f7ff fefd 	bl	8000b58 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e006      	b.n	8000d72 <main+0xc2>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000d64:	2114      	movs	r1, #20
 8000d66:	204e      	movs	r0, #78	; 0x4e
 8000d68:	f7ff fee4 	bl	8000b34 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0a      	cmp	r3, #10
 8000d76:	ddf5      	ble.n	8000d64 <main+0xb4>
	}
	LCD_SendData(LCD_ADDR, 1);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	204e      	movs	r0, #78	; 0x4e
 8000d7c:	f7ff feec 	bl	8000b58 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8000d80:	21c0      	movs	r1, #192	; 0xc0
 8000d82:	204e      	movs	r0, #78	; 0x4e
 8000d84:	f7ff fed6 	bl	8000b34 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 8000d88:	2103      	movs	r1, #3
 8000d8a:	204e      	movs	r0, #78	; 0x4e
 8000d8c:	f7ff fee4 	bl	8000b58 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "43420");
 8000d90:	4939      	ldr	r1, [pc, #228]	; (8000e78 <main+0x1c8>)
 8000d92:	204e      	movs	r0, #78	; 0x4e
 8000d94:	f7ff ff0f 	bl	8000bb6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 8000d98:	2103      	movs	r1, #3
 8000d9a:	204e      	movs	r0, #78	; 0x4e
 8000d9c:	f7ff fedc 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8000da0:	2103      	movs	r1, #3
 8000da2:	204e      	movs	r0, #78	; 0x4e
 8000da4:	f7ff fed8 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8000da8:	2103      	movs	r1, #3
 8000daa:	204e      	movs	r0, #78	; 0x4e
 8000dac:	f7ff fed4 	bl	8000b58 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "43080");
 8000db0:	4932      	ldr	r1, [pc, #200]	; (8000e7c <main+0x1cc>)
 8000db2:	204e      	movs	r0, #78	; 0x4e
 8000db4:	f7ff feff 	bl	8000bb6 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	e006      	b.n	8000dcc <main+0x11c>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000dbe:	2114      	movs	r1, #20
 8000dc0:	204e      	movs	r0, #78	; 0x4e
 8000dc2:	f7ff feb7 	bl	8000b34 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	ddf5      	ble.n	8000dbe <main+0x10e>
	}
	LCD_SendData(LCD_ADDR, 1);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	204e      	movs	r0, #78	; 0x4e
 8000dd6:	f7ff febf 	bl	8000b58 <LCD_SendData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); //LAMP2
 8000dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dde:	4828      	ldr	r0, [pc, #160]	; (8000e80 <main+0x1d0>)
 8000de0:	f001 f900 	bl	8001fe4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); //LAMP1
 8000de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de8:	4825      	ldr	r0, [pc, #148]	; (8000e80 <main+0x1d0>)
 8000dea:	f001 f8fb 	bl	8001fe4 <HAL_GPIO_TogglePin>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); //BUZZER
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	4824      	ldr	r0, [pc, #144]	; (8000e84 <main+0x1d4>)
 8000df4:	f001 f8f6 	bl	8001fe4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	4821      	ldr	r0, [pc, #132]	; (8000e84 <main+0x1d4>)
 8000dfe:	f001 f8f1 	bl	8001fe4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 8000e02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e06:	481f      	ldr	r0, [pc, #124]	; (8000e84 <main+0x1d4>)
 8000e08:	f001 f8ec 	bl	8001fe4 <HAL_GPIO_TogglePin>

		if (UART1_Rx_End) {
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <main+0x1d8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d010      	beq.n	8000e36 <main+0x186>
			printf("Echo\r\n");
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <main+0x1dc>)
 8000e16:	f003 feef 	bl	8004bf8 <puts>
			HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <main+0x1e0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	2302      	movs	r3, #2
 8000e22:	491c      	ldr	r1, [pc, #112]	; (8000e94 <main+0x1e4>)
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <main+0x194>)
 8000e26:	f002 fb39 	bl	800349c <HAL_UART_Transmit>
			UART1_Len = 0;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <main+0x1e0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
			UART1_Rx_End = 0;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <main+0x1d8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1000);
 8000e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3a:	f000 fd53 	bl	80018e4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); //LAMP2
 8000e3e:	e7cc      	b.n	8000dda <main+0x12a>
 8000e40:	20000348 	.word	0x20000348
 8000e44:	2000026c 	.word	0x2000026c
 8000e48:	2000034c 	.word	0x2000034c
 8000e4c:	200002b4 	.word	0x200002b4
 8000e50:	20000350 	.word	0x20000350
 8000e54:	200002fc 	.word	0x200002fc
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	08006c88 	.word	0x08006c88
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000010 	.word	0x20000010
 8000e6c:	20000018 	.word	0x20000018
 8000e70:	20000020 	.word	0x20000020
 8000e74:	08006c94 	.word	0x08006c94
 8000e78:	08006c98 	.word	0x08006c98
 8000e7c:	08006ca0 	.word	0x08006ca0
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	20000369 	.word	0x20000369
 8000e8c:	08006ca8 	.word	0x08006ca8
 8000e90:	20000368 	.word	0x20000368
 8000e94:	20000354 	.word	0x20000354

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2228      	movs	r2, #40	; 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f834 	bl	8004f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ece:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fe7f 	bl	8002bdc <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ee4:	f000 fa1e 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eec:	2302      	movs	r3, #2
 8000eee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 f8ed 	bl	80030e0 <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f0c:	f000 fa0a 	bl	8001324 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3740      	adds	r7, #64	; 0x40
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f001 f877 	bl	8002048 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 f9e0 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000218 	.word	0x20000218
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART1_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fac:	f002 fa26 	bl	80033fc <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f9b5 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000026c 	.word	0x2000026c
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART2_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8001000:	f002 f9fc 	bl	80033fc <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 f98b 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200002b4 	.word	0x200002b4
 8001018:	40004400 	.word	0x40004400

0800101c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART3_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001054:	f002 f9d2 	bl	80033fc <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f961 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002fc 	.word	0x200002fc
 800106c:	40004800 	.word	0x40004800

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <MX_GPIO_Init+0x134>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <MX_GPIO_Init+0x134>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <MX_GPIO_Init+0x134>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <MX_GPIO_Init+0x134>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a40      	ldr	r2, [pc, #256]	; (80011a4 <MX_GPIO_Init+0x134>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <MX_GPIO_Init+0x134>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f641 0103 	movw	r1, #6147	; 0x1803
 80010ba:	483b      	ldr	r0, [pc, #236]	; (80011a8 <MX_GPIO_Init+0x138>)
 80010bc:	f000 ff7a 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80010c6:	4839      	ldr	r0, [pc, #228]	; (80011ac <MX_GPIO_Init+0x13c>)
 80010c8:	f000 ff74 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin;
 80010cc:	f641 0303 	movw	r3, #6147	; 0x1803
 80010d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2302      	movs	r3, #2
 80010dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	4830      	ldr	r0, [pc, #192]	; (80011a8 <MX_GPIO_Init+0x138>)
 80010e6:	f000 fde1 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 80010ea:	2310      	movs	r3, #16
 80010ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	482a      	ldr	r0, [pc, #168]	; (80011a8 <MX_GPIO_Init+0x138>)
 80010fe:	f000 fdd5 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <MX_GPIO_Init+0x140>)
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	4824      	ldr	r0, [pc, #144]	; (80011a8 <MX_GPIO_Init+0x138>)
 8001116:	f000 fdc9 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN5_Pin;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_GPIO_Init+0x140>)
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4619      	mov	r1, r3
 800112c:	481f      	ldr	r0, [pc, #124]	; (80011ac <MX_GPIO_Init+0x13c>)
 800112e:	f000 fdbd 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
  GPIO_InitStruct.Pin = STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin;
 8001132:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8001136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	4818      	ldr	r0, [pc, #96]	; (80011ac <MX_GPIO_Init+0x13c>)
 800114c:	f000 fdae 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SLCT_Pin */
  GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8001150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <MX_GPIO_Init+0x138>)
 8001166:	f000 fda1 	bl	8001cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2006      	movs	r0, #6
 8001170:	f000 fcb3 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001174:	2006      	movs	r0, #6
 8001176:	f000 fccc 	bl	8001b12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2007      	movs	r0, #7
 8001180:	f000 fcab 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001184:	2007      	movs	r0, #7
 8001186:	f000 fcc4 	bl	8001b12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2017      	movs	r0, #23
 8001190:	f000 fca3 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001194:	2017      	movs	r0, #23
 8001196:	f000 fcbc 	bl	8001b12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	10110000 	.word	0x10110000

080011b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	d103      	bne.n	80011cc <HAL_GPIO_EXTI_Callback+0x18>
		printf("0x020,10x03\r\n");
 80011c4:	4811      	ldr	r0, [pc, #68]	; (800120c <HAL_GPIO_EXTI_Callback+0x58>)
 80011c6:	f003 fd17 	bl	8004bf8 <puts>
	} else if (GPIO_Pin == GPIO_PIN_0) {
		printf("0x023,10x03\r\n");
	} else if (GPIO_Pin == GPIO_PIN_1) {
		printf("0x024,10x03\r\n ");
	}
}
 80011ca:	e01a      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	2b40      	cmp	r3, #64	; 0x40
 80011d0:	d103      	bne.n	80011da <HAL_GPIO_EXTI_Callback+0x26>
		printf("0x021,10x03\r\n");
 80011d2:	480f      	ldr	r0, [pc, #60]	; (8001210 <HAL_GPIO_EXTI_Callback+0x5c>)
 80011d4:	f003 fd10 	bl	8004bf8 <puts>
}
 80011d8:	e013      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	2b80      	cmp	r3, #128	; 0x80
 80011de:	d103      	bne.n	80011e8 <HAL_GPIO_EXTI_Callback+0x34>
		printf("0x022,10x03\r\n");
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <HAL_GPIO_EXTI_Callback+0x60>)
 80011e2:	f003 fd09 	bl	8004bf8 <puts>
}
 80011e6:	e00c      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d103      	bne.n	80011f6 <HAL_GPIO_EXTI_Callback+0x42>
		printf("0x023,10x03\r\n");
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <HAL_GPIO_EXTI_Callback+0x64>)
 80011f0:	f003 fd02 	bl	8004bf8 <puts>
}
 80011f4:	e005      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d102      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
		printf("0x024,10x03\r\n ");
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <HAL_GPIO_EXTI_Callback+0x68>)
 80011fe:	f003 fc95 	bl	8004b2c <iprintf>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	08006cb0 	.word	0x08006cb0
 8001210:	08006cc0 	.word	0x08006cc0
 8001214:	08006cd0 	.word	0x08006cd0
 8001218:	08006ce0 	.word	0x08006ce0
 800121c:	08006cf0 	.word	0x08006cf0

08001220 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	if (huart->Instance == USART1) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HAL_UART_RxCpltCallback+0xd0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d138      	bne.n	80012a4 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_UART_RxCpltCallback+0xd4>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_UART_RxCpltCallback+0xd8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_UART_RxCpltCallback+0x26>
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00c      	beq.n	800125e <HAL_UART_RxCpltCallback+0x3e>
 8001244:	e024      	b.n	8001290 <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_UART_RxCpltCallback+0xdc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d103      	bne.n	8001256 <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_UART_RxCpltCallback+0xd8>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8001254:	e020      	b.n	8001298 <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_UART_RxCpltCallback+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
			break;
 800125c:	e01c      	b.n	8001298 <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_UART_RxCpltCallback+0xdc>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d106      	bne.n	8001274 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_UART_RxCpltCallback+0xd4>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_UART_RxCpltCallback+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 8001272:	e011      	b.n	8001298 <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_UART_RxCpltCallback+0xe0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_UART_RxCpltCallback+0xdc>)
 800127c:	7819      	ldrb	r1, [r3, #0]
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_UART_RxCpltCallback+0xe4>)
 8001280:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_UART_RxCpltCallback+0xe0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_UART_RxCpltCallback+0xe0>)
 800128c:	701a      	strb	r2, [r3, #0]
			break;
 800128e:	e003      	b.n	8001298 <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_UART_RxCpltCallback+0xd8>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
			break;
 8001296:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	4918      	ldr	r1, [pc, #96]	; (80012fc <HAL_UART_RxCpltCallback+0xdc>)
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <HAL_UART_RxCpltCallback+0xe8>)
 800129e:	f002 f980 	bl	80035a2 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
	} else if (huart->Instance == USART3) {
		HAL_UART_Transmit(&huart1, UART3_Rx_Data, 1, 2);
		HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
	}
}
 80012a2:	e020      	b.n	80012e6 <HAL_UART_RxCpltCallback+0xc6>
	} else if (huart->Instance == USART2) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_UART_RxCpltCallback+0xec>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10b      	bne.n	80012c6 <HAL_UART_RxCpltCallback+0xa6>
		HAL_UART_Transmit(&huart1, UART2_Rx_Data, 1, 2);
 80012ae:	2302      	movs	r3, #2
 80012b0:	2201      	movs	r2, #1
 80012b2:	4917      	ldr	r1, [pc, #92]	; (8001310 <HAL_UART_RxCpltCallback+0xf0>)
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <HAL_UART_RxCpltCallback+0xe8>)
 80012b6:	f002 f8f1 	bl	800349c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
 80012ba:	2201      	movs	r2, #1
 80012bc:	4914      	ldr	r1, [pc, #80]	; (8001310 <HAL_UART_RxCpltCallback+0xf0>)
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <HAL_UART_RxCpltCallback+0xf4>)
 80012c0:	f002 f96f 	bl	80035a2 <HAL_UART_Receive_IT>
}
 80012c4:	e00f      	b.n	80012e6 <HAL_UART_RxCpltCallback+0xc6>
	} else if (huart->Instance == USART3) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_UART_RxCpltCallback+0xf8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d10a      	bne.n	80012e6 <HAL_UART_RxCpltCallback+0xc6>
		HAL_UART_Transmit(&huart1, UART3_Rx_Data, 1, 2);
 80012d0:	2302      	movs	r3, #2
 80012d2:	2201      	movs	r2, #1
 80012d4:	4911      	ldr	r1, [pc, #68]	; (800131c <HAL_UART_RxCpltCallback+0xfc>)
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <HAL_UART_RxCpltCallback+0xe8>)
 80012d8:	f002 f8e0 	bl	800349c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	490f      	ldr	r1, [pc, #60]	; (800131c <HAL_UART_RxCpltCallback+0xfc>)
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <HAL_UART_RxCpltCallback+0x100>)
 80012e2:	f002 f95e 	bl	80035a2 <HAL_UART_Receive_IT>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40013800 	.word	0x40013800
 80012f4:	20000369 	.word	0x20000369
 80012f8:	2000036a 	.word	0x2000036a
 80012fc:	20000348 	.word	0x20000348
 8001300:	20000368 	.word	0x20000368
 8001304:	20000354 	.word	0x20000354
 8001308:	2000026c 	.word	0x2000026c
 800130c:	40004400 	.word	0x40004400
 8001310:	2000034c 	.word	0x2000034c
 8001314:	200002b4 	.word	0x200002b4
 8001318:	40004800 	.word	0x40004800
 800131c:	20000350 	.word	0x20000350
 8001320:	200002fc 	.word	0x200002fc

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_MspInit+0x5c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6193      	str	r3, [r2, #24]
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_MspInit+0x5c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_MspInit+0x5c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_MspInit+0x5c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_MspInit+0x60>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_MspInit+0x60>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a15      	ldr	r2, [pc, #84]	; (8001404 <HAL_I2C_MspInit+0x70>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d123      	bne.n	80013fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_I2C_MspInit+0x74>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_I2C_MspInit+0x74>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_I2C_MspInit+0x74>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013cc:	23c0      	movs	r3, #192	; 0xc0
 80013ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <HAL_I2C_MspInit+0x78>)
 80013e0:	f000 fc64 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_I2C_MspInit+0x74>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_I2C_MspInit+0x74>)
 80013ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ee:	61d3      	str	r3, [r2, #28]
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_I2C_MspInit+0x74>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40005400 	.word	0x40005400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010c00 	.word	0x40010c00

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a5f      	ldr	r2, [pc, #380]	; (80015a8 <HAL_UART_MspInit+0x198>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d13a      	bne.n	80014a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001430:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <HAL_UART_MspInit+0x19c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a5d      	ldr	r2, [pc, #372]	; (80015ac <HAL_UART_MspInit+0x19c>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <HAL_UART_MspInit+0x19c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b58      	ldr	r3, [pc, #352]	; (80015ac <HAL_UART_MspInit+0x19c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a57      	ldr	r2, [pc, #348]	; (80015ac <HAL_UART_MspInit+0x19c>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b55      	ldr	r3, [pc, #340]	; (80015ac <HAL_UART_MspInit+0x19c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4619      	mov	r1, r3
 8001474:	484e      	ldr	r0, [pc, #312]	; (80015b0 <HAL_UART_MspInit+0x1a0>)
 8001476:	f000 fc19 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	4848      	ldr	r0, [pc, #288]	; (80015b0 <HAL_UART_MspInit+0x1a0>)
 8001490:	f000 fc0c 	bl	8001cac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2025      	movs	r0, #37	; 0x25
 800149a:	f000 fb1e 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800149e:	2025      	movs	r0, #37	; 0x25
 80014a0:	f000 fb37 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a4:	e07c      	b.n	80015a0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a42      	ldr	r2, [pc, #264]	; (80015b4 <HAL_UART_MspInit+0x1a4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d138      	bne.n	8001522 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <HAL_UART_MspInit+0x19c>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_UART_MspInit+0x19c>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_UART_MspInit+0x19c>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_UART_MspInit+0x19c>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a37      	ldr	r2, [pc, #220]	; (80015ac <HAL_UART_MspInit+0x19c>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <HAL_UART_MspInit+0x19c>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e0:	2304      	movs	r3, #4
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4619      	mov	r1, r3
 80014f2:	482f      	ldr	r0, [pc, #188]	; (80015b0 <HAL_UART_MspInit+0x1a0>)
 80014f4:	f000 fbda 	bl	8001cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4619      	mov	r1, r3
 800150a:	4829      	ldr	r0, [pc, #164]	; (80015b0 <HAL_UART_MspInit+0x1a0>)
 800150c:	f000 fbce 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2026      	movs	r0, #38	; 0x26
 8001516:	f000 fae0 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800151a:	2026      	movs	r0, #38	; 0x26
 800151c:	f000 faf9 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 8001520:	e03e      	b.n	80015a0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_UART_MspInit+0x1a8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d139      	bne.n	80015a0 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_UART_MspInit+0x19c>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_UART_MspInit+0x19c>)
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	61d3      	str	r3, [r2, #28]
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0x19c>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x19c>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_UART_MspInit+0x19c>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_UART_MspInit+0x19c>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	4619      	mov	r1, r3
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <HAL_UART_MspInit+0x1ac>)
 8001572:	f000 fb9b 	bl	8001cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4619      	mov	r1, r3
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <HAL_UART_MspInit+0x1ac>)
 800158c:	f000 fb8e 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2027      	movs	r0, #39	; 0x27
 8001596:	f000 faa0 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800159a:	2027      	movs	r0, #39	; 0x27
 800159c:	f000 fab9 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40004800 	.word	0x40004800
 80015bc:	40010c00 	.word	0x40010c00

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f951 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}

0800160e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001612:	2001      	movs	r0, #1
 8001614:	f000 fd00 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8001620:	2002      	movs	r0, #2
 8001622:	f000 fcf9 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 800162e:	2020      	movs	r0, #32
 8001630:	f000 fcf2 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001634:	2040      	movs	r0, #64	; 0x40
 8001636:	f000 fcef 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 800163a:	2080      	movs	r0, #128	; 0x80
 800163c:	f000 fcec 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <USART1_IRQHandler+0x10>)
 800164a:	f001 ffcf 	bl	80035ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000026c 	.word	0x2000026c

08001658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <USART2_IRQHandler+0x10>)
 800165e:	f001 ffc5 	bl	80035ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002b4 	.word	0x200002b4

0800166c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <USART3_IRQHandler+0x10>)
 8001672:	f001 ffbb 	bl	80035ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002fc 	.word	0x200002fc

08001680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <_kill>:

int _kill(int pid, int sig)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001698:	f003 fc8e 	bl	8004fb8 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	2216      	movs	r2, #22
 80016a0:	601a      	str	r2, [r3, #0]
  return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_exit>:

void _exit (int status)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffe7 	bl	800168e <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c0:	e7fe      	b.n	80016c0 <_exit+0x12>

080016c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e00a      	b.n	80016ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d4:	f3af 8000 	nop.w
 80016d8:	4601      	mov	r1, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	60ba      	str	r2, [r7, #8]
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3301      	adds	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dbf0      	blt.n	80016d4 <_read+0x12>
  }

  return len;
 80016f2:	687b      	ldr	r3, [r7, #4]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
  return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <_isatty>:

int _isatty(int file)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f003 fc14 	bl	8004fb8 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20005000 	.word	0x20005000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	2000036c 	.word	0x2000036c
 80017c4:	200004c0 	.word	0x200004c0

080017c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d4:	f7ff fff8 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f0:	4c09      	ldr	r4, [pc, #36]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f003 fbe1 	bl	8004fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f7ff fa55 	bl	8000cb0 <main>
  bx lr
 8001806:	4770      	bx	lr
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001810:	080070a4 	.word	0x080070a4
  ldr r2, =_sbss
 8001814:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001818:	200004c0 	.word	0x200004c0

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x28>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x28>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f947 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fd78 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f95f 	bl	8001b2e <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f927 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000028 	.word	0x20000028
 80018a4:	20000030 	.word	0x20000030
 80018a8:	2000002c 	.word	0x2000002c

080018ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x1c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_IncTick+0x20>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000030 	.word	0x20000030
 80018cc:	20000370 	.word	0x20000370

080018d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_GetTick+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000370 	.word	0x20000370

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffe0 	bl	80018d0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000030 	.word	0x20000030

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <__NVIC_EnableIRQ+0x34>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff90 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff2d 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff42 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff90 	bl	8001a1c <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5f 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff35 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d008      	beq.n	8001b70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e020      	b.n	8001bb2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 020e 	bic.w	r2, r2, #14
 8001b7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d005      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e051      	b.n	8001c84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	; (8001c90 <HAL_DMA_Abort_IT+0xd4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d029      	beq.n	8001c5e <HAL_DMA_Abort_IT+0xa2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <HAL_DMA_Abort_IT+0xd8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <HAL_DMA_Abort_IT+0x9e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_DMA_Abort_IT+0xdc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01a      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x98>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_DMA_Abort_IT+0xe0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d012      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x92>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <HAL_DMA_Abort_IT+0xe4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x8c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_DMA_Abort_IT+0xe8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d102      	bne.n	8001c42 <HAL_DMA_Abort_IT+0x86>
 8001c3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c40:	e00e      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c46:	e00b      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c4c:	e008      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c52:	e005      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c58:	e002      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	e000      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_DMA_Abort_IT+0xec>)
 8001c62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    } 
  }
  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020008 	.word	0x40020008
 8001c94:	4002001c 	.word	0x4002001c
 8001c98:	40020030 	.word	0x40020030
 8001c9c:	40020044 	.word	0x40020044
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	4002006c 	.word	0x4002006c
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e169      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8158 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a9a      	ldr	r2, [pc, #616]	; (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a98      	ldr	r2, [pc, #608]	; (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4a98      	ldr	r2, [pc, #608]	; (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a96      	ldr	r2, [pc, #600]	; (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a94      	ldr	r2, [pc, #592]	; (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a92      	ldr	r2, [pc, #584]	; (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a90      	ldr	r2, [pc, #576]	; (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a79      	ldr	r2, [pc, #484]	; (8001f60 <HAL_GPIO_Init+0x2b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80b1 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a48      	ldr	r2, [pc, #288]	; (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3f      	ldr	r2, [pc, #252]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3e      	ldr	r2, [pc, #248]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eaa:	492f      	ldr	r1, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	492c      	ldr	r1, [pc, #176]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4928      	ldr	r1, [pc, #160]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4922      	ldr	r1, [pc, #136]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	491e      	ldr	r1, [pc, #120]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4918      	ldr	r1, [pc, #96]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4914      	ldr	r1, [pc, #80]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e021      	b.n	8001f8e <HAL_GPIO_Init+0x2e2>
 8001f4a:	bf00      	nop
 8001f4c:	10320000 	.word	0x10320000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10220000 	.word	0x10220000
 8001f58:	10210000 	.word	0x10210000
 8001f5c:	10120000 	.word	0x10120000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4909      	ldr	r1, [pc, #36]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f47f ae8e 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	372c      	adds	r7, #44	; 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43d9      	mvns	r1, r3
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f8bc 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e12b      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff f990 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ac:	f001 f960 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a81      	ldr	r2, [pc, #516]	; (80022bc <HAL_I2C_Init+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d807      	bhi.n	80020cc <HAL_I2C_Init+0x84>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a80      	ldr	r2, [pc, #512]	; (80022c0 <HAL_I2C_Init+0x278>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e006      	b.n	80020da <HAL_I2C_Init+0x92>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a7d      	ldr	r2, [pc, #500]	; (80022c4 <HAL_I2C_Init+0x27c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0e7      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a78      	ldr	r2, [pc, #480]	; (80022c8 <HAL_I2C_Init+0x280>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_I2C_Init+0x274>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d802      	bhi.n	800211c <HAL_I2C_Init+0xd4>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	e009      	b.n	8002130 <HAL_I2C_Init+0xe8>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_I2C_Init+0x284>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	495c      	ldr	r1, [pc, #368]	; (80022bc <HAL_I2C_Init+0x274>)
 800214c:	428b      	cmp	r3, r1
 800214e:	d819      	bhi.n	8002184 <HAL_I2C_Init+0x13c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e59      	subs	r1, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fbb1 f3f3 	udiv	r3, r1, r3
 800215e:	1c59      	adds	r1, r3, #1
 8002160:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002164:	400b      	ands	r3, r1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_I2C_Init+0x138>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e59      	subs	r1, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fbb1 f3f3 	udiv	r3, r1, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217e:	e051      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002180:	2304      	movs	r3, #4
 8002182:	e04f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_I2C_Init+0x168>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e012      	b.n	80021d6 <HAL_I2C_Init+0x18e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x196>
 80021da:	2301      	movs	r3, #1
 80021dc:	e022      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10e      	bne.n	8002204 <HAL_I2C_Init+0x1bc>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002202:	e00f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6911      	ldr	r1, [r2, #16]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	000186a0 	.word	0x000186a0
 80022c0:	001e847f 	.word	0x001e847f
 80022c4:	003d08ff 	.word	0x003d08ff
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
 80022e0:	4613      	mov	r3, r2
 80022e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff faf4 	bl	80018d0 <HAL_GetTick>
 80022e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 80e0 	bne.w	80024b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2319      	movs	r3, #25
 80022fe:	2201      	movs	r2, #1
 8002300:	4970      	ldr	r1, [pc, #448]	; (80024c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa92 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	e0d3      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x50>
 800231c:	2302      	movs	r3, #2
 800231e:	e0cc      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d007      	beq.n	8002346 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2210      	movs	r2, #16
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	893a      	ldrh	r2, [r7, #8]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a50      	ldr	r2, [pc, #320]	; (80024c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6a3a      	ldr	r2, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f9ca 	bl	8002728 <I2C_MasterRequestWrite>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e08d      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023b4:	e066      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fb50 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d107      	bne.n	80023de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06b      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b04      	cmp	r3, #4
 800241e:	d11b      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x188>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	6a39      	ldr	r1, [r7, #32]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fb47 	bl	8002af0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	2b04      	cmp	r3, #4
 800246e:	d107      	bne.n	8002480 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d194      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	00100002 	.word	0x00100002
 80024c8:	ffff0000 	.word	0xffff0000

080024cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff f9f8 	bl	80018d0 <HAL_GetTick>
 80024e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 8111 	bne.w	8002716 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2319      	movs	r3, #25
 80024fa:	2201      	movs	r2, #1
 80024fc:	4988      	ldr	r1, [pc, #544]	; (8002720 <HAL_I2C_IsDeviceReady+0x254>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f994 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
 800250c:	e104      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2C_IsDeviceReady+0x50>
 8002518:	2302      	movs	r3, #2
 800251a:	e0fd      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d007      	beq.n	8002542 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002550:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2224      	movs	r2, #36	; 0x24
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a70      	ldr	r2, [pc, #448]	; (8002724 <HAL_I2C_IsDeviceReady+0x258>)
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f952 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259c:	d103      	bne.n	80025a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0b6      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025aa:	897b      	ldrh	r3, [r7, #10]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025ba:	f7ff f989 	bl	80018d0 <HAL_GetTick>
 80025be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025ee:	e025      	b.n	800263c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7ff f96e 	bl	80018d0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <HAL_I2C_IsDeviceReady+0x13a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	22a0      	movs	r2, #160	; 0xa0
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2ba0      	cmp	r3, #160	; 0xa0
 8002646:	d005      	beq.n	8002654 <HAL_I2C_IsDeviceReady+0x188>
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <HAL_I2C_IsDeviceReady+0x188>
 800264e:	7dbb      	ldrb	r3, [r7, #22]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0cd      	beq.n	80025f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d129      	bne.n	80026be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	4921      	ldr	r1, [pc, #132]	; (8002720 <HAL_I2C_IsDeviceReady+0x254>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8c6 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e036      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e02c      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2319      	movs	r3, #25
 80026de:	2201      	movs	r2, #1
 80026e0:	490f      	ldr	r1, [pc, #60]	; (8002720 <HAL_I2C_IsDeviceReady+0x254>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8a2 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e012      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f4ff af32 	bcc.w	8002566 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	00100002 	.word	0x00100002
 8002724:	ffff0000 	.word	0xffff0000

08002728 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	460b      	mov	r3, r1
 8002736:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d006      	beq.n	8002752 <I2C_MasterRequestWrite+0x2a>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d003      	beq.n	8002752 <I2C_MasterRequestWrite+0x2a>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002750:	d108      	bne.n	8002764 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e00b      	b.n	800277c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	2b12      	cmp	r3, #18
 800276a:	d107      	bne.n	800277c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f84f 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a2:	d103      	bne.n	80027ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e035      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b8:	d108      	bne.n	80027cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	e01b      	b.n	8002804 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	11db      	asrs	r3, r3, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0306 	and.w	r3, r3, #6
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f063 030f 	orn	r3, r3, #15
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <I2C_MasterRequestWrite+0xfc>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f898 	bl	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e010      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <I2C_MasterRequestWrite+0x100>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f888 	bl	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010008 	.word	0x00010008
 8002828:	00010002 	.word	0x00010002

0800282c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283c:	e048      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d044      	beq.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7ff f843 	bl	80018d0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d139      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10d      	bne.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	e00c      	b.n	800289c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	43da      	mvns	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4013      	ands	r3, r2
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d116      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e023      	b.n	8002918 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10d      	bne.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	e00c      	b.n	8002910 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	429a      	cmp	r2, r3
 8002914:	d093      	beq.n	800283e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292e:	e071      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293e:	d123      	bne.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e067      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d041      	beq.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7fe ff9e 	bl	80018d0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d136      	bne.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10c      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e00b      	b.n	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e021      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10c      	bne.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e00b      	b.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f af6d 	bne.w	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6c:	e034      	b.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f886 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e034      	b.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d028      	beq.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe ff23 	bl	80018d0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11d      	bne.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	d016      	beq.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e007      	b.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d1c3      	bne.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afc:	e034      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f83e 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e034      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d028      	beq.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fedb 	bl	80018d0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d016      	beq.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d1c3      	bne.n	8002afe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b96:	d11b      	bne.n	8002bd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e272      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d00c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c08:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d112      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
 8002c14:	4b8c      	ldr	r3, [pc, #560]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c22:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x12c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d168      	bne.n	8002d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e24c      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x76>
 8002c44:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7f      	ldr	r2, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e02e      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x98>
 8002c5a:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7a      	ldr	r2, [pc, #488]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a77      	ldr	r2, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0xbc>
 8002c7e:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a71      	ldr	r2, [pc, #452]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6e      	ldr	r2, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c98:	4b6b      	ldr	r3, [pc, #428]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fe0a 	bl	80018d0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fe06 	bl	80018d0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e200      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe4>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fdf6 	bl	80018d0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fdf2 	bl	80018d0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1ec      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x10c>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d22:	4b49      	ldr	r3, [pc, #292]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x18c>
 8002d2e:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c0      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4939      	ldr	r1, [pc, #228]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fdab 	bl	80018d0 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe fda7 	bl	80018d0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a1      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4927      	ldr	r1, [pc, #156]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe fd8a 	bl	80018d0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fd86 	bl	80018d0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e180      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03a      	beq.n	8002e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe fd6a 	bl	80018d0 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe fd66 	bl	80018d0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e160      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f000 face 	bl	80033c0 <RCC_Delay>
 8002e24:	e01c      	b.n	8002e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fd50 	bl	80018d0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e32:	e00f      	b.n	8002e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe fd4c 	bl	80018d0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d908      	bls.n	8002e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e146      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	42420000 	.word	0x42420000
 8002e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e9      	bne.n	8002e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a6 	beq.w	8002fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e72:	4b8b      	ldr	r3, [pc, #556]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a87      	ldr	r2, [pc, #540]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]
 8002e8a:	4b85      	ldr	r3, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	; (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fd0d 	bl	80018d0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fe fd09 	bl	80018d0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	; 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e103      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x312>
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e02d      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x334>
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x356>
 8002f18:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a60      	ldr	r2, [pc, #384]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a5d      	ldr	r2, [pc, #372]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e00b      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fcbd 	bl	80018d0 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fe fcb9 	bl	80018d0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0b1      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ee      	beq.n	8002f5a <HAL_RCC_OscConfig+0x37e>
 8002f7c:	e014      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fca7 	bl	80018d0 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fca3 	bl	80018d0 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e09b      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fae:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8087 	beq.w	80030d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc4:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d061      	beq.n	8003094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d146      	bne.n	8003066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fc77 	bl	80018d0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe fc73 	bl	80018d0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e06d      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d108      	bne.n	8003020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4921      	ldr	r1, [pc, #132]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a19      	ldr	r1, [r3, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	430b      	orrs	r3, r1
 8003032:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe fc47 	bl	80018d0 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fc43 	bl	80018d0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e03d      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x46a>
 8003064:	e035      	b.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe fc30 	bl	80018d0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fc2c 	bl	80018d0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e026      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x498>
 8003092:	e01e      	b.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e019      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x500>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d0      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	4965      	ldr	r1, [pc, #404]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800315e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d040      	beq.n	8003200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e073      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4936      	ldr	r1, [pc, #216]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe fb7e 	bl	80018d0 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe fb7a 	bl	80018d0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e053      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4922      	ldr	r1, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1cc>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1d0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fadc 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08006d00 	.word	0x08006d00
 80032ac:	20000028 	.word	0x20000028
 80032b0:	2000002c 	.word	0x2000002c

080032b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCC_GetSysClockFreq+0x94>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x30>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x36>
 80032e2:	e027      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 80032e6:	613b      	str	r3, [r7, #16]
      break;
 80032e8:	e027      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCC_GetSysClockFreq+0x94>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0c5b      	lsrs	r3, r3, #17
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_RCC_GetSysClockFreq+0xa0>)
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 8003316:	fb03 f202 	mul.w	r2, r3, r2
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e004      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	613b      	str	r3, [r7, #16]
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 8003336:	613b      	str	r3, [r7, #16]
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	693b      	ldr	r3, [r7, #16]
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	007a1200 	.word	0x007a1200
 8003350:	08006d18 	.word	0x08006d18
 8003354:	08006d28 	.word	0x08006d28
 8003358:	003d0900 	.word	0x003d0900

0800335c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b02      	ldr	r3, [pc, #8]	; (800336c <HAL_RCC_GetHCLKFreq+0x10>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000028 	.word	0x20000028

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff2 	bl	800335c <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08006d10 	.word	0x08006d10

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800339c:	f7ff ffde 	bl	800335c <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0adb      	lsrs	r3, r3, #11
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08006d10 	.word	0x08006d10

080033c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <RCC_Delay+0x34>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <RCC_Delay+0x38>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0a5b      	lsrs	r3, r3, #9
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033dc:	bf00      	nop
  }
  while (Delay --);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	60fa      	str	r2, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <RCC_Delay+0x1c>
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	20000028 	.word	0x20000028
 80033f8:	10624dd3 	.word	0x10624dd3

080033fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e042      	b.n	8003494 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fff4 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fdc5 	bl	8003fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d16d      	bne.n	8003598 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_UART_Transmit+0x2c>
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e066      	b.n	800359a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2221      	movs	r2, #33	; 0x21
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034da:	f7fe f9f9 	bl	80018d0 <HAL_GetTick>
 80034de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f4:	d108      	bne.n	8003508 <HAL_UART_Transmit+0x6c>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e003      	b.n	8003510 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003510:	e02a      	b.n	8003568 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fb14 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e036      	b.n	800359a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3302      	adds	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e007      	b.n	800355a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1cf      	bne.n	8003512 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2140      	movs	r1, #64	; 0x40
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fae4 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e006      	b.n	800359a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d112      	bne.n	80035e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_UART_Receive_IT+0x26>
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e00b      	b.n	80035e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	461a      	mov	r2, r3
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fb24 	bl	8003c26 <UART_Start_Receive_IT>
 80035de:	4603      	mov	r3, r0
 80035e0:	e000      	b.n	80035e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b0ba      	sub	sp, #232	; 0xe8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800362a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_UART_IRQHandler+0x66>
 800363e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fc01 	bl	8003e52 <UART_Receive_IT>
      return;
 8003650:	e25b      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80de 	beq.w	8003818 <HAL_UART_IRQHandler+0x22c>
 800365c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80d1 	beq.w	8003818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_UART_IRQHandler+0xae>
 8003682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xd2>
 80036a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_UART_IRQHandler+0xf6>
 80036ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d011      	beq.n	8003712 <HAL_UART_IRQHandler+0x126>
 80036ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0208 	orr.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 81f2 	beq.w	8003b00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_UART_IRQHandler+0x14e>
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fb8c 	bl	8003e52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_UART_IRQHandler+0x17a>
 800375e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d04f      	beq.n	8003806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa96 	bl	8003c98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d041      	beq.n	80037fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3314      	adds	r3, #20
 8003780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1d9      	bne.n	800377a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d013      	beq.n	80037f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	4a7e      	ldr	r2, [pc, #504]	; (80039cc <HAL_UART_IRQHandler+0x3e0>)
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe f9ee 	bl	8001bbc <HAL_DMA_Abort_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037f0:	4610      	mov	r0, r2
 80037f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	e00e      	b.n	8003814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f993 	bl	8003b22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00a      	b.n	8003814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f98f 	bl	8003b22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e006      	b.n	8003814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f98b 	bl	8003b22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003812:	e175      	b.n	8003b00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	bf00      	nop
    return;
 8003816:	e173      	b.n	8003b00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	2b01      	cmp	r3, #1
 800381e:	f040 814f 	bne.w	8003ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8148 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8141 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80b6 	beq.w	80039d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8145 	beq.w	8003b04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800387e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003882:	429a      	cmp	r2, r3
 8003884:	f080 813e 	bcs.w	8003b04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b20      	cmp	r3, #32
 8003898:	f000 8088 	beq.w	80039ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1d9      	bne.n	800389c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3314      	adds	r3, #20
 8003908:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800390c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003910:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800391e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e1      	bne.n	80038e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003948:	66fa      	str	r2, [r7, #108]	; 0x6c
 800394a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800394e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e3      	bne.n	8003924 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800397a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397c:	f023 0310 	bic.w	r3, r3, #16
 8003980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800398e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003990:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800399c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e3      	bne.n	800396a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe f8cd 	bl	8001b46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8b6 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039c8:	e09c      	b.n	8003b04 <HAL_UART_IRQHandler+0x518>
 80039ca:	bf00      	nop
 80039cc:	08003d5d 	.word	0x08003d5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 808e 	beq.w	8003b08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8089 	beq.w	8003b08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a52:	633a      	str	r2, [r7, #48]	; 0x30
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0310 	bic.w	r3, r3, #16
 8003a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	69b9      	ldr	r1, [r7, #24]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e3      	bne.n	8003a74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f83b 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003abe:	e023      	b.n	8003b08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x4f4>
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f953 	bl	8003d84 <UART_Transmit_IT>
    return;
 8003ade:	e014      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_UART_IRQHandler+0x51e>
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f992 	bl	8003e22 <UART_EndTransmit_IT>
    return;
 8003afe:	e004      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
    return;
 8003b00:	bf00      	nop
 8003b02:	e002      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b08:	bf00      	nop
  }
}
 8003b0a:	37e8      	adds	r7, #232	; 0xe8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b090      	sub	sp, #64	; 0x40
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5a:	e050      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d04c      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b6a:	f7fd feb1 	bl	80018d0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d241      	bcs.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bce:	623a      	str	r2, [r7, #32]
 8003bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	69f9      	ldr	r1, [r7, #28]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00f      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d09f      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3740      	adds	r7, #64	; 0x40
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2222      	movs	r2, #34	; 0x22
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0220 	orr.w	r2, r2, #32
 8003c8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b095      	sub	sp, #84	; 0x54
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cc0:	643a      	str	r2, [r7, #64]	; 0x40
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3314      	adds	r3, #20
 8003cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e5      	bne.n	8003cd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d119      	bne.n	8003d44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f023 0310 	bic.w	r3, r3, #16
 8003d26:	647b      	str	r3, [r7, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d30:	61ba      	str	r2, [r7, #24]
 8003d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6979      	ldr	r1, [r7, #20]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d52:	bf00      	nop
 8003d54:	3754      	adds	r7, #84	; 0x54
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fed3 	bl	8003b22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b21      	cmp	r3, #33	; 0x21
 8003d96:	d13e      	bne.n	8003e16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d114      	bne.n	8003dcc <UART_Transmit_IT+0x48>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d110      	bne.n	8003dcc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]
 8003dca:	e008      	b.n	8003dde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	1c59      	adds	r1, r3, #1
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6211      	str	r1, [r2, #32]
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4619      	mov	r1, r3
 8003dec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fe64 	bl	8003b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08c      	sub	sp, #48	; 0x30
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b22      	cmp	r3, #34	; 0x22
 8003e64:	f040 80ae 	bne.w	8003fc4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d117      	bne.n	8003ea2 <UART_Receive_IT+0x50>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d113      	bne.n	8003ea2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003ea0:	e026      	b.n	8003ef0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d007      	beq.n	8003ec6 <UART_Receive_IT+0x74>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <UART_Receive_IT+0x82>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e008      	b.n	8003ee6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d15d      	bne.n	8003fc0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0220 	bic.w	r2, r2, #32
 8003f12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d135      	bne.n	8003fb6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 0310 	bic.w	r3, r3, #16
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	623a      	str	r2, [r7, #32]
 8003f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	69f9      	ldr	r1, [r7, #28]
 8003f76:	6a3a      	ldr	r2, [r7, #32]
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e5      	bne.n	8003f50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d10a      	bne.n	8003fa8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fdc0 	bl	8003b34 <HAL_UARTEx_RxEventCallback>
 8003fb4:	e002      	b.n	8003fbc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f932 	bl	8001220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e002      	b.n	8003fc6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3730      	adds	r7, #48	; 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800400a:	f023 030c 	bic.w	r3, r3, #12
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	430b      	orrs	r3, r1
 8004016:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <UART_SetConfig+0x114>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7ff f9ae 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	e002      	b.n	8004046 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7ff f996 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8004044:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <UART_SetConfig+0x118>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	0119      	lsls	r1, r3, #4
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <UART_SetConfig+0x118>)
 800407e:	fba3 0302 	umull	r0, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2064      	movs	r0, #100	; 0x64
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <UART_SetConfig+0x118>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409c:	4419      	add	r1, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <UART_SetConfig+0x118>)
 80040b6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2064      	movs	r0, #100	; 0x64
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	; 0x32
 80040c8:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <UART_SetConfig+0x118>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	440a      	add	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40013800 	.word	0x40013800
 80040e8:	51eb851f 	.word	0x51eb851f

080040ec <__cvt>:
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f2:	461f      	mov	r7, r3
 80040f4:	bfbb      	ittet	lt
 80040f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040fa:	461f      	movlt	r7, r3
 80040fc:	2300      	movge	r3, #0
 80040fe:	232d      	movlt	r3, #45	; 0x2d
 8004100:	b088      	sub	sp, #32
 8004102:	4614      	mov	r4, r2
 8004104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004106:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004108:	7013      	strb	r3, [r2, #0]
 800410a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800410c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004110:	f023 0820 	bic.w	r8, r3, #32
 8004114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004118:	d005      	beq.n	8004126 <__cvt+0x3a>
 800411a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800411e:	d100      	bne.n	8004122 <__cvt+0x36>
 8004120:	3501      	adds	r5, #1
 8004122:	2302      	movs	r3, #2
 8004124:	e000      	b.n	8004128 <__cvt+0x3c>
 8004126:	2303      	movs	r3, #3
 8004128:	aa07      	add	r2, sp, #28
 800412a:	9204      	str	r2, [sp, #16]
 800412c:	aa06      	add	r2, sp, #24
 800412e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004132:	e9cd 3500 	strd	r3, r5, [sp]
 8004136:	4622      	mov	r2, r4
 8004138:	463b      	mov	r3, r7
 800413a:	f001 f801 	bl	8005140 <_dtoa_r>
 800413e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004142:	4606      	mov	r6, r0
 8004144:	d102      	bne.n	800414c <__cvt+0x60>
 8004146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004148:	07db      	lsls	r3, r3, #31
 800414a:	d522      	bpl.n	8004192 <__cvt+0xa6>
 800414c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004150:	eb06 0905 	add.w	r9, r6, r5
 8004154:	d110      	bne.n	8004178 <__cvt+0x8c>
 8004156:	7833      	ldrb	r3, [r6, #0]
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d10a      	bne.n	8004172 <__cvt+0x86>
 800415c:	2200      	movs	r2, #0
 800415e:	2300      	movs	r3, #0
 8004160:	4620      	mov	r0, r4
 8004162:	4639      	mov	r1, r7
 8004164:	f7fc fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8004168:	b918      	cbnz	r0, 8004172 <__cvt+0x86>
 800416a:	f1c5 0501 	rsb	r5, r5, #1
 800416e:	f8ca 5000 	str.w	r5, [sl]
 8004172:	f8da 3000 	ldr.w	r3, [sl]
 8004176:	4499      	add	r9, r3
 8004178:	2200      	movs	r2, #0
 800417a:	2300      	movs	r3, #0
 800417c:	4620      	mov	r0, r4
 800417e:	4639      	mov	r1, r7
 8004180:	f7fc fc12 	bl	80009a8 <__aeabi_dcmpeq>
 8004184:	b108      	cbz	r0, 800418a <__cvt+0x9e>
 8004186:	f8cd 901c 	str.w	r9, [sp, #28]
 800418a:	2230      	movs	r2, #48	; 0x30
 800418c:	9b07      	ldr	r3, [sp, #28]
 800418e:	454b      	cmp	r3, r9
 8004190:	d307      	bcc.n	80041a2 <__cvt+0xb6>
 8004192:	4630      	mov	r0, r6
 8004194:	9b07      	ldr	r3, [sp, #28]
 8004196:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004198:	1b9b      	subs	r3, r3, r6
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	b008      	add	sp, #32
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a2:	1c59      	adds	r1, r3, #1
 80041a4:	9107      	str	r1, [sp, #28]
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e7f0      	b.n	800418c <__cvt+0xa0>

080041aa <__exponent>:
 80041aa:	4603      	mov	r3, r0
 80041ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ae:	2900      	cmp	r1, #0
 80041b0:	f803 2b02 	strb.w	r2, [r3], #2
 80041b4:	bfb6      	itet	lt
 80041b6:	222d      	movlt	r2, #45	; 0x2d
 80041b8:	222b      	movge	r2, #43	; 0x2b
 80041ba:	4249      	neglt	r1, r1
 80041bc:	2909      	cmp	r1, #9
 80041be:	7042      	strb	r2, [r0, #1]
 80041c0:	dd2a      	ble.n	8004218 <__exponent+0x6e>
 80041c2:	f10d 0207 	add.w	r2, sp, #7
 80041c6:	4617      	mov	r7, r2
 80041c8:	260a      	movs	r6, #10
 80041ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80041ce:	4694      	mov	ip, r2
 80041d0:	fb06 1415 	mls	r4, r6, r5, r1
 80041d4:	3430      	adds	r4, #48	; 0x30
 80041d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80041da:	460c      	mov	r4, r1
 80041dc:	2c63      	cmp	r4, #99	; 0x63
 80041de:	4629      	mov	r1, r5
 80041e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80041e4:	dcf1      	bgt.n	80041ca <__exponent+0x20>
 80041e6:	3130      	adds	r1, #48	; 0x30
 80041e8:	f1ac 0402 	sub.w	r4, ip, #2
 80041ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80041f0:	4622      	mov	r2, r4
 80041f2:	1c41      	adds	r1, r0, #1
 80041f4:	42ba      	cmp	r2, r7
 80041f6:	d30a      	bcc.n	800420e <__exponent+0x64>
 80041f8:	f10d 0209 	add.w	r2, sp, #9
 80041fc:	eba2 020c 	sub.w	r2, r2, ip
 8004200:	42bc      	cmp	r4, r7
 8004202:	bf88      	it	hi
 8004204:	2200      	movhi	r2, #0
 8004206:	4413      	add	r3, r2
 8004208:	1a18      	subs	r0, r3, r0
 800420a:	b003      	add	sp, #12
 800420c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004212:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004216:	e7ed      	b.n	80041f4 <__exponent+0x4a>
 8004218:	2330      	movs	r3, #48	; 0x30
 800421a:	3130      	adds	r1, #48	; 0x30
 800421c:	7083      	strb	r3, [r0, #2]
 800421e:	70c1      	strb	r1, [r0, #3]
 8004220:	1d03      	adds	r3, r0, #4
 8004222:	e7f1      	b.n	8004208 <__exponent+0x5e>

08004224 <_printf_float>:
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	b091      	sub	sp, #68	; 0x44
 800422a:	460c      	mov	r4, r1
 800422c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004230:	4616      	mov	r6, r2
 8004232:	461f      	mov	r7, r3
 8004234:	4605      	mov	r5, r0
 8004236:	f000 fe75 	bl	8004f24 <_localeconv_r>
 800423a:	6803      	ldr	r3, [r0, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	9309      	str	r3, [sp, #36]	; 0x24
 8004240:	f7fb ff86 	bl	8000150 <strlen>
 8004244:	2300      	movs	r3, #0
 8004246:	930e      	str	r3, [sp, #56]	; 0x38
 8004248:	f8d8 3000 	ldr.w	r3, [r8]
 800424c:	900a      	str	r0, [sp, #40]	; 0x28
 800424e:	3307      	adds	r3, #7
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	f103 0208 	add.w	r2, r3, #8
 8004258:	f894 9018 	ldrb.w	r9, [r4, #24]
 800425c:	f8d4 b000 	ldr.w	fp, [r4]
 8004260:	f8c8 2000 	str.w	r2, [r8]
 8004264:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004268:	4652      	mov	r2, sl
 800426a:	4643      	mov	r3, r8
 800426c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004270:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004274:	930b      	str	r3, [sp, #44]	; 0x2c
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	4650      	mov	r0, sl
 800427c:	4b9c      	ldr	r3, [pc, #624]	; (80044f0 <_printf_float+0x2cc>)
 800427e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004280:	f7fc fbc4 	bl	8000a0c <__aeabi_dcmpun>
 8004284:	bb70      	cbnz	r0, 80042e4 <_printf_float+0xc0>
 8004286:	f04f 32ff 	mov.w	r2, #4294967295
 800428a:	4650      	mov	r0, sl
 800428c:	4b98      	ldr	r3, [pc, #608]	; (80044f0 <_printf_float+0x2cc>)
 800428e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004290:	f7fc fb9e 	bl	80009d0 <__aeabi_dcmple>
 8004294:	bb30      	cbnz	r0, 80042e4 <_printf_float+0xc0>
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	4650      	mov	r0, sl
 800429c:	4641      	mov	r1, r8
 800429e:	f7fc fb8d 	bl	80009bc <__aeabi_dcmplt>
 80042a2:	b110      	cbz	r0, 80042aa <_printf_float+0x86>
 80042a4:	232d      	movs	r3, #45	; 0x2d
 80042a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042aa:	4a92      	ldr	r2, [pc, #584]	; (80044f4 <_printf_float+0x2d0>)
 80042ac:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <_printf_float+0x2d4>)
 80042ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80042b2:	bf94      	ite	ls
 80042b4:	4690      	movls	r8, r2
 80042b6:	4698      	movhi	r8, r3
 80042b8:	2303      	movs	r3, #3
 80042ba:	f04f 0a00 	mov.w	sl, #0
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	f02b 0304 	bic.w	r3, fp, #4
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	4633      	mov	r3, r6
 80042c8:	4621      	mov	r1, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	9700      	str	r7, [sp, #0]
 80042ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80042d0:	f000 f9d6 	bl	8004680 <_printf_common>
 80042d4:	3001      	adds	r0, #1
 80042d6:	f040 8090 	bne.w	80043fa <_printf_float+0x1d6>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	b011      	add	sp, #68	; 0x44
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e4:	4652      	mov	r2, sl
 80042e6:	4643      	mov	r3, r8
 80042e8:	4650      	mov	r0, sl
 80042ea:	4641      	mov	r1, r8
 80042ec:	f7fc fb8e 	bl	8000a0c <__aeabi_dcmpun>
 80042f0:	b148      	cbz	r0, 8004306 <_printf_float+0xe2>
 80042f2:	f1b8 0f00 	cmp.w	r8, #0
 80042f6:	bfb8      	it	lt
 80042f8:	232d      	movlt	r3, #45	; 0x2d
 80042fa:	4a80      	ldr	r2, [pc, #512]	; (80044fc <_printf_float+0x2d8>)
 80042fc:	bfb8      	it	lt
 80042fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004302:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <_printf_float+0x2dc>)
 8004304:	e7d3      	b.n	80042ae <_printf_float+0x8a>
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	d142      	bne.n	8004396 <_printf_float+0x172>
 8004310:	2306      	movs	r3, #6
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	9206      	str	r2, [sp, #24]
 8004318:	aa0e      	add	r2, sp, #56	; 0x38
 800431a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800431e:	aa0d      	add	r2, sp, #52	; 0x34
 8004320:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004324:	9203      	str	r2, [sp, #12]
 8004326:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800432a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	6863      	ldr	r3, [r4, #4]
 8004332:	4652      	mov	r2, sl
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4628      	mov	r0, r5
 8004338:	4643      	mov	r3, r8
 800433a:	910b      	str	r1, [sp, #44]	; 0x2c
 800433c:	f7ff fed6 	bl	80040ec <__cvt>
 8004340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004342:	4680      	mov	r8, r0
 8004344:	2947      	cmp	r1, #71	; 0x47
 8004346:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004348:	d108      	bne.n	800435c <_printf_float+0x138>
 800434a:	1cc8      	adds	r0, r1, #3
 800434c:	db02      	blt.n	8004354 <_printf_float+0x130>
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	4299      	cmp	r1, r3
 8004352:	dd40      	ble.n	80043d6 <_printf_float+0x1b2>
 8004354:	f1a9 0902 	sub.w	r9, r9, #2
 8004358:	fa5f f989 	uxtb.w	r9, r9
 800435c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004360:	d81f      	bhi.n	80043a2 <_printf_float+0x17e>
 8004362:	464a      	mov	r2, r9
 8004364:	3901      	subs	r1, #1
 8004366:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800436a:	910d      	str	r1, [sp, #52]	; 0x34
 800436c:	f7ff ff1d 	bl	80041aa <__exponent>
 8004370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004372:	4682      	mov	sl, r0
 8004374:	1813      	adds	r3, r2, r0
 8004376:	2a01      	cmp	r2, #1
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	dc02      	bgt.n	8004382 <_printf_float+0x15e>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	07d2      	lsls	r2, r2, #31
 8004380:	d501      	bpl.n	8004386 <_printf_float+0x162>
 8004382:	3301      	adds	r3, #1
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800438a:	2b00      	cmp	r3, #0
 800438c:	d09b      	beq.n	80042c6 <_printf_float+0xa2>
 800438e:	232d      	movs	r3, #45	; 0x2d
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	e797      	b.n	80042c6 <_printf_float+0xa2>
 8004396:	2947      	cmp	r1, #71	; 0x47
 8004398:	d1bc      	bne.n	8004314 <_printf_float+0xf0>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ba      	bne.n	8004314 <_printf_float+0xf0>
 800439e:	2301      	movs	r3, #1
 80043a0:	e7b7      	b.n	8004312 <_printf_float+0xee>
 80043a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80043a6:	d118      	bne.n	80043da <_printf_float+0x1b6>
 80043a8:	2900      	cmp	r1, #0
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	dd0b      	ble.n	80043c6 <_printf_float+0x1a2>
 80043ae:	6121      	str	r1, [r4, #16]
 80043b0:	b913      	cbnz	r3, 80043b8 <_printf_float+0x194>
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	07d0      	lsls	r0, r2, #31
 80043b6:	d502      	bpl.n	80043be <_printf_float+0x19a>
 80043b8:	3301      	adds	r3, #1
 80043ba:	440b      	add	r3, r1
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	f04f 0a00 	mov.w	sl, #0
 80043c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80043c4:	e7df      	b.n	8004386 <_printf_float+0x162>
 80043c6:	b913      	cbnz	r3, 80043ce <_printf_float+0x1aa>
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	07d2      	lsls	r2, r2, #31
 80043cc:	d501      	bpl.n	80043d2 <_printf_float+0x1ae>
 80043ce:	3302      	adds	r3, #2
 80043d0:	e7f4      	b.n	80043bc <_printf_float+0x198>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e7f2      	b.n	80043bc <_printf_float+0x198>
 80043d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80043da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043dc:	4299      	cmp	r1, r3
 80043de:	db05      	blt.n	80043ec <_printf_float+0x1c8>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	6121      	str	r1, [r4, #16]
 80043e4:	07d8      	lsls	r0, r3, #31
 80043e6:	d5ea      	bpl.n	80043be <_printf_float+0x19a>
 80043e8:	1c4b      	adds	r3, r1, #1
 80043ea:	e7e7      	b.n	80043bc <_printf_float+0x198>
 80043ec:	2900      	cmp	r1, #0
 80043ee:	bfcc      	ite	gt
 80043f0:	2201      	movgt	r2, #1
 80043f2:	f1c1 0202 	rsble	r2, r1, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	e7e0      	b.n	80043bc <_printf_float+0x198>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	055a      	lsls	r2, r3, #21
 80043fe:	d407      	bmi.n	8004410 <_printf_float+0x1ec>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	4642      	mov	r2, r8
 8004404:	4631      	mov	r1, r6
 8004406:	4628      	mov	r0, r5
 8004408:	47b8      	blx	r7
 800440a:	3001      	adds	r0, #1
 800440c:	d12b      	bne.n	8004466 <_printf_float+0x242>
 800440e:	e764      	b.n	80042da <_printf_float+0xb6>
 8004410:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004414:	f240 80dd 	bls.w	80045d2 <_printf_float+0x3ae>
 8004418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800441c:	2200      	movs	r2, #0
 800441e:	2300      	movs	r3, #0
 8004420:	f7fc fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8004424:	2800      	cmp	r0, #0
 8004426:	d033      	beq.n	8004490 <_printf_float+0x26c>
 8004428:	2301      	movs	r3, #1
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	4a35      	ldr	r2, [pc, #212]	; (8004504 <_printf_float+0x2e0>)
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f af51 	beq.w	80042da <_printf_float+0xb6>
 8004438:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800443c:	429a      	cmp	r2, r3
 800443e:	db02      	blt.n	8004446 <_printf_float+0x222>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	07d8      	lsls	r0, r3, #31
 8004444:	d50f      	bpl.n	8004466 <_printf_float+0x242>
 8004446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	47b8      	blx	r7
 8004450:	3001      	adds	r0, #1
 8004452:	f43f af42 	beq.w	80042da <_printf_float+0xb6>
 8004456:	f04f 0800 	mov.w	r8, #0
 800445a:	f104 091a 	add.w	r9, r4, #26
 800445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004460:	3b01      	subs	r3, #1
 8004462:	4543      	cmp	r3, r8
 8004464:	dc09      	bgt.n	800447a <_printf_float+0x256>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	079b      	lsls	r3, r3, #30
 800446a:	f100 8104 	bmi.w	8004676 <_printf_float+0x452>
 800446e:	68e0      	ldr	r0, [r4, #12]
 8004470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004472:	4298      	cmp	r0, r3
 8004474:	bfb8      	it	lt
 8004476:	4618      	movlt	r0, r3
 8004478:	e731      	b.n	80042de <_printf_float+0xba>
 800447a:	2301      	movs	r3, #1
 800447c:	464a      	mov	r2, r9
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	47b8      	blx	r7
 8004484:	3001      	adds	r0, #1
 8004486:	f43f af28 	beq.w	80042da <_printf_float+0xb6>
 800448a:	f108 0801 	add.w	r8, r8, #1
 800448e:	e7e6      	b.n	800445e <_printf_float+0x23a>
 8004490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	dc38      	bgt.n	8004508 <_printf_float+0x2e4>
 8004496:	2301      	movs	r3, #1
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <_printf_float+0x2e0>)
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	f43f af1a 	beq.w	80042da <_printf_float+0xb6>
 80044a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d102      	bne.n	80044b4 <_printf_float+0x290>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	07d9      	lsls	r1, r3, #31
 80044b2:	d5d8      	bpl.n	8004466 <_printf_float+0x242>
 80044b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b8:	4631      	mov	r1, r6
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	f43f af0b 	beq.w	80042da <_printf_float+0xb6>
 80044c4:	f04f 0900 	mov.w	r9, #0
 80044c8:	f104 0a1a 	add.w	sl, r4, #26
 80044cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ce:	425b      	negs	r3, r3
 80044d0:	454b      	cmp	r3, r9
 80044d2:	dc01      	bgt.n	80044d8 <_printf_float+0x2b4>
 80044d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044d6:	e794      	b.n	8004402 <_printf_float+0x1de>
 80044d8:	2301      	movs	r3, #1
 80044da:	4652      	mov	r2, sl
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47b8      	blx	r7
 80044e2:	3001      	adds	r0, #1
 80044e4:	f43f aef9 	beq.w	80042da <_printf_float+0xb6>
 80044e8:	f109 0901 	add.w	r9, r9, #1
 80044ec:	e7ee      	b.n	80044cc <_printf_float+0x2a8>
 80044ee:	bf00      	nop
 80044f0:	7fefffff 	.word	0x7fefffff
 80044f4:	08006d2a 	.word	0x08006d2a
 80044f8:	08006d2e 	.word	0x08006d2e
 80044fc:	08006d32 	.word	0x08006d32
 8004500:	08006d36 	.word	0x08006d36
 8004504:	08006d3a 	.word	0x08006d3a
 8004508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800450a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800450c:	429a      	cmp	r2, r3
 800450e:	bfa8      	it	ge
 8004510:	461a      	movge	r2, r3
 8004512:	2a00      	cmp	r2, #0
 8004514:	4691      	mov	r9, r2
 8004516:	dc37      	bgt.n	8004588 <_printf_float+0x364>
 8004518:	f04f 0b00 	mov.w	fp, #0
 800451c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004520:	f104 021a 	add.w	r2, r4, #26
 8004524:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004528:	ebaa 0309 	sub.w	r3, sl, r9
 800452c:	455b      	cmp	r3, fp
 800452e:	dc33      	bgt.n	8004598 <_printf_float+0x374>
 8004530:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004534:	429a      	cmp	r2, r3
 8004536:	db3b      	blt.n	80045b0 <_printf_float+0x38c>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07da      	lsls	r2, r3, #31
 800453c:	d438      	bmi.n	80045b0 <_printf_float+0x38c>
 800453e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004542:	eba2 0903 	sub.w	r9, r2, r3
 8004546:	eba2 020a 	sub.w	r2, r2, sl
 800454a:	4591      	cmp	r9, r2
 800454c:	bfa8      	it	ge
 800454e:	4691      	movge	r9, r2
 8004550:	f1b9 0f00 	cmp.w	r9, #0
 8004554:	dc34      	bgt.n	80045c0 <_printf_float+0x39c>
 8004556:	f04f 0800 	mov.w	r8, #0
 800455a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800455e:	f104 0a1a 	add.w	sl, r4, #26
 8004562:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	eba3 0309 	sub.w	r3, r3, r9
 800456c:	4543      	cmp	r3, r8
 800456e:	f77f af7a 	ble.w	8004466 <_printf_float+0x242>
 8004572:	2301      	movs	r3, #1
 8004574:	4652      	mov	r2, sl
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	47b8      	blx	r7
 800457c:	3001      	adds	r0, #1
 800457e:	f43f aeac 	beq.w	80042da <_printf_float+0xb6>
 8004582:	f108 0801 	add.w	r8, r8, #1
 8004586:	e7ec      	b.n	8004562 <_printf_float+0x33e>
 8004588:	4613      	mov	r3, r2
 800458a:	4631      	mov	r1, r6
 800458c:	4642      	mov	r2, r8
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	d1c0      	bne.n	8004518 <_printf_float+0x2f4>
 8004596:	e6a0      	b.n	80042da <_printf_float+0xb6>
 8004598:	2301      	movs	r3, #1
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	920b      	str	r2, [sp, #44]	; 0x2c
 80045a0:	47b8      	blx	r7
 80045a2:	3001      	adds	r0, #1
 80045a4:	f43f ae99 	beq.w	80042da <_printf_float+0xb6>
 80045a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045aa:	f10b 0b01 	add.w	fp, fp, #1
 80045ae:	e7b9      	b.n	8004524 <_printf_float+0x300>
 80045b0:	4631      	mov	r1, r6
 80045b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b8      	blx	r7
 80045ba:	3001      	adds	r0, #1
 80045bc:	d1bf      	bne.n	800453e <_printf_float+0x31a>
 80045be:	e68c      	b.n	80042da <_printf_float+0xb6>
 80045c0:	464b      	mov	r3, r9
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	eb08 020a 	add.w	r2, r8, sl
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	d1c2      	bne.n	8004556 <_printf_float+0x332>
 80045d0:	e683      	b.n	80042da <_printf_float+0xb6>
 80045d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d4:	2a01      	cmp	r2, #1
 80045d6:	dc01      	bgt.n	80045dc <_printf_float+0x3b8>
 80045d8:	07db      	lsls	r3, r3, #31
 80045da:	d539      	bpl.n	8004650 <_printf_float+0x42c>
 80045dc:	2301      	movs	r3, #1
 80045de:	4642      	mov	r2, r8
 80045e0:	4631      	mov	r1, r6
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f ae77 	beq.w	80042da <_printf_float+0xb6>
 80045ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f ae6f 	beq.w	80042da <_printf_float+0xb6>
 80045fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004600:	2200      	movs	r2, #0
 8004602:	2300      	movs	r3, #0
 8004604:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004608:	f7fc f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800460c:	b9d8      	cbnz	r0, 8004646 <_printf_float+0x422>
 800460e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004612:	f108 0201 	add.w	r2, r8, #1
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	d10e      	bne.n	800463e <_printf_float+0x41a>
 8004620:	e65b      	b.n	80042da <_printf_float+0xb6>
 8004622:	2301      	movs	r3, #1
 8004624:	464a      	mov	r2, r9
 8004626:	4631      	mov	r1, r6
 8004628:	4628      	mov	r0, r5
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f ae54 	beq.w	80042da <_printf_float+0xb6>
 8004632:	f108 0801 	add.w	r8, r8, #1
 8004636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004638:	3b01      	subs	r3, #1
 800463a:	4543      	cmp	r3, r8
 800463c:	dcf1      	bgt.n	8004622 <_printf_float+0x3fe>
 800463e:	4653      	mov	r3, sl
 8004640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004644:	e6de      	b.n	8004404 <_printf_float+0x1e0>
 8004646:	f04f 0800 	mov.w	r8, #0
 800464a:	f104 091a 	add.w	r9, r4, #26
 800464e:	e7f2      	b.n	8004636 <_printf_float+0x412>
 8004650:	2301      	movs	r3, #1
 8004652:	4642      	mov	r2, r8
 8004654:	e7df      	b.n	8004616 <_printf_float+0x3f2>
 8004656:	2301      	movs	r3, #1
 8004658:	464a      	mov	r2, r9
 800465a:	4631      	mov	r1, r6
 800465c:	4628      	mov	r0, r5
 800465e:	47b8      	blx	r7
 8004660:	3001      	adds	r0, #1
 8004662:	f43f ae3a 	beq.w	80042da <_printf_float+0xb6>
 8004666:	f108 0801 	add.w	r8, r8, #1
 800466a:	68e3      	ldr	r3, [r4, #12]
 800466c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800466e:	1a5b      	subs	r3, r3, r1
 8004670:	4543      	cmp	r3, r8
 8004672:	dcf0      	bgt.n	8004656 <_printf_float+0x432>
 8004674:	e6fb      	b.n	800446e <_printf_float+0x24a>
 8004676:	f04f 0800 	mov.w	r8, #0
 800467a:	f104 0919 	add.w	r9, r4, #25
 800467e:	e7f4      	b.n	800466a <_printf_float+0x446>

08004680 <_printf_common>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	4616      	mov	r6, r2
 8004686:	4699      	mov	r9, r3
 8004688:	688a      	ldr	r2, [r1, #8]
 800468a:	690b      	ldr	r3, [r1, #16]
 800468c:	4607      	mov	r7, r0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfb8      	it	lt
 8004692:	4613      	movlt	r3, r2
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800469a:	460c      	mov	r4, r1
 800469c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046a0:	b10a      	cbz	r2, 80046a6 <_printf_common+0x26>
 80046a2:	3301      	adds	r3, #1
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	0699      	lsls	r1, r3, #26
 80046aa:	bf42      	ittt	mi
 80046ac:	6833      	ldrmi	r3, [r6, #0]
 80046ae:	3302      	addmi	r3, #2
 80046b0:	6033      	strmi	r3, [r6, #0]
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	f015 0506 	ands.w	r5, r5, #6
 80046b8:	d106      	bne.n	80046c8 <_printf_common+0x48>
 80046ba:	f104 0a19 	add.w	sl, r4, #25
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	6832      	ldr	r2, [r6, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dc2b      	bgt.n	8004720 <_printf_common+0xa0>
 80046c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046cc:	1e13      	subs	r3, r2, #0
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	bf18      	it	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d430      	bmi.n	800473a <_printf_common+0xba>
 80046d8:	4649      	mov	r1, r9
 80046da:	4638      	mov	r0, r7
 80046dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d023      	beq.n	800472e <_printf_common+0xae>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	bf14      	ite	ne
 80046f2:	2500      	movne	r5, #0
 80046f4:	6833      	ldreq	r3, [r6, #0]
 80046f6:	f04f 0600 	mov.w	r6, #0
 80046fa:	bf08      	it	eq
 80046fc:	68e5      	ldreq	r5, [r4, #12]
 80046fe:	f104 041a 	add.w	r4, r4, #26
 8004702:	bf08      	it	eq
 8004704:	1aed      	subeq	r5, r5, r3
 8004706:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800470a:	bf08      	it	eq
 800470c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004710:	4293      	cmp	r3, r2
 8004712:	bfc4      	itt	gt
 8004714:	1a9b      	subgt	r3, r3, r2
 8004716:	18ed      	addgt	r5, r5, r3
 8004718:	42b5      	cmp	r5, r6
 800471a:	d11a      	bne.n	8004752 <_printf_common+0xd2>
 800471c:	2000      	movs	r0, #0
 800471e:	e008      	b.n	8004732 <_printf_common+0xb2>
 8004720:	2301      	movs	r3, #1
 8004722:	4652      	mov	r2, sl
 8004724:	4649      	mov	r1, r9
 8004726:	4638      	mov	r0, r7
 8004728:	47c0      	blx	r8
 800472a:	3001      	adds	r0, #1
 800472c:	d103      	bne.n	8004736 <_printf_common+0xb6>
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004736:	3501      	adds	r5, #1
 8004738:	e7c1      	b.n	80046be <_printf_common+0x3e>
 800473a:	2030      	movs	r0, #48	; 0x30
 800473c:	18e1      	adds	r1, r4, r3
 800473e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004748:	4422      	add	r2, r4
 800474a:	3302      	adds	r3, #2
 800474c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004750:	e7c2      	b.n	80046d8 <_printf_common+0x58>
 8004752:	2301      	movs	r3, #1
 8004754:	4622      	mov	r2, r4
 8004756:	4649      	mov	r1, r9
 8004758:	4638      	mov	r0, r7
 800475a:	47c0      	blx	r8
 800475c:	3001      	adds	r0, #1
 800475e:	d0e6      	beq.n	800472e <_printf_common+0xae>
 8004760:	3601      	adds	r6, #1
 8004762:	e7d9      	b.n	8004718 <_printf_common+0x98>

08004764 <_printf_i>:
 8004764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	7e0f      	ldrb	r7, [r1, #24]
 800476a:	4691      	mov	r9, r2
 800476c:	2f78      	cmp	r7, #120	; 0x78
 800476e:	4680      	mov	r8, r0
 8004770:	460c      	mov	r4, r1
 8004772:	469a      	mov	sl, r3
 8004774:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800477a:	d807      	bhi.n	800478c <_printf_i+0x28>
 800477c:	2f62      	cmp	r7, #98	; 0x62
 800477e:	d80a      	bhi.n	8004796 <_printf_i+0x32>
 8004780:	2f00      	cmp	r7, #0
 8004782:	f000 80d5 	beq.w	8004930 <_printf_i+0x1cc>
 8004786:	2f58      	cmp	r7, #88	; 0x58
 8004788:	f000 80c1 	beq.w	800490e <_printf_i+0x1aa>
 800478c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004794:	e03a      	b.n	800480c <_printf_i+0xa8>
 8004796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800479a:	2b15      	cmp	r3, #21
 800479c:	d8f6      	bhi.n	800478c <_printf_i+0x28>
 800479e:	a101      	add	r1, pc, #4	; (adr r1, 80047a4 <_printf_i+0x40>)
 80047a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	08004811 	.word	0x08004811
 80047ac:	0800478d 	.word	0x0800478d
 80047b0:	0800478d 	.word	0x0800478d
 80047b4:	0800478d 	.word	0x0800478d
 80047b8:	0800478d 	.word	0x0800478d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800478d 	.word	0x0800478d
 80047c4:	0800478d 	.word	0x0800478d
 80047c8:	0800478d 	.word	0x0800478d
 80047cc:	0800478d 	.word	0x0800478d
 80047d0:	08004917 	.word	0x08004917
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	080048d1 	.word	0x080048d1
 80047dc:	0800478d 	.word	0x0800478d
 80047e0:	0800478d 	.word	0x0800478d
 80047e4:	08004939 	.word	0x08004939
 80047e8:	0800478d 	.word	0x0800478d
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	0800478d 	.word	0x0800478d
 80047f4:	0800478d 	.word	0x0800478d
 80047f8:	080048d9 	.word	0x080048d9
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	602a      	str	r2, [r5, #0]
 8004804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800480c:	2301      	movs	r3, #1
 800480e:	e0a0      	b.n	8004952 <_printf_i+0x1ee>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	0607      	lsls	r7, r0, #24
 8004816:	f103 0104 	add.w	r1, r3, #4
 800481a:	6029      	str	r1, [r5, #0]
 800481c:	d501      	bpl.n	8004822 <_printf_i+0xbe>
 800481e:	681e      	ldr	r6, [r3, #0]
 8004820:	e003      	b.n	800482a <_printf_i+0xc6>
 8004822:	0646      	lsls	r6, r0, #25
 8004824:	d5fb      	bpl.n	800481e <_printf_i+0xba>
 8004826:	f9b3 6000 	ldrsh.w	r6, [r3]
 800482a:	2e00      	cmp	r6, #0
 800482c:	da03      	bge.n	8004836 <_printf_i+0xd2>
 800482e:	232d      	movs	r3, #45	; 0x2d
 8004830:	4276      	negs	r6, r6
 8004832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004836:	230a      	movs	r3, #10
 8004838:	4859      	ldr	r0, [pc, #356]	; (80049a0 <_printf_i+0x23c>)
 800483a:	e012      	b.n	8004862 <_printf_i+0xfe>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1d19      	adds	r1, r3, #4
 8004842:	6029      	str	r1, [r5, #0]
 8004844:	0605      	lsls	r5, r0, #24
 8004846:	d501      	bpl.n	800484c <_printf_i+0xe8>
 8004848:	681e      	ldr	r6, [r3, #0]
 800484a:	e002      	b.n	8004852 <_printf_i+0xee>
 800484c:	0641      	lsls	r1, r0, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0xe4>
 8004850:	881e      	ldrh	r6, [r3, #0]
 8004852:	2f6f      	cmp	r7, #111	; 0x6f
 8004854:	bf0c      	ite	eq
 8004856:	2308      	moveq	r3, #8
 8004858:	230a      	movne	r3, #10
 800485a:	4851      	ldr	r0, [pc, #324]	; (80049a0 <_printf_i+0x23c>)
 800485c:	2100      	movs	r1, #0
 800485e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004862:	6865      	ldr	r5, [r4, #4]
 8004864:	2d00      	cmp	r5, #0
 8004866:	bfa8      	it	ge
 8004868:	6821      	ldrge	r1, [r4, #0]
 800486a:	60a5      	str	r5, [r4, #8]
 800486c:	bfa4      	itt	ge
 800486e:	f021 0104 	bicge.w	r1, r1, #4
 8004872:	6021      	strge	r1, [r4, #0]
 8004874:	b90e      	cbnz	r6, 800487a <_printf_i+0x116>
 8004876:	2d00      	cmp	r5, #0
 8004878:	d04b      	beq.n	8004912 <_printf_i+0x1ae>
 800487a:	4615      	mov	r5, r2
 800487c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004880:	fb03 6711 	mls	r7, r3, r1, r6
 8004884:	5dc7      	ldrb	r7, [r0, r7]
 8004886:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800488a:	4637      	mov	r7, r6
 800488c:	42bb      	cmp	r3, r7
 800488e:	460e      	mov	r6, r1
 8004890:	d9f4      	bls.n	800487c <_printf_i+0x118>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d10b      	bne.n	80048ae <_printf_i+0x14a>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	07de      	lsls	r6, r3, #31
 800489a:	d508      	bpl.n	80048ae <_printf_i+0x14a>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	6861      	ldr	r1, [r4, #4]
 80048a0:	4299      	cmp	r1, r3
 80048a2:	bfde      	ittt	le
 80048a4:	2330      	movle	r3, #48	; 0x30
 80048a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048ae:	1b52      	subs	r2, r2, r5
 80048b0:	6122      	str	r2, [r4, #16]
 80048b2:	464b      	mov	r3, r9
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f8cd a000 	str.w	sl, [sp]
 80048bc:	aa03      	add	r2, sp, #12
 80048be:	f7ff fedf 	bl	8004680 <_printf_common>
 80048c2:	3001      	adds	r0, #1
 80048c4:	d14a      	bne.n	800495c <_printf_i+0x1f8>
 80048c6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ca:	b004      	add	sp, #16
 80048cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	2778      	movs	r7, #120	; 0x78
 80048da:	4832      	ldr	r0, [pc, #200]	; (80049a4 <_printf_i+0x240>)
 80048dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	6829      	ldr	r1, [r5, #0]
 80048e4:	061f      	lsls	r7, r3, #24
 80048e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80048ea:	d402      	bmi.n	80048f2 <_printf_i+0x18e>
 80048ec:	065f      	lsls	r7, r3, #25
 80048ee:	bf48      	it	mi
 80048f0:	b2b6      	uxthmi	r6, r6
 80048f2:	07df      	lsls	r7, r3, #31
 80048f4:	bf48      	it	mi
 80048f6:	f043 0320 	orrmi.w	r3, r3, #32
 80048fa:	6029      	str	r1, [r5, #0]
 80048fc:	bf48      	it	mi
 80048fe:	6023      	strmi	r3, [r4, #0]
 8004900:	b91e      	cbnz	r6, 800490a <_printf_i+0x1a6>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	f023 0320 	bic.w	r3, r3, #32
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	2310      	movs	r3, #16
 800490c:	e7a6      	b.n	800485c <_printf_i+0xf8>
 800490e:	4824      	ldr	r0, [pc, #144]	; (80049a0 <_printf_i+0x23c>)
 8004910:	e7e4      	b.n	80048dc <_printf_i+0x178>
 8004912:	4615      	mov	r5, r2
 8004914:	e7bd      	b.n	8004892 <_printf_i+0x12e>
 8004916:	682b      	ldr	r3, [r5, #0]
 8004918:	6826      	ldr	r6, [r4, #0]
 800491a:	1d18      	adds	r0, r3, #4
 800491c:	6961      	ldr	r1, [r4, #20]
 800491e:	6028      	str	r0, [r5, #0]
 8004920:	0635      	lsls	r5, r6, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0x1c6>
 8004926:	6019      	str	r1, [r3, #0]
 8004928:	e002      	b.n	8004930 <_printf_i+0x1cc>
 800492a:	0670      	lsls	r0, r6, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0x1c2>
 800492e:	8019      	strh	r1, [r3, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	4615      	mov	r5, r2
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	e7bc      	b.n	80048b2 <_printf_i+0x14e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	2100      	movs	r1, #0
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	4628      	mov	r0, r5
 8004946:	f000 fb64 	bl	8005012 <memchr>
 800494a:	b108      	cbz	r0, 8004950 <_printf_i+0x1ec>
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	6060      	str	r0, [r4, #4]
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2300      	movs	r3, #0
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495a:	e7aa      	b.n	80048b2 <_printf_i+0x14e>
 800495c:	462a      	mov	r2, r5
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	47d0      	blx	sl
 8004966:	3001      	adds	r0, #1
 8004968:	d0ad      	beq.n	80048c6 <_printf_i+0x162>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	079b      	lsls	r3, r3, #30
 800496e:	d413      	bmi.n	8004998 <_printf_i+0x234>
 8004970:	68e0      	ldr	r0, [r4, #12]
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	4298      	cmp	r0, r3
 8004976:	bfb8      	it	lt
 8004978:	4618      	movlt	r0, r3
 800497a:	e7a6      	b.n	80048ca <_printf_i+0x166>
 800497c:	2301      	movs	r3, #1
 800497e:	4632      	mov	r2, r6
 8004980:	4649      	mov	r1, r9
 8004982:	4640      	mov	r0, r8
 8004984:	47d0      	blx	sl
 8004986:	3001      	adds	r0, #1
 8004988:	d09d      	beq.n	80048c6 <_printf_i+0x162>
 800498a:	3501      	adds	r5, #1
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	9903      	ldr	r1, [sp, #12]
 8004990:	1a5b      	subs	r3, r3, r1
 8004992:	42ab      	cmp	r3, r5
 8004994:	dcf2      	bgt.n	800497c <_printf_i+0x218>
 8004996:	e7eb      	b.n	8004970 <_printf_i+0x20c>
 8004998:	2500      	movs	r5, #0
 800499a:	f104 0619 	add.w	r6, r4, #25
 800499e:	e7f5      	b.n	800498c <_printf_i+0x228>
 80049a0:	08006d3c 	.word	0x08006d3c
 80049a4:	08006d4d 	.word	0x08006d4d

080049a8 <std>:
 80049a8:	2300      	movs	r3, #0
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	e9c0 3300 	strd	r3, r3, [r0]
 80049b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049b6:	6083      	str	r3, [r0, #8]
 80049b8:	8181      	strh	r1, [r0, #12]
 80049ba:	6643      	str	r3, [r0, #100]	; 0x64
 80049bc:	81c2      	strh	r2, [r0, #14]
 80049be:	6183      	str	r3, [r0, #24]
 80049c0:	4619      	mov	r1, r3
 80049c2:	2208      	movs	r2, #8
 80049c4:	305c      	adds	r0, #92	; 0x5c
 80049c6:	f000 faa5 	bl	8004f14 <memset>
 80049ca:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <std+0x58>)
 80049cc:	6224      	str	r4, [r4, #32]
 80049ce:	6263      	str	r3, [r4, #36]	; 0x24
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <std+0x5c>)
 80049d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <std+0x60>)
 80049d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <std+0x64>)
 80049da:	6323      	str	r3, [r4, #48]	; 0x30
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <std+0x68>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d006      	beq.n	80049f0 <std+0x48>
 80049e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049e6:	4294      	cmp	r4, r2
 80049e8:	d002      	beq.n	80049f0 <std+0x48>
 80049ea:	33d0      	adds	r3, #208	; 0xd0
 80049ec:	429c      	cmp	r4, r3
 80049ee:	d105      	bne.n	80049fc <std+0x54>
 80049f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f8:	f000 bb08 	b.w	800500c <__retarget_lock_init_recursive>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	bf00      	nop
 8004a00:	08004d65 	.word	0x08004d65
 8004a04:	08004d87 	.word	0x08004d87
 8004a08:	08004dbf 	.word	0x08004dbf
 8004a0c:	08004de3 	.word	0x08004de3
 8004a10:	20000374 	.word	0x20000374

08004a14 <stdio_exit_handler>:
 8004a14:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <stdio_exit_handler+0xc>)
 8004a16:	4903      	ldr	r1, [pc, #12]	; (8004a24 <stdio_exit_handler+0x10>)
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <stdio_exit_handler+0x14>)
 8004a1a:	f000 b869 	b.w	8004af0 <_fwalk_sglue>
 8004a1e:	bf00      	nop
 8004a20:	20000034 	.word	0x20000034
 8004a24:	08006979 	.word	0x08006979
 8004a28:	20000040 	.word	0x20000040

08004a2c <cleanup_stdio>:
 8004a2c:	6841      	ldr	r1, [r0, #4]
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <cleanup_stdio+0x34>)
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4299      	cmp	r1, r3
 8004a34:	4604      	mov	r4, r0
 8004a36:	d001      	beq.n	8004a3c <cleanup_stdio+0x10>
 8004a38:	f001 ff9e 	bl	8006978 <_fflush_r>
 8004a3c:	68a1      	ldr	r1, [r4, #8]
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <cleanup_stdio+0x38>)
 8004a40:	4299      	cmp	r1, r3
 8004a42:	d002      	beq.n	8004a4a <cleanup_stdio+0x1e>
 8004a44:	4620      	mov	r0, r4
 8004a46:	f001 ff97 	bl	8006978 <_fflush_r>
 8004a4a:	68e1      	ldr	r1, [r4, #12]
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <cleanup_stdio+0x3c>)
 8004a4e:	4299      	cmp	r1, r3
 8004a50:	d004      	beq.n	8004a5c <cleanup_stdio+0x30>
 8004a52:	4620      	mov	r0, r4
 8004a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a58:	f001 bf8e 	b.w	8006978 <_fflush_r>
 8004a5c:	bd10      	pop	{r4, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000374 	.word	0x20000374
 8004a64:	200003dc 	.word	0x200003dc
 8004a68:	20000444 	.word	0x20000444

08004a6c <global_stdio_init.part.0>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <global_stdio_init.part.0+0x30>)
 8004a70:	4c0b      	ldr	r4, [pc, #44]	; (8004aa0 <global_stdio_init.part.0+0x34>)
 8004a72:	4a0c      	ldr	r2, [pc, #48]	; (8004aa4 <global_stdio_init.part.0+0x38>)
 8004a74:	4620      	mov	r0, r4
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	2104      	movs	r1, #4
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f7ff ff94 	bl	80049a8 <std>
 8004a80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a84:	2201      	movs	r2, #1
 8004a86:	2109      	movs	r1, #9
 8004a88:	f7ff ff8e 	bl	80049a8 <std>
 8004a8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a90:	2202      	movs	r2, #2
 8004a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a96:	2112      	movs	r1, #18
 8004a98:	f7ff bf86 	b.w	80049a8 <std>
 8004a9c:	200004ac 	.word	0x200004ac
 8004aa0:	20000374 	.word	0x20000374
 8004aa4:	08004a15 	.word	0x08004a15

08004aa8 <__sfp_lock_acquire>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sfp_lock_acquire+0x8>)
 8004aaa:	f000 bab0 	b.w	800500e <__retarget_lock_acquire_recursive>
 8004aae:	bf00      	nop
 8004ab0:	200004b5 	.word	0x200004b5

08004ab4 <__sfp_lock_release>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sfp_lock_release+0x8>)
 8004ab6:	f000 baab 	b.w	8005010 <__retarget_lock_release_recursive>
 8004aba:	bf00      	nop
 8004abc:	200004b5 	.word	0x200004b5

08004ac0 <__sinit>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	f7ff fff0 	bl	8004aa8 <__sfp_lock_acquire>
 8004ac8:	6a23      	ldr	r3, [r4, #32]
 8004aca:	b11b      	cbz	r3, 8004ad4 <__sinit+0x14>
 8004acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad0:	f7ff bff0 	b.w	8004ab4 <__sfp_lock_release>
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <__sinit+0x28>)
 8004ad6:	6223      	str	r3, [r4, #32]
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <__sinit+0x2c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f5      	bne.n	8004acc <__sinit+0xc>
 8004ae0:	f7ff ffc4 	bl	8004a6c <global_stdio_init.part.0>
 8004ae4:	e7f2      	b.n	8004acc <__sinit+0xc>
 8004ae6:	bf00      	nop
 8004ae8:	08004a2d 	.word	0x08004a2d
 8004aec:	200004ac 	.word	0x200004ac

08004af0 <_fwalk_sglue>:
 8004af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af4:	4607      	mov	r7, r0
 8004af6:	4688      	mov	r8, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	2600      	movs	r6, #0
 8004afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b00:	f1b9 0901 	subs.w	r9, r9, #1
 8004b04:	d505      	bpl.n	8004b12 <_fwalk_sglue+0x22>
 8004b06:	6824      	ldr	r4, [r4, #0]
 8004b08:	2c00      	cmp	r4, #0
 8004b0a:	d1f7      	bne.n	8004afc <_fwalk_sglue+0xc>
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b12:	89ab      	ldrh	r3, [r5, #12]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d907      	bls.n	8004b28 <_fwalk_sglue+0x38>
 8004b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	d003      	beq.n	8004b28 <_fwalk_sglue+0x38>
 8004b20:	4629      	mov	r1, r5
 8004b22:	4638      	mov	r0, r7
 8004b24:	47c0      	blx	r8
 8004b26:	4306      	orrs	r6, r0
 8004b28:	3568      	adds	r5, #104	; 0x68
 8004b2a:	e7e9      	b.n	8004b00 <_fwalk_sglue+0x10>

08004b2c <iprintf>:
 8004b2c:	b40f      	push	{r0, r1, r2, r3}
 8004b2e:	b507      	push	{r0, r1, r2, lr}
 8004b30:	4906      	ldr	r1, [pc, #24]	; (8004b4c <iprintf+0x20>)
 8004b32:	ab04      	add	r3, sp, #16
 8004b34:	6808      	ldr	r0, [r1, #0]
 8004b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3a:	6881      	ldr	r1, [r0, #8]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	f001 fd7f 	bl	8006640 <_vfiprintf_r>
 8004b42:	b003      	add	sp, #12
 8004b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b48:	b004      	add	sp, #16
 8004b4a:	4770      	bx	lr
 8004b4c:	2000008c 	.word	0x2000008c

08004b50 <_puts_r>:
 8004b50:	6a03      	ldr	r3, [r0, #32]
 8004b52:	b570      	push	{r4, r5, r6, lr}
 8004b54:	4605      	mov	r5, r0
 8004b56:	460e      	mov	r6, r1
 8004b58:	6884      	ldr	r4, [r0, #8]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <_puts_r+0x10>
 8004b5c:	f7ff ffb0 	bl	8004ac0 <__sinit>
 8004b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b62:	07db      	lsls	r3, r3, #31
 8004b64:	d405      	bmi.n	8004b72 <_puts_r+0x22>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	0598      	lsls	r0, r3, #22
 8004b6a:	d402      	bmi.n	8004b72 <_puts_r+0x22>
 8004b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b6e:	f000 fa4e 	bl	800500e <__retarget_lock_acquire_recursive>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	0719      	lsls	r1, r3, #28
 8004b76:	d513      	bpl.n	8004ba0 <_puts_r+0x50>
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	b18b      	cbz	r3, 8004ba0 <_puts_r+0x50>
 8004b7c:	3e01      	subs	r6, #1
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b84:	3b01      	subs	r3, #1
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	b9e9      	cbnz	r1, 8004bc6 <_puts_r+0x76>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da2e      	bge.n	8004bec <_puts_r+0x9c>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	210a      	movs	r1, #10
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 f929 	bl	8004dea <__swbuf_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d007      	beq.n	8004bac <_puts_r+0x5c>
 8004b9c:	250a      	movs	r5, #10
 8004b9e:	e007      	b.n	8004bb0 <_puts_r+0x60>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 f95e 	bl	8004e64 <__swsetup_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d0e7      	beq.n	8004b7c <_puts_r+0x2c>
 8004bac:	f04f 35ff 	mov.w	r5, #4294967295
 8004bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bb2:	07da      	lsls	r2, r3, #31
 8004bb4:	d405      	bmi.n	8004bc2 <_puts_r+0x72>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	059b      	lsls	r3, r3, #22
 8004bba:	d402      	bmi.n	8004bc2 <_puts_r+0x72>
 8004bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bbe:	f000 fa27 	bl	8005010 <__retarget_lock_release_recursive>
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da04      	bge.n	8004bd4 <_puts_r+0x84>
 8004bca:	69a2      	ldr	r2, [r4, #24]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	dc06      	bgt.n	8004bde <_puts_r+0x8e>
 8004bd0:	290a      	cmp	r1, #10
 8004bd2:	d004      	beq.n	8004bde <_puts_r+0x8e>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	7019      	strb	r1, [r3, #0]
 8004bdc:	e7cf      	b.n	8004b7e <_puts_r+0x2e>
 8004bde:	4622      	mov	r2, r4
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 f902 	bl	8004dea <__swbuf_r>
 8004be6:	3001      	adds	r0, #1
 8004be8:	d1c9      	bne.n	8004b7e <_puts_r+0x2e>
 8004bea:	e7df      	b.n	8004bac <_puts_r+0x5c>
 8004bec:	250a      	movs	r5, #10
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	701d      	strb	r5, [r3, #0]
 8004bf6:	e7db      	b.n	8004bb0 <_puts_r+0x60>

08004bf8 <puts>:
 8004bf8:	4b02      	ldr	r3, [pc, #8]	; (8004c04 <puts+0xc>)
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f7ff bfa7 	b.w	8004b50 <_puts_r>
 8004c02:	bf00      	nop
 8004c04:	2000008c 	.word	0x2000008c

08004c08 <setvbuf>:
 8004c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c0c:	461d      	mov	r5, r3
 8004c0e:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <setvbuf+0x158>)
 8004c10:	4604      	mov	r4, r0
 8004c12:	681f      	ldr	r7, [r3, #0]
 8004c14:	460e      	mov	r6, r1
 8004c16:	4690      	mov	r8, r2
 8004c18:	b127      	cbz	r7, 8004c24 <setvbuf+0x1c>
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	b913      	cbnz	r3, 8004c24 <setvbuf+0x1c>
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f7ff ff4e 	bl	8004ac0 <__sinit>
 8004c24:	f1b8 0f02 	cmp.w	r8, #2
 8004c28:	d006      	beq.n	8004c38 <setvbuf+0x30>
 8004c2a:	f1b8 0f01 	cmp.w	r8, #1
 8004c2e:	f200 8094 	bhi.w	8004d5a <setvbuf+0x152>
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	f2c0 8091 	blt.w	8004d5a <setvbuf+0x152>
 8004c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c3a:	07da      	lsls	r2, r3, #31
 8004c3c:	d405      	bmi.n	8004c4a <setvbuf+0x42>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	d402      	bmi.n	8004c4a <setvbuf+0x42>
 8004c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c46:	f000 f9e2 	bl	800500e <__retarget_lock_acquire_recursive>
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f001 fe93 	bl	8006978 <_fflush_r>
 8004c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c54:	b141      	cbz	r1, 8004c68 <setvbuf+0x60>
 8004c56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d002      	beq.n	8004c64 <setvbuf+0x5c>
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f001 f852 	bl	8005d08 <_free_r>
 8004c64:	2300      	movs	r3, #0
 8004c66:	6363      	str	r3, [r4, #52]	; 0x34
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61a3      	str	r3, [r4, #24]
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	0618      	lsls	r0, r3, #24
 8004c72:	d503      	bpl.n	8004c7c <setvbuf+0x74>
 8004c74:	4638      	mov	r0, r7
 8004c76:	6921      	ldr	r1, [r4, #16]
 8004c78:	f001 f846 	bl	8005d08 <_free_r>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f1b8 0f02 	cmp.w	r8, #2
 8004c82:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	d05f      	beq.n	8004d4e <setvbuf+0x146>
 8004c8e:	ab01      	add	r3, sp, #4
 8004c90:	466a      	mov	r2, sp
 8004c92:	4621      	mov	r1, r4
 8004c94:	4638      	mov	r0, r7
 8004c96:	f001 fe97 	bl	80069c8 <__swhatbuf_r>
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	4318      	orrs	r0, r3
 8004c9e:	81a0      	strh	r0, [r4, #12]
 8004ca0:	bb2d      	cbnz	r5, 8004cee <setvbuf+0xe6>
 8004ca2:	9d00      	ldr	r5, [sp, #0]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f001 f877 	bl	8005d98 <malloc>
 8004caa:	4606      	mov	r6, r0
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d150      	bne.n	8004d52 <setvbuf+0x14a>
 8004cb0:	f8dd 9000 	ldr.w	r9, [sp]
 8004cb4:	45a9      	cmp	r9, r5
 8004cb6:	d13e      	bne.n	8004d36 <setvbuf+0x12e>
 8004cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	60a2      	str	r2, [r4, #8]
 8004cc0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004cc4:	6022      	str	r2, [r4, #0]
 8004cc6:	6122      	str	r2, [r4, #16]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cce:	6162      	str	r2, [r4, #20]
 8004cd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cd2:	f043 0302 	orr.w	r3, r3, #2
 8004cd6:	07d1      	lsls	r1, r2, #31
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	d404      	bmi.n	8004ce6 <setvbuf+0xde>
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	d402      	bmi.n	8004ce6 <setvbuf+0xde>
 8004ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ce2:	f000 f995 	bl	8005010 <__retarget_lock_release_recursive>
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	b003      	add	sp, #12
 8004cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cee:	2e00      	cmp	r6, #0
 8004cf0:	d0d8      	beq.n	8004ca4 <setvbuf+0x9c>
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	b913      	cbnz	r3, 8004cfc <setvbuf+0xf4>
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	f7ff fee2 	bl	8004ac0 <__sinit>
 8004cfc:	f1b8 0f01 	cmp.w	r8, #1
 8004d00:	bf08      	it	eq
 8004d02:	89a3      	ldrheq	r3, [r4, #12]
 8004d04:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004d08:	bf04      	itt	eq
 8004d0a:	f043 0301 	orreq.w	r3, r3, #1
 8004d0e:	81a3      	strheq	r3, [r4, #12]
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	6026      	str	r6, [r4, #0]
 8004d14:	f013 0208 	ands.w	r2, r3, #8
 8004d18:	d01d      	beq.n	8004d56 <setvbuf+0x14e>
 8004d1a:	07da      	lsls	r2, r3, #31
 8004d1c:	bf41      	itttt	mi
 8004d1e:	2200      	movmi	r2, #0
 8004d20:	426d      	negmi	r5, r5
 8004d22:	60a2      	strmi	r2, [r4, #8]
 8004d24:	61a5      	strmi	r5, [r4, #24]
 8004d26:	bf58      	it	pl
 8004d28:	60a5      	strpl	r5, [r4, #8]
 8004d2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004d2c:	f015 0501 	ands.w	r5, r5, #1
 8004d30:	d0d4      	beq.n	8004cdc <setvbuf+0xd4>
 8004d32:	2500      	movs	r5, #0
 8004d34:	e7d7      	b.n	8004ce6 <setvbuf+0xde>
 8004d36:	4648      	mov	r0, r9
 8004d38:	f001 f82e 	bl	8005d98 <malloc>
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d0ba      	beq.n	8004cb8 <setvbuf+0xb0>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	464d      	mov	r5, r9
 8004d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4a:	81a3      	strh	r3, [r4, #12]
 8004d4c:	e7d1      	b.n	8004cf2 <setvbuf+0xea>
 8004d4e:	2500      	movs	r5, #0
 8004d50:	e7b4      	b.n	8004cbc <setvbuf+0xb4>
 8004d52:	46a9      	mov	r9, r5
 8004d54:	e7f5      	b.n	8004d42 <setvbuf+0x13a>
 8004d56:	60a2      	str	r2, [r4, #8]
 8004d58:	e7e7      	b.n	8004d2a <setvbuf+0x122>
 8004d5a:	f04f 35ff 	mov.w	r5, #4294967295
 8004d5e:	e7c2      	b.n	8004ce6 <setvbuf+0xde>
 8004d60:	2000008c 	.word	0x2000008c

08004d64 <__sread>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	460c      	mov	r4, r1
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	f000 f900 	bl	8004f70 <_read_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	bfab      	itete	ge
 8004d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d76:	89a3      	ldrhlt	r3, [r4, #12]
 8004d78:	181b      	addge	r3, r3, r0
 8004d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d7e:	bfac      	ite	ge
 8004d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d82:	81a3      	strhlt	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__swrite>:
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	898b      	ldrh	r3, [r1, #12]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	460c      	mov	r4, r1
 8004d94:	4616      	mov	r6, r2
 8004d96:	d505      	bpl.n	8004da4 <__swrite+0x1e>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	f000 f8d4 	bl	8004f4c <_lseek_r>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	4632      	mov	r2, r6
 8004da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	4628      	mov	r0, r5
 8004db0:	463b      	mov	r3, r7
 8004db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	f000 b8eb 	b.w	8004f94 <_write_r>

08004dbe <__sseek>:
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc6:	f000 f8c1 	bl	8004f4c <_lseek_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	bf15      	itete	ne
 8004dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dda:	81a3      	strheq	r3, [r4, #12]
 8004ddc:	bf18      	it	ne
 8004dde:	81a3      	strhne	r3, [r4, #12]
 8004de0:	bd10      	pop	{r4, pc}

08004de2 <__sclose>:
 8004de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de6:	f000 b8a1 	b.w	8004f2c <_close_r>

08004dea <__swbuf_r>:
 8004dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dec:	460e      	mov	r6, r1
 8004dee:	4614      	mov	r4, r2
 8004df0:	4605      	mov	r5, r0
 8004df2:	b118      	cbz	r0, 8004dfc <__swbuf_r+0x12>
 8004df4:	6a03      	ldr	r3, [r0, #32]
 8004df6:	b90b      	cbnz	r3, 8004dfc <__swbuf_r+0x12>
 8004df8:	f7ff fe62 	bl	8004ac0 <__sinit>
 8004dfc:	69a3      	ldr	r3, [r4, #24]
 8004dfe:	60a3      	str	r3, [r4, #8]
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	071a      	lsls	r2, r3, #28
 8004e04:	d525      	bpl.n	8004e52 <__swbuf_r+0x68>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	b31b      	cbz	r3, 8004e52 <__swbuf_r+0x68>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	6922      	ldr	r2, [r4, #16]
 8004e0e:	b2f6      	uxtb	r6, r6
 8004e10:	1a98      	subs	r0, r3, r2
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	4637      	mov	r7, r6
 8004e16:	4283      	cmp	r3, r0
 8004e18:	dc04      	bgt.n	8004e24 <__swbuf_r+0x3a>
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f001 fdab 	bl	8006978 <_fflush_r>
 8004e22:	b9e0      	cbnz	r0, 8004e5e <__swbuf_r+0x74>
 8004e24:	68a3      	ldr	r3, [r4, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	60a3      	str	r3, [r4, #8]
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	6022      	str	r2, [r4, #0]
 8004e30:	701e      	strb	r6, [r3, #0]
 8004e32:	6962      	ldr	r2, [r4, #20]
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d004      	beq.n	8004e44 <__swbuf_r+0x5a>
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	07db      	lsls	r3, r3, #31
 8004e3e:	d506      	bpl.n	8004e4e <__swbuf_r+0x64>
 8004e40:	2e0a      	cmp	r6, #10
 8004e42:	d104      	bne.n	8004e4e <__swbuf_r+0x64>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f001 fd96 	bl	8006978 <_fflush_r>
 8004e4c:	b938      	cbnz	r0, 8004e5e <__swbuf_r+0x74>
 8004e4e:	4638      	mov	r0, r7
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 f805 	bl	8004e64 <__swsetup_r>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d0d5      	beq.n	8004e0a <__swbuf_r+0x20>
 8004e5e:	f04f 37ff 	mov.w	r7, #4294967295
 8004e62:	e7f4      	b.n	8004e4e <__swbuf_r+0x64>

08004e64 <__swsetup_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4b2a      	ldr	r3, [pc, #168]	; (8004f10 <__swsetup_r+0xac>)
 8004e68:	4605      	mov	r5, r0
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	b118      	cbz	r0, 8004e78 <__swsetup_r+0x14>
 8004e70:	6a03      	ldr	r3, [r0, #32]
 8004e72:	b90b      	cbnz	r3, 8004e78 <__swsetup_r+0x14>
 8004e74:	f7ff fe24 	bl	8004ac0 <__sinit>
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e7e:	0718      	lsls	r0, r3, #28
 8004e80:	d422      	bmi.n	8004ec8 <__swsetup_r+0x64>
 8004e82:	06d9      	lsls	r1, r3, #27
 8004e84:	d407      	bmi.n	8004e96 <__swsetup_r+0x32>
 8004e86:	2309      	movs	r3, #9
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	e034      	b.n	8004f00 <__swsetup_r+0x9c>
 8004e96:	0758      	lsls	r0, r3, #29
 8004e98:	d512      	bpl.n	8004ec0 <__swsetup_r+0x5c>
 8004e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9c:	b141      	cbz	r1, 8004eb0 <__swsetup_r+0x4c>
 8004e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea2:	4299      	cmp	r1, r3
 8004ea4:	d002      	beq.n	8004eac <__swsetup_r+0x48>
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 ff2e 	bl	8005d08 <_free_r>
 8004eac:	2300      	movs	r3, #0
 8004eae:	6363      	str	r3, [r4, #52]	; 0x34
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f043 0308 	orr.w	r3, r3, #8
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	b94b      	cbnz	r3, 8004ee0 <__swsetup_r+0x7c>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed6:	d003      	beq.n	8004ee0 <__swsetup_r+0x7c>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f001 fd99 	bl	8006a12 <__smakebuf_r>
 8004ee0:	89a0      	ldrh	r0, [r4, #12]
 8004ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ee6:	f010 0301 	ands.w	r3, r0, #1
 8004eea:	d00a      	beq.n	8004f02 <__swsetup_r+0x9e>
 8004eec:	2300      	movs	r3, #0
 8004eee:	60a3      	str	r3, [r4, #8]
 8004ef0:	6963      	ldr	r3, [r4, #20]
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	61a3      	str	r3, [r4, #24]
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	b943      	cbnz	r3, 8004f0c <__swsetup_r+0xa8>
 8004efa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004efe:	d1c4      	bne.n	8004e8a <__swsetup_r+0x26>
 8004f00:	bd38      	pop	{r3, r4, r5, pc}
 8004f02:	0781      	lsls	r1, r0, #30
 8004f04:	bf58      	it	pl
 8004f06:	6963      	ldrpl	r3, [r4, #20]
 8004f08:	60a3      	str	r3, [r4, #8]
 8004f0a:	e7f4      	b.n	8004ef6 <__swsetup_r+0x92>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e7f7      	b.n	8004f00 <__swsetup_r+0x9c>
 8004f10:	2000008c 	.word	0x2000008c

08004f14 <memset>:
 8004f14:	4603      	mov	r3, r0
 8004f16:	4402      	add	r2, r0
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d100      	bne.n	8004f1e <memset+0xa>
 8004f1c:	4770      	bx	lr
 8004f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f22:	e7f9      	b.n	8004f18 <memset+0x4>

08004f24 <_localeconv_r>:
 8004f24:	4800      	ldr	r0, [pc, #0]	; (8004f28 <_localeconv_r+0x4>)
 8004f26:	4770      	bx	lr
 8004f28:	20000180 	.word	0x20000180

08004f2c <_close_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4d05      	ldr	r5, [pc, #20]	; (8004f48 <_close_r+0x1c>)
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	602b      	str	r3, [r5, #0]
 8004f38:	f7fc fbe0 	bl	80016fc <_close>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_close_r+0x1a>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_close_r+0x1a>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200004b0 	.word	0x200004b0

08004f4c <_lseek_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	2200      	movs	r2, #0
 8004f56:	4d05      	ldr	r5, [pc, #20]	; (8004f6c <_lseek_r+0x20>)
 8004f58:	602a      	str	r2, [r5, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f7fc fbf2 	bl	8001744 <_lseek>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_lseek_r+0x1e>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_lseek_r+0x1e>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	200004b0 	.word	0x200004b0

08004f70 <_read_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4d05      	ldr	r5, [pc, #20]	; (8004f90 <_read_r+0x20>)
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f7fc fb9f 	bl	80016c2 <_read>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_read_r+0x1e>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_read_r+0x1e>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	200004b0 	.word	0x200004b0

08004f94 <_write_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4d05      	ldr	r5, [pc, #20]	; (8004fb4 <_write_r+0x20>)
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fb fe4e 	bl	8000c44 <_write>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_write_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_write_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	200004b0 	.word	0x200004b0

08004fb8 <__errno>:
 8004fb8:	4b01      	ldr	r3, [pc, #4]	; (8004fc0 <__errno+0x8>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	2000008c 	.word	0x2000008c

08004fc4 <__libc_init_array>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	4d0c      	ldr	r5, [pc, #48]	; (8004ffc <__libc_init_array+0x38>)
 8004fca:	4c0d      	ldr	r4, [pc, #52]	; (8005000 <__libc_init_array+0x3c>)
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	42a6      	cmp	r6, r4
 8004fd2:	d109      	bne.n	8004fe8 <__libc_init_array+0x24>
 8004fd4:	f001 fe4a 	bl	8006c6c <_init>
 8004fd8:	2600      	movs	r6, #0
 8004fda:	4d0a      	ldr	r5, [pc, #40]	; (8005004 <__libc_init_array+0x40>)
 8004fdc:	4c0a      	ldr	r4, [pc, #40]	; (8005008 <__libc_init_array+0x44>)
 8004fde:	1b64      	subs	r4, r4, r5
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	42a6      	cmp	r6, r4
 8004fe4:	d105      	bne.n	8004ff2 <__libc_init_array+0x2e>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fec:	4798      	blx	r3
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7ee      	b.n	8004fd0 <__libc_init_array+0xc>
 8004ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff6:	4798      	blx	r3
 8004ff8:	3601      	adds	r6, #1
 8004ffa:	e7f2      	b.n	8004fe2 <__libc_init_array+0x1e>
 8004ffc:	0800709c 	.word	0x0800709c
 8005000:	0800709c 	.word	0x0800709c
 8005004:	0800709c 	.word	0x0800709c
 8005008:	080070a0 	.word	0x080070a0

0800500c <__retarget_lock_init_recursive>:
 800500c:	4770      	bx	lr

0800500e <__retarget_lock_acquire_recursive>:
 800500e:	4770      	bx	lr

08005010 <__retarget_lock_release_recursive>:
 8005010:	4770      	bx	lr

08005012 <memchr>:
 8005012:	4603      	mov	r3, r0
 8005014:	b510      	push	{r4, lr}
 8005016:	b2c9      	uxtb	r1, r1
 8005018:	4402      	add	r2, r0
 800501a:	4293      	cmp	r3, r2
 800501c:	4618      	mov	r0, r3
 800501e:	d101      	bne.n	8005024 <memchr+0x12>
 8005020:	2000      	movs	r0, #0
 8005022:	e003      	b.n	800502c <memchr+0x1a>
 8005024:	7804      	ldrb	r4, [r0, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	428c      	cmp	r4, r1
 800502a:	d1f6      	bne.n	800501a <memchr+0x8>
 800502c:	bd10      	pop	{r4, pc}

0800502e <quorem>:
 800502e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005032:	6903      	ldr	r3, [r0, #16]
 8005034:	690c      	ldr	r4, [r1, #16]
 8005036:	4607      	mov	r7, r0
 8005038:	42a3      	cmp	r3, r4
 800503a:	db7f      	blt.n	800513c <quorem+0x10e>
 800503c:	3c01      	subs	r4, #1
 800503e:	f100 0514 	add.w	r5, r0, #20
 8005042:	f101 0814 	add.w	r8, r1, #20
 8005046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005054:	3301      	adds	r3, #1
 8005056:	429a      	cmp	r2, r3
 8005058:	fbb2 f6f3 	udiv	r6, r2, r3
 800505c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005064:	d331      	bcc.n	80050ca <quorem+0x9c>
 8005066:	f04f 0e00 	mov.w	lr, #0
 800506a:	4640      	mov	r0, r8
 800506c:	46ac      	mov	ip, r5
 800506e:	46f2      	mov	sl, lr
 8005070:	f850 2b04 	ldr.w	r2, [r0], #4
 8005074:	b293      	uxth	r3, r2
 8005076:	fb06 e303 	mla	r3, r6, r3, lr
 800507a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800507e:	0c1a      	lsrs	r2, r3, #16
 8005080:	b29b      	uxth	r3, r3
 8005082:	fb06 220e 	mla	r2, r6, lr, r2
 8005086:	ebaa 0303 	sub.w	r3, sl, r3
 800508a:	f8dc a000 	ldr.w	sl, [ip]
 800508e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005092:	fa1f fa8a 	uxth.w	sl, sl
 8005096:	4453      	add	r3, sl
 8005098:	f8dc a000 	ldr.w	sl, [ip]
 800509c:	b292      	uxth	r2, r2
 800509e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ac:	4581      	cmp	r9, r0
 80050ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050b2:	f84c 3b04 	str.w	r3, [ip], #4
 80050b6:	d2db      	bcs.n	8005070 <quorem+0x42>
 80050b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80050bc:	b92b      	cbnz	r3, 80050ca <quorem+0x9c>
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	3b04      	subs	r3, #4
 80050c2:	429d      	cmp	r5, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	d32d      	bcc.n	8005124 <quorem+0xf6>
 80050c8:	613c      	str	r4, [r7, #16]
 80050ca:	4638      	mov	r0, r7
 80050cc:	f001 f992 	bl	80063f4 <__mcmp>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	db23      	blt.n	800511c <quorem+0xee>
 80050d4:	4629      	mov	r1, r5
 80050d6:	2000      	movs	r0, #0
 80050d8:	3601      	adds	r6, #1
 80050da:	f858 2b04 	ldr.w	r2, [r8], #4
 80050de:	f8d1 c000 	ldr.w	ip, [r1]
 80050e2:	b293      	uxth	r3, r2
 80050e4:	1ac3      	subs	r3, r0, r3
 80050e6:	0c12      	lsrs	r2, r2, #16
 80050e8:	fa1f f08c 	uxth.w	r0, ip
 80050ec:	4403      	add	r3, r0
 80050ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050fc:	45c1      	cmp	r9, r8
 80050fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005102:	f841 3b04 	str.w	r3, [r1], #4
 8005106:	d2e8      	bcs.n	80050da <quorem+0xac>
 8005108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800510c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005110:	b922      	cbnz	r2, 800511c <quorem+0xee>
 8005112:	3b04      	subs	r3, #4
 8005114:	429d      	cmp	r5, r3
 8005116:	461a      	mov	r2, r3
 8005118:	d30a      	bcc.n	8005130 <quorem+0x102>
 800511a:	613c      	str	r4, [r7, #16]
 800511c:	4630      	mov	r0, r6
 800511e:	b003      	add	sp, #12
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	3b04      	subs	r3, #4
 8005128:	2a00      	cmp	r2, #0
 800512a:	d1cd      	bne.n	80050c8 <quorem+0x9a>
 800512c:	3c01      	subs	r4, #1
 800512e:	e7c8      	b.n	80050c2 <quorem+0x94>
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	3b04      	subs	r3, #4
 8005134:	2a00      	cmp	r2, #0
 8005136:	d1f0      	bne.n	800511a <quorem+0xec>
 8005138:	3c01      	subs	r4, #1
 800513a:	e7eb      	b.n	8005114 <quorem+0xe6>
 800513c:	2000      	movs	r0, #0
 800513e:	e7ee      	b.n	800511e <quorem+0xf0>

08005140 <_dtoa_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4616      	mov	r6, r2
 8005146:	461f      	mov	r7, r3
 8005148:	69c4      	ldr	r4, [r0, #28]
 800514a:	b099      	sub	sp, #100	; 0x64
 800514c:	4605      	mov	r5, r0
 800514e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005152:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005156:	b974      	cbnz	r4, 8005176 <_dtoa_r+0x36>
 8005158:	2010      	movs	r0, #16
 800515a:	f000 fe1d 	bl	8005d98 <malloc>
 800515e:	4602      	mov	r2, r0
 8005160:	61e8      	str	r0, [r5, #28]
 8005162:	b920      	cbnz	r0, 800516e <_dtoa_r+0x2e>
 8005164:	21ef      	movs	r1, #239	; 0xef
 8005166:	4bac      	ldr	r3, [pc, #688]	; (8005418 <_dtoa_r+0x2d8>)
 8005168:	48ac      	ldr	r0, [pc, #688]	; (800541c <_dtoa_r+0x2dc>)
 800516a:	f001 fccf 	bl	8006b0c <__assert_func>
 800516e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005172:	6004      	str	r4, [r0, #0]
 8005174:	60c4      	str	r4, [r0, #12]
 8005176:	69eb      	ldr	r3, [r5, #28]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	b151      	cbz	r1, 8005192 <_dtoa_r+0x52>
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	2301      	movs	r3, #1
 8005180:	4093      	lsls	r3, r2
 8005182:	604a      	str	r2, [r1, #4]
 8005184:	608b      	str	r3, [r1, #8]
 8005186:	4628      	mov	r0, r5
 8005188:	f000 fefa 	bl	8005f80 <_Bfree>
 800518c:	2200      	movs	r2, #0
 800518e:	69eb      	ldr	r3, [r5, #28]
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	1e3b      	subs	r3, r7, #0
 8005194:	bfaf      	iteee	ge
 8005196:	2300      	movge	r3, #0
 8005198:	2201      	movlt	r2, #1
 800519a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800519e:	9305      	strlt	r3, [sp, #20]
 80051a0:	bfa8      	it	ge
 80051a2:	f8c8 3000 	strge.w	r3, [r8]
 80051a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051aa:	4b9d      	ldr	r3, [pc, #628]	; (8005420 <_dtoa_r+0x2e0>)
 80051ac:	bfb8      	it	lt
 80051ae:	f8c8 2000 	strlt.w	r2, [r8]
 80051b2:	ea33 0309 	bics.w	r3, r3, r9
 80051b6:	d119      	bne.n	80051ec <_dtoa_r+0xac>
 80051b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80051bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051c4:	4333      	orrs	r3, r6
 80051c6:	f000 8589 	beq.w	8005cdc <_dtoa_r+0xb9c>
 80051ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051cc:	b953      	cbnz	r3, 80051e4 <_dtoa_r+0xa4>
 80051ce:	4b95      	ldr	r3, [pc, #596]	; (8005424 <_dtoa_r+0x2e4>)
 80051d0:	e023      	b.n	800521a <_dtoa_r+0xda>
 80051d2:	4b95      	ldr	r3, [pc, #596]	; (8005428 <_dtoa_r+0x2e8>)
 80051d4:	9303      	str	r3, [sp, #12]
 80051d6:	3308      	adds	r3, #8
 80051d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	9803      	ldr	r0, [sp, #12]
 80051de:	b019      	add	sp, #100	; 0x64
 80051e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e4:	4b8f      	ldr	r3, [pc, #572]	; (8005424 <_dtoa_r+0x2e4>)
 80051e6:	9303      	str	r3, [sp, #12]
 80051e8:	3303      	adds	r3, #3
 80051ea:	e7f5      	b.n	80051d8 <_dtoa_r+0x98>
 80051ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80051f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f8:	2200      	movs	r2, #0
 80051fa:	2300      	movs	r3, #0
 80051fc:	f7fb fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8005200:	4680      	mov	r8, r0
 8005202:	b160      	cbz	r0, 800521e <_dtoa_r+0xde>
 8005204:	2301      	movs	r3, #1
 8005206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8562 	beq.w	8005cd6 <_dtoa_r+0xb96>
 8005212:	4b86      	ldr	r3, [pc, #536]	; (800542c <_dtoa_r+0x2ec>)
 8005214:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	9303      	str	r3, [sp, #12]
 800521c:	e7de      	b.n	80051dc <_dtoa_r+0x9c>
 800521e:	ab16      	add	r3, sp, #88	; 0x58
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	ab17      	add	r3, sp, #92	; 0x5c
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4628      	mov	r0, r5
 8005228:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800522c:	f001 f98a 	bl	8006544 <__d2b>
 8005230:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005234:	4682      	mov	sl, r0
 8005236:	2c00      	cmp	r4, #0
 8005238:	d07e      	beq.n	8005338 <_dtoa_r+0x1f8>
 800523a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800523e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005240:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005248:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800524c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005250:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005254:	4619      	mov	r1, r3
 8005256:	2200      	movs	r2, #0
 8005258:	4b75      	ldr	r3, [pc, #468]	; (8005430 <_dtoa_r+0x2f0>)
 800525a:	f7fa ff85 	bl	8000168 <__aeabi_dsub>
 800525e:	a368      	add	r3, pc, #416	; (adr r3, 8005400 <_dtoa_r+0x2c0>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fb f938 	bl	80004d8 <__aeabi_dmul>
 8005268:	a367      	add	r3, pc, #412	; (adr r3, 8005408 <_dtoa_r+0x2c8>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fa ff7d 	bl	800016c <__adddf3>
 8005272:	4606      	mov	r6, r0
 8005274:	4620      	mov	r0, r4
 8005276:	460f      	mov	r7, r1
 8005278:	f7fb f8c4 	bl	8000404 <__aeabi_i2d>
 800527c:	a364      	add	r3, pc, #400	; (adr r3, 8005410 <_dtoa_r+0x2d0>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fb f929 	bl	80004d8 <__aeabi_dmul>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fa ff6d 	bl	800016c <__adddf3>
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	f7fb fbcf 	bl	8000a38 <__aeabi_d2iz>
 800529a:	2200      	movs	r2, #0
 800529c:	4683      	mov	fp, r0
 800529e:	2300      	movs	r3, #0
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fb8a 	bl	80009bc <__aeabi_dcmplt>
 80052a8:	b148      	cbz	r0, 80052be <_dtoa_r+0x17e>
 80052aa:	4658      	mov	r0, fp
 80052ac:	f7fb f8aa 	bl	8000404 <__aeabi_i2d>
 80052b0:	4632      	mov	r2, r6
 80052b2:	463b      	mov	r3, r7
 80052b4:	f7fb fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80052b8:	b908      	cbnz	r0, 80052be <_dtoa_r+0x17e>
 80052ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052be:	f1bb 0f16 	cmp.w	fp, #22
 80052c2:	d857      	bhi.n	8005374 <_dtoa_r+0x234>
 80052c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052c8:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <_dtoa_r+0x2f4>)
 80052ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fb fb73 	bl	80009bc <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d04e      	beq.n	8005378 <_dtoa_r+0x238>
 80052da:	2300      	movs	r3, #0
 80052dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80052e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052e4:	1b1b      	subs	r3, r3, r4
 80052e6:	1e5a      	subs	r2, r3, #1
 80052e8:	bf46      	itte	mi
 80052ea:	f1c3 0901 	rsbmi	r9, r3, #1
 80052ee:	2300      	movmi	r3, #0
 80052f0:	f04f 0900 	movpl.w	r9, #0
 80052f4:	9209      	str	r2, [sp, #36]	; 0x24
 80052f6:	bf48      	it	mi
 80052f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80052fa:	f1bb 0f00 	cmp.w	fp, #0
 80052fe:	db3d      	blt.n	800537c <_dtoa_r+0x23c>
 8005300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005302:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005306:	445b      	add	r3, fp
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	2300      	movs	r3, #0
 800530c:	930a      	str	r3, [sp, #40]	; 0x28
 800530e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005310:	2b09      	cmp	r3, #9
 8005312:	d867      	bhi.n	80053e4 <_dtoa_r+0x2a4>
 8005314:	2b05      	cmp	r3, #5
 8005316:	bfc4      	itt	gt
 8005318:	3b04      	subgt	r3, #4
 800531a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800531c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800531e:	bfc8      	it	gt
 8005320:	2400      	movgt	r4, #0
 8005322:	f1a3 0302 	sub.w	r3, r3, #2
 8005326:	bfd8      	it	le
 8005328:	2401      	movle	r4, #1
 800532a:	2b03      	cmp	r3, #3
 800532c:	f200 8086 	bhi.w	800543c <_dtoa_r+0x2fc>
 8005330:	e8df f003 	tbb	[pc, r3]
 8005334:	5637392c 	.word	0x5637392c
 8005338:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800533c:	441c      	add	r4, r3
 800533e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005342:	2b20      	cmp	r3, #32
 8005344:	bfc1      	itttt	gt
 8005346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800534a:	fa09 f903 	lslgt.w	r9, r9, r3
 800534e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005352:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005356:	bfd6      	itet	le
 8005358:	f1c3 0320 	rsble	r3, r3, #32
 800535c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005360:	fa06 f003 	lslle.w	r0, r6, r3
 8005364:	f7fb f83e 	bl	80003e4 <__aeabi_ui2d>
 8005368:	2201      	movs	r2, #1
 800536a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800536e:	3c01      	subs	r4, #1
 8005370:	9213      	str	r2, [sp, #76]	; 0x4c
 8005372:	e76f      	b.n	8005254 <_dtoa_r+0x114>
 8005374:	2301      	movs	r3, #1
 8005376:	e7b3      	b.n	80052e0 <_dtoa_r+0x1a0>
 8005378:	900f      	str	r0, [sp, #60]	; 0x3c
 800537a:	e7b2      	b.n	80052e2 <_dtoa_r+0x1a2>
 800537c:	f1cb 0300 	rsb	r3, fp, #0
 8005380:	930a      	str	r3, [sp, #40]	; 0x28
 8005382:	2300      	movs	r3, #0
 8005384:	eba9 090b 	sub.w	r9, r9, fp
 8005388:	930e      	str	r3, [sp, #56]	; 0x38
 800538a:	e7c0      	b.n	800530e <_dtoa_r+0x1ce>
 800538c:	2300      	movs	r3, #0
 800538e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc55      	bgt.n	8005442 <_dtoa_r+0x302>
 8005396:	2301      	movs	r3, #1
 8005398:	461a      	mov	r2, r3
 800539a:	9306      	str	r3, [sp, #24]
 800539c:	9308      	str	r3, [sp, #32]
 800539e:	9223      	str	r2, [sp, #140]	; 0x8c
 80053a0:	e00b      	b.n	80053ba <_dtoa_r+0x27a>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e7f3      	b.n	800538e <_dtoa_r+0x24e>
 80053a6:	2300      	movs	r3, #0
 80053a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ac:	445b      	add	r3, fp
 80053ae:	9306      	str	r3, [sp, #24]
 80053b0:	3301      	adds	r3, #1
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	9308      	str	r3, [sp, #32]
 80053b6:	bfb8      	it	lt
 80053b8:	2301      	movlt	r3, #1
 80053ba:	2100      	movs	r1, #0
 80053bc:	2204      	movs	r2, #4
 80053be:	69e8      	ldr	r0, [r5, #28]
 80053c0:	f102 0614 	add.w	r6, r2, #20
 80053c4:	429e      	cmp	r6, r3
 80053c6:	d940      	bls.n	800544a <_dtoa_r+0x30a>
 80053c8:	6041      	str	r1, [r0, #4]
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 fd98 	bl	8005f00 <_Balloc>
 80053d0:	9003      	str	r0, [sp, #12]
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d13c      	bne.n	8005450 <_dtoa_r+0x310>
 80053d6:	4602      	mov	r2, r0
 80053d8:	f240 11af 	movw	r1, #431	; 0x1af
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <_dtoa_r+0x2f8>)
 80053de:	e6c3      	b.n	8005168 <_dtoa_r+0x28>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e7e1      	b.n	80053a8 <_dtoa_r+0x268>
 80053e4:	2401      	movs	r4, #1
 80053e6:	2300      	movs	r3, #0
 80053e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80053ea:	9322      	str	r3, [sp, #136]	; 0x88
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
 80053f0:	2200      	movs	r2, #0
 80053f2:	9306      	str	r3, [sp, #24]
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	2312      	movs	r3, #18
 80053f8:	e7d1      	b.n	800539e <_dtoa_r+0x25e>
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
 8005400:	636f4361 	.word	0x636f4361
 8005404:	3fd287a7 	.word	0x3fd287a7
 8005408:	8b60c8b3 	.word	0x8b60c8b3
 800540c:	3fc68a28 	.word	0x3fc68a28
 8005410:	509f79fb 	.word	0x509f79fb
 8005414:	3fd34413 	.word	0x3fd34413
 8005418:	08006d6b 	.word	0x08006d6b
 800541c:	08006d82 	.word	0x08006d82
 8005420:	7ff00000 	.word	0x7ff00000
 8005424:	08006d67 	.word	0x08006d67
 8005428:	08006d5e 	.word	0x08006d5e
 800542c:	08006d3b 	.word	0x08006d3b
 8005430:	3ff80000 	.word	0x3ff80000
 8005434:	08006e70 	.word	0x08006e70
 8005438:	08006dda 	.word	0x08006dda
 800543c:	2301      	movs	r3, #1
 800543e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005440:	e7d4      	b.n	80053ec <_dtoa_r+0x2ac>
 8005442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005444:	9306      	str	r3, [sp, #24]
 8005446:	9308      	str	r3, [sp, #32]
 8005448:	e7b7      	b.n	80053ba <_dtoa_r+0x27a>
 800544a:	3101      	adds	r1, #1
 800544c:	0052      	lsls	r2, r2, #1
 800544e:	e7b7      	b.n	80053c0 <_dtoa_r+0x280>
 8005450:	69eb      	ldr	r3, [r5, #28]
 8005452:	9a03      	ldr	r2, [sp, #12]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	2b0e      	cmp	r3, #14
 800545a:	f200 80a8 	bhi.w	80055ae <_dtoa_r+0x46e>
 800545e:	2c00      	cmp	r4, #0
 8005460:	f000 80a5 	beq.w	80055ae <_dtoa_r+0x46e>
 8005464:	f1bb 0f00 	cmp.w	fp, #0
 8005468:	dd34      	ble.n	80054d4 <_dtoa_r+0x394>
 800546a:	4b9a      	ldr	r3, [pc, #616]	; (80056d4 <_dtoa_r+0x594>)
 800546c:	f00b 020f 	and.w	r2, fp, #15
 8005470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800547c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005480:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005484:	d016      	beq.n	80054b4 <_dtoa_r+0x374>
 8005486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800548a:	4b93      	ldr	r3, [pc, #588]	; (80056d8 <_dtoa_r+0x598>)
 800548c:	2703      	movs	r7, #3
 800548e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005492:	f7fb f94b 	bl	800072c <__aeabi_ddiv>
 8005496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800549a:	f004 040f 	and.w	r4, r4, #15
 800549e:	4e8e      	ldr	r6, [pc, #568]	; (80056d8 <_dtoa_r+0x598>)
 80054a0:	b954      	cbnz	r4, 80054b8 <_dtoa_r+0x378>
 80054a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054aa:	f7fb f93f 	bl	800072c <__aeabi_ddiv>
 80054ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b2:	e029      	b.n	8005508 <_dtoa_r+0x3c8>
 80054b4:	2702      	movs	r7, #2
 80054b6:	e7f2      	b.n	800549e <_dtoa_r+0x35e>
 80054b8:	07e1      	lsls	r1, r4, #31
 80054ba:	d508      	bpl.n	80054ce <_dtoa_r+0x38e>
 80054bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054c4:	f7fb f808 	bl	80004d8 <__aeabi_dmul>
 80054c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054cc:	3701      	adds	r7, #1
 80054ce:	1064      	asrs	r4, r4, #1
 80054d0:	3608      	adds	r6, #8
 80054d2:	e7e5      	b.n	80054a0 <_dtoa_r+0x360>
 80054d4:	f000 80a5 	beq.w	8005622 <_dtoa_r+0x4e2>
 80054d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054dc:	f1cb 0400 	rsb	r4, fp, #0
 80054e0:	4b7c      	ldr	r3, [pc, #496]	; (80056d4 <_dtoa_r+0x594>)
 80054e2:	f004 020f 	and.w	r2, r4, #15
 80054e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f7fa fff3 	bl	80004d8 <__aeabi_dmul>
 80054f2:	2702      	movs	r7, #2
 80054f4:	2300      	movs	r3, #0
 80054f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054fa:	4e77      	ldr	r6, [pc, #476]	; (80056d8 <_dtoa_r+0x598>)
 80054fc:	1124      	asrs	r4, r4, #4
 80054fe:	2c00      	cmp	r4, #0
 8005500:	f040 8084 	bne.w	800560c <_dtoa_r+0x4cc>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1d2      	bne.n	80054ae <_dtoa_r+0x36e>
 8005508:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800550c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8087 	beq.w	8005626 <_dtoa_r+0x4e6>
 8005518:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800551c:	2200      	movs	r2, #0
 800551e:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <_dtoa_r+0x59c>)
 8005520:	f7fb fa4c 	bl	80009bc <__aeabi_dcmplt>
 8005524:	2800      	cmp	r0, #0
 8005526:	d07e      	beq.n	8005626 <_dtoa_r+0x4e6>
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d07b      	beq.n	8005626 <_dtoa_r+0x4e6>
 800552e:	9b06      	ldr	r3, [sp, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dd38      	ble.n	80055a6 <_dtoa_r+0x466>
 8005534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005538:	2200      	movs	r2, #0
 800553a:	4b69      	ldr	r3, [pc, #420]	; (80056e0 <_dtoa_r+0x5a0>)
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005544:	9c06      	ldr	r4, [sp, #24]
 8005546:	f10b 38ff 	add.w	r8, fp, #4294967295
 800554a:	3701      	adds	r7, #1
 800554c:	4638      	mov	r0, r7
 800554e:	f7fa ff59 	bl	8000404 <__aeabi_i2d>
 8005552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005556:	f7fa ffbf 	bl	80004d8 <__aeabi_dmul>
 800555a:	2200      	movs	r2, #0
 800555c:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <_dtoa_r+0x5a4>)
 800555e:	f7fa fe05 	bl	800016c <__adddf3>
 8005562:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556a:	9611      	str	r6, [sp, #68]	; 0x44
 800556c:	2c00      	cmp	r4, #0
 800556e:	d15d      	bne.n	800562c <_dtoa_r+0x4ec>
 8005570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005574:	2200      	movs	r2, #0
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <_dtoa_r+0x5a8>)
 8005578:	f7fa fdf6 	bl	8000168 <__aeabi_dsub>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005584:	4633      	mov	r3, r6
 8005586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005588:	f7fb fa36 	bl	80009f8 <__aeabi_dcmpgt>
 800558c:	2800      	cmp	r0, #0
 800558e:	f040 8295 	bne.w	8005abc <_dtoa_r+0x97c>
 8005592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800559c:	f7fb fa0e 	bl	80009bc <__aeabi_dcmplt>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f040 8289 	bne.w	8005ab8 <_dtoa_r+0x978>
 80055a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f2c0 8151 	blt.w	8005858 <_dtoa_r+0x718>
 80055b6:	f1bb 0f0e 	cmp.w	fp, #14
 80055ba:	f300 814d 	bgt.w	8005858 <_dtoa_r+0x718>
 80055be:	4b45      	ldr	r3, [pc, #276]	; (80056d4 <_dtoa_r+0x594>)
 80055c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f280 80da 	bge.w	8005788 <_dtoa_r+0x648>
 80055d4:	9b08      	ldr	r3, [sp, #32]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f300 80d6 	bgt.w	8005788 <_dtoa_r+0x648>
 80055dc:	f040 826b 	bne.w	8005ab6 <_dtoa_r+0x976>
 80055e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e4:	2200      	movs	r2, #0
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <_dtoa_r+0x5a8>)
 80055e8:	f7fa ff76 	bl	80004d8 <__aeabi_dmul>
 80055ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055f0:	f7fb f9f8 	bl	80009e4 <__aeabi_dcmpge>
 80055f4:	9c08      	ldr	r4, [sp, #32]
 80055f6:	4626      	mov	r6, r4
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f040 8241 	bne.w	8005a80 <_dtoa_r+0x940>
 80055fe:	2331      	movs	r3, #49	; 0x31
 8005600:	9f03      	ldr	r7, [sp, #12]
 8005602:	f10b 0b01 	add.w	fp, fp, #1
 8005606:	f807 3b01 	strb.w	r3, [r7], #1
 800560a:	e23d      	b.n	8005a88 <_dtoa_r+0x948>
 800560c:	07e2      	lsls	r2, r4, #31
 800560e:	d505      	bpl.n	800561c <_dtoa_r+0x4dc>
 8005610:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005614:	f7fa ff60 	bl	80004d8 <__aeabi_dmul>
 8005618:	2301      	movs	r3, #1
 800561a:	3701      	adds	r7, #1
 800561c:	1064      	asrs	r4, r4, #1
 800561e:	3608      	adds	r6, #8
 8005620:	e76d      	b.n	80054fe <_dtoa_r+0x3be>
 8005622:	2702      	movs	r7, #2
 8005624:	e770      	b.n	8005508 <_dtoa_r+0x3c8>
 8005626:	46d8      	mov	r8, fp
 8005628:	9c08      	ldr	r4, [sp, #32]
 800562a:	e78f      	b.n	800554c <_dtoa_r+0x40c>
 800562c:	9903      	ldr	r1, [sp, #12]
 800562e:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <_dtoa_r+0x594>)
 8005630:	4421      	add	r1, r4
 8005632:	9112      	str	r1, [sp, #72]	; 0x48
 8005634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005636:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800563a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800563e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005642:	2900      	cmp	r1, #0
 8005644:	d054      	beq.n	80056f0 <_dtoa_r+0x5b0>
 8005646:	2000      	movs	r0, #0
 8005648:	4928      	ldr	r1, [pc, #160]	; (80056ec <_dtoa_r+0x5ac>)
 800564a:	f7fb f86f 	bl	800072c <__aeabi_ddiv>
 800564e:	463b      	mov	r3, r7
 8005650:	4632      	mov	r2, r6
 8005652:	f7fa fd89 	bl	8000168 <__aeabi_dsub>
 8005656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800565a:	9f03      	ldr	r7, [sp, #12]
 800565c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005660:	f7fb f9ea 	bl	8000a38 <__aeabi_d2iz>
 8005664:	4604      	mov	r4, r0
 8005666:	f7fa fecd 	bl	8000404 <__aeabi_i2d>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005672:	f7fa fd79 	bl	8000168 <__aeabi_dsub>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	3430      	adds	r4, #48	; 0x30
 800567c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005684:	f807 4b01 	strb.w	r4, [r7], #1
 8005688:	f7fb f998 	bl	80009bc <__aeabi_dcmplt>
 800568c:	2800      	cmp	r0, #0
 800568e:	d173      	bne.n	8005778 <_dtoa_r+0x638>
 8005690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005694:	2000      	movs	r0, #0
 8005696:	4911      	ldr	r1, [pc, #68]	; (80056dc <_dtoa_r+0x59c>)
 8005698:	f7fa fd66 	bl	8000168 <__aeabi_dsub>
 800569c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056a0:	f7fb f98c 	bl	80009bc <__aeabi_dcmplt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	f040 80b6 	bne.w	8005816 <_dtoa_r+0x6d6>
 80056aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056ac:	429f      	cmp	r7, r3
 80056ae:	f43f af7a 	beq.w	80055a6 <_dtoa_r+0x466>
 80056b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056b6:	2200      	movs	r2, #0
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <_dtoa_r+0x5a0>)
 80056ba:	f7fa ff0d 	bl	80004d8 <__aeabi_dmul>
 80056be:	2200      	movs	r2, #0
 80056c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <_dtoa_r+0x5a0>)
 80056ca:	f7fa ff05 	bl	80004d8 <__aeabi_dmul>
 80056ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d2:	e7c3      	b.n	800565c <_dtoa_r+0x51c>
 80056d4:	08006e70 	.word	0x08006e70
 80056d8:	08006e48 	.word	0x08006e48
 80056dc:	3ff00000 	.word	0x3ff00000
 80056e0:	40240000 	.word	0x40240000
 80056e4:	401c0000 	.word	0x401c0000
 80056e8:	40140000 	.word	0x40140000
 80056ec:	3fe00000 	.word	0x3fe00000
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fa fef0 	bl	80004d8 <__aeabi_dmul>
 80056f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056fe:	9c03      	ldr	r4, [sp, #12]
 8005700:	9314      	str	r3, [sp, #80]	; 0x50
 8005702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005706:	f7fb f997 	bl	8000a38 <__aeabi_d2iz>
 800570a:	9015      	str	r0, [sp, #84]	; 0x54
 800570c:	f7fa fe7a 	bl	8000404 <__aeabi_i2d>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005718:	f7fa fd26 	bl	8000168 <__aeabi_dsub>
 800571c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800571e:	4606      	mov	r6, r0
 8005720:	3330      	adds	r3, #48	; 0x30
 8005722:	f804 3b01 	strb.w	r3, [r4], #1
 8005726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005728:	460f      	mov	r7, r1
 800572a:	429c      	cmp	r4, r3
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	d124      	bne.n	800577c <_dtoa_r+0x63c>
 8005732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005736:	4baf      	ldr	r3, [pc, #700]	; (80059f4 <_dtoa_r+0x8b4>)
 8005738:	f7fa fd18 	bl	800016c <__adddf3>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fb f958 	bl	80009f8 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	d163      	bne.n	8005814 <_dtoa_r+0x6d4>
 800574c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005750:	2000      	movs	r0, #0
 8005752:	49a8      	ldr	r1, [pc, #672]	; (80059f4 <_dtoa_r+0x8b4>)
 8005754:	f7fa fd08 	bl	8000168 <__aeabi_dsub>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f92c 	bl	80009bc <__aeabi_dcmplt>
 8005764:	2800      	cmp	r0, #0
 8005766:	f43f af1e 	beq.w	80055a6 <_dtoa_r+0x466>
 800576a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800576c:	1e7b      	subs	r3, r7, #1
 800576e:	9314      	str	r3, [sp, #80]	; 0x50
 8005770:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d0f8      	beq.n	800576a <_dtoa_r+0x62a>
 8005778:	46c3      	mov	fp, r8
 800577a:	e03b      	b.n	80057f4 <_dtoa_r+0x6b4>
 800577c:	4b9e      	ldr	r3, [pc, #632]	; (80059f8 <_dtoa_r+0x8b8>)
 800577e:	f7fa feab 	bl	80004d8 <__aeabi_dmul>
 8005782:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005786:	e7bc      	b.n	8005702 <_dtoa_r+0x5c2>
 8005788:	9f03      	ldr	r7, [sp, #12]
 800578a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800578e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f7fa ffc9 	bl	800072c <__aeabi_ddiv>
 800579a:	f7fb f94d 	bl	8000a38 <__aeabi_d2iz>
 800579e:	4604      	mov	r4, r0
 80057a0:	f7fa fe30 	bl	8000404 <__aeabi_i2d>
 80057a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057a8:	f7fa fe96 	bl	80004d8 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fa fcd8 	bl	8000168 <__aeabi_dsub>
 80057b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057bc:	f807 6b01 	strb.w	r6, [r7], #1
 80057c0:	9e03      	ldr	r6, [sp, #12]
 80057c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80057c6:	1bbe      	subs	r6, r7, r6
 80057c8:	45b4      	cmp	ip, r6
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	d136      	bne.n	800583e <_dtoa_r+0x6fe>
 80057d0:	f7fa fccc 	bl	800016c <__adddf3>
 80057d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057d8:	4680      	mov	r8, r0
 80057da:	4689      	mov	r9, r1
 80057dc:	f7fb f90c 	bl	80009f8 <__aeabi_dcmpgt>
 80057e0:	bb58      	cbnz	r0, 800583a <_dtoa_r+0x6fa>
 80057e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fb f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 80057ee:	b108      	cbz	r0, 80057f4 <_dtoa_r+0x6b4>
 80057f0:	07e3      	lsls	r3, r4, #31
 80057f2:	d422      	bmi.n	800583a <_dtoa_r+0x6fa>
 80057f4:	4651      	mov	r1, sl
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 fbc2 	bl	8005f80 <_Bfree>
 80057fc:	2300      	movs	r3, #0
 80057fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005800:	703b      	strb	r3, [r7, #0]
 8005802:	f10b 0301 	add.w	r3, fp, #1
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800580a:	2b00      	cmp	r3, #0
 800580c:	f43f ace6 	beq.w	80051dc <_dtoa_r+0x9c>
 8005810:	601f      	str	r7, [r3, #0]
 8005812:	e4e3      	b.n	80051dc <_dtoa_r+0x9c>
 8005814:	4627      	mov	r7, r4
 8005816:	463b      	mov	r3, r7
 8005818:	461f      	mov	r7, r3
 800581a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800581e:	2a39      	cmp	r2, #57	; 0x39
 8005820:	d107      	bne.n	8005832 <_dtoa_r+0x6f2>
 8005822:	9a03      	ldr	r2, [sp, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d1f7      	bne.n	8005818 <_dtoa_r+0x6d8>
 8005828:	2230      	movs	r2, #48	; 0x30
 800582a:	9903      	ldr	r1, [sp, #12]
 800582c:	f108 0801 	add.w	r8, r8, #1
 8005830:	700a      	strb	r2, [r1, #0]
 8005832:	781a      	ldrb	r2, [r3, #0]
 8005834:	3201      	adds	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	e79e      	b.n	8005778 <_dtoa_r+0x638>
 800583a:	46d8      	mov	r8, fp
 800583c:	e7eb      	b.n	8005816 <_dtoa_r+0x6d6>
 800583e:	2200      	movs	r2, #0
 8005840:	4b6d      	ldr	r3, [pc, #436]	; (80059f8 <_dtoa_r+0x8b8>)
 8005842:	f7fa fe49 	bl	80004d8 <__aeabi_dmul>
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	4680      	mov	r8, r0
 800584c:	4689      	mov	r9, r1
 800584e:	f7fb f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8005852:	2800      	cmp	r0, #0
 8005854:	d09b      	beq.n	800578e <_dtoa_r+0x64e>
 8005856:	e7cd      	b.n	80057f4 <_dtoa_r+0x6b4>
 8005858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800585a:	2a00      	cmp	r2, #0
 800585c:	f000 80c4 	beq.w	80059e8 <_dtoa_r+0x8a8>
 8005860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005862:	2a01      	cmp	r2, #1
 8005864:	f300 80a8 	bgt.w	80059b8 <_dtoa_r+0x878>
 8005868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800586a:	2a00      	cmp	r2, #0
 800586c:	f000 80a0 	beq.w	80059b0 <_dtoa_r+0x870>
 8005870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005874:	464f      	mov	r7, r9
 8005876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800587a:	2101      	movs	r1, #1
 800587c:	441a      	add	r2, r3
 800587e:	4628      	mov	r0, r5
 8005880:	4499      	add	r9, r3
 8005882:	9209      	str	r2, [sp, #36]	; 0x24
 8005884:	f000 fc32 	bl	80060ec <__i2b>
 8005888:	4606      	mov	r6, r0
 800588a:	b15f      	cbz	r7, 80058a4 <_dtoa_r+0x764>
 800588c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	dd08      	ble.n	80058a4 <_dtoa_r+0x764>
 8005892:	42bb      	cmp	r3, r7
 8005894:	bfa8      	it	ge
 8005896:	463b      	movge	r3, r7
 8005898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800589a:	eba9 0903 	sub.w	r9, r9, r3
 800589e:	1aff      	subs	r7, r7, r3
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	9309      	str	r3, [sp, #36]	; 0x24
 80058a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a6:	b1f3      	cbz	r3, 80058e6 <_dtoa_r+0x7a6>
 80058a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80a0 	beq.w	80059f0 <_dtoa_r+0x8b0>
 80058b0:	2c00      	cmp	r4, #0
 80058b2:	dd10      	ble.n	80058d6 <_dtoa_r+0x796>
 80058b4:	4631      	mov	r1, r6
 80058b6:	4622      	mov	r2, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fcd5 	bl	8006268 <__pow5mult>
 80058be:	4652      	mov	r2, sl
 80058c0:	4601      	mov	r1, r0
 80058c2:	4606      	mov	r6, r0
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fc27 	bl	8006118 <__multiply>
 80058ca:	4680      	mov	r8, r0
 80058cc:	4651      	mov	r1, sl
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fb56 	bl	8005f80 <_Bfree>
 80058d4:	46c2      	mov	sl, r8
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	1b1a      	subs	r2, r3, r4
 80058da:	d004      	beq.n	80058e6 <_dtoa_r+0x7a6>
 80058dc:	4651      	mov	r1, sl
 80058de:	4628      	mov	r0, r5
 80058e0:	f000 fcc2 	bl	8006268 <__pow5mult>
 80058e4:	4682      	mov	sl, r0
 80058e6:	2101      	movs	r1, #1
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 fbff 	bl	80060ec <__i2b>
 80058ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f0:	4604      	mov	r4, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f340 8082 	ble.w	80059fc <_dtoa_r+0x8bc>
 80058f8:	461a      	mov	r2, r3
 80058fa:	4601      	mov	r1, r0
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fcb3 	bl	8006268 <__pow5mult>
 8005902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005904:	4604      	mov	r4, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	dd7b      	ble.n	8005a02 <_dtoa_r+0x8c2>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005914:	6918      	ldr	r0, [r3, #16]
 8005916:	f000 fb9b 	bl	8006050 <__hi0bits>
 800591a:	f1c0 0020 	rsb	r0, r0, #32
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	4418      	add	r0, r3
 8005922:	f010 001f 	ands.w	r0, r0, #31
 8005926:	f000 8092 	beq.w	8005a4e <_dtoa_r+0x90e>
 800592a:	f1c0 0320 	rsb	r3, r0, #32
 800592e:	2b04      	cmp	r3, #4
 8005930:	f340 8085 	ble.w	8005a3e <_dtoa_r+0x8fe>
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	f1c0 001c 	rsb	r0, r0, #28
 800593a:	4403      	add	r3, r0
 800593c:	4481      	add	r9, r0
 800593e:	4407      	add	r7, r0
 8005940:	9309      	str	r3, [sp, #36]	; 0x24
 8005942:	f1b9 0f00 	cmp.w	r9, #0
 8005946:	dd05      	ble.n	8005954 <_dtoa_r+0x814>
 8005948:	4651      	mov	r1, sl
 800594a:	464a      	mov	r2, r9
 800594c:	4628      	mov	r0, r5
 800594e:	f000 fce5 	bl	800631c <__lshift>
 8005952:	4682      	mov	sl, r0
 8005954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd05      	ble.n	8005966 <_dtoa_r+0x826>
 800595a:	4621      	mov	r1, r4
 800595c:	461a      	mov	r2, r3
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fcdc 	bl	800631c <__lshift>
 8005964:	4604      	mov	r4, r0
 8005966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d072      	beq.n	8005a52 <_dtoa_r+0x912>
 800596c:	4621      	mov	r1, r4
 800596e:	4650      	mov	r0, sl
 8005970:	f000 fd40 	bl	80063f4 <__mcmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	da6c      	bge.n	8005a52 <_dtoa_r+0x912>
 8005978:	2300      	movs	r3, #0
 800597a:	4651      	mov	r1, sl
 800597c:	220a      	movs	r2, #10
 800597e:	4628      	mov	r0, r5
 8005980:	f000 fb20 	bl	8005fc4 <__multadd>
 8005984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005986:	4682      	mov	sl, r0
 8005988:	f10b 3bff 	add.w	fp, fp, #4294967295
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 81ac 	beq.w	8005cea <_dtoa_r+0xbaa>
 8005992:	2300      	movs	r3, #0
 8005994:	4631      	mov	r1, r6
 8005996:	220a      	movs	r2, #10
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fb13 	bl	8005fc4 <__multadd>
 800599e:	9b06      	ldr	r3, [sp, #24]
 80059a0:	4606      	mov	r6, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f300 8093 	bgt.w	8005ace <_dtoa_r+0x98e>
 80059a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	dc59      	bgt.n	8005a62 <_dtoa_r+0x922>
 80059ae:	e08e      	b.n	8005ace <_dtoa_r+0x98e>
 80059b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059b6:	e75d      	b.n	8005874 <_dtoa_r+0x734>
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	1e5c      	subs	r4, r3, #1
 80059bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059be:	42a3      	cmp	r3, r4
 80059c0:	bfbf      	itttt	lt
 80059c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80059c6:	1ae3      	sublt	r3, r4, r3
 80059c8:	18d2      	addlt	r2, r2, r3
 80059ca:	bfa8      	it	ge
 80059cc:	1b1c      	subge	r4, r3, r4
 80059ce:	9b08      	ldr	r3, [sp, #32]
 80059d0:	bfbe      	ittt	lt
 80059d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80059d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80059d6:	2400      	movlt	r4, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb5      	itete	lt
 80059dc:	eba9 0703 	sublt.w	r7, r9, r3
 80059e0:	464f      	movge	r7, r9
 80059e2:	2300      	movlt	r3, #0
 80059e4:	9b08      	ldrge	r3, [sp, #32]
 80059e6:	e747      	b.n	8005878 <_dtoa_r+0x738>
 80059e8:	464f      	mov	r7, r9
 80059ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059ee:	e74c      	b.n	800588a <_dtoa_r+0x74a>
 80059f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f2:	e773      	b.n	80058dc <_dtoa_r+0x79c>
 80059f4:	3fe00000 	.word	0x3fe00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	dc18      	bgt.n	8005a34 <_dtoa_r+0x8f4>
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	b9b3      	cbnz	r3, 8005a34 <_dtoa_r+0x8f4>
 8005a06:	9b05      	ldr	r3, [sp, #20]
 8005a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0c:	b993      	cbnz	r3, 8005a34 <_dtoa_r+0x8f4>
 8005a0e:	9b05      	ldr	r3, [sp, #20]
 8005a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a14:	0d1b      	lsrs	r3, r3, #20
 8005a16:	051b      	lsls	r3, r3, #20
 8005a18:	b17b      	cbz	r3, 8005a3a <_dtoa_r+0x8fa>
 8005a1a:	f04f 0801 	mov.w	r8, #1
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	f109 0901 	add.w	r9, r9, #1
 8005a24:	3301      	adds	r3, #1
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f af6f 	bne.w	800590e <_dtoa_r+0x7ce>
 8005a30:	2001      	movs	r0, #1
 8005a32:	e774      	b.n	800591e <_dtoa_r+0x7de>
 8005a34:	f04f 0800 	mov.w	r8, #0
 8005a38:	e7f6      	b.n	8005a28 <_dtoa_r+0x8e8>
 8005a3a:	4698      	mov	r8, r3
 8005a3c:	e7f4      	b.n	8005a28 <_dtoa_r+0x8e8>
 8005a3e:	d080      	beq.n	8005942 <_dtoa_r+0x802>
 8005a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a42:	331c      	adds	r3, #28
 8005a44:	441a      	add	r2, r3
 8005a46:	4499      	add	r9, r3
 8005a48:	441f      	add	r7, r3
 8005a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4c:	e779      	b.n	8005942 <_dtoa_r+0x802>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	e7f6      	b.n	8005a40 <_dtoa_r+0x900>
 8005a52:	9b08      	ldr	r3, [sp, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dc34      	bgt.n	8005ac2 <_dtoa_r+0x982>
 8005a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	dd31      	ble.n	8005ac2 <_dtoa_r+0x982>
 8005a5e:	9b08      	ldr	r3, [sp, #32]
 8005a60:	9306      	str	r3, [sp, #24]
 8005a62:	9b06      	ldr	r3, [sp, #24]
 8005a64:	b963      	cbnz	r3, 8005a80 <_dtoa_r+0x940>
 8005a66:	4621      	mov	r1, r4
 8005a68:	2205      	movs	r2, #5
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 faaa 	bl	8005fc4 <__multadd>
 8005a70:	4601      	mov	r1, r0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4650      	mov	r0, sl
 8005a76:	f000 fcbd 	bl	80063f4 <__mcmp>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f73f adbf 	bgt.w	80055fe <_dtoa_r+0x4be>
 8005a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a82:	9f03      	ldr	r7, [sp, #12]
 8005a84:	ea6f 0b03 	mvn.w	fp, r3
 8005a88:	f04f 0800 	mov.w	r8, #0
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fa76 	bl	8005f80 <_Bfree>
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	f43f aead 	beq.w	80057f4 <_dtoa_r+0x6b4>
 8005a9a:	f1b8 0f00 	cmp.w	r8, #0
 8005a9e:	d005      	beq.n	8005aac <_dtoa_r+0x96c>
 8005aa0:	45b0      	cmp	r8, r6
 8005aa2:	d003      	beq.n	8005aac <_dtoa_r+0x96c>
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fa6a 	bl	8005f80 <_Bfree>
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fa66 	bl	8005f80 <_Bfree>
 8005ab4:	e69e      	b.n	80057f4 <_dtoa_r+0x6b4>
 8005ab6:	2400      	movs	r4, #0
 8005ab8:	4626      	mov	r6, r4
 8005aba:	e7e1      	b.n	8005a80 <_dtoa_r+0x940>
 8005abc:	46c3      	mov	fp, r8
 8005abe:	4626      	mov	r6, r4
 8005ac0:	e59d      	b.n	80055fe <_dtoa_r+0x4be>
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80c8 	beq.w	8005c5a <_dtoa_r+0xb1a>
 8005aca:	9b08      	ldr	r3, [sp, #32]
 8005acc:	9306      	str	r3, [sp, #24]
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	dd05      	ble.n	8005ade <_dtoa_r+0x99e>
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	463a      	mov	r2, r7
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 fc20 	bl	800631c <__lshift>
 8005adc:	4606      	mov	r6, r0
 8005ade:	f1b8 0f00 	cmp.w	r8, #0
 8005ae2:	d05b      	beq.n	8005b9c <_dtoa_r+0xa5c>
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	6871      	ldr	r1, [r6, #4]
 8005ae8:	f000 fa0a 	bl	8005f00 <_Balloc>
 8005aec:	4607      	mov	r7, r0
 8005aee:	b928      	cbnz	r0, 8005afc <_dtoa_r+0x9bc>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005af6:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <_dtoa_r+0xbbc>)
 8005af8:	f7ff bb36 	b.w	8005168 <_dtoa_r+0x28>
 8005afc:	6932      	ldr	r2, [r6, #16]
 8005afe:	f106 010c 	add.w	r1, r6, #12
 8005b02:	3202      	adds	r2, #2
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	300c      	adds	r0, #12
 8005b08:	f000 fff2 	bl	8006af0 <memcpy>
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4639      	mov	r1, r7
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fc03 	bl	800631c <__lshift>
 8005b16:	46b0      	mov	r8, r6
 8005b18:	4606      	mov	r6, r0
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	9a03      	ldr	r2, [sp, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b06      	ldr	r3, [sp, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b28:	9b04      	ldr	r3, [sp, #16]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	4621      	mov	r1, r4
 8005b34:	3b01      	subs	r3, #1
 8005b36:	4650      	mov	r0, sl
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	f7ff fa78 	bl	800502e <quorem>
 8005b3e:	4641      	mov	r1, r8
 8005b40:	9006      	str	r0, [sp, #24]
 8005b42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b46:	4650      	mov	r0, sl
 8005b48:	f000 fc54 	bl	80063f4 <__mcmp>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	9009      	str	r0, [sp, #36]	; 0x24
 8005b50:	4621      	mov	r1, r4
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fc6a 	bl	800642c <__mdiff>
 8005b58:	68c2      	ldr	r2, [r0, #12]
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	bb02      	cbnz	r2, 8005ba0 <_dtoa_r+0xa60>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4650      	mov	r0, sl
 8005b62:	f000 fc47 	bl	80063f4 <__mcmp>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	920c      	str	r2, [sp, #48]	; 0x30
 8005b6e:	f000 fa07 	bl	8005f80 <_Bfree>
 8005b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b76:	9f08      	ldr	r7, [sp, #32]
 8005b78:	ea43 0102 	orr.w	r1, r3, r2
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	4319      	orrs	r1, r3
 8005b80:	d110      	bne.n	8005ba4 <_dtoa_r+0xa64>
 8005b82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b86:	d029      	beq.n	8005bdc <_dtoa_r+0xa9c>
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dd02      	ble.n	8005b94 <_dtoa_r+0xa54>
 8005b8e:	9b06      	ldr	r3, [sp, #24]
 8005b90:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005b94:	9b04      	ldr	r3, [sp, #16]
 8005b96:	f883 9000 	strb.w	r9, [r3]
 8005b9a:	e777      	b.n	8005a8c <_dtoa_r+0x94c>
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	e7ba      	b.n	8005b16 <_dtoa_r+0x9d6>
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	e7e1      	b.n	8005b68 <_dtoa_r+0xa28>
 8005ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db04      	blt.n	8005bb4 <_dtoa_r+0xa74>
 8005baa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005bac:	430b      	orrs	r3, r1
 8005bae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	d120      	bne.n	8005bf6 <_dtoa_r+0xab6>
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	dded      	ble.n	8005b94 <_dtoa_r+0xa54>
 8005bb8:	4651      	mov	r1, sl
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 fbad 	bl	800631c <__lshift>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	f000 fc15 	bl	80063f4 <__mcmp>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	dc03      	bgt.n	8005bd6 <_dtoa_r+0xa96>
 8005bce:	d1e1      	bne.n	8005b94 <_dtoa_r+0xa54>
 8005bd0:	f019 0f01 	tst.w	r9, #1
 8005bd4:	d0de      	beq.n	8005b94 <_dtoa_r+0xa54>
 8005bd6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bda:	d1d8      	bne.n	8005b8e <_dtoa_r+0xa4e>
 8005bdc:	2339      	movs	r3, #57	; 0x39
 8005bde:	9a04      	ldr	r2, [sp, #16]
 8005be0:	7013      	strb	r3, [r2, #0]
 8005be2:	463b      	mov	r3, r7
 8005be4:	461f      	mov	r7, r3
 8005be6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	2a39      	cmp	r2, #57	; 0x39
 8005bee:	d06b      	beq.n	8005cc8 <_dtoa_r+0xb88>
 8005bf0:	3201      	adds	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	e74a      	b.n	8005a8c <_dtoa_r+0x94c>
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	dd07      	ble.n	8005c0a <_dtoa_r+0xaca>
 8005bfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bfe:	d0ed      	beq.n	8005bdc <_dtoa_r+0xa9c>
 8005c00:	9a04      	ldr	r2, [sp, #16]
 8005c02:	f109 0301 	add.w	r3, r9, #1
 8005c06:	7013      	strb	r3, [r2, #0]
 8005c08:	e740      	b.n	8005a8c <_dtoa_r+0x94c>
 8005c0a:	9b08      	ldr	r3, [sp, #32]
 8005c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c0e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d042      	beq.n	8005c9c <_dtoa_r+0xb5c>
 8005c16:	4651      	mov	r1, sl
 8005c18:	2300      	movs	r3, #0
 8005c1a:	220a      	movs	r2, #10
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f9d1 	bl	8005fc4 <__multadd>
 8005c22:	45b0      	cmp	r8, r6
 8005c24:	4682      	mov	sl, r0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	f04f 020a 	mov.w	r2, #10
 8005c2e:	4641      	mov	r1, r8
 8005c30:	4628      	mov	r0, r5
 8005c32:	d107      	bne.n	8005c44 <_dtoa_r+0xb04>
 8005c34:	f000 f9c6 	bl	8005fc4 <__multadd>
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	9b08      	ldr	r3, [sp, #32]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	9308      	str	r3, [sp, #32]
 8005c42:	e775      	b.n	8005b30 <_dtoa_r+0x9f0>
 8005c44:	f000 f9be 	bl	8005fc4 <__multadd>
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	220a      	movs	r2, #10
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f9b7 	bl	8005fc4 <__multadd>
 8005c56:	4606      	mov	r6, r0
 8005c58:	e7f0      	b.n	8005c3c <_dtoa_r+0xafc>
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	9306      	str	r3, [sp, #24]
 8005c5e:	9f03      	ldr	r7, [sp, #12]
 8005c60:	4621      	mov	r1, r4
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7ff f9e3 	bl	800502e <quorem>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c6e:	f807 9b01 	strb.w	r9, [r7], #1
 8005c72:	1afa      	subs	r2, r7, r3
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	dd07      	ble.n	8005c8a <_dtoa_r+0xb4a>
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	220a      	movs	r2, #10
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 f99f 	bl	8005fc4 <__multadd>
 8005c86:	4682      	mov	sl, r0
 8005c88:	e7ea      	b.n	8005c60 <_dtoa_r+0xb20>
 8005c8a:	9b06      	ldr	r3, [sp, #24]
 8005c8c:	f04f 0800 	mov.w	r8, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bfcc      	ite	gt
 8005c94:	461f      	movgt	r7, r3
 8005c96:	2701      	movle	r7, #1
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	441f      	add	r7, r3
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fb3b 	bl	800631c <__lshift>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4682      	mov	sl, r0
 8005caa:	f000 fba3 	bl	80063f4 <__mcmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	dc97      	bgt.n	8005be2 <_dtoa_r+0xaa2>
 8005cb2:	d102      	bne.n	8005cba <_dtoa_r+0xb7a>
 8005cb4:	f019 0f01 	tst.w	r9, #1
 8005cb8:	d193      	bne.n	8005be2 <_dtoa_r+0xaa2>
 8005cba:	463b      	mov	r3, r7
 8005cbc:	461f      	mov	r7, r3
 8005cbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc2:	2a30      	cmp	r2, #48	; 0x30
 8005cc4:	d0fa      	beq.n	8005cbc <_dtoa_r+0xb7c>
 8005cc6:	e6e1      	b.n	8005a8c <_dtoa_r+0x94c>
 8005cc8:	9a03      	ldr	r2, [sp, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d18a      	bne.n	8005be4 <_dtoa_r+0xaa4>
 8005cce:	2331      	movs	r3, #49	; 0x31
 8005cd0:	f10b 0b01 	add.w	fp, fp, #1
 8005cd4:	e797      	b.n	8005c06 <_dtoa_r+0xac6>
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <_dtoa_r+0xbc0>)
 8005cd8:	f7ff ba9f 	b.w	800521a <_dtoa_r+0xda>
 8005cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f47f aa77 	bne.w	80051d2 <_dtoa_r+0x92>
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <_dtoa_r+0xbc4>)
 8005ce6:	f7ff ba98 	b.w	800521a <_dtoa_r+0xda>
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dcb6      	bgt.n	8005c5e <_dtoa_r+0xb1e>
 8005cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	f73f aeb5 	bgt.w	8005a62 <_dtoa_r+0x922>
 8005cf8:	e7b1      	b.n	8005c5e <_dtoa_r+0xb1e>
 8005cfa:	bf00      	nop
 8005cfc:	08006dda 	.word	0x08006dda
 8005d00:	08006d3a 	.word	0x08006d3a
 8005d04:	08006d5e 	.word	0x08006d5e

08005d08 <_free_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d040      	beq.n	8005d92 <_free_r+0x8a>
 8005d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d14:	1f0c      	subs	r4, r1, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfb8      	it	lt
 8005d1a:	18e4      	addlt	r4, r4, r3
 8005d1c:	f000 f8e4 	bl	8005ee8 <__malloc_lock>
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <_free_r+0x8c>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	b933      	cbnz	r3, 8005d34 <_free_r+0x2c>
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	6014      	str	r4, [r2, #0]
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d30:	f000 b8e0 	b.w	8005ef4 <__malloc_unlock>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x42>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	1821      	adds	r1, r4, r0
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf01      	itttt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	1809      	addeq	r1, r1, r0
 8005d46:	6021      	streq	r1, [r4, #0]
 8005d48:	e7ed      	b.n	8005d26 <_free_r+0x1e>
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b10b      	cbz	r3, 8005d54 <_free_r+0x4c>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d9fa      	bls.n	8005d4a <_free_r+0x42>
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	1850      	adds	r0, r2, r1
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d10b      	bne.n	8005d74 <_free_r+0x6c>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	4401      	add	r1, r0
 8005d60:	1850      	adds	r0, r2, r1
 8005d62:	4283      	cmp	r3, r0
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	d1e0      	bne.n	8005d2a <_free_r+0x22>
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4408      	add	r0, r1
 8005d6e:	6010      	str	r0, [r2, #0]
 8005d70:	6053      	str	r3, [r2, #4]
 8005d72:	e7da      	b.n	8005d2a <_free_r+0x22>
 8005d74:	d902      	bls.n	8005d7c <_free_r+0x74>
 8005d76:	230c      	movs	r3, #12
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	e7d6      	b.n	8005d2a <_free_r+0x22>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	1821      	adds	r1, r4, r0
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf01      	itttt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	1809      	addeq	r1, r1, r0
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	6054      	str	r4, [r2, #4]
 8005d90:	e7cb      	b.n	8005d2a <_free_r+0x22>
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	200004b8 	.word	0x200004b8

08005d98 <malloc>:
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <malloc+0xc>)
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f000 b823 	b.w	8005de8 <_malloc_r>
 8005da2:	bf00      	nop
 8005da4:	2000008c 	.word	0x2000008c

08005da8 <sbrk_aligned>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4e0e      	ldr	r6, [pc, #56]	; (8005de4 <sbrk_aligned+0x3c>)
 8005dac:	460c      	mov	r4, r1
 8005dae:	6831      	ldr	r1, [r6, #0]
 8005db0:	4605      	mov	r5, r0
 8005db2:	b911      	cbnz	r1, 8005dba <sbrk_aligned+0x12>
 8005db4:	f000 fe8c 	bl	8006ad0 <_sbrk_r>
 8005db8:	6030      	str	r0, [r6, #0]
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 fe87 	bl	8006ad0 <_sbrk_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d00a      	beq.n	8005ddc <sbrk_aligned+0x34>
 8005dc6:	1cc4      	adds	r4, r0, #3
 8005dc8:	f024 0403 	bic.w	r4, r4, #3
 8005dcc:	42a0      	cmp	r0, r4
 8005dce:	d007      	beq.n	8005de0 <sbrk_aligned+0x38>
 8005dd0:	1a21      	subs	r1, r4, r0
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 fe7c 	bl	8006ad0 <_sbrk_r>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d101      	bne.n	8005de0 <sbrk_aligned+0x38>
 8005ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8005de0:	4620      	mov	r0, r4
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	200004bc 	.word	0x200004bc

08005de8 <_malloc_r>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	1ccd      	adds	r5, r1, #3
 8005dee:	f025 0503 	bic.w	r5, r5, #3
 8005df2:	3508      	adds	r5, #8
 8005df4:	2d0c      	cmp	r5, #12
 8005df6:	bf38      	it	cc
 8005df8:	250c      	movcc	r5, #12
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	db01      	blt.n	8005e04 <_malloc_r+0x1c>
 8005e00:	42a9      	cmp	r1, r5
 8005e02:	d905      	bls.n	8005e10 <_malloc_r+0x28>
 8005e04:	230c      	movs	r3, #12
 8005e06:	2600      	movs	r6, #0
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ee4 <_malloc_r+0xfc>
 8005e14:	f000 f868 	bl	8005ee8 <__malloc_lock>
 8005e18:	f8d8 3000 	ldr.w	r3, [r8]
 8005e1c:	461c      	mov	r4, r3
 8005e1e:	bb5c      	cbnz	r4, 8005e78 <_malloc_r+0x90>
 8005e20:	4629      	mov	r1, r5
 8005e22:	4638      	mov	r0, r7
 8005e24:	f7ff ffc0 	bl	8005da8 <sbrk_aligned>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	d155      	bne.n	8005eda <_malloc_r+0xf2>
 8005e2e:	f8d8 4000 	ldr.w	r4, [r8]
 8005e32:	4626      	mov	r6, r4
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	d145      	bne.n	8005ec4 <_malloc_r+0xdc>
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d048      	beq.n	8005ece <_malloc_r+0xe6>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4638      	mov	r0, r7
 8005e42:	eb04 0903 	add.w	r9, r4, r3
 8005e46:	f000 fe43 	bl	8006ad0 <_sbrk_r>
 8005e4a:	4581      	cmp	r9, r0
 8005e4c:	d13f      	bne.n	8005ece <_malloc_r+0xe6>
 8005e4e:	6821      	ldr	r1, [r4, #0]
 8005e50:	4638      	mov	r0, r7
 8005e52:	1a6d      	subs	r5, r5, r1
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7ff ffa7 	bl	8005da8 <sbrk_aligned>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d037      	beq.n	8005ece <_malloc_r+0xe6>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	442b      	add	r3, r5
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	f8d8 3000 	ldr.w	r3, [r8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d038      	beq.n	8005ede <_malloc_r+0xf6>
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	42a2      	cmp	r2, r4
 8005e70:	d12b      	bne.n	8005eca <_malloc_r+0xe2>
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	e00f      	b.n	8005e98 <_malloc_r+0xb0>
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	1b52      	subs	r2, r2, r5
 8005e7c:	d41f      	bmi.n	8005ebe <_malloc_r+0xd6>
 8005e7e:	2a0b      	cmp	r2, #11
 8005e80:	d917      	bls.n	8005eb2 <_malloc_r+0xca>
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	6025      	str	r5, [r4, #0]
 8005e88:	bf18      	it	ne
 8005e8a:	6059      	strne	r1, [r3, #4]
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	bf08      	it	eq
 8005e90:	f8c8 1000 	streq.w	r1, [r8]
 8005e94:	5162      	str	r2, [r4, r5]
 8005e96:	604b      	str	r3, [r1, #4]
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f104 060b 	add.w	r6, r4, #11
 8005e9e:	f000 f829 	bl	8005ef4 <__malloc_unlock>
 8005ea2:	f026 0607 	bic.w	r6, r6, #7
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	1af2      	subs	r2, r6, r3
 8005eaa:	d0ae      	beq.n	8005e0a <_malloc_r+0x22>
 8005eac:	1b9b      	subs	r3, r3, r6
 8005eae:	50a3      	str	r3, [r4, r2]
 8005eb0:	e7ab      	b.n	8005e0a <_malloc_r+0x22>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	6862      	ldr	r2, [r4, #4]
 8005eb6:	d1dd      	bne.n	8005e74 <_malloc_r+0x8c>
 8005eb8:	f8c8 2000 	str.w	r2, [r8]
 8005ebc:	e7ec      	b.n	8005e98 <_malloc_r+0xb0>
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	6864      	ldr	r4, [r4, #4]
 8005ec2:	e7ac      	b.n	8005e1e <_malloc_r+0x36>
 8005ec4:	4634      	mov	r4, r6
 8005ec6:	6876      	ldr	r6, [r6, #4]
 8005ec8:	e7b4      	b.n	8005e34 <_malloc_r+0x4c>
 8005eca:	4613      	mov	r3, r2
 8005ecc:	e7cc      	b.n	8005e68 <_malloc_r+0x80>
 8005ece:	230c      	movs	r3, #12
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	f000 f80e 	bl	8005ef4 <__malloc_unlock>
 8005ed8:	e797      	b.n	8005e0a <_malloc_r+0x22>
 8005eda:	6025      	str	r5, [r4, #0]
 8005edc:	e7dc      	b.n	8005e98 <_malloc_r+0xb0>
 8005ede:	605b      	str	r3, [r3, #4]
 8005ee0:	deff      	udf	#255	; 0xff
 8005ee2:	bf00      	nop
 8005ee4:	200004b8 	.word	0x200004b8

08005ee8 <__malloc_lock>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__malloc_lock+0x8>)
 8005eea:	f7ff b890 	b.w	800500e <__retarget_lock_acquire_recursive>
 8005eee:	bf00      	nop
 8005ef0:	200004b4 	.word	0x200004b4

08005ef4 <__malloc_unlock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__malloc_unlock+0x8>)
 8005ef6:	f7ff b88b 	b.w	8005010 <__retarget_lock_release_recursive>
 8005efa:	bf00      	nop
 8005efc:	200004b4 	.word	0x200004b4

08005f00 <_Balloc>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	69c6      	ldr	r6, [r0, #28]
 8005f04:	4604      	mov	r4, r0
 8005f06:	460d      	mov	r5, r1
 8005f08:	b976      	cbnz	r6, 8005f28 <_Balloc+0x28>
 8005f0a:	2010      	movs	r0, #16
 8005f0c:	f7ff ff44 	bl	8005d98 <malloc>
 8005f10:	4602      	mov	r2, r0
 8005f12:	61e0      	str	r0, [r4, #28]
 8005f14:	b920      	cbnz	r0, 8005f20 <_Balloc+0x20>
 8005f16:	216b      	movs	r1, #107	; 0x6b
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <_Balloc+0x78>)
 8005f1a:	4818      	ldr	r0, [pc, #96]	; (8005f7c <_Balloc+0x7c>)
 8005f1c:	f000 fdf6 	bl	8006b0c <__assert_func>
 8005f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f24:	6006      	str	r6, [r0, #0]
 8005f26:	60c6      	str	r6, [r0, #12]
 8005f28:	69e6      	ldr	r6, [r4, #28]
 8005f2a:	68f3      	ldr	r3, [r6, #12]
 8005f2c:	b183      	cbz	r3, 8005f50 <_Balloc+0x50>
 8005f2e:	69e3      	ldr	r3, [r4, #28]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f36:	b9b8      	cbnz	r0, 8005f68 <_Balloc+0x68>
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f3e:	1d72      	adds	r2, r6, #5
 8005f40:	4620      	mov	r0, r4
 8005f42:	0092      	lsls	r2, r2, #2
 8005f44:	f000 fe00 	bl	8006b48 <_calloc_r>
 8005f48:	b160      	cbz	r0, 8005f64 <_Balloc+0x64>
 8005f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f4e:	e00e      	b.n	8005f6e <_Balloc+0x6e>
 8005f50:	2221      	movs	r2, #33	; 0x21
 8005f52:	2104      	movs	r1, #4
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fdf7 	bl	8006b48 <_calloc_r>
 8005f5a:	69e3      	ldr	r3, [r4, #28]
 8005f5c:	60f0      	str	r0, [r6, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e4      	bne.n	8005f2e <_Balloc+0x2e>
 8005f64:	2000      	movs	r0, #0
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	6802      	ldr	r2, [r0, #0]
 8005f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f74:	e7f7      	b.n	8005f66 <_Balloc+0x66>
 8005f76:	bf00      	nop
 8005f78:	08006d6b 	.word	0x08006d6b
 8005f7c:	08006deb 	.word	0x08006deb

08005f80 <_Bfree>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	69c6      	ldr	r6, [r0, #28]
 8005f84:	4605      	mov	r5, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	b976      	cbnz	r6, 8005fa8 <_Bfree+0x28>
 8005f8a:	2010      	movs	r0, #16
 8005f8c:	f7ff ff04 	bl	8005d98 <malloc>
 8005f90:	4602      	mov	r2, r0
 8005f92:	61e8      	str	r0, [r5, #28]
 8005f94:	b920      	cbnz	r0, 8005fa0 <_Bfree+0x20>
 8005f96:	218f      	movs	r1, #143	; 0x8f
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <_Bfree+0x3c>)
 8005f9a:	4809      	ldr	r0, [pc, #36]	; (8005fc0 <_Bfree+0x40>)
 8005f9c:	f000 fdb6 	bl	8006b0c <__assert_func>
 8005fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fa4:	6006      	str	r6, [r0, #0]
 8005fa6:	60c6      	str	r6, [r0, #12]
 8005fa8:	b13c      	cbz	r4, 8005fba <_Bfree+0x3a>
 8005faa:	69eb      	ldr	r3, [r5, #28]
 8005fac:	6862      	ldr	r2, [r4, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fb4:	6021      	str	r1, [r4, #0]
 8005fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	08006d6b 	.word	0x08006d6b
 8005fc0:	08006deb 	.word	0x08006deb

08005fc4 <__multadd>:
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	4607      	mov	r7, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	461e      	mov	r6, r3
 8005fce:	2000      	movs	r0, #0
 8005fd0:	690d      	ldr	r5, [r1, #16]
 8005fd2:	f101 0c14 	add.w	ip, r1, #20
 8005fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8005fda:	3001      	adds	r0, #1
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	fb02 6101 	mla	r1, r2, r1, r6
 8005fe2:	0c1e      	lsrs	r6, r3, #16
 8005fe4:	0c0b      	lsrs	r3, r1, #16
 8005fe6:	fb02 3306 	mla	r3, r2, r6, r3
 8005fea:	b289      	uxth	r1, r1
 8005fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ff0:	4285      	cmp	r5, r0
 8005ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ff6:	f84c 1b04 	str.w	r1, [ip], #4
 8005ffa:	dcec      	bgt.n	8005fd6 <__multadd+0x12>
 8005ffc:	b30e      	cbz	r6, 8006042 <__multadd+0x7e>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	42ab      	cmp	r3, r5
 8006002:	dc19      	bgt.n	8006038 <__multadd+0x74>
 8006004:	6861      	ldr	r1, [r4, #4]
 8006006:	4638      	mov	r0, r7
 8006008:	3101      	adds	r1, #1
 800600a:	f7ff ff79 	bl	8005f00 <_Balloc>
 800600e:	4680      	mov	r8, r0
 8006010:	b928      	cbnz	r0, 800601e <__multadd+0x5a>
 8006012:	4602      	mov	r2, r0
 8006014:	21ba      	movs	r1, #186	; 0xba
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <__multadd+0x84>)
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <__multadd+0x88>)
 800601a:	f000 fd77 	bl	8006b0c <__assert_func>
 800601e:	6922      	ldr	r2, [r4, #16]
 8006020:	f104 010c 	add.w	r1, r4, #12
 8006024:	3202      	adds	r2, #2
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	300c      	adds	r0, #12
 800602a:	f000 fd61 	bl	8006af0 <memcpy>
 800602e:	4621      	mov	r1, r4
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ffa5 	bl	8005f80 <_Bfree>
 8006036:	4644      	mov	r4, r8
 8006038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800603c:	3501      	adds	r5, #1
 800603e:	615e      	str	r6, [r3, #20]
 8006040:	6125      	str	r5, [r4, #16]
 8006042:	4620      	mov	r0, r4
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	08006dda 	.word	0x08006dda
 800604c:	08006deb 	.word	0x08006deb

08006050 <__hi0bits>:
 8006050:	0c02      	lsrs	r2, r0, #16
 8006052:	0412      	lsls	r2, r2, #16
 8006054:	4603      	mov	r3, r0
 8006056:	b9ca      	cbnz	r2, 800608c <__hi0bits+0x3c>
 8006058:	0403      	lsls	r3, r0, #16
 800605a:	2010      	movs	r0, #16
 800605c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006060:	bf04      	itt	eq
 8006062:	021b      	lsleq	r3, r3, #8
 8006064:	3008      	addeq	r0, #8
 8006066:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800606a:	bf04      	itt	eq
 800606c:	011b      	lsleq	r3, r3, #4
 800606e:	3004      	addeq	r0, #4
 8006070:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006074:	bf04      	itt	eq
 8006076:	009b      	lsleq	r3, r3, #2
 8006078:	3002      	addeq	r0, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	db05      	blt.n	800608a <__hi0bits+0x3a>
 800607e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006082:	f100 0001 	add.w	r0, r0, #1
 8006086:	bf08      	it	eq
 8006088:	2020      	moveq	r0, #32
 800608a:	4770      	bx	lr
 800608c:	2000      	movs	r0, #0
 800608e:	e7e5      	b.n	800605c <__hi0bits+0xc>

08006090 <__lo0bits>:
 8006090:	6803      	ldr	r3, [r0, #0]
 8006092:	4602      	mov	r2, r0
 8006094:	f013 0007 	ands.w	r0, r3, #7
 8006098:	d00b      	beq.n	80060b2 <__lo0bits+0x22>
 800609a:	07d9      	lsls	r1, r3, #31
 800609c:	d421      	bmi.n	80060e2 <__lo0bits+0x52>
 800609e:	0798      	lsls	r0, r3, #30
 80060a0:	bf49      	itett	mi
 80060a2:	085b      	lsrmi	r3, r3, #1
 80060a4:	089b      	lsrpl	r3, r3, #2
 80060a6:	2001      	movmi	r0, #1
 80060a8:	6013      	strmi	r3, [r2, #0]
 80060aa:	bf5c      	itt	pl
 80060ac:	2002      	movpl	r0, #2
 80060ae:	6013      	strpl	r3, [r2, #0]
 80060b0:	4770      	bx	lr
 80060b2:	b299      	uxth	r1, r3
 80060b4:	b909      	cbnz	r1, 80060ba <__lo0bits+0x2a>
 80060b6:	2010      	movs	r0, #16
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	b2d9      	uxtb	r1, r3
 80060bc:	b909      	cbnz	r1, 80060c2 <__lo0bits+0x32>
 80060be:	3008      	adds	r0, #8
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	0719      	lsls	r1, r3, #28
 80060c4:	bf04      	itt	eq
 80060c6:	091b      	lsreq	r3, r3, #4
 80060c8:	3004      	addeq	r0, #4
 80060ca:	0799      	lsls	r1, r3, #30
 80060cc:	bf04      	itt	eq
 80060ce:	089b      	lsreq	r3, r3, #2
 80060d0:	3002      	addeq	r0, #2
 80060d2:	07d9      	lsls	r1, r3, #31
 80060d4:	d403      	bmi.n	80060de <__lo0bits+0x4e>
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	f100 0001 	add.w	r0, r0, #1
 80060dc:	d003      	beq.n	80060e6 <__lo0bits+0x56>
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	4770      	bx	lr
 80060e2:	2000      	movs	r0, #0
 80060e4:	4770      	bx	lr
 80060e6:	2020      	movs	r0, #32
 80060e8:	4770      	bx	lr
	...

080060ec <__i2b>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	2101      	movs	r1, #1
 80060f2:	f7ff ff05 	bl	8005f00 <_Balloc>
 80060f6:	4602      	mov	r2, r0
 80060f8:	b928      	cbnz	r0, 8006106 <__i2b+0x1a>
 80060fa:	f240 1145 	movw	r1, #325	; 0x145
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <__i2b+0x24>)
 8006100:	4804      	ldr	r0, [pc, #16]	; (8006114 <__i2b+0x28>)
 8006102:	f000 fd03 	bl	8006b0c <__assert_func>
 8006106:	2301      	movs	r3, #1
 8006108:	6144      	str	r4, [r0, #20]
 800610a:	6103      	str	r3, [r0, #16]
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	08006dda 	.word	0x08006dda
 8006114:	08006deb 	.word	0x08006deb

08006118 <__multiply>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4691      	mov	r9, r2
 800611e:	690a      	ldr	r2, [r1, #16]
 8006120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006124:	460c      	mov	r4, r1
 8006126:	429a      	cmp	r2, r3
 8006128:	bfbe      	ittt	lt
 800612a:	460b      	movlt	r3, r1
 800612c:	464c      	movlt	r4, r9
 800612e:	4699      	movlt	r9, r3
 8006130:	6927      	ldr	r7, [r4, #16]
 8006132:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	6861      	ldr	r1, [r4, #4]
 800613a:	eb07 060a 	add.w	r6, r7, sl
 800613e:	42b3      	cmp	r3, r6
 8006140:	b085      	sub	sp, #20
 8006142:	bfb8      	it	lt
 8006144:	3101      	addlt	r1, #1
 8006146:	f7ff fedb 	bl	8005f00 <_Balloc>
 800614a:	b930      	cbnz	r0, 800615a <__multiply+0x42>
 800614c:	4602      	mov	r2, r0
 800614e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006152:	4b43      	ldr	r3, [pc, #268]	; (8006260 <__multiply+0x148>)
 8006154:	4843      	ldr	r0, [pc, #268]	; (8006264 <__multiply+0x14c>)
 8006156:	f000 fcd9 	bl	8006b0c <__assert_func>
 800615a:	f100 0514 	add.w	r5, r0, #20
 800615e:	462b      	mov	r3, r5
 8006160:	2200      	movs	r2, #0
 8006162:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006166:	4543      	cmp	r3, r8
 8006168:	d321      	bcc.n	80061ae <__multiply+0x96>
 800616a:	f104 0314 	add.w	r3, r4, #20
 800616e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006172:	f109 0314 	add.w	r3, r9, #20
 8006176:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800617a:	9202      	str	r2, [sp, #8]
 800617c:	1b3a      	subs	r2, r7, r4
 800617e:	3a15      	subs	r2, #21
 8006180:	f022 0203 	bic.w	r2, r2, #3
 8006184:	3204      	adds	r2, #4
 8006186:	f104 0115 	add.w	r1, r4, #21
 800618a:	428f      	cmp	r7, r1
 800618c:	bf38      	it	cc
 800618e:	2204      	movcc	r2, #4
 8006190:	9201      	str	r2, [sp, #4]
 8006192:	9a02      	ldr	r2, [sp, #8]
 8006194:	9303      	str	r3, [sp, #12]
 8006196:	429a      	cmp	r2, r3
 8006198:	d80c      	bhi.n	80061b4 <__multiply+0x9c>
 800619a:	2e00      	cmp	r6, #0
 800619c:	dd03      	ble.n	80061a6 <__multiply+0x8e>
 800619e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d05a      	beq.n	800625c <__multiply+0x144>
 80061a6:	6106      	str	r6, [r0, #16]
 80061a8:	b005      	add	sp, #20
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	f843 2b04 	str.w	r2, [r3], #4
 80061b2:	e7d8      	b.n	8006166 <__multiply+0x4e>
 80061b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80061b8:	f1ba 0f00 	cmp.w	sl, #0
 80061bc:	d023      	beq.n	8006206 <__multiply+0xee>
 80061be:	46a9      	mov	r9, r5
 80061c0:	f04f 0c00 	mov.w	ip, #0
 80061c4:	f104 0e14 	add.w	lr, r4, #20
 80061c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80061cc:	f8d9 1000 	ldr.w	r1, [r9]
 80061d0:	fa1f fb82 	uxth.w	fp, r2
 80061d4:	b289      	uxth	r1, r1
 80061d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80061da:	4461      	add	r1, ip
 80061dc:	f8d9 c000 	ldr.w	ip, [r9]
 80061e0:	0c12      	lsrs	r2, r2, #16
 80061e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80061e6:	fb0a c202 	mla	r2, sl, r2, ip
 80061ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061ee:	b289      	uxth	r1, r1
 80061f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061f4:	4577      	cmp	r7, lr
 80061f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80061fa:	f849 1b04 	str.w	r1, [r9], #4
 80061fe:	d8e3      	bhi.n	80061c8 <__multiply+0xb0>
 8006200:	9a01      	ldr	r2, [sp, #4]
 8006202:	f845 c002 	str.w	ip, [r5, r2]
 8006206:	9a03      	ldr	r2, [sp, #12]
 8006208:	3304      	adds	r3, #4
 800620a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800620e:	f1b9 0f00 	cmp.w	r9, #0
 8006212:	d021      	beq.n	8006258 <__multiply+0x140>
 8006214:	46ae      	mov	lr, r5
 8006216:	f04f 0a00 	mov.w	sl, #0
 800621a:	6829      	ldr	r1, [r5, #0]
 800621c:	f104 0c14 	add.w	ip, r4, #20
 8006220:	f8bc b000 	ldrh.w	fp, [ip]
 8006224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006228:	b289      	uxth	r1, r1
 800622a:	fb09 220b 	mla	r2, r9, fp, r2
 800622e:	4452      	add	r2, sl
 8006230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006234:	f84e 1b04 	str.w	r1, [lr], #4
 8006238:	f85c 1b04 	ldr.w	r1, [ip], #4
 800623c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006240:	f8be 1000 	ldrh.w	r1, [lr]
 8006244:	4567      	cmp	r7, ip
 8006246:	fb09 110a 	mla	r1, r9, sl, r1
 800624a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800624e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006252:	d8e5      	bhi.n	8006220 <__multiply+0x108>
 8006254:	9a01      	ldr	r2, [sp, #4]
 8006256:	50a9      	str	r1, [r5, r2]
 8006258:	3504      	adds	r5, #4
 800625a:	e79a      	b.n	8006192 <__multiply+0x7a>
 800625c:	3e01      	subs	r6, #1
 800625e:	e79c      	b.n	800619a <__multiply+0x82>
 8006260:	08006dda 	.word	0x08006dda
 8006264:	08006deb 	.word	0x08006deb

08006268 <__pow5mult>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4615      	mov	r5, r2
 800626e:	f012 0203 	ands.w	r2, r2, #3
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	d007      	beq.n	8006288 <__pow5mult+0x20>
 8006278:	4c25      	ldr	r4, [pc, #148]	; (8006310 <__pow5mult+0xa8>)
 800627a:	3a01      	subs	r2, #1
 800627c:	2300      	movs	r3, #0
 800627e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006282:	f7ff fe9f 	bl	8005fc4 <__multadd>
 8006286:	4607      	mov	r7, r0
 8006288:	10ad      	asrs	r5, r5, #2
 800628a:	d03d      	beq.n	8006308 <__pow5mult+0xa0>
 800628c:	69f4      	ldr	r4, [r6, #28]
 800628e:	b97c      	cbnz	r4, 80062b0 <__pow5mult+0x48>
 8006290:	2010      	movs	r0, #16
 8006292:	f7ff fd81 	bl	8005d98 <malloc>
 8006296:	4602      	mov	r2, r0
 8006298:	61f0      	str	r0, [r6, #28]
 800629a:	b928      	cbnz	r0, 80062a8 <__pow5mult+0x40>
 800629c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062a0:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <__pow5mult+0xac>)
 80062a2:	481d      	ldr	r0, [pc, #116]	; (8006318 <__pow5mult+0xb0>)
 80062a4:	f000 fc32 	bl	8006b0c <__assert_func>
 80062a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062ac:	6004      	str	r4, [r0, #0]
 80062ae:	60c4      	str	r4, [r0, #12]
 80062b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062b8:	b94c      	cbnz	r4, 80062ce <__pow5mult+0x66>
 80062ba:	f240 2171 	movw	r1, #625	; 0x271
 80062be:	4630      	mov	r0, r6
 80062c0:	f7ff ff14 	bl	80060ec <__i2b>
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	f04f 0900 	mov.w	r9, #0
 80062d2:	07eb      	lsls	r3, r5, #31
 80062d4:	d50a      	bpl.n	80062ec <__pow5mult+0x84>
 80062d6:	4639      	mov	r1, r7
 80062d8:	4622      	mov	r2, r4
 80062da:	4630      	mov	r0, r6
 80062dc:	f7ff ff1c 	bl	8006118 <__multiply>
 80062e0:	4680      	mov	r8, r0
 80062e2:	4639      	mov	r1, r7
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff fe4b 	bl	8005f80 <_Bfree>
 80062ea:	4647      	mov	r7, r8
 80062ec:	106d      	asrs	r5, r5, #1
 80062ee:	d00b      	beq.n	8006308 <__pow5mult+0xa0>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	b938      	cbnz	r0, 8006304 <__pow5mult+0x9c>
 80062f4:	4622      	mov	r2, r4
 80062f6:	4621      	mov	r1, r4
 80062f8:	4630      	mov	r0, r6
 80062fa:	f7ff ff0d 	bl	8006118 <__multiply>
 80062fe:	6020      	str	r0, [r4, #0]
 8006300:	f8c0 9000 	str.w	r9, [r0]
 8006304:	4604      	mov	r4, r0
 8006306:	e7e4      	b.n	80062d2 <__pow5mult+0x6a>
 8006308:	4638      	mov	r0, r7
 800630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630e:	bf00      	nop
 8006310:	08006f38 	.word	0x08006f38
 8006314:	08006d6b 	.word	0x08006d6b
 8006318:	08006deb 	.word	0x08006deb

0800631c <__lshift>:
 800631c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	460c      	mov	r4, r1
 8006322:	4607      	mov	r7, r0
 8006324:	4691      	mov	r9, r2
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	6849      	ldr	r1, [r1, #4]
 800632a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006334:	f108 0601 	add.w	r6, r8, #1
 8006338:	42b3      	cmp	r3, r6
 800633a:	db0b      	blt.n	8006354 <__lshift+0x38>
 800633c:	4638      	mov	r0, r7
 800633e:	f7ff fddf 	bl	8005f00 <_Balloc>
 8006342:	4605      	mov	r5, r0
 8006344:	b948      	cbnz	r0, 800635a <__lshift+0x3e>
 8006346:	4602      	mov	r2, r0
 8006348:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800634c:	4b27      	ldr	r3, [pc, #156]	; (80063ec <__lshift+0xd0>)
 800634e:	4828      	ldr	r0, [pc, #160]	; (80063f0 <__lshift+0xd4>)
 8006350:	f000 fbdc 	bl	8006b0c <__assert_func>
 8006354:	3101      	adds	r1, #1
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	e7ee      	b.n	8006338 <__lshift+0x1c>
 800635a:	2300      	movs	r3, #0
 800635c:	f100 0114 	add.w	r1, r0, #20
 8006360:	f100 0210 	add.w	r2, r0, #16
 8006364:	4618      	mov	r0, r3
 8006366:	4553      	cmp	r3, sl
 8006368:	db33      	blt.n	80063d2 <__lshift+0xb6>
 800636a:	6920      	ldr	r0, [r4, #16]
 800636c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006370:	f104 0314 	add.w	r3, r4, #20
 8006374:	f019 091f 	ands.w	r9, r9, #31
 8006378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800637c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006380:	d02b      	beq.n	80063da <__lshift+0xbe>
 8006382:	468a      	mov	sl, r1
 8006384:	2200      	movs	r2, #0
 8006386:	f1c9 0e20 	rsb	lr, r9, #32
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	fa00 f009 	lsl.w	r0, r0, r9
 8006390:	4310      	orrs	r0, r2
 8006392:	f84a 0b04 	str.w	r0, [sl], #4
 8006396:	f853 2b04 	ldr.w	r2, [r3], #4
 800639a:	459c      	cmp	ip, r3
 800639c:	fa22 f20e 	lsr.w	r2, r2, lr
 80063a0:	d8f3      	bhi.n	800638a <__lshift+0x6e>
 80063a2:	ebac 0304 	sub.w	r3, ip, r4
 80063a6:	3b15      	subs	r3, #21
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	3304      	adds	r3, #4
 80063ae:	f104 0015 	add.w	r0, r4, #21
 80063b2:	4584      	cmp	ip, r0
 80063b4:	bf38      	it	cc
 80063b6:	2304      	movcc	r3, #4
 80063b8:	50ca      	str	r2, [r1, r3]
 80063ba:	b10a      	cbz	r2, 80063c0 <__lshift+0xa4>
 80063bc:	f108 0602 	add.w	r6, r8, #2
 80063c0:	3e01      	subs	r6, #1
 80063c2:	4638      	mov	r0, r7
 80063c4:	4621      	mov	r1, r4
 80063c6:	612e      	str	r6, [r5, #16]
 80063c8:	f7ff fdda 	bl	8005f80 <_Bfree>
 80063cc:	4628      	mov	r0, r5
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80063d6:	3301      	adds	r3, #1
 80063d8:	e7c5      	b.n	8006366 <__lshift+0x4a>
 80063da:	3904      	subs	r1, #4
 80063dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e0:	459c      	cmp	ip, r3
 80063e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e6:	d8f9      	bhi.n	80063dc <__lshift+0xc0>
 80063e8:	e7ea      	b.n	80063c0 <__lshift+0xa4>
 80063ea:	bf00      	nop
 80063ec:	08006dda 	.word	0x08006dda
 80063f0:	08006deb 	.word	0x08006deb

080063f4 <__mcmp>:
 80063f4:	4603      	mov	r3, r0
 80063f6:	690a      	ldr	r2, [r1, #16]
 80063f8:	6900      	ldr	r0, [r0, #16]
 80063fa:	b530      	push	{r4, r5, lr}
 80063fc:	1a80      	subs	r0, r0, r2
 80063fe:	d10d      	bne.n	800641c <__mcmp+0x28>
 8006400:	3314      	adds	r3, #20
 8006402:	3114      	adds	r1, #20
 8006404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800640c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006414:	4295      	cmp	r5, r2
 8006416:	d002      	beq.n	800641e <__mcmp+0x2a>
 8006418:	d304      	bcc.n	8006424 <__mcmp+0x30>
 800641a:	2001      	movs	r0, #1
 800641c:	bd30      	pop	{r4, r5, pc}
 800641e:	42a3      	cmp	r3, r4
 8006420:	d3f4      	bcc.n	800640c <__mcmp+0x18>
 8006422:	e7fb      	b.n	800641c <__mcmp+0x28>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	e7f8      	b.n	800641c <__mcmp+0x28>
	...

0800642c <__mdiff>:
 800642c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	460d      	mov	r5, r1
 8006432:	4607      	mov	r7, r0
 8006434:	4611      	mov	r1, r2
 8006436:	4628      	mov	r0, r5
 8006438:	4614      	mov	r4, r2
 800643a:	f7ff ffdb 	bl	80063f4 <__mcmp>
 800643e:	1e06      	subs	r6, r0, #0
 8006440:	d111      	bne.n	8006466 <__mdiff+0x3a>
 8006442:	4631      	mov	r1, r6
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff fd5b 	bl	8005f00 <_Balloc>
 800644a:	4602      	mov	r2, r0
 800644c:	b928      	cbnz	r0, 800645a <__mdiff+0x2e>
 800644e:	f240 2137 	movw	r1, #567	; 0x237
 8006452:	4b3a      	ldr	r3, [pc, #232]	; (800653c <__mdiff+0x110>)
 8006454:	483a      	ldr	r0, [pc, #232]	; (8006540 <__mdiff+0x114>)
 8006456:	f000 fb59 	bl	8006b0c <__assert_func>
 800645a:	2301      	movs	r3, #1
 800645c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006460:	4610      	mov	r0, r2
 8006462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006466:	bfa4      	itt	ge
 8006468:	4623      	movge	r3, r4
 800646a:	462c      	movge	r4, r5
 800646c:	4638      	mov	r0, r7
 800646e:	6861      	ldr	r1, [r4, #4]
 8006470:	bfa6      	itte	ge
 8006472:	461d      	movge	r5, r3
 8006474:	2600      	movge	r6, #0
 8006476:	2601      	movlt	r6, #1
 8006478:	f7ff fd42 	bl	8005f00 <_Balloc>
 800647c:	4602      	mov	r2, r0
 800647e:	b918      	cbnz	r0, 8006488 <__mdiff+0x5c>
 8006480:	f240 2145 	movw	r1, #581	; 0x245
 8006484:	4b2d      	ldr	r3, [pc, #180]	; (800653c <__mdiff+0x110>)
 8006486:	e7e5      	b.n	8006454 <__mdiff+0x28>
 8006488:	f102 0814 	add.w	r8, r2, #20
 800648c:	46c2      	mov	sl, r8
 800648e:	f04f 0c00 	mov.w	ip, #0
 8006492:	6927      	ldr	r7, [r4, #16]
 8006494:	60c6      	str	r6, [r0, #12]
 8006496:	692e      	ldr	r6, [r5, #16]
 8006498:	f104 0014 	add.w	r0, r4, #20
 800649c:	f105 0914 	add.w	r9, r5, #20
 80064a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80064a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064a8:	3410      	adds	r4, #16
 80064aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80064b2:	fa1f f18b 	uxth.w	r1, fp
 80064b6:	4461      	add	r1, ip
 80064b8:	fa1f fc83 	uxth.w	ip, r3
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	eba1 010c 	sub.w	r1, r1, ip
 80064c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064ca:	b289      	uxth	r1, r1
 80064cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80064d0:	454e      	cmp	r6, r9
 80064d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064d6:	f84a 1b04 	str.w	r1, [sl], #4
 80064da:	d8e6      	bhi.n	80064aa <__mdiff+0x7e>
 80064dc:	1b73      	subs	r3, r6, r5
 80064de:	3b15      	subs	r3, #21
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	3515      	adds	r5, #21
 80064e6:	3304      	adds	r3, #4
 80064e8:	42ae      	cmp	r6, r5
 80064ea:	bf38      	it	cc
 80064ec:	2304      	movcc	r3, #4
 80064ee:	4418      	add	r0, r3
 80064f0:	4443      	add	r3, r8
 80064f2:	461e      	mov	r6, r3
 80064f4:	4605      	mov	r5, r0
 80064f6:	4575      	cmp	r5, lr
 80064f8:	d30e      	bcc.n	8006518 <__mdiff+0xec>
 80064fa:	f10e 0103 	add.w	r1, lr, #3
 80064fe:	1a09      	subs	r1, r1, r0
 8006500:	f021 0103 	bic.w	r1, r1, #3
 8006504:	3803      	subs	r0, #3
 8006506:	4586      	cmp	lr, r0
 8006508:	bf38      	it	cc
 800650a:	2100      	movcc	r1, #0
 800650c:	440b      	add	r3, r1
 800650e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006512:	b189      	cbz	r1, 8006538 <__mdiff+0x10c>
 8006514:	6117      	str	r7, [r2, #16]
 8006516:	e7a3      	b.n	8006460 <__mdiff+0x34>
 8006518:	f855 8b04 	ldr.w	r8, [r5], #4
 800651c:	fa1f f188 	uxth.w	r1, r8
 8006520:	4461      	add	r1, ip
 8006522:	140c      	asrs	r4, r1, #16
 8006524:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006528:	b289      	uxth	r1, r1
 800652a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800652e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006532:	f846 1b04 	str.w	r1, [r6], #4
 8006536:	e7de      	b.n	80064f6 <__mdiff+0xca>
 8006538:	3f01      	subs	r7, #1
 800653a:	e7e8      	b.n	800650e <__mdiff+0xe2>
 800653c:	08006dda 	.word	0x08006dda
 8006540:	08006deb 	.word	0x08006deb

08006544 <__d2b>:
 8006544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006546:	2101      	movs	r1, #1
 8006548:	4617      	mov	r7, r2
 800654a:	461c      	mov	r4, r3
 800654c:	9e08      	ldr	r6, [sp, #32]
 800654e:	f7ff fcd7 	bl	8005f00 <_Balloc>
 8006552:	4605      	mov	r5, r0
 8006554:	b930      	cbnz	r0, 8006564 <__d2b+0x20>
 8006556:	4602      	mov	r2, r0
 8006558:	f240 310f 	movw	r1, #783	; 0x30f
 800655c:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <__d2b+0xa4>)
 800655e:	4823      	ldr	r0, [pc, #140]	; (80065ec <__d2b+0xa8>)
 8006560:	f000 fad4 	bl	8006b0c <__assert_func>
 8006564:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006568:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800656c:	bb24      	cbnz	r4, 80065b8 <__d2b+0x74>
 800656e:	2f00      	cmp	r7, #0
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	d026      	beq.n	80065c2 <__d2b+0x7e>
 8006574:	4668      	mov	r0, sp
 8006576:	9700      	str	r7, [sp, #0]
 8006578:	f7ff fd8a 	bl	8006090 <__lo0bits>
 800657c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006580:	b1e8      	cbz	r0, 80065be <__d2b+0x7a>
 8006582:	f1c0 0320 	rsb	r3, r0, #32
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	430b      	orrs	r3, r1
 800658c:	40c2      	lsrs	r2, r0
 800658e:	616b      	str	r3, [r5, #20]
 8006590:	9201      	str	r2, [sp, #4]
 8006592:	9b01      	ldr	r3, [sp, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf14      	ite	ne
 8006598:	2102      	movne	r1, #2
 800659a:	2101      	moveq	r1, #1
 800659c:	61ab      	str	r3, [r5, #24]
 800659e:	6129      	str	r1, [r5, #16]
 80065a0:	b1bc      	cbz	r4, 80065d2 <__d2b+0x8e>
 80065a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80065a6:	4404      	add	r4, r0
 80065a8:	6034      	str	r4, [r6, #0]
 80065aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	6018      	str	r0, [r3, #0]
 80065b2:	4628      	mov	r0, r5
 80065b4:	b003      	add	sp, #12
 80065b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065bc:	e7d7      	b.n	800656e <__d2b+0x2a>
 80065be:	6169      	str	r1, [r5, #20]
 80065c0:	e7e7      	b.n	8006592 <__d2b+0x4e>
 80065c2:	a801      	add	r0, sp, #4
 80065c4:	f7ff fd64 	bl	8006090 <__lo0bits>
 80065c8:	9b01      	ldr	r3, [sp, #4]
 80065ca:	2101      	movs	r1, #1
 80065cc:	616b      	str	r3, [r5, #20]
 80065ce:	3020      	adds	r0, #32
 80065d0:	e7e5      	b.n	800659e <__d2b+0x5a>
 80065d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80065da:	6030      	str	r0, [r6, #0]
 80065dc:	6918      	ldr	r0, [r3, #16]
 80065de:	f7ff fd37 	bl	8006050 <__hi0bits>
 80065e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80065e6:	e7e2      	b.n	80065ae <__d2b+0x6a>
 80065e8:	08006dda 	.word	0x08006dda
 80065ec:	08006deb 	.word	0x08006deb

080065f0 <__sfputc_r>:
 80065f0:	6893      	ldr	r3, [r2, #8]
 80065f2:	b410      	push	{r4}
 80065f4:	3b01      	subs	r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	6093      	str	r3, [r2, #8]
 80065fa:	da07      	bge.n	800660c <__sfputc_r+0x1c>
 80065fc:	6994      	ldr	r4, [r2, #24]
 80065fe:	42a3      	cmp	r3, r4
 8006600:	db01      	blt.n	8006606 <__sfputc_r+0x16>
 8006602:	290a      	cmp	r1, #10
 8006604:	d102      	bne.n	800660c <__sfputc_r+0x1c>
 8006606:	bc10      	pop	{r4}
 8006608:	f7fe bbef 	b.w	8004dea <__swbuf_r>
 800660c:	6813      	ldr	r3, [r2, #0]
 800660e:	1c58      	adds	r0, r3, #1
 8006610:	6010      	str	r0, [r2, #0]
 8006612:	7019      	strb	r1, [r3, #0]
 8006614:	4608      	mov	r0, r1
 8006616:	bc10      	pop	{r4}
 8006618:	4770      	bx	lr

0800661a <__sfputs_r>:
 800661a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661c:	4606      	mov	r6, r0
 800661e:	460f      	mov	r7, r1
 8006620:	4614      	mov	r4, r2
 8006622:	18d5      	adds	r5, r2, r3
 8006624:	42ac      	cmp	r4, r5
 8006626:	d101      	bne.n	800662c <__sfputs_r+0x12>
 8006628:	2000      	movs	r0, #0
 800662a:	e007      	b.n	800663c <__sfputs_r+0x22>
 800662c:	463a      	mov	r2, r7
 800662e:	4630      	mov	r0, r6
 8006630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006634:	f7ff ffdc 	bl	80065f0 <__sfputc_r>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d1f3      	bne.n	8006624 <__sfputs_r+0xa>
 800663c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006640 <_vfiprintf_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	460d      	mov	r5, r1
 8006646:	4614      	mov	r4, r2
 8006648:	4698      	mov	r8, r3
 800664a:	4606      	mov	r6, r0
 800664c:	b09d      	sub	sp, #116	; 0x74
 800664e:	b118      	cbz	r0, 8006658 <_vfiprintf_r+0x18>
 8006650:	6a03      	ldr	r3, [r0, #32]
 8006652:	b90b      	cbnz	r3, 8006658 <_vfiprintf_r+0x18>
 8006654:	f7fe fa34 	bl	8004ac0 <__sinit>
 8006658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800665a:	07d9      	lsls	r1, r3, #31
 800665c:	d405      	bmi.n	800666a <_vfiprintf_r+0x2a>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	059a      	lsls	r2, r3, #22
 8006662:	d402      	bmi.n	800666a <_vfiprintf_r+0x2a>
 8006664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006666:	f7fe fcd2 	bl	800500e <__retarget_lock_acquire_recursive>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	071b      	lsls	r3, r3, #28
 800666e:	d501      	bpl.n	8006674 <_vfiprintf_r+0x34>
 8006670:	692b      	ldr	r3, [r5, #16]
 8006672:	b99b      	cbnz	r3, 800669c <_vfiprintf_r+0x5c>
 8006674:	4629      	mov	r1, r5
 8006676:	4630      	mov	r0, r6
 8006678:	f7fe fbf4 	bl	8004e64 <__swsetup_r>
 800667c:	b170      	cbz	r0, 800669c <_vfiprintf_r+0x5c>
 800667e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006680:	07dc      	lsls	r4, r3, #31
 8006682:	d504      	bpl.n	800668e <_vfiprintf_r+0x4e>
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	b01d      	add	sp, #116	; 0x74
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	0598      	lsls	r0, r3, #22
 8006692:	d4f7      	bmi.n	8006684 <_vfiprintf_r+0x44>
 8006694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006696:	f7fe fcbb 	bl	8005010 <__retarget_lock_release_recursive>
 800669a:	e7f3      	b.n	8006684 <_vfiprintf_r+0x44>
 800669c:	2300      	movs	r3, #0
 800669e:	9309      	str	r3, [sp, #36]	; 0x24
 80066a0:	2320      	movs	r3, #32
 80066a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a6:	2330      	movs	r3, #48	; 0x30
 80066a8:	f04f 0901 	mov.w	r9, #1
 80066ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006860 <_vfiprintf_r+0x220>
 80066b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b8:	4623      	mov	r3, r4
 80066ba:	469a      	mov	sl, r3
 80066bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c0:	b10a      	cbz	r2, 80066c6 <_vfiprintf_r+0x86>
 80066c2:	2a25      	cmp	r2, #37	; 0x25
 80066c4:	d1f9      	bne.n	80066ba <_vfiprintf_r+0x7a>
 80066c6:	ebba 0b04 	subs.w	fp, sl, r4
 80066ca:	d00b      	beq.n	80066e4 <_vfiprintf_r+0xa4>
 80066cc:	465b      	mov	r3, fp
 80066ce:	4622      	mov	r2, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ffa1 	bl	800661a <__sfputs_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	f000 80a9 	beq.w	8006830 <_vfiprintf_r+0x1f0>
 80066de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e0:	445a      	add	r2, fp
 80066e2:	9209      	str	r2, [sp, #36]	; 0x24
 80066e4:	f89a 3000 	ldrb.w	r3, [sl]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a1 	beq.w	8006830 <_vfiprintf_r+0x1f0>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f8:	f10a 0a01 	add.w	sl, sl, #1
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	9307      	str	r3, [sp, #28]
 8006700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006704:	931a      	str	r3, [sp, #104]	; 0x68
 8006706:	4654      	mov	r4, sl
 8006708:	2205      	movs	r2, #5
 800670a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670e:	4854      	ldr	r0, [pc, #336]	; (8006860 <_vfiprintf_r+0x220>)
 8006710:	f7fe fc7f 	bl	8005012 <memchr>
 8006714:	9a04      	ldr	r2, [sp, #16]
 8006716:	b9d8      	cbnz	r0, 8006750 <_vfiprintf_r+0x110>
 8006718:	06d1      	lsls	r1, r2, #27
 800671a:	bf44      	itt	mi
 800671c:	2320      	movmi	r3, #32
 800671e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006722:	0713      	lsls	r3, r2, #28
 8006724:	bf44      	itt	mi
 8006726:	232b      	movmi	r3, #43	; 0x2b
 8006728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672c:	f89a 3000 	ldrb.w	r3, [sl]
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d015      	beq.n	8006760 <_vfiprintf_r+0x120>
 8006734:	4654      	mov	r4, sl
 8006736:	2000      	movs	r0, #0
 8006738:	f04f 0c0a 	mov.w	ip, #10
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	4621      	mov	r1, r4
 8006740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006744:	3b30      	subs	r3, #48	; 0x30
 8006746:	2b09      	cmp	r3, #9
 8006748:	d94d      	bls.n	80067e6 <_vfiprintf_r+0x1a6>
 800674a:	b1b0      	cbz	r0, 800677a <_vfiprintf_r+0x13a>
 800674c:	9207      	str	r2, [sp, #28]
 800674e:	e014      	b.n	800677a <_vfiprintf_r+0x13a>
 8006750:	eba0 0308 	sub.w	r3, r0, r8
 8006754:	fa09 f303 	lsl.w	r3, r9, r3
 8006758:	4313      	orrs	r3, r2
 800675a:	46a2      	mov	sl, r4
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	e7d2      	b.n	8006706 <_vfiprintf_r+0xc6>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	9103      	str	r1, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfbb      	ittet	lt
 800676c:	425b      	neglt	r3, r3
 800676e:	f042 0202 	orrlt.w	r2, r2, #2
 8006772:	9307      	strge	r3, [sp, #28]
 8006774:	9307      	strlt	r3, [sp, #28]
 8006776:	bfb8      	it	lt
 8006778:	9204      	strlt	r2, [sp, #16]
 800677a:	7823      	ldrb	r3, [r4, #0]
 800677c:	2b2e      	cmp	r3, #46	; 0x2e
 800677e:	d10c      	bne.n	800679a <_vfiprintf_r+0x15a>
 8006780:	7863      	ldrb	r3, [r4, #1]
 8006782:	2b2a      	cmp	r3, #42	; 0x2a
 8006784:	d134      	bne.n	80067f0 <_vfiprintf_r+0x1b0>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3402      	adds	r4, #2
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9203      	str	r2, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfb8      	it	lt
 8006794:	f04f 33ff 	movlt.w	r3, #4294967295
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006864 <_vfiprintf_r+0x224>
 800679e:	2203      	movs	r2, #3
 80067a0:	4650      	mov	r0, sl
 80067a2:	7821      	ldrb	r1, [r4, #0]
 80067a4:	f7fe fc35 	bl	8005012 <memchr>
 80067a8:	b138      	cbz	r0, 80067ba <_vfiprintf_r+0x17a>
 80067aa:	2240      	movs	r2, #64	; 0x40
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	eba0 000a 	sub.w	r0, r0, sl
 80067b2:	4082      	lsls	r2, r0
 80067b4:	4313      	orrs	r3, r2
 80067b6:	3401      	adds	r4, #1
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067be:	2206      	movs	r2, #6
 80067c0:	4829      	ldr	r0, [pc, #164]	; (8006868 <_vfiprintf_r+0x228>)
 80067c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c6:	f7fe fc24 	bl	8005012 <memchr>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d03f      	beq.n	800684e <_vfiprintf_r+0x20e>
 80067ce:	4b27      	ldr	r3, [pc, #156]	; (800686c <_vfiprintf_r+0x22c>)
 80067d0:	bb1b      	cbnz	r3, 800681a <_vfiprintf_r+0x1da>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	3308      	adds	r3, #8
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	443b      	add	r3, r7
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	e768      	b.n	80066b8 <_vfiprintf_r+0x78>
 80067e6:	460c      	mov	r4, r1
 80067e8:	2001      	movs	r0, #1
 80067ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ee:	e7a6      	b.n	800673e <_vfiprintf_r+0xfe>
 80067f0:	2300      	movs	r3, #0
 80067f2:	f04f 0c0a 	mov.w	ip, #10
 80067f6:	4619      	mov	r1, r3
 80067f8:	3401      	adds	r4, #1
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006802:	3a30      	subs	r2, #48	; 0x30
 8006804:	2a09      	cmp	r2, #9
 8006806:	d903      	bls.n	8006810 <_vfiprintf_r+0x1d0>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0c6      	beq.n	800679a <_vfiprintf_r+0x15a>
 800680c:	9105      	str	r1, [sp, #20]
 800680e:	e7c4      	b.n	800679a <_vfiprintf_r+0x15a>
 8006810:	4604      	mov	r4, r0
 8006812:	2301      	movs	r3, #1
 8006814:	fb0c 2101 	mla	r1, ip, r1, r2
 8006818:	e7f0      	b.n	80067fc <_vfiprintf_r+0x1bc>
 800681a:	ab03      	add	r3, sp, #12
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	462a      	mov	r2, r5
 8006820:	4630      	mov	r0, r6
 8006822:	4b13      	ldr	r3, [pc, #76]	; (8006870 <_vfiprintf_r+0x230>)
 8006824:	a904      	add	r1, sp, #16
 8006826:	f7fd fcfd 	bl	8004224 <_printf_float>
 800682a:	4607      	mov	r7, r0
 800682c:	1c78      	adds	r0, r7, #1
 800682e:	d1d6      	bne.n	80067de <_vfiprintf_r+0x19e>
 8006830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006832:	07d9      	lsls	r1, r3, #31
 8006834:	d405      	bmi.n	8006842 <_vfiprintf_r+0x202>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d402      	bmi.n	8006842 <_vfiprintf_r+0x202>
 800683c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800683e:	f7fe fbe7 	bl	8005010 <__retarget_lock_release_recursive>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	065b      	lsls	r3, r3, #25
 8006846:	f53f af1d 	bmi.w	8006684 <_vfiprintf_r+0x44>
 800684a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800684c:	e71c      	b.n	8006688 <_vfiprintf_r+0x48>
 800684e:	ab03      	add	r3, sp, #12
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	462a      	mov	r2, r5
 8006854:	4630      	mov	r0, r6
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <_vfiprintf_r+0x230>)
 8006858:	a904      	add	r1, sp, #16
 800685a:	f7fd ff83 	bl	8004764 <_printf_i>
 800685e:	e7e4      	b.n	800682a <_vfiprintf_r+0x1ea>
 8006860:	08006f44 	.word	0x08006f44
 8006864:	08006f4a 	.word	0x08006f4a
 8006868:	08006f4e 	.word	0x08006f4e
 800686c:	08004225 	.word	0x08004225
 8006870:	0800661b 	.word	0x0800661b

08006874 <__sflush_r>:
 8006874:	898a      	ldrh	r2, [r1, #12]
 8006876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006878:	4605      	mov	r5, r0
 800687a:	0710      	lsls	r0, r2, #28
 800687c:	460c      	mov	r4, r1
 800687e:	d457      	bmi.n	8006930 <__sflush_r+0xbc>
 8006880:	684b      	ldr	r3, [r1, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dc04      	bgt.n	8006890 <__sflush_r+0x1c>
 8006886:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	dc01      	bgt.n	8006890 <__sflush_r+0x1c>
 800688c:	2000      	movs	r0, #0
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006892:	2e00      	cmp	r6, #0
 8006894:	d0fa      	beq.n	800688c <__sflush_r+0x18>
 8006896:	2300      	movs	r3, #0
 8006898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800689c:	682f      	ldr	r7, [r5, #0]
 800689e:	6a21      	ldr	r1, [r4, #32]
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	d032      	beq.n	800690a <__sflush_r+0x96>
 80068a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	075a      	lsls	r2, r3, #29
 80068aa:	d505      	bpl.n	80068b8 <__sflush_r+0x44>
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	1ac0      	subs	r0, r0, r3
 80068b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068b2:	b10b      	cbz	r3, 80068b8 <__sflush_r+0x44>
 80068b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	2300      	movs	r3, #0
 80068ba:	4602      	mov	r2, r0
 80068bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068be:	4628      	mov	r0, r5
 80068c0:	6a21      	ldr	r1, [r4, #32]
 80068c2:	47b0      	blx	r6
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	d106      	bne.n	80068d8 <__sflush_r+0x64>
 80068ca:	6829      	ldr	r1, [r5, #0]
 80068cc:	291d      	cmp	r1, #29
 80068ce:	d82b      	bhi.n	8006928 <__sflush_r+0xb4>
 80068d0:	4a28      	ldr	r2, [pc, #160]	; (8006974 <__sflush_r+0x100>)
 80068d2:	410a      	asrs	r2, r1
 80068d4:	07d6      	lsls	r6, r2, #31
 80068d6:	d427      	bmi.n	8006928 <__sflush_r+0xb4>
 80068d8:	2200      	movs	r2, #0
 80068da:	6062      	str	r2, [r4, #4]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	04d9      	lsls	r1, r3, #19
 80068e0:	6022      	str	r2, [r4, #0]
 80068e2:	d504      	bpl.n	80068ee <__sflush_r+0x7a>
 80068e4:	1c42      	adds	r2, r0, #1
 80068e6:	d101      	bne.n	80068ec <__sflush_r+0x78>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b903      	cbnz	r3, 80068ee <__sflush_r+0x7a>
 80068ec:	6560      	str	r0, [r4, #84]	; 0x54
 80068ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f0:	602f      	str	r7, [r5, #0]
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d0ca      	beq.n	800688c <__sflush_r+0x18>
 80068f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068fa:	4299      	cmp	r1, r3
 80068fc:	d002      	beq.n	8006904 <__sflush_r+0x90>
 80068fe:	4628      	mov	r0, r5
 8006900:	f7ff fa02 	bl	8005d08 <_free_r>
 8006904:	2000      	movs	r0, #0
 8006906:	6360      	str	r0, [r4, #52]	; 0x34
 8006908:	e7c1      	b.n	800688e <__sflush_r+0x1a>
 800690a:	2301      	movs	r3, #1
 800690c:	4628      	mov	r0, r5
 800690e:	47b0      	blx	r6
 8006910:	1c41      	adds	r1, r0, #1
 8006912:	d1c8      	bne.n	80068a6 <__sflush_r+0x32>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0c5      	beq.n	80068a6 <__sflush_r+0x32>
 800691a:	2b1d      	cmp	r3, #29
 800691c:	d001      	beq.n	8006922 <__sflush_r+0xae>
 800691e:	2b16      	cmp	r3, #22
 8006920:	d101      	bne.n	8006926 <__sflush_r+0xb2>
 8006922:	602f      	str	r7, [r5, #0]
 8006924:	e7b2      	b.n	800688c <__sflush_r+0x18>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	e7ae      	b.n	800688e <__sflush_r+0x1a>
 8006930:	690f      	ldr	r7, [r1, #16]
 8006932:	2f00      	cmp	r7, #0
 8006934:	d0aa      	beq.n	800688c <__sflush_r+0x18>
 8006936:	0793      	lsls	r3, r2, #30
 8006938:	bf18      	it	ne
 800693a:	2300      	movne	r3, #0
 800693c:	680e      	ldr	r6, [r1, #0]
 800693e:	bf08      	it	eq
 8006940:	694b      	ldreq	r3, [r1, #20]
 8006942:	1bf6      	subs	r6, r6, r7
 8006944:	600f      	str	r7, [r1, #0]
 8006946:	608b      	str	r3, [r1, #8]
 8006948:	2e00      	cmp	r6, #0
 800694a:	dd9f      	ble.n	800688c <__sflush_r+0x18>
 800694c:	4633      	mov	r3, r6
 800694e:	463a      	mov	r2, r7
 8006950:	4628      	mov	r0, r5
 8006952:	6a21      	ldr	r1, [r4, #32]
 8006954:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006958:	47e0      	blx	ip
 800695a:	2800      	cmp	r0, #0
 800695c:	dc06      	bgt.n	800696c <__sflush_r+0xf8>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	e790      	b.n	800688e <__sflush_r+0x1a>
 800696c:	4407      	add	r7, r0
 800696e:	1a36      	subs	r6, r6, r0
 8006970:	e7ea      	b.n	8006948 <__sflush_r+0xd4>
 8006972:	bf00      	nop
 8006974:	dfbffffe 	.word	0xdfbffffe

08006978 <_fflush_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	690b      	ldr	r3, [r1, #16]
 800697c:	4605      	mov	r5, r0
 800697e:	460c      	mov	r4, r1
 8006980:	b913      	cbnz	r3, 8006988 <_fflush_r+0x10>
 8006982:	2500      	movs	r5, #0
 8006984:	4628      	mov	r0, r5
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	b118      	cbz	r0, 8006992 <_fflush_r+0x1a>
 800698a:	6a03      	ldr	r3, [r0, #32]
 800698c:	b90b      	cbnz	r3, 8006992 <_fflush_r+0x1a>
 800698e:	f7fe f897 	bl	8004ac0 <__sinit>
 8006992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f3      	beq.n	8006982 <_fflush_r+0xa>
 800699a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800699c:	07d0      	lsls	r0, r2, #31
 800699e:	d404      	bmi.n	80069aa <_fflush_r+0x32>
 80069a0:	0599      	lsls	r1, r3, #22
 80069a2:	d402      	bmi.n	80069aa <_fflush_r+0x32>
 80069a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069a6:	f7fe fb32 	bl	800500e <__retarget_lock_acquire_recursive>
 80069aa:	4628      	mov	r0, r5
 80069ac:	4621      	mov	r1, r4
 80069ae:	f7ff ff61 	bl	8006874 <__sflush_r>
 80069b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069b4:	4605      	mov	r5, r0
 80069b6:	07da      	lsls	r2, r3, #31
 80069b8:	d4e4      	bmi.n	8006984 <_fflush_r+0xc>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	059b      	lsls	r3, r3, #22
 80069be:	d4e1      	bmi.n	8006984 <_fflush_r+0xc>
 80069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c2:	f7fe fb25 	bl	8005010 <__retarget_lock_release_recursive>
 80069c6:	e7dd      	b.n	8006984 <_fflush_r+0xc>

080069c8 <__swhatbuf_r>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	460c      	mov	r4, r1
 80069cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d0:	4615      	mov	r5, r2
 80069d2:	2900      	cmp	r1, #0
 80069d4:	461e      	mov	r6, r3
 80069d6:	b096      	sub	sp, #88	; 0x58
 80069d8:	da0c      	bge.n	80069f4 <__swhatbuf_r+0x2c>
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	2100      	movs	r1, #0
 80069de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069e2:	bf0c      	ite	eq
 80069e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069e8:	2340      	movne	r3, #64	; 0x40
 80069ea:	2000      	movs	r0, #0
 80069ec:	6031      	str	r1, [r6, #0]
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	b016      	add	sp, #88	; 0x58
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	466a      	mov	r2, sp
 80069f6:	f000 f849 	bl	8006a8c <_fstat_r>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	dbed      	blt.n	80069da <__swhatbuf_r+0x12>
 80069fe:	9901      	ldr	r1, [sp, #4]
 8006a00:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a04:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a08:	4259      	negs	r1, r3
 8006a0a:	4159      	adcs	r1, r3
 8006a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a10:	e7eb      	b.n	80069ea <__swhatbuf_r+0x22>

08006a12 <__smakebuf_r>:
 8006a12:	898b      	ldrh	r3, [r1, #12]
 8006a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a16:	079d      	lsls	r5, r3, #30
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	d507      	bpl.n	8006a2e <__smakebuf_r+0x1c>
 8006a1e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	2301      	movs	r3, #1
 8006a28:	6163      	str	r3, [r4, #20]
 8006a2a:	b002      	add	sp, #8
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
 8006a2e:	466a      	mov	r2, sp
 8006a30:	ab01      	add	r3, sp, #4
 8006a32:	f7ff ffc9 	bl	80069c8 <__swhatbuf_r>
 8006a36:	9900      	ldr	r1, [sp, #0]
 8006a38:	4605      	mov	r5, r0
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7ff f9d4 	bl	8005de8 <_malloc_r>
 8006a40:	b948      	cbnz	r0, 8006a56 <__smakebuf_r+0x44>
 8006a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a46:	059a      	lsls	r2, r3, #22
 8006a48:	d4ef      	bmi.n	8006a2a <__smakebuf_r+0x18>
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	f043 0302 	orr.w	r3, r3, #2
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	e7e3      	b.n	8006a1e <__smakebuf_r+0xc>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	6020      	str	r0, [r4, #0]
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	9b00      	ldr	r3, [sp, #0]
 8006a62:	6120      	str	r0, [r4, #16]
 8006a64:	6163      	str	r3, [r4, #20]
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	b15b      	cbz	r3, 8006a82 <__smakebuf_r+0x70>
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a70:	f000 f81e 	bl	8006ab0 <_isatty_r>
 8006a74:	b128      	cbz	r0, 8006a82 <__smakebuf_r+0x70>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	431d      	orrs	r5, r3
 8006a86:	81a5      	strh	r5, [r4, #12]
 8006a88:	e7cf      	b.n	8006a2a <__smakebuf_r+0x18>
	...

08006a8c <_fstat_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4d06      	ldr	r5, [pc, #24]	; (8006aac <_fstat_r+0x20>)
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	f7fa fe3a 	bl	8001712 <_fstat>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d102      	bne.n	8006aa8 <_fstat_r+0x1c>
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	b103      	cbz	r3, 8006aa8 <_fstat_r+0x1c>
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	bf00      	nop
 8006aac:	200004b0 	.word	0x200004b0

08006ab0 <_isatty_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4d05      	ldr	r5, [pc, #20]	; (8006acc <_isatty_r+0x1c>)
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fa fe38 	bl	8001730 <_isatty>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_isatty_r+0x1a>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_isatty_r+0x1a>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	200004b0 	.word	0x200004b0

08006ad0 <_sbrk_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4d05      	ldr	r5, [pc, #20]	; (8006aec <_sbrk_r+0x1c>)
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fa fe3e 	bl	800175c <_sbrk>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_sbrk_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_sbrk_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	200004b0 	.word	0x200004b0

08006af0 <memcpy>:
 8006af0:	440a      	add	r2, r1
 8006af2:	4291      	cmp	r1, r2
 8006af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af8:	d100      	bne.n	8006afc <memcpy+0xc>
 8006afa:	4770      	bx	lr
 8006afc:	b510      	push	{r4, lr}
 8006afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b02:	4291      	cmp	r1, r2
 8006b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b08:	d1f9      	bne.n	8006afe <memcpy+0xe>
 8006b0a:	bd10      	pop	{r4, pc}

08006b0c <__assert_func>:
 8006b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b0e:	4614      	mov	r4, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <__assert_func+0x2c>)
 8006b14:	4605      	mov	r5, r0
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68d8      	ldr	r0, [r3, #12]
 8006b1a:	b14c      	cbz	r4, 8006b30 <__assert_func+0x24>
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <__assert_func+0x30>)
 8006b1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b22:	9100      	str	r1, [sp, #0]
 8006b24:	462b      	mov	r3, r5
 8006b26:	4906      	ldr	r1, [pc, #24]	; (8006b40 <__assert_func+0x34>)
 8006b28:	f000 f842 	bl	8006bb0 <fiprintf>
 8006b2c:	f000 f852 	bl	8006bd4 <abort>
 8006b30:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <__assert_func+0x38>)
 8006b32:	461c      	mov	r4, r3
 8006b34:	e7f3      	b.n	8006b1e <__assert_func+0x12>
 8006b36:	bf00      	nop
 8006b38:	2000008c 	.word	0x2000008c
 8006b3c:	08006f5f 	.word	0x08006f5f
 8006b40:	08006f6c 	.word	0x08006f6c
 8006b44:	08006f9a 	.word	0x08006f9a

08006b48 <_calloc_r>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	fba1 5402 	umull	r5, r4, r1, r2
 8006b4e:	b934      	cbnz	r4, 8006b5e <_calloc_r+0x16>
 8006b50:	4629      	mov	r1, r5
 8006b52:	f7ff f949 	bl	8005de8 <_malloc_r>
 8006b56:	4606      	mov	r6, r0
 8006b58:	b928      	cbnz	r0, 8006b66 <_calloc_r+0x1e>
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
 8006b5e:	220c      	movs	r2, #12
 8006b60:	2600      	movs	r6, #0
 8006b62:	6002      	str	r2, [r0, #0]
 8006b64:	e7f9      	b.n	8006b5a <_calloc_r+0x12>
 8006b66:	462a      	mov	r2, r5
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f7fe f9d3 	bl	8004f14 <memset>
 8006b6e:	e7f4      	b.n	8006b5a <_calloc_r+0x12>

08006b70 <__ascii_mbtowc>:
 8006b70:	b082      	sub	sp, #8
 8006b72:	b901      	cbnz	r1, 8006b76 <__ascii_mbtowc+0x6>
 8006b74:	a901      	add	r1, sp, #4
 8006b76:	b142      	cbz	r2, 8006b8a <__ascii_mbtowc+0x1a>
 8006b78:	b14b      	cbz	r3, 8006b8e <__ascii_mbtowc+0x1e>
 8006b7a:	7813      	ldrb	r3, [r2, #0]
 8006b7c:	600b      	str	r3, [r1, #0]
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	1e10      	subs	r0, r2, #0
 8006b82:	bf18      	it	ne
 8006b84:	2001      	movne	r0, #1
 8006b86:	b002      	add	sp, #8
 8006b88:	4770      	bx	lr
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	e7fb      	b.n	8006b86 <__ascii_mbtowc+0x16>
 8006b8e:	f06f 0001 	mvn.w	r0, #1
 8006b92:	e7f8      	b.n	8006b86 <__ascii_mbtowc+0x16>

08006b94 <__ascii_wctomb>:
 8006b94:	4603      	mov	r3, r0
 8006b96:	4608      	mov	r0, r1
 8006b98:	b141      	cbz	r1, 8006bac <__ascii_wctomb+0x18>
 8006b9a:	2aff      	cmp	r2, #255	; 0xff
 8006b9c:	d904      	bls.n	8006ba8 <__ascii_wctomb+0x14>
 8006b9e:	228a      	movs	r2, #138	; 0x8a
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	4770      	bx	lr
 8006ba8:	2001      	movs	r0, #1
 8006baa:	700a      	strb	r2, [r1, #0]
 8006bac:	4770      	bx	lr
	...

08006bb0 <fiprintf>:
 8006bb0:	b40e      	push	{r1, r2, r3}
 8006bb2:	b503      	push	{r0, r1, lr}
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <fiprintf+0x20>)
 8006bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bbe:	6800      	ldr	r0, [r0, #0]
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	f7ff fd3d 	bl	8006640 <_vfiprintf_r>
 8006bc6:	b002      	add	sp, #8
 8006bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bcc:	b003      	add	sp, #12
 8006bce:	4770      	bx	lr
 8006bd0:	2000008c 	.word	0x2000008c

08006bd4 <abort>:
 8006bd4:	2006      	movs	r0, #6
 8006bd6:	b508      	push	{r3, lr}
 8006bd8:	f000 f82c 	bl	8006c34 <raise>
 8006bdc:	2001      	movs	r0, #1
 8006bde:	f7fa fd66 	bl	80016ae <_exit>

08006be2 <_raise_r>:
 8006be2:	291f      	cmp	r1, #31
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4604      	mov	r4, r0
 8006be8:	460d      	mov	r5, r1
 8006bea:	d904      	bls.n	8006bf6 <_raise_r+0x14>
 8006bec:	2316      	movs	r3, #22
 8006bee:	6003      	str	r3, [r0, #0]
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006bf8:	b112      	cbz	r2, 8006c00 <_raise_r+0x1e>
 8006bfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bfe:	b94b      	cbnz	r3, 8006c14 <_raise_r+0x32>
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 f831 	bl	8006c68 <_getpid_r>
 8006c06:	462a      	mov	r2, r5
 8006c08:	4601      	mov	r1, r0
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c10:	f000 b818 	b.w	8006c44 <_kill_r>
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d00a      	beq.n	8006c2e <_raise_r+0x4c>
 8006c18:	1c59      	adds	r1, r3, #1
 8006c1a:	d103      	bne.n	8006c24 <_raise_r+0x42>
 8006c1c:	2316      	movs	r3, #22
 8006c1e:	6003      	str	r3, [r0, #0]
 8006c20:	2001      	movs	r0, #1
 8006c22:	e7e7      	b.n	8006bf4 <_raise_r+0x12>
 8006c24:	2400      	movs	r4, #0
 8006c26:	4628      	mov	r0, r5
 8006c28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c2c:	4798      	blx	r3
 8006c2e:	2000      	movs	r0, #0
 8006c30:	e7e0      	b.n	8006bf4 <_raise_r+0x12>
	...

08006c34 <raise>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <raise+0xc>)
 8006c36:	4601      	mov	r1, r0
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f7ff bfd2 	b.w	8006be2 <_raise_r>
 8006c3e:	bf00      	nop
 8006c40:	2000008c 	.word	0x2000008c

08006c44 <_kill_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	2300      	movs	r3, #0
 8006c48:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <_kill_r+0x20>)
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	f7fa fd1c 	bl	800168e <_kill>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	d102      	bne.n	8006c60 <_kill_r+0x1c>
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	b103      	cbz	r3, 8006c60 <_kill_r+0x1c>
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	bd38      	pop	{r3, r4, r5, pc}
 8006c62:	bf00      	nop
 8006c64:	200004b0 	.word	0x200004b0

08006c68 <_getpid_r>:
 8006c68:	f7fa bd0a 	b.w	8001680 <_getpid>

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
