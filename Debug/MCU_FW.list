
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006ab8  08006ab8  00007ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e78  08006e78  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006e78  08006e78  00007e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e80  08006e80  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e80  08006e80  00007e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e84  08006e84  00007e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006e88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001d4  0800705c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800705c  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af0b  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc2  00000000  00000000  00013108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00014cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000818  00000000  00000000  00015730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f7d  00000000  00000000  00015f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d19c  00000000  00000000  0002dec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086aa5  00000000  00000000  0003b061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1b06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003acc  00000000  00000000  000c1b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c5618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a9c 	.word	0x08006a9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006a9c 	.word	0x08006a9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <LCD_SendInternal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	460b      	mov	r3, r1
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	4613      	mov	r3, r2
 8000a98:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4822      	ldr	r0, [pc, #136]	@ (8000b30 <LCD_SendInternal+0xa8>)
 8000aa6:	f001 fc4b 	bl	8002340 <HAL_I2C_IsDeviceReady>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d000      	beq.n	8000ab6 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ab4:	e7f1      	b.n	8000a9a <LCD_SendInternal+0x12>
            break;
 8000ab6:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|LCD_BACKLIGHT|LCD_PIN_EN;
 8000ac6:	7bba      	ldrb	r2, [r7, #14]
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|LCD_BACKLIGHT;
 8000ad6:	7bba      	ldrb	r2, [r7, #14]
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|LCD_BACKLIGHT|LCD_PIN_EN;
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f043 030c 	orr.w	r3, r3, #12
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|LCD_BACKLIGHT;
 8000af6:	7b7a      	ldrb	r2, [r7, #13]
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2304      	movs	r3, #4
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <LCD_SendInternal+0xa8>)
 8000b18:	f001 fb14 	bl	8002144 <HAL_I2C_Master_Transmit>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000b20:	2005      	movs	r0, #5
 8000b22:	f000 fe31 	bl	8001788 <HAL_Delay>
    return res;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200001f0 	.word	0x200001f0

08000b34 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000b44:	79b9      	ldrb	r1, [r7, #6]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff9c 	bl	8000a88 <LCD_SendInternal>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8000b68:	79b9      	ldrb	r1, [r7, #6]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8a 	bl	8000a88 <LCD_SendInternal>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0x30);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2130      	movs	r1, #48	@ 0x30
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffd2 	bl	8000b34 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0x02);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffcd 	bl	8000b34 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	210c      	movs	r1, #12
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffc8 	bl	8000b34 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffc3 	bl	8000b34 <LCD_SendCommand>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	6039      	str	r1, [r7, #0]
 8000bc0:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000bc2:	e009      	b.n	8000bd8 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffc3 	bl	8000b58 <LCD_SendData>
        str++;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f1      	bne.n	8000bc4 <LCD_SendString+0xe>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <_write>:
uint8_t UART1_Len = 0;

unsigned char UART1_Rx_End = 0;


int _write(int file, unsigned char *p, int len) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_write+0x5c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d107      	bne.n	8000c10 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	230a      	movs	r3, #10
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	4810      	ldr	r0, [pc, #64]	@ (8000c4c <_write+0x60>)
 8000c0a:	f002 fb81 	bl	8003310 <HAL_UART_Transmit>
 8000c0e:	e016      	b.n	8000c3e <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <_write+0x5c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d107      	bne.n	8000c28 <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <_write+0x64>)
 8000c22:	f002 fb75 	bl	8003310 <HAL_UART_Transmit>
 8000c26:	e00a      	b.n	8000c3e <_write+0x52>
	} else if (UART_Print_Port == 2) {
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_write+0x5c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d106      	bne.n	8000c3e <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	230a      	movs	r3, #10
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <_write+0x68>)
 8000c3a:	f002 fb69 	bl	8003310 <HAL_UART_Transmit>
	}
	return len;
 8000c3e:	687b      	ldr	r3, [r7, #4]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000031c 	.word	0x2000031c
 8000c4c:	20000244 	.word	0x20000244
 8000c50:	2000028c 	.word	0x2000028c
 8000c54:	200002d4 	.word	0x200002d4

08000c58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c5c:	f000 fd32 	bl	80016c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c60:	f000 f8ce 	bl	8000e00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c64:	f000 f9b8 	bl	8000fd8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c68:	f000 f90a 	bl	8000e80 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000c6c:	f000 f936 	bl	8000edc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000c70:	f000 f95e 	bl	8000f30 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000c74:	f000 f986 	bl	8000f84 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4952      	ldr	r1, [pc, #328]	@ (8000dc4 <main+0x16c>)
 8000c7c:	4852      	ldr	r0, [pc, #328]	@ (8000dc8 <main+0x170>)
 8000c7e:	f002 fbca 	bl	8003416 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	4951      	ldr	r1, [pc, #324]	@ (8000dcc <main+0x174>)
 8000c86:	4852      	ldr	r0, [pc, #328]	@ (8000dd0 <main+0x178>)
 8000c88:	f002 fbc5 	bl	8003416 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4951      	ldr	r1, [pc, #324]	@ (8000dd4 <main+0x17c>)
 8000c90:	4851      	ldr	r0, [pc, #324]	@ (8000dd8 <main+0x180>)
 8000c92:	f002 fbc0 	bl	8003416 <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000c96:	4b51      	ldr	r3, [pc, #324]	@ (8000ddc <main+0x184>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6898      	ldr	r0, [r3, #8]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f003 fed9 	bl	8004a58 <setvbuf>
	printf("HELL WORLD\r\n");
 8000ca6:	484e      	ldr	r0, [pc, #312]	@ (8000de0 <main+0x188>)
 8000ca8:	f003 fece 	bl	8004a48 <puts>
	LCD_Init(LCD_ADDR);
 8000cac:	204e      	movs	r0, #78	@ 0x4e
 8000cae:	f7ff ff65 	bl	8000b7c <LCD_Init>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	204e      	movs	r0, #78	@ 0x4e
 8000cb6:	f7ff ff3d 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	204e      	movs	r0, #78	@ 0x4e
 8000cbe:	f7ff ff39 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000cc2:	2114      	movs	r1, #20
 8000cc4:	204e      	movs	r0, #78	@ 0x4e
 8000cc6:	f7ff ff35 	bl	8000b34 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 0b10100010);
 8000cca:	21a2      	movs	r1, #162	@ 0xa2
 8000ccc:	204e      	movs	r0, #78	@ 0x4e
 8000cce:	f7ff ff43 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11010000);
 8000cd2:	21d0      	movs	r1, #208	@ 0xd0
 8000cd4:	204e      	movs	r0, #78	@ 0x4e
 8000cd6:	f7ff ff3f 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11000101);
 8000cda:	21c5      	movs	r1, #197	@ 0xc5
 8000cdc:	204e      	movs	r0, #78	@ 0x4e
 8000cde:	f7ff ff3b 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11011000);
 8000ce2:	21d8      	movs	r1, #216	@ 0xd8
 8000ce4:	204e      	movs	r0, #78	@ 0x4e
 8000ce6:	f7ff ff37 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11011101);
 8000cea:	21dd      	movs	r1, #221	@ 0xdd
 8000cec:	204e      	movs	r0, #78	@ 0x4e
 8000cee:	f7ff ff33 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10111101);
 8000cf2:	21bd      	movs	r1, #189	@ 0xbd
 8000cf4:	204e      	movs	r0, #78	@ 0x4e
 8000cf6:	f7ff ff2f 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110111);
 8000cfa:	21b7      	movs	r1, #183	@ 0xb7
 8000cfc:	204e      	movs	r0, #78	@ 0x4e
 8000cfe:	f7ff ff2b 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110000);
 8000d02:	21b0      	movs	r1, #176	@ 0xb0
 8000d04:	204e      	movs	r0, #78	@ 0x4e
 8000d06:	f7ff ff27 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10100011);
 8000d0a:	21a3      	movs	r1, #163	@ 0xa3
 8000d0c:	204e      	movs	r0, #78	@ 0x4e
 8000d0e:	f7ff ff23 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11000000);
 8000d12:	21c0      	movs	r1, #192	@ 0xc0
 8000d14:	204e      	movs	r0, #78	@ 0x4e
 8000d16:	f7ff ff1f 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11011110);
 8000d1a:	21de      	movs	r1, #222	@ 0xde
 8000d1c:	204e      	movs	r0, #78	@ 0x4e
 8000d1e:	f7ff ff1b 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110010);
 8000d22:	21b2      	movs	r1, #178	@ 0xb2
 8000d24:	204e      	movs	r0, #78	@ 0x4e
 8000d26:	f7ff ff17 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10111101);
 8000d2a:	21bd      	movs	r1, #189	@ 0xbd
 8000d2c:	204e      	movs	r0, #78	@ 0x4e
 8000d2e:	f7ff ff13 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110111);
 8000d32:	21b7      	movs	r1, #183	@ 0xb7
 8000d34:	204e      	movs	r0, #78	@ 0x4e
 8000d36:	f7ff ff0f 	bl	8000b58 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8000d3a:	21c0      	movs	r1, #192	@ 0xc0
 8000d3c:	204e      	movs	r0, #78	@ 0x4e
 8000d3e:	f7ff fef9 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000d42:	2114      	movs	r1, #20
 8000d44:	204e      	movs	r0, #78	@ 0x4e
 8000d46:	f7ff fef5 	bl	8000b34 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Hell World www");
 8000d4a:	4926      	ldr	r1, [pc, #152]	@ (8000de4 <main+0x18c>)
 8000d4c:	204e      	movs	r0, #78	@ 0x4e
 8000d4e:	f7ff ff32 	bl	8000bb6 <LCD_SendString>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); //LAMP2
 8000d52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d56:	4824      	ldr	r0, [pc, #144]	@ (8000de8 <main+0x190>)
 8000d58:	f001 f896 	bl	8001e88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); //LAMP1
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4821      	ldr	r0, [pc, #132]	@ (8000de8 <main+0x190>)
 8000d62:	f001 f891 	bl	8001e88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); //BUZZER
 8000d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6a:	4820      	ldr	r0, [pc, #128]	@ (8000dec <main+0x194>)
 8000d6c:	f001 f88c 	bl	8001e88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
 8000d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d74:	481d      	ldr	r0, [pc, #116]	@ (8000dec <main+0x194>)
 8000d76:	f001 f887 	bl	8001e88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 8000d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7e:	481b      	ldr	r0, [pc, #108]	@ (8000dec <main+0x194>)
 8000d80:	f001 f882 	bl	8001e88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 8000d84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d88:	4818      	ldr	r0, [pc, #96]	@ (8000dec <main+0x194>)
 8000d8a:	f001 f87d 	bl	8001e88 <HAL_GPIO_TogglePin>

		if (UART1_Rx_End) {
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <main+0x198>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d010      	beq.n	8000db8 <main+0x160>
			printf("Echo\r\n");
 8000d96:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <main+0x19c>)
 8000d98:	f003 fe56 	bl	8004a48 <puts>
			HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <main+0x1a0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2302      	movs	r3, #2
 8000da4:	4915      	ldr	r1, [pc, #84]	@ (8000dfc <main+0x1a4>)
 8000da6:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <main+0x170>)
 8000da8:	f002 fab2 	bl	8003310 <HAL_UART_Transmit>
			UART1_Len = 0;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <main+0x1a0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
			UART1_Rx_End = 0;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <main+0x198>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1000);
 8000db8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dbc:	f000 fce4 	bl	8001788 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); //LAMP2
 8000dc0:	e7c7      	b.n	8000d52 <main+0xfa>
 8000dc2:	bf00      	nop
 8000dc4:	20000320 	.word	0x20000320
 8000dc8:	20000244 	.word	0x20000244
 8000dcc:	20000324 	.word	0x20000324
 8000dd0:	2000028c 	.word	0x2000028c
 8000dd4:	20000328 	.word	0x20000328
 8000dd8:	200002d4 	.word	0x200002d4
 8000ddc:	20000018 	.word	0x20000018
 8000de0:	08006ab8 	.word	0x08006ab8
 8000de4:	08006ac4 	.word	0x08006ac4
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	20000341 	.word	0x20000341
 8000df4:	08006ad4 	.word	0x08006ad4
 8000df8:	20000340 	.word	0x20000340
 8000dfc:	2000032c 	.word	0x2000032c

08000e00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b090      	sub	sp, #64	@ 0x40
 8000e04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	2228      	movs	r2, #40	@ 0x28
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 ffae 	bl	8004d70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000e36:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fe05 	bl	8002a50 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x50>
		Error_Handler();
 8000e4c:	f000 f9d0 	bl	80011f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 f873 	bl	8002f54 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x78>
		Error_Handler();
 8000e74:	f000 f9bc 	bl	80011f0 <Error_Handler>
	}
}
 8000e78:	bf00      	nop
 8000e7a:	3740      	adds	r7, #64	@ 0x40
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	@ (8000ed4 <MX_I2C1_Init+0x54>)
 8000e88:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000e8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <MX_I2C1_Init+0x58>)
 8000e8e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000e9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ea2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_I2C1_Init+0x50>)
 8000ebe:	f000 fffd 	bl	8001ebc <HAL_I2C_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000ec8:	f000 f992 	bl	80011f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200001f0 	.word	0x200001f0
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	000186a0 	.word	0x000186a0

08000edc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_USART1_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f14:	f002 f9ac 	bl	8003270 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f1e:	f000 f967 	bl	80011f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000244 	.word	0x20000244
 8000f2c:	40013800 	.word	0x40013800

08000f30 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000f40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f002 f982 	bl	8003270 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f72:	f000 f93d 	bl	80011f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000028c 	.word	0x2000028c
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <MX_USART3_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fbc:	f002 f958 	bl	8003270 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000fc6:	f000 f913 	bl	80011f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002d4 	.word	0x200002d4
 8000fd4:	40004800 	.word	0x40004800

08000fd8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <MX_GPIO_Init+0x104>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80010dc <MX_GPIO_Init+0x104>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <MX_GPIO_Init+0x104>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b35      	ldr	r3, [pc, #212]	@ (80010dc <MX_GPIO_Init+0x104>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a34      	ldr	r2, [pc, #208]	@ (80010dc <MX_GPIO_Init+0x104>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b32      	ldr	r3, [pc, #200]	@ (80010dc <MX_GPIO_Init+0x104>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin,
 800101c:	2200      	movs	r2, #0
 800101e:	f641 0103 	movw	r1, #6147	@ 0x1803
 8001022:	482f      	ldr	r0, [pc, #188]	@ (80010e0 <MX_GPIO_Init+0x108>)
 8001024:	f000 ff18 	bl	8001e58 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 41c6 	mov.w	r1, #25344	@ 0x6300
 800102e:	482d      	ldr	r0, [pc, #180]	@ (80010e4 <MX_GPIO_Init+0x10c>)
 8001030:	f000 ff12 	bl	8001e58 <HAL_GPIO_WritePin>
	STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
	GPIO_InitStruct.Pin = LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin;
 8001034:	f641 0303 	movw	r3, #6147	@ 0x1803
 8001038:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	4824      	ldr	r0, [pc, #144]	@ (80010e0 <MX_GPIO_Init+0x108>)
 800104e:	f000 fd7f 	bl	8001b50 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_AUX_Pin */
	GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	481e      	ldr	r0, [pc, #120]	@ (80010e0 <MX_GPIO_Init+0x108>)
 8001066:	f000 fd73 	bl	8001b50 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 800106a:	23e0      	movs	r3, #224	@ 0xe0
 800106c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106e:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <MX_GPIO_Init+0x110>)
 8001070:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4619      	mov	r1, r3
 800107c:	4818      	ldr	r0, [pc, #96]	@ (80010e0 <MX_GPIO_Init+0x108>)
 800107e:	f000 fd67 	bl	8001b50 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN5_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin | BTN5_Pin;
 8001082:	2303      	movs	r3, #3
 8001084:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_GPIO_Init+0x110>)
 8001088:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4619      	mov	r1, r3
 8001094:	4813      	ldr	r0, [pc, #76]	@ (80010e4 <MX_GPIO_Init+0x10c>)
 8001096:	f000 fd5b 	bl	8001b50 <HAL_GPIO_Init>

	/*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
	GPIO_InitStruct.Pin = STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin;
 800109a:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 800109e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4619      	mov	r1, r3
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <MX_GPIO_Init+0x10c>)
 80010b4:	f000 fd4c 	bl	8001b50 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_SLCT_Pin */
	GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 80010b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_GPIO_Init+0x108>)
 80010ce:	f000 fd3f 	bl	8001b50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	10110000 	.word	0x10110000

080010ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	if (huart->Instance == USART1) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a30      	ldr	r2, [pc, #192]	@ (80011bc <HAL_UART_RxCpltCallback+0xd0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d138      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 80010fe:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <HAL_UART_RxCpltCallback+0xd4>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 8001104:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <HAL_UART_RxCpltCallback+0xd8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_UART_RxCpltCallback+0x26>
 800110c:	2b01      	cmp	r3, #1
 800110e:	d00c      	beq.n	800112a <HAL_UART_RxCpltCallback+0x3e>
 8001110:	e024      	b.n	800115c <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 8001112:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <HAL_UART_RxCpltCallback+0xdc>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d103      	bne.n	8001122 <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 800111a:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <HAL_UART_RxCpltCallback+0xd8>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8001120:	e020      	b.n	8001164 <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HAL_UART_RxCpltCallback+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
			break;
 8001128:	e01c      	b.n	8001164 <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 800112a:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <HAL_UART_RxCpltCallback+0xdc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d106      	bne.n	8001140 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 8001132:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <HAL_UART_RxCpltCallback+0xd4>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HAL_UART_RxCpltCallback+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 800113e:	e011      	b.n	8001164 <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <HAL_UART_RxCpltCallback+0xe0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_UART_RxCpltCallback+0xdc>)
 8001148:	7819      	ldrb	r1, [r3, #0]
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <HAL_UART_RxCpltCallback+0xe4>)
 800114c:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <HAL_UART_RxCpltCallback+0xe0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_UART_RxCpltCallback+0xe0>)
 8001158:	701a      	strb	r2, [r3, #0]
			break;
 800115a:	e003      	b.n	8001164 <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_UART_RxCpltCallback+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			break;
 8001162:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	4918      	ldr	r1, [pc, #96]	@ (80011c8 <HAL_UART_RxCpltCallback+0xdc>)
 8001168:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <HAL_UART_RxCpltCallback+0xe8>)
 800116a:	f002 f954 	bl	8003416 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
	} else if (huart->Instance == USART3) {
		HAL_UART_Transmit(&huart1, UART3_Rx_Data, 1, 2);
		HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
	}
}
 800116e:	e020      	b.n	80011b2 <HAL_UART_RxCpltCallback+0xc6>
	} else if (huart->Instance == USART2) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_UART_RxCpltCallback+0xec>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10b      	bne.n	8001192 <HAL_UART_RxCpltCallback+0xa6>
		HAL_UART_Transmit(&huart1, UART2_Rx_Data, 1, 2);
 800117a:	2302      	movs	r3, #2
 800117c:	2201      	movs	r2, #1
 800117e:	4917      	ldr	r1, [pc, #92]	@ (80011dc <HAL_UART_RxCpltCallback+0xf0>)
 8001180:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <HAL_UART_RxCpltCallback+0xe8>)
 8001182:	f002 f8c5 	bl	8003310 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	4914      	ldr	r1, [pc, #80]	@ (80011dc <HAL_UART_RxCpltCallback+0xf0>)
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <HAL_UART_RxCpltCallback+0xf4>)
 800118c:	f002 f943 	bl	8003416 <HAL_UART_Receive_IT>
}
 8001190:	e00f      	b.n	80011b2 <HAL_UART_RxCpltCallback+0xc6>
	} else if (huart->Instance == USART3) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <HAL_UART_RxCpltCallback+0xf8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d10a      	bne.n	80011b2 <HAL_UART_RxCpltCallback+0xc6>
		HAL_UART_Transmit(&huart1, UART3_Rx_Data, 1, 2);
 800119c:	2302      	movs	r3, #2
 800119e:	2201      	movs	r2, #1
 80011a0:	4911      	ldr	r1, [pc, #68]	@ (80011e8 <HAL_UART_RxCpltCallback+0xfc>)
 80011a2:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <HAL_UART_RxCpltCallback+0xe8>)
 80011a4:	f002 f8b4 	bl	8003310 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	490f      	ldr	r1, [pc, #60]	@ (80011e8 <HAL_UART_RxCpltCallback+0xfc>)
 80011ac:	480f      	ldr	r0, [pc, #60]	@ (80011ec <HAL_UART_RxCpltCallback+0x100>)
 80011ae:	f002 f932 	bl	8003416 <HAL_UART_Receive_IT>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40013800 	.word	0x40013800
 80011c0:	20000341 	.word	0x20000341
 80011c4:	20000342 	.word	0x20000342
 80011c8:	20000320 	.word	0x20000320
 80011cc:	20000340 	.word	0x20000340
 80011d0:	2000032c 	.word	0x2000032c
 80011d4:	20000244 	.word	0x20000244
 80011d8:	40004400 	.word	0x40004400
 80011dc:	20000324 	.word	0x20000324
 80011e0:	2000028c 	.word	0x2000028c
 80011e4:	40004800 	.word	0x40004800
 80011e8:	20000328 	.word	0x20000328
 80011ec:	200002d4 	.word	0x200002d4

080011f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <Error_Handler+0x8>

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <HAL_MspInit+0x5c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_MspInit+0x5c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_MspInit+0x60>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_MspInit+0x60>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_I2C_MspInit+0x70>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d123      	bne.n	80012c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001298:	23c0      	movs	r3, #192	@ 0xc0
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <HAL_I2C_MspInit+0x78>)
 80012ac:	f000 fc50 	bl	8001b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 80012b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ba:	61d3      	str	r3, [r2, #28]
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_I2C_MspInit+0x74>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001474 <HAL_UART_MspInit+0x198>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d13a      	bne.n	8001372 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a5d      	ldr	r2, [pc, #372]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b58      	ldr	r3, [pc, #352]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a57      	ldr	r2, [pc, #348]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4619      	mov	r1, r3
 8001340:	484e      	ldr	r0, [pc, #312]	@ (800147c <HAL_UART_MspInit+0x1a0>)
 8001342:	f000 fc05 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4619      	mov	r1, r3
 800135a:	4848      	ldr	r0, [pc, #288]	@ (800147c <HAL_UART_MspInit+0x1a0>)
 800135c:	f000 fbf8 	bl	8001b50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2025      	movs	r0, #37	@ 0x25
 8001366:	f000 fb0a 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136a:	2025      	movs	r0, #37	@ 0x25
 800136c:	f000 fb23 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001370:	e07c      	b.n	800146c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <HAL_UART_MspInit+0x1a4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d138      	bne.n	80013ee <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800137c:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a3d      	ldr	r2, [pc, #244]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a37      	ldr	r2, [pc, #220]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ac:	2304      	movs	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4619      	mov	r1, r3
 80013be:	482f      	ldr	r0, [pc, #188]	@ (800147c <HAL_UART_MspInit+0x1a0>)
 80013c0:	f000 fbc6 	bl	8001b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c4:	2308      	movs	r3, #8
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4619      	mov	r1, r3
 80013d6:	4829      	ldr	r0, [pc, #164]	@ (800147c <HAL_UART_MspInit+0x1a0>)
 80013d8:	f000 fbba 	bl	8001b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2026      	movs	r0, #38	@ 0x26
 80013e2:	f000 facc 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013e6:	2026      	movs	r0, #38	@ 0x26
 80013e8:	f000 fae5 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 80013ec:	e03e      	b.n	800146c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a24      	ldr	r2, [pc, #144]	@ (8001484 <HAL_UART_MspInit+0x1a8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d139      	bne.n	800146c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 80013fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001402:	61d3      	str	r3, [r2, #28]
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a18      	ldr	r2, [pc, #96]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_UART_MspInit+0x19c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	4619      	mov	r1, r3
 800143c:	4812      	ldr	r0, [pc, #72]	@ (8001488 <HAL_UART_MspInit+0x1ac>)
 800143e:	f000 fb87 	bl	8001b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001442:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4619      	mov	r1, r3
 8001456:	480c      	ldr	r0, [pc, #48]	@ (8001488 <HAL_UART_MspInit+0x1ac>)
 8001458:	f000 fb7a 	bl	8001b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2027      	movs	r0, #39	@ 0x27
 8001462:	f000 fa8c 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001466:	2027      	movs	r0, #39	@ 0x27
 8001468:	f000 faa5 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 800146c:	bf00      	nop
 800146e:	3730      	adds	r7, #48	@ 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800
 8001480:	40004400 	.word	0x40004400
 8001484:	40004800 	.word	0x40004800
 8001488:	40010c00 	.word	0x40010c00

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f938 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <USART1_IRQHandler+0x10>)
 80014ea:	f001 ffb9 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000244 	.word	0x20000244

080014f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <USART2_IRQHandler+0x10>)
 80014fe:	f001 ffaf 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000028c 	.word	0x2000028c

0800150c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <USART3_IRQHandler+0x10>)
 8001512:	f001 ffa5 	bl	8003460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002d4 	.word	0x200002d4

08001520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <_kill>:

int _kill(int pid, int sig)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001538:	f003 fc6c 	bl	8004e14 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	2216      	movs	r2, #22
 8001540:	601a      	str	r2, [r3, #0]
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_exit>:

void _exit (int status)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001556:	f04f 31ff 	mov.w	r1, #4294967295
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffe7 	bl	800152e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <_exit+0x12>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
  }

  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:
  }
  return len;
}

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c4:	605a      	str	r2, [r3, #4]
  return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	@ (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f003 fbf0 	bl	8004e14 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20005000 	.word	0x20005000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000344 	.word	0x20000344
 8001668:	20000498 	.word	0x20000498

0800166c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff fff8 	bl	800166c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480b      	ldr	r0, [pc, #44]	@ (80016ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800167e:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001680:	4a0c      	ldr	r2, [pc, #48]	@ (80016b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a09      	ldr	r2, [pc, #36]	@ (80016b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001694:	4c09      	ldr	r4, [pc, #36]	@ (80016bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f003 fbbd 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a6:	f7ff fad7 	bl	8000c58 <main>
  bx lr
 80016aa:	4770      	bx	lr
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016b4:	08006e88 	.word	0x08006e88
  ldr r2, =_sbss
 80016b8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016bc:	20000498 	.word	0x20000498

080016c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_2_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <HAL_Init+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <HAL_Init+0x28>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f947 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	200f      	movs	r0, #15
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fd8c 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f95f 	bl	80019d2 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f927 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_IncTick+0x1c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_IncTick+0x20>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a03      	ldr	r2, [pc, #12]	@ (8001770 <HAL_IncTick+0x20>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000008 	.word	0x20000008
 8001770:	20000348 	.word	0x20000348

08001774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b02      	ldr	r3, [pc, #8]	@ (8001784 <HAL_GetTick+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000348 	.word	0x20000348

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff fff0 	bl	8001774 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffe0 	bl	8001774 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4906      	ldr	r1, [pc, #24]	@ (8001868 <__NVIC_EnableIRQ+0x34>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	@ (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	@ (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff90 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff2d 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff42 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff90 	bl	80018c0 <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5f 	bl	800186c <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff35 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e020      	b.n	8001a56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 020e 	bic.w	r2, r2, #14
 8001a22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d005      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e051      	b.n	8001b28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020e 	bic.w	r2, r2, #14
 8001a92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a22      	ldr	r2, [pc, #136]	@ (8001b34 <HAL_DMA_Abort_IT+0xd4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d029      	beq.n	8001b02 <HAL_DMA_Abort_IT+0xa2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <HAL_DMA_Abort_IT+0xd8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d022      	beq.n	8001afe <HAL_DMA_Abort_IT+0x9e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1f      	ldr	r2, [pc, #124]	@ (8001b3c <HAL_DMA_Abort_IT+0xdc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01a      	beq.n	8001af8 <HAL_DMA_Abort_IT+0x98>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <HAL_DMA_Abort_IT+0xe0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d012      	beq.n	8001af2 <HAL_DMA_Abort_IT+0x92>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <HAL_DMA_Abort_IT+0xe4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00a      	beq.n	8001aec <HAL_DMA_Abort_IT+0x8c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_DMA_Abort_IT+0xe8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d102      	bne.n	8001ae6 <HAL_DMA_Abort_IT+0x86>
 8001ae0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ae4:	e00e      	b.n	8001b04 <HAL_DMA_Abort_IT+0xa4>
 8001ae6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001aea:	e00b      	b.n	8001b04 <HAL_DMA_Abort_IT+0xa4>
 8001aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af0:	e008      	b.n	8001b04 <HAL_DMA_Abort_IT+0xa4>
 8001af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af6:	e005      	b.n	8001b04 <HAL_DMA_Abort_IT+0xa4>
 8001af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001afc:	e002      	b.n	8001b04 <HAL_DMA_Abort_IT+0xa4>
 8001afe:	2310      	movs	r3, #16
 8001b00:	e000      	b.n	8001b04 <HAL_DMA_Abort_IT+0xa4>
 8001b02:	2301      	movs	r3, #1
 8001b04:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <HAL_DMA_Abort_IT+0xec>)
 8001b06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
    } 
  }
  return status;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020008 	.word	0x40020008
 8001b38:	4002001c 	.word	0x4002001c
 8001b3c:	40020030 	.word	0x40020030
 8001b40:	40020044 	.word	0x40020044
 8001b44:	40020058 	.word	0x40020058
 8001b48:	4002006c 	.word	0x4002006c
 8001b4c:	40020000 	.word	0x40020000

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b08b      	sub	sp, #44	@ 0x2c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e169      	b.n	8001e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8158 	bne.w	8001e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a9a      	ldr	r2, [pc, #616]	@ (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d05e      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a98      	ldr	r2, [pc, #608]	@ (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d875      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b92:	4a98      	ldr	r2, [pc, #608]	@ (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d058      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b98:	4a96      	ldr	r2, [pc, #600]	@ (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d86f      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b9e:	4a96      	ldr	r2, [pc, #600]	@ (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d052      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001ba4:	4a94      	ldr	r2, [pc, #592]	@ (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d869      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001baa:	4a94      	ldr	r2, [pc, #592]	@ (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d04c      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bb0:	4a92      	ldr	r2, [pc, #584]	@ (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d863      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bb6:	4a92      	ldr	r2, [pc, #584]	@ (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d046      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bbc:	4a90      	ldr	r2, [pc, #576]	@ (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d85d      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d82a      	bhi.n	8001c1c <HAL_GPIO_Init+0xcc>
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d859      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bca:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <HAL_GPIO_Init+0x80>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001c37 	.word	0x08001c37
 8001bdc:	08001c79 	.word	0x08001c79
 8001be0:	08001c7f 	.word	0x08001c7f
 8001be4:	08001c7f 	.word	0x08001c7f
 8001be8:	08001c7f 	.word	0x08001c7f
 8001bec:	08001c7f 	.word	0x08001c7f
 8001bf0:	08001c7f 	.word	0x08001c7f
 8001bf4:	08001c7f 	.word	0x08001c7f
 8001bf8:	08001c7f 	.word	0x08001c7f
 8001bfc:	08001c7f 	.word	0x08001c7f
 8001c00:	08001c7f 	.word	0x08001c7f
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c7f 	.word	0x08001c7f
 8001c0c:	08001c7f 	.word	0x08001c7f
 8001c10:	08001c7f 	.word	0x08001c7f
 8001c14:	08001c2d 	.word	0x08001c2d
 8001c18:	08001c41 	.word	0x08001c41
 8001c1c:	4a79      	ldr	r2, [pc, #484]	@ (8001e04 <HAL_GPIO_Init+0x2b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c22:	e02c      	b.n	8001c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e029      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	3304      	adds	r3, #4
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e024      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e01f      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	330c      	adds	r3, #12
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e01a      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c52:	2304      	movs	r3, #4
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e013      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	611a      	str	r2, [r3, #16]
          break;
 8001c6a:	e009      	b.n	8001c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	615a      	str	r2, [r3, #20]
          break;
 8001c76:	e003      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          break;
 8001c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2bff      	cmp	r3, #255	@ 0xff
 8001c84:	d801      	bhi.n	8001c8a <HAL_GPIO_Init+0x13a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_Init+0x13e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	@ 0xff
 8001c94:	d802      	bhi.n	8001c9c <HAL_GPIO_Init+0x14c>
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x152>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	3b08      	subs	r3, #8
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	210f      	movs	r1, #15
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80b1 	beq.w	8001e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce8:	4a48      	ldr	r2, [pc, #288]	@ (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a40      	ldr	r2, [pc, #256]	@ (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1ec>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3f      	ldr	r2, [pc, #252]	@ (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1e8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1e4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3d      	ldr	r2, [pc, #244]	@ (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1e0>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d30:	2304      	movs	r3, #4
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d40:	f002 0203 	and.w	r2, r2, #3
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	4093      	lsls	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d4e:	492f      	ldr	r1, [pc, #188]	@ (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	492c      	ldr	r1, [pc, #176]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4928      	ldr	r1, [pc, #160]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d90:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4922      	ldr	r1, [pc, #136]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	491e      	ldr	r1, [pc, #120]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4918      	ldr	r1, [pc, #96]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc6:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4914      	ldr	r1, [pc, #80]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d021      	beq.n	8001e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	490e      	ldr	r1, [pc, #56]	@ (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e021      	b.n	8001e32 <HAL_GPIO_Init+0x2e2>
 8001dee:	bf00      	nop
 8001df0:	10320000 	.word	0x10320000
 8001df4:	10310000 	.word	0x10310000
 8001df8:	10220000 	.word	0x10220000
 8001dfc:	10210000 	.word	0x10210000
 8001e00:	10120000 	.word	0x10120000
 8001e04:	10110000 	.word	0x10110000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40010800 	.word	0x40010800
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40011400 	.word	0x40011400
 8001e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4909      	ldr	r1, [pc, #36]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae8e 	bne.w	8001b64 <HAL_GPIO_Init+0x14>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	372c      	adds	r7, #44	@ 0x2c
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e74:	e003      	b.n	8001e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43d9      	mvns	r1, r3
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	611a      	str	r2, [r3, #16]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e12b      	b.n	8002126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff f9bc 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f20:	f001 f960 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a81      	ldr	r2, [pc, #516]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d807      	bhi.n	8001f40 <HAL_I2C_Init+0x84>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a80      	ldr	r2, [pc, #512]	@ (8002134 <HAL_I2C_Init+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e006      	b.n	8001f4e <HAL_I2C_Init+0x92>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a7d      	ldr	r2, [pc, #500]	@ (8002138 <HAL_I2C_Init+0x27c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0e7      	b.n	8002126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a78      	ldr	r2, [pc, #480]	@ (800213c <HAL_I2C_Init+0x280>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a6a      	ldr	r2, [pc, #424]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d802      	bhi.n	8001f90 <HAL_I2C_Init+0xd4>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	e009      	b.n	8001fa4 <HAL_I2C_Init+0xe8>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a69      	ldr	r2, [pc, #420]	@ (8002140 <HAL_I2C_Init+0x284>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	495c      	ldr	r1, [pc, #368]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d819      	bhi.n	8001ff8 <HAL_I2C_Init+0x13c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e59      	subs	r1, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fd8:	400b      	ands	r3, r1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_I2C_Init+0x138>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e59      	subs	r1, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	e051      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e04f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <HAL_I2C_Init+0x168>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e012      	b.n	800204a <HAL_I2C_Init+0x18e>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x196>
 800204e:	2301      	movs	r3, #1
 8002050:	e022      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10e      	bne.n	8002078 <HAL_I2C_Init+0x1bc>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e58      	subs	r0, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	6809      	ldr	r1, [r1, #0]
 800209c:	4313      	orrs	r3, r2
 800209e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6911      	ldr	r1, [r2, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68d2      	ldr	r2, [r2, #12]
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	000186a0 	.word	0x000186a0
 8002134:	001e847f 	.word	0x001e847f
 8002138:	003d08ff 	.word	0x003d08ff
 800213c:	431bde83 	.word	0x431bde83
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff fb0c 	bl	8001774 <HAL_GetTick>
 800215c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	f040 80e0 	bne.w	800232c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	4970      	ldr	r1, [pc, #448]	@ (8002338 <HAL_I2C_Master_Transmit+0x1f4>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa92 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	e0d3      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x50>
 8002190:	2302      	movs	r3, #2
 8002192:	e0cc      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d007      	beq.n	80021ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2221      	movs	r2, #33	@ 0x21
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2210      	movs	r2, #16
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a50      	ldr	r2, [pc, #320]	@ (800233c <HAL_I2C_Master_Transmit+0x1f8>)
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6a3a      	ldr	r2, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f9ca 	bl	800259c <I2C_MasterRequestWrite>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e08d      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002228:	e066      	b.n	80022f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6a39      	ldr	r1, [r7, #32]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fb50 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b04      	cmp	r3, #4
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	d11b      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x188>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	6a39      	ldr	r1, [r7, #32]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fb47 	bl	8002964 <I2C_WaitOnBTFFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e01a      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d194      	bne.n	800222a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000

08002340 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	460b      	mov	r3, r1
 800234e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fa10 	bl	8001774 <HAL_GetTick>
 8002354:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b20      	cmp	r3, #32
 8002364:	f040 8111 	bne.w	800258a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2319      	movs	r3, #25
 800236e:	2201      	movs	r2, #1
 8002370:	4988      	ldr	r1, [pc, #544]	@ (8002594 <HAL_I2C_IsDeviceReady+0x254>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f994 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	e104      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2C_IsDeviceReady+0x50>
 800238c:	2302      	movs	r3, #2
 800238e:	e0fd      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d007      	beq.n	80023b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2224      	movs	r2, #36	@ 0x24
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a70      	ldr	r2, [pc, #448]	@ (8002598 <HAL_I2C_IsDeviceReady+0x258>)
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f952 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002410:	d103      	bne.n	800241a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0b6      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800242c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff f9a1 	bl	8001774 <HAL_GetTick>
 8002432:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002458:	bf0c      	ite	eq
 800245a:	2301      	moveq	r3, #1
 800245c:	2300      	movne	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002462:	e025      	b.n	80024b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002464:	f7ff f986 	bl	8001774 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d302      	bcc.n	800247a <HAL_I2C_IsDeviceReady+0x13a>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	22a0      	movs	r2, #160	@ 0xa0
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80024ba:	d005      	beq.n	80024c8 <HAL_I2C_IsDeviceReady+0x188>
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_I2C_IsDeviceReady+0x188>
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0cd      	beq.n	8002464 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d129      	bne.n	8002532 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2319      	movs	r3, #25
 800250a:	2201      	movs	r2, #1
 800250c:	4921      	ldr	r1, [pc, #132]	@ (8002594 <HAL_I2C_IsDeviceReady+0x254>)
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f8c6 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e036      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e02c      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002540:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800254a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2319      	movs	r3, #25
 8002552:	2201      	movs	r2, #1
 8002554:	490f      	ldr	r1, [pc, #60]	@ (8002594 <HAL_I2C_IsDeviceReady+0x254>)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8a2 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e012      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3301      	adds	r3, #1
 800256a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	f4ff af32 	bcc.w	80023da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00100002 	.word	0x00100002
 8002598:	ffff0000 	.word	0xffff0000

0800259c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d006      	beq.n	80025c6 <I2C_MasterRequestWrite+0x2a>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d003      	beq.n	80025c6 <I2C_MasterRequestWrite+0x2a>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025c4:	d108      	bne.n	80025d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e00b      	b.n	80025f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	2b12      	cmp	r3, #18
 80025de:	d107      	bne.n	80025f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f84f 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002616:	d103      	bne.n	8002620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e035      	b.n	8002690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800262c:	d108      	bne.n	8002640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800262e:	897b      	ldrh	r3, [r7, #10]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	e01b      	b.n	8002678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002640:	897b      	ldrh	r3, [r7, #10]
 8002642:	11db      	asrs	r3, r3, #7
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0306 	and.w	r3, r3, #6
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f063 030f 	orn	r3, r3, #15
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	490e      	ldr	r1, [pc, #56]	@ (8002698 <I2C_MasterRequestWrite+0xfc>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f898 	bl	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e010      	b.n	8002690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4907      	ldr	r1, [pc, #28]	@ (800269c <I2C_MasterRequestWrite+0x100>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f888 	bl	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	00010008 	.word	0x00010008
 800269c:	00010002 	.word	0x00010002

080026a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	e048      	b.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d044      	beq.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f85b 	bl	8001774 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d139      	bne.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10d      	bne.n	80026f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	e00c      	b.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d116      	bne.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e023      	b.n	800278c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	0c1b      	lsrs	r3, r3, #16
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10d      	bne.n	800276a <I2C_WaitOnFlagUntilTimeout+0xca>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	43da      	mvns	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4013      	ands	r3, r2
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	e00c      	b.n	8002784 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	43da      	mvns	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	429a      	cmp	r2, r3
 8002788:	d093      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027a2:	e071      	b.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b2:	d123      	bne.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e067      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d041      	beq.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002804:	f7fe ffb6 	bl	8001774 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d302      	bcc.n	800281a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d136      	bne.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10c      	bne.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	e00b      	b.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	43da      	mvns	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4013      	ands	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e021      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10c      	bne.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e00b      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f af6d 	bne.w	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e0:	e034      	b.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f886 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e034      	b.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d028      	beq.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe ff3b 	bl	8001774 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291a:	2b80      	cmp	r3, #128	@ 0x80
 800291c:	d016      	beq.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	2b80      	cmp	r3, #128	@ 0x80
 8002958:	d1c3      	bne.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002970:	e034      	b.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f83e 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e034      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d028      	beq.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fef3 	bl	8001774 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11d      	bne.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d016      	beq.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d1c3      	bne.n	8002972 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0a:	d11b      	bne.n	8002a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e272      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8087 	beq.w	8002b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a70:	4b92      	ldr	r3, [pc, #584]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d00c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d112      	bne.n	8002aae <HAL_RCC_OscConfig+0x5e>
 8002a88:	4b8c      	ldr	r3, [pc, #560]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a94:	d10b      	bne.n	8002aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a96:	4b89      	ldr	r3, [pc, #548]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d06c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x12c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d168      	bne.n	8002b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e24c      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x76>
 8002ab8:	4b80      	ldr	r3, [pc, #512]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7f      	ldr	r2, [pc, #508]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e02e      	b.n	8002b24 <HAL_RCC_OscConfig+0xd4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b7b      	ldr	r3, [pc, #492]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b78      	ldr	r3, [pc, #480]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a77      	ldr	r2, [pc, #476]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0xbc>
 8002af2:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a71      	ldr	r2, [pc, #452]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b6f      	ldr	r3, [pc, #444]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6e      	ldr	r2, [pc, #440]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xd4>
 8002b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6a      	ldr	r2, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b68      	ldr	r3, [pc, #416]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a67      	ldr	r2, [pc, #412]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fe22 	bl	8001774 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fe1e 	bl	8001774 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e200      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0xe4>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fe0e 	bl	8001774 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fe0a 	bl	8001774 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	@ 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1ec      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	4b53      	ldr	r3, [pc, #332]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x10c>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d063      	beq.n	8002c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b96:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d11c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x18c>
 8002ba2:	4b46      	ldr	r3, [pc, #280]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	4b43      	ldr	r3, [pc, #268]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x176>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1c0      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4939      	ldr	r1, [pc, #228]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	e03a      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	4b36      	ldr	r3, [pc, #216]	@ (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe fdc3 	bl	8001774 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fdbf 	bl	8001774 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1a1      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b2a      	ldr	r3, [pc, #168]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4927      	ldr	r1, [pc, #156]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
 8002c24:	e015      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	4b26      	ldr	r3, [pc, #152]	@ (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fda2 	bl	8001774 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c34:	f7fe fd9e 	bl	8001774 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e180      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d03a      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d019      	beq.n	8002c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c66:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fd82 	bl	8001774 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7fe fd7e 	bl	8001774 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e160      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f000 face 	bl	8003234 <RCC_Delay>
 8002c98:	e01c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fd68 	bl	8001774 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca6:	e00f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fd64 	bl	8001774 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d908      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e146      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	42420000 	.word	0x42420000
 8002cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	4b92      	ldr	r3, [pc, #584]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e9      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a6 	beq.w	8002e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b88      	ldr	r3, [pc, #544]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4a87      	ldr	r2, [pc, #540]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	61d3      	str	r3, [r2, #28]
 8002cfe:	4b85      	ldr	r3, [pc, #532]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <HAL_RCC_OscConfig+0x4c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f18 <HAL_RCC_OscConfig+0x4c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f18 <HAL_RCC_OscConfig+0x4c8>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fd25 	bl	8001774 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe fd21 	bl	8001774 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	@ 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e103      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <HAL_RCC_OscConfig+0x4c8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x312>
 8002d54:	4b6f      	ldr	r3, [pc, #444]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a6e      	ldr	r2, [pc, #440]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e02d      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a69      	ldr	r2, [pc, #420]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4b67      	ldr	r3, [pc, #412]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a66      	ldr	r2, [pc, #408]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	e01c      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x356>
 8002d8c:	4b61      	ldr	r3, [pc, #388]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a60      	ldr	r2, [pc, #384]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	4b5e      	ldr	r3, [pc, #376]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
 8002da6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a5a      	ldr	r2, [pc, #360]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6213      	str	r3, [r2, #32]
 8002db2:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a57      	ldr	r2, [pc, #348]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fcd5 	bl	8001774 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fcd1 	bl	8001774 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0b1      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCC_OscConfig+0x37e>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df2:	f7fe fcbf 	bl	8001774 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe fcbb 	bl	8001774 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e09b      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e22:	4b3c      	ldr	r3, [pc, #240]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8087 	beq.w	8002f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d061      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d146      	bne.n	8002eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b33      	ldr	r3, [pc, #204]	@ (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fc8f 	bl	8001774 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe fc8b 	bl	8001774 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e06d      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6c:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	4921      	ldr	r1, [pc, #132]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a19      	ldr	r1, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	491b      	ldr	r1, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fc5f 	bl	8001774 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fc5b 	bl	8001774 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e03d      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x46a>
 8002ed8:	e035      	b.n	8002f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fc48 	bl	8001774 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fc44 	bl	8001774 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e026      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x498>
 8002f06:	e01e      	b.n	8002f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e019      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_OscConfig+0x500>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d0      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b6a      	ldr	r3, [pc, #424]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b67      	ldr	r3, [pc, #412]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4965      	ldr	r1, [pc, #404]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b8      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b50      	ldr	r3, [pc, #320]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494d      	ldr	r1, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d040      	beq.n	8003074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	4b41      	ldr	r3, [pc, #260]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e073      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b3d      	ldr	r3, [pc, #244]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06b      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4936      	ldr	r1, [pc, #216]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003044:	f7fe fb96 	bl	8001774 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe fb92 	bl	8001774 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e053      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d210      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0207 	bic.w	r2, r3, #7
 800308a:	4922      	ldr	r1, [pc, #136]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e032      	b.n	800310a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4916      	ldr	r1, [pc, #88]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f821 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	490a      	ldr	r1, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	5ccb      	ldrb	r3, [r1, r3]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1cc>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x1d0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe faf4 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40022000 	.word	0x40022000
 8003118:	40021000 	.word	0x40021000
 800311c:	08006adc 	.word	0x08006adc
 8003120:	20000000 	.word	0x20000000
 8003124:	20000004 	.word	0x20000004

08003128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003142:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d002      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x30>
 8003152:	2b08      	cmp	r3, #8
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x36>
 8003156:	e027      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800315a:	613b      	str	r3, [r7, #16]
      break;
 800315c:	e027      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0c9b      	lsrs	r3, r3, #18
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0c5b      	lsrs	r3, r3, #17
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	4a11      	ldr	r2, [pc, #68]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800318a:	fb03 f202 	mul.w	r2, r3, r2
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e004      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a0c      	ldr	r2, [pc, #48]	@ (80031cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	613b      	str	r3, [r7, #16]
      break;
 80031a6:	e002      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031aa:	613b      	str	r3, [r7, #16]
      break;
 80031ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ae:	693b      	ldr	r3, [r7, #16]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	007a1200 	.word	0x007a1200
 80031c4:	08006af4 	.word	0x08006af4
 80031c8:	08006b04 	.word	0x08006b04
 80031cc:	003d0900 	.word	0x003d0900

080031d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b02      	ldr	r3, [pc, #8]	@ (80031e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000000 	.word	0x20000000

080031e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e8:	f7ff fff2 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4903      	ldr	r1, [pc, #12]	@ (8003208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	08006aec 	.word	0x08006aec

0800320c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003210:	f7ff ffde 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	0adb      	lsrs	r3, r3, #11
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4903      	ldr	r1, [pc, #12]	@ (8003230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	08006aec 	.word	0x08006aec

08003234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800323c:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <RCC_Delay+0x34>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <RCC_Delay+0x38>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0a5b      	lsrs	r3, r3, #9
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003250:	bf00      	nop
  }
  while (Delay --);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1e5a      	subs	r2, r3, #1
 8003256:	60fa      	str	r2, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f9      	bne.n	8003250 <RCC_Delay+0x1c>
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	20000000 	.word	0x20000000
 800326c:	10624dd3 	.word	0x10624dd3

08003270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e042      	b.n	8003308 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe f820 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	@ 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fdc5 	bl	8003e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	@ 0x28
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	d16d      	bne.n	800340c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Transmit+0x2c>
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e066      	b.n	800340e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	@ 0x21
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334e:	f7fe fa11 	bl	8001774 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003368:	d108      	bne.n	800337c <HAL_UART_Transmit+0x6c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e003      	b.n	8003384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003384:	e02a      	b.n	80033dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fb14 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e036      	b.n	800340e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3302      	adds	r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e007      	b.n	80033ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1cf      	bne.n	8003386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2140      	movs	r1, #64	@ 0x40
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fae4 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e006      	b.n	800340e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800340c:	2302      	movs	r3, #2
  }
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b20      	cmp	r3, #32
 800342e:	d112      	bne.n	8003456 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_UART_Receive_IT+0x26>
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e00b      	b.n	8003458 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	461a      	mov	r2, r3
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fb24 	bl	8003a9a <UART_Start_Receive_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	e000      	b.n	8003458 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b0ba      	sub	sp, #232	@ 0xe8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800349e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_UART_IRQHandler+0x66>
 80034b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fc01 	bl	8003cc6 <UART_Receive_IT>
      return;
 80034c4:	e25b      	b.n	800397e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80de 	beq.w	800368c <HAL_UART_IRQHandler+0x22c>
 80034d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80d1 	beq.w	800368c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_UART_IRQHandler+0xae>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xd2>
 800351a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_UART_IRQHandler+0xf6>
 800353e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d011      	beq.n	8003586 <HAL_UART_IRQHandler+0x126>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800356e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f043 0208 	orr.w	r2, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 81f2 	beq.w	8003974 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_UART_IRQHandler+0x14e>
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb8c 	bl	8003cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_UART_IRQHandler+0x17a>
 80035d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04f      	beq.n	800367a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa96 	bl	8003b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d041      	beq.n	8003672 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003604:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800360c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800361a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1d9      	bne.n	80035ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d013      	beq.n	800366a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003646:	4a7e      	ldr	r2, [pc, #504]	@ (8003840 <HAL_UART_IRQHandler+0x3e0>)
 8003648:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fa06 	bl	8001a60 <HAL_DMA_Abort_IT>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	e00e      	b.n	8003688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f993 	bl	8003996 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e00a      	b.n	8003688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f98f 	bl	8003996 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003678:	e006      	b.n	8003688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f98b 	bl	8003996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003686:	e175      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	bf00      	nop
    return;
 800368a:	e173      	b.n	8003974 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 814f 	bne.w	8003934 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8148 	beq.w	8003934 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8141 	beq.w	8003934 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80b6 	beq.w	8003844 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8145 	beq.w	8003978 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036f6:	429a      	cmp	r2, r3
 80036f8:	f080 813e 	bcs.w	8003978 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003702:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b20      	cmp	r3, #32
 800370c:	f000 8088 	beq.w	8003820 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800372a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800372e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800373c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003740:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003748:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1d9      	bne.n	8003710 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800376c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003780:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003784:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003788:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e1      	bne.n	800375c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e3      	bne.n	8003798 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037f0:	f023 0310 	bic.w	r3, r3, #16
 80037f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003802:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003804:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e3      	bne.n	80037de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe f8e5 	bl	80019ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800382e:	b29b      	uxth	r3, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	b29b      	uxth	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8b6 	bl	80039a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800383c:	e09c      	b.n	8003978 <HAL_UART_IRQHandler+0x518>
 800383e:	bf00      	nop
 8003840:	08003bd1 	.word	0x08003bd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800384c:	b29b      	uxth	r3, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 808e 	beq.w	800397c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8089 	beq.w	800397c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800388e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003890:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800389c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e3      	bne.n	800386a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	623b      	str	r3, [r7, #32]
   return(result);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3314      	adds	r3, #20
 80038c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e3      	bne.n	80038a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0310 	bic.w	r3, r3, #16
 80038fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	69b9      	ldr	r1, [r7, #24]
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	617b      	str	r3, [r7, #20]
   return(result);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e3      	bne.n	80038e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f83b 	bl	80039a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003932:	e023      	b.n	800397c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <HAL_UART_IRQHandler+0x4f4>
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f953 	bl	8003bf8 <UART_Transmit_IT>
    return;
 8003952:	e014      	b.n	800397e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <HAL_UART_IRQHandler+0x51e>
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f992 	bl	8003c96 <UART_EndTransmit_IT>
    return;
 8003972:	e004      	b.n	800397e <HAL_UART_IRQHandler+0x51e>
    return;
 8003974:	bf00      	nop
 8003976:	e002      	b.n	800397e <HAL_UART_IRQHandler+0x51e>
      return;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_UART_IRQHandler+0x51e>
      return;
 800397c:	bf00      	nop
  }
}
 800397e:	37e8      	adds	r7, #232	@ 0xe8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b090      	sub	sp, #64	@ 0x40
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	e050      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d04c      	beq.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0x30>
 80039de:	f7fd fec9 	bl	8001774 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d241      	bcs.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a0e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	613b      	str	r3, [r7, #16]
   return(result);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a42:	623a      	str	r2, [r7, #32]
 8003a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	69f9      	ldr	r1, [r7, #28]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e5      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00f      	b.n	8003a92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d09f      	beq.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3740      	adds	r7, #64	@ 0x40
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2222      	movs	r2, #34	@ 0x22
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ade:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b095      	sub	sp, #84	@ 0x54
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b34:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba4:	61ba      	str	r2, [r7, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bc6:	bf00      	nop
 8003bc8:	3754      	adds	r7, #84	@ 0x54
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff fed3 	bl	8003996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b21      	cmp	r3, #33	@ 0x21
 8003c0a:	d13e      	bne.n	8003c8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c14:	d114      	bne.n	8003c40 <UART_Transmit_IT+0x48>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d110      	bne.n	8003c40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]
 8003c3e:	e008      	b.n	8003c52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	1c59      	adds	r1, r3, #1
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6211      	str	r1, [r2, #32]
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fe64 	bl	8003984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08c      	sub	sp, #48	@ 0x30
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b22      	cmp	r3, #34	@ 0x22
 8003cd8:	f040 80ae 	bne.w	8003e38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce4:	d117      	bne.n	8003d16 <UART_Receive_IT+0x50>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d113      	bne.n	8003d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d14:	e026      	b.n	8003d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d28:	d007      	beq.n	8003d3a <UART_Receive_IT+0x74>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <UART_Receive_IT+0x82>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e008      	b.n	8003d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4619      	mov	r1, r3
 8003d72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d15d      	bne.n	8003e34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0220 	bic.w	r2, r2, #32
 8003d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d135      	bne.n	8003e2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	623a      	str	r2, [r7, #32]
 8003de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	69f9      	ldr	r1, [r7, #28]
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d10a      	bne.n	8003e1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fdc0 	bl	80039a8 <HAL_UARTEx_RxEventCallback>
 8003e28:	e002      	b.n	8003e30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd f95e 	bl	80010ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e002      	b.n	8003e3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3730      	adds	r7, #48	@ 0x30
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e7e:	f023 030c 	bic.w	r3, r3, #12
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <UART_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d103      	bne.n	8003eb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7ff f9ae 	bl	800320c <HAL_RCC_GetPCLK2Freq>
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	e002      	b.n	8003eba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7ff f996 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	4a22      	ldr	r2, [pc, #136]	@ (8003f5c <UART_SetConfig+0x118>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	0119      	lsls	r1, r3, #4
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009a      	lsls	r2, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <UART_SetConfig+0x118>)
 8003ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2064      	movs	r0, #100	@ 0x64
 8003efa:	fb00 f303 	mul.w	r3, r0, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	3332      	adds	r3, #50	@ 0x32
 8003f04:	4a15      	ldr	r2, [pc, #84]	@ (8003f5c <UART_SetConfig+0x118>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f10:	4419      	add	r1, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <UART_SetConfig+0x118>)
 8003f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2064      	movs	r0, #100	@ 0x64
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	3332      	adds	r3, #50	@ 0x32
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <UART_SetConfig+0x118>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	f003 020f 	and.w	r2, r3, #15
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40013800 	.word	0x40013800
 8003f5c:	51eb851f 	.word	0x51eb851f

08003f60 <__cvt>:
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f66:	461d      	mov	r5, r3
 8003f68:	bfbb      	ittet	lt
 8003f6a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003f6e:	461d      	movlt	r5, r3
 8003f70:	2300      	movge	r3, #0
 8003f72:	232d      	movlt	r3, #45	@ 0x2d
 8003f74:	b088      	sub	sp, #32
 8003f76:	4614      	mov	r4, r2
 8003f78:	bfb8      	it	lt
 8003f7a:	4614      	movlt	r4, r2
 8003f7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003f80:	7013      	strb	r3, [r2, #0]
 8003f82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f84:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003f88:	f023 0820 	bic.w	r8, r3, #32
 8003f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f90:	d005      	beq.n	8003f9e <__cvt+0x3e>
 8003f92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f96:	d100      	bne.n	8003f9a <__cvt+0x3a>
 8003f98:	3601      	adds	r6, #1
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e000      	b.n	8003fa0 <__cvt+0x40>
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	aa07      	add	r2, sp, #28
 8003fa2:	9204      	str	r2, [sp, #16]
 8003fa4:	aa06      	add	r2, sp, #24
 8003fa6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003faa:	e9cd 3600 	strd	r3, r6, [sp]
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	f000 fff5 	bl	8004fa0 <_dtoa_r>
 8003fb6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003fba:	4607      	mov	r7, r0
 8003fbc:	d119      	bne.n	8003ff2 <__cvt+0x92>
 8003fbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003fc0:	07db      	lsls	r3, r3, #31
 8003fc2:	d50e      	bpl.n	8003fe2 <__cvt+0x82>
 8003fc4:	eb00 0906 	add.w	r9, r0, r6
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8003fd4:	b108      	cbz	r0, 8003fda <__cvt+0x7a>
 8003fd6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fda:	2230      	movs	r2, #48	@ 0x30
 8003fdc:	9b07      	ldr	r3, [sp, #28]
 8003fde:	454b      	cmp	r3, r9
 8003fe0:	d31e      	bcc.n	8004020 <__cvt+0xc0>
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	9b07      	ldr	r3, [sp, #28]
 8003fe6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003fe8:	1bdb      	subs	r3, r3, r7
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	b008      	add	sp, #32
 8003fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ff6:	eb00 0906 	add.w	r9, r0, r6
 8003ffa:	d1e5      	bne.n	8003fc8 <__cvt+0x68>
 8003ffc:	7803      	ldrb	r3, [r0, #0]
 8003ffe:	2b30      	cmp	r3, #48	@ 0x30
 8004000:	d10a      	bne.n	8004018 <__cvt+0xb8>
 8004002:	2200      	movs	r2, #0
 8004004:	2300      	movs	r3, #0
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800400e:	b918      	cbnz	r0, 8004018 <__cvt+0xb8>
 8004010:	f1c6 0601 	rsb	r6, r6, #1
 8004014:	f8ca 6000 	str.w	r6, [sl]
 8004018:	f8da 3000 	ldr.w	r3, [sl]
 800401c:	4499      	add	r9, r3
 800401e:	e7d3      	b.n	8003fc8 <__cvt+0x68>
 8004020:	1c59      	adds	r1, r3, #1
 8004022:	9107      	str	r1, [sp, #28]
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e7d9      	b.n	8003fdc <__cvt+0x7c>

08004028 <__exponent>:
 8004028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800402a:	2900      	cmp	r1, #0
 800402c:	bfb6      	itet	lt
 800402e:	232d      	movlt	r3, #45	@ 0x2d
 8004030:	232b      	movge	r3, #43	@ 0x2b
 8004032:	4249      	neglt	r1, r1
 8004034:	2909      	cmp	r1, #9
 8004036:	7002      	strb	r2, [r0, #0]
 8004038:	7043      	strb	r3, [r0, #1]
 800403a:	dd29      	ble.n	8004090 <__exponent+0x68>
 800403c:	f10d 0307 	add.w	r3, sp, #7
 8004040:	461d      	mov	r5, r3
 8004042:	270a      	movs	r7, #10
 8004044:	fbb1 f6f7 	udiv	r6, r1, r7
 8004048:	461a      	mov	r2, r3
 800404a:	fb07 1416 	mls	r4, r7, r6, r1
 800404e:	3430      	adds	r4, #48	@ 0x30
 8004050:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004054:	460c      	mov	r4, r1
 8004056:	2c63      	cmp	r4, #99	@ 0x63
 8004058:	4631      	mov	r1, r6
 800405a:	f103 33ff 	add.w	r3, r3, #4294967295
 800405e:	dcf1      	bgt.n	8004044 <__exponent+0x1c>
 8004060:	3130      	adds	r1, #48	@ 0x30
 8004062:	1e94      	subs	r4, r2, #2
 8004064:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004068:	4623      	mov	r3, r4
 800406a:	1c41      	adds	r1, r0, #1
 800406c:	42ab      	cmp	r3, r5
 800406e:	d30a      	bcc.n	8004086 <__exponent+0x5e>
 8004070:	f10d 0309 	add.w	r3, sp, #9
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	42ac      	cmp	r4, r5
 8004078:	bf88      	it	hi
 800407a:	2300      	movhi	r3, #0
 800407c:	3302      	adds	r3, #2
 800407e:	4403      	add	r3, r0
 8004080:	1a18      	subs	r0, r3, r0
 8004082:	b003      	add	sp, #12
 8004084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004086:	f813 6b01 	ldrb.w	r6, [r3], #1
 800408a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800408e:	e7ed      	b.n	800406c <__exponent+0x44>
 8004090:	2330      	movs	r3, #48	@ 0x30
 8004092:	3130      	adds	r1, #48	@ 0x30
 8004094:	7083      	strb	r3, [r0, #2]
 8004096:	70c1      	strb	r1, [r0, #3]
 8004098:	1d03      	adds	r3, r0, #4
 800409a:	e7f1      	b.n	8004080 <__exponent+0x58>

0800409c <_printf_float>:
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	b091      	sub	sp, #68	@ 0x44
 80040a2:	460c      	mov	r4, r1
 80040a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80040a8:	4616      	mov	r6, r2
 80040aa:	461f      	mov	r7, r3
 80040ac:	4605      	mov	r5, r0
 80040ae:	f000 fe67 	bl	8004d80 <_localeconv_r>
 80040b2:	6803      	ldr	r3, [r0, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	9308      	str	r3, [sp, #32]
 80040b8:	f7fc f84a 	bl	8000150 <strlen>
 80040bc:	2300      	movs	r3, #0
 80040be:	930e      	str	r3, [sp, #56]	@ 0x38
 80040c0:	f8d8 3000 	ldr.w	r3, [r8]
 80040c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80040c6:	3307      	adds	r3, #7
 80040c8:	f023 0307 	bic.w	r3, r3, #7
 80040cc:	f103 0208 	add.w	r2, r3, #8
 80040d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80040d4:	f8d4 b000 	ldr.w	fp, [r4]
 80040d8:	f8c8 2000 	str.w	r2, [r8]
 80040dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80040e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295
 80040ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80040f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80040f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004368 <_printf_float+0x2cc>)
 80040f8:	f7fc fc88 	bl	8000a0c <__aeabi_dcmpun>
 80040fc:	bb70      	cbnz	r0, 800415c <_printf_float+0xc0>
 80040fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004102:	f04f 32ff 	mov.w	r2, #4294967295
 8004106:	4b98      	ldr	r3, [pc, #608]	@ (8004368 <_printf_float+0x2cc>)
 8004108:	f7fc fc62 	bl	80009d0 <__aeabi_dcmple>
 800410c:	bb30      	cbnz	r0, 800415c <_printf_float+0xc0>
 800410e:	2200      	movs	r2, #0
 8004110:	2300      	movs	r3, #0
 8004112:	4640      	mov	r0, r8
 8004114:	4649      	mov	r1, r9
 8004116:	f7fc fc51 	bl	80009bc <__aeabi_dcmplt>
 800411a:	b110      	cbz	r0, 8004122 <_printf_float+0x86>
 800411c:	232d      	movs	r3, #45	@ 0x2d
 800411e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004122:	4a92      	ldr	r2, [pc, #584]	@ (800436c <_printf_float+0x2d0>)
 8004124:	4b92      	ldr	r3, [pc, #584]	@ (8004370 <_printf_float+0x2d4>)
 8004126:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800412a:	bf94      	ite	ls
 800412c:	4690      	movls	r8, r2
 800412e:	4698      	movhi	r8, r3
 8004130:	2303      	movs	r3, #3
 8004132:	f04f 0900 	mov.w	r9, #0
 8004136:	6123      	str	r3, [r4, #16]
 8004138:	f02b 0304 	bic.w	r3, fp, #4
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	4633      	mov	r3, r6
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	9700      	str	r7, [sp, #0]
 8004146:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004148:	f000 f9d4 	bl	80044f4 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	f040 8090 	bne.w	8004272 <_printf_float+0x1d6>
 8004152:	f04f 30ff 	mov.w	r0, #4294967295
 8004156:	b011      	add	sp, #68	@ 0x44
 8004158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	4640      	mov	r0, r8
 8004162:	4649      	mov	r1, r9
 8004164:	f7fc fc52 	bl	8000a0c <__aeabi_dcmpun>
 8004168:	b148      	cbz	r0, 800417e <_printf_float+0xe2>
 800416a:	464b      	mov	r3, r9
 800416c:	2b00      	cmp	r3, #0
 800416e:	bfb8      	it	lt
 8004170:	232d      	movlt	r3, #45	@ 0x2d
 8004172:	4a80      	ldr	r2, [pc, #512]	@ (8004374 <_printf_float+0x2d8>)
 8004174:	bfb8      	it	lt
 8004176:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800417a:	4b7f      	ldr	r3, [pc, #508]	@ (8004378 <_printf_float+0x2dc>)
 800417c:	e7d3      	b.n	8004126 <_printf_float+0x8a>
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	d13f      	bne.n	8004208 <_printf_float+0x16c>
 8004188:	2306      	movs	r3, #6
 800418a:	6063      	str	r3, [r4, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	9206      	str	r2, [sp, #24]
 8004196:	aa0e      	add	r2, sp, #56	@ 0x38
 8004198:	e9cd a204 	strd	sl, r2, [sp, #16]
 800419c:	aa0d      	add	r2, sp, #52	@ 0x34
 800419e:	9203      	str	r2, [sp, #12]
 80041a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80041a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	4642      	mov	r2, r8
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4628      	mov	r0, r5
 80041b0:	464b      	mov	r3, r9
 80041b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80041b4:	f7ff fed4 	bl	8003f60 <__cvt>
 80041b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80041ba:	4680      	mov	r8, r0
 80041bc:	2947      	cmp	r1, #71	@ 0x47
 80041be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80041c0:	d128      	bne.n	8004214 <_printf_float+0x178>
 80041c2:	1cc8      	adds	r0, r1, #3
 80041c4:	db02      	blt.n	80041cc <_printf_float+0x130>
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	4299      	cmp	r1, r3
 80041ca:	dd40      	ble.n	800424e <_printf_float+0x1b2>
 80041cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80041d0:	fa5f fa8a 	uxtb.w	sl, sl
 80041d4:	4652      	mov	r2, sl
 80041d6:	3901      	subs	r1, #1
 80041d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80041dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80041de:	f7ff ff23 	bl	8004028 <__exponent>
 80041e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80041e4:	4681      	mov	r9, r0
 80041e6:	1813      	adds	r3, r2, r0
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	dc02      	bgt.n	80041f4 <_printf_float+0x158>
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	07d2      	lsls	r2, r2, #31
 80041f2:	d501      	bpl.n	80041f8 <_printf_float+0x15c>
 80041f4:	3301      	adds	r3, #1
 80041f6:	6123      	str	r3, [r4, #16]
 80041f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d09e      	beq.n	800413e <_printf_float+0xa2>
 8004200:	232d      	movs	r3, #45	@ 0x2d
 8004202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004206:	e79a      	b.n	800413e <_printf_float+0xa2>
 8004208:	2947      	cmp	r1, #71	@ 0x47
 800420a:	d1bf      	bne.n	800418c <_printf_float+0xf0>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1bd      	bne.n	800418c <_printf_float+0xf0>
 8004210:	2301      	movs	r3, #1
 8004212:	e7ba      	b.n	800418a <_printf_float+0xee>
 8004214:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004218:	d9dc      	bls.n	80041d4 <_printf_float+0x138>
 800421a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800421e:	d118      	bne.n	8004252 <_printf_float+0x1b6>
 8004220:	2900      	cmp	r1, #0
 8004222:	6863      	ldr	r3, [r4, #4]
 8004224:	dd0b      	ble.n	800423e <_printf_float+0x1a2>
 8004226:	6121      	str	r1, [r4, #16]
 8004228:	b913      	cbnz	r3, 8004230 <_printf_float+0x194>
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	07d0      	lsls	r0, r2, #31
 800422e:	d502      	bpl.n	8004236 <_printf_float+0x19a>
 8004230:	3301      	adds	r3, #1
 8004232:	440b      	add	r3, r1
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	f04f 0900 	mov.w	r9, #0
 800423a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800423c:	e7dc      	b.n	80041f8 <_printf_float+0x15c>
 800423e:	b913      	cbnz	r3, 8004246 <_printf_float+0x1aa>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	07d2      	lsls	r2, r2, #31
 8004244:	d501      	bpl.n	800424a <_printf_float+0x1ae>
 8004246:	3302      	adds	r3, #2
 8004248:	e7f4      	b.n	8004234 <_printf_float+0x198>
 800424a:	2301      	movs	r3, #1
 800424c:	e7f2      	b.n	8004234 <_printf_float+0x198>
 800424e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004254:	4299      	cmp	r1, r3
 8004256:	db05      	blt.n	8004264 <_printf_float+0x1c8>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	6121      	str	r1, [r4, #16]
 800425c:	07d8      	lsls	r0, r3, #31
 800425e:	d5ea      	bpl.n	8004236 <_printf_float+0x19a>
 8004260:	1c4b      	adds	r3, r1, #1
 8004262:	e7e7      	b.n	8004234 <_printf_float+0x198>
 8004264:	2900      	cmp	r1, #0
 8004266:	bfcc      	ite	gt
 8004268:	2201      	movgt	r2, #1
 800426a:	f1c1 0202 	rsble	r2, r1, #2
 800426e:	4413      	add	r3, r2
 8004270:	e7e0      	b.n	8004234 <_printf_float+0x198>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	055a      	lsls	r2, r3, #21
 8004276:	d407      	bmi.n	8004288 <_printf_float+0x1ec>
 8004278:	6923      	ldr	r3, [r4, #16]
 800427a:	4642      	mov	r2, r8
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	d12b      	bne.n	80042de <_printf_float+0x242>
 8004286:	e764      	b.n	8004152 <_printf_float+0xb6>
 8004288:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800428c:	f240 80dc 	bls.w	8004448 <_printf_float+0x3ac>
 8004290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	f7fc fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800429c:	2800      	cmp	r0, #0
 800429e:	d033      	beq.n	8004308 <_printf_float+0x26c>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	4a35      	ldr	r2, [pc, #212]	@ (800437c <_printf_float+0x2e0>)
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f af51 	beq.w	8004152 <_printf_float+0xb6>
 80042b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80042b4:	4543      	cmp	r3, r8
 80042b6:	db02      	blt.n	80042be <_printf_float+0x222>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	07d8      	lsls	r0, r3, #31
 80042bc:	d50f      	bpl.n	80042de <_printf_float+0x242>
 80042be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f af42 	beq.w	8004152 <_printf_float+0xb6>
 80042ce:	f04f 0900 	mov.w	r9, #0
 80042d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80042d6:	f104 0a1a 	add.w	sl, r4, #26
 80042da:	45c8      	cmp	r8, r9
 80042dc:	dc09      	bgt.n	80042f2 <_printf_float+0x256>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	f100 8102 	bmi.w	80044ea <_printf_float+0x44e>
 80042e6:	68e0      	ldr	r0, [r4, #12]
 80042e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042ea:	4298      	cmp	r0, r3
 80042ec:	bfb8      	it	lt
 80042ee:	4618      	movlt	r0, r3
 80042f0:	e731      	b.n	8004156 <_printf_float+0xba>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4652      	mov	r2, sl
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	f43f af28 	beq.w	8004152 <_printf_float+0xb6>
 8004302:	f109 0901 	add.w	r9, r9, #1
 8004306:	e7e8      	b.n	80042da <_printf_float+0x23e>
 8004308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800430a:	2b00      	cmp	r3, #0
 800430c:	dc38      	bgt.n	8004380 <_printf_float+0x2e4>
 800430e:	2301      	movs	r3, #1
 8004310:	4631      	mov	r1, r6
 8004312:	4628      	mov	r0, r5
 8004314:	4a19      	ldr	r2, [pc, #100]	@ (800437c <_printf_float+0x2e0>)
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	f43f af1a 	beq.w	8004152 <_printf_float+0xb6>
 800431e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004322:	ea59 0303 	orrs.w	r3, r9, r3
 8004326:	d102      	bne.n	800432e <_printf_float+0x292>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	07d9      	lsls	r1, r3, #31
 800432c:	d5d7      	bpl.n	80042de <_printf_float+0x242>
 800432e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f af0a 	beq.w	8004152 <_printf_float+0xb6>
 800433e:	f04f 0a00 	mov.w	sl, #0
 8004342:	f104 0b1a 	add.w	fp, r4, #26
 8004346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004348:	425b      	negs	r3, r3
 800434a:	4553      	cmp	r3, sl
 800434c:	dc01      	bgt.n	8004352 <_printf_float+0x2b6>
 800434e:	464b      	mov	r3, r9
 8004350:	e793      	b.n	800427a <_printf_float+0x1de>
 8004352:	2301      	movs	r3, #1
 8004354:	465a      	mov	r2, fp
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	f43f aef8 	beq.w	8004152 <_printf_float+0xb6>
 8004362:	f10a 0a01 	add.w	sl, sl, #1
 8004366:	e7ee      	b.n	8004346 <_printf_float+0x2aa>
 8004368:	7fefffff 	.word	0x7fefffff
 800436c:	08006b06 	.word	0x08006b06
 8004370:	08006b0a 	.word	0x08006b0a
 8004374:	08006b0e 	.word	0x08006b0e
 8004378:	08006b12 	.word	0x08006b12
 800437c:	08006b16 	.word	0x08006b16
 8004380:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004382:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004386:	4553      	cmp	r3, sl
 8004388:	bfa8      	it	ge
 800438a:	4653      	movge	r3, sl
 800438c:	2b00      	cmp	r3, #0
 800438e:	4699      	mov	r9, r3
 8004390:	dc36      	bgt.n	8004400 <_printf_float+0x364>
 8004392:	f04f 0b00 	mov.w	fp, #0
 8004396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800439a:	f104 021a 	add.w	r2, r4, #26
 800439e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80043a2:	eba3 0309 	sub.w	r3, r3, r9
 80043a6:	455b      	cmp	r3, fp
 80043a8:	dc31      	bgt.n	800440e <_printf_float+0x372>
 80043aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043ac:	459a      	cmp	sl, r3
 80043ae:	dc3a      	bgt.n	8004426 <_printf_float+0x38a>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	07da      	lsls	r2, r3, #31
 80043b4:	d437      	bmi.n	8004426 <_printf_float+0x38a>
 80043b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043b8:	ebaa 0903 	sub.w	r9, sl, r3
 80043bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043be:	ebaa 0303 	sub.w	r3, sl, r3
 80043c2:	4599      	cmp	r9, r3
 80043c4:	bfa8      	it	ge
 80043c6:	4699      	movge	r9, r3
 80043c8:	f1b9 0f00 	cmp.w	r9, #0
 80043cc:	dc33      	bgt.n	8004436 <_printf_float+0x39a>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043d6:	f104 0b1a 	add.w	fp, r4, #26
 80043da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043dc:	ebaa 0303 	sub.w	r3, sl, r3
 80043e0:	eba3 0309 	sub.w	r3, r3, r9
 80043e4:	4543      	cmp	r3, r8
 80043e6:	f77f af7a 	ble.w	80042de <_printf_float+0x242>
 80043ea:	2301      	movs	r3, #1
 80043ec:	465a      	mov	r2, fp
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	f43f aeac 	beq.w	8004152 <_printf_float+0xb6>
 80043fa:	f108 0801 	add.w	r8, r8, #1
 80043fe:	e7ec      	b.n	80043da <_printf_float+0x33e>
 8004400:	4642      	mov	r2, r8
 8004402:	4631      	mov	r1, r6
 8004404:	4628      	mov	r0, r5
 8004406:	47b8      	blx	r7
 8004408:	3001      	adds	r0, #1
 800440a:	d1c2      	bne.n	8004392 <_printf_float+0x2f6>
 800440c:	e6a1      	b.n	8004152 <_printf_float+0xb6>
 800440e:	2301      	movs	r3, #1
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	920a      	str	r2, [sp, #40]	@ 0x28
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	f43f ae9a 	beq.w	8004152 <_printf_float+0xb6>
 800441e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004420:	f10b 0b01 	add.w	fp, fp, #1
 8004424:	e7bb      	b.n	800439e <_printf_float+0x302>
 8004426:	4631      	mov	r1, r6
 8004428:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	d1c0      	bne.n	80043b6 <_printf_float+0x31a>
 8004434:	e68d      	b.n	8004152 <_printf_float+0xb6>
 8004436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004438:	464b      	mov	r3, r9
 800443a:	4631      	mov	r1, r6
 800443c:	4628      	mov	r0, r5
 800443e:	4442      	add	r2, r8
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	d1c3      	bne.n	80043ce <_printf_float+0x332>
 8004446:	e684      	b.n	8004152 <_printf_float+0xb6>
 8004448:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800444c:	f1ba 0f01 	cmp.w	sl, #1
 8004450:	dc01      	bgt.n	8004456 <_printf_float+0x3ba>
 8004452:	07db      	lsls	r3, r3, #31
 8004454:	d536      	bpl.n	80044c4 <_printf_float+0x428>
 8004456:	2301      	movs	r3, #1
 8004458:	4642      	mov	r2, r8
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	f43f ae76 	beq.w	8004152 <_printf_float+0xb6>
 8004466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f ae6e 	beq.w	8004152 <_printf_float+0xb6>
 8004476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800447a:	2200      	movs	r2, #0
 800447c:	2300      	movs	r3, #0
 800447e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004482:	f7fc fa91 	bl	80009a8 <__aeabi_dcmpeq>
 8004486:	b9c0      	cbnz	r0, 80044ba <_printf_float+0x41e>
 8004488:	4653      	mov	r3, sl
 800448a:	f108 0201 	add.w	r2, r8, #1
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	d10c      	bne.n	80044b2 <_printf_float+0x416>
 8004498:	e65b      	b.n	8004152 <_printf_float+0xb6>
 800449a:	2301      	movs	r3, #1
 800449c:	465a      	mov	r2, fp
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	f43f ae54 	beq.w	8004152 <_printf_float+0xb6>
 80044aa:	f108 0801 	add.w	r8, r8, #1
 80044ae:	45d0      	cmp	r8, sl
 80044b0:	dbf3      	blt.n	800449a <_printf_float+0x3fe>
 80044b2:	464b      	mov	r3, r9
 80044b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80044b8:	e6e0      	b.n	800427c <_printf_float+0x1e0>
 80044ba:	f04f 0800 	mov.w	r8, #0
 80044be:	f104 0b1a 	add.w	fp, r4, #26
 80044c2:	e7f4      	b.n	80044ae <_printf_float+0x412>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4642      	mov	r2, r8
 80044c8:	e7e1      	b.n	800448e <_printf_float+0x3f2>
 80044ca:	2301      	movs	r3, #1
 80044cc:	464a      	mov	r2, r9
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b8      	blx	r7
 80044d4:	3001      	adds	r0, #1
 80044d6:	f43f ae3c 	beq.w	8004152 <_printf_float+0xb6>
 80044da:	f108 0801 	add.w	r8, r8, #1
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80044e2:	1a5b      	subs	r3, r3, r1
 80044e4:	4543      	cmp	r3, r8
 80044e6:	dcf0      	bgt.n	80044ca <_printf_float+0x42e>
 80044e8:	e6fd      	b.n	80042e6 <_printf_float+0x24a>
 80044ea:	f04f 0800 	mov.w	r8, #0
 80044ee:	f104 0919 	add.w	r9, r4, #25
 80044f2:	e7f4      	b.n	80044de <_printf_float+0x442>

080044f4 <_printf_common>:
 80044f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	4616      	mov	r6, r2
 80044fa:	4698      	mov	r8, r3
 80044fc:	688a      	ldr	r2, [r1, #8]
 80044fe:	690b      	ldr	r3, [r1, #16]
 8004500:	4607      	mov	r7, r0
 8004502:	4293      	cmp	r3, r2
 8004504:	bfb8      	it	lt
 8004506:	4613      	movlt	r3, r2
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800450e:	460c      	mov	r4, r1
 8004510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004514:	b10a      	cbz	r2, 800451a <_printf_common+0x26>
 8004516:	3301      	adds	r3, #1
 8004518:	6033      	str	r3, [r6, #0]
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	0699      	lsls	r1, r3, #26
 800451e:	bf42      	ittt	mi
 8004520:	6833      	ldrmi	r3, [r6, #0]
 8004522:	3302      	addmi	r3, #2
 8004524:	6033      	strmi	r3, [r6, #0]
 8004526:	6825      	ldr	r5, [r4, #0]
 8004528:	f015 0506 	ands.w	r5, r5, #6
 800452c:	d106      	bne.n	800453c <_printf_common+0x48>
 800452e:	f104 0a19 	add.w	sl, r4, #25
 8004532:	68e3      	ldr	r3, [r4, #12]
 8004534:	6832      	ldr	r2, [r6, #0]
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	42ab      	cmp	r3, r5
 800453a:	dc2b      	bgt.n	8004594 <_printf_common+0xa0>
 800453c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	3b00      	subs	r3, #0
 8004544:	bf18      	it	ne
 8004546:	2301      	movne	r3, #1
 8004548:	0692      	lsls	r2, r2, #26
 800454a:	d430      	bmi.n	80045ae <_printf_common+0xba>
 800454c:	4641      	mov	r1, r8
 800454e:	4638      	mov	r0, r7
 8004550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004554:	47c8      	blx	r9
 8004556:	3001      	adds	r0, #1
 8004558:	d023      	beq.n	80045a2 <_printf_common+0xae>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	6922      	ldr	r2, [r4, #16]
 800455e:	f003 0306 	and.w	r3, r3, #6
 8004562:	2b04      	cmp	r3, #4
 8004564:	bf14      	ite	ne
 8004566:	2500      	movne	r5, #0
 8004568:	6833      	ldreq	r3, [r6, #0]
 800456a:	f04f 0600 	mov.w	r6, #0
 800456e:	bf08      	it	eq
 8004570:	68e5      	ldreq	r5, [r4, #12]
 8004572:	f104 041a 	add.w	r4, r4, #26
 8004576:	bf08      	it	eq
 8004578:	1aed      	subeq	r5, r5, r3
 800457a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800457e:	bf08      	it	eq
 8004580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004584:	4293      	cmp	r3, r2
 8004586:	bfc4      	itt	gt
 8004588:	1a9b      	subgt	r3, r3, r2
 800458a:	18ed      	addgt	r5, r5, r3
 800458c:	42b5      	cmp	r5, r6
 800458e:	d11a      	bne.n	80045c6 <_printf_common+0xd2>
 8004590:	2000      	movs	r0, #0
 8004592:	e008      	b.n	80045a6 <_printf_common+0xb2>
 8004594:	2301      	movs	r3, #1
 8004596:	4652      	mov	r2, sl
 8004598:	4641      	mov	r1, r8
 800459a:	4638      	mov	r0, r7
 800459c:	47c8      	blx	r9
 800459e:	3001      	adds	r0, #1
 80045a0:	d103      	bne.n	80045aa <_printf_common+0xb6>
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295
 80045a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045aa:	3501      	adds	r5, #1
 80045ac:	e7c1      	b.n	8004532 <_printf_common+0x3e>
 80045ae:	2030      	movs	r0, #48	@ 0x30
 80045b0:	18e1      	adds	r1, r4, r3
 80045b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045bc:	4422      	add	r2, r4
 80045be:	3302      	adds	r3, #2
 80045c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045c4:	e7c2      	b.n	800454c <_printf_common+0x58>
 80045c6:	2301      	movs	r3, #1
 80045c8:	4622      	mov	r2, r4
 80045ca:	4641      	mov	r1, r8
 80045cc:	4638      	mov	r0, r7
 80045ce:	47c8      	blx	r9
 80045d0:	3001      	adds	r0, #1
 80045d2:	d0e6      	beq.n	80045a2 <_printf_common+0xae>
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7d9      	b.n	800458c <_printf_common+0x98>

080045d8 <_printf_i>:
 80045d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	7e0f      	ldrb	r7, [r1, #24]
 80045de:	4691      	mov	r9, r2
 80045e0:	2f78      	cmp	r7, #120	@ 0x78
 80045e2:	4680      	mov	r8, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	469a      	mov	sl, r3
 80045e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045ee:	d807      	bhi.n	8004600 <_printf_i+0x28>
 80045f0:	2f62      	cmp	r7, #98	@ 0x62
 80045f2:	d80a      	bhi.n	800460a <_printf_i+0x32>
 80045f4:	2f00      	cmp	r7, #0
 80045f6:	f000 80d3 	beq.w	80047a0 <_printf_i+0x1c8>
 80045fa:	2f58      	cmp	r7, #88	@ 0x58
 80045fc:	f000 80ba 	beq.w	8004774 <_printf_i+0x19c>
 8004600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004608:	e03a      	b.n	8004680 <_printf_i+0xa8>
 800460a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800460e:	2b15      	cmp	r3, #21
 8004610:	d8f6      	bhi.n	8004600 <_printf_i+0x28>
 8004612:	a101      	add	r1, pc, #4	@ (adr r1, 8004618 <_printf_i+0x40>)
 8004614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004618:	08004671 	.word	0x08004671
 800461c:	08004685 	.word	0x08004685
 8004620:	08004601 	.word	0x08004601
 8004624:	08004601 	.word	0x08004601
 8004628:	08004601 	.word	0x08004601
 800462c:	08004601 	.word	0x08004601
 8004630:	08004685 	.word	0x08004685
 8004634:	08004601 	.word	0x08004601
 8004638:	08004601 	.word	0x08004601
 800463c:	08004601 	.word	0x08004601
 8004640:	08004601 	.word	0x08004601
 8004644:	08004787 	.word	0x08004787
 8004648:	080046af 	.word	0x080046af
 800464c:	08004741 	.word	0x08004741
 8004650:	08004601 	.word	0x08004601
 8004654:	08004601 	.word	0x08004601
 8004658:	080047a9 	.word	0x080047a9
 800465c:	08004601 	.word	0x08004601
 8004660:	080046af 	.word	0x080046af
 8004664:	08004601 	.word	0x08004601
 8004668:	08004601 	.word	0x08004601
 800466c:	08004749 	.word	0x08004749
 8004670:	6833      	ldr	r3, [r6, #0]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6032      	str	r2, [r6, #0]
 8004678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800467c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004680:	2301      	movs	r3, #1
 8004682:	e09e      	b.n	80047c2 <_printf_i+0x1ea>
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	1d19      	adds	r1, r3, #4
 800468a:	6031      	str	r1, [r6, #0]
 800468c:	0606      	lsls	r6, r0, #24
 800468e:	d501      	bpl.n	8004694 <_printf_i+0xbc>
 8004690:	681d      	ldr	r5, [r3, #0]
 8004692:	e003      	b.n	800469c <_printf_i+0xc4>
 8004694:	0645      	lsls	r5, r0, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0xb8>
 8004698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800469c:	2d00      	cmp	r5, #0
 800469e:	da03      	bge.n	80046a8 <_printf_i+0xd0>
 80046a0:	232d      	movs	r3, #45	@ 0x2d
 80046a2:	426d      	negs	r5, r5
 80046a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046a8:	230a      	movs	r3, #10
 80046aa:	4859      	ldr	r0, [pc, #356]	@ (8004810 <_printf_i+0x238>)
 80046ac:	e011      	b.n	80046d2 <_printf_i+0xfa>
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	6833      	ldr	r3, [r6, #0]
 80046b2:	0608      	lsls	r0, r1, #24
 80046b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046b8:	d402      	bmi.n	80046c0 <_printf_i+0xe8>
 80046ba:	0649      	lsls	r1, r1, #25
 80046bc:	bf48      	it	mi
 80046be:	b2ad      	uxthmi	r5, r5
 80046c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	bf14      	ite	ne
 80046c6:	230a      	movne	r3, #10
 80046c8:	2308      	moveq	r3, #8
 80046ca:	4851      	ldr	r0, [pc, #324]	@ (8004810 <_printf_i+0x238>)
 80046cc:	2100      	movs	r1, #0
 80046ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046d2:	6866      	ldr	r6, [r4, #4]
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	bfa8      	it	ge
 80046d8:	6821      	ldrge	r1, [r4, #0]
 80046da:	60a6      	str	r6, [r4, #8]
 80046dc:	bfa4      	itt	ge
 80046de:	f021 0104 	bicge.w	r1, r1, #4
 80046e2:	6021      	strge	r1, [r4, #0]
 80046e4:	b90d      	cbnz	r5, 80046ea <_printf_i+0x112>
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	d04b      	beq.n	8004782 <_printf_i+0x1aa>
 80046ea:	4616      	mov	r6, r2
 80046ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80046f0:	fb03 5711 	mls	r7, r3, r1, r5
 80046f4:	5dc7      	ldrb	r7, [r0, r7]
 80046f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046fa:	462f      	mov	r7, r5
 80046fc:	42bb      	cmp	r3, r7
 80046fe:	460d      	mov	r5, r1
 8004700:	d9f4      	bls.n	80046ec <_printf_i+0x114>
 8004702:	2b08      	cmp	r3, #8
 8004704:	d10b      	bne.n	800471e <_printf_i+0x146>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	07df      	lsls	r7, r3, #31
 800470a:	d508      	bpl.n	800471e <_printf_i+0x146>
 800470c:	6923      	ldr	r3, [r4, #16]
 800470e:	6861      	ldr	r1, [r4, #4]
 8004710:	4299      	cmp	r1, r3
 8004712:	bfde      	ittt	le
 8004714:	2330      	movle	r3, #48	@ 0x30
 8004716:	f806 3c01 	strble.w	r3, [r6, #-1]
 800471a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800471e:	1b92      	subs	r2, r2, r6
 8004720:	6122      	str	r2, [r4, #16]
 8004722:	464b      	mov	r3, r9
 8004724:	4621      	mov	r1, r4
 8004726:	4640      	mov	r0, r8
 8004728:	f8cd a000 	str.w	sl, [sp]
 800472c:	aa03      	add	r2, sp, #12
 800472e:	f7ff fee1 	bl	80044f4 <_printf_common>
 8004732:	3001      	adds	r0, #1
 8004734:	d14a      	bne.n	80047cc <_printf_i+0x1f4>
 8004736:	f04f 30ff 	mov.w	r0, #4294967295
 800473a:	b004      	add	sp, #16
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	f043 0320 	orr.w	r3, r3, #32
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	2778      	movs	r7, #120	@ 0x78
 800474a:	4832      	ldr	r0, [pc, #200]	@ (8004814 <_printf_i+0x23c>)
 800474c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	6831      	ldr	r1, [r6, #0]
 8004754:	061f      	lsls	r7, r3, #24
 8004756:	f851 5b04 	ldr.w	r5, [r1], #4
 800475a:	d402      	bmi.n	8004762 <_printf_i+0x18a>
 800475c:	065f      	lsls	r7, r3, #25
 800475e:	bf48      	it	mi
 8004760:	b2ad      	uxthmi	r5, r5
 8004762:	6031      	str	r1, [r6, #0]
 8004764:	07d9      	lsls	r1, r3, #31
 8004766:	bf44      	itt	mi
 8004768:	f043 0320 	orrmi.w	r3, r3, #32
 800476c:	6023      	strmi	r3, [r4, #0]
 800476e:	b11d      	cbz	r5, 8004778 <_printf_i+0x1a0>
 8004770:	2310      	movs	r3, #16
 8004772:	e7ab      	b.n	80046cc <_printf_i+0xf4>
 8004774:	4826      	ldr	r0, [pc, #152]	@ (8004810 <_printf_i+0x238>)
 8004776:	e7e9      	b.n	800474c <_printf_i+0x174>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	f023 0320 	bic.w	r3, r3, #32
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	e7f6      	b.n	8004770 <_printf_i+0x198>
 8004782:	4616      	mov	r6, r2
 8004784:	e7bd      	b.n	8004702 <_printf_i+0x12a>
 8004786:	6833      	ldr	r3, [r6, #0]
 8004788:	6825      	ldr	r5, [r4, #0]
 800478a:	1d18      	adds	r0, r3, #4
 800478c:	6961      	ldr	r1, [r4, #20]
 800478e:	6030      	str	r0, [r6, #0]
 8004790:	062e      	lsls	r6, r5, #24
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	d501      	bpl.n	800479a <_printf_i+0x1c2>
 8004796:	6019      	str	r1, [r3, #0]
 8004798:	e002      	b.n	80047a0 <_printf_i+0x1c8>
 800479a:	0668      	lsls	r0, r5, #25
 800479c:	d5fb      	bpl.n	8004796 <_printf_i+0x1be>
 800479e:	8019      	strh	r1, [r3, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	4616      	mov	r6, r2
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	e7bc      	b.n	8004722 <_printf_i+0x14a>
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	2100      	movs	r1, #0
 80047ac:	1d1a      	adds	r2, r3, #4
 80047ae:	6032      	str	r2, [r6, #0]
 80047b0:	681e      	ldr	r6, [r3, #0]
 80047b2:	6862      	ldr	r2, [r4, #4]
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 fb5a 	bl	8004e6e <memchr>
 80047ba:	b108      	cbz	r0, 80047c0 <_printf_i+0x1e8>
 80047bc:	1b80      	subs	r0, r0, r6
 80047be:	6060      	str	r0, [r4, #4]
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	6123      	str	r3, [r4, #16]
 80047c4:	2300      	movs	r3, #0
 80047c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ca:	e7aa      	b.n	8004722 <_printf_i+0x14a>
 80047cc:	4632      	mov	r2, r6
 80047ce:	4649      	mov	r1, r9
 80047d0:	4640      	mov	r0, r8
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	47d0      	blx	sl
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0ad      	beq.n	8004736 <_printf_i+0x15e>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	079b      	lsls	r3, r3, #30
 80047de:	d413      	bmi.n	8004808 <_printf_i+0x230>
 80047e0:	68e0      	ldr	r0, [r4, #12]
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	4298      	cmp	r0, r3
 80047e6:	bfb8      	it	lt
 80047e8:	4618      	movlt	r0, r3
 80047ea:	e7a6      	b.n	800473a <_printf_i+0x162>
 80047ec:	2301      	movs	r3, #1
 80047ee:	4632      	mov	r2, r6
 80047f0:	4649      	mov	r1, r9
 80047f2:	4640      	mov	r0, r8
 80047f4:	47d0      	blx	sl
 80047f6:	3001      	adds	r0, #1
 80047f8:	d09d      	beq.n	8004736 <_printf_i+0x15e>
 80047fa:	3501      	adds	r5, #1
 80047fc:	68e3      	ldr	r3, [r4, #12]
 80047fe:	9903      	ldr	r1, [sp, #12]
 8004800:	1a5b      	subs	r3, r3, r1
 8004802:	42ab      	cmp	r3, r5
 8004804:	dcf2      	bgt.n	80047ec <_printf_i+0x214>
 8004806:	e7eb      	b.n	80047e0 <_printf_i+0x208>
 8004808:	2500      	movs	r5, #0
 800480a:	f104 0619 	add.w	r6, r4, #25
 800480e:	e7f5      	b.n	80047fc <_printf_i+0x224>
 8004810:	08006b18 	.word	0x08006b18
 8004814:	08006b29 	.word	0x08006b29

08004818 <std>:
 8004818:	2300      	movs	r3, #0
 800481a:	b510      	push	{r4, lr}
 800481c:	4604      	mov	r4, r0
 800481e:	e9c0 3300 	strd	r3, r3, [r0]
 8004822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004826:	6083      	str	r3, [r0, #8]
 8004828:	8181      	strh	r1, [r0, #12]
 800482a:	6643      	str	r3, [r0, #100]	@ 0x64
 800482c:	81c2      	strh	r2, [r0, #14]
 800482e:	6183      	str	r3, [r0, #24]
 8004830:	4619      	mov	r1, r3
 8004832:	2208      	movs	r2, #8
 8004834:	305c      	adds	r0, #92	@ 0x5c
 8004836:	f000 fa9b 	bl	8004d70 <memset>
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <std+0x58>)
 800483c:	6224      	str	r4, [r4, #32]
 800483e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004840:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <std+0x5c>)
 8004842:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004844:	4b0c      	ldr	r3, [pc, #48]	@ (8004878 <std+0x60>)
 8004846:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004848:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <std+0x64>)
 800484a:	6323      	str	r3, [r4, #48]	@ 0x30
 800484c:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <std+0x68>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d006      	beq.n	8004860 <std+0x48>
 8004852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004856:	4294      	cmp	r4, r2
 8004858:	d002      	beq.n	8004860 <std+0x48>
 800485a:	33d0      	adds	r3, #208	@ 0xd0
 800485c:	429c      	cmp	r4, r3
 800485e:	d105      	bne.n	800486c <std+0x54>
 8004860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004868:	f000 bafe 	b.w	8004e68 <__retarget_lock_init_recursive>
 800486c:	bd10      	pop	{r4, pc}
 800486e:	bf00      	nop
 8004870:	08004bc1 	.word	0x08004bc1
 8004874:	08004be3 	.word	0x08004be3
 8004878:	08004c1b 	.word	0x08004c1b
 800487c:	08004c3f 	.word	0x08004c3f
 8004880:	2000034c 	.word	0x2000034c

08004884 <stdio_exit_handler>:
 8004884:	4a02      	ldr	r2, [pc, #8]	@ (8004890 <stdio_exit_handler+0xc>)
 8004886:	4903      	ldr	r1, [pc, #12]	@ (8004894 <stdio_exit_handler+0x10>)
 8004888:	4803      	ldr	r0, [pc, #12]	@ (8004898 <stdio_exit_handler+0x14>)
 800488a:	f000 b869 	b.w	8004960 <_fwalk_sglue>
 800488e:	bf00      	nop
 8004890:	2000000c 	.word	0x2000000c
 8004894:	0800652d 	.word	0x0800652d
 8004898:	2000001c 	.word	0x2000001c

0800489c <cleanup_stdio>:
 800489c:	6841      	ldr	r1, [r0, #4]
 800489e:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <cleanup_stdio+0x34>)
 80048a0:	b510      	push	{r4, lr}
 80048a2:	4299      	cmp	r1, r3
 80048a4:	4604      	mov	r4, r0
 80048a6:	d001      	beq.n	80048ac <cleanup_stdio+0x10>
 80048a8:	f001 fe40 	bl	800652c <_fflush_r>
 80048ac:	68a1      	ldr	r1, [r4, #8]
 80048ae:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <cleanup_stdio+0x38>)
 80048b0:	4299      	cmp	r1, r3
 80048b2:	d002      	beq.n	80048ba <cleanup_stdio+0x1e>
 80048b4:	4620      	mov	r0, r4
 80048b6:	f001 fe39 	bl	800652c <_fflush_r>
 80048ba:	68e1      	ldr	r1, [r4, #12]
 80048bc:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <cleanup_stdio+0x3c>)
 80048be:	4299      	cmp	r1, r3
 80048c0:	d004      	beq.n	80048cc <cleanup_stdio+0x30>
 80048c2:	4620      	mov	r0, r4
 80048c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c8:	f001 be30 	b.w	800652c <_fflush_r>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	bf00      	nop
 80048d0:	2000034c 	.word	0x2000034c
 80048d4:	200003b4 	.word	0x200003b4
 80048d8:	2000041c 	.word	0x2000041c

080048dc <global_stdio_init.part.0>:
 80048dc:	b510      	push	{r4, lr}
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <global_stdio_init.part.0+0x30>)
 80048e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004910 <global_stdio_init.part.0+0x34>)
 80048e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004914 <global_stdio_init.part.0+0x38>)
 80048e4:	4620      	mov	r0, r4
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	2104      	movs	r1, #4
 80048ea:	2200      	movs	r2, #0
 80048ec:	f7ff ff94 	bl	8004818 <std>
 80048f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048f4:	2201      	movs	r2, #1
 80048f6:	2109      	movs	r1, #9
 80048f8:	f7ff ff8e 	bl	8004818 <std>
 80048fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004900:	2202      	movs	r2, #2
 8004902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004906:	2112      	movs	r1, #18
 8004908:	f7ff bf86 	b.w	8004818 <std>
 800490c:	20000484 	.word	0x20000484
 8004910:	2000034c 	.word	0x2000034c
 8004914:	08004885 	.word	0x08004885

08004918 <__sfp_lock_acquire>:
 8004918:	4801      	ldr	r0, [pc, #4]	@ (8004920 <__sfp_lock_acquire+0x8>)
 800491a:	f000 baa6 	b.w	8004e6a <__retarget_lock_acquire_recursive>
 800491e:	bf00      	nop
 8004920:	2000048d 	.word	0x2000048d

08004924 <__sfp_lock_release>:
 8004924:	4801      	ldr	r0, [pc, #4]	@ (800492c <__sfp_lock_release+0x8>)
 8004926:	f000 baa1 	b.w	8004e6c <__retarget_lock_release_recursive>
 800492a:	bf00      	nop
 800492c:	2000048d 	.word	0x2000048d

08004930 <__sinit>:
 8004930:	b510      	push	{r4, lr}
 8004932:	4604      	mov	r4, r0
 8004934:	f7ff fff0 	bl	8004918 <__sfp_lock_acquire>
 8004938:	6a23      	ldr	r3, [r4, #32]
 800493a:	b11b      	cbz	r3, 8004944 <__sinit+0x14>
 800493c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004940:	f7ff bff0 	b.w	8004924 <__sfp_lock_release>
 8004944:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <__sinit+0x28>)
 8004946:	6223      	str	r3, [r4, #32]
 8004948:	4b04      	ldr	r3, [pc, #16]	@ (800495c <__sinit+0x2c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f5      	bne.n	800493c <__sinit+0xc>
 8004950:	f7ff ffc4 	bl	80048dc <global_stdio_init.part.0>
 8004954:	e7f2      	b.n	800493c <__sinit+0xc>
 8004956:	bf00      	nop
 8004958:	0800489d 	.word	0x0800489d
 800495c:	20000484 	.word	0x20000484

08004960 <_fwalk_sglue>:
 8004960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004964:	4607      	mov	r7, r0
 8004966:	4688      	mov	r8, r1
 8004968:	4614      	mov	r4, r2
 800496a:	2600      	movs	r6, #0
 800496c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004970:	f1b9 0901 	subs.w	r9, r9, #1
 8004974:	d505      	bpl.n	8004982 <_fwalk_sglue+0x22>
 8004976:	6824      	ldr	r4, [r4, #0]
 8004978:	2c00      	cmp	r4, #0
 800497a:	d1f7      	bne.n	800496c <_fwalk_sglue+0xc>
 800497c:	4630      	mov	r0, r6
 800497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d907      	bls.n	8004998 <_fwalk_sglue+0x38>
 8004988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800498c:	3301      	adds	r3, #1
 800498e:	d003      	beq.n	8004998 <_fwalk_sglue+0x38>
 8004990:	4629      	mov	r1, r5
 8004992:	4638      	mov	r0, r7
 8004994:	47c0      	blx	r8
 8004996:	4306      	orrs	r6, r0
 8004998:	3568      	adds	r5, #104	@ 0x68
 800499a:	e7e9      	b.n	8004970 <_fwalk_sglue+0x10>

0800499c <_puts_r>:
 800499c:	6a03      	ldr	r3, [r0, #32]
 800499e:	b570      	push	{r4, r5, r6, lr}
 80049a0:	4605      	mov	r5, r0
 80049a2:	460e      	mov	r6, r1
 80049a4:	6884      	ldr	r4, [r0, #8]
 80049a6:	b90b      	cbnz	r3, 80049ac <_puts_r+0x10>
 80049a8:	f7ff ffc2 	bl	8004930 <__sinit>
 80049ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049ae:	07db      	lsls	r3, r3, #31
 80049b0:	d405      	bmi.n	80049be <_puts_r+0x22>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	0598      	lsls	r0, r3, #22
 80049b6:	d402      	bmi.n	80049be <_puts_r+0x22>
 80049b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ba:	f000 fa56 	bl	8004e6a <__retarget_lock_acquire_recursive>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	0719      	lsls	r1, r3, #28
 80049c2:	d502      	bpl.n	80049ca <_puts_r+0x2e>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d135      	bne.n	8004a36 <_puts_r+0x9a>
 80049ca:	4621      	mov	r1, r4
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 f979 	bl	8004cc4 <__swsetup_r>
 80049d2:	b380      	cbz	r0, 8004a36 <_puts_r+0x9a>
 80049d4:	f04f 35ff 	mov.w	r5, #4294967295
 80049d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049da:	07da      	lsls	r2, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_puts_r+0x4e>
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	059b      	lsls	r3, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_puts_r+0x4e>
 80049e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049e6:	f000 fa41 	bl	8004e6c <__retarget_lock_release_recursive>
 80049ea:	4628      	mov	r0, r5
 80049ec:	bd70      	pop	{r4, r5, r6, pc}
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da04      	bge.n	80049fc <_puts_r+0x60>
 80049f2:	69a2      	ldr	r2, [r4, #24]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	dc17      	bgt.n	8004a28 <_puts_r+0x8c>
 80049f8:	290a      	cmp	r1, #10
 80049fa:	d015      	beq.n	8004a28 <_puts_r+0x8c>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	7019      	strb	r1, [r3, #0]
 8004a04:	68a3      	ldr	r3, [r4, #8]
 8004a06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60a3      	str	r3, [r4, #8]
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	d1ed      	bne.n	80049ee <_puts_r+0x52>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da11      	bge.n	8004a3a <_puts_r+0x9e>
 8004a16:	4622      	mov	r2, r4
 8004a18:	210a      	movs	r1, #10
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f913 	bl	8004c46 <__swbuf_r>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d0d7      	beq.n	80049d4 <_puts_r+0x38>
 8004a24:	250a      	movs	r5, #10
 8004a26:	e7d7      	b.n	80049d8 <_puts_r+0x3c>
 8004a28:	4622      	mov	r2, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 f90b 	bl	8004c46 <__swbuf_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d1e7      	bne.n	8004a04 <_puts_r+0x68>
 8004a34:	e7ce      	b.n	80049d4 <_puts_r+0x38>
 8004a36:	3e01      	subs	r6, #1
 8004a38:	e7e4      	b.n	8004a04 <_puts_r+0x68>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	6022      	str	r2, [r4, #0]
 8004a40:	220a      	movs	r2, #10
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e7ee      	b.n	8004a24 <_puts_r+0x88>
	...

08004a48 <puts>:
 8004a48:	4b02      	ldr	r3, [pc, #8]	@ (8004a54 <puts+0xc>)
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	f7ff bfa5 	b.w	800499c <_puts_r>
 8004a52:	bf00      	nop
 8004a54:	20000018 	.word	0x20000018

08004a58 <setvbuf>:
 8004a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a5c:	461d      	mov	r5, r3
 8004a5e:	4b57      	ldr	r3, [pc, #348]	@ (8004bbc <setvbuf+0x164>)
 8004a60:	4604      	mov	r4, r0
 8004a62:	681f      	ldr	r7, [r3, #0]
 8004a64:	460e      	mov	r6, r1
 8004a66:	4690      	mov	r8, r2
 8004a68:	b127      	cbz	r7, 8004a74 <setvbuf+0x1c>
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	b913      	cbnz	r3, 8004a74 <setvbuf+0x1c>
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f7ff ff5e 	bl	8004930 <__sinit>
 8004a74:	f1b8 0f02 	cmp.w	r8, #2
 8004a78:	d006      	beq.n	8004a88 <setvbuf+0x30>
 8004a7a:	f1b8 0f01 	cmp.w	r8, #1
 8004a7e:	f200 809a 	bhi.w	8004bb6 <setvbuf+0x15e>
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	f2c0 8097 	blt.w	8004bb6 <setvbuf+0x15e>
 8004a88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a8a:	07d9      	lsls	r1, r3, #31
 8004a8c:	d405      	bmi.n	8004a9a <setvbuf+0x42>
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	059a      	lsls	r2, r3, #22
 8004a92:	d402      	bmi.n	8004a9a <setvbuf+0x42>
 8004a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a96:	f000 f9e8 	bl	8004e6a <__retarget_lock_acquire_recursive>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f001 fd45 	bl	800652c <_fflush_r>
 8004aa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aa4:	b141      	cbz	r1, 8004ab8 <setvbuf+0x60>
 8004aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aaa:	4299      	cmp	r1, r3
 8004aac:	d002      	beq.n	8004ab4 <setvbuf+0x5c>
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f001 f83e 	bl	8005b30 <_free_r>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61a3      	str	r3, [r4, #24]
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	d503      	bpl.n	8004acc <setvbuf+0x74>
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	6921      	ldr	r1, [r4, #16]
 8004ac8:	f001 f832 	bl	8005b30 <_free_r>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f1b8 0f02 	cmp.w	r8, #2
 8004ad2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	d061      	beq.n	8004ba2 <setvbuf+0x14a>
 8004ade:	ab01      	add	r3, sp, #4
 8004ae0:	466a      	mov	r2, sp
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f001 fd49 	bl	800657c <__swhatbuf_r>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	4318      	orrs	r0, r3
 8004aee:	81a0      	strh	r0, [r4, #12]
 8004af0:	bb2d      	cbnz	r5, 8004b3e <setvbuf+0xe6>
 8004af2:	9d00      	ldr	r5, [sp, #0]
 8004af4:	4628      	mov	r0, r5
 8004af6:	f001 f863 	bl	8005bc0 <malloc>
 8004afa:	4606      	mov	r6, r0
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d152      	bne.n	8004ba6 <setvbuf+0x14e>
 8004b00:	f8dd 9000 	ldr.w	r9, [sp]
 8004b04:	45a9      	cmp	r9, r5
 8004b06:	d140      	bne.n	8004b8a <setvbuf+0x132>
 8004b08:	f04f 35ff 	mov.w	r5, #4294967295
 8004b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b10:	f043 0202 	orr.w	r2, r3, #2
 8004b14:	81a2      	strh	r2, [r4, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	60a2      	str	r2, [r4, #8]
 8004b1a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004b1e:	6022      	str	r2, [r4, #0]
 8004b20:	6122      	str	r2, [r4, #16]
 8004b22:	2201      	movs	r2, #1
 8004b24:	6162      	str	r2, [r4, #20]
 8004b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b28:	07d6      	lsls	r6, r2, #31
 8004b2a:	d404      	bmi.n	8004b36 <setvbuf+0xde>
 8004b2c:	0598      	lsls	r0, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <setvbuf+0xde>
 8004b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b32:	f000 f99b 	bl	8004e6c <__retarget_lock_release_recursive>
 8004b36:	4628      	mov	r0, r5
 8004b38:	b003      	add	sp, #12
 8004b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d0d8      	beq.n	8004af4 <setvbuf+0x9c>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	b913      	cbnz	r3, 8004b4c <setvbuf+0xf4>
 8004b46:	4638      	mov	r0, r7
 8004b48:	f7ff fef2 	bl	8004930 <__sinit>
 8004b4c:	f1b8 0f01 	cmp.w	r8, #1
 8004b50:	bf08      	it	eq
 8004b52:	89a3      	ldrheq	r3, [r4, #12]
 8004b54:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004b58:	bf04      	itt	eq
 8004b5a:	f043 0301 	orreq.w	r3, r3, #1
 8004b5e:	81a3      	strheq	r3, [r4, #12]
 8004b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b64:	6026      	str	r6, [r4, #0]
 8004b66:	f013 0208 	ands.w	r2, r3, #8
 8004b6a:	d01e      	beq.n	8004baa <setvbuf+0x152>
 8004b6c:	07d9      	lsls	r1, r3, #31
 8004b6e:	bf41      	itttt	mi
 8004b70:	2200      	movmi	r2, #0
 8004b72:	426d      	negmi	r5, r5
 8004b74:	60a2      	strmi	r2, [r4, #8]
 8004b76:	61a5      	strmi	r5, [r4, #24]
 8004b78:	bf58      	it	pl
 8004b7a:	60a5      	strpl	r5, [r4, #8]
 8004b7c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b7e:	07d2      	lsls	r2, r2, #31
 8004b80:	d401      	bmi.n	8004b86 <setvbuf+0x12e>
 8004b82:	059b      	lsls	r3, r3, #22
 8004b84:	d513      	bpl.n	8004bae <setvbuf+0x156>
 8004b86:	2500      	movs	r5, #0
 8004b88:	e7d5      	b.n	8004b36 <setvbuf+0xde>
 8004b8a:	4648      	mov	r0, r9
 8004b8c:	f001 f818 	bl	8005bc0 <malloc>
 8004b90:	4606      	mov	r6, r0
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d0b8      	beq.n	8004b08 <setvbuf+0xb0>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	464d      	mov	r5, r9
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	e7cf      	b.n	8004b42 <setvbuf+0xea>
 8004ba2:	2500      	movs	r5, #0
 8004ba4:	e7b2      	b.n	8004b0c <setvbuf+0xb4>
 8004ba6:	46a9      	mov	r9, r5
 8004ba8:	e7f5      	b.n	8004b96 <setvbuf+0x13e>
 8004baa:	60a2      	str	r2, [r4, #8]
 8004bac:	e7e6      	b.n	8004b7c <setvbuf+0x124>
 8004bae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bb0:	f000 f95c 	bl	8004e6c <__retarget_lock_release_recursive>
 8004bb4:	e7e7      	b.n	8004b86 <setvbuf+0x12e>
 8004bb6:	f04f 35ff 	mov.w	r5, #4294967295
 8004bba:	e7bc      	b.n	8004b36 <setvbuf+0xde>
 8004bbc:	20000018 	.word	0x20000018

08004bc0 <__sread>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc8:	f000 f900 	bl	8004dcc <_read_r>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	bfab      	itete	ge
 8004bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd4:	181b      	addge	r3, r3, r0
 8004bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bda:	bfac      	ite	ge
 8004bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bde:	81a3      	strhlt	r3, [r4, #12]
 8004be0:	bd10      	pop	{r4, pc}

08004be2 <__swrite>:
 8004be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be6:	461f      	mov	r7, r3
 8004be8:	898b      	ldrh	r3, [r1, #12]
 8004bea:	4605      	mov	r5, r0
 8004bec:	05db      	lsls	r3, r3, #23
 8004bee:	460c      	mov	r4, r1
 8004bf0:	4616      	mov	r6, r2
 8004bf2:	d505      	bpl.n	8004c00 <__swrite+0x1e>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfc:	f000 f8d4 	bl	8004da8 <_lseek_r>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	4632      	mov	r2, r6
 8004c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c16:	f000 b8eb 	b.w	8004df0 <_write_r>

08004c1a <__sseek>:
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c22:	f000 f8c1 	bl	8004da8 <_lseek_r>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	bf15      	itete	ne
 8004c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c36:	81a3      	strheq	r3, [r4, #12]
 8004c38:	bf18      	it	ne
 8004c3a:	81a3      	strhne	r3, [r4, #12]
 8004c3c:	bd10      	pop	{r4, pc}

08004c3e <__sclose>:
 8004c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c42:	f000 b8a1 	b.w	8004d88 <_close_r>

08004c46 <__swbuf_r>:
 8004c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c48:	460e      	mov	r6, r1
 8004c4a:	4614      	mov	r4, r2
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	b118      	cbz	r0, 8004c58 <__swbuf_r+0x12>
 8004c50:	6a03      	ldr	r3, [r0, #32]
 8004c52:	b90b      	cbnz	r3, 8004c58 <__swbuf_r+0x12>
 8004c54:	f7ff fe6c 	bl	8004930 <__sinit>
 8004c58:	69a3      	ldr	r3, [r4, #24]
 8004c5a:	60a3      	str	r3, [r4, #8]
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	071a      	lsls	r2, r3, #28
 8004c60:	d501      	bpl.n	8004c66 <__swbuf_r+0x20>
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	b943      	cbnz	r3, 8004c78 <__swbuf_r+0x32>
 8004c66:	4621      	mov	r1, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 f82b 	bl	8004cc4 <__swsetup_r>
 8004c6e:	b118      	cbz	r0, 8004c78 <__swbuf_r+0x32>
 8004c70:	f04f 37ff 	mov.w	r7, #4294967295
 8004c74:	4638      	mov	r0, r7
 8004c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	6922      	ldr	r2, [r4, #16]
 8004c7c:	b2f6      	uxtb	r6, r6
 8004c7e:	1a98      	subs	r0, r3, r2
 8004c80:	6963      	ldr	r3, [r4, #20]
 8004c82:	4637      	mov	r7, r6
 8004c84:	4283      	cmp	r3, r0
 8004c86:	dc05      	bgt.n	8004c94 <__swbuf_r+0x4e>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f001 fc4e 	bl	800652c <_fflush_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d1ed      	bne.n	8004c70 <__swbuf_r+0x2a>
 8004c94:	68a3      	ldr	r3, [r4, #8]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	6022      	str	r2, [r4, #0]
 8004ca0:	701e      	strb	r6, [r3, #0]
 8004ca2:	6962      	ldr	r2, [r4, #20]
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d004      	beq.n	8004cb4 <__swbuf_r+0x6e>
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	07db      	lsls	r3, r3, #31
 8004cae:	d5e1      	bpl.n	8004c74 <__swbuf_r+0x2e>
 8004cb0:	2e0a      	cmp	r6, #10
 8004cb2:	d1df      	bne.n	8004c74 <__swbuf_r+0x2e>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f001 fc38 	bl	800652c <_fflush_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d0d9      	beq.n	8004c74 <__swbuf_r+0x2e>
 8004cc0:	e7d6      	b.n	8004c70 <__swbuf_r+0x2a>
	...

08004cc4 <__swsetup_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4b29      	ldr	r3, [pc, #164]	@ (8004d6c <__swsetup_r+0xa8>)
 8004cc8:	4605      	mov	r5, r0
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	460c      	mov	r4, r1
 8004cce:	b118      	cbz	r0, 8004cd8 <__swsetup_r+0x14>
 8004cd0:	6a03      	ldr	r3, [r0, #32]
 8004cd2:	b90b      	cbnz	r3, 8004cd8 <__swsetup_r+0x14>
 8004cd4:	f7ff fe2c 	bl	8004930 <__sinit>
 8004cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cdc:	0719      	lsls	r1, r3, #28
 8004cde:	d422      	bmi.n	8004d26 <__swsetup_r+0x62>
 8004ce0:	06da      	lsls	r2, r3, #27
 8004ce2:	d407      	bmi.n	8004cf4 <__swsetup_r+0x30>
 8004ce4:	2209      	movs	r2, #9
 8004ce6:	602a      	str	r2, [r5, #0]
 8004ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e033      	b.n	8004d5c <__swsetup_r+0x98>
 8004cf4:	0758      	lsls	r0, r3, #29
 8004cf6:	d512      	bpl.n	8004d1e <__swsetup_r+0x5a>
 8004cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cfa:	b141      	cbz	r1, 8004d0e <__swsetup_r+0x4a>
 8004cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <__swsetup_r+0x46>
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 ff13 	bl	8005b30 <_free_r>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	2300      	movs	r3, #0
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	b94b      	cbnz	r3, 8004d3e <__swsetup_r+0x7a>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d34:	d003      	beq.n	8004d3e <__swsetup_r+0x7a>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f001 fc44 	bl	80065c6 <__smakebuf_r>
 8004d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d42:	f013 0201 	ands.w	r2, r3, #1
 8004d46:	d00a      	beq.n	8004d5e <__swsetup_r+0x9a>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	60a2      	str	r2, [r4, #8]
 8004d4c:	6962      	ldr	r2, [r4, #20]
 8004d4e:	4252      	negs	r2, r2
 8004d50:	61a2      	str	r2, [r4, #24]
 8004d52:	6922      	ldr	r2, [r4, #16]
 8004d54:	b942      	cbnz	r2, 8004d68 <__swsetup_r+0xa4>
 8004d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d5a:	d1c5      	bne.n	8004ce8 <__swsetup_r+0x24>
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
 8004d5e:	0799      	lsls	r1, r3, #30
 8004d60:	bf58      	it	pl
 8004d62:	6962      	ldrpl	r2, [r4, #20]
 8004d64:	60a2      	str	r2, [r4, #8]
 8004d66:	e7f4      	b.n	8004d52 <__swsetup_r+0x8e>
 8004d68:	2000      	movs	r0, #0
 8004d6a:	e7f7      	b.n	8004d5c <__swsetup_r+0x98>
 8004d6c:	20000018 	.word	0x20000018

08004d70 <memset>:
 8004d70:	4603      	mov	r3, r0
 8004d72:	4402      	add	r2, r0
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d100      	bne.n	8004d7a <memset+0xa>
 8004d78:	4770      	bx	lr
 8004d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7e:	e7f9      	b.n	8004d74 <memset+0x4>

08004d80 <_localeconv_r>:
 8004d80:	4800      	ldr	r0, [pc, #0]	@ (8004d84 <_localeconv_r+0x4>)
 8004d82:	4770      	bx	lr
 8004d84:	20000158 	.word	0x20000158

08004d88 <_close_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4d05      	ldr	r5, [pc, #20]	@ (8004da4 <_close_r+0x1c>)
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fc fc03 	bl	800159e <_close>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_close_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_close_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20000488 	.word	0x20000488

08004da8 <_lseek_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	2200      	movs	r2, #0
 8004db2:	4d05      	ldr	r5, [pc, #20]	@ (8004dc8 <_lseek_r+0x20>)
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fc fc15 	bl	80015e6 <_lseek>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_lseek_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_lseek_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	20000488 	.word	0x20000488

08004dcc <_read_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4d05      	ldr	r5, [pc, #20]	@ (8004dec <_read_r+0x20>)
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f7fc fbc2 	bl	8001564 <_read>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_read_r+0x1e>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_read_r+0x1e>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000488 	.word	0x20000488

08004df0 <_write_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4d05      	ldr	r5, [pc, #20]	@ (8004e10 <_write_r+0x20>)
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fb fef4 	bl	8000bec <_write>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_write_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_write_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000488 	.word	0x20000488

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	@ (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000018 	.word	0x20000018

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	2600      	movs	r6, #0
 8004e24:	4d0c      	ldr	r5, [pc, #48]	@ (8004e58 <__libc_init_array+0x38>)
 8004e26:	4c0d      	ldr	r4, [pc, #52]	@ (8004e5c <__libc_init_array+0x3c>)
 8004e28:	1b64      	subs	r4, r4, r5
 8004e2a:	10a4      	asrs	r4, r4, #2
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	f001 fe34 	bl	8006a9c <_init>
 8004e34:	2600      	movs	r6, #0
 8004e36:	4d0a      	ldr	r5, [pc, #40]	@ (8004e60 <__libc_init_array+0x40>)
 8004e38:	4c0a      	ldr	r4, [pc, #40]	@ (8004e64 <__libc_init_array+0x44>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	08006e80 	.word	0x08006e80
 8004e5c:	08006e80 	.word	0x08006e80
 8004e60:	08006e80 	.word	0x08006e80
 8004e64:	08006e84 	.word	0x08006e84

08004e68 <__retarget_lock_init_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_acquire_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__retarget_lock_release_recursive>:
 8004e6c:	4770      	bx	lr

08004e6e <memchr>:
 8004e6e:	4603      	mov	r3, r0
 8004e70:	b510      	push	{r4, lr}
 8004e72:	b2c9      	uxtb	r1, r1
 8004e74:	4402      	add	r2, r0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	d101      	bne.n	8004e80 <memchr+0x12>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e003      	b.n	8004e88 <memchr+0x1a>
 8004e80:	7804      	ldrb	r4, [r0, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	428c      	cmp	r4, r1
 8004e86:	d1f6      	bne.n	8004e76 <memchr+0x8>
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <quorem>:
 8004e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8e:	6903      	ldr	r3, [r0, #16]
 8004e90:	690c      	ldr	r4, [r1, #16]
 8004e92:	4607      	mov	r7, r0
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	db7e      	blt.n	8004f96 <quorem+0x10c>
 8004e98:	3c01      	subs	r4, #1
 8004e9a:	00a3      	lsls	r3, r4, #2
 8004e9c:	f100 0514 	add.w	r5, r0, #20
 8004ea0:	f101 0814 	add.w	r8, r1, #20
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ec0:	d32e      	bcc.n	8004f20 <quorem+0x96>
 8004ec2:	f04f 0a00 	mov.w	sl, #0
 8004ec6:	46c4      	mov	ip, r8
 8004ec8:	46ae      	mov	lr, r5
 8004eca:	46d3      	mov	fp, sl
 8004ecc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ed0:	b298      	uxth	r0, r3
 8004ed2:	fb06 a000 	mla	r0, r6, r0, sl
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	0c02      	lsrs	r2, r0, #16
 8004eda:	fb06 2303 	mla	r3, r6, r3, r2
 8004ede:	f8de 2000 	ldr.w	r2, [lr]
 8004ee2:	b280      	uxth	r0, r0
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	1a12      	subs	r2, r2, r0
 8004ee8:	445a      	add	r2, fp
 8004eea:	f8de 0000 	ldr.w	r0, [lr]
 8004eee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ef8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004efc:	b292      	uxth	r2, r2
 8004efe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f02:	45e1      	cmp	r9, ip
 8004f04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f08:	f84e 2b04 	str.w	r2, [lr], #4
 8004f0c:	d2de      	bcs.n	8004ecc <quorem+0x42>
 8004f0e:	9b00      	ldr	r3, [sp, #0]
 8004f10:	58eb      	ldr	r3, [r5, r3]
 8004f12:	b92b      	cbnz	r3, 8004f20 <quorem+0x96>
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	3b04      	subs	r3, #4
 8004f18:	429d      	cmp	r5, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	d32f      	bcc.n	8004f7e <quorem+0xf4>
 8004f1e:	613c      	str	r4, [r7, #16]
 8004f20:	4638      	mov	r0, r7
 8004f22:	f001 f97b 	bl	800621c <__mcmp>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	db25      	blt.n	8004f76 <quorem+0xec>
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f32:	f8d1 c000 	ldr.w	ip, [r1]
 8004f36:	fa1f fe82 	uxth.w	lr, r2
 8004f3a:	fa1f f38c 	uxth.w	r3, ip
 8004f3e:	eba3 030e 	sub.w	r3, r3, lr
 8004f42:	4403      	add	r3, r0
 8004f44:	0c12      	lsrs	r2, r2, #16
 8004f46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f54:	45c1      	cmp	r9, r8
 8004f56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f5a:	f841 3b04 	str.w	r3, [r1], #4
 8004f5e:	d2e6      	bcs.n	8004f2e <quorem+0xa4>
 8004f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f68:	b922      	cbnz	r2, 8004f74 <quorem+0xea>
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	429d      	cmp	r5, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	d30b      	bcc.n	8004f8a <quorem+0x100>
 8004f72:	613c      	str	r4, [r7, #16]
 8004f74:	3601      	adds	r6, #1
 8004f76:	4630      	mov	r0, r6
 8004f78:	b003      	add	sp, #12
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d1cb      	bne.n	8004f1e <quorem+0x94>
 8004f86:	3c01      	subs	r4, #1
 8004f88:	e7c6      	b.n	8004f18 <quorem+0x8e>
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d1ef      	bne.n	8004f72 <quorem+0xe8>
 8004f92:	3c01      	subs	r4, #1
 8004f94:	e7ea      	b.n	8004f6c <quorem+0xe2>
 8004f96:	2000      	movs	r0, #0
 8004f98:	e7ee      	b.n	8004f78 <quorem+0xee>
 8004f9a:	0000      	movs	r0, r0
 8004f9c:	0000      	movs	r0, r0
	...

08004fa0 <_dtoa_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	69c7      	ldr	r7, [r0, #28]
 8004faa:	b097      	sub	sp, #92	@ 0x5c
 8004fac:	4683      	mov	fp, r0
 8004fae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004fb2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004fb4:	b97f      	cbnz	r7, 8004fd6 <_dtoa_r+0x36>
 8004fb6:	2010      	movs	r0, #16
 8004fb8:	f000 fe02 	bl	8005bc0 <malloc>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f8cb 001c 	str.w	r0, [fp, #28]
 8004fc2:	b920      	cbnz	r0, 8004fce <_dtoa_r+0x2e>
 8004fc4:	21ef      	movs	r1, #239	@ 0xef
 8004fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8005268 <_dtoa_r+0x2c8>)
 8004fc8:	48a8      	ldr	r0, [pc, #672]	@ (800526c <_dtoa_r+0x2cc>)
 8004fca:	f001 fb79 	bl	80066c0 <__assert_func>
 8004fce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004fd2:	6007      	str	r7, [r0, #0]
 8004fd4:	60c7      	str	r7, [r0, #12]
 8004fd6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	b159      	cbz	r1, 8004ff6 <_dtoa_r+0x56>
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4093      	lsls	r3, r2
 8004fe4:	604a      	str	r2, [r1, #4]
 8004fe6:	608b      	str	r3, [r1, #8]
 8004fe8:	4658      	mov	r0, fp
 8004fea:	f000 fedf 	bl	8005dac <_Bfree>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	1e2b      	subs	r3, r5, #0
 8004ff8:	bfaf      	iteee	ge
 8004ffa:	2300      	movge	r3, #0
 8004ffc:	2201      	movlt	r2, #1
 8004ffe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005002:	9303      	strlt	r3, [sp, #12]
 8005004:	bfa8      	it	ge
 8005006:	6033      	strge	r3, [r6, #0]
 8005008:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800500c:	4b98      	ldr	r3, [pc, #608]	@ (8005270 <_dtoa_r+0x2d0>)
 800500e:	bfb8      	it	lt
 8005010:	6032      	strlt	r2, [r6, #0]
 8005012:	ea33 0308 	bics.w	r3, r3, r8
 8005016:	d112      	bne.n	800503e <_dtoa_r+0x9e>
 8005018:	f242 730f 	movw	r3, #9999	@ 0x270f
 800501c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005024:	4323      	orrs	r3, r4
 8005026:	f000 8550 	beq.w	8005aca <_dtoa_r+0xb2a>
 800502a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800502c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005274 <_dtoa_r+0x2d4>
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8552 	beq.w	8005ada <_dtoa_r+0xb3a>
 8005036:	f10a 0303 	add.w	r3, sl, #3
 800503a:	f000 bd4c 	b.w	8005ad6 <_dtoa_r+0xb36>
 800503e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005042:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800504a:	2200      	movs	r2, #0
 800504c:	2300      	movs	r3, #0
 800504e:	f7fb fcab 	bl	80009a8 <__aeabi_dcmpeq>
 8005052:	4607      	mov	r7, r0
 8005054:	b158      	cbz	r0, 800506e <_dtoa_r+0xce>
 8005056:	2301      	movs	r3, #1
 8005058:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800505e:	b113      	cbz	r3, 8005066 <_dtoa_r+0xc6>
 8005060:	4b85      	ldr	r3, [pc, #532]	@ (8005278 <_dtoa_r+0x2d8>)
 8005062:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800527c <_dtoa_r+0x2dc>
 800506a:	f000 bd36 	b.w	8005ada <_dtoa_r+0xb3a>
 800506e:	ab14      	add	r3, sp, #80	@ 0x50
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	ab15      	add	r3, sp, #84	@ 0x54
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	4658      	mov	r0, fp
 8005078:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800507c:	f001 f97e 	bl	800637c <__d2b>
 8005080:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005084:	4681      	mov	r9, r0
 8005086:	2e00      	cmp	r6, #0
 8005088:	d077      	beq.n	800517a <_dtoa_r+0x1da>
 800508a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800508e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005090:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005098:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800509c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80050a2:	4619      	mov	r1, r3
 80050a4:	2200      	movs	r2, #0
 80050a6:	4b76      	ldr	r3, [pc, #472]	@ (8005280 <_dtoa_r+0x2e0>)
 80050a8:	f7fb f85e 	bl	8000168 <__aeabi_dsub>
 80050ac:	a368      	add	r3, pc, #416	@ (adr r3, 8005250 <_dtoa_r+0x2b0>)
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f7fb fa11 	bl	80004d8 <__aeabi_dmul>
 80050b6:	a368      	add	r3, pc, #416	@ (adr r3, 8005258 <_dtoa_r+0x2b8>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb f856 	bl	800016c <__adddf3>
 80050c0:	4604      	mov	r4, r0
 80050c2:	4630      	mov	r0, r6
 80050c4:	460d      	mov	r5, r1
 80050c6:	f7fb f99d 	bl	8000404 <__aeabi_i2d>
 80050ca:	a365      	add	r3, pc, #404	@ (adr r3, 8005260 <_dtoa_r+0x2c0>)
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f7fb fa02 	bl	80004d8 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb f846 	bl	800016c <__adddf3>
 80050e0:	4604      	mov	r4, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	f7fb fca8 	bl	8000a38 <__aeabi_d2iz>
 80050e8:	2200      	movs	r2, #0
 80050ea:	4607      	mov	r7, r0
 80050ec:	2300      	movs	r3, #0
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb fc63 	bl	80009bc <__aeabi_dcmplt>
 80050f6:	b140      	cbz	r0, 800510a <_dtoa_r+0x16a>
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7fb f983 	bl	8000404 <__aeabi_i2d>
 80050fe:	4622      	mov	r2, r4
 8005100:	462b      	mov	r3, r5
 8005102:	f7fb fc51 	bl	80009a8 <__aeabi_dcmpeq>
 8005106:	b900      	cbnz	r0, 800510a <_dtoa_r+0x16a>
 8005108:	3f01      	subs	r7, #1
 800510a:	2f16      	cmp	r7, #22
 800510c:	d853      	bhi.n	80051b6 <_dtoa_r+0x216>
 800510e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005112:	4b5c      	ldr	r3, [pc, #368]	@ (8005284 <_dtoa_r+0x2e4>)
 8005114:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fc4e 	bl	80009bc <__aeabi_dcmplt>
 8005120:	2800      	cmp	r0, #0
 8005122:	d04a      	beq.n	80051ba <_dtoa_r+0x21a>
 8005124:	2300      	movs	r3, #0
 8005126:	3f01      	subs	r7, #1
 8005128:	930f      	str	r3, [sp, #60]	@ 0x3c
 800512a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800512c:	1b9b      	subs	r3, r3, r6
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	bf46      	itte	mi
 8005132:	f1c3 0801 	rsbmi	r8, r3, #1
 8005136:	2300      	movmi	r3, #0
 8005138:	f04f 0800 	movpl.w	r8, #0
 800513c:	9209      	str	r2, [sp, #36]	@ 0x24
 800513e:	bf48      	it	mi
 8005140:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005142:	2f00      	cmp	r7, #0
 8005144:	db3b      	blt.n	80051be <_dtoa_r+0x21e>
 8005146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005148:	970e      	str	r7, [sp, #56]	@ 0x38
 800514a:	443b      	add	r3, r7
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2300      	movs	r3, #0
 8005150:	930a      	str	r3, [sp, #40]	@ 0x28
 8005152:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005154:	2b09      	cmp	r3, #9
 8005156:	d866      	bhi.n	8005226 <_dtoa_r+0x286>
 8005158:	2b05      	cmp	r3, #5
 800515a:	bfc4      	itt	gt
 800515c:	3b04      	subgt	r3, #4
 800515e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005160:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005162:	bfc8      	it	gt
 8005164:	2400      	movgt	r4, #0
 8005166:	f1a3 0302 	sub.w	r3, r3, #2
 800516a:	bfd8      	it	le
 800516c:	2401      	movle	r4, #1
 800516e:	2b03      	cmp	r3, #3
 8005170:	d864      	bhi.n	800523c <_dtoa_r+0x29c>
 8005172:	e8df f003 	tbb	[pc, r3]
 8005176:	382b      	.short	0x382b
 8005178:	5636      	.short	0x5636
 800517a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800517e:	441e      	add	r6, r3
 8005180:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005184:	2b20      	cmp	r3, #32
 8005186:	bfc1      	itttt	gt
 8005188:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800518c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005190:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005194:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005198:	bfd6      	itet	le
 800519a:	f1c3 0320 	rsble	r3, r3, #32
 800519e:	ea48 0003 	orrgt.w	r0, r8, r3
 80051a2:	fa04 f003 	lslle.w	r0, r4, r3
 80051a6:	f7fb f91d 	bl	80003e4 <__aeabi_ui2d>
 80051aa:	2201      	movs	r2, #1
 80051ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051b0:	3e01      	subs	r6, #1
 80051b2:	9212      	str	r2, [sp, #72]	@ 0x48
 80051b4:	e775      	b.n	80050a2 <_dtoa_r+0x102>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7b6      	b.n	8005128 <_dtoa_r+0x188>
 80051ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051bc:	e7b5      	b.n	800512a <_dtoa_r+0x18a>
 80051be:	427b      	negs	r3, r7
 80051c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c2:	2300      	movs	r3, #0
 80051c4:	eba8 0807 	sub.w	r8, r8, r7
 80051c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80051ca:	e7c2      	b.n	8005152 <_dtoa_r+0x1b2>
 80051cc:	2300      	movs	r3, #0
 80051ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dc35      	bgt.n	8005242 <_dtoa_r+0x2a2>
 80051d6:	2301      	movs	r3, #1
 80051d8:	461a      	mov	r2, r3
 80051da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051de:	9221      	str	r2, [sp, #132]	@ 0x84
 80051e0:	e00b      	b.n	80051fa <_dtoa_r+0x25a>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e7f3      	b.n	80051ce <_dtoa_r+0x22e>
 80051e6:	2300      	movs	r3, #0
 80051e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	9308      	str	r3, [sp, #32]
 80051f0:	3301      	adds	r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	9307      	str	r3, [sp, #28]
 80051f6:	bfb8      	it	lt
 80051f8:	2301      	movlt	r3, #1
 80051fa:	2100      	movs	r1, #0
 80051fc:	2204      	movs	r2, #4
 80051fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005202:	f102 0514 	add.w	r5, r2, #20
 8005206:	429d      	cmp	r5, r3
 8005208:	d91f      	bls.n	800524a <_dtoa_r+0x2aa>
 800520a:	6041      	str	r1, [r0, #4]
 800520c:	4658      	mov	r0, fp
 800520e:	f000 fd8d 	bl	8005d2c <_Balloc>
 8005212:	4682      	mov	sl, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d139      	bne.n	800528c <_dtoa_r+0x2ec>
 8005218:	4602      	mov	r2, r0
 800521a:	f240 11af 	movw	r1, #431	@ 0x1af
 800521e:	4b1a      	ldr	r3, [pc, #104]	@ (8005288 <_dtoa_r+0x2e8>)
 8005220:	e6d2      	b.n	8004fc8 <_dtoa_r+0x28>
 8005222:	2301      	movs	r3, #1
 8005224:	e7e0      	b.n	80051e8 <_dtoa_r+0x248>
 8005226:	2401      	movs	r4, #1
 8005228:	2300      	movs	r3, #0
 800522a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800522c:	9320      	str	r3, [sp, #128]	@ 0x80
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
 8005232:	2200      	movs	r2, #0
 8005234:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005238:	2312      	movs	r3, #18
 800523a:	e7d0      	b.n	80051de <_dtoa_r+0x23e>
 800523c:	2301      	movs	r3, #1
 800523e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005240:	e7f5      	b.n	800522e <_dtoa_r+0x28e>
 8005242:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005244:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005248:	e7d7      	b.n	80051fa <_dtoa_r+0x25a>
 800524a:	3101      	adds	r1, #1
 800524c:	0052      	lsls	r2, r2, #1
 800524e:	e7d8      	b.n	8005202 <_dtoa_r+0x262>
 8005250:	636f4361 	.word	0x636f4361
 8005254:	3fd287a7 	.word	0x3fd287a7
 8005258:	8b60c8b3 	.word	0x8b60c8b3
 800525c:	3fc68a28 	.word	0x3fc68a28
 8005260:	509f79fb 	.word	0x509f79fb
 8005264:	3fd34413 	.word	0x3fd34413
 8005268:	08006b47 	.word	0x08006b47
 800526c:	08006b5e 	.word	0x08006b5e
 8005270:	7ff00000 	.word	0x7ff00000
 8005274:	08006b43 	.word	0x08006b43
 8005278:	08006b17 	.word	0x08006b17
 800527c:	08006b16 	.word	0x08006b16
 8005280:	3ff80000 	.word	0x3ff80000
 8005284:	08006c58 	.word	0x08006c58
 8005288:	08006bb6 	.word	0x08006bb6
 800528c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005290:	6018      	str	r0, [r3, #0]
 8005292:	9b07      	ldr	r3, [sp, #28]
 8005294:	2b0e      	cmp	r3, #14
 8005296:	f200 80a4 	bhi.w	80053e2 <_dtoa_r+0x442>
 800529a:	2c00      	cmp	r4, #0
 800529c:	f000 80a1 	beq.w	80053e2 <_dtoa_r+0x442>
 80052a0:	2f00      	cmp	r7, #0
 80052a2:	dd33      	ble.n	800530c <_dtoa_r+0x36c>
 80052a4:	4b86      	ldr	r3, [pc, #536]	@ (80054c0 <_dtoa_r+0x520>)
 80052a6:	f007 020f 	and.w	r2, r7, #15
 80052aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ae:	05f8      	lsls	r0, r7, #23
 80052b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052bc:	d516      	bpl.n	80052ec <_dtoa_r+0x34c>
 80052be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052c2:	4b80      	ldr	r3, [pc, #512]	@ (80054c4 <_dtoa_r+0x524>)
 80052c4:	2603      	movs	r6, #3
 80052c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052ca:	f7fb fa2f 	bl	800072c <__aeabi_ddiv>
 80052ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d2:	f004 040f 	and.w	r4, r4, #15
 80052d6:	4d7b      	ldr	r5, [pc, #492]	@ (80054c4 <_dtoa_r+0x524>)
 80052d8:	b954      	cbnz	r4, 80052f0 <_dtoa_r+0x350>
 80052da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e2:	f7fb fa23 	bl	800072c <__aeabi_ddiv>
 80052e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ea:	e028      	b.n	800533e <_dtoa_r+0x39e>
 80052ec:	2602      	movs	r6, #2
 80052ee:	e7f2      	b.n	80052d6 <_dtoa_r+0x336>
 80052f0:	07e1      	lsls	r1, r4, #31
 80052f2:	d508      	bpl.n	8005306 <_dtoa_r+0x366>
 80052f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052fc:	f7fb f8ec 	bl	80004d8 <__aeabi_dmul>
 8005300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005304:	3601      	adds	r6, #1
 8005306:	1064      	asrs	r4, r4, #1
 8005308:	3508      	adds	r5, #8
 800530a:	e7e5      	b.n	80052d8 <_dtoa_r+0x338>
 800530c:	f000 80d2 	beq.w	80054b4 <_dtoa_r+0x514>
 8005310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005314:	427c      	negs	r4, r7
 8005316:	4b6a      	ldr	r3, [pc, #424]	@ (80054c0 <_dtoa_r+0x520>)
 8005318:	f004 020f 	and.w	r2, r4, #15
 800531c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb f8d8 	bl	80004d8 <__aeabi_dmul>
 8005328:	2602      	movs	r6, #2
 800532a:	2300      	movs	r3, #0
 800532c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005330:	4d64      	ldr	r5, [pc, #400]	@ (80054c4 <_dtoa_r+0x524>)
 8005332:	1124      	asrs	r4, r4, #4
 8005334:	2c00      	cmp	r4, #0
 8005336:	f040 80b2 	bne.w	800549e <_dtoa_r+0x4fe>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1d3      	bne.n	80052e6 <_dtoa_r+0x346>
 800533e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80b7 	beq.w	80054b8 <_dtoa_r+0x518>
 800534a:	2200      	movs	r2, #0
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	4b5d      	ldr	r3, [pc, #372]	@ (80054c8 <_dtoa_r+0x528>)
 8005352:	f7fb fb33 	bl	80009bc <__aeabi_dcmplt>
 8005356:	2800      	cmp	r0, #0
 8005358:	f000 80ae 	beq.w	80054b8 <_dtoa_r+0x518>
 800535c:	9b07      	ldr	r3, [sp, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80aa 	beq.w	80054b8 <_dtoa_r+0x518>
 8005364:	9b08      	ldr	r3, [sp, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	dd37      	ble.n	80053da <_dtoa_r+0x43a>
 800536a:	1e7b      	subs	r3, r7, #1
 800536c:	4620      	mov	r0, r4
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	2200      	movs	r2, #0
 8005372:	4629      	mov	r1, r5
 8005374:	4b55      	ldr	r3, [pc, #340]	@ (80054cc <_dtoa_r+0x52c>)
 8005376:	f7fb f8af 	bl	80004d8 <__aeabi_dmul>
 800537a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800537e:	9c08      	ldr	r4, [sp, #32]
 8005380:	3601      	adds	r6, #1
 8005382:	4630      	mov	r0, r6
 8005384:	f7fb f83e 	bl	8000404 <__aeabi_i2d>
 8005388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800538c:	f7fb f8a4 	bl	80004d8 <__aeabi_dmul>
 8005390:	2200      	movs	r2, #0
 8005392:	4b4f      	ldr	r3, [pc, #316]	@ (80054d0 <_dtoa_r+0x530>)
 8005394:	f7fa feea 	bl	800016c <__adddf3>
 8005398:	4605      	mov	r5, r0
 800539a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800539e:	2c00      	cmp	r4, #0
 80053a0:	f040 809a 	bne.w	80054d8 <_dtoa_r+0x538>
 80053a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	4b4a      	ldr	r3, [pc, #296]	@ (80054d4 <_dtoa_r+0x534>)
 80053ac:	f7fa fedc 	bl	8000168 <__aeabi_dsub>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053b8:	462a      	mov	r2, r5
 80053ba:	4633      	mov	r3, r6
 80053bc:	f7fb fb1c 	bl	80009f8 <__aeabi_dcmpgt>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f040 828e 	bne.w	80058e2 <_dtoa_r+0x942>
 80053c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ca:	462a      	mov	r2, r5
 80053cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053d0:	f7fb faf4 	bl	80009bc <__aeabi_dcmplt>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f040 8127 	bne.w	8005628 <_dtoa_r+0x688>
 80053da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80053de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f2c0 8163 	blt.w	80056b0 <_dtoa_r+0x710>
 80053ea:	2f0e      	cmp	r7, #14
 80053ec:	f300 8160 	bgt.w	80056b0 <_dtoa_r+0x710>
 80053f0:	4b33      	ldr	r3, [pc, #204]	@ (80054c0 <_dtoa_r+0x520>)
 80053f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005400:	2b00      	cmp	r3, #0
 8005402:	da03      	bge.n	800540c <_dtoa_r+0x46c>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f340 8100 	ble.w	800560c <_dtoa_r+0x66c>
 800540c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005410:	4656      	mov	r6, sl
 8005412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005416:	4620      	mov	r0, r4
 8005418:	4629      	mov	r1, r5
 800541a:	f7fb f987 	bl	800072c <__aeabi_ddiv>
 800541e:	f7fb fb0b 	bl	8000a38 <__aeabi_d2iz>
 8005422:	4680      	mov	r8, r0
 8005424:	f7fa ffee 	bl	8000404 <__aeabi_i2d>
 8005428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542c:	f7fb f854 	bl	80004d8 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005440:	9d07      	ldr	r5, [sp, #28]
 8005442:	f806 4b01 	strb.w	r4, [r6], #1
 8005446:	eba6 040a 	sub.w	r4, r6, sl
 800544a:	42a5      	cmp	r5, r4
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	f040 8116 	bne.w	8005680 <_dtoa_r+0x6e0>
 8005454:	f7fa fe8a 	bl	800016c <__adddf3>
 8005458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	f7fb faca 	bl	80009f8 <__aeabi_dcmpgt>
 8005464:	2800      	cmp	r0, #0
 8005466:	f040 80f8 	bne.w	800565a <_dtoa_r+0x6ba>
 800546a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f7fb fa99 	bl	80009a8 <__aeabi_dcmpeq>
 8005476:	b118      	cbz	r0, 8005480 <_dtoa_r+0x4e0>
 8005478:	f018 0f01 	tst.w	r8, #1
 800547c:	f040 80ed 	bne.w	800565a <_dtoa_r+0x6ba>
 8005480:	4649      	mov	r1, r9
 8005482:	4658      	mov	r0, fp
 8005484:	f000 fc92 	bl	8005dac <_Bfree>
 8005488:	2300      	movs	r3, #0
 800548a:	7033      	strb	r3, [r6, #0]
 800548c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800548e:	3701      	adds	r7, #1
 8005490:	601f      	str	r7, [r3, #0]
 8005492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8320 	beq.w	8005ada <_dtoa_r+0xb3a>
 800549a:	601e      	str	r6, [r3, #0]
 800549c:	e31d      	b.n	8005ada <_dtoa_r+0xb3a>
 800549e:	07e2      	lsls	r2, r4, #31
 80054a0:	d505      	bpl.n	80054ae <_dtoa_r+0x50e>
 80054a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054a6:	f7fb f817 	bl	80004d8 <__aeabi_dmul>
 80054aa:	2301      	movs	r3, #1
 80054ac:	3601      	adds	r6, #1
 80054ae:	1064      	asrs	r4, r4, #1
 80054b0:	3508      	adds	r5, #8
 80054b2:	e73f      	b.n	8005334 <_dtoa_r+0x394>
 80054b4:	2602      	movs	r6, #2
 80054b6:	e742      	b.n	800533e <_dtoa_r+0x39e>
 80054b8:	9c07      	ldr	r4, [sp, #28]
 80054ba:	9704      	str	r7, [sp, #16]
 80054bc:	e761      	b.n	8005382 <_dtoa_r+0x3e2>
 80054be:	bf00      	nop
 80054c0:	08006c58 	.word	0x08006c58
 80054c4:	08006c30 	.word	0x08006c30
 80054c8:	3ff00000 	.word	0x3ff00000
 80054cc:	40240000 	.word	0x40240000
 80054d0:	401c0000 	.word	0x401c0000
 80054d4:	40140000 	.word	0x40140000
 80054d8:	4b70      	ldr	r3, [pc, #448]	@ (800569c <_dtoa_r+0x6fc>)
 80054da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054e4:	4454      	add	r4, sl
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d045      	beq.n	8005576 <_dtoa_r+0x5d6>
 80054ea:	2000      	movs	r0, #0
 80054ec:	496c      	ldr	r1, [pc, #432]	@ (80056a0 <_dtoa_r+0x700>)
 80054ee:	f7fb f91d 	bl	800072c <__aeabi_ddiv>
 80054f2:	4633      	mov	r3, r6
 80054f4:	462a      	mov	r2, r5
 80054f6:	f7fa fe37 	bl	8000168 <__aeabi_dsub>
 80054fa:	4656      	mov	r6, sl
 80054fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005504:	f7fb fa98 	bl	8000a38 <__aeabi_d2iz>
 8005508:	4605      	mov	r5, r0
 800550a:	f7fa ff7b 	bl	8000404 <__aeabi_i2d>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005516:	f7fa fe27 	bl	8000168 <__aeabi_dsub>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	3530      	adds	r5, #48	@ 0x30
 8005520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005524:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005528:	f806 5b01 	strb.w	r5, [r6], #1
 800552c:	f7fb fa46 	bl	80009bc <__aeabi_dcmplt>
 8005530:	2800      	cmp	r0, #0
 8005532:	d163      	bne.n	80055fc <_dtoa_r+0x65c>
 8005534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005538:	2000      	movs	r0, #0
 800553a:	495a      	ldr	r1, [pc, #360]	@ (80056a4 <_dtoa_r+0x704>)
 800553c:	f7fa fe14 	bl	8000168 <__aeabi_dsub>
 8005540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005544:	f7fb fa3a 	bl	80009bc <__aeabi_dcmplt>
 8005548:	2800      	cmp	r0, #0
 800554a:	f040 8087 	bne.w	800565c <_dtoa_r+0x6bc>
 800554e:	42a6      	cmp	r6, r4
 8005550:	f43f af43 	beq.w	80053da <_dtoa_r+0x43a>
 8005554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005558:	2200      	movs	r2, #0
 800555a:	4b53      	ldr	r3, [pc, #332]	@ (80056a8 <_dtoa_r+0x708>)
 800555c:	f7fa ffbc 	bl	80004d8 <__aeabi_dmul>
 8005560:	2200      	movs	r2, #0
 8005562:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800556a:	4b4f      	ldr	r3, [pc, #316]	@ (80056a8 <_dtoa_r+0x708>)
 800556c:	f7fa ffb4 	bl	80004d8 <__aeabi_dmul>
 8005570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005574:	e7c4      	b.n	8005500 <_dtoa_r+0x560>
 8005576:	4631      	mov	r1, r6
 8005578:	4628      	mov	r0, r5
 800557a:	f7fa ffad 	bl	80004d8 <__aeabi_dmul>
 800557e:	4656      	mov	r6, sl
 8005580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005584:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800558a:	f7fb fa55 	bl	8000a38 <__aeabi_d2iz>
 800558e:	4605      	mov	r5, r0
 8005590:	f7fa ff38 	bl	8000404 <__aeabi_i2d>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800559c:	f7fa fde4 	bl	8000168 <__aeabi_dsub>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	3530      	adds	r5, #48	@ 0x30
 80055a6:	f806 5b01 	strb.w	r5, [r6], #1
 80055aa:	42a6      	cmp	r6, r4
 80055ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	d124      	bne.n	8005600 <_dtoa_r+0x660>
 80055b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055ba:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <_dtoa_r+0x700>)
 80055bc:	f7fa fdd6 	bl	800016c <__adddf3>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c8:	f7fb fa16 	bl	80009f8 <__aeabi_dcmpgt>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d145      	bne.n	800565c <_dtoa_r+0x6bc>
 80055d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055d4:	2000      	movs	r0, #0
 80055d6:	4932      	ldr	r1, [pc, #200]	@ (80056a0 <_dtoa_r+0x700>)
 80055d8:	f7fa fdc6 	bl	8000168 <__aeabi_dsub>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055e4:	f7fb f9ea 	bl	80009bc <__aeabi_dcmplt>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f43f aef6 	beq.w	80053da <_dtoa_r+0x43a>
 80055ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80055f0:	1e73      	subs	r3, r6, #1
 80055f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055f8:	2b30      	cmp	r3, #48	@ 0x30
 80055fa:	d0f8      	beq.n	80055ee <_dtoa_r+0x64e>
 80055fc:	9f04      	ldr	r7, [sp, #16]
 80055fe:	e73f      	b.n	8005480 <_dtoa_r+0x4e0>
 8005600:	4b29      	ldr	r3, [pc, #164]	@ (80056a8 <_dtoa_r+0x708>)
 8005602:	f7fa ff69 	bl	80004d8 <__aeabi_dmul>
 8005606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800560a:	e7bc      	b.n	8005586 <_dtoa_r+0x5e6>
 800560c:	d10c      	bne.n	8005628 <_dtoa_r+0x688>
 800560e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005612:	2200      	movs	r2, #0
 8005614:	4b25      	ldr	r3, [pc, #148]	@ (80056ac <_dtoa_r+0x70c>)
 8005616:	f7fa ff5f 	bl	80004d8 <__aeabi_dmul>
 800561a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561e:	f7fb f9e1 	bl	80009e4 <__aeabi_dcmpge>
 8005622:	2800      	cmp	r0, #0
 8005624:	f000 815b 	beq.w	80058de <_dtoa_r+0x93e>
 8005628:	2400      	movs	r4, #0
 800562a:	4625      	mov	r5, r4
 800562c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800562e:	4656      	mov	r6, sl
 8005630:	43db      	mvns	r3, r3
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	2700      	movs	r7, #0
 8005636:	4621      	mov	r1, r4
 8005638:	4658      	mov	r0, fp
 800563a:	f000 fbb7 	bl	8005dac <_Bfree>
 800563e:	2d00      	cmp	r5, #0
 8005640:	d0dc      	beq.n	80055fc <_dtoa_r+0x65c>
 8005642:	b12f      	cbz	r7, 8005650 <_dtoa_r+0x6b0>
 8005644:	42af      	cmp	r7, r5
 8005646:	d003      	beq.n	8005650 <_dtoa_r+0x6b0>
 8005648:	4639      	mov	r1, r7
 800564a:	4658      	mov	r0, fp
 800564c:	f000 fbae 	bl	8005dac <_Bfree>
 8005650:	4629      	mov	r1, r5
 8005652:	4658      	mov	r0, fp
 8005654:	f000 fbaa 	bl	8005dac <_Bfree>
 8005658:	e7d0      	b.n	80055fc <_dtoa_r+0x65c>
 800565a:	9704      	str	r7, [sp, #16]
 800565c:	4633      	mov	r3, r6
 800565e:	461e      	mov	r6, r3
 8005660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005664:	2a39      	cmp	r2, #57	@ 0x39
 8005666:	d107      	bne.n	8005678 <_dtoa_r+0x6d8>
 8005668:	459a      	cmp	sl, r3
 800566a:	d1f8      	bne.n	800565e <_dtoa_r+0x6be>
 800566c:	9a04      	ldr	r2, [sp, #16]
 800566e:	3201      	adds	r2, #1
 8005670:	9204      	str	r2, [sp, #16]
 8005672:	2230      	movs	r2, #48	@ 0x30
 8005674:	f88a 2000 	strb.w	r2, [sl]
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	3201      	adds	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e7bd      	b.n	80055fc <_dtoa_r+0x65c>
 8005680:	2200      	movs	r2, #0
 8005682:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <_dtoa_r+0x708>)
 8005684:	f7fa ff28 	bl	80004d8 <__aeabi_dmul>
 8005688:	2200      	movs	r2, #0
 800568a:	2300      	movs	r3, #0
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	f7fb f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8005694:	2800      	cmp	r0, #0
 8005696:	f43f aebc 	beq.w	8005412 <_dtoa_r+0x472>
 800569a:	e6f1      	b.n	8005480 <_dtoa_r+0x4e0>
 800569c:	08006c58 	.word	0x08006c58
 80056a0:	3fe00000 	.word	0x3fe00000
 80056a4:	3ff00000 	.word	0x3ff00000
 80056a8:	40240000 	.word	0x40240000
 80056ac:	40140000 	.word	0x40140000
 80056b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	f000 80db 	beq.w	800586e <_dtoa_r+0x8ce>
 80056b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056ba:	2a01      	cmp	r2, #1
 80056bc:	f300 80bf 	bgt.w	800583e <_dtoa_r+0x89e>
 80056c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	f000 80b7 	beq.w	8005836 <_dtoa_r+0x896>
 80056c8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056cc:	4646      	mov	r6, r8
 80056ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056d2:	2101      	movs	r1, #1
 80056d4:	441a      	add	r2, r3
 80056d6:	4658      	mov	r0, fp
 80056d8:	4498      	add	r8, r3
 80056da:	9209      	str	r2, [sp, #36]	@ 0x24
 80056dc:	f000 fc1a 	bl	8005f14 <__i2b>
 80056e0:	4605      	mov	r5, r0
 80056e2:	b15e      	cbz	r6, 80056fc <_dtoa_r+0x75c>
 80056e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dd08      	ble.n	80056fc <_dtoa_r+0x75c>
 80056ea:	42b3      	cmp	r3, r6
 80056ec:	bfa8      	it	ge
 80056ee:	4633      	movge	r3, r6
 80056f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056f2:	eba8 0803 	sub.w	r8, r8, r3
 80056f6:	1af6      	subs	r6, r6, r3
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056fe:	b1f3      	cbz	r3, 800573e <_dtoa_r+0x79e>
 8005700:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80b7 	beq.w	8005876 <_dtoa_r+0x8d6>
 8005708:	b18c      	cbz	r4, 800572e <_dtoa_r+0x78e>
 800570a:	4629      	mov	r1, r5
 800570c:	4622      	mov	r2, r4
 800570e:	4658      	mov	r0, fp
 8005710:	f000 fcbe 	bl	8006090 <__pow5mult>
 8005714:	464a      	mov	r2, r9
 8005716:	4601      	mov	r1, r0
 8005718:	4605      	mov	r5, r0
 800571a:	4658      	mov	r0, fp
 800571c:	f000 fc10 	bl	8005f40 <__multiply>
 8005720:	4649      	mov	r1, r9
 8005722:	9004      	str	r0, [sp, #16]
 8005724:	4658      	mov	r0, fp
 8005726:	f000 fb41 	bl	8005dac <_Bfree>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	4699      	mov	r9, r3
 800572e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005730:	1b1a      	subs	r2, r3, r4
 8005732:	d004      	beq.n	800573e <_dtoa_r+0x79e>
 8005734:	4649      	mov	r1, r9
 8005736:	4658      	mov	r0, fp
 8005738:	f000 fcaa 	bl	8006090 <__pow5mult>
 800573c:	4681      	mov	r9, r0
 800573e:	2101      	movs	r1, #1
 8005740:	4658      	mov	r0, fp
 8005742:	f000 fbe7 	bl	8005f14 <__i2b>
 8005746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005748:	4604      	mov	r4, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 81c9 	beq.w	8005ae2 <_dtoa_r+0xb42>
 8005750:	461a      	mov	r2, r3
 8005752:	4601      	mov	r1, r0
 8005754:	4658      	mov	r0, fp
 8005756:	f000 fc9b 	bl	8006090 <__pow5mult>
 800575a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800575c:	4604      	mov	r4, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	f300 808f 	bgt.w	8005882 <_dtoa_r+0x8e2>
 8005764:	9b02      	ldr	r3, [sp, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 8087 	bne.w	800587a <_dtoa_r+0x8da>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 8083 	bne.w	800587e <_dtoa_r+0x8de>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800577e:	0d1b      	lsrs	r3, r3, #20
 8005780:	051b      	lsls	r3, r3, #20
 8005782:	b12b      	cbz	r3, 8005790 <_dtoa_r+0x7f0>
 8005784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005786:	f108 0801 	add.w	r8, r8, #1
 800578a:	3301      	adds	r3, #1
 800578c:	9309      	str	r3, [sp, #36]	@ 0x24
 800578e:	2301      	movs	r3, #1
 8005790:	930a      	str	r3, [sp, #40]	@ 0x28
 8005792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 81aa 	beq.w	8005aee <_dtoa_r+0xb4e>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057a0:	6918      	ldr	r0, [r3, #16]
 80057a2:	f000 fb6b 	bl	8005e7c <__hi0bits>
 80057a6:	f1c0 0020 	rsb	r0, r0, #32
 80057aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ac:	4418      	add	r0, r3
 80057ae:	f010 001f 	ands.w	r0, r0, #31
 80057b2:	d071      	beq.n	8005898 <_dtoa_r+0x8f8>
 80057b4:	f1c0 0320 	rsb	r3, r0, #32
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	dd65      	ble.n	8005888 <_dtoa_r+0x8e8>
 80057bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057be:	f1c0 001c 	rsb	r0, r0, #28
 80057c2:	4403      	add	r3, r0
 80057c4:	4480      	add	r8, r0
 80057c6:	4406      	add	r6, r0
 80057c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ca:	f1b8 0f00 	cmp.w	r8, #0
 80057ce:	dd05      	ble.n	80057dc <_dtoa_r+0x83c>
 80057d0:	4649      	mov	r1, r9
 80057d2:	4642      	mov	r2, r8
 80057d4:	4658      	mov	r0, fp
 80057d6:	f000 fcb5 	bl	8006144 <__lshift>
 80057da:	4681      	mov	r9, r0
 80057dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	dd05      	ble.n	80057ee <_dtoa_r+0x84e>
 80057e2:	4621      	mov	r1, r4
 80057e4:	461a      	mov	r2, r3
 80057e6:	4658      	mov	r0, fp
 80057e8:	f000 fcac 	bl	8006144 <__lshift>
 80057ec:	4604      	mov	r4, r0
 80057ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d053      	beq.n	800589c <_dtoa_r+0x8fc>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4648      	mov	r0, r9
 80057f8:	f000 fd10 	bl	800621c <__mcmp>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	da4d      	bge.n	800589c <_dtoa_r+0x8fc>
 8005800:	1e7b      	subs	r3, r7, #1
 8005802:	4649      	mov	r1, r9
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	220a      	movs	r2, #10
 8005808:	2300      	movs	r3, #0
 800580a:	4658      	mov	r0, fp
 800580c:	f000 faf0 	bl	8005df0 <__multadd>
 8005810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005812:	4681      	mov	r9, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 816c 	beq.w	8005af2 <_dtoa_r+0xb52>
 800581a:	2300      	movs	r3, #0
 800581c:	4629      	mov	r1, r5
 800581e:	220a      	movs	r2, #10
 8005820:	4658      	mov	r0, fp
 8005822:	f000 fae5 	bl	8005df0 <__multadd>
 8005826:	9b08      	ldr	r3, [sp, #32]
 8005828:	4605      	mov	r5, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	dc61      	bgt.n	80058f2 <_dtoa_r+0x952>
 800582e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005830:	2b02      	cmp	r3, #2
 8005832:	dc3b      	bgt.n	80058ac <_dtoa_r+0x90c>
 8005834:	e05d      	b.n	80058f2 <_dtoa_r+0x952>
 8005836:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005838:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800583c:	e746      	b.n	80056cc <_dtoa_r+0x72c>
 800583e:	9b07      	ldr	r3, [sp, #28]
 8005840:	1e5c      	subs	r4, r3, #1
 8005842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005844:	42a3      	cmp	r3, r4
 8005846:	bfbf      	itttt	lt
 8005848:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800584a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800584c:	1ae3      	sublt	r3, r4, r3
 800584e:	18d2      	addlt	r2, r2, r3
 8005850:	bfa8      	it	ge
 8005852:	1b1c      	subge	r4, r3, r4
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	bfbe      	ittt	lt
 8005858:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800585a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800585c:	2400      	movlt	r4, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	bfb5      	itete	lt
 8005862:	eba8 0603 	sublt.w	r6, r8, r3
 8005866:	4646      	movge	r6, r8
 8005868:	2300      	movlt	r3, #0
 800586a:	9b07      	ldrge	r3, [sp, #28]
 800586c:	e730      	b.n	80056d0 <_dtoa_r+0x730>
 800586e:	4646      	mov	r6, r8
 8005870:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005872:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005874:	e735      	b.n	80056e2 <_dtoa_r+0x742>
 8005876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005878:	e75c      	b.n	8005734 <_dtoa_r+0x794>
 800587a:	2300      	movs	r3, #0
 800587c:	e788      	b.n	8005790 <_dtoa_r+0x7f0>
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	e786      	b.n	8005790 <_dtoa_r+0x7f0>
 8005882:	2300      	movs	r3, #0
 8005884:	930a      	str	r3, [sp, #40]	@ 0x28
 8005886:	e788      	b.n	800579a <_dtoa_r+0x7fa>
 8005888:	d09f      	beq.n	80057ca <_dtoa_r+0x82a>
 800588a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800588c:	331c      	adds	r3, #28
 800588e:	441a      	add	r2, r3
 8005890:	4498      	add	r8, r3
 8005892:	441e      	add	r6, r3
 8005894:	9209      	str	r2, [sp, #36]	@ 0x24
 8005896:	e798      	b.n	80057ca <_dtoa_r+0x82a>
 8005898:	4603      	mov	r3, r0
 800589a:	e7f6      	b.n	800588a <_dtoa_r+0x8ea>
 800589c:	9b07      	ldr	r3, [sp, #28]
 800589e:	9704      	str	r7, [sp, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	dc20      	bgt.n	80058e6 <_dtoa_r+0x946>
 80058a4:	9308      	str	r3, [sp, #32]
 80058a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	dd1e      	ble.n	80058ea <_dtoa_r+0x94a>
 80058ac:	9b08      	ldr	r3, [sp, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f47f aebc 	bne.w	800562c <_dtoa_r+0x68c>
 80058b4:	4621      	mov	r1, r4
 80058b6:	2205      	movs	r2, #5
 80058b8:	4658      	mov	r0, fp
 80058ba:	f000 fa99 	bl	8005df0 <__multadd>
 80058be:	4601      	mov	r1, r0
 80058c0:	4604      	mov	r4, r0
 80058c2:	4648      	mov	r0, r9
 80058c4:	f000 fcaa 	bl	800621c <__mcmp>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f77f aeaf 	ble.w	800562c <_dtoa_r+0x68c>
 80058ce:	2331      	movs	r3, #49	@ 0x31
 80058d0:	4656      	mov	r6, sl
 80058d2:	f806 3b01 	strb.w	r3, [r6], #1
 80058d6:	9b04      	ldr	r3, [sp, #16]
 80058d8:	3301      	adds	r3, #1
 80058da:	9304      	str	r3, [sp, #16]
 80058dc:	e6aa      	b.n	8005634 <_dtoa_r+0x694>
 80058de:	9c07      	ldr	r4, [sp, #28]
 80058e0:	9704      	str	r7, [sp, #16]
 80058e2:	4625      	mov	r5, r4
 80058e4:	e7f3      	b.n	80058ce <_dtoa_r+0x92e>
 80058e6:	9b07      	ldr	r3, [sp, #28]
 80058e8:	9308      	str	r3, [sp, #32]
 80058ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8104 	beq.w	8005afa <_dtoa_r+0xb5a>
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	dd05      	ble.n	8005902 <_dtoa_r+0x962>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4632      	mov	r2, r6
 80058fa:	4658      	mov	r0, fp
 80058fc:	f000 fc22 	bl	8006144 <__lshift>
 8005900:	4605      	mov	r5, r0
 8005902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05a      	beq.n	80059be <_dtoa_r+0xa1e>
 8005908:	4658      	mov	r0, fp
 800590a:	6869      	ldr	r1, [r5, #4]
 800590c:	f000 fa0e 	bl	8005d2c <_Balloc>
 8005910:	4606      	mov	r6, r0
 8005912:	b928      	cbnz	r0, 8005920 <_dtoa_r+0x980>
 8005914:	4602      	mov	r2, r0
 8005916:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800591a:	4b83      	ldr	r3, [pc, #524]	@ (8005b28 <_dtoa_r+0xb88>)
 800591c:	f7ff bb54 	b.w	8004fc8 <_dtoa_r+0x28>
 8005920:	692a      	ldr	r2, [r5, #16]
 8005922:	f105 010c 	add.w	r1, r5, #12
 8005926:	3202      	adds	r2, #2
 8005928:	0092      	lsls	r2, r2, #2
 800592a:	300c      	adds	r0, #12
 800592c:	f000 feba 	bl	80066a4 <memcpy>
 8005930:	2201      	movs	r2, #1
 8005932:	4631      	mov	r1, r6
 8005934:	4658      	mov	r0, fp
 8005936:	f000 fc05 	bl	8006144 <__lshift>
 800593a:	462f      	mov	r7, r5
 800593c:	4605      	mov	r5, r0
 800593e:	f10a 0301 	add.w	r3, sl, #1
 8005942:	9307      	str	r3, [sp, #28]
 8005944:	9b08      	ldr	r3, [sp, #32]
 8005946:	4453      	add	r3, sl
 8005948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	930a      	str	r3, [sp, #40]	@ 0x28
 8005952:	9b07      	ldr	r3, [sp, #28]
 8005954:	4621      	mov	r1, r4
 8005956:	3b01      	subs	r3, #1
 8005958:	4648      	mov	r0, r9
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	f7ff fa95 	bl	8004e8a <quorem>
 8005960:	4639      	mov	r1, r7
 8005962:	9008      	str	r0, [sp, #32]
 8005964:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005968:	4648      	mov	r0, r9
 800596a:	f000 fc57 	bl	800621c <__mcmp>
 800596e:	462a      	mov	r2, r5
 8005970:	9009      	str	r0, [sp, #36]	@ 0x24
 8005972:	4621      	mov	r1, r4
 8005974:	4658      	mov	r0, fp
 8005976:	f000 fc6d 	bl	8006254 <__mdiff>
 800597a:	68c2      	ldr	r2, [r0, #12]
 800597c:	4606      	mov	r6, r0
 800597e:	bb02      	cbnz	r2, 80059c2 <_dtoa_r+0xa22>
 8005980:	4601      	mov	r1, r0
 8005982:	4648      	mov	r0, r9
 8005984:	f000 fc4a 	bl	800621c <__mcmp>
 8005988:	4602      	mov	r2, r0
 800598a:	4631      	mov	r1, r6
 800598c:	4658      	mov	r0, fp
 800598e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005990:	f000 fa0c 	bl	8005dac <_Bfree>
 8005994:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005996:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005998:	9e07      	ldr	r6, [sp, #28]
 800599a:	ea43 0102 	orr.w	r1, r3, r2
 800599e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a0:	4319      	orrs	r1, r3
 80059a2:	d110      	bne.n	80059c6 <_dtoa_r+0xa26>
 80059a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059a8:	d029      	beq.n	80059fe <_dtoa_r+0xa5e>
 80059aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dd02      	ble.n	80059b6 <_dtoa_r+0xa16>
 80059b0:	9b08      	ldr	r3, [sp, #32]
 80059b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059b6:	9b02      	ldr	r3, [sp, #8]
 80059b8:	f883 8000 	strb.w	r8, [r3]
 80059bc:	e63b      	b.n	8005636 <_dtoa_r+0x696>
 80059be:	4628      	mov	r0, r5
 80059c0:	e7bb      	b.n	800593a <_dtoa_r+0x99a>
 80059c2:	2201      	movs	r2, #1
 80059c4:	e7e1      	b.n	800598a <_dtoa_r+0x9ea>
 80059c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	db04      	blt.n	80059d6 <_dtoa_r+0xa36>
 80059cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80059ce:	430b      	orrs	r3, r1
 80059d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059d2:	430b      	orrs	r3, r1
 80059d4:	d120      	bne.n	8005a18 <_dtoa_r+0xa78>
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	dded      	ble.n	80059b6 <_dtoa_r+0xa16>
 80059da:	4649      	mov	r1, r9
 80059dc:	2201      	movs	r2, #1
 80059de:	4658      	mov	r0, fp
 80059e0:	f000 fbb0 	bl	8006144 <__lshift>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4681      	mov	r9, r0
 80059e8:	f000 fc18 	bl	800621c <__mcmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	dc03      	bgt.n	80059f8 <_dtoa_r+0xa58>
 80059f0:	d1e1      	bne.n	80059b6 <_dtoa_r+0xa16>
 80059f2:	f018 0f01 	tst.w	r8, #1
 80059f6:	d0de      	beq.n	80059b6 <_dtoa_r+0xa16>
 80059f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059fc:	d1d8      	bne.n	80059b0 <_dtoa_r+0xa10>
 80059fe:	2339      	movs	r3, #57	@ 0x39
 8005a00:	9a02      	ldr	r2, [sp, #8]
 8005a02:	7013      	strb	r3, [r2, #0]
 8005a04:	4633      	mov	r3, r6
 8005a06:	461e      	mov	r6, r3
 8005a08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	2a39      	cmp	r2, #57	@ 0x39
 8005a10:	d052      	beq.n	8005ab8 <_dtoa_r+0xb18>
 8005a12:	3201      	adds	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e60e      	b.n	8005636 <_dtoa_r+0x696>
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	dd07      	ble.n	8005a2c <_dtoa_r+0xa8c>
 8005a1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a20:	d0ed      	beq.n	80059fe <_dtoa_r+0xa5e>
 8005a22:	9a02      	ldr	r2, [sp, #8]
 8005a24:	f108 0301 	add.w	r3, r8, #1
 8005a28:	7013      	strb	r3, [r2, #0]
 8005a2a:	e604      	b.n	8005636 <_dtoa_r+0x696>
 8005a2c:	9b07      	ldr	r3, [sp, #28]
 8005a2e:	9a07      	ldr	r2, [sp, #28]
 8005a30:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d028      	beq.n	8005a8c <_dtoa_r+0xaec>
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	220a      	movs	r2, #10
 8005a40:	4658      	mov	r0, fp
 8005a42:	f000 f9d5 	bl	8005df0 <__multadd>
 8005a46:	42af      	cmp	r7, r5
 8005a48:	4681      	mov	r9, r0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	f04f 020a 	mov.w	r2, #10
 8005a52:	4639      	mov	r1, r7
 8005a54:	4658      	mov	r0, fp
 8005a56:	d107      	bne.n	8005a68 <_dtoa_r+0xac8>
 8005a58:	f000 f9ca 	bl	8005df0 <__multadd>
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	4605      	mov	r5, r0
 8005a60:	9b07      	ldr	r3, [sp, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	9307      	str	r3, [sp, #28]
 8005a66:	e774      	b.n	8005952 <_dtoa_r+0x9b2>
 8005a68:	f000 f9c2 	bl	8005df0 <__multadd>
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4607      	mov	r7, r0
 8005a70:	2300      	movs	r3, #0
 8005a72:	220a      	movs	r2, #10
 8005a74:	4658      	mov	r0, fp
 8005a76:	f000 f9bb 	bl	8005df0 <__multadd>
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	e7f0      	b.n	8005a60 <_dtoa_r+0xac0>
 8005a7e:	9b08      	ldr	r3, [sp, #32]
 8005a80:	2700      	movs	r7, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfcc      	ite	gt
 8005a86:	461e      	movgt	r6, r3
 8005a88:	2601      	movle	r6, #1
 8005a8a:	4456      	add	r6, sl
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4658      	mov	r0, fp
 8005a92:	f000 fb57 	bl	8006144 <__lshift>
 8005a96:	4621      	mov	r1, r4
 8005a98:	4681      	mov	r9, r0
 8005a9a:	f000 fbbf 	bl	800621c <__mcmp>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	dcb0      	bgt.n	8005a04 <_dtoa_r+0xa64>
 8005aa2:	d102      	bne.n	8005aaa <_dtoa_r+0xb0a>
 8005aa4:	f018 0f01 	tst.w	r8, #1
 8005aa8:	d1ac      	bne.n	8005a04 <_dtoa_r+0xa64>
 8005aaa:	4633      	mov	r3, r6
 8005aac:	461e      	mov	r6, r3
 8005aae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ab2:	2a30      	cmp	r2, #48	@ 0x30
 8005ab4:	d0fa      	beq.n	8005aac <_dtoa_r+0xb0c>
 8005ab6:	e5be      	b.n	8005636 <_dtoa_r+0x696>
 8005ab8:	459a      	cmp	sl, r3
 8005aba:	d1a4      	bne.n	8005a06 <_dtoa_r+0xa66>
 8005abc:	9b04      	ldr	r3, [sp, #16]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	2331      	movs	r3, #49	@ 0x31
 8005ac4:	f88a 3000 	strb.w	r3, [sl]
 8005ac8:	e5b5      	b.n	8005636 <_dtoa_r+0x696>
 8005aca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005acc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b2c <_dtoa_r+0xb8c>
 8005ad0:	b11b      	cbz	r3, 8005ada <_dtoa_r+0xb3a>
 8005ad2:	f10a 0308 	add.w	r3, sl, #8
 8005ad6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	4650      	mov	r0, sl
 8005adc:	b017      	add	sp, #92	@ 0x5c
 8005ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f77f ae3d 	ble.w	8005764 <_dtoa_r+0x7c4>
 8005aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aec:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aee:	2001      	movs	r0, #1
 8005af0:	e65b      	b.n	80057aa <_dtoa_r+0x80a>
 8005af2:	9b08      	ldr	r3, [sp, #32]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f77f aed6 	ble.w	80058a6 <_dtoa_r+0x906>
 8005afa:	4656      	mov	r6, sl
 8005afc:	4621      	mov	r1, r4
 8005afe:	4648      	mov	r0, r9
 8005b00:	f7ff f9c3 	bl	8004e8a <quorem>
 8005b04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b08:	9b08      	ldr	r3, [sp, #32]
 8005b0a:	f806 8b01 	strb.w	r8, [r6], #1
 8005b0e:	eba6 020a 	sub.w	r2, r6, sl
 8005b12:	4293      	cmp	r3, r2
 8005b14:	ddb3      	ble.n	8005a7e <_dtoa_r+0xade>
 8005b16:	4649      	mov	r1, r9
 8005b18:	2300      	movs	r3, #0
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	4658      	mov	r0, fp
 8005b1e:	f000 f967 	bl	8005df0 <__multadd>
 8005b22:	4681      	mov	r9, r0
 8005b24:	e7ea      	b.n	8005afc <_dtoa_r+0xb5c>
 8005b26:	bf00      	nop
 8005b28:	08006bb6 	.word	0x08006bb6
 8005b2c:	08006b3a 	.word	0x08006b3a

08005b30 <_free_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4605      	mov	r5, r0
 8005b34:	2900      	cmp	r1, #0
 8005b36:	d040      	beq.n	8005bba <_free_r+0x8a>
 8005b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b3c:	1f0c      	subs	r4, r1, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfb8      	it	lt
 8005b42:	18e4      	addlt	r4, r4, r3
 8005b44:	f000 f8e6 	bl	8005d14 <__malloc_lock>
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <_free_r+0x8c>)
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b933      	cbnz	r3, 8005b5c <_free_r+0x2c>
 8005b4e:	6063      	str	r3, [r4, #4]
 8005b50:	6014      	str	r4, [r2, #0]
 8005b52:	4628      	mov	r0, r5
 8005b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b58:	f000 b8e2 	b.w	8005d20 <__malloc_unlock>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d908      	bls.n	8005b72 <_free_r+0x42>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	1821      	adds	r1, r4, r0
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf01      	itttt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	e7ed      	b.n	8005b4e <_free_r+0x1e>
 8005b72:	461a      	mov	r2, r3
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b10b      	cbz	r3, 8005b7c <_free_r+0x4c>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d9fa      	bls.n	8005b72 <_free_r+0x42>
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	1850      	adds	r0, r2, r1
 8005b80:	42a0      	cmp	r0, r4
 8005b82:	d10b      	bne.n	8005b9c <_free_r+0x6c>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	4401      	add	r1, r0
 8005b88:	1850      	adds	r0, r2, r1
 8005b8a:	4283      	cmp	r3, r0
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	d1e0      	bne.n	8005b52 <_free_r+0x22>
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4408      	add	r0, r1
 8005b96:	6010      	str	r0, [r2, #0]
 8005b98:	6053      	str	r3, [r2, #4]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x22>
 8005b9c:	d902      	bls.n	8005ba4 <_free_r+0x74>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	e7d6      	b.n	8005b52 <_free_r+0x22>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	1821      	adds	r1, r4, r0
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1809      	addeq	r1, r1, r0
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	6054      	str	r4, [r2, #4]
 8005bb8:	e7cb      	b.n	8005b52 <_free_r+0x22>
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000494 	.word	0x20000494

08005bc0 <malloc>:
 8005bc0:	4b02      	ldr	r3, [pc, #8]	@ (8005bcc <malloc+0xc>)
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	f000 b825 	b.w	8005c14 <_malloc_r>
 8005bca:	bf00      	nop
 8005bcc:	20000018 	.word	0x20000018

08005bd0 <sbrk_aligned>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8005c10 <sbrk_aligned+0x40>)
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	6831      	ldr	r1, [r6, #0]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	b911      	cbnz	r1, 8005be2 <sbrk_aligned+0x12>
 8005bdc:	f000 fd52 	bl	8006684 <_sbrk_r>
 8005be0:	6030      	str	r0, [r6, #0]
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fd4d 	bl	8006684 <_sbrk_r>
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d103      	bne.n	8005bf6 <sbrk_aligned+0x26>
 8005bee:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	1cc4      	adds	r4, r0, #3
 8005bf8:	f024 0403 	bic.w	r4, r4, #3
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	d0f8      	beq.n	8005bf2 <sbrk_aligned+0x22>
 8005c00:	1a21      	subs	r1, r4, r0
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 fd3e 	bl	8006684 <_sbrk_r>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d1f2      	bne.n	8005bf2 <sbrk_aligned+0x22>
 8005c0c:	e7ef      	b.n	8005bee <sbrk_aligned+0x1e>
 8005c0e:	bf00      	nop
 8005c10:	20000490 	.word	0x20000490

08005c14 <_malloc_r>:
 8005c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c18:	1ccd      	adds	r5, r1, #3
 8005c1a:	f025 0503 	bic.w	r5, r5, #3
 8005c1e:	3508      	adds	r5, #8
 8005c20:	2d0c      	cmp	r5, #12
 8005c22:	bf38      	it	cc
 8005c24:	250c      	movcc	r5, #12
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	4606      	mov	r6, r0
 8005c2a:	db01      	blt.n	8005c30 <_malloc_r+0x1c>
 8005c2c:	42a9      	cmp	r1, r5
 8005c2e:	d904      	bls.n	8005c3a <_malloc_r+0x26>
 8005c30:	230c      	movs	r3, #12
 8005c32:	6033      	str	r3, [r6, #0]
 8005c34:	2000      	movs	r0, #0
 8005c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d10 <_malloc_r+0xfc>
 8005c3e:	f000 f869 	bl	8005d14 <__malloc_lock>
 8005c42:	f8d8 3000 	ldr.w	r3, [r8]
 8005c46:	461c      	mov	r4, r3
 8005c48:	bb44      	cbnz	r4, 8005c9c <_malloc_r+0x88>
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff ffbf 	bl	8005bd0 <sbrk_aligned>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	4604      	mov	r4, r0
 8005c56:	d158      	bne.n	8005d0a <_malloc_r+0xf6>
 8005c58:	f8d8 4000 	ldr.w	r4, [r8]
 8005c5c:	4627      	mov	r7, r4
 8005c5e:	2f00      	cmp	r7, #0
 8005c60:	d143      	bne.n	8005cea <_malloc_r+0xd6>
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	d04b      	beq.n	8005cfe <_malloc_r+0xea>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	eb04 0903 	add.w	r9, r4, r3
 8005c70:	f000 fd08 	bl	8006684 <_sbrk_r>
 8005c74:	4581      	cmp	r9, r0
 8005c76:	d142      	bne.n	8005cfe <_malloc_r+0xea>
 8005c78:	6821      	ldr	r1, [r4, #0]
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	1a6d      	subs	r5, r5, r1
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7ff ffa6 	bl	8005bd0 <sbrk_aligned>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d03a      	beq.n	8005cfe <_malloc_r+0xea>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	442b      	add	r3, r5
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	bb62      	cbnz	r2, 8005cf0 <_malloc_r+0xdc>
 8005c96:	f8c8 7000 	str.w	r7, [r8]
 8005c9a:	e00f      	b.n	8005cbc <_malloc_r+0xa8>
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	1b52      	subs	r2, r2, r5
 8005ca0:	d420      	bmi.n	8005ce4 <_malloc_r+0xd0>
 8005ca2:	2a0b      	cmp	r2, #11
 8005ca4:	d917      	bls.n	8005cd6 <_malloc_r+0xc2>
 8005ca6:	1961      	adds	r1, r4, r5
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	6025      	str	r5, [r4, #0]
 8005cac:	bf18      	it	ne
 8005cae:	6059      	strne	r1, [r3, #4]
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	bf08      	it	eq
 8005cb4:	f8c8 1000 	streq.w	r1, [r8]
 8005cb8:	5162      	str	r2, [r4, r5]
 8005cba:	604b      	str	r3, [r1, #4]
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f000 f82f 	bl	8005d20 <__malloc_unlock>
 8005cc2:	f104 000b 	add.w	r0, r4, #11
 8005cc6:	1d23      	adds	r3, r4, #4
 8005cc8:	f020 0007 	bic.w	r0, r0, #7
 8005ccc:	1ac2      	subs	r2, r0, r3
 8005cce:	bf1c      	itt	ne
 8005cd0:	1a1b      	subne	r3, r3, r0
 8005cd2:	50a3      	strne	r3, [r4, r2]
 8005cd4:	e7af      	b.n	8005c36 <_malloc_r+0x22>
 8005cd6:	6862      	ldr	r2, [r4, #4]
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	bf0c      	ite	eq
 8005cdc:	f8c8 2000 	streq.w	r2, [r8]
 8005ce0:	605a      	strne	r2, [r3, #4]
 8005ce2:	e7eb      	b.n	8005cbc <_malloc_r+0xa8>
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	6864      	ldr	r4, [r4, #4]
 8005ce8:	e7ae      	b.n	8005c48 <_malloc_r+0x34>
 8005cea:	463c      	mov	r4, r7
 8005cec:	687f      	ldr	r7, [r7, #4]
 8005cee:	e7b6      	b.n	8005c5e <_malloc_r+0x4a>
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d1fb      	bne.n	8005cf0 <_malloc_r+0xdc>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6053      	str	r3, [r2, #4]
 8005cfc:	e7de      	b.n	8005cbc <_malloc_r+0xa8>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	4630      	mov	r0, r6
 8005d02:	6033      	str	r3, [r6, #0]
 8005d04:	f000 f80c 	bl	8005d20 <__malloc_unlock>
 8005d08:	e794      	b.n	8005c34 <_malloc_r+0x20>
 8005d0a:	6005      	str	r5, [r0, #0]
 8005d0c:	e7d6      	b.n	8005cbc <_malloc_r+0xa8>
 8005d0e:	bf00      	nop
 8005d10:	20000494 	.word	0x20000494

08005d14 <__malloc_lock>:
 8005d14:	4801      	ldr	r0, [pc, #4]	@ (8005d1c <__malloc_lock+0x8>)
 8005d16:	f7ff b8a8 	b.w	8004e6a <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	2000048c 	.word	0x2000048c

08005d20 <__malloc_unlock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	@ (8005d28 <__malloc_unlock+0x8>)
 8005d22:	f7ff b8a3 	b.w	8004e6c <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	2000048c 	.word	0x2000048c

08005d2c <_Balloc>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	69c6      	ldr	r6, [r0, #28]
 8005d30:	4604      	mov	r4, r0
 8005d32:	460d      	mov	r5, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Balloc+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff ff42 	bl	8005bc0 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	61e0      	str	r0, [r4, #28]
 8005d40:	b920      	cbnz	r0, 8005d4c <_Balloc+0x20>
 8005d42:	216b      	movs	r1, #107	@ 0x6b
 8005d44:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <_Balloc+0x78>)
 8005d46:	4818      	ldr	r0, [pc, #96]	@ (8005da8 <_Balloc+0x7c>)
 8005d48:	f000 fcba 	bl	80066c0 <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	69e6      	ldr	r6, [r4, #28]
 8005d56:	68f3      	ldr	r3, [r6, #12]
 8005d58:	b183      	cbz	r3, 8005d7c <_Balloc+0x50>
 8005d5a:	69e3      	ldr	r3, [r4, #28]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d62:	b9b8      	cbnz	r0, 8005d94 <_Balloc+0x68>
 8005d64:	2101      	movs	r1, #1
 8005d66:	fa01 f605 	lsl.w	r6, r1, r5
 8005d6a:	1d72      	adds	r2, r6, #5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	0092      	lsls	r2, r2, #2
 8005d70:	f000 fcc4 	bl	80066fc <_calloc_r>
 8005d74:	b160      	cbz	r0, 8005d90 <_Balloc+0x64>
 8005d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d7a:	e00e      	b.n	8005d9a <_Balloc+0x6e>
 8005d7c:	2221      	movs	r2, #33	@ 0x21
 8005d7e:	2104      	movs	r1, #4
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fcbb 	bl	80066fc <_calloc_r>
 8005d86:	69e3      	ldr	r3, [r4, #28]
 8005d88:	60f0      	str	r0, [r6, #12]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e4      	bne.n	8005d5a <_Balloc+0x2e>
 8005d90:	2000      	movs	r0, #0
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	6802      	ldr	r2, [r0, #0]
 8005d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005da0:	e7f7      	b.n	8005d92 <_Balloc+0x66>
 8005da2:	bf00      	nop
 8005da4:	08006b47 	.word	0x08006b47
 8005da8:	08006bc7 	.word	0x08006bc7

08005dac <_Bfree>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	69c6      	ldr	r6, [r0, #28]
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b976      	cbnz	r6, 8005dd4 <_Bfree+0x28>
 8005db6:	2010      	movs	r0, #16
 8005db8:	f7ff ff02 	bl	8005bc0 <malloc>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	61e8      	str	r0, [r5, #28]
 8005dc0:	b920      	cbnz	r0, 8005dcc <_Bfree+0x20>
 8005dc2:	218f      	movs	r1, #143	@ 0x8f
 8005dc4:	4b08      	ldr	r3, [pc, #32]	@ (8005de8 <_Bfree+0x3c>)
 8005dc6:	4809      	ldr	r0, [pc, #36]	@ (8005dec <_Bfree+0x40>)
 8005dc8:	f000 fc7a 	bl	80066c0 <__assert_func>
 8005dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dd0:	6006      	str	r6, [r0, #0]
 8005dd2:	60c6      	str	r6, [r0, #12]
 8005dd4:	b13c      	cbz	r4, 8005de6 <_Bfree+0x3a>
 8005dd6:	69eb      	ldr	r3, [r5, #28]
 8005dd8:	6862      	ldr	r2, [r4, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de0:	6021      	str	r1, [r4, #0]
 8005de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	08006b47 	.word	0x08006b47
 8005dec:	08006bc7 	.word	0x08006bc7

08005df0 <__multadd>:
 8005df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df4:	4607      	mov	r7, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	461e      	mov	r6, r3
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	690d      	ldr	r5, [r1, #16]
 8005dfe:	f101 0c14 	add.w	ip, r1, #20
 8005e02:	f8dc 3000 	ldr.w	r3, [ip]
 8005e06:	3001      	adds	r0, #1
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e0e:	0c1e      	lsrs	r6, r3, #16
 8005e10:	0c0b      	lsrs	r3, r1, #16
 8005e12:	fb02 3306 	mla	r3, r2, r6, r3
 8005e16:	b289      	uxth	r1, r1
 8005e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e1c:	4285      	cmp	r5, r0
 8005e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e22:	f84c 1b04 	str.w	r1, [ip], #4
 8005e26:	dcec      	bgt.n	8005e02 <__multadd+0x12>
 8005e28:	b30e      	cbz	r6, 8005e6e <__multadd+0x7e>
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	42ab      	cmp	r3, r5
 8005e2e:	dc19      	bgt.n	8005e64 <__multadd+0x74>
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	4638      	mov	r0, r7
 8005e34:	3101      	adds	r1, #1
 8005e36:	f7ff ff79 	bl	8005d2c <_Balloc>
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	b928      	cbnz	r0, 8005e4a <__multadd+0x5a>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	21ba      	movs	r1, #186	@ 0xba
 8005e42:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <__multadd+0x84>)
 8005e44:	480c      	ldr	r0, [pc, #48]	@ (8005e78 <__multadd+0x88>)
 8005e46:	f000 fc3b 	bl	80066c0 <__assert_func>
 8005e4a:	6922      	ldr	r2, [r4, #16]
 8005e4c:	f104 010c 	add.w	r1, r4, #12
 8005e50:	3202      	adds	r2, #2
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	300c      	adds	r0, #12
 8005e56:	f000 fc25 	bl	80066a4 <memcpy>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f7ff ffa5 	bl	8005dac <_Bfree>
 8005e62:	4644      	mov	r4, r8
 8005e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e68:	3501      	adds	r5, #1
 8005e6a:	615e      	str	r6, [r3, #20]
 8005e6c:	6125      	str	r5, [r4, #16]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	08006bb6 	.word	0x08006bb6
 8005e78:	08006bc7 	.word	0x08006bc7

08005e7c <__hi0bits>:
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e82:	bf3a      	itte	cc
 8005e84:	0403      	lslcc	r3, r0, #16
 8005e86:	2010      	movcc	r0, #16
 8005e88:	2000      	movcs	r0, #0
 8005e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e8e:	bf3c      	itt	cc
 8005e90:	021b      	lslcc	r3, r3, #8
 8005e92:	3008      	addcc	r0, #8
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e98:	bf3c      	itt	cc
 8005e9a:	011b      	lslcc	r3, r3, #4
 8005e9c:	3004      	addcc	r0, #4
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	bf3c      	itt	cc
 8005ea4:	009b      	lslcc	r3, r3, #2
 8005ea6:	3002      	addcc	r0, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db05      	blt.n	8005eb8 <__hi0bits+0x3c>
 8005eac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005eb0:	f100 0001 	add.w	r0, r0, #1
 8005eb4:	bf08      	it	eq
 8005eb6:	2020      	moveq	r0, #32
 8005eb8:	4770      	bx	lr

08005eba <__lo0bits>:
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f013 0007 	ands.w	r0, r3, #7
 8005ec2:	d00b      	beq.n	8005edc <__lo0bits+0x22>
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	d421      	bmi.n	8005f0c <__lo0bits+0x52>
 8005ec8:	0798      	lsls	r0, r3, #30
 8005eca:	bf49      	itett	mi
 8005ecc:	085b      	lsrmi	r3, r3, #1
 8005ece:	089b      	lsrpl	r3, r3, #2
 8005ed0:	2001      	movmi	r0, #1
 8005ed2:	6013      	strmi	r3, [r2, #0]
 8005ed4:	bf5c      	itt	pl
 8005ed6:	2002      	movpl	r0, #2
 8005ed8:	6013      	strpl	r3, [r2, #0]
 8005eda:	4770      	bx	lr
 8005edc:	b299      	uxth	r1, r3
 8005ede:	b909      	cbnz	r1, 8005ee4 <__lo0bits+0x2a>
 8005ee0:	2010      	movs	r0, #16
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	b2d9      	uxtb	r1, r3
 8005ee6:	b909      	cbnz	r1, 8005eec <__lo0bits+0x32>
 8005ee8:	3008      	adds	r0, #8
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	0719      	lsls	r1, r3, #28
 8005eee:	bf04      	itt	eq
 8005ef0:	091b      	lsreq	r3, r3, #4
 8005ef2:	3004      	addeq	r0, #4
 8005ef4:	0799      	lsls	r1, r3, #30
 8005ef6:	bf04      	itt	eq
 8005ef8:	089b      	lsreq	r3, r3, #2
 8005efa:	3002      	addeq	r0, #2
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	d403      	bmi.n	8005f08 <__lo0bits+0x4e>
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	f100 0001 	add.w	r0, r0, #1
 8005f06:	d003      	beq.n	8005f10 <__lo0bits+0x56>
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4770      	bx	lr
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr
 8005f10:	2020      	movs	r0, #32
 8005f12:	4770      	bx	lr

08005f14 <__i2b>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	2101      	movs	r1, #1
 8005f1a:	f7ff ff07 	bl	8005d2c <_Balloc>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	b928      	cbnz	r0, 8005f2e <__i2b+0x1a>
 8005f22:	f240 1145 	movw	r1, #325	@ 0x145
 8005f26:	4b04      	ldr	r3, [pc, #16]	@ (8005f38 <__i2b+0x24>)
 8005f28:	4804      	ldr	r0, [pc, #16]	@ (8005f3c <__i2b+0x28>)
 8005f2a:	f000 fbc9 	bl	80066c0 <__assert_func>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	6144      	str	r4, [r0, #20]
 8005f32:	6103      	str	r3, [r0, #16]
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	08006bb6 	.word	0x08006bb6
 8005f3c:	08006bc7 	.word	0x08006bc7

08005f40 <__multiply>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4614      	mov	r4, r2
 8005f46:	690a      	ldr	r2, [r1, #16]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	460f      	mov	r7, r1
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	bfa2      	ittt	ge
 8005f50:	4623      	movge	r3, r4
 8005f52:	460c      	movge	r4, r1
 8005f54:	461f      	movge	r7, r3
 8005f56:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f5a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	6861      	ldr	r1, [r4, #4]
 8005f62:	eb0a 0609 	add.w	r6, sl, r9
 8005f66:	42b3      	cmp	r3, r6
 8005f68:	b085      	sub	sp, #20
 8005f6a:	bfb8      	it	lt
 8005f6c:	3101      	addlt	r1, #1
 8005f6e:	f7ff fedd 	bl	8005d2c <_Balloc>
 8005f72:	b930      	cbnz	r0, 8005f82 <__multiply+0x42>
 8005f74:	4602      	mov	r2, r0
 8005f76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f7a:	4b43      	ldr	r3, [pc, #268]	@ (8006088 <__multiply+0x148>)
 8005f7c:	4843      	ldr	r0, [pc, #268]	@ (800608c <__multiply+0x14c>)
 8005f7e:	f000 fb9f 	bl	80066c0 <__assert_func>
 8005f82:	f100 0514 	add.w	r5, r0, #20
 8005f86:	462b      	mov	r3, r5
 8005f88:	2200      	movs	r2, #0
 8005f8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f8e:	4543      	cmp	r3, r8
 8005f90:	d321      	bcc.n	8005fd6 <__multiply+0x96>
 8005f92:	f107 0114 	add.w	r1, r7, #20
 8005f96:	f104 0214 	add.w	r2, r4, #20
 8005f9a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005f9e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005fa2:	9302      	str	r3, [sp, #8]
 8005fa4:	1b13      	subs	r3, r2, r4
 8005fa6:	3b15      	subs	r3, #21
 8005fa8:	f023 0303 	bic.w	r3, r3, #3
 8005fac:	3304      	adds	r3, #4
 8005fae:	f104 0715 	add.w	r7, r4, #21
 8005fb2:	42ba      	cmp	r2, r7
 8005fb4:	bf38      	it	cc
 8005fb6:	2304      	movcc	r3, #4
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	9b02      	ldr	r3, [sp, #8]
 8005fbc:	9103      	str	r1, [sp, #12]
 8005fbe:	428b      	cmp	r3, r1
 8005fc0:	d80c      	bhi.n	8005fdc <__multiply+0x9c>
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	dd03      	ble.n	8005fce <__multiply+0x8e>
 8005fc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05a      	beq.n	8006084 <__multiply+0x144>
 8005fce:	6106      	str	r6, [r0, #16]
 8005fd0:	b005      	add	sp, #20
 8005fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd6:	f843 2b04 	str.w	r2, [r3], #4
 8005fda:	e7d8      	b.n	8005f8e <__multiply+0x4e>
 8005fdc:	f8b1 a000 	ldrh.w	sl, [r1]
 8005fe0:	f1ba 0f00 	cmp.w	sl, #0
 8005fe4:	d023      	beq.n	800602e <__multiply+0xee>
 8005fe6:	46a9      	mov	r9, r5
 8005fe8:	f04f 0c00 	mov.w	ip, #0
 8005fec:	f104 0e14 	add.w	lr, r4, #20
 8005ff0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ff4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ff8:	fa1f fb87 	uxth.w	fp, r7
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	fb0a 330b 	mla	r3, sl, fp, r3
 8006002:	4463      	add	r3, ip
 8006004:	f8d9 c000 	ldr.w	ip, [r9]
 8006008:	0c3f      	lsrs	r7, r7, #16
 800600a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800600e:	fb0a c707 	mla	r7, sl, r7, ip
 8006012:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800601c:	4572      	cmp	r2, lr
 800601e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006022:	f849 3b04 	str.w	r3, [r9], #4
 8006026:	d8e3      	bhi.n	8005ff0 <__multiply+0xb0>
 8006028:	9b01      	ldr	r3, [sp, #4]
 800602a:	f845 c003 	str.w	ip, [r5, r3]
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	3104      	adds	r1, #4
 8006032:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006036:	f1b9 0f00 	cmp.w	r9, #0
 800603a:	d021      	beq.n	8006080 <__multiply+0x140>
 800603c:	46ae      	mov	lr, r5
 800603e:	f04f 0a00 	mov.w	sl, #0
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	f104 0c14 	add.w	ip, r4, #20
 8006048:	f8bc b000 	ldrh.w	fp, [ip]
 800604c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006050:	b29b      	uxth	r3, r3
 8006052:	fb09 770b 	mla	r7, r9, fp, r7
 8006056:	4457      	add	r7, sl
 8006058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800605c:	f84e 3b04 	str.w	r3, [lr], #4
 8006060:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006068:	f8be 3000 	ldrh.w	r3, [lr]
 800606c:	4562      	cmp	r2, ip
 800606e:	fb09 330a 	mla	r3, r9, sl, r3
 8006072:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800607a:	d8e5      	bhi.n	8006048 <__multiply+0x108>
 800607c:	9f01      	ldr	r7, [sp, #4]
 800607e:	51eb      	str	r3, [r5, r7]
 8006080:	3504      	adds	r5, #4
 8006082:	e79a      	b.n	8005fba <__multiply+0x7a>
 8006084:	3e01      	subs	r6, #1
 8006086:	e79c      	b.n	8005fc2 <__multiply+0x82>
 8006088:	08006bb6 	.word	0x08006bb6
 800608c:	08006bc7 	.word	0x08006bc7

08006090 <__pow5mult>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	4615      	mov	r5, r2
 8006096:	f012 0203 	ands.w	r2, r2, #3
 800609a:	4607      	mov	r7, r0
 800609c:	460e      	mov	r6, r1
 800609e:	d007      	beq.n	80060b0 <__pow5mult+0x20>
 80060a0:	4c25      	ldr	r4, [pc, #148]	@ (8006138 <__pow5mult+0xa8>)
 80060a2:	3a01      	subs	r2, #1
 80060a4:	2300      	movs	r3, #0
 80060a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060aa:	f7ff fea1 	bl	8005df0 <__multadd>
 80060ae:	4606      	mov	r6, r0
 80060b0:	10ad      	asrs	r5, r5, #2
 80060b2:	d03d      	beq.n	8006130 <__pow5mult+0xa0>
 80060b4:	69fc      	ldr	r4, [r7, #28]
 80060b6:	b97c      	cbnz	r4, 80060d8 <__pow5mult+0x48>
 80060b8:	2010      	movs	r0, #16
 80060ba:	f7ff fd81 	bl	8005bc0 <malloc>
 80060be:	4602      	mov	r2, r0
 80060c0:	61f8      	str	r0, [r7, #28]
 80060c2:	b928      	cbnz	r0, 80060d0 <__pow5mult+0x40>
 80060c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060c8:	4b1c      	ldr	r3, [pc, #112]	@ (800613c <__pow5mult+0xac>)
 80060ca:	481d      	ldr	r0, [pc, #116]	@ (8006140 <__pow5mult+0xb0>)
 80060cc:	f000 faf8 	bl	80066c0 <__assert_func>
 80060d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060d4:	6004      	str	r4, [r0, #0]
 80060d6:	60c4      	str	r4, [r0, #12]
 80060d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80060dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060e0:	b94c      	cbnz	r4, 80060f6 <__pow5mult+0x66>
 80060e2:	f240 2171 	movw	r1, #625	@ 0x271
 80060e6:	4638      	mov	r0, r7
 80060e8:	f7ff ff14 	bl	8005f14 <__i2b>
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	f04f 0900 	mov.w	r9, #0
 80060fa:	07eb      	lsls	r3, r5, #31
 80060fc:	d50a      	bpl.n	8006114 <__pow5mult+0x84>
 80060fe:	4631      	mov	r1, r6
 8006100:	4622      	mov	r2, r4
 8006102:	4638      	mov	r0, r7
 8006104:	f7ff ff1c 	bl	8005f40 <__multiply>
 8006108:	4680      	mov	r8, r0
 800610a:	4631      	mov	r1, r6
 800610c:	4638      	mov	r0, r7
 800610e:	f7ff fe4d 	bl	8005dac <_Bfree>
 8006112:	4646      	mov	r6, r8
 8006114:	106d      	asrs	r5, r5, #1
 8006116:	d00b      	beq.n	8006130 <__pow5mult+0xa0>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	b938      	cbnz	r0, 800612c <__pow5mult+0x9c>
 800611c:	4622      	mov	r2, r4
 800611e:	4621      	mov	r1, r4
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff ff0d 	bl	8005f40 <__multiply>
 8006126:	6020      	str	r0, [r4, #0]
 8006128:	f8c0 9000 	str.w	r9, [r0]
 800612c:	4604      	mov	r4, r0
 800612e:	e7e4      	b.n	80060fa <__pow5mult+0x6a>
 8006130:	4630      	mov	r0, r6
 8006132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006136:	bf00      	nop
 8006138:	08006c20 	.word	0x08006c20
 800613c:	08006b47 	.word	0x08006b47
 8006140:	08006bc7 	.word	0x08006bc7

08006144 <__lshift>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	460c      	mov	r4, r1
 800614a:	4607      	mov	r7, r0
 800614c:	4691      	mov	r9, r2
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	6849      	ldr	r1, [r1, #4]
 8006152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800615c:	f108 0601 	add.w	r6, r8, #1
 8006160:	42b3      	cmp	r3, r6
 8006162:	db0b      	blt.n	800617c <__lshift+0x38>
 8006164:	4638      	mov	r0, r7
 8006166:	f7ff fde1 	bl	8005d2c <_Balloc>
 800616a:	4605      	mov	r5, r0
 800616c:	b948      	cbnz	r0, 8006182 <__lshift+0x3e>
 800616e:	4602      	mov	r2, r0
 8006170:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006174:	4b27      	ldr	r3, [pc, #156]	@ (8006214 <__lshift+0xd0>)
 8006176:	4828      	ldr	r0, [pc, #160]	@ (8006218 <__lshift+0xd4>)
 8006178:	f000 faa2 	bl	80066c0 <__assert_func>
 800617c:	3101      	adds	r1, #1
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	e7ee      	b.n	8006160 <__lshift+0x1c>
 8006182:	2300      	movs	r3, #0
 8006184:	f100 0114 	add.w	r1, r0, #20
 8006188:	f100 0210 	add.w	r2, r0, #16
 800618c:	4618      	mov	r0, r3
 800618e:	4553      	cmp	r3, sl
 8006190:	db33      	blt.n	80061fa <__lshift+0xb6>
 8006192:	6920      	ldr	r0, [r4, #16]
 8006194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006198:	f104 0314 	add.w	r3, r4, #20
 800619c:	f019 091f 	ands.w	r9, r9, #31
 80061a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061a8:	d02b      	beq.n	8006202 <__lshift+0xbe>
 80061aa:	468a      	mov	sl, r1
 80061ac:	2200      	movs	r2, #0
 80061ae:	f1c9 0e20 	rsb	lr, r9, #32
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	fa00 f009 	lsl.w	r0, r0, r9
 80061b8:	4310      	orrs	r0, r2
 80061ba:	f84a 0b04 	str.w	r0, [sl], #4
 80061be:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c2:	459c      	cmp	ip, r3
 80061c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80061c8:	d8f3      	bhi.n	80061b2 <__lshift+0x6e>
 80061ca:	ebac 0304 	sub.w	r3, ip, r4
 80061ce:	3b15      	subs	r3, #21
 80061d0:	f023 0303 	bic.w	r3, r3, #3
 80061d4:	3304      	adds	r3, #4
 80061d6:	f104 0015 	add.w	r0, r4, #21
 80061da:	4584      	cmp	ip, r0
 80061dc:	bf38      	it	cc
 80061de:	2304      	movcc	r3, #4
 80061e0:	50ca      	str	r2, [r1, r3]
 80061e2:	b10a      	cbz	r2, 80061e8 <__lshift+0xa4>
 80061e4:	f108 0602 	add.w	r6, r8, #2
 80061e8:	3e01      	subs	r6, #1
 80061ea:	4638      	mov	r0, r7
 80061ec:	4621      	mov	r1, r4
 80061ee:	612e      	str	r6, [r5, #16]
 80061f0:	f7ff fddc 	bl	8005dac <_Bfree>
 80061f4:	4628      	mov	r0, r5
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80061fe:	3301      	adds	r3, #1
 8006200:	e7c5      	b.n	800618e <__lshift+0x4a>
 8006202:	3904      	subs	r1, #4
 8006204:	f853 2b04 	ldr.w	r2, [r3], #4
 8006208:	459c      	cmp	ip, r3
 800620a:	f841 2f04 	str.w	r2, [r1, #4]!
 800620e:	d8f9      	bhi.n	8006204 <__lshift+0xc0>
 8006210:	e7ea      	b.n	80061e8 <__lshift+0xa4>
 8006212:	bf00      	nop
 8006214:	08006bb6 	.word	0x08006bb6
 8006218:	08006bc7 	.word	0x08006bc7

0800621c <__mcmp>:
 800621c:	4603      	mov	r3, r0
 800621e:	690a      	ldr	r2, [r1, #16]
 8006220:	6900      	ldr	r0, [r0, #16]
 8006222:	b530      	push	{r4, r5, lr}
 8006224:	1a80      	subs	r0, r0, r2
 8006226:	d10e      	bne.n	8006246 <__mcmp+0x2a>
 8006228:	3314      	adds	r3, #20
 800622a:	3114      	adds	r1, #20
 800622c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800623c:	4295      	cmp	r5, r2
 800623e:	d003      	beq.n	8006248 <__mcmp+0x2c>
 8006240:	d205      	bcs.n	800624e <__mcmp+0x32>
 8006242:	f04f 30ff 	mov.w	r0, #4294967295
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	42a3      	cmp	r3, r4
 800624a:	d3f3      	bcc.n	8006234 <__mcmp+0x18>
 800624c:	e7fb      	b.n	8006246 <__mcmp+0x2a>
 800624e:	2001      	movs	r0, #1
 8006250:	e7f9      	b.n	8006246 <__mcmp+0x2a>
	...

08006254 <__mdiff>:
 8006254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	4689      	mov	r9, r1
 800625a:	4606      	mov	r6, r0
 800625c:	4611      	mov	r1, r2
 800625e:	4648      	mov	r0, r9
 8006260:	4614      	mov	r4, r2
 8006262:	f7ff ffdb 	bl	800621c <__mcmp>
 8006266:	1e05      	subs	r5, r0, #0
 8006268:	d112      	bne.n	8006290 <__mdiff+0x3c>
 800626a:	4629      	mov	r1, r5
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff fd5d 	bl	8005d2c <_Balloc>
 8006272:	4602      	mov	r2, r0
 8006274:	b928      	cbnz	r0, 8006282 <__mdiff+0x2e>
 8006276:	f240 2137 	movw	r1, #567	@ 0x237
 800627a:	4b3e      	ldr	r3, [pc, #248]	@ (8006374 <__mdiff+0x120>)
 800627c:	483e      	ldr	r0, [pc, #248]	@ (8006378 <__mdiff+0x124>)
 800627e:	f000 fa1f 	bl	80066c0 <__assert_func>
 8006282:	2301      	movs	r3, #1
 8006284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006288:	4610      	mov	r0, r2
 800628a:	b003      	add	sp, #12
 800628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006290:	bfbc      	itt	lt
 8006292:	464b      	movlt	r3, r9
 8006294:	46a1      	movlt	r9, r4
 8006296:	4630      	mov	r0, r6
 8006298:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800629c:	bfba      	itte	lt
 800629e:	461c      	movlt	r4, r3
 80062a0:	2501      	movlt	r5, #1
 80062a2:	2500      	movge	r5, #0
 80062a4:	f7ff fd42 	bl	8005d2c <_Balloc>
 80062a8:	4602      	mov	r2, r0
 80062aa:	b918      	cbnz	r0, 80062b4 <__mdiff+0x60>
 80062ac:	f240 2145 	movw	r1, #581	@ 0x245
 80062b0:	4b30      	ldr	r3, [pc, #192]	@ (8006374 <__mdiff+0x120>)
 80062b2:	e7e3      	b.n	800627c <__mdiff+0x28>
 80062b4:	f100 0b14 	add.w	fp, r0, #20
 80062b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062bc:	f109 0310 	add.w	r3, r9, #16
 80062c0:	60c5      	str	r5, [r0, #12]
 80062c2:	f04f 0c00 	mov.w	ip, #0
 80062c6:	f109 0514 	add.w	r5, r9, #20
 80062ca:	46d9      	mov	r9, fp
 80062cc:	6926      	ldr	r6, [r4, #16]
 80062ce:	f104 0e14 	add.w	lr, r4, #20
 80062d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80062d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80062e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80062e6:	b281      	uxth	r1, r0
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	fa1f f38a 	uxth.w	r3, sl
 80062ee:	1a5b      	subs	r3, r3, r1
 80062f0:	0c00      	lsrs	r0, r0, #16
 80062f2:	4463      	add	r3, ip
 80062f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80062f8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006302:	4576      	cmp	r6, lr
 8006304:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006308:	f849 3b04 	str.w	r3, [r9], #4
 800630c:	d8e6      	bhi.n	80062dc <__mdiff+0x88>
 800630e:	1b33      	subs	r3, r6, r4
 8006310:	3b15      	subs	r3, #21
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	3415      	adds	r4, #21
 8006318:	3304      	adds	r3, #4
 800631a:	42a6      	cmp	r6, r4
 800631c:	bf38      	it	cc
 800631e:	2304      	movcc	r3, #4
 8006320:	441d      	add	r5, r3
 8006322:	445b      	add	r3, fp
 8006324:	461e      	mov	r6, r3
 8006326:	462c      	mov	r4, r5
 8006328:	4544      	cmp	r4, r8
 800632a:	d30e      	bcc.n	800634a <__mdiff+0xf6>
 800632c:	f108 0103 	add.w	r1, r8, #3
 8006330:	1b49      	subs	r1, r1, r5
 8006332:	f021 0103 	bic.w	r1, r1, #3
 8006336:	3d03      	subs	r5, #3
 8006338:	45a8      	cmp	r8, r5
 800633a:	bf38      	it	cc
 800633c:	2100      	movcc	r1, #0
 800633e:	440b      	add	r3, r1
 8006340:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006344:	b199      	cbz	r1, 800636e <__mdiff+0x11a>
 8006346:	6117      	str	r7, [r2, #16]
 8006348:	e79e      	b.n	8006288 <__mdiff+0x34>
 800634a:	46e6      	mov	lr, ip
 800634c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006350:	fa1f fc81 	uxth.w	ip, r1
 8006354:	44f4      	add	ip, lr
 8006356:	0c08      	lsrs	r0, r1, #16
 8006358:	4471      	add	r1, lr
 800635a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800635e:	b289      	uxth	r1, r1
 8006360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006364:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006368:	f846 1b04 	str.w	r1, [r6], #4
 800636c:	e7dc      	b.n	8006328 <__mdiff+0xd4>
 800636e:	3f01      	subs	r7, #1
 8006370:	e7e6      	b.n	8006340 <__mdiff+0xec>
 8006372:	bf00      	nop
 8006374:	08006bb6 	.word	0x08006bb6
 8006378:	08006bc7 	.word	0x08006bc7

0800637c <__d2b>:
 800637c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006380:	2101      	movs	r1, #1
 8006382:	4690      	mov	r8, r2
 8006384:	4699      	mov	r9, r3
 8006386:	9e08      	ldr	r6, [sp, #32]
 8006388:	f7ff fcd0 	bl	8005d2c <_Balloc>
 800638c:	4604      	mov	r4, r0
 800638e:	b930      	cbnz	r0, 800639e <__d2b+0x22>
 8006390:	4602      	mov	r2, r0
 8006392:	f240 310f 	movw	r1, #783	@ 0x30f
 8006396:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <__d2b+0xa8>)
 8006398:	4823      	ldr	r0, [pc, #140]	@ (8006428 <__d2b+0xac>)
 800639a:	f000 f991 	bl	80066c0 <__assert_func>
 800639e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063a6:	b10d      	cbz	r5, 80063ac <__d2b+0x30>
 80063a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	f1b8 0300 	subs.w	r3, r8, #0
 80063b2:	d024      	beq.n	80063fe <__d2b+0x82>
 80063b4:	4668      	mov	r0, sp
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	f7ff fd7f 	bl	8005eba <__lo0bits>
 80063bc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063c0:	b1d8      	cbz	r0, 80063fa <__d2b+0x7e>
 80063c2:	f1c0 0320 	rsb	r3, r0, #32
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	430b      	orrs	r3, r1
 80063cc:	40c2      	lsrs	r2, r0
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	9201      	str	r2, [sp, #4]
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf0c      	ite	eq
 80063d8:	2201      	moveq	r2, #1
 80063da:	2202      	movne	r2, #2
 80063dc:	61a3      	str	r3, [r4, #24]
 80063de:	6122      	str	r2, [r4, #16]
 80063e0:	b1ad      	cbz	r5, 800640e <__d2b+0x92>
 80063e2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80063e6:	4405      	add	r5, r0
 80063e8:	6035      	str	r5, [r6, #0]
 80063ea:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80063ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f0:	6018      	str	r0, [r3, #0]
 80063f2:	4620      	mov	r0, r4
 80063f4:	b002      	add	sp, #8
 80063f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80063fa:	6161      	str	r1, [r4, #20]
 80063fc:	e7e9      	b.n	80063d2 <__d2b+0x56>
 80063fe:	a801      	add	r0, sp, #4
 8006400:	f7ff fd5b 	bl	8005eba <__lo0bits>
 8006404:	9b01      	ldr	r3, [sp, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	6163      	str	r3, [r4, #20]
 800640a:	3020      	adds	r0, #32
 800640c:	e7e7      	b.n	80063de <__d2b+0x62>
 800640e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006416:	6030      	str	r0, [r6, #0]
 8006418:	6918      	ldr	r0, [r3, #16]
 800641a:	f7ff fd2f 	bl	8005e7c <__hi0bits>
 800641e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006422:	e7e4      	b.n	80063ee <__d2b+0x72>
 8006424:	08006bb6 	.word	0x08006bb6
 8006428:	08006bc7 	.word	0x08006bc7

0800642c <__sflush_r>:
 800642c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	0716      	lsls	r6, r2, #28
 8006434:	4605      	mov	r5, r0
 8006436:	460c      	mov	r4, r1
 8006438:	d454      	bmi.n	80064e4 <__sflush_r+0xb8>
 800643a:	684b      	ldr	r3, [r1, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	dc02      	bgt.n	8006446 <__sflush_r+0x1a>
 8006440:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	dd48      	ble.n	80064d8 <__sflush_r+0xac>
 8006446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006448:	2e00      	cmp	r6, #0
 800644a:	d045      	beq.n	80064d8 <__sflush_r+0xac>
 800644c:	2300      	movs	r3, #0
 800644e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006452:	682f      	ldr	r7, [r5, #0]
 8006454:	6a21      	ldr	r1, [r4, #32]
 8006456:	602b      	str	r3, [r5, #0]
 8006458:	d030      	beq.n	80064bc <__sflush_r+0x90>
 800645a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	0759      	lsls	r1, r3, #29
 8006460:	d505      	bpl.n	800646e <__sflush_r+0x42>
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006468:	b10b      	cbz	r3, 800646e <__sflush_r+0x42>
 800646a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	4628      	mov	r0, r5
 8006472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	47b0      	blx	r6
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	d106      	bne.n	800648c <__sflush_r+0x60>
 800647e:	6829      	ldr	r1, [r5, #0]
 8006480:	291d      	cmp	r1, #29
 8006482:	d82b      	bhi.n	80064dc <__sflush_r+0xb0>
 8006484:	4a28      	ldr	r2, [pc, #160]	@ (8006528 <__sflush_r+0xfc>)
 8006486:	410a      	asrs	r2, r1
 8006488:	07d6      	lsls	r6, r2, #31
 800648a:	d427      	bmi.n	80064dc <__sflush_r+0xb0>
 800648c:	2200      	movs	r2, #0
 800648e:	6062      	str	r2, [r4, #4]
 8006490:	6922      	ldr	r2, [r4, #16]
 8006492:	04d9      	lsls	r1, r3, #19
 8006494:	6022      	str	r2, [r4, #0]
 8006496:	d504      	bpl.n	80064a2 <__sflush_r+0x76>
 8006498:	1c42      	adds	r2, r0, #1
 800649a:	d101      	bne.n	80064a0 <__sflush_r+0x74>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b903      	cbnz	r3, 80064a2 <__sflush_r+0x76>
 80064a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80064a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064a4:	602f      	str	r7, [r5, #0]
 80064a6:	b1b9      	cbz	r1, 80064d8 <__sflush_r+0xac>
 80064a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064ac:	4299      	cmp	r1, r3
 80064ae:	d002      	beq.n	80064b6 <__sflush_r+0x8a>
 80064b0:	4628      	mov	r0, r5
 80064b2:	f7ff fb3d 	bl	8005b30 <_free_r>
 80064b6:	2300      	movs	r3, #0
 80064b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064ba:	e00d      	b.n	80064d8 <__sflush_r+0xac>
 80064bc:	2301      	movs	r3, #1
 80064be:	4628      	mov	r0, r5
 80064c0:	47b0      	blx	r6
 80064c2:	4602      	mov	r2, r0
 80064c4:	1c50      	adds	r0, r2, #1
 80064c6:	d1c9      	bne.n	800645c <__sflush_r+0x30>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0c6      	beq.n	800645c <__sflush_r+0x30>
 80064ce:	2b1d      	cmp	r3, #29
 80064d0:	d001      	beq.n	80064d6 <__sflush_r+0xaa>
 80064d2:	2b16      	cmp	r3, #22
 80064d4:	d11d      	bne.n	8006512 <__sflush_r+0xe6>
 80064d6:	602f      	str	r7, [r5, #0]
 80064d8:	2000      	movs	r0, #0
 80064da:	e021      	b.n	8006520 <__sflush_r+0xf4>
 80064dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e0:	b21b      	sxth	r3, r3
 80064e2:	e01a      	b.n	800651a <__sflush_r+0xee>
 80064e4:	690f      	ldr	r7, [r1, #16]
 80064e6:	2f00      	cmp	r7, #0
 80064e8:	d0f6      	beq.n	80064d8 <__sflush_r+0xac>
 80064ea:	0793      	lsls	r3, r2, #30
 80064ec:	bf18      	it	ne
 80064ee:	2300      	movne	r3, #0
 80064f0:	680e      	ldr	r6, [r1, #0]
 80064f2:	bf08      	it	eq
 80064f4:	694b      	ldreq	r3, [r1, #20]
 80064f6:	1bf6      	subs	r6, r6, r7
 80064f8:	600f      	str	r7, [r1, #0]
 80064fa:	608b      	str	r3, [r1, #8]
 80064fc:	2e00      	cmp	r6, #0
 80064fe:	ddeb      	ble.n	80064d8 <__sflush_r+0xac>
 8006500:	4633      	mov	r3, r6
 8006502:	463a      	mov	r2, r7
 8006504:	4628      	mov	r0, r5
 8006506:	6a21      	ldr	r1, [r4, #32]
 8006508:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800650c:	47e0      	blx	ip
 800650e:	2800      	cmp	r0, #0
 8006510:	dc07      	bgt.n	8006522 <__sflush_r+0xf6>
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006522:	4407      	add	r7, r0
 8006524:	1a36      	subs	r6, r6, r0
 8006526:	e7e9      	b.n	80064fc <__sflush_r+0xd0>
 8006528:	dfbffffe 	.word	0xdfbffffe

0800652c <_fflush_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	690b      	ldr	r3, [r1, #16]
 8006530:	4605      	mov	r5, r0
 8006532:	460c      	mov	r4, r1
 8006534:	b913      	cbnz	r3, 800653c <_fflush_r+0x10>
 8006536:	2500      	movs	r5, #0
 8006538:	4628      	mov	r0, r5
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	b118      	cbz	r0, 8006546 <_fflush_r+0x1a>
 800653e:	6a03      	ldr	r3, [r0, #32]
 8006540:	b90b      	cbnz	r3, 8006546 <_fflush_r+0x1a>
 8006542:	f7fe f9f5 	bl	8004930 <__sinit>
 8006546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f3      	beq.n	8006536 <_fflush_r+0xa>
 800654e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006550:	07d0      	lsls	r0, r2, #31
 8006552:	d404      	bmi.n	800655e <_fflush_r+0x32>
 8006554:	0599      	lsls	r1, r3, #22
 8006556:	d402      	bmi.n	800655e <_fflush_r+0x32>
 8006558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800655a:	f7fe fc86 	bl	8004e6a <__retarget_lock_acquire_recursive>
 800655e:	4628      	mov	r0, r5
 8006560:	4621      	mov	r1, r4
 8006562:	f7ff ff63 	bl	800642c <__sflush_r>
 8006566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006568:	4605      	mov	r5, r0
 800656a:	07da      	lsls	r2, r3, #31
 800656c:	d4e4      	bmi.n	8006538 <_fflush_r+0xc>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	059b      	lsls	r3, r3, #22
 8006572:	d4e1      	bmi.n	8006538 <_fflush_r+0xc>
 8006574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006576:	f7fe fc79 	bl	8004e6c <__retarget_lock_release_recursive>
 800657a:	e7dd      	b.n	8006538 <_fflush_r+0xc>

0800657c <__swhatbuf_r>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	460c      	mov	r4, r1
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	4615      	mov	r5, r2
 8006586:	2900      	cmp	r1, #0
 8006588:	461e      	mov	r6, r3
 800658a:	b096      	sub	sp, #88	@ 0x58
 800658c:	da0c      	bge.n	80065a8 <__swhatbuf_r+0x2c>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	2100      	movs	r1, #0
 8006592:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006596:	bf14      	ite	ne
 8006598:	2340      	movne	r3, #64	@ 0x40
 800659a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800659e:	2000      	movs	r0, #0
 80065a0:	6031      	str	r1, [r6, #0]
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	b016      	add	sp, #88	@ 0x58
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	466a      	mov	r2, sp
 80065aa:	f000 f849 	bl	8006640 <_fstat_r>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	dbed      	blt.n	800658e <__swhatbuf_r+0x12>
 80065b2:	9901      	ldr	r1, [sp, #4]
 80065b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065bc:	4259      	negs	r1, r3
 80065be:	4159      	adcs	r1, r3
 80065c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c4:	e7eb      	b.n	800659e <__swhatbuf_r+0x22>

080065c6 <__smakebuf_r>:
 80065c6:	898b      	ldrh	r3, [r1, #12]
 80065c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ca:	079d      	lsls	r5, r3, #30
 80065cc:	4606      	mov	r6, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	d507      	bpl.n	80065e2 <__smakebuf_r+0x1c>
 80065d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	2301      	movs	r3, #1
 80065dc:	6163      	str	r3, [r4, #20]
 80065de:	b003      	add	sp, #12
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e2:	466a      	mov	r2, sp
 80065e4:	ab01      	add	r3, sp, #4
 80065e6:	f7ff ffc9 	bl	800657c <__swhatbuf_r>
 80065ea:	9f00      	ldr	r7, [sp, #0]
 80065ec:	4605      	mov	r5, r0
 80065ee:	4639      	mov	r1, r7
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7ff fb0f 	bl	8005c14 <_malloc_r>
 80065f6:	b948      	cbnz	r0, 800660c <__smakebuf_r+0x46>
 80065f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fc:	059a      	lsls	r2, r3, #22
 80065fe:	d4ee      	bmi.n	80065de <__smakebuf_r+0x18>
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	e7e2      	b.n	80065d2 <__smakebuf_r+0xc>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	9b01      	ldr	r3, [sp, #4]
 800661a:	6020      	str	r0, [r4, #0]
 800661c:	b15b      	cbz	r3, 8006636 <__smakebuf_r+0x70>
 800661e:	4630      	mov	r0, r6
 8006620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006624:	f000 f81e 	bl	8006664 <_isatty_r>
 8006628:	b128      	cbz	r0, 8006636 <__smakebuf_r+0x70>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f023 0303 	bic.w	r3, r3, #3
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	431d      	orrs	r5, r3
 800663a:	81a5      	strh	r5, [r4, #12]
 800663c:	e7cf      	b.n	80065de <__smakebuf_r+0x18>
	...

08006640 <_fstat_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	2300      	movs	r3, #0
 8006644:	4d06      	ldr	r5, [pc, #24]	@ (8006660 <_fstat_r+0x20>)
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	f7fa ffb1 	bl	80015b4 <_fstat>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d102      	bne.n	800665c <_fstat_r+0x1c>
 8006656:	682b      	ldr	r3, [r5, #0]
 8006658:	b103      	cbz	r3, 800665c <_fstat_r+0x1c>
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	20000488 	.word	0x20000488

08006664 <_isatty_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	2300      	movs	r3, #0
 8006668:	4d05      	ldr	r5, [pc, #20]	@ (8006680 <_isatty_r+0x1c>)
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fa ffaf 	bl	80015d2 <_isatty>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_isatty_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_isatty_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	20000488 	.word	0x20000488

08006684 <_sbrk_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	2300      	movs	r3, #0
 8006688:	4d05      	ldr	r5, [pc, #20]	@ (80066a0 <_sbrk_r+0x1c>)
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	f7fa ffb6 	bl	8001600 <_sbrk>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	d102      	bne.n	800669e <_sbrk_r+0x1a>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b103      	cbz	r3, 800669e <_sbrk_r+0x1a>
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	20000488 	.word	0x20000488

080066a4 <memcpy>:
 80066a4:	440a      	add	r2, r1
 80066a6:	4291      	cmp	r1, r2
 80066a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ac:	d100      	bne.n	80066b0 <memcpy+0xc>
 80066ae:	4770      	bx	lr
 80066b0:	b510      	push	{r4, lr}
 80066b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b6:	4291      	cmp	r1, r2
 80066b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066bc:	d1f9      	bne.n	80066b2 <memcpy+0xe>
 80066be:	bd10      	pop	{r4, pc}

080066c0 <__assert_func>:
 80066c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066c2:	4614      	mov	r4, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <__assert_func+0x2c>)
 80066c8:	4605      	mov	r5, r0
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68d8      	ldr	r0, [r3, #12]
 80066ce:	b954      	cbnz	r4, 80066e6 <__assert_func+0x26>
 80066d0:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <__assert_func+0x30>)
 80066d2:	461c      	mov	r4, r3
 80066d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066d8:	9100      	str	r1, [sp, #0]
 80066da:	462b      	mov	r3, r5
 80066dc:	4905      	ldr	r1, [pc, #20]	@ (80066f4 <__assert_func+0x34>)
 80066de:	f000 f841 	bl	8006764 <fiprintf>
 80066e2:	f000 f851 	bl	8006788 <abort>
 80066e6:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <__assert_func+0x38>)
 80066e8:	e7f4      	b.n	80066d4 <__assert_func+0x14>
 80066ea:	bf00      	nop
 80066ec:	20000018 	.word	0x20000018
 80066f0:	08006d65 	.word	0x08006d65
 80066f4:	08006d37 	.word	0x08006d37
 80066f8:	08006d2a 	.word	0x08006d2a

080066fc <_calloc_r>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	fba1 5402 	umull	r5, r4, r1, r2
 8006702:	b93c      	cbnz	r4, 8006714 <_calloc_r+0x18>
 8006704:	4629      	mov	r1, r5
 8006706:	f7ff fa85 	bl	8005c14 <_malloc_r>
 800670a:	4606      	mov	r6, r0
 800670c:	b928      	cbnz	r0, 800671a <_calloc_r+0x1e>
 800670e:	2600      	movs	r6, #0
 8006710:	4630      	mov	r0, r6
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	220c      	movs	r2, #12
 8006716:	6002      	str	r2, [r0, #0]
 8006718:	e7f9      	b.n	800670e <_calloc_r+0x12>
 800671a:	462a      	mov	r2, r5
 800671c:	4621      	mov	r1, r4
 800671e:	f7fe fb27 	bl	8004d70 <memset>
 8006722:	e7f5      	b.n	8006710 <_calloc_r+0x14>

08006724 <__ascii_mbtowc>:
 8006724:	b082      	sub	sp, #8
 8006726:	b901      	cbnz	r1, 800672a <__ascii_mbtowc+0x6>
 8006728:	a901      	add	r1, sp, #4
 800672a:	b142      	cbz	r2, 800673e <__ascii_mbtowc+0x1a>
 800672c:	b14b      	cbz	r3, 8006742 <__ascii_mbtowc+0x1e>
 800672e:	7813      	ldrb	r3, [r2, #0]
 8006730:	600b      	str	r3, [r1, #0]
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	1e10      	subs	r0, r2, #0
 8006736:	bf18      	it	ne
 8006738:	2001      	movne	r0, #1
 800673a:	b002      	add	sp, #8
 800673c:	4770      	bx	lr
 800673e:	4610      	mov	r0, r2
 8006740:	e7fb      	b.n	800673a <__ascii_mbtowc+0x16>
 8006742:	f06f 0001 	mvn.w	r0, #1
 8006746:	e7f8      	b.n	800673a <__ascii_mbtowc+0x16>

08006748 <__ascii_wctomb>:
 8006748:	4603      	mov	r3, r0
 800674a:	4608      	mov	r0, r1
 800674c:	b141      	cbz	r1, 8006760 <__ascii_wctomb+0x18>
 800674e:	2aff      	cmp	r2, #255	@ 0xff
 8006750:	d904      	bls.n	800675c <__ascii_wctomb+0x14>
 8006752:	228a      	movs	r2, #138	@ 0x8a
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	4770      	bx	lr
 800675c:	2001      	movs	r0, #1
 800675e:	700a      	strb	r2, [r1, #0]
 8006760:	4770      	bx	lr
	...

08006764 <fiprintf>:
 8006764:	b40e      	push	{r1, r2, r3}
 8006766:	b503      	push	{r0, r1, lr}
 8006768:	4601      	mov	r1, r0
 800676a:	ab03      	add	r3, sp, #12
 800676c:	4805      	ldr	r0, [pc, #20]	@ (8006784 <fiprintf+0x20>)
 800676e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006772:	6800      	ldr	r0, [r0, #0]
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	f000 f835 	bl	80067e4 <_vfiprintf_r>
 800677a:	b002      	add	sp, #8
 800677c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006780:	b003      	add	sp, #12
 8006782:	4770      	bx	lr
 8006784:	20000018 	.word	0x20000018

08006788 <abort>:
 8006788:	2006      	movs	r0, #6
 800678a:	b508      	push	{r3, lr}
 800678c:	f000 f96a 	bl	8006a64 <raise>
 8006790:	2001      	movs	r0, #1
 8006792:	f7fa fedc 	bl	800154e <_exit>

08006796 <__sfputc_r>:
 8006796:	6893      	ldr	r3, [r2, #8]
 8006798:	b410      	push	{r4}
 800679a:	3b01      	subs	r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	6093      	str	r3, [r2, #8]
 80067a0:	da07      	bge.n	80067b2 <__sfputc_r+0x1c>
 80067a2:	6994      	ldr	r4, [r2, #24]
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	db01      	blt.n	80067ac <__sfputc_r+0x16>
 80067a8:	290a      	cmp	r1, #10
 80067aa:	d102      	bne.n	80067b2 <__sfputc_r+0x1c>
 80067ac:	bc10      	pop	{r4}
 80067ae:	f7fe ba4a 	b.w	8004c46 <__swbuf_r>
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	1c58      	adds	r0, r3, #1
 80067b6:	6010      	str	r0, [r2, #0]
 80067b8:	7019      	strb	r1, [r3, #0]
 80067ba:	4608      	mov	r0, r1
 80067bc:	bc10      	pop	{r4}
 80067be:	4770      	bx	lr

080067c0 <__sfputs_r>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	4606      	mov	r6, r0
 80067c4:	460f      	mov	r7, r1
 80067c6:	4614      	mov	r4, r2
 80067c8:	18d5      	adds	r5, r2, r3
 80067ca:	42ac      	cmp	r4, r5
 80067cc:	d101      	bne.n	80067d2 <__sfputs_r+0x12>
 80067ce:	2000      	movs	r0, #0
 80067d0:	e007      	b.n	80067e2 <__sfputs_r+0x22>
 80067d2:	463a      	mov	r2, r7
 80067d4:	4630      	mov	r0, r6
 80067d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067da:	f7ff ffdc 	bl	8006796 <__sfputc_r>
 80067de:	1c43      	adds	r3, r0, #1
 80067e0:	d1f3      	bne.n	80067ca <__sfputs_r+0xa>
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067e4 <_vfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	460d      	mov	r5, r1
 80067ea:	4614      	mov	r4, r2
 80067ec:	4698      	mov	r8, r3
 80067ee:	4606      	mov	r6, r0
 80067f0:	b09d      	sub	sp, #116	@ 0x74
 80067f2:	b118      	cbz	r0, 80067fc <_vfiprintf_r+0x18>
 80067f4:	6a03      	ldr	r3, [r0, #32]
 80067f6:	b90b      	cbnz	r3, 80067fc <_vfiprintf_r+0x18>
 80067f8:	f7fe f89a 	bl	8004930 <__sinit>
 80067fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	d405      	bmi.n	800680e <_vfiprintf_r+0x2a>
 8006802:	89ab      	ldrh	r3, [r5, #12]
 8006804:	059a      	lsls	r2, r3, #22
 8006806:	d402      	bmi.n	800680e <_vfiprintf_r+0x2a>
 8006808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800680a:	f7fe fb2e 	bl	8004e6a <__retarget_lock_acquire_recursive>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	d501      	bpl.n	8006818 <_vfiprintf_r+0x34>
 8006814:	692b      	ldr	r3, [r5, #16]
 8006816:	b99b      	cbnz	r3, 8006840 <_vfiprintf_r+0x5c>
 8006818:	4629      	mov	r1, r5
 800681a:	4630      	mov	r0, r6
 800681c:	f7fe fa52 	bl	8004cc4 <__swsetup_r>
 8006820:	b170      	cbz	r0, 8006840 <_vfiprintf_r+0x5c>
 8006822:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006824:	07dc      	lsls	r4, r3, #31
 8006826:	d504      	bpl.n	8006832 <_vfiprintf_r+0x4e>
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	b01d      	add	sp, #116	@ 0x74
 800682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	0598      	lsls	r0, r3, #22
 8006836:	d4f7      	bmi.n	8006828 <_vfiprintf_r+0x44>
 8006838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800683a:	f7fe fb17 	bl	8004e6c <__retarget_lock_release_recursive>
 800683e:	e7f3      	b.n	8006828 <_vfiprintf_r+0x44>
 8006840:	2300      	movs	r3, #0
 8006842:	9309      	str	r3, [sp, #36]	@ 0x24
 8006844:	2320      	movs	r3, #32
 8006846:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800684a:	2330      	movs	r3, #48	@ 0x30
 800684c:	f04f 0901 	mov.w	r9, #1
 8006850:	f8cd 800c 	str.w	r8, [sp, #12]
 8006854:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006a00 <_vfiprintf_r+0x21c>
 8006858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800685c:	4623      	mov	r3, r4
 800685e:	469a      	mov	sl, r3
 8006860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006864:	b10a      	cbz	r2, 800686a <_vfiprintf_r+0x86>
 8006866:	2a25      	cmp	r2, #37	@ 0x25
 8006868:	d1f9      	bne.n	800685e <_vfiprintf_r+0x7a>
 800686a:	ebba 0b04 	subs.w	fp, sl, r4
 800686e:	d00b      	beq.n	8006888 <_vfiprintf_r+0xa4>
 8006870:	465b      	mov	r3, fp
 8006872:	4622      	mov	r2, r4
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ffa2 	bl	80067c0 <__sfputs_r>
 800687c:	3001      	adds	r0, #1
 800687e:	f000 80a7 	beq.w	80069d0 <_vfiprintf_r+0x1ec>
 8006882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006884:	445a      	add	r2, fp
 8006886:	9209      	str	r2, [sp, #36]	@ 0x24
 8006888:	f89a 3000 	ldrb.w	r3, [sl]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 809f 	beq.w	80069d0 <_vfiprintf_r+0x1ec>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689c:	f10a 0a01 	add.w	sl, sl, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80068aa:	4654      	mov	r4, sl
 80068ac:	2205      	movs	r2, #5
 80068ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b2:	4853      	ldr	r0, [pc, #332]	@ (8006a00 <_vfiprintf_r+0x21c>)
 80068b4:	f7fe fadb 	bl	8004e6e <memchr>
 80068b8:	9a04      	ldr	r2, [sp, #16]
 80068ba:	b9d8      	cbnz	r0, 80068f4 <_vfiprintf_r+0x110>
 80068bc:	06d1      	lsls	r1, r2, #27
 80068be:	bf44      	itt	mi
 80068c0:	2320      	movmi	r3, #32
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c6:	0713      	lsls	r3, r2, #28
 80068c8:	bf44      	itt	mi
 80068ca:	232b      	movmi	r3, #43	@ 0x2b
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d0:	f89a 3000 	ldrb.w	r3, [sl]
 80068d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d6:	d015      	beq.n	8006904 <_vfiprintf_r+0x120>
 80068d8:	4654      	mov	r4, sl
 80068da:	2000      	movs	r0, #0
 80068dc:	f04f 0c0a 	mov.w	ip, #10
 80068e0:	9a07      	ldr	r2, [sp, #28]
 80068e2:	4621      	mov	r1, r4
 80068e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068e8:	3b30      	subs	r3, #48	@ 0x30
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d94b      	bls.n	8006986 <_vfiprintf_r+0x1a2>
 80068ee:	b1b0      	cbz	r0, 800691e <_vfiprintf_r+0x13a>
 80068f0:	9207      	str	r2, [sp, #28]
 80068f2:	e014      	b.n	800691e <_vfiprintf_r+0x13a>
 80068f4:	eba0 0308 	sub.w	r3, r0, r8
 80068f8:	fa09 f303 	lsl.w	r3, r9, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	46a2      	mov	sl, r4
 8006900:	9304      	str	r3, [sp, #16]
 8006902:	e7d2      	b.n	80068aa <_vfiprintf_r+0xc6>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1d19      	adds	r1, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	9103      	str	r1, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbb      	ittet	lt
 8006910:	425b      	neglt	r3, r3
 8006912:	f042 0202 	orrlt.w	r2, r2, #2
 8006916:	9307      	strge	r3, [sp, #28]
 8006918:	9307      	strlt	r3, [sp, #28]
 800691a:	bfb8      	it	lt
 800691c:	9204      	strlt	r2, [sp, #16]
 800691e:	7823      	ldrb	r3, [r4, #0]
 8006920:	2b2e      	cmp	r3, #46	@ 0x2e
 8006922:	d10a      	bne.n	800693a <_vfiprintf_r+0x156>
 8006924:	7863      	ldrb	r3, [r4, #1]
 8006926:	2b2a      	cmp	r3, #42	@ 0x2a
 8006928:	d132      	bne.n	8006990 <_vfiprintf_r+0x1ac>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	3402      	adds	r4, #2
 800692e:	1d1a      	adds	r2, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	9203      	str	r2, [sp, #12]
 8006934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006938:	9305      	str	r3, [sp, #20]
 800693a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006a04 <_vfiprintf_r+0x220>
 800693e:	2203      	movs	r2, #3
 8006940:	4650      	mov	r0, sl
 8006942:	7821      	ldrb	r1, [r4, #0]
 8006944:	f7fe fa93 	bl	8004e6e <memchr>
 8006948:	b138      	cbz	r0, 800695a <_vfiprintf_r+0x176>
 800694a:	2240      	movs	r2, #64	@ 0x40
 800694c:	9b04      	ldr	r3, [sp, #16]
 800694e:	eba0 000a 	sub.w	r0, r0, sl
 8006952:	4082      	lsls	r2, r0
 8006954:	4313      	orrs	r3, r2
 8006956:	3401      	adds	r4, #1
 8006958:	9304      	str	r3, [sp, #16]
 800695a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695e:	2206      	movs	r2, #6
 8006960:	4829      	ldr	r0, [pc, #164]	@ (8006a08 <_vfiprintf_r+0x224>)
 8006962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006966:	f7fe fa82 	bl	8004e6e <memchr>
 800696a:	2800      	cmp	r0, #0
 800696c:	d03f      	beq.n	80069ee <_vfiprintf_r+0x20a>
 800696e:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <_vfiprintf_r+0x228>)
 8006970:	bb1b      	cbnz	r3, 80069ba <_vfiprintf_r+0x1d6>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	3307      	adds	r3, #7
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	3308      	adds	r3, #8
 800697c:	9303      	str	r3, [sp, #12]
 800697e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006980:	443b      	add	r3, r7
 8006982:	9309      	str	r3, [sp, #36]	@ 0x24
 8006984:	e76a      	b.n	800685c <_vfiprintf_r+0x78>
 8006986:	460c      	mov	r4, r1
 8006988:	2001      	movs	r0, #1
 800698a:	fb0c 3202 	mla	r2, ip, r2, r3
 800698e:	e7a8      	b.n	80068e2 <_vfiprintf_r+0xfe>
 8006990:	2300      	movs	r3, #0
 8006992:	f04f 0c0a 	mov.w	ip, #10
 8006996:	4619      	mov	r1, r3
 8006998:	3401      	adds	r4, #1
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	4620      	mov	r0, r4
 800699e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a2:	3a30      	subs	r2, #48	@ 0x30
 80069a4:	2a09      	cmp	r2, #9
 80069a6:	d903      	bls.n	80069b0 <_vfiprintf_r+0x1cc>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0c6      	beq.n	800693a <_vfiprintf_r+0x156>
 80069ac:	9105      	str	r1, [sp, #20]
 80069ae:	e7c4      	b.n	800693a <_vfiprintf_r+0x156>
 80069b0:	4604      	mov	r4, r0
 80069b2:	2301      	movs	r3, #1
 80069b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b8:	e7f0      	b.n	800699c <_vfiprintf_r+0x1b8>
 80069ba:	ab03      	add	r3, sp, #12
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	462a      	mov	r2, r5
 80069c0:	4630      	mov	r0, r6
 80069c2:	4b13      	ldr	r3, [pc, #76]	@ (8006a10 <_vfiprintf_r+0x22c>)
 80069c4:	a904      	add	r1, sp, #16
 80069c6:	f7fd fb69 	bl	800409c <_printf_float>
 80069ca:	4607      	mov	r7, r0
 80069cc:	1c78      	adds	r0, r7, #1
 80069ce:	d1d6      	bne.n	800697e <_vfiprintf_r+0x19a>
 80069d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d2:	07d9      	lsls	r1, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_vfiprintf_r+0x1fe>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	059a      	lsls	r2, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_vfiprintf_r+0x1fe>
 80069dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069de:	f7fe fa45 	bl	8004e6c <__retarget_lock_release_recursive>
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	065b      	lsls	r3, r3, #25
 80069e6:	f53f af1f 	bmi.w	8006828 <_vfiprintf_r+0x44>
 80069ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069ec:	e71e      	b.n	800682c <_vfiprintf_r+0x48>
 80069ee:	ab03      	add	r3, sp, #12
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	462a      	mov	r2, r5
 80069f4:	4630      	mov	r0, r6
 80069f6:	4b06      	ldr	r3, [pc, #24]	@ (8006a10 <_vfiprintf_r+0x22c>)
 80069f8:	a904      	add	r1, sp, #16
 80069fa:	f7fd fded 	bl	80045d8 <_printf_i>
 80069fe:	e7e4      	b.n	80069ca <_vfiprintf_r+0x1e6>
 8006a00:	08006e67 	.word	0x08006e67
 8006a04:	08006e6d 	.word	0x08006e6d
 8006a08:	08006e71 	.word	0x08006e71
 8006a0c:	0800409d 	.word	0x0800409d
 8006a10:	080067c1 	.word	0x080067c1

08006a14 <_raise_r>:
 8006a14:	291f      	cmp	r1, #31
 8006a16:	b538      	push	{r3, r4, r5, lr}
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	d904      	bls.n	8006a28 <_raise_r+0x14>
 8006a1e:	2316      	movs	r3, #22
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a2a:	b112      	cbz	r2, 8006a32 <_raise_r+0x1e>
 8006a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a30:	b94b      	cbnz	r3, 8006a46 <_raise_r+0x32>
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f830 	bl	8006a98 <_getpid_r>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a42:	f000 b817 	b.w	8006a74 <_kill_r>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d00a      	beq.n	8006a60 <_raise_r+0x4c>
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	d103      	bne.n	8006a56 <_raise_r+0x42>
 8006a4e:	2316      	movs	r3, #22
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	2001      	movs	r0, #1
 8006a54:	e7e7      	b.n	8006a26 <_raise_r+0x12>
 8006a56:	2100      	movs	r1, #0
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006a5e:	4798      	blx	r3
 8006a60:	2000      	movs	r0, #0
 8006a62:	e7e0      	b.n	8006a26 <_raise_r+0x12>

08006a64 <raise>:
 8006a64:	4b02      	ldr	r3, [pc, #8]	@ (8006a70 <raise+0xc>)
 8006a66:	4601      	mov	r1, r0
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f7ff bfd3 	b.w	8006a14 <_raise_r>
 8006a6e:	bf00      	nop
 8006a70:	20000018 	.word	0x20000018

08006a74 <_kill_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	2300      	movs	r3, #0
 8006a78:	4d06      	ldr	r5, [pc, #24]	@ (8006a94 <_kill_r+0x20>)
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f7fa fd54 	bl	800152e <_kill>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d102      	bne.n	8006a90 <_kill_r+0x1c>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	b103      	cbz	r3, 8006a90 <_kill_r+0x1c>
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	20000488 	.word	0x20000488

08006a98 <_getpid_r>:
 8006a98:	f7fa bd42 	b.w	8001520 <_getpid>

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
