
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cbc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08007dd0  08007dd0  00017dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008280  08008280  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008280  08008280  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08008288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b4  200001fc  08008484  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b0  08008484  000223b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b96d  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0b  00000000  00000000  0002bbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002d8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fa1  00000000  00000000  0002ec92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5b4  00000000  00000000  00046c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086e16  00000000  00000000  000541e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f38  00000000  00000000  000db000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000def38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007db4 	.word	0x08007db4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08007db4 	.word	0x08007db4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <LCD_SendInternal>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//LCD ============================================
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	71bb      	strb	r3, [r7, #6]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4822      	ldr	r0, [pc, #136]	; (8000b44 <LCD_SendInternal+0xa8>)
 8000aba:	f002 fb39 	bl	8003130 <HAL_I2C_IsDeviceReady>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d000      	beq.n	8000aca <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ac8:	e7f1      	b.n	8000aae <LCD_SendInternal+0x12>
			break;
 8000aca:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 8000ada:	7bba      	ldrb	r2, [r7, #14]
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f043 030c 	orr.w	r3, r3, #12
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | LCD_BACKLIGHT;
 8000aea:	7bba      	ldrb	r2, [r7, #14]
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 8000afa:	7b7a      	ldrb	r2, [r7, #13]
 8000afc:	797b      	ldrb	r3, [r7, #5]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f043 030c 	orr.w	r3, r3, #12
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | LCD_BACKLIGHT;
 8000b0a:	7b7a      	ldrb	r2, [r7, #13]
 8000b0c:	797b      	ldrb	r3, [r7, #5]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	b299      	uxth	r1, r3
 8000b1e:	f107 0208 	add.w	r2, r7, #8
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2304      	movs	r3, #4
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <LCD_SendInternal+0xa8>)
 8000b2c:	f002 fa02 	bl	8002f34 <HAL_I2C_Master_Transmit>
 8000b30:	4603      	mov	r3, r0
 8000b32:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000b34:	2005      	movs	r0, #5
 8000b36:	f001 fb19 	bl	800216c <HAL_Delay>
	return res;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000218 	.word	0x20000218

08000b48 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000b58:	79b9      	ldrb	r1, [r7, #6]
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff9c 	bl	8000a9c <LCD_SendInternal>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8000b7c:	79b9      	ldrb	r1, [r7, #6]
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff8a 	bl	8000a9c <LCD_SendInternal>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0x30);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2130      	movs	r1, #48	; 0x30
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffd2 	bl	8000b48 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0x02);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffcd 	bl	8000b48 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	210c      	movs	r1, #12
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffc8 	bl	8000b48 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ffc3 	bl	8000b48 <LCD_SendCommand>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	6039      	str	r1, [r7, #0]
 8000bd4:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000bd6:	e009      	b.n	8000bec <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffc3 	bl	8000b6c <LCD_SendData>
		str++;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f1      	bne.n	8000bd8 <LCD_SendString+0xe>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	603a      	str	r2, [r7, #0]
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8000c1c:	7afa      	ldrb	r2, [r7, #11]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff90 	bl	8000b48 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	e00b      	b.n	8000c46 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff96 	bl	8000b6c <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3301      	adds	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b07      	cmp	r3, #7
 8000c4a:	ddf0      	ble.n	8000c2e <LCD_SET_CGRAM+0x30>
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <LCD_Write_Info>:

void LCD_Write_Info(struct DataFlash nowData, struct DataFlash nextData){
 8000c56:	b084      	sub	sp, #16
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	f107 0c10 	add.w	ip, r7, #16
 8000c62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8000c66:	2101      	movs	r1, #1
 8000c68:	204e      	movs	r0, #78	; 0x4e
 8000c6a:	f7ff ff6d 	bl	8000b48 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	204e      	movs	r0, #78	; 0x4e
 8000c72:	f7ff ff69 	bl	8000b48 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 8000c76:	f107 0315 	add.w	r3, r7, #21
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	204e      	movs	r0, #78	; 0x4e
 8000c7e:	f7ff ffa4 	bl	8000bca <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	204e      	movs	r0, #78	; 0x4e
 8000c86:	f7ff ff71 	bl	8000b6c <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e006      	b.n	8000c9e <LCD_Write_Info+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000c90:	2114      	movs	r1, #20
 8000c92:	204e      	movs	r0, #78	; 0x4e
 8000c94:	f7ff ff58 	bl	8000b48 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0a      	cmp	r3, #10
 8000ca2:	ddf5      	ble.n	8000c90 <LCD_Write_Info+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	204e      	movs	r0, #78	; 0x4e
 8000ca8:	f7ff ff60 	bl	8000b6c <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8000cac:	21c0      	movs	r1, #192	; 0xc0
 8000cae:	204e      	movs	r0, #78	; 0x4e
 8000cb0:	f7ff ff4a 	bl	8000b48 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	204e      	movs	r0, #78	; 0x4e
 8000cb8:	f7ff ff58 	bl	8000b6c <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 8000cbc:	f107 031a 	add.w	r3, r7, #26
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	204e      	movs	r0, #78	; 0x4e
 8000cc4:	f7ff ff81 	bl	8000bca <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 8000cc8:	2103      	movs	r1, #3
 8000cca:	204e      	movs	r0, #78	; 0x4e
 8000ccc:	f7ff ff4e 	bl	8000b6c <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	204e      	movs	r0, #78	; 0x4e
 8000cd4:	f7ff ff4a 	bl	8000b6c <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8000cd8:	2103      	movs	r1, #3
 8000cda:	204e      	movs	r0, #78	; 0x4e
 8000cdc:	f7ff ff46 	bl	8000b6c <LCD_SendData>
	LCD_SendString(LCD_ADDR, nextData.busStopID);
 8000ce0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ce4:	330a      	adds	r3, #10
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	204e      	movs	r0, #78	; 0x4e
 8000cea:	f7ff ff6e 	bl	8000bca <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	e006      	b.n	8000d02 <LCD_Write_Info+0xac>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000cf4:	2114      	movs	r1, #20
 8000cf6:	204e      	movs	r0, #78	; 0x4e
 8000cf8:	f7ff ff26 	bl	8000b48 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	ddf5      	ble.n	8000cf4 <LCD_Write_Info+0x9e>
	}
	LCD_SendData(LCD_ADDR, 1);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	204e      	movs	r0, #78	; 0x4e
 8000d0c:	f7ff ff2e 	bl	8000b6c <LCD_SendData>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d1a:	b004      	add	sp, #16
 8000d1c:	4770      	bx	lr
	...

08000d20 <Flash_Unlock>:
//Flash===========================================================


int dataIdx = 0;

void Flash_Unlock(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;  // Key1
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <Flash_Unlock+0x18>)
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <Flash_Unlock+0x1c>)
 8000d28:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;  // Key2
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <Flash_Unlock+0x18>)
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <Flash_Unlock+0x20>)
 8000d2e:	605a      	str	r2, [r3, #4]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	45670123 	.word	0x45670123
 8000d40:	cdef89ab 	.word	0xcdef89ab

08000d44 <Flash_Lock>:

void Flash_Lock(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <Flash_Lock+0x18>)
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <Flash_Lock+0x18>)
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d52:	6113      	str	r3, [r2, #16]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40022000 	.word	0x40022000

08000d60 <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t data) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
	while (FLASH->SR & FLASH_SR_BSY)
 8000d6c:	bf00      	nop
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <Flash_Write+0x54>)
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f9      	bne.n	8000d6e <Flash_Write+0xe>
		;  // Busy flag 체크

	FLASH->CR |= FLASH_CR_PG;  // Programming mode ?��?��
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <Flash_Write+0x54>)
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <Flash_Write+0x54>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*) address = data;  // ?��?��?�� 기록
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	801a      	strh	r2, [r3, #0]

	while (FLASH->SR & FLASH_SR_BSY)
 8000d8e:	bf00      	nop
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <Flash_Write+0x54>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f9      	bne.n	8000d90 <Flash_Write+0x30>
		;  // Busy flag 체크

	FLASH->CR &= ~FLASH_CR_PG;  // Programming mode ?��?��
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <Flash_Write+0x54>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <Flash_Write+0x54>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6113      	str	r3, [r2, #16]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40022000 	.word	0x40022000

08000db8 <Flash_Write_Char>:
	uint16_t value = (uint16_t) strtol((const char*) StrData, NULL, 10);
	Flash_Write(address, value);  // ?��?�� 값을 ?��?��?�� 메모리에 ???��
	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
}

uint32_t Flash_Write_Char(uint32_t address, uint8_t CharData){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
	Flash_Unlock();
 8000dc4:	f7ff ffac 	bl	8000d20 <Flash_Unlock>
	Flash_Write(address, CharData);
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ffc7 	bl	8000d60 <Flash_Write>
	Flash_Lock();
 8000dd2:	f7ff ffb7 	bl	8000d44 <Flash_Lock>
	return address+0x02;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3302      	adds	r3, #2
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Flash_Write_Str>:

uint32_t Flash_Write_Str(uint32_t address, uint8_t *StrData){
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<strlen((char *)StrData);i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e00b      	b.n	8000e0a <Flash_Write_Str+0x28>
		address = Flash_Write_Char(address, StrData[i]);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ffdb 	bl	8000db8 <Flash_Write_Char>
 8000e02:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<strlen((char *)StrData);i++){
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	6838      	ldr	r0, [r7, #0]
 8000e0c:	f7ff f9aa 	bl	8000164 <strlen>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8ec      	bhi.n	8000df2 <Flash_Write_Str+0x10>
	}
	//printf("%x\r\n", address);
	return address;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t address, uint8_t *StrData) {
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	b09a      	sub	sp, #104	; 0x68
 8000e2a:	af16      	add	r7, sp, #88	; 0x58
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
	char *token;

	token = strtok(StrData, ",");
 8000e30:	49ac      	ldr	r1, [pc, #688]	; (80010e4 <Flash_Write_Data+0x2c0>)
 8000e32:	6838      	ldr	r0, [r7, #0]
 8000e34:	f005 f8bc 	bl	8005fb0 <strtok>
 8000e38:	60f8      	str	r0, [r7, #12]
	if (token[0] == 'D') {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b44      	cmp	r3, #68	; 0x44
 8000e40:	f040 8095 	bne.w	8000f6e <Flash_Write_Data+0x14a>
		token = strtok(NULL, ",");
 8000e44:	49a7      	ldr	r1, [pc, #668]	; (80010e4 <Flash_Write_Data+0x2c0>)
 8000e46:	2000      	movs	r0, #0
 8000e48:	f005 f8b2 	bl	8005fb0 <strtok>
 8000e4c:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d026      	beq.n	8000ea2 <Flash_Write_Data+0x7e>
			strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8000e54:	4ba4      	ldr	r3, [pc, #656]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2232      	movs	r2, #50	; 0x32
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	4aa3      	ldr	r2, [pc, #652]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000e60:	4413      	add	r3, r2
 8000e62:	2204      	movs	r2, #4
 8000e64:	68f9      	ldr	r1, [r7, #12]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 f88e 	bl	8005f88 <strncpy>
			data[dataIdx].busNM[sizeof(data[dataIdx].busNM) - 1] = '\0';
 8000e6c:	4b9e      	ldr	r3, [pc, #632]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a9e      	ldr	r2, [pc, #632]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000e72:	2132      	movs	r1, #50	; 0x32
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busNM);
 8000e80:	4b99      	ldr	r3, [pc, #612]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2232      	movs	r2, #50	; 0x32
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	4a98      	ldr	r2, [pc, #608]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ffa6 	bl	8000de2 <Flash_Write_Str>
 8000e96:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8000e98:	212c      	movs	r1, #44	; 0x2c
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff8c 	bl	8000db8 <Flash_Write_Char>
 8000ea0:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8000ea2:	4990      	ldr	r1, [pc, #576]	; (80010e4 <Flash_Write_Data+0x2c0>)
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f005 f883 	bl	8005fb0 <strtok>
 8000eaa:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d028      	beq.n	8000f04 <Flash_Write_Data+0xe0>
			strncpy(data[dataIdx].busRouteno, token, sizeof(data[dataIdx].busRouteno) - 1);
 8000eb2:	4b8d      	ldr	r3, [pc, #564]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2232      	movs	r2, #50	; 0x32
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a8b      	ldr	r2, [pc, #556]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3305      	adds	r3, #5
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f005 f85e 	bl	8005f88 <strncpy>
			data[dataIdx].busRouteno[sizeof(data[dataIdx].busRouteno) - 1] = '\0';
 8000ecc:	4b86      	ldr	r3, [pc, #536]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a86      	ldr	r2, [pc, #536]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000ed2:	2132      	movs	r1, #50	; 0x32
 8000ed4:	fb01 f303 	mul.w	r3, r1, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	3309      	adds	r3, #9
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busRouteno);
 8000ee0:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2232      	movs	r2, #50	; 0x32
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	4a80      	ldr	r2, [pc, #512]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000eec:	4413      	add	r3, r2
 8000eee:	3305      	adds	r3, #5
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff75 	bl	8000de2 <Flash_Write_Str>
 8000ef8:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8000efa:	212c      	movs	r1, #44	; 0x2c
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff5b 	bl	8000db8 <Flash_Write_Char>
 8000f02:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8000f04:	4977      	ldr	r1, [pc, #476]	; (80010e4 <Flash_Write_Data+0x2c0>)
 8000f06:	2000      	movs	r0, #0
 8000f08:	f005 f852 	bl	8005fb0 <strtok>
 8000f0c:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80e0 	beq.w	80010d6 <Flash_Write_Data+0x2b2>
			strncpy(data[dataIdx].busStopID, token, sizeof(data[dataIdx].busStopID) - 1);
 8000f16:	4b74      	ldr	r3, [pc, #464]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2232      	movs	r2, #50	; 0x32
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	3308      	adds	r3, #8
 8000f22:	4a72      	ldr	r2, [pc, #456]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3302      	adds	r3, #2
 8000f28:	2207      	movs	r2, #7
 8000f2a:	68f9      	ldr	r1, [r7, #12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 f82b 	bl	8005f88 <strncpy>
			data[dataIdx].busStopID[sizeof(data[dataIdx].busStopID) - 1] = '\0';
 8000f32:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6d      	ldr	r2, [pc, #436]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000f38:	2132      	movs	r1, #50	; 0x32
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	3311      	adds	r3, #17
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busStopID);
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2232      	movs	r2, #50	; 0x32
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	3308      	adds	r3, #8
 8000f52:	4a66      	ldr	r2, [pc, #408]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000f54:	4413      	add	r3, r2
 8000f56:	3302      	adds	r3, #2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff41 	bl	8000de2 <Flash_Write_Str>
 8000f60:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8000f62:	212c      	movs	r1, #44	; 0x2c
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff27 	bl	8000db8 <Flash_Write_Char>
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	e0b3      	b.n	80010d6 <Flash_Write_Data+0x2b2>
		}
	} else {
		token = strtok(NULL, ",");
 8000f6e:	495d      	ldr	r1, [pc, #372]	; (80010e4 <Flash_Write_Data+0x2c0>)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f005 f81d 	bl	8005fb0 <strtok>
 8000f76:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d02a      	beq.n	8000fd4 <Flash_Write_Data+0x1b0>
			strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2232      	movs	r2, #50	; 0x32
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	3310      	adds	r3, #16
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fff7 	bl	8005f88 <strncpy>
			data[dataIdx].lati[sizeof(data[dataIdx].lati) - 1] = '\0';
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a53      	ldr	r2, [pc, #332]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000fa0:	2132      	movs	r1, #50	; 0x32
 8000fa2:	fb01 f303 	mul.w	r3, r1, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3321      	adds	r3, #33	; 0x21
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].lati);
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2232      	movs	r2, #50	; 0x32
 8000fb4:	fb02 f303 	mul.w	r3, r2, r3
 8000fb8:	3310      	adds	r3, #16
 8000fba:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff0d 	bl	8000de2 <Flash_Write_Str>
 8000fc8:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8000fca:	212c      	movs	r1, #44	; 0x2c
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fef3 	bl	8000db8 <Flash_Write_Char>
 8000fd2:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8000fd4:	4943      	ldr	r1, [pc, #268]	; (80010e4 <Flash_Write_Data+0x2c0>)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f004 ffea 	bl	8005fb0 <strtok>
 8000fdc:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d02a      	beq.n	800103a <Flash_Write_Data+0x216>
			strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2232      	movs	r2, #50	; 0x32
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	3320      	adds	r3, #32
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <Flash_Write_Data+0x2c8>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	68f9      	ldr	r1, [r7, #12]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 ffc4 	bl	8005f88 <strncpy>
			data[dataIdx].longi[sizeof(data[dataIdx].longi) - 1] = '\0';
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a39      	ldr	r2, [pc, #228]	; (80010ec <Flash_Write_Data+0x2c8>)
 8001006:	2132      	movs	r1, #50	; 0x32
 8001008:	fb01 f303 	mul.w	r3, r1, r3
 800100c:	4413      	add	r3, r2
 800100e:	3331      	adds	r3, #49	; 0x31
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].longi);
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	3320      	adds	r3, #32
 8001020:	4a32      	ldr	r2, [pc, #200]	; (80010ec <Flash_Write_Data+0x2c8>)
 8001022:	4413      	add	r3, r2
 8001024:	3302      	adds	r3, #2
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff feda 	bl	8000de2 <Flash_Write_Str>
 800102e:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, '!');
 8001030:	2121      	movs	r1, #33	; 0x21
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fec0 	bl	8000db8 <Flash_Write_Char>
 8001038:	6078      	str	r0, [r7, #4]
		}
		dataIdx += 1;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <Flash_Write_Data+0x2c4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8001042:	6013      	str	r3, [r2, #0]
		if (dataIdx ==2){
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <Flash_Write_Data+0x2c4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d144      	bne.n	80010d6 <Flash_Write_Data+0x2b2>
			LCD_Write_Info(data[nowIdx], data[nowIdx+1]);
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <Flash_Write_Data+0x2cc>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <Flash_Write_Data+0x2cc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4925      	ldr	r1, [pc, #148]	; (80010ec <Flash_Write_Data+0x2c8>)
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	fb00 f202 	mul.w	r2, r0, r2
 800105e:	188c      	adds	r4, r1, r2
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <Flash_Write_Data+0x2c8>)
 8001062:	2132      	movs	r1, #50	; 0x32
 8001064:	fb01 f303 	mul.w	r3, r1, r3
 8001068:	4413      	add	r3, r2
 800106a:	461d      	mov	r5, r3
 800106c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8001070:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001074:	4666      	mov	r6, ip
 8001076:	462b      	mov	r3, r5
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001082:	3510      	adds	r5, #16
 8001084:	f10c 0c10 	add.w	ip, ip, #16
 8001088:	4575      	cmp	r5, lr
 800108a:	d1f3      	bne.n	8001074 <Flash_Write_Data+0x250>
 800108c:	4662      	mov	r2, ip
 800108e:	462b      	mov	r3, r5
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	8013      	strh	r3, [r2, #0]
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	469a      	mov	sl, r3
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	4699      	mov	r9, r3
 800109c:	68a3      	ldr	r3, [r4, #8]
 800109e:	4698      	mov	r8, r3
 80010a0:	68e3      	ldr	r3, [r4, #12]
 80010a2:	469e      	mov	lr, r3
 80010a4:	3410      	adds	r4, #16
 80010a6:	466e      	mov	r6, sp
 80010a8:	f104 0c20 	add.w	ip, r4, #32
 80010ac:	4635      	mov	r5, r6
 80010ae:	4623      	mov	r3, r4
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ba:	3410      	adds	r4, #16
 80010bc:	3610      	adds	r6, #16
 80010be:	4564      	cmp	r4, ip
 80010c0:	d1f4      	bne.n	80010ac <Flash_Write_Data+0x288>
 80010c2:	4632      	mov	r2, r6
 80010c4:	4623      	mov	r3, r4
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	8013      	strh	r3, [r2, #0]
 80010ca:	4650      	mov	r0, sl
 80010cc:	4649      	mov	r1, r9
 80010ce:	4642      	mov	r2, r8
 80010d0:	4673      	mov	r3, lr
 80010d2:	f7ff fdc0 	bl	8000c56 <LCD_Write_Info>
		}
	}
//	printf("busNM:%s, busRouteNo:%s, BusStopID:%s, lati:%s, longi:%s\r\n",
//			data.busNM, data.busRouteno, data.busStopID, data.lati, data.longi);
	return address;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	bf00      	nop
 80010e4:	08007dd0 	.word	0x08007dd0
 80010e8:	200020d8 	.word	0x200020d8
 80010ec:	20000388 	.word	0x20000388
 80010f0:	200020d4 	.word	0x200020d4

080010f4 <Flash_Read>:

uint16_t Flash_Read(uint32_t address) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) address; // �???��?�� ?��?��?�� 메모�?? 주소?��?�� ?��?��?�� ?���??
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b29b      	uxth	r3, r3
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <Flash_Erase_Page>:

void Flash_Erase_Page(uint32_t address) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	Flash_Unlock();  // ?��?��?�� 메모�?? ?��?��
 8001114:	f7ff fe04 	bl	8000d20 <Flash_Unlock>

	FLASH->CR |= FLASH_CR_PER;   // Page Erase 비트 ?��?��
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <Flash_Erase_Page+0x50>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	4a0f      	ldr	r2, [pc, #60]	; (800115c <Flash_Erase_Page+0x50>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	6113      	str	r3, [r2, #16]
	FLASH->AR = address;         // �???�� ?��?���???�� 주소 ?��?��
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <Flash_Erase_Page+0x50>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;  // Erase ?��?��
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <Flash_Erase_Page+0x50>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <Flash_Erase_Page+0x50>)
 8001130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001134:	6113      	str	r3, [r2, #16]

	while (FLASH->SR & FLASH_SR_BSY)
 8001136:	bf00      	nop
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <Flash_Erase_Page+0x50>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <Flash_Erase_Page+0x2c>
		;  // ?��?��?�� ?��료될 ?��까�? ??�??

	FLASH->CR &= ~FLASH_CR_PER;  // Page Erase 비트 ?��?��
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <Flash_Erase_Page+0x50>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <Flash_Erase_Page+0x50>)
 800114a:	f023 0302 	bic.w	r3, r3, #2
 800114e:	6113      	str	r3, [r2, #16]

	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
 8001150:	f7ff fdf8 	bl	8000d44 <Flash_Lock>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40022000 	.word	0x40022000

08001160 <splitData>:

void splitData(char* strData){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	char *token;

	token = strtok(strData, ","); // CarNM
 8001168:	492f      	ldr	r1, [pc, #188]	; (8001228 <splitData+0xc8>)
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f004 ff20 	bl	8005fb0 <strtok>
 8001170:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <splitData+0xcc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2232      	movs	r2, #50	; 0x32
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <splitData+0xd0>)
 800117e:	4413      	add	r3, r2
 8001180:	2204      	movs	r2, #4
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	4618      	mov	r0, r3
 8001186:	f004 feff 	bl	8005f88 <strncpy>

	token = strtok(NULL, ","); // RouteNo
 800118a:	4927      	ldr	r1, [pc, #156]	; (8001228 <splitData+0xc8>)
 800118c:	2000      	movs	r0, #0
 800118e:	f004 ff0f 	bl	8005fb0 <strtok>
 8001192:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busRouteno, token, sizeof(data[dataIdx].busRouteno) - 1);
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <splitData+0xcc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2232      	movs	r2, #50	; 0x32
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <splitData+0xd0>)
 80011a0:	4413      	add	r3, r2
 80011a2:	3305      	adds	r3, #5
 80011a4:	2204      	movs	r2, #4
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 feed 	bl	8005f88 <strncpy>

	token = strtok(NULL, ","); // StopID
 80011ae:	491e      	ldr	r1, [pc, #120]	; (8001228 <splitData+0xc8>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f004 fefd 	bl	8005fb0 <strtok>
 80011b6:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busStopID, token, sizeof(data[dataIdx].busStopID) - 1);
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <splitData+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2232      	movs	r2, #50	; 0x32
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	3308      	adds	r3, #8
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <splitData+0xd0>)
 80011c6:	4413      	add	r3, r2
 80011c8:	3302      	adds	r3, #2
 80011ca:	2207      	movs	r2, #7
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 feda 	bl	8005f88 <strncpy>

	token = strtok(NULL, ","); // lati
 80011d4:	4914      	ldr	r1, [pc, #80]	; (8001228 <splitData+0xc8>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f004 feea 	bl	8005fb0 <strtok>
 80011dc:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <splitData+0xcc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2232      	movs	r2, #50	; 0x32
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	3310      	adds	r3, #16
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <splitData+0xd0>)
 80011ec:	4413      	add	r3, r2
 80011ee:	3302      	adds	r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fec7 	bl	8005f88 <strncpy>

	token = strtok(NULL, "!"); // longi
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <splitData+0xd4>)
 80011fc:	2000      	movs	r0, #0
 80011fe:	f004 fed7 	bl	8005fb0 <strtok>
 8001202:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <splitData+0xcc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2232      	movs	r2, #50	; 0x32
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	3320      	adds	r3, #32
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <splitData+0xd0>)
 8001212:	4413      	add	r3, r2
 8001214:	3302      	adds	r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	4618      	mov	r0, r3
 800121c:	f004 feb4 	bl	8005f88 <strncpy>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08007dd0 	.word	0x08007dd0
 800122c:	200020d8 	.word	0x200020d8
 8001230:	20000388 	.word	0x20000388
 8001234:	08007dd4 	.word	0x08007dd4

08001238 <CallData>:

uint32_t CallData(uint32_t address){
 8001238:	b580      	push	{r7, lr}
 800123a:	b096      	sub	sp, #88	; 0x58
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	char a[70] = {0,};
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2242      	movs	r2, #66	; 0x42
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fe81 	bl	8005f54 <memset>
	int i = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	657b      	str	r3, [r7, #84]	; 0x54
	while(1){
		a[i] = (char)Flash_Read(address);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff4c 	bl	80010f4 <Flash_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	b2d9      	uxtb	r1, r3
 8001260:	f107 020c 	add.w	r2, r7, #12
 8001264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001266:	4413      	add	r3, r2
 8001268:	460a      	mov	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
		address += 0x02;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3302      	adds	r3, #2
 8001270:	607b      	str	r3, [r7, #4]
		if(a[i] == 0xFF){
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2bff      	cmp	r3, #255	; 0xff
 800127e:	d101      	bne.n	8001284 <CallData+0x4c>
			return address;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	e01e      	b.n	80012c2 <CallData+0x8a>
		}
		if(a[i] == '!'){
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b21      	cmp	r3, #33	; 0x21
 8001290:	d113      	bne.n	80012ba <CallData+0x82>
			splitData(a);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff62 	bl	8001160 <splitData>
			dataIdx+=1;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <CallData+0x94>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <CallData+0x94>)
 80012a4:	6013      	str	r3, [r2, #0]
			i = -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	657b      	str	r3, [r7, #84]	; 0x54
			memset(a, 0, 60);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	223c      	movs	r2, #60	; 0x3c
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fe4d 	bl	8005f54 <memset>
		}
		i += 1;
 80012ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012bc:	3301      	adds	r3, #1
 80012be:	657b      	str	r3, [r7, #84]	; 0x54
		a[i] = (char)Flash_Read(address);
 80012c0:	e7c9      	b.n	8001256 <CallData+0x1e>
	}
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3758      	adds	r7, #88	; 0x58
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200020d8 	.word	0x200020d8

080012d0 <SetMode>:
#define LoRa_RX_BUFFER_SIZE 64

uint8_t LoRaRxBuffer[LoRa_RX_BUFFER_SIZE]; // 수신 데이터를 저장할 버퍼
volatile uint8_t rxCompleteFlag = 0; // 데이터 수신 완료 플래그

void SetMode(uint8_t mode) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d837      	bhi.n	8001350 <SetMode+0x80>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <SetMode+0x18>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	0800130f 	.word	0x0800130f
 80012f0:	08001325 	.word	0x08001325
 80012f4:	0800133b 	.word	0x0800133b
	case 0:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	4816      	ldr	r0, [pc, #88]	; (8001358 <SetMode+0x88>)
 80012fe:	f001 fca4 	bl	8002c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2102      	movs	r1, #2
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <SetMode+0x88>)
 8001308:	f001 fc9f 	bl	8002c4a <HAL_GPIO_WritePin>
		break;
 800130c:	e020      	b.n	8001350 <SetMode+0x80>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2101      	movs	r1, #1
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <SetMode+0x88>)
 8001314:	f001 fc99 	bl	8002c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <SetMode+0x88>)
 800131e:	f001 fc94 	bl	8002c4a <HAL_GPIO_WritePin>
		break;
 8001322:	e015      	b.n	8001350 <SetMode+0x80>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <SetMode+0x88>)
 800132a:	f001 fc8e 	bl	8002c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2102      	movs	r1, #2
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <SetMode+0x88>)
 8001334:	f001 fc89 	bl	8002c4a <HAL_GPIO_WritePin>
		break;
 8001338:	e00a      	b.n	8001350 <SetMode+0x80>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2101      	movs	r1, #1
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <SetMode+0x88>)
 8001340:	f001 fc83 	bl	8002c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	2102      	movs	r1, #2
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <SetMode+0x88>)
 800134a:	f001 fc7e 	bl	8002c4a <HAL_GPIO_WritePin>
		break;
 800134e:	bf00      	nop
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010800 	.word	0x40010800

0800135c <_write>:

uint8_t modeFlag = 0;



int _write(int file, unsigned char *p, int len) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_write+0x5c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d107      	bne.n	8001380 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b29a      	uxth	r2, r3
 8001374:	230a      	movs	r3, #10
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <_write+0x60>)
 800137a:	f002 fec1 	bl	8004100 <HAL_UART_Transmit>
 800137e:	e016      	b.n	80013ae <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <_write+0x5c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	b29a      	uxth	r2, r3
 800138c:	230a      	movs	r3, #10
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <_write+0x64>)
 8001392:	f002 feb5 	bl	8004100 <HAL_UART_Transmit>
 8001396:	e00a      	b.n	80013ae <_write+0x52>
	} else if (UART_Print_Port == 2) {
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_write+0x5c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d106      	bne.n	80013ae <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	230a      	movs	r3, #10
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <_write+0x68>)
 80013aa:	f002 fea9 	bl	8004100 <HAL_UART_Transmit>
	}
	return len;
 80013ae:	687b      	ldr	r3, [r7, #4]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000211d 	.word	0x2000211d
 80013bc:	2000026c 	.word	0x2000026c
 80013c0:	200002b4 	.word	0x200002b4
 80013c4:	200002fc 	.word	0x200002fc

080013c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013cc:	b09e      	sub	sp, #120	; 0x78
 80013ce:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013d0:	f000 fe6a 	bl	80020a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013d4:	f000 f95c 	bl	8001690 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013d8:	f000 fa64 	bl	80018a4 <MX_GPIO_Init>
	MX_DMA_Init();
 80013dc:	f000 fa44 	bl	8001868 <MX_DMA_Init>
	MX_I2C1_Init();
 80013e0:	f000 f996 	bl	8001710 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80013e4:	f000 f9c2 	bl	800176c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80013e8:	f000 f9ea 	bl	80017c0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80013ec:	f000 fa12 	bl	8001814 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	498b      	ldr	r1, [pc, #556]	; (8001620 <main+0x258>)
 80013f4:	488b      	ldr	r0, [pc, #556]	; (8001624 <main+0x25c>)
 80013f6:	f002 ff06 	bl	8004206 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, LoRaRxBuffer, 1);
 80013fa:	2201      	movs	r2, #1
 80013fc:	498a      	ldr	r1, [pc, #552]	; (8001628 <main+0x260>)
 80013fe:	488b      	ldr	r0, [pc, #556]	; (800162c <main+0x264>)
 8001400:	f002 ff01 	bl	8004206 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rxBuffer, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	498a      	ldr	r1, [pc, #552]	; (8001630 <main+0x268>)
 8001408:	488a      	ldr	r0, [pc, #552]	; (8001634 <main+0x26c>)
 800140a:	f002 fefc 	bl	8004206 <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 800140e:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <main+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6898      	ldr	r0, [r3, #8]
 8001414:	2300      	movs	r3, #0
 8001416:	2202      	movs	r2, #2
 8001418:	2100      	movs	r1, #0
 800141a:	f004 fc15 	bl	8005c48 <setvbuf>
	//	printf("HELL WORLD\r\n");
	LCD_Init(LCD_ADDR);
 800141e:	204e      	movs	r0, #78	; 0x4e
 8001420:	f7ff fbb6 	bl	8000b90 <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 8001424:	4a85      	ldr	r2, [pc, #532]	; (800163c <main+0x274>)
 8001426:	2100      	movs	r1, #0
 8001428:	204e      	movs	r0, #78	; 0x4e
 800142a:	f7ff fbe8 	bl	8000bfe <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 800142e:	4a84      	ldr	r2, [pc, #528]	; (8001640 <main+0x278>)
 8001430:	2101      	movs	r1, #1
 8001432:	204e      	movs	r0, #78	; 0x4e
 8001434:	f7ff fbe3 	bl	8000bfe <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 8001438:	4a82      	ldr	r2, [pc, #520]	; (8001644 <main+0x27c>)
 800143a:	2102      	movs	r1, #2
 800143c:	204e      	movs	r0, #78	; 0x4e
 800143e:	f7ff fbde 	bl	8000bfe <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 8001442:	4a81      	ldr	r2, [pc, #516]	; (8001648 <main+0x280>)
 8001444:	2103      	movs	r1, #3
 8001446:	204e      	movs	r0, #78	; 0x4e
 8001448:	f7ff fbd9 	bl	8000bfe <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 800144c:	4a7f      	ldr	r2, [pc, #508]	; (800164c <main+0x284>)
 800144e:	2104      	movs	r1, #4
 8001450:	204e      	movs	r0, #78	; 0x4e
 8001452:	f7ff fbd4 	bl	8000bfe <LCD_SET_CGRAM>
//		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
//	}
//	LCD_SendData(LCD_ADDR, 1);

	//flash
	uint32_t ModeFlashAddress = 0x0800CB00;  // ???��?�� ?��?��?�� 메모�?? 주소
 8001456:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <main+0x288>)
 8001458:	613b      	str	r3, [r7, #16]
	uint32_t DataFlashAddress = 0x0800CC00; // ???��?�� ?��?��?�� 메모�?? 주소
 800145a:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <main+0x28c>)
 800145c:	61fb      	str	r3, [r7, #28]
	uint16_t InfoModeFlag = Flash_Read(ModeFlashAddress);
 800145e:	6938      	ldr	r0, [r7, #16]
 8001460:	f7ff fe48 	bl	80010f4 <Flash_Read>
 8001464:	4603      	mov	r3, r0
 8001466:	837b      	strh	r3, [r7, #26]
//	Flash_Erase_Page(0x0800DC00);
//	Flash_Erase_Page(0x0800E000);
//	Flash_Erase_Page(0x0800E400);

	//printf("ModeFlag:%d", InfoModeFlag);
	if (InfoModeFlag == 1) {
 8001468:	8b7b      	ldrh	r3, [r7, #26]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d149      	bne.n	8001502 <main+0x13a>
		DataFlashAddress = CallData(DataFlashAddress);
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f7ff fee2 	bl	8001238 <CallData>
 8001474:	61f8      	str	r0, [r7, #28]
		LCD_Write_Info(data[nowIdx], data[nowIdx+1]);
 8001476:	4b78      	ldr	r3, [pc, #480]	; (8001658 <main+0x290>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b77      	ldr	r3, [pc, #476]	; (8001658 <main+0x290>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4976      	ldr	r1, [pc, #472]	; (800165c <main+0x294>)
 8001482:	2032      	movs	r0, #50	; 0x32
 8001484:	fb00 f202 	mul.w	r2, r0, r2
 8001488:	188c      	adds	r4, r1, r2
 800148a:	4a74      	ldr	r2, [pc, #464]	; (800165c <main+0x294>)
 800148c:	2132      	movs	r1, #50	; 0x32
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	4413      	add	r3, r2
 8001494:	461d      	mov	r5, r3
 8001496:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800149a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800149e:	4666      	mov	r6, ip
 80014a0:	462b      	mov	r3, r5
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014ac:	3510      	adds	r5, #16
 80014ae:	f10c 0c10 	add.w	ip, ip, #16
 80014b2:	4575      	cmp	r5, lr
 80014b4:	d1f3      	bne.n	800149e <main+0xd6>
 80014b6:	4662      	mov	r2, ip
 80014b8:	462b      	mov	r3, r5
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	8013      	strh	r3, [r2, #0]
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	469a      	mov	sl, r3
 80014c2:	6863      	ldr	r3, [r4, #4]
 80014c4:	4699      	mov	r9, r3
 80014c6:	68a3      	ldr	r3, [r4, #8]
 80014c8:	4698      	mov	r8, r3
 80014ca:	68e3      	ldr	r3, [r4, #12]
 80014cc:	469e      	mov	lr, r3
 80014ce:	3410      	adds	r4, #16
 80014d0:	466e      	mov	r6, sp
 80014d2:	f104 0c20 	add.w	ip, r4, #32
 80014d6:	4635      	mov	r5, r6
 80014d8:	4623      	mov	r3, r4
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e4:	3410      	adds	r4, #16
 80014e6:	3610      	adds	r6, #16
 80014e8:	4564      	cmp	r4, ip
 80014ea:	d1f4      	bne.n	80014d6 <main+0x10e>
 80014ec:	4632      	mov	r2, r6
 80014ee:	4623      	mov	r3, r4
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	8013      	strh	r3, [r2, #0]
 80014f4:	4650      	mov	r0, sl
 80014f6:	4649      	mov	r1, r9
 80014f8:	4642      	mov	r2, r8
 80014fa:	4673      	mov	r3, lr
 80014fc:	f7ff fbab 	bl	8000c56 <LCD_Write_Info>
 8001500:	e019      	b.n	8001536 <main+0x16e>
	} else if (InfoModeFlag == 0) {
 8001502:	8b7b      	ldrh	r3, [r7, #26]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10c      	bne.n	8001522 <main+0x15a>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8001508:	2101      	movs	r1, #1
 800150a:	204e      	movs	r0, #78	; 0x4e
 800150c:	f7ff fb1c 	bl	8000b48 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	204e      	movs	r0, #78	; 0x4e
 8001514:	f7ff fb18 	bl	8000b48 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "InputMode");
 8001518:	4951      	ldr	r1, [pc, #324]	; (8001660 <main+0x298>)
 800151a:	204e      	movs	r0, #78	; 0x4e
 800151c:	f7ff fb55 	bl	8000bca <LCD_SendString>
 8001520:	e009      	b.n	8001536 <main+0x16e>
	} else {
		InfoModeFlag = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	837b      	strh	r3, [r7, #26]
		Flash_Unlock();
 8001526:	f7ff fbfb 	bl	8000d20 <Flash_Unlock>
		Flash_Write(ModeFlashAddress, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	6938      	ldr	r0, [r7, #16]
 800152e:	f7ff fc17 	bl	8000d60 <Flash_Write>
		Flash_Lock();
 8001532:	f7ff fc07 	bl	8000d44 <Flash_Lock>
	}

	HAL_UART_Receive_DMA(&huart3, rxBuffer, RX3_BUFFER_SIZE);
 8001536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153a:	493d      	ldr	r1, [pc, #244]	; (8001630 <main+0x268>)
 800153c:	483d      	ldr	r0, [pc, #244]	; (8001634 <main+0x26c>)
 800153e:	f002 fe87 	bl	8004250 <HAL_UART_Receive_DMA>

	//LoRa ================================================================
	SetMode(0);
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fec4 	bl	80012d0 <SetMode>

	uint8_t data[] = "Hello LoRa!";
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <main+0x29c>)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	ca07      	ldmia	r2, {r0, r1, r2}
 800154e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//FW===================================================================
	modeFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001556:	4844      	ldr	r0, [pc, #272]	; (8001668 <main+0x2a0>)
 8001558:	f001 fb60 	bl	8002c1c <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b42      	ldr	r3, [pc, #264]	; (800166c <main+0x2a4>)
 8001562:	701a      	strb	r2, [r3, #0]
//		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); //BUZZER
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED

		if (!modeFlag) { //Local Mode
 8001564:	4b41      	ldr	r3, [pc, #260]	; (800166c <main+0x2a4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1fb      	bne.n	8001564 <main+0x19c>
			if (UART1_Rx_End) {
 800156c:	4b40      	ldr	r3, [pc, #256]	; (8001670 <main+0x2a8>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f7      	beq.n	8001564 <main+0x19c>
				//printf("Echo\r\n");
				if (!strcmp(UART1_Rx_Buffer, "Input")) {
 8001574:	493f      	ldr	r1, [pc, #252]	; (8001674 <main+0x2ac>)
 8001576:	4840      	ldr	r0, [pc, #256]	; (8001678 <main+0x2b0>)
 8001578:	f7fe fdea 	bl	8000150 <strcmp>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <main+0x1d2>
					Flash_Erase_Page(ModeFlashAddress);
 8001582:	6938      	ldr	r0, [r7, #16]
 8001584:	f7ff fdc2 	bl	800110c <Flash_Erase_Page>
					Flash_Unlock();
 8001588:	f7ff fbca 	bl	8000d20 <Flash_Unlock>
					Flash_Write(ModeFlashAddress, (uint8_t)0);
 800158c:	2100      	movs	r1, #0
 800158e:	6938      	ldr	r0, [r7, #16]
 8001590:	f7ff fbe6 	bl	8000d60 <Flash_Write>
					Flash_Lock();
 8001594:	f7ff fbd6 	bl	8000d44 <Flash_Lock>
 8001598:	e02d      	b.n	80015f6 <main+0x22e>
				} else if (!strcmp(UART1_Rx_Buffer, "OutPut")) {
 800159a:	4938      	ldr	r1, [pc, #224]	; (800167c <main+0x2b4>)
 800159c:	4836      	ldr	r0, [pc, #216]	; (8001678 <main+0x2b0>)
 800159e:	f7fe fdd7 	bl	8000150 <strcmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <main+0x1f8>
					Flash_Erase_Page(ModeFlashAddress);
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	f7ff fdaf 	bl	800110c <Flash_Erase_Page>
					Flash_Unlock();
 80015ae:	f7ff fbb7 	bl	8000d20 <Flash_Unlock>
					Flash_Write(ModeFlashAddress, 1);
 80015b2:	2101      	movs	r1, #1
 80015b4:	6938      	ldr	r0, [r7, #16]
 80015b6:	f7ff fbd3 	bl	8000d60 <Flash_Write>
					Flash_Lock();
 80015ba:	f7ff fbc3 	bl	8000d44 <Flash_Lock>
 80015be:	e01a      	b.n	80015f6 <main+0x22e>
				} else if ((!strncmp(UART1_Rx_Buffer, "Data", 4)
 80015c0:	2204      	movs	r2, #4
 80015c2:	492f      	ldr	r1, [pc, #188]	; (8001680 <main+0x2b8>)
 80015c4:	482c      	ldr	r0, [pc, #176]	; (8001678 <main+0x2b0>)
 80015c6:	f004 fccd 	bl	8005f64 <strncmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <main+0x218>
						|| !strncmp(UART1_Rx_Buffer, "data", 4))
 80015d0:	2204      	movs	r2, #4
 80015d2:	492c      	ldr	r1, [pc, #176]	; (8001684 <main+0x2bc>)
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <main+0x2b0>)
 80015d6:	f004 fcc5 	bl	8005f64 <strncmp>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10a      	bne.n	80015f6 <main+0x22e>
						&& InfoModeFlag == 0) {
 80015e0:	8b7b      	ldrh	r3, [r7, #26]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d107      	bne.n	80015f6 <main+0x22e>
					DataFlashAddress = Flash_Write_Data(DataFlashAddress, UART1_Rx_Buffer);
 80015e6:	4924      	ldr	r1, [pc, #144]	; (8001678 <main+0x2b0>)
 80015e8:	69f8      	ldr	r0, [r7, #28]
 80015ea:	f7ff fc1b 	bl	8000e24 <Flash_Write_Data>
 80015ee:	61f8      	str	r0, [r7, #28]
					//printf("Data\r\n");
					printf("N\r\n");
 80015f0:	4825      	ldr	r0, [pc, #148]	; (8001688 <main+0x2c0>)
 80015f2:	f004 fb21 	bl	8005c38 <puts>
				}
				//HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
				for (int i = 0; i < 50; i++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e007      	b.n	800160c <main+0x244>
					UART1_Rx_Buffer[i] = '\0';
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <main+0x2b0>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 50; i++) {
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b31      	cmp	r3, #49	; 0x31
 8001610:	ddf4      	ble.n	80015fc <main+0x234>
				}
				UART1_Len = 0;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <main+0x2c4>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
				UART1_Rx_End = 0;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <main+0x2a8>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
		if (!modeFlag) { //Local Mode
 800161e:	e7a1      	b.n	8001564 <main+0x19c>
 8001620:	20002120 	.word	0x20002120
 8001624:	2000026c 	.word	0x2000026c
 8001628:	200020dc 	.word	0x200020dc
 800162c:	200002b4 	.word	0x200002b4
 8001630:	20002158 	.word	0x20002158
 8001634:	200002fc 	.word	0x200002fc
 8001638:	2000008c 	.word	0x2000008c
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000010 	.word	0x20000010
 8001648:	20000018 	.word	0x20000018
 800164c:	20000020 	.word	0x20000020
 8001650:	0800cb00 	.word	0x0800cb00
 8001654:	0800cc00 	.word	0x0800cc00
 8001658:	200020d4 	.word	0x200020d4
 800165c:	20000388 	.word	0x20000388
 8001660:	08007dfc 	.word	0x08007dfc
 8001664:	08007e2c 	.word	0x08007e2c
 8001668:	40010800 	.word	0x40010800
 800166c:	20002259 	.word	0x20002259
 8001670:	20002157 	.word	0x20002157
 8001674:	08007e08 	.word	0x08007e08
 8001678:	20002124 	.word	0x20002124
 800167c:	08007e10 	.word	0x08007e10
 8001680:	08007e18 	.word	0x08007e18
 8001684:	08007e20 	.word	0x08007e20
 8001688:	08007e28 	.word	0x08007e28
 800168c:	20002156 	.word	0x20002156

08001690 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b090      	sub	sp, #64	; 0x40
 8001694:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	2228      	movs	r2, #40	; 0x28
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fc58 	bl	8005f54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ba:	2310      	movs	r3, #16
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80016c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 f8b5 	bl	8003840 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x50>
		Error_Handler();
 80016dc:	f000 fa30 	bl	8001b40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2302      	movs	r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fb23 	bl	8003d44 <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x78>
		Error_Handler();
 8001704:	f000 fa1c 	bl	8001b40 <Error_Handler>
	}
}
 8001708:	bf00      	nop
 800170a:	3740      	adds	r7, #64	; 0x40
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_I2C1_Init+0x50>)
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_I2C1_Init+0x54>)
 8001718:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_I2C1_Init+0x50>)
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_I2C1_Init+0x58>)
 800171e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_I2C1_Init+0x50>)
 800172e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001732:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_I2C1_Init+0x50>)
 800174e:	f001 faad 	bl	8002cac <HAL_I2C_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001758:	f000 f9f2 	bl	8001b40 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000218 	.word	0x20000218
 8001764:	40005400 	.word	0x40005400
 8001768:	000186a0 	.word	0x000186a0

0800176c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MX_USART1_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f002 fc5c 	bl	8004060 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80017ae:	f000 f9c7 	bl	8001b40 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000026c 	.word	0x2000026c
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART2_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f8:	f002 fc32 	bl	8004060 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001802:	f000 f99d 	bl	8001b40 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002b4 	.word	0x200002b4
 8001810:	40004400 	.word	0x40004400

08001814 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART3_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800184c:	f002 fc08 	bl	8004060 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001856:	f000 f973 	bl	8001b40 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002fc 	.word	0x200002fc
 8001864:	40004800 	.word	0x40004800

08001868 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_DMA_Init+0x38>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <MX_DMA_Init+0x38>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_DMA_Init+0x38>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	200d      	movs	r0, #13
 800188c:	f000 fd69 	bl	8002362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001890:	200d      	movs	r0, #13
 8001892:	f000 fd82 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <MX_GPIO_Init+0x134>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <MX_GPIO_Init+0x134>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <MX_GPIO_Init+0x134>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <MX_GPIO_Init+0x134>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <MX_GPIO_Init+0x134>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <MX_GPIO_Init+0x134>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin,
 80018e8:	2200      	movs	r2, #0
 80018ea:	f641 0103 	movw	r1, #6147	; 0x1803
 80018ee:	483b      	ldr	r0, [pc, #236]	; (80019dc <MX_GPIO_Init+0x138>)
 80018f0:	f001 f9ab 	bl	8002c4a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80018fa:	4839      	ldr	r0, [pc, #228]	; (80019e0 <MX_GPIO_Init+0x13c>)
 80018fc:	f001 f9a5 	bl	8002c4a <HAL_GPIO_WritePin>
	STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
	GPIO_InitStruct.Pin = LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin;
 8001900:	f641 0303 	movw	r3, #6147	; 0x1803
 8001904:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2302      	movs	r3, #2
 8001910:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4619      	mov	r1, r3
 8001918:	4830      	ldr	r0, [pc, #192]	; (80019dc <MX_GPIO_Init+0x138>)
 800191a:	f000 fffb 	bl	8002914 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_AUX_Pin */
	GPIO_InitStruct.Pin = LORA_AUX_Pin;
 800191e:	2310      	movs	r3, #16
 8001920:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	482a      	ldr	r0, [pc, #168]	; (80019dc <MX_GPIO_Init+0x138>)
 8001932:	f000 ffef 	bl	8002914 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8001936:	23e0      	movs	r3, #224	; 0xe0
 8001938:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <MX_GPIO_Init+0x140>)
 800193c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4619      	mov	r1, r3
 8001948:	4824      	ldr	r0, [pc, #144]	; (80019dc <MX_GPIO_Init+0x138>)
 800194a:	f000 ffe3 	bl	8002914 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN5_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin | BTN5_Pin;
 800194e:	2303      	movs	r3, #3
 8001950:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <MX_GPIO_Init+0x140>)
 8001954:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	481f      	ldr	r0, [pc, #124]	; (80019e0 <MX_GPIO_Init+0x13c>)
 8001962:	f000 ffd7 	bl	8002914 <HAL_GPIO_Init>

	/*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
	GPIO_InitStruct.Pin = STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin;
 8001966:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 800196a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2302      	movs	r3, #2
 8001976:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	4619      	mov	r1, r3
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_GPIO_Init+0x13c>)
 8001980:	f000 ffc8 	bl	8002914 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_SLCT_Pin */
	GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8001984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001988:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4619      	mov	r1, r3
 8001998:	4810      	ldr	r0, [pc, #64]	; (80019dc <MX_GPIO_Init+0x138>)
 800199a:	f000 ffbb 	bl	8002914 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2006      	movs	r0, #6
 80019a4:	f000 fcdd 	bl	8002362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019a8:	2006      	movs	r0, #6
 80019aa:	f000 fcf6 	bl	800239a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2007      	movs	r0, #7
 80019b4:	f000 fcd5 	bl	8002362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019b8:	2007      	movs	r0, #7
 80019ba:	f000 fcee 	bl	800239a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2017      	movs	r0, #23
 80019c4:	f000 fccd 	bl	8002362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019c8:	2017      	movs	r0, #23
 80019ca:	f000 fce6 	bl	800239a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	10110000 	.word	0x10110000

080019e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d103      	bne.n	8001a00 <HAL_GPIO_EXTI_Callback+0x18>
		printf("0x020,10x03\r\n");
 80019f8:	4811      	ldr	r0, [pc, #68]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x58>)
 80019fa:	f004 f91d 	bl	8005c38 <puts>
	} else if (GPIO_Pin == GPIO_PIN_0) {
		printf("0x023,10x03\r\n");
	} else if (GPIO_Pin == GPIO_PIN_1) {
		printf("0x024,10x03\r\n ");
	}
}
 80019fe:	e01a      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2b40      	cmp	r3, #64	; 0x40
 8001a04:	d103      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x26>
		printf("0x021,10x03\r\n");
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a08:	f004 f916 	bl	8005c38 <puts>
}
 8001a0c:	e013      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b80      	cmp	r3, #128	; 0x80
 8001a12:	d103      	bne.n	8001a1c <HAL_GPIO_EXTI_Callback+0x34>
		printf("0x022,10x03\r\n");
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a16:	f004 f90f 	bl	8005c38 <puts>
}
 8001a1a:	e00c      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <HAL_GPIO_EXTI_Callback+0x42>
		printf("0x023,10x03\r\n");
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <HAL_GPIO_EXTI_Callback+0x64>)
 8001a24:	f004 f908 	bl	8005c38 <puts>
}
 8001a28:	e005      	b.n	8001a36 <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d102      	bne.n	8001a36 <HAL_GPIO_EXTI_Callback+0x4e>
		printf("0x024,10x03\r\n ");
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x68>)
 8001a32:	f004 f89b 	bl	8005b6c <iprintf>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	08007e38 	.word	0x08007e38
 8001a44:	08007e48 	.word	0x08007e48
 8001a48:	08007e58 	.word	0x08007e58
 8001a4c:	08007e68 	.word	0x08007e68
 8001a50:	08007e78 	.word	0x08007e78

08001a54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	static uint16_t index = 0;
	if (huart->Instance == USART1) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <HAL_UART_RxCpltCallback+0xb8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d138      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_UART_RxCpltCallback+0xbc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_UART_RxCpltCallback+0xc0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_UART_RxCpltCallback+0x26>
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d00c      	beq.n	8001a92 <HAL_UART_RxCpltCallback+0x3e>
 8001a78:	e024      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_UART_RxCpltCallback+0xc4>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d103      	bne.n	8001a8a <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_UART_RxCpltCallback+0xc0>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8001a88:	e020      	b.n	8001acc <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_UART_RxCpltCallback+0xc0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
			break;
 8001a90:	e01c      	b.n	8001acc <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_UART_RxCpltCallback+0xc4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d106      	bne.n	8001aa8 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_UART_RxCpltCallback+0xbc>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_UART_RxCpltCallback+0xc0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 8001aa6:	e011      	b.n	8001acc <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_UART_RxCpltCallback+0xc8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_UART_RxCpltCallback+0xc4>)
 8001ab0:	7819      	ldrb	r1, [r3, #0]
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_UART_RxCpltCallback+0xcc>)
 8001ab4:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_UART_RxCpltCallback+0xc8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_UART_RxCpltCallback+0xc8>)
 8001ac0:	701a      	strb	r2, [r3, #0]
			break;
 8001ac2:	e003      	b.n	8001acc <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_UART_RxCpltCallback+0xc0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
			break;
 8001aca:	bf00      	nop
		}
		//HAL_UART_Transmit(&huart1, UART1_Rx_Data, 1, 10);
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8001acc:	2201      	movs	r2, #1
 8001ace:	4912      	ldr	r1, [pc, #72]	; (8001b18 <HAL_UART_RxCpltCallback+0xc4>)
 8001ad0:	4814      	ldr	r0, [pc, #80]	; (8001b24 <HAL_UART_RxCpltCallback+0xd0>)
 8001ad2:	f002 fb98 	bl	8004206 <HAL_UART_Receive_IT>
		rxCompleteFlag = 1;
		HAL_UART_Receive_IT(&huart2, LoRaRxBuffer, 1);
	} else if (huart->Instance == USART3) {
		dataReceived = 1;
	}
}
 8001ad6:	e015      	b.n	8001b04 <HAL_UART_RxCpltCallback+0xb0>
	} else if (huart->Instance == USART2) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_UART_RxCpltCallback+0xd4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d108      	bne.n	8001af4 <HAL_UART_RxCpltCallback+0xa0>
		rxCompleteFlag = 1;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_UART_RxCpltCallback+0xd8>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, LoRaRxBuffer, 1);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4911      	ldr	r1, [pc, #68]	; (8001b30 <HAL_UART_RxCpltCallback+0xdc>)
 8001aec:	4811      	ldr	r0, [pc, #68]	; (8001b34 <HAL_UART_RxCpltCallback+0xe0>)
 8001aee:	f002 fb8a 	bl	8004206 <HAL_UART_Receive_IT>
}
 8001af2:	e007      	b.n	8001b04 <HAL_UART_RxCpltCallback+0xb0>
	} else if (huart->Instance == USART3) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_UART_RxCpltCallback+0xe4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d102      	bne.n	8001b04 <HAL_UART_RxCpltCallback+0xb0>
		dataReceived = 1;
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_UART_RxCpltCallback+0xe8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	20002157 	.word	0x20002157
 8001b14:	2000225a 	.word	0x2000225a
 8001b18:	20002120 	.word	0x20002120
 8001b1c:	20002156 	.word	0x20002156
 8001b20:	20002124 	.word	0x20002124
 8001b24:	2000026c 	.word	0x2000026c
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	2000211c 	.word	0x2000211c
 8001b30:	200020dc 	.word	0x200020dc
 8001b34:	200002b4 	.word	0x200002b4
 8001b38:	40004800 	.word	0x40004800
 8001b3c:	20002258 	.word	0x20002258

08001b40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b44:	b672      	cpsid	i
}
 8001b46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b48:	e7fe      	b.n	8001b48 <Error_Handler+0x8>
	...

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_MspInit+0x5c>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_MspInit+0x5c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_MspInit+0x5c>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_MspInit+0x5c>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_MspInit+0x5c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_MspInit+0x5c>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_MspInit+0x60>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_MspInit+0x60>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000

08001bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_I2C_MspInit+0x70>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d123      	bne.n	8001c18 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001be8:	23c0      	movs	r3, #192	; 0xc0
 8001bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480b      	ldr	r0, [pc, #44]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001bfc:	f000 fe8a 	bl	8002914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c0a:	61d3      	str	r3, [r2, #28]
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010c00 	.word	0x40010c00

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <HAL_UART_MspInit+0x1e4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d13a      	bne.n	8001cc2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4c:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a70      	ldr	r2, [pc, #448]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b6e      	ldr	r3, [pc, #440]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4861      	ldr	r0, [pc, #388]	; (8001e18 <HAL_UART_MspInit+0x1ec>)
 8001c92:	f000 fe3f 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4619      	mov	r1, r3
 8001caa:	485b      	ldr	r0, [pc, #364]	; (8001e18 <HAL_UART_MspInit+0x1ec>)
 8001cac:	f000 fe32 	bl	8002914 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2025      	movs	r0, #37	; 0x25
 8001cb6:	f000 fb54 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cba:	2025      	movs	r0, #37	; 0x25
 8001cbc:	f000 fb6d 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cc0:	e0a2      	b.n	8001e08 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_UART_MspInit+0x1f0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d138      	bne.n	8001d3e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a4a      	ldr	r2, [pc, #296]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0320 	add.w	r3, r7, #32
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4842      	ldr	r0, [pc, #264]	; (8001e18 <HAL_UART_MspInit+0x1ec>)
 8001d10:	f000 fe00 	bl	8002914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d14:	2308      	movs	r3, #8
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4619      	mov	r1, r3
 8001d26:	483c      	ldr	r0, [pc, #240]	; (8001e18 <HAL_UART_MspInit+0x1ec>)
 8001d28:	f000 fdf4 	bl	8002914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2026      	movs	r0, #38	; 0x26
 8001d32:	f000 fb16 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d36:	2026      	movs	r0, #38	; 0x26
 8001d38:	f000 fb2f 	bl	800239a <HAL_NVIC_EnableIRQ>
}
 8001d3c:	e064      	b.n	8001e08 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a37      	ldr	r2, [pc, #220]	; (8001e20 <HAL_UART_MspInit+0x1f4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d15f      	bne.n	8001e08 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_UART_MspInit+0x1e8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0320 	add.w	r3, r7, #32
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4825      	ldr	r0, [pc, #148]	; (8001e24 <HAL_UART_MspInit+0x1f8>)
 8001d8e:	f000 fdc1 	bl	8002914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4619      	mov	r1, r3
 8001da6:	481f      	ldr	r0, [pc, #124]	; (8001e24 <HAL_UART_MspInit+0x1f8>)
 8001da8:	f000 fdb4 	bl	8002914 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_UART_MspInit+0x200>)
 8001db0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ddc:	4812      	ldr	r0, [pc, #72]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001dde:	f000 faf7 	bl	80023d0 <HAL_DMA_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8001de8:	f7ff feaa 	bl	8001b40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_UART_MspInit+0x1fc>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2027      	movs	r0, #39	; 0x27
 8001dfe:	f000 fab0 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e02:	2027      	movs	r0, #39	; 0x27
 8001e04:	f000 fac9 	bl	800239a <HAL_NVIC_EnableIRQ>
}
 8001e08:	bf00      	nop
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	40004800 	.word	0x40004800
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	20000344 	.word	0x20000344
 8001e2c:	40020030 	.word	0x40020030

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e76:	f000 f95d 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 fefa 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8001e90:	2002      	movs	r0, #2
 8001e92:	f000 fef3 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <DMA1_Channel3_IRQHandler+0x10>)
 8001ea2:	f000 fc03 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000344 	.word	0x20000344

08001eb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001eb4:	2020      	movs	r0, #32
 8001eb6:	f000 fee1 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001eba:	2040      	movs	r0, #64	; 0x40
 8001ebc:	f000 fede 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001ec0:	2080      	movs	r0, #128	; 0x80
 8001ec2:	f000 fedb 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <USART1_IRQHandler+0x10>)
 8001ed2:	f002 f9e3 	bl	800429c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000026c 	.word	0x2000026c

08001ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <USART2_IRQHandler+0x10>)
 8001ee6:	f002 f9d9 	bl	800429c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002b4 	.word	0x200002b4

08001ef4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <USART3_IRQHandler+0x10>)
 8001efa:	f002 f9cf 	bl	800429c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200002fc 	.word	0x200002fc

08001f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <_kill>:

int _kill(int pid, int sig)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f20:	f004 f8ec 	bl	80060fc <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2216      	movs	r2, #22
 8001f28:	601a      	str	r2, [r3, #0]
  return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_exit>:

void _exit (int status)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffe7 	bl	8001f16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f48:	e7fe      	b.n	8001f48 <_exit+0x12>

08001f4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e00a      	b.n	8001f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5c:	f3af 8000 	nop.w
 8001f60:	4601      	mov	r1, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	60ba      	str	r2, [r7, #8]
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbf0      	blt.n	8001f5c <_read+0x12>
  }

  return len;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
  return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <_isatty>:

int _isatty(int file)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f004 f872 	bl	80060fc <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20005000 	.word	0x20005000
 8002044:	00000400 	.word	0x00000400
 8002048:	2000225c 	.word	0x2000225c
 800204c:	200023b0 	.word	0x200023b0

08002050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800205c:	f7ff fff8 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480b      	ldr	r0, [pc, #44]	; (8002090 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002062:	490c      	ldr	r1, [pc, #48]	; (8002094 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002064:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002078:	4c09      	ldr	r4, [pc, #36]	; (80020a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f004 f83f 	bl	8006108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800208a:	f7ff f99d 	bl	80013c8 <main>
  bx lr
 800208e:	4770      	bx	lr
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002098:	08008288 	.word	0x08008288
  ldr r2, =_sbss
 800209c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80020a0:	200023b0 	.word	0x200023b0

080020a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC1_2_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_Init+0x28>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_Init+0x28>)
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 f947 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	200f      	movs	r0, #15
 80020c0:	f000 f808 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fd42 	bl	8001b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40022000 	.word	0x40022000

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f95f 	bl	80023b6 <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 f927 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000028 	.word	0x20000028
 800212c:	20000030 	.word	0x20000030
 8002130:	2000002c 	.word	0x2000002c

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x1c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_IncTick+0x20>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_IncTick+0x20>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000030 	.word	0x20000030
 8002154:	20002260 	.word	0x20002260

08002158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <HAL_GetTick+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20002260 	.word	0x20002260

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fff0 	bl	8002158 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffe0 	bl	8002158 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000030 	.word	0x20000030

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4906      	ldr	r1, [pc, #24]	; (800224c <__NVIC_EnableIRQ+0x34>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff90 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff2d 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff42 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff90 	bl	80022a4 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5f 	bl	8002250 <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff35 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e043      	b.n	800246e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_DMA_Init+0xa8>)
 80023ee:	4413      	add	r3, r2
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_DMA_Init+0xac>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_DMA_Init+0xb0>)
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800241a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800241e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	bffdfff8 	.word	0xbffdfff8
 800247c:	cccccccd 	.word	0xcccccccd
 8002480:	40020000 	.word	0x40020000

08002484 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Start_IT+0x20>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e04b      	b.n	800253c <HAL_DMA_Start_IT+0xb8>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d13a      	bne.n	800252e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f9eb 	bl	80028b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 020e 	orr.w	r2, r2, #14
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e00f      	b.n	800251c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 020a 	orr.w	r2, r2, #10
 800251a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e005      	b.n	800253a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d008      	beq.n	800256e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2204      	movs	r2, #4
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e020      	b.n	80025b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 020e 	bic.w	r2, r2, #14
 800257c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d005      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e051      	b.n	8002684 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 020e 	bic.w	r2, r2, #14
 80025ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_DMA_Abort_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d029      	beq.n	800265e <HAL_DMA_Abort_IT+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_DMA_Abort_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort_IT+0x9e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_DMA_Abort_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01a      	beq.n	8002654 <HAL_DMA_Abort_IT+0x98>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_DMA_Abort_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d012      	beq.n	800264e <HAL_DMA_Abort_IT+0x92>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_DMA_Abort_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00a      	beq.n	8002648 <HAL_DMA_Abort_IT+0x8c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_DMA_Abort_IT+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_DMA_Abort_IT+0x86>
 800263c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002640:	e00e      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002646:	e00b      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264c:	e008      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800264e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002652:	e005      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002658:	e002      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265a:	2310      	movs	r3, #16
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265e:	2301      	movs	r3, #1
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_DMA_Abort_IT+0xec>)
 8002662:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    } 
  }
  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020008 	.word	0x40020008
 8002694:	4002001c 	.word	0x4002001c
 8002698:	40020030 	.word	0x40020030
 800269c:	40020044 	.word	0x40020044
 80026a0:	40020058 	.word	0x40020058
 80026a4:	4002006c 	.word	0x4002006c
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	2204      	movs	r2, #4
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d04f      	beq.n	8002774 <HAL_DMA_IRQHandler+0xc8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04a      	beq.n	8002774 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_DMA_IRQHandler+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d029      	beq.n	800275a <HAL_DMA_IRQHandler+0xae>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_DMA_IRQHandler+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0xaa>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01a      	beq.n	8002750 <HAL_DMA_IRQHandler+0xa4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d012      	beq.n	800274a <HAL_DMA_IRQHandler+0x9e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_DMA_IRQHandler+0x200>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x98>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_IRQHandler+0x204>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <HAL_DMA_IRQHandler+0x92>
 8002738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273c:	e00e      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800273e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002742:	e00b      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002748:	e008      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800274a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274e:	e005      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	e002      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	e000      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800275a:	2304      	movs	r3, #4
 800275c:	4a55      	ldr	r2, [pc, #340]	; (80028b4 <HAL_DMA_IRQHandler+0x208>)
 800275e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8094 	beq.w	8002892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002772:	e08e      	b.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2202      	movs	r2, #2
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d056      	beq.n	8002832 <HAL_DMA_IRQHandler+0x186>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d051      	beq.n	8002832 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020a 	bic.w	r2, r2, #10
 80027aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_DMA_IRQHandler+0x1f0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d029      	beq.n	8002812 <HAL_DMA_IRQHandler+0x166>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a37      	ldr	r2, [pc, #220]	; (80028a0 <HAL_DMA_IRQHandler+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0x162>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a35      	ldr	r2, [pc, #212]	; (80028a4 <HAL_DMA_IRQHandler+0x1f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x15c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a34      	ldr	r2, [pc, #208]	; (80028a8 <HAL_DMA_IRQHandler+0x1fc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d012      	beq.n	8002802 <HAL_DMA_IRQHandler+0x156>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_DMA_IRQHandler+0x200>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x150>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <HAL_DMA_IRQHandler+0x204>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d102      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x14a>
 80027f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027f4:	e00e      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 80027f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fa:	e00b      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	e008      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002806:	e005      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280c:	e002      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 800280e:	2320      	movs	r3, #32
 8002810:	e000      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002812:	2302      	movs	r3, #2
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_DMA_IRQHandler+0x208>)
 8002816:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d034      	beq.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002830:	e02f      	b.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
    }
  }
  return;
 8002892:	bf00      	nop
 8002894:	bf00      	nop
}
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020008 	.word	0x40020008
 80028a0:	4002001c 	.word	0x4002001c
 80028a4:	40020030 	.word	0x40020030
 80028a8:	40020044 	.word	0x40020044
 80028ac:	40020058 	.word	0x40020058
 80028b0:	4002006c 	.word	0x4002006c
 80028b4:	40020000 	.word	0x40020000

080028b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d108      	bne.n	80028f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028f6:	e007      	b.n	8002908 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b08b      	sub	sp, #44	; 0x2c
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	e169      	b.n	8002bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002928:	2201      	movs	r2, #1
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8158 	bne.w	8002bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a9a      	ldr	r2, [pc, #616]	; (8002bb4 <HAL_GPIO_Init+0x2a0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d05e      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002950:	4a98      	ldr	r2, [pc, #608]	; (8002bb4 <HAL_GPIO_Init+0x2a0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d875      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002956:	4a98      	ldr	r2, [pc, #608]	; (8002bb8 <HAL_GPIO_Init+0x2a4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d058      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 800295c:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <HAL_GPIO_Init+0x2a4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d86f      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002962:	4a96      	ldr	r2, [pc, #600]	; (8002bbc <HAL_GPIO_Init+0x2a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d052      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002968:	4a94      	ldr	r2, [pc, #592]	; (8002bbc <HAL_GPIO_Init+0x2a8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d869      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800296e:	4a94      	ldr	r2, [pc, #592]	; (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04c      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002974:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d863      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800297a:	4a92      	ldr	r2, [pc, #584]	; (8002bc4 <HAL_GPIO_Init+0x2b0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d046      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002980:	4a90      	ldr	r2, [pc, #576]	; (8002bc4 <HAL_GPIO_Init+0x2b0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d85d      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d82a      	bhi.n	80029e0 <HAL_GPIO_Init+0xcc>
 800298a:	2b12      	cmp	r3, #18
 800298c:	d859      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <HAL_GPIO_Init+0x80>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	08002a0f 	.word	0x08002a0f
 8002998:	080029e9 	.word	0x080029e9
 800299c:	080029fb 	.word	0x080029fb
 80029a0:	08002a3d 	.word	0x08002a3d
 80029a4:	08002a43 	.word	0x08002a43
 80029a8:	08002a43 	.word	0x08002a43
 80029ac:	08002a43 	.word	0x08002a43
 80029b0:	08002a43 	.word	0x08002a43
 80029b4:	08002a43 	.word	0x08002a43
 80029b8:	08002a43 	.word	0x08002a43
 80029bc:	08002a43 	.word	0x08002a43
 80029c0:	08002a43 	.word	0x08002a43
 80029c4:	08002a43 	.word	0x08002a43
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a43 	.word	0x08002a43
 80029d0:	08002a43 	.word	0x08002a43
 80029d4:	08002a43 	.word	0x08002a43
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	4a79      	ldr	r2, [pc, #484]	; (8002bc8 <HAL_GPIO_Init+0x2b4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e6:	e02c      	b.n	8002a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e029      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	3304      	adds	r3, #4
 80029f6:	623b      	str	r3, [r7, #32]
          break;
 80029f8:	e024      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	3308      	adds	r3, #8
 8002a00:	623b      	str	r3, [r7, #32]
          break;
 8002a02:	e01f      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	623b      	str	r3, [r7, #32]
          break;
 8002a0c:	e01a      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a16:	2304      	movs	r3, #4
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e013      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a24:	2308      	movs	r3, #8
 8002a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	611a      	str	r2, [r3, #16]
          break;
 8002a2e:	e009      	b.n	8002a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a30:	2308      	movs	r3, #8
 8002a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	615a      	str	r2, [r3, #20]
          break;
 8002a3a:	e003      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          break;
 8002a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2bff      	cmp	r3, #255	; 0xff
 8002a48:	d801      	bhi.n	8002a4e <HAL_GPIO_Init+0x13a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_Init+0x13e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d802      	bhi.n	8002a60 <HAL_GPIO_Init+0x14c>
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_Init+0x152>
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	3b08      	subs	r3, #8
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b1 	beq.w	8002bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a94:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a4c      	ldr	r2, [pc, #304]	; (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	; (8002bd4 <HAL_GPIO_Init+0x2c0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_GPIO_Init+0x1ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <HAL_GPIO_Init+0x2c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00d      	beq.n	8002afc <HAL_GPIO_Init+0x1e8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <HAL_GPIO_Init+0x2c8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0x1e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <HAL_GPIO_Init+0x2cc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_GPIO_Init+0x1e0>
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002b00:	2300      	movs	r3, #0
 8002b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b12:	492f      	ldr	r1, [pc, #188]	; (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	492c      	ldr	r1, [pc, #176]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4928      	ldr	r1, [pc, #160]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4922      	ldr	r1, [pc, #136]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	491e      	ldr	r1, [pc, #120]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4918      	ldr	r1, [pc, #96]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4914      	ldr	r1, [pc, #80]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d021      	beq.n	8002be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e021      	b.n	8002bf6 <HAL_GPIO_Init+0x2e2>
 8002bb2:	bf00      	nop
 8002bb4:	10320000 	.word	0x10320000
 8002bb8:	10310000 	.word	0x10310000
 8002bbc:	10220000 	.word	0x10220000
 8002bc0:	10210000 	.word	0x10210000
 8002bc4:	10120000 	.word	0x10120000
 8002bc8:	10110000 	.word	0x10110000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40010c00 	.word	0x40010c00
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_GPIO_Init+0x304>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4909      	ldr	r1, [pc, #36]	; (8002c18 <HAL_GPIO_Init+0x304>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47f ae8e 	bne.w	8002928 <HAL_GPIO_Init+0x14>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	372c      	adds	r7, #44	; 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e001      	b.n	8002c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	807b      	strh	r3, [r7, #2]
 8002c56:	4613      	mov	r3, r2
 8002c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5a:	787b      	ldrb	r3, [r7, #1]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c60:	887a      	ldrh	r2, [r7, #2]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c66:	e003      	b.n	8002c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	041a      	lsls	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	611a      	str	r2, [r3, #16]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fea4 	bl	80019e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e12b      	b.n	8002f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe ff6c 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d10:	f001 f960 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8002d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a81      	ldr	r2, [pc, #516]	; (8002f20 <HAL_I2C_Init+0x274>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d807      	bhi.n	8002d30 <HAL_I2C_Init+0x84>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a80      	ldr	r2, [pc, #512]	; (8002f24 <HAL_I2C_Init+0x278>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bf94      	ite	ls
 8002d28:	2301      	movls	r3, #1
 8002d2a:	2300      	movhi	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e006      	b.n	8002d3e <HAL_I2C_Init+0x92>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a7d      	ldr	r2, [pc, #500]	; (8002f28 <HAL_I2C_Init+0x27c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0e7      	b.n	8002f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a78      	ldr	r2, [pc, #480]	; (8002f2c <HAL_I2C_Init+0x280>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0c9b      	lsrs	r3, r3, #18
 8002d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a6a      	ldr	r2, [pc, #424]	; (8002f20 <HAL_I2C_Init+0x274>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d802      	bhi.n	8002d80 <HAL_I2C_Init+0xd4>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	e009      	b.n	8002d94 <HAL_I2C_Init+0xe8>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_I2C_Init+0x284>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	3301      	adds	r3, #1
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	495c      	ldr	r1, [pc, #368]	; (8002f20 <HAL_I2C_Init+0x274>)
 8002db0:	428b      	cmp	r3, r1
 8002db2:	d819      	bhi.n	8002de8 <HAL_I2C_Init+0x13c>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e59      	subs	r1, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dc8:	400b      	ands	r3, r1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_I2C_Init+0x138>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e59      	subs	r1, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	e051      	b.n	8002e88 <HAL_I2C_Init+0x1dc>
 8002de4:	2304      	movs	r3, #4
 8002de6:	e04f      	b.n	8002e88 <HAL_I2C_Init+0x1dc>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d111      	bne.n	8002e14 <HAL_I2C_Init+0x168>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e012      	b.n	8002e3a <HAL_I2C_Init+0x18e>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e58      	subs	r0, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	0099      	lsls	r1, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Init+0x196>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e022      	b.n	8002e88 <HAL_I2C_Init+0x1dc>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10e      	bne.n	8002e68 <HAL_I2C_Init+0x1bc>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1e58      	subs	r0, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	440b      	add	r3, r1
 8002e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e66:	e00f      	b.n	8002e88 <HAL_I2C_Init+0x1dc>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	6809      	ldr	r1, [r1, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6911      	ldr	r1, [r2, #16]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68d2      	ldr	r2, [r2, #12]
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	000186a0 	.word	0x000186a0
 8002f24:	001e847f 	.word	0x001e847f
 8002f28:	003d08ff 	.word	0x003d08ff
 8002f2c:	431bde83 	.word	0x431bde83
 8002f30:	10624dd3 	.word	0x10624dd3

08002f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	460b      	mov	r3, r1
 8002f42:	817b      	strh	r3, [r7, #10]
 8002f44:	4613      	mov	r3, r2
 8002f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff f906 	bl	8002158 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	f040 80e0 	bne.w	800311c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2319      	movs	r3, #25
 8002f62:	2201      	movs	r2, #1
 8002f64:	4970      	ldr	r1, [pc, #448]	; (8003128 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fa92 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0d3      	b.n	800311e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_I2C_Master_Transmit+0x50>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0cc      	b.n	800311e <HAL_I2C_Master_Transmit+0x1ea>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d007      	beq.n	8002faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2221      	movs	r2, #33	; 0x21
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	893a      	ldrh	r2, [r7, #8]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a50      	ldr	r2, [pc, #320]	; (800312c <HAL_I2C_Master_Transmit+0x1f8>)
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f9ca 	bl	800338c <I2C_MasterRequestWrite>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e08d      	b.n	800311e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003018:	e066      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fb50 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d107      	bne.n	8003042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06b      	b.n	800311e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b04      	cmp	r3, #4
 8003082:	d11b      	bne.n	80030bc <HAL_I2C_Master_Transmit+0x188>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	6a39      	ldr	r1, [r7, #32]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fb47 	bl	8003754 <I2C_WaitOnBTFFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d107      	bne.n	80030e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e01a      	b.n	800311e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d194      	bne.n	800301a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	00100002 	.word	0x00100002
 800312c:	ffff0000 	.word	0xffff0000

08003130 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	460b      	mov	r3, r1
 800313e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff f80a 	bl	8002158 <HAL_GetTick>
 8003144:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b20      	cmp	r3, #32
 8003154:	f040 8111 	bne.w	800337a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2319      	movs	r3, #25
 800315e:	2201      	movs	r2, #1
 8003160:	4988      	ldr	r1, [pc, #544]	; (8003384 <HAL_I2C_IsDeviceReady+0x254>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f994 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
 8003170:	e104      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_I2C_IsDeviceReady+0x50>
 800317c:	2302      	movs	r3, #2
 800317e:	e0fd      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d007      	beq.n	80031a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2224      	movs	r2, #36	; 0x24
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a70      	ldr	r2, [pc, #448]	; (8003388 <HAL_I2C_IsDeviceReady+0x258>)
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f952 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003200:	d103      	bne.n	800320a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0b6      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800321c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe ff9b 	bl	8002158 <HAL_GetTick>
 8003222:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003252:	e025      	b.n	80032a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe ff80 	bl	8002158 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <HAL_I2C_IsDeviceReady+0x13a>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	22a0      	movs	r2, #160	; 0xa0
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2ba0      	cmp	r3, #160	; 0xa0
 80032aa:	d005      	beq.n	80032b8 <HAL_I2C_IsDeviceReady+0x188>
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <HAL_I2C_IsDeviceReady+0x188>
 80032b2:	7dbb      	ldrb	r3, [r7, #22]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0cd      	beq.n	8003254 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d129      	bne.n	8003322 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	2319      	movs	r3, #25
 80032fa:	2201      	movs	r2, #1
 80032fc:	4921      	ldr	r1, [pc, #132]	; (8003384 <HAL_I2C_IsDeviceReady+0x254>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f8c6 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e036      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e02c      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	490f      	ldr	r1, [pc, #60]	; (8003384 <HAL_I2C_IsDeviceReady+0x254>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8a2 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e012      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3301      	adds	r3, #1
 800335a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	f4ff af32 	bcc.w	80031ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	00100002 	.word	0x00100002
 8003388:	ffff0000 	.word	0xffff0000

0800338c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d006      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d003      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b4:	d108      	bne.n	80033c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00b      	b.n	80033e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d107      	bne.n	80033e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f84f 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003406:	d103      	bne.n	8003410 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e035      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341c:	d108      	bne.n	8003430 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	e01b      	b.n	8003468 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	11db      	asrs	r3, r3, #7
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 0306 	and.w	r3, r3, #6
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f063 030f 	orn	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <I2C_MasterRequestWrite+0xfc>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f898 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e010      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4907      	ldr	r1, [pc, #28]	; (800348c <I2C_MasterRequestWrite+0x100>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f888 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	00010008 	.word	0x00010008
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	e048      	b.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d044      	beq.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fe55 	bl	8002158 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d139      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10d      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	e00c      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d116      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e023      	b.n	800357c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <I2C_WaitOnFlagUntilTimeout+0xca>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	e00c      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d093      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003592:	e071      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a2:	d123      	bne.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e067      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d041      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fdb0 	bl	8002158 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d136      	bne.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10c      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e021      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10c      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e00b      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f af6d 	bne.w	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d0:	e034      	b.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f886 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e034      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d028      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fd35 	bl	8002158 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11d      	bne.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d016      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d1c3      	bne.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f83e 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fced 	bl	8002158 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d11b      	bne.n	8003834 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003804:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e272      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8087 	beq.w	800396e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003860:	4b92      	ldr	r3, [pc, #584]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00c      	beq.n	8003886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800386c:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d112      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
 8003878:	4b8c      	ldr	r3, [pc, #560]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d10b      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06c      	beq.n	800396c <HAL_RCC_OscConfig+0x12c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e24c      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x76>
 80038a8:	4b80      	ldr	r3, [pc, #512]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a7f      	ldr	r2, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e02e      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7a      	ldr	r2, [pc, #488]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b78      	ldr	r3, [pc, #480]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a77      	ldr	r2, [pc, #476]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xbc>
 80038e2:	4b72      	ldr	r3, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a71      	ldr	r2, [pc, #452]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038fc:	4b6b      	ldr	r3, [pc, #428]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6a      	ldr	r2, [pc, #424]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a67      	ldr	r2, [pc, #412]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe fc1c 	bl	8002158 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe fc18 	bl	8002158 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e200      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xe4>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fc08 	bl	8002158 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe fc04 	bl	8002158 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1ec      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x10c>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003986:	4b49      	ldr	r3, [pc, #292]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1c0      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4939      	ldr	r1, [pc, #228]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fbbd 	bl	8002158 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe fbb9 	bl	8002158 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1a1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4927      	ldr	r1, [pc, #156]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x270>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fb9c 	bl	8002158 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fe fb98 	bl	8002158 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e180      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03a      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d019      	beq.n	8003a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fb7c 	bl	8002158 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fe fb78 	bl	8002158 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e160      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f000 face 	bl	8004024 <RCC_Delay>
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fe fb62 	bl	8002158 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fe fb5e 	bl	8002158 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d908      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e146      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	42420000 	.word	0x42420000
 8003ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e9      	bne.n	8003a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a6 	beq.w	8003c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad6:	4b8b      	ldr	r3, [pc, #556]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a87      	ldr	r2, [pc, #540]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]
 8003aee:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b82      	ldr	r3, [pc, #520]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fb1f 	bl	8002158 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe fb1b 	bl	8002158 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	; 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e103      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b75      	ldr	r3, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x312>
 8003b44:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	e02d      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b5a:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a69      	ldr	r2, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	e01c      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x356>
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a60      	ldr	r2, [pc, #384]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e00b      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d015      	beq.n	8003be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe facf 	bl	8002158 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe facb 	bl	8002158 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0b1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ee      	beq.n	8003bbe <HAL_RCC_OscConfig+0x37e>
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fab9 	bl	8002158 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe fab5 	bl	8002158 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e09b      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c00:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ee      	bne.n	8003bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8087 	beq.w	8003d36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d061      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d146      	bne.n	8003cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe fa89 	bl	8002158 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe fa85 	bl	8002158 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e06d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5c:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4921      	ldr	r1, [pc, #132]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a19      	ldr	r1, [r3, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	430b      	orrs	r3, r1
 8003c96:	491b      	ldr	r1, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fa59 	bl	8002158 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fa55 	bl	8002158 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x46a>
 8003cc8:	e035      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fa42 	bl	8002158 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fa3e 	bl	8002158 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e026      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x498>
 8003cf6:	e01e      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e019      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x500>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	4965      	ldr	r1, [pc, #404]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e34:	f7fe f990 	bl	8002158 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe f98c 	bl	8002158 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4922      	ldr	r1, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1cc>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe f8ee 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08007e88 	.word	0x08007e88
 8003f10:	20000028 	.word	0x20000028
 8003f14:	2000002c 	.word	0x2000002c

08003f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f32:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x30>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x36>
 8003f46:	e027      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	613b      	str	r3, [r7, #16]
      break;
 8003f4c:	e027      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	0c5b      	lsrs	r3, r3, #17
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	4a11      	ldr	r2, [pc, #68]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7a:	fb03 f202 	mul.w	r2, r3, r2
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e004      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	613b      	str	r3, [r7, #16]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f9a:	613b      	str	r3, [r7, #16]
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	693b      	ldr	r3, [r7, #16]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	007a1200 	.word	0x007a1200
 8003fb4:	08007ea0 	.word	0x08007ea0
 8003fb8:	08007eb0 	.word	0x08007eb0
 8003fbc:	003d0900 	.word	0x003d0900

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000028 	.word	0x20000028

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd8:	f7ff fff2 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08007e98 	.word	0x08007e98

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004000:	f7ff ffde 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	08007e98 	.word	0x08007e98

08004024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <RCC_Delay+0x34>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0a      	ldr	r2, [pc, #40]	; (800405c <RCC_Delay+0x38>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0a5b      	lsrs	r3, r3, #9
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004040:	bf00      	nop
  }
  while (Delay --);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	60fa      	str	r2, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <RCC_Delay+0x1c>
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	20000028 	.word	0x20000028
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e042      	b.n	80040f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fdd0 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 ffb3 	bl	8005010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b20      	cmp	r3, #32
 800411e:	d16d      	bne.n	80041fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Transmit+0x2c>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e066      	b.n	80041fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	; 0x21
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413e:	f7fe f80b 	bl	8002158 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x6c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004174:	e02a      	b.n	80041cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fc41 	bl	8004a08 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e036      	b.n	80041fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3302      	adds	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e007      	b.n	80041be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1cf      	bne.n	8004176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2200      	movs	r2, #0
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fc11 	bl	8004a08 <UART_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e006      	b.n	80041fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b20      	cmp	r3, #32
 800421e:	d112      	bne.n	8004246 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_UART_Receive_IT+0x26>
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e00b      	b.n	8004248 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	461a      	mov	r2, r3
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fc51 	bl	8004ae4 <UART_Start_Receive_IT>
 8004242:	4603      	mov	r3, r0
 8004244:	e000      	b.n	8004248 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	d112      	bne.n	8004290 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_Receive_DMA+0x26>
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00b      	b.n	8004292 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	461a      	mov	r2, r3
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fc66 	bl	8004b58 <UART_Start_Receive_DMA>
 800428c:	4603      	mov	r3, r0
 800428e:	e000      	b.n	8004292 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b0ba      	sub	sp, #232	; 0xe8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fdca 	bl	8004e94 <UART_Receive_IT>
      return;
 8004300:	e25b      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80de 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
 800430c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80d1 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f043 0202 	orr.w	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
 800437a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f043 0208 	orr.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 81f2 	beq.w	80047b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fd55 	bl	8004e94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_UART_IRQHandler+0x17a>
 800440e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04f      	beq.n	80044b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fc5f 	bl	8004cda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d041      	beq.n	80044ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004456:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800445a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800446e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1d9      	bne.n	800442a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d013      	beq.n	80044a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	4a7e      	ldr	r2, [pc, #504]	; (800467c <HAL_UART_IRQHandler+0x3e0>)
 8004484:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe f896 	bl	80025bc <HAL_DMA_Abort_IT>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00e      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f99c 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00a      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f998 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e006      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f994 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044c2:	e175      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	bf00      	nop
    return;
 80044c6:	e173      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 814f 	bne.w	8004770 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8148 	beq.w	8004770 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8141 	beq.w	8004770 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80b6 	beq.w	8004680 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8145 	beq.w	80047b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800452e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004532:	429a      	cmp	r2, r3
 8004534:	f080 813e 	bcs.w	80047b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800453e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b20      	cmp	r3, #32
 8004548:	f000 8088 	beq.w	800465c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004578:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800457c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004584:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1d9      	bne.n	800454c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3314      	adds	r3, #20
 80045b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e1      	bne.n	8004598 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e3      	bne.n	80045d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800462a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462c:	f023 0310 	bic.w	r3, r3, #16
 8004630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800463e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004640:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e3      	bne.n	800461a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd ff74 	bl	8002544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466a:	b29b      	uxth	r3, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8bf 	bl	80047f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004678:	e09c      	b.n	80047b4 <HAL_UART_IRQHandler+0x518>
 800467a:	bf00      	nop
 800467c:	08004d9f 	.word	0x08004d9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 808e 	beq.w	80047b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800469c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8089 	beq.w	80047b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ca:	647a      	str	r2, [r7, #68]	; 0x44
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e3      	bne.n	80046a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	623b      	str	r3, [r7, #32]
   return(result);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004702:	633a      	str	r2, [r7, #48]	; 0x30
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60fb      	str	r3, [r7, #12]
   return(result);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e3      	bne.n	8004724 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f844 	bl	80047f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800476e:	e023      	b.n	80047b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_UART_IRQHandler+0x4f4>
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb1c 	bl	8004dc6 <UART_Transmit_IT>
    return;
 800478e:	e014      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00e      	beq.n	80047ba <HAL_UART_IRQHandler+0x51e>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb5b 	bl	8004e64 <UART_EndTransmit_IT>
    return;
 80047ae:	e004      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
    return;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
      return;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
      return;
 80047b8:	bf00      	nop
  }
}
 80047ba:	37e8      	adds	r7, #232	; 0xe8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b09c      	sub	sp, #112	; 0x70
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d172      	bne.n	800490e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	2200      	movs	r2, #0
 800482c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800482e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800483e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800484e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004850:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800485c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e5      	bne.n	800482e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	667b      	str	r3, [r7, #100]	; 0x64
 800487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004882:	647a      	str	r2, [r7, #68]	; 0x44
 8004884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	623b      	str	r3, [r7, #32]
   return(result);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ac:	663b      	str	r3, [r7, #96]	; 0x60
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048b6:	633a      	str	r2, [r7, #48]	; 0x30
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d119      	bne.n	800490e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048fa:	61fa      	str	r2, [r7, #28]
 80048fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	617b      	str	r3, [r7, #20]
   return(result);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	2200      	movs	r2, #0
 8004912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004920:	4619      	mov	r1, r3
 8004922:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004924:	f7ff ff67 	bl	80047f6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004928:	e002      	b.n	8004930 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800492a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800492c:	f7fd f892 	bl	8001a54 <HAL_UART_RxCpltCallback>
}
 8004930:	bf00      	nop
 8004932:	3770      	adds	r7, #112	; 0x70
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	2b01      	cmp	r3, #1
 8004952:	d108      	bne.n	8004966 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	4619      	mov	r1, r3
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff ff49 	bl	80047f6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004964:	e002      	b.n	800496c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff33 	bl	80047d2 <HAL_UART_RxHalfCpltCallback>
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b21      	cmp	r3, #33	; 0x21
 80049a6:	d108      	bne.n	80049ba <UART_DMAError+0x46>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2200      	movs	r2, #0
 80049b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049b4:	68b8      	ldr	r0, [r7, #8]
 80049b6:	f000 f969 	bl	8004c8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b22      	cmp	r3, #34	; 0x22
 80049da:	d108      	bne.n	80049ee <UART_DMAError+0x7a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2200      	movs	r2, #0
 80049e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80049e8:	68b8      	ldr	r0, [r7, #8]
 80049ea:	f000 f976 	bl	8004cda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	f043 0210 	orr.w	r2, r3, #16
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	f7ff fef2 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b090      	sub	sp, #64	; 0x40
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a18:	e050      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d04c      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a28:	f7fd fb96 	bl	8002158 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d241      	bcs.n	8004abc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a58:	637a      	str	r2, [r7, #52]	; 0x34
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e5      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3314      	adds	r3, #20
 8004a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a8c:	623a      	str	r2, [r7, #32]
 8004a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	6a3a      	ldr	r2, [r7, #32]
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e5      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e00f      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d09f      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3740      	adds	r7, #64	; 0x40
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2222      	movs	r2, #34	; 0x22
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0220 	orr.w	r2, r2, #32
 8004b48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
	...

08004b58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b098      	sub	sp, #96	; 0x60
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2222      	movs	r2, #34	; 0x22
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	4a3e      	ldr	r2, [pc, #248]	; (8004c80 <UART_Start_Receive_DMA+0x128>)
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	4a3d      	ldr	r2, [pc, #244]	; (8004c84 <UART_Start_Receive_DMA+0x12c>)
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <UART_Start_Receive_DMA+0x130>)
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ba0:	f107 0308 	add.w	r3, r7, #8
 8004ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	f7fd fc64 	bl	8002484 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d019      	beq.n	8004c0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	657b      	str	r3, [r7, #84]	; 0x54
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	617b      	str	r3, [r7, #20]
   return(result);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c58:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c62:	627a      	str	r2, [r7, #36]	; 0x24
 8004c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6a39      	ldr	r1, [r7, #32]
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3760      	adds	r7, #96	; 0x60
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	0800480d 	.word	0x0800480d
 8004c84:	08004939 	.word	0x08004939
 8004c88:	08004975 	.word	0x08004975

08004c8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	61ba      	str	r2, [r7, #24]
 8004cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6979      	ldr	r1, [r7, #20]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e5      	bne.n	8004c94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004cd0:	bf00      	nop
 8004cd2:	3724      	adds	r7, #36	; 0x24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b095      	sub	sp, #84	; 0x54
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d02:	643a      	str	r2, [r7, #64]	; 0x40
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d119      	bne.n	8004d86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d72:	61ba      	str	r2, [r7, #24]
 8004d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d94:	bf00      	nop
 8004d96:	3754      	adds	r7, #84	; 0x54
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff fd13 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b21      	cmp	r3, #33	; 0x21
 8004dd8:	d13e      	bne.n	8004e58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d114      	bne.n	8004e0e <UART_Transmit_IT+0x48>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d110      	bne.n	8004e0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	621a      	str	r2, [r3, #32]
 8004e0c:	e008      	b.n	8004e20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6211      	str	r1, [r2, #32]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fc9b 	bl	80047c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	; 0x30
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b22      	cmp	r3, #34	; 0x22
 8004ea6:	f040 80ae 	bne.w	8005006 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d117      	bne.n	8004ee4 <UART_Receive_IT+0x50>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee2:	e026      	b.n	8004f32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	d007      	beq.n	8004f08 <UART_Receive_IT+0x74>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <UART_Receive_IT+0x82>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e008      	b.n	8004f28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d15d      	bne.n	8005002 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0220 	bic.w	r2, r2, #32
 8004f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d135      	bne.n	8004ff8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f023 0310 	bic.w	r3, r3, #16
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	623a      	str	r2, [r7, #32]
 8004fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	69f9      	ldr	r1, [r7, #28]
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d10a      	bne.n	8004fea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fc00 	bl	80047f6 <HAL_UARTEx_RxEventCallback>
 8004ff6:	e002      	b.n	8004ffe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fc fd2b 	bl	8001a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e002      	b.n	8005008 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3730      	adds	r7, #48	; 0x30
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800504a:	f023 030c 	bic.w	r3, r3, #12
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	430b      	orrs	r3, r1
 8005056:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <UART_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe ffc0 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	e002      	b.n	8005086 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe ffa8 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8005084:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009a      	lsls	r2, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <UART_SetConfig+0x118>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	0119      	lsls	r1, r3, #4
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009a      	lsls	r2, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <UART_SetConfig+0x118>)
 80050be:	fba3 0302 	umull	r0, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2064      	movs	r0, #100	; 0x64
 80050c6:	fb00 f303 	mul.w	r3, r0, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	3332      	adds	r3, #50	; 0x32
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <UART_SetConfig+0x118>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050dc:	4419      	add	r1, r3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009a      	lsls	r2, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <UART_SetConfig+0x118>)
 80050f6:	fba3 0302 	umull	r0, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2064      	movs	r0, #100	; 0x64
 80050fe:	fb00 f303 	mul.w	r3, r0, r3
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	3332      	adds	r3, #50	; 0x32
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <UART_SetConfig+0x118>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	440a      	add	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40013800 	.word	0x40013800
 8005128:	51eb851f 	.word	0x51eb851f

0800512c <__cvt>:
 800512c:	2b00      	cmp	r3, #0
 800512e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005132:	461f      	mov	r7, r3
 8005134:	bfbb      	ittet	lt
 8005136:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800513a:	461f      	movlt	r7, r3
 800513c:	2300      	movge	r3, #0
 800513e:	232d      	movlt	r3, #45	; 0x2d
 8005140:	b088      	sub	sp, #32
 8005142:	4614      	mov	r4, r2
 8005144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005146:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005148:	7013      	strb	r3, [r2, #0]
 800514a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800514c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005150:	f023 0820 	bic.w	r8, r3, #32
 8005154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005158:	d005      	beq.n	8005166 <__cvt+0x3a>
 800515a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800515e:	d100      	bne.n	8005162 <__cvt+0x36>
 8005160:	3501      	adds	r5, #1
 8005162:	2302      	movs	r3, #2
 8005164:	e000      	b.n	8005168 <__cvt+0x3c>
 8005166:	2303      	movs	r3, #3
 8005168:	aa07      	add	r2, sp, #28
 800516a:	9204      	str	r2, [sp, #16]
 800516c:	aa06      	add	r2, sp, #24
 800516e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005172:	e9cd 3500 	strd	r3, r5, [sp]
 8005176:	4622      	mov	r2, r4
 8005178:	463b      	mov	r3, r7
 800517a:	f001 f8a5 	bl	80062c8 <_dtoa_r>
 800517e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005182:	4606      	mov	r6, r0
 8005184:	d102      	bne.n	800518c <__cvt+0x60>
 8005186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005188:	07db      	lsls	r3, r3, #31
 800518a:	d522      	bpl.n	80051d2 <__cvt+0xa6>
 800518c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005190:	eb06 0905 	add.w	r9, r6, r5
 8005194:	d110      	bne.n	80051b8 <__cvt+0x8c>
 8005196:	7833      	ldrb	r3, [r6, #0]
 8005198:	2b30      	cmp	r3, #48	; 0x30
 800519a:	d10a      	bne.n	80051b2 <__cvt+0x86>
 800519c:	2200      	movs	r2, #0
 800519e:	2300      	movs	r3, #0
 80051a0:	4620      	mov	r0, r4
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb fc0a 	bl	80009bc <__aeabi_dcmpeq>
 80051a8:	b918      	cbnz	r0, 80051b2 <__cvt+0x86>
 80051aa:	f1c5 0501 	rsb	r5, r5, #1
 80051ae:	f8ca 5000 	str.w	r5, [sl]
 80051b2:	f8da 3000 	ldr.w	r3, [sl]
 80051b6:	4499      	add	r9, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	2300      	movs	r3, #0
 80051bc:	4620      	mov	r0, r4
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb fbfc 	bl	80009bc <__aeabi_dcmpeq>
 80051c4:	b108      	cbz	r0, 80051ca <__cvt+0x9e>
 80051c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80051ca:	2230      	movs	r2, #48	; 0x30
 80051cc:	9b07      	ldr	r3, [sp, #28]
 80051ce:	454b      	cmp	r3, r9
 80051d0:	d307      	bcc.n	80051e2 <__cvt+0xb6>
 80051d2:	4630      	mov	r0, r6
 80051d4:	9b07      	ldr	r3, [sp, #28]
 80051d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051d8:	1b9b      	subs	r3, r3, r6
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	b008      	add	sp, #32
 80051de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e2:	1c59      	adds	r1, r3, #1
 80051e4:	9107      	str	r1, [sp, #28]
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e7f0      	b.n	80051cc <__cvt+0xa0>

080051ea <__exponent>:
 80051ea:	4603      	mov	r3, r0
 80051ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ee:	2900      	cmp	r1, #0
 80051f0:	f803 2b02 	strb.w	r2, [r3], #2
 80051f4:	bfb6      	itet	lt
 80051f6:	222d      	movlt	r2, #45	; 0x2d
 80051f8:	222b      	movge	r2, #43	; 0x2b
 80051fa:	4249      	neglt	r1, r1
 80051fc:	2909      	cmp	r1, #9
 80051fe:	7042      	strb	r2, [r0, #1]
 8005200:	dd2a      	ble.n	8005258 <__exponent+0x6e>
 8005202:	f10d 0207 	add.w	r2, sp, #7
 8005206:	4617      	mov	r7, r2
 8005208:	260a      	movs	r6, #10
 800520a:	fb91 f5f6 	sdiv	r5, r1, r6
 800520e:	4694      	mov	ip, r2
 8005210:	fb06 1415 	mls	r4, r6, r5, r1
 8005214:	3430      	adds	r4, #48	; 0x30
 8005216:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800521a:	460c      	mov	r4, r1
 800521c:	2c63      	cmp	r4, #99	; 0x63
 800521e:	4629      	mov	r1, r5
 8005220:	f102 32ff 	add.w	r2, r2, #4294967295
 8005224:	dcf1      	bgt.n	800520a <__exponent+0x20>
 8005226:	3130      	adds	r1, #48	; 0x30
 8005228:	f1ac 0402 	sub.w	r4, ip, #2
 800522c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005230:	4622      	mov	r2, r4
 8005232:	1c41      	adds	r1, r0, #1
 8005234:	42ba      	cmp	r2, r7
 8005236:	d30a      	bcc.n	800524e <__exponent+0x64>
 8005238:	f10d 0209 	add.w	r2, sp, #9
 800523c:	eba2 020c 	sub.w	r2, r2, ip
 8005240:	42bc      	cmp	r4, r7
 8005242:	bf88      	it	hi
 8005244:	2200      	movhi	r2, #0
 8005246:	4413      	add	r3, r2
 8005248:	1a18      	subs	r0, r3, r0
 800524a:	b003      	add	sp, #12
 800524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005252:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005256:	e7ed      	b.n	8005234 <__exponent+0x4a>
 8005258:	2330      	movs	r3, #48	; 0x30
 800525a:	3130      	adds	r1, #48	; 0x30
 800525c:	7083      	strb	r3, [r0, #2]
 800525e:	70c1      	strb	r1, [r0, #3]
 8005260:	1d03      	adds	r3, r0, #4
 8005262:	e7f1      	b.n	8005248 <__exponent+0x5e>

08005264 <_printf_float>:
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	b091      	sub	sp, #68	; 0x44
 800526a:	460c      	mov	r4, r1
 800526c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005270:	4616      	mov	r6, r2
 8005272:	461f      	mov	r7, r3
 8005274:	4605      	mov	r5, r0
 8005276:	f000 fef7 	bl	8006068 <_localeconv_r>
 800527a:	6803      	ldr	r3, [r0, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	f7fa ff70 	bl	8000164 <strlen>
 8005284:	2300      	movs	r3, #0
 8005286:	930e      	str	r3, [sp, #56]	; 0x38
 8005288:	f8d8 3000 	ldr.w	r3, [r8]
 800528c:	900a      	str	r0, [sp, #40]	; 0x28
 800528e:	3307      	adds	r3, #7
 8005290:	f023 0307 	bic.w	r3, r3, #7
 8005294:	f103 0208 	add.w	r2, r3, #8
 8005298:	f894 9018 	ldrb.w	r9, [r4, #24]
 800529c:	f8d4 b000 	ldr.w	fp, [r4]
 80052a0:	f8c8 2000 	str.w	r2, [r8]
 80052a4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80052a8:	4652      	mov	r2, sl
 80052aa:	4643      	mov	r3, r8
 80052ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052b0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80052b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052b6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ba:	4650      	mov	r0, sl
 80052bc:	4b9c      	ldr	r3, [pc, #624]	; (8005530 <_printf_float+0x2cc>)
 80052be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052c0:	f7fb fbae 	bl	8000a20 <__aeabi_dcmpun>
 80052c4:	bb70      	cbnz	r0, 8005324 <_printf_float+0xc0>
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	4650      	mov	r0, sl
 80052cc:	4b98      	ldr	r3, [pc, #608]	; (8005530 <_printf_float+0x2cc>)
 80052ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052d0:	f7fb fb88 	bl	80009e4 <__aeabi_dcmple>
 80052d4:	bb30      	cbnz	r0, 8005324 <_printf_float+0xc0>
 80052d6:	2200      	movs	r2, #0
 80052d8:	2300      	movs	r3, #0
 80052da:	4650      	mov	r0, sl
 80052dc:	4641      	mov	r1, r8
 80052de:	f7fb fb77 	bl	80009d0 <__aeabi_dcmplt>
 80052e2:	b110      	cbz	r0, 80052ea <_printf_float+0x86>
 80052e4:	232d      	movs	r3, #45	; 0x2d
 80052e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ea:	4a92      	ldr	r2, [pc, #584]	; (8005534 <_printf_float+0x2d0>)
 80052ec:	4b92      	ldr	r3, [pc, #584]	; (8005538 <_printf_float+0x2d4>)
 80052ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052f2:	bf94      	ite	ls
 80052f4:	4690      	movls	r8, r2
 80052f6:	4698      	movhi	r8, r3
 80052f8:	2303      	movs	r3, #3
 80052fa:	f04f 0a00 	mov.w	sl, #0
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	f02b 0304 	bic.w	r3, fp, #4
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	4633      	mov	r3, r6
 8005308:	4621      	mov	r1, r4
 800530a:	4628      	mov	r0, r5
 800530c:	9700      	str	r7, [sp, #0]
 800530e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005310:	f000 f9d6 	bl	80056c0 <_printf_common>
 8005314:	3001      	adds	r0, #1
 8005316:	f040 8090 	bne.w	800543a <_printf_float+0x1d6>
 800531a:	f04f 30ff 	mov.w	r0, #4294967295
 800531e:	b011      	add	sp, #68	; 0x44
 8005320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	4652      	mov	r2, sl
 8005326:	4643      	mov	r3, r8
 8005328:	4650      	mov	r0, sl
 800532a:	4641      	mov	r1, r8
 800532c:	f7fb fb78 	bl	8000a20 <__aeabi_dcmpun>
 8005330:	b148      	cbz	r0, 8005346 <_printf_float+0xe2>
 8005332:	f1b8 0f00 	cmp.w	r8, #0
 8005336:	bfb8      	it	lt
 8005338:	232d      	movlt	r3, #45	; 0x2d
 800533a:	4a80      	ldr	r2, [pc, #512]	; (800553c <_printf_float+0x2d8>)
 800533c:	bfb8      	it	lt
 800533e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <_printf_float+0x2dc>)
 8005344:	e7d3      	b.n	80052ee <_printf_float+0x8a>
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	d142      	bne.n	80053d6 <_printf_float+0x172>
 8005350:	2306      	movs	r3, #6
 8005352:	6063      	str	r3, [r4, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	9206      	str	r2, [sp, #24]
 8005358:	aa0e      	add	r2, sp, #56	; 0x38
 800535a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800535e:	aa0d      	add	r2, sp, #52	; 0x34
 8005360:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005364:	9203      	str	r2, [sp, #12]
 8005366:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800536a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	6863      	ldr	r3, [r4, #4]
 8005372:	4652      	mov	r2, sl
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4628      	mov	r0, r5
 8005378:	4643      	mov	r3, r8
 800537a:	910b      	str	r1, [sp, #44]	; 0x2c
 800537c:	f7ff fed6 	bl	800512c <__cvt>
 8005380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005382:	4680      	mov	r8, r0
 8005384:	2947      	cmp	r1, #71	; 0x47
 8005386:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005388:	d108      	bne.n	800539c <_printf_float+0x138>
 800538a:	1cc8      	adds	r0, r1, #3
 800538c:	db02      	blt.n	8005394 <_printf_float+0x130>
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	4299      	cmp	r1, r3
 8005392:	dd40      	ble.n	8005416 <_printf_float+0x1b2>
 8005394:	f1a9 0902 	sub.w	r9, r9, #2
 8005398:	fa5f f989 	uxtb.w	r9, r9
 800539c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053a0:	d81f      	bhi.n	80053e2 <_printf_float+0x17e>
 80053a2:	464a      	mov	r2, r9
 80053a4:	3901      	subs	r1, #1
 80053a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053aa:	910d      	str	r1, [sp, #52]	; 0x34
 80053ac:	f7ff ff1d 	bl	80051ea <__exponent>
 80053b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053b2:	4682      	mov	sl, r0
 80053b4:	1813      	adds	r3, r2, r0
 80053b6:	2a01      	cmp	r2, #1
 80053b8:	6123      	str	r3, [r4, #16]
 80053ba:	dc02      	bgt.n	80053c2 <_printf_float+0x15e>
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	d501      	bpl.n	80053c6 <_printf_float+0x162>
 80053c2:	3301      	adds	r3, #1
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d09b      	beq.n	8005306 <_printf_float+0xa2>
 80053ce:	232d      	movs	r3, #45	; 0x2d
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d4:	e797      	b.n	8005306 <_printf_float+0xa2>
 80053d6:	2947      	cmp	r1, #71	; 0x47
 80053d8:	d1bc      	bne.n	8005354 <_printf_float+0xf0>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ba      	bne.n	8005354 <_printf_float+0xf0>
 80053de:	2301      	movs	r3, #1
 80053e0:	e7b7      	b.n	8005352 <_printf_float+0xee>
 80053e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80053e6:	d118      	bne.n	800541a <_printf_float+0x1b6>
 80053e8:	2900      	cmp	r1, #0
 80053ea:	6863      	ldr	r3, [r4, #4]
 80053ec:	dd0b      	ble.n	8005406 <_printf_float+0x1a2>
 80053ee:	6121      	str	r1, [r4, #16]
 80053f0:	b913      	cbnz	r3, 80053f8 <_printf_float+0x194>
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	07d0      	lsls	r0, r2, #31
 80053f6:	d502      	bpl.n	80053fe <_printf_float+0x19a>
 80053f8:	3301      	adds	r3, #1
 80053fa:	440b      	add	r3, r1
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	f04f 0a00 	mov.w	sl, #0
 8005402:	65a1      	str	r1, [r4, #88]	; 0x58
 8005404:	e7df      	b.n	80053c6 <_printf_float+0x162>
 8005406:	b913      	cbnz	r3, 800540e <_printf_float+0x1aa>
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	07d2      	lsls	r2, r2, #31
 800540c:	d501      	bpl.n	8005412 <_printf_float+0x1ae>
 800540e:	3302      	adds	r3, #2
 8005410:	e7f4      	b.n	80053fc <_printf_float+0x198>
 8005412:	2301      	movs	r3, #1
 8005414:	e7f2      	b.n	80053fc <_printf_float+0x198>
 8005416:	f04f 0967 	mov.w	r9, #103	; 0x67
 800541a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800541c:	4299      	cmp	r1, r3
 800541e:	db05      	blt.n	800542c <_printf_float+0x1c8>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	6121      	str	r1, [r4, #16]
 8005424:	07d8      	lsls	r0, r3, #31
 8005426:	d5ea      	bpl.n	80053fe <_printf_float+0x19a>
 8005428:	1c4b      	adds	r3, r1, #1
 800542a:	e7e7      	b.n	80053fc <_printf_float+0x198>
 800542c:	2900      	cmp	r1, #0
 800542e:	bfcc      	ite	gt
 8005430:	2201      	movgt	r2, #1
 8005432:	f1c1 0202 	rsble	r2, r1, #2
 8005436:	4413      	add	r3, r2
 8005438:	e7e0      	b.n	80053fc <_printf_float+0x198>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	055a      	lsls	r2, r3, #21
 800543e:	d407      	bmi.n	8005450 <_printf_float+0x1ec>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	4642      	mov	r2, r8
 8005444:	4631      	mov	r1, r6
 8005446:	4628      	mov	r0, r5
 8005448:	47b8      	blx	r7
 800544a:	3001      	adds	r0, #1
 800544c:	d12b      	bne.n	80054a6 <_printf_float+0x242>
 800544e:	e764      	b.n	800531a <_printf_float+0xb6>
 8005450:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005454:	f240 80dd 	bls.w	8005612 <_printf_float+0x3ae>
 8005458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800545c:	2200      	movs	r2, #0
 800545e:	2300      	movs	r3, #0
 8005460:	f7fb faac 	bl	80009bc <__aeabi_dcmpeq>
 8005464:	2800      	cmp	r0, #0
 8005466:	d033      	beq.n	80054d0 <_printf_float+0x26c>
 8005468:	2301      	movs	r3, #1
 800546a:	4631      	mov	r1, r6
 800546c:	4628      	mov	r0, r5
 800546e:	4a35      	ldr	r2, [pc, #212]	; (8005544 <_printf_float+0x2e0>)
 8005470:	47b8      	blx	r7
 8005472:	3001      	adds	r0, #1
 8005474:	f43f af51 	beq.w	800531a <_printf_float+0xb6>
 8005478:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800547c:	429a      	cmp	r2, r3
 800547e:	db02      	blt.n	8005486 <_printf_float+0x222>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	07d8      	lsls	r0, r3, #31
 8005484:	d50f      	bpl.n	80054a6 <_printf_float+0x242>
 8005486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800548a:	4631      	mov	r1, r6
 800548c:	4628      	mov	r0, r5
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	f43f af42 	beq.w	800531a <_printf_float+0xb6>
 8005496:	f04f 0800 	mov.w	r8, #0
 800549a:	f104 091a 	add.w	r9, r4, #26
 800549e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a0:	3b01      	subs	r3, #1
 80054a2:	4543      	cmp	r3, r8
 80054a4:	dc09      	bgt.n	80054ba <_printf_float+0x256>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	079b      	lsls	r3, r3, #30
 80054aa:	f100 8104 	bmi.w	80056b6 <_printf_float+0x452>
 80054ae:	68e0      	ldr	r0, [r4, #12]
 80054b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054b2:	4298      	cmp	r0, r3
 80054b4:	bfb8      	it	lt
 80054b6:	4618      	movlt	r0, r3
 80054b8:	e731      	b.n	800531e <_printf_float+0xba>
 80054ba:	2301      	movs	r3, #1
 80054bc:	464a      	mov	r2, r9
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f af28 	beq.w	800531a <_printf_float+0xb6>
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	e7e6      	b.n	800549e <_printf_float+0x23a>
 80054d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dc38      	bgt.n	8005548 <_printf_float+0x2e4>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4631      	mov	r1, r6
 80054da:	4628      	mov	r0, r5
 80054dc:	4a19      	ldr	r2, [pc, #100]	; (8005544 <_printf_float+0x2e0>)
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	f43f af1a 	beq.w	800531a <_printf_float+0xb6>
 80054e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054ea:	4313      	orrs	r3, r2
 80054ec:	d102      	bne.n	80054f4 <_printf_float+0x290>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	07d9      	lsls	r1, r3, #31
 80054f2:	d5d8      	bpl.n	80054a6 <_printf_float+0x242>
 80054f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f af0b 	beq.w	800531a <_printf_float+0xb6>
 8005504:	f04f 0900 	mov.w	r9, #0
 8005508:	f104 0a1a 	add.w	sl, r4, #26
 800550c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800550e:	425b      	negs	r3, r3
 8005510:	454b      	cmp	r3, r9
 8005512:	dc01      	bgt.n	8005518 <_printf_float+0x2b4>
 8005514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005516:	e794      	b.n	8005442 <_printf_float+0x1de>
 8005518:	2301      	movs	r3, #1
 800551a:	4652      	mov	r2, sl
 800551c:	4631      	mov	r1, r6
 800551e:	4628      	mov	r0, r5
 8005520:	47b8      	blx	r7
 8005522:	3001      	adds	r0, #1
 8005524:	f43f aef9 	beq.w	800531a <_printf_float+0xb6>
 8005528:	f109 0901 	add.w	r9, r9, #1
 800552c:	e7ee      	b.n	800550c <_printf_float+0x2a8>
 800552e:	bf00      	nop
 8005530:	7fefffff 	.word	0x7fefffff
 8005534:	08007fb3 	.word	0x08007fb3
 8005538:	08007fb7 	.word	0x08007fb7
 800553c:	08007fbb 	.word	0x08007fbb
 8005540:	08007fbf 	.word	0x08007fbf
 8005544:	08007fc3 	.word	0x08007fc3
 8005548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800554c:	429a      	cmp	r2, r3
 800554e:	bfa8      	it	ge
 8005550:	461a      	movge	r2, r3
 8005552:	2a00      	cmp	r2, #0
 8005554:	4691      	mov	r9, r2
 8005556:	dc37      	bgt.n	80055c8 <_printf_float+0x364>
 8005558:	f04f 0b00 	mov.w	fp, #0
 800555c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005560:	f104 021a 	add.w	r2, r4, #26
 8005564:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005568:	ebaa 0309 	sub.w	r3, sl, r9
 800556c:	455b      	cmp	r3, fp
 800556e:	dc33      	bgt.n	80055d8 <_printf_float+0x374>
 8005570:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005574:	429a      	cmp	r2, r3
 8005576:	db3b      	blt.n	80055f0 <_printf_float+0x38c>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	07da      	lsls	r2, r3, #31
 800557c:	d438      	bmi.n	80055f0 <_printf_float+0x38c>
 800557e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005582:	eba2 0903 	sub.w	r9, r2, r3
 8005586:	eba2 020a 	sub.w	r2, r2, sl
 800558a:	4591      	cmp	r9, r2
 800558c:	bfa8      	it	ge
 800558e:	4691      	movge	r9, r2
 8005590:	f1b9 0f00 	cmp.w	r9, #0
 8005594:	dc34      	bgt.n	8005600 <_printf_float+0x39c>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800559e:	f104 0a1a 	add.w	sl, r4, #26
 80055a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	eba3 0309 	sub.w	r3, r3, r9
 80055ac:	4543      	cmp	r3, r8
 80055ae:	f77f af7a 	ble.w	80054a6 <_printf_float+0x242>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4652      	mov	r2, sl
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	f43f aeac 	beq.w	800531a <_printf_float+0xb6>
 80055c2:	f108 0801 	add.w	r8, r8, #1
 80055c6:	e7ec      	b.n	80055a2 <_printf_float+0x33e>
 80055c8:	4613      	mov	r3, r2
 80055ca:	4631      	mov	r1, r6
 80055cc:	4642      	mov	r2, r8
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	d1c0      	bne.n	8005558 <_printf_float+0x2f4>
 80055d6:	e6a0      	b.n	800531a <_printf_float+0xb6>
 80055d8:	2301      	movs	r3, #1
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	920b      	str	r2, [sp, #44]	; 0x2c
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f ae99 	beq.w	800531a <_printf_float+0xb6>
 80055e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055ea:	f10b 0b01 	add.w	fp, fp, #1
 80055ee:	e7b9      	b.n	8005564 <_printf_float+0x300>
 80055f0:	4631      	mov	r1, r6
 80055f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	d1bf      	bne.n	800557e <_printf_float+0x31a>
 80055fe:	e68c      	b.n	800531a <_printf_float+0xb6>
 8005600:	464b      	mov	r3, r9
 8005602:	4631      	mov	r1, r6
 8005604:	4628      	mov	r0, r5
 8005606:	eb08 020a 	add.w	r2, r8, sl
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	d1c2      	bne.n	8005596 <_printf_float+0x332>
 8005610:	e683      	b.n	800531a <_printf_float+0xb6>
 8005612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005614:	2a01      	cmp	r2, #1
 8005616:	dc01      	bgt.n	800561c <_printf_float+0x3b8>
 8005618:	07db      	lsls	r3, r3, #31
 800561a:	d539      	bpl.n	8005690 <_printf_float+0x42c>
 800561c:	2301      	movs	r3, #1
 800561e:	4642      	mov	r2, r8
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f ae77 	beq.w	800531a <_printf_float+0xb6>
 800562c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f ae6f 	beq.w	800531a <_printf_float+0xb6>
 800563c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005640:	2200      	movs	r2, #0
 8005642:	2300      	movs	r3, #0
 8005644:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005648:	f7fb f9b8 	bl	80009bc <__aeabi_dcmpeq>
 800564c:	b9d8      	cbnz	r0, 8005686 <_printf_float+0x422>
 800564e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005652:	f108 0201 	add.w	r2, r8, #1
 8005656:	4631      	mov	r1, r6
 8005658:	4628      	mov	r0, r5
 800565a:	47b8      	blx	r7
 800565c:	3001      	adds	r0, #1
 800565e:	d10e      	bne.n	800567e <_printf_float+0x41a>
 8005660:	e65b      	b.n	800531a <_printf_float+0xb6>
 8005662:	2301      	movs	r3, #1
 8005664:	464a      	mov	r2, r9
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f ae54 	beq.w	800531a <_printf_float+0xb6>
 8005672:	f108 0801 	add.w	r8, r8, #1
 8005676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005678:	3b01      	subs	r3, #1
 800567a:	4543      	cmp	r3, r8
 800567c:	dcf1      	bgt.n	8005662 <_printf_float+0x3fe>
 800567e:	4653      	mov	r3, sl
 8005680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005684:	e6de      	b.n	8005444 <_printf_float+0x1e0>
 8005686:	f04f 0800 	mov.w	r8, #0
 800568a:	f104 091a 	add.w	r9, r4, #26
 800568e:	e7f2      	b.n	8005676 <_printf_float+0x412>
 8005690:	2301      	movs	r3, #1
 8005692:	4642      	mov	r2, r8
 8005694:	e7df      	b.n	8005656 <_printf_float+0x3f2>
 8005696:	2301      	movs	r3, #1
 8005698:	464a      	mov	r2, r9
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f ae3a 	beq.w	800531a <_printf_float+0xb6>
 80056a6:	f108 0801 	add.w	r8, r8, #1
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	4543      	cmp	r3, r8
 80056b2:	dcf0      	bgt.n	8005696 <_printf_float+0x432>
 80056b4:	e6fb      	b.n	80054ae <_printf_float+0x24a>
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	f104 0919 	add.w	r9, r4, #25
 80056be:	e7f4      	b.n	80056aa <_printf_float+0x446>

080056c0 <_printf_common>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	4616      	mov	r6, r2
 80056c6:	4699      	mov	r9, r3
 80056c8:	688a      	ldr	r2, [r1, #8]
 80056ca:	690b      	ldr	r3, [r1, #16]
 80056cc:	4607      	mov	r7, r0
 80056ce:	4293      	cmp	r3, r2
 80056d0:	bfb8      	it	lt
 80056d2:	4613      	movlt	r3, r2
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056da:	460c      	mov	r4, r1
 80056dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e0:	b10a      	cbz	r2, 80056e6 <_printf_common+0x26>
 80056e2:	3301      	adds	r3, #1
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0699      	lsls	r1, r3, #26
 80056ea:	bf42      	ittt	mi
 80056ec:	6833      	ldrmi	r3, [r6, #0]
 80056ee:	3302      	addmi	r3, #2
 80056f0:	6033      	strmi	r3, [r6, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	f015 0506 	ands.w	r5, r5, #6
 80056f8:	d106      	bne.n	8005708 <_printf_common+0x48>
 80056fa:	f104 0a19 	add.w	sl, r4, #25
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	6832      	ldr	r2, [r6, #0]
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc2b      	bgt.n	8005760 <_printf_common+0xa0>
 8005708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800570c:	1e13      	subs	r3, r2, #0
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	bf18      	it	ne
 8005712:	2301      	movne	r3, #1
 8005714:	0692      	lsls	r2, r2, #26
 8005716:	d430      	bmi.n	800577a <_printf_common+0xba>
 8005718:	4649      	mov	r1, r9
 800571a:	4638      	mov	r0, r7
 800571c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d023      	beq.n	800576e <_printf_common+0xae>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	f003 0306 	and.w	r3, r3, #6
 800572e:	2b04      	cmp	r3, #4
 8005730:	bf14      	ite	ne
 8005732:	2500      	movne	r5, #0
 8005734:	6833      	ldreq	r3, [r6, #0]
 8005736:	f04f 0600 	mov.w	r6, #0
 800573a:	bf08      	it	eq
 800573c:	68e5      	ldreq	r5, [r4, #12]
 800573e:	f104 041a 	add.w	r4, r4, #26
 8005742:	bf08      	it	eq
 8005744:	1aed      	subeq	r5, r5, r3
 8005746:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800574a:	bf08      	it	eq
 800574c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005750:	4293      	cmp	r3, r2
 8005752:	bfc4      	itt	gt
 8005754:	1a9b      	subgt	r3, r3, r2
 8005756:	18ed      	addgt	r5, r5, r3
 8005758:	42b5      	cmp	r5, r6
 800575a:	d11a      	bne.n	8005792 <_printf_common+0xd2>
 800575c:	2000      	movs	r0, #0
 800575e:	e008      	b.n	8005772 <_printf_common+0xb2>
 8005760:	2301      	movs	r3, #1
 8005762:	4652      	mov	r2, sl
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d103      	bne.n	8005776 <_printf_common+0xb6>
 800576e:	f04f 30ff 	mov.w	r0, #4294967295
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005776:	3501      	adds	r5, #1
 8005778:	e7c1      	b.n	80056fe <_printf_common+0x3e>
 800577a:	2030      	movs	r0, #48	; 0x30
 800577c:	18e1      	adds	r1, r4, r3
 800577e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005788:	4422      	add	r2, r4
 800578a:	3302      	adds	r3, #2
 800578c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005790:	e7c2      	b.n	8005718 <_printf_common+0x58>
 8005792:	2301      	movs	r3, #1
 8005794:	4622      	mov	r2, r4
 8005796:	4649      	mov	r1, r9
 8005798:	4638      	mov	r0, r7
 800579a:	47c0      	blx	r8
 800579c:	3001      	adds	r0, #1
 800579e:	d0e6      	beq.n	800576e <_printf_common+0xae>
 80057a0:	3601      	adds	r6, #1
 80057a2:	e7d9      	b.n	8005758 <_printf_common+0x98>

080057a4 <_printf_i>:
 80057a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	7e0f      	ldrb	r7, [r1, #24]
 80057aa:	4691      	mov	r9, r2
 80057ac:	2f78      	cmp	r7, #120	; 0x78
 80057ae:	4680      	mov	r8, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	469a      	mov	sl, r3
 80057b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ba:	d807      	bhi.n	80057cc <_printf_i+0x28>
 80057bc:	2f62      	cmp	r7, #98	; 0x62
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x32>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80d5 	beq.w	8005970 <_printf_i+0x1cc>
 80057c6:	2f58      	cmp	r7, #88	; 0x58
 80057c8:	f000 80c1 	beq.w	800594e <_printf_i+0x1aa>
 80057cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d4:	e03a      	b.n	800584c <_printf_i+0xa8>
 80057d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057da:	2b15      	cmp	r3, #21
 80057dc:	d8f6      	bhi.n	80057cc <_printf_i+0x28>
 80057de:	a101      	add	r1, pc, #4	; (adr r1, 80057e4 <_printf_i+0x40>)
 80057e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080057cd 	.word	0x080057cd
 80057f0:	080057cd 	.word	0x080057cd
 80057f4:	080057cd 	.word	0x080057cd
 80057f8:	080057cd 	.word	0x080057cd
 80057fc:	08005851 	.word	0x08005851
 8005800:	080057cd 	.word	0x080057cd
 8005804:	080057cd 	.word	0x080057cd
 8005808:	080057cd 	.word	0x080057cd
 800580c:	080057cd 	.word	0x080057cd
 8005810:	08005957 	.word	0x08005957
 8005814:	0800587d 	.word	0x0800587d
 8005818:	08005911 	.word	0x08005911
 800581c:	080057cd 	.word	0x080057cd
 8005820:	080057cd 	.word	0x080057cd
 8005824:	08005979 	.word	0x08005979
 8005828:	080057cd 	.word	0x080057cd
 800582c:	0800587d 	.word	0x0800587d
 8005830:	080057cd 	.word	0x080057cd
 8005834:	080057cd 	.word	0x080057cd
 8005838:	08005919 	.word	0x08005919
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e0a0      	b.n	8005992 <_printf_i+0x1ee>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	682b      	ldr	r3, [r5, #0]
 8005854:	0607      	lsls	r7, r0, #24
 8005856:	f103 0104 	add.w	r1, r3, #4
 800585a:	6029      	str	r1, [r5, #0]
 800585c:	d501      	bpl.n	8005862 <_printf_i+0xbe>
 800585e:	681e      	ldr	r6, [r3, #0]
 8005860:	e003      	b.n	800586a <_printf_i+0xc6>
 8005862:	0646      	lsls	r6, r0, #25
 8005864:	d5fb      	bpl.n	800585e <_printf_i+0xba>
 8005866:	f9b3 6000 	ldrsh.w	r6, [r3]
 800586a:	2e00      	cmp	r6, #0
 800586c:	da03      	bge.n	8005876 <_printf_i+0xd2>
 800586e:	232d      	movs	r3, #45	; 0x2d
 8005870:	4276      	negs	r6, r6
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005876:	230a      	movs	r3, #10
 8005878:	4859      	ldr	r0, [pc, #356]	; (80059e0 <_printf_i+0x23c>)
 800587a:	e012      	b.n	80058a2 <_printf_i+0xfe>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1d19      	adds	r1, r3, #4
 8005882:	6029      	str	r1, [r5, #0]
 8005884:	0605      	lsls	r5, r0, #24
 8005886:	d501      	bpl.n	800588c <_printf_i+0xe8>
 8005888:	681e      	ldr	r6, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0xee>
 800588c:	0641      	lsls	r1, r0, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0xe4>
 8005890:	881e      	ldrh	r6, [r3, #0]
 8005892:	2f6f      	cmp	r7, #111	; 0x6f
 8005894:	bf0c      	ite	eq
 8005896:	2308      	moveq	r3, #8
 8005898:	230a      	movne	r3, #10
 800589a:	4851      	ldr	r0, [pc, #324]	; (80059e0 <_printf_i+0x23c>)
 800589c:	2100      	movs	r1, #0
 800589e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058a2:	6865      	ldr	r5, [r4, #4]
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	bfa8      	it	ge
 80058a8:	6821      	ldrge	r1, [r4, #0]
 80058aa:	60a5      	str	r5, [r4, #8]
 80058ac:	bfa4      	itt	ge
 80058ae:	f021 0104 	bicge.w	r1, r1, #4
 80058b2:	6021      	strge	r1, [r4, #0]
 80058b4:	b90e      	cbnz	r6, 80058ba <_printf_i+0x116>
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	d04b      	beq.n	8005952 <_printf_i+0x1ae>
 80058ba:	4615      	mov	r5, r2
 80058bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80058c0:	fb03 6711 	mls	r7, r3, r1, r6
 80058c4:	5dc7      	ldrb	r7, [r0, r7]
 80058c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058ca:	4637      	mov	r7, r6
 80058cc:	42bb      	cmp	r3, r7
 80058ce:	460e      	mov	r6, r1
 80058d0:	d9f4      	bls.n	80058bc <_printf_i+0x118>
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d10b      	bne.n	80058ee <_printf_i+0x14a>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	07de      	lsls	r6, r3, #31
 80058da:	d508      	bpl.n	80058ee <_printf_i+0x14a>
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	6861      	ldr	r1, [r4, #4]
 80058e0:	4299      	cmp	r1, r3
 80058e2:	bfde      	ittt	le
 80058e4:	2330      	movle	r3, #48	; 0x30
 80058e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ee:	1b52      	subs	r2, r2, r5
 80058f0:	6122      	str	r2, [r4, #16]
 80058f2:	464b      	mov	r3, r9
 80058f4:	4621      	mov	r1, r4
 80058f6:	4640      	mov	r0, r8
 80058f8:	f8cd a000 	str.w	sl, [sp]
 80058fc:	aa03      	add	r2, sp, #12
 80058fe:	f7ff fedf 	bl	80056c0 <_printf_common>
 8005902:	3001      	adds	r0, #1
 8005904:	d14a      	bne.n	800599c <_printf_i+0x1f8>
 8005906:	f04f 30ff 	mov.w	r0, #4294967295
 800590a:	b004      	add	sp, #16
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	f043 0320 	orr.w	r3, r3, #32
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	2778      	movs	r7, #120	; 0x78
 800591a:	4832      	ldr	r0, [pc, #200]	; (80059e4 <_printf_i+0x240>)
 800591c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	6829      	ldr	r1, [r5, #0]
 8005924:	061f      	lsls	r7, r3, #24
 8005926:	f851 6b04 	ldr.w	r6, [r1], #4
 800592a:	d402      	bmi.n	8005932 <_printf_i+0x18e>
 800592c:	065f      	lsls	r7, r3, #25
 800592e:	bf48      	it	mi
 8005930:	b2b6      	uxthmi	r6, r6
 8005932:	07df      	lsls	r7, r3, #31
 8005934:	bf48      	it	mi
 8005936:	f043 0320 	orrmi.w	r3, r3, #32
 800593a:	6029      	str	r1, [r5, #0]
 800593c:	bf48      	it	mi
 800593e:	6023      	strmi	r3, [r4, #0]
 8005940:	b91e      	cbnz	r6, 800594a <_printf_i+0x1a6>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f023 0320 	bic.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	2310      	movs	r3, #16
 800594c:	e7a6      	b.n	800589c <_printf_i+0xf8>
 800594e:	4824      	ldr	r0, [pc, #144]	; (80059e0 <_printf_i+0x23c>)
 8005950:	e7e4      	b.n	800591c <_printf_i+0x178>
 8005952:	4615      	mov	r5, r2
 8005954:	e7bd      	b.n	80058d2 <_printf_i+0x12e>
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	6826      	ldr	r6, [r4, #0]
 800595a:	1d18      	adds	r0, r3, #4
 800595c:	6961      	ldr	r1, [r4, #20]
 800595e:	6028      	str	r0, [r5, #0]
 8005960:	0635      	lsls	r5, r6, #24
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	d501      	bpl.n	800596a <_printf_i+0x1c6>
 8005966:	6019      	str	r1, [r3, #0]
 8005968:	e002      	b.n	8005970 <_printf_i+0x1cc>
 800596a:	0670      	lsls	r0, r6, #25
 800596c:	d5fb      	bpl.n	8005966 <_printf_i+0x1c2>
 800596e:	8019      	strh	r1, [r3, #0]
 8005970:	2300      	movs	r3, #0
 8005972:	4615      	mov	r5, r2
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	e7bc      	b.n	80058f2 <_printf_i+0x14e>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	2100      	movs	r1, #0
 800597c:	1d1a      	adds	r2, r3, #4
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	681d      	ldr	r5, [r3, #0]
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	4628      	mov	r0, r5
 8005986:	f000 fbe6 	bl	8006156 <memchr>
 800598a:	b108      	cbz	r0, 8005990 <_printf_i+0x1ec>
 800598c:	1b40      	subs	r0, r0, r5
 800598e:	6060      	str	r0, [r4, #4]
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	2300      	movs	r3, #0
 8005996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599a:	e7aa      	b.n	80058f2 <_printf_i+0x14e>
 800599c:	462a      	mov	r2, r5
 800599e:	4649      	mov	r1, r9
 80059a0:	4640      	mov	r0, r8
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	47d0      	blx	sl
 80059a6:	3001      	adds	r0, #1
 80059a8:	d0ad      	beq.n	8005906 <_printf_i+0x162>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	079b      	lsls	r3, r3, #30
 80059ae:	d413      	bmi.n	80059d8 <_printf_i+0x234>
 80059b0:	68e0      	ldr	r0, [r4, #12]
 80059b2:	9b03      	ldr	r3, [sp, #12]
 80059b4:	4298      	cmp	r0, r3
 80059b6:	bfb8      	it	lt
 80059b8:	4618      	movlt	r0, r3
 80059ba:	e7a6      	b.n	800590a <_printf_i+0x166>
 80059bc:	2301      	movs	r3, #1
 80059be:	4632      	mov	r2, r6
 80059c0:	4649      	mov	r1, r9
 80059c2:	4640      	mov	r0, r8
 80059c4:	47d0      	blx	sl
 80059c6:	3001      	adds	r0, #1
 80059c8:	d09d      	beq.n	8005906 <_printf_i+0x162>
 80059ca:	3501      	adds	r5, #1
 80059cc:	68e3      	ldr	r3, [r4, #12]
 80059ce:	9903      	ldr	r1, [sp, #12]
 80059d0:	1a5b      	subs	r3, r3, r1
 80059d2:	42ab      	cmp	r3, r5
 80059d4:	dcf2      	bgt.n	80059bc <_printf_i+0x218>
 80059d6:	e7eb      	b.n	80059b0 <_printf_i+0x20c>
 80059d8:	2500      	movs	r5, #0
 80059da:	f104 0619 	add.w	r6, r4, #25
 80059de:	e7f5      	b.n	80059cc <_printf_i+0x228>
 80059e0:	08007fc5 	.word	0x08007fc5
 80059e4:	08007fd6 	.word	0x08007fd6

080059e8 <std>:
 80059e8:	2300      	movs	r3, #0
 80059ea:	b510      	push	{r4, lr}
 80059ec:	4604      	mov	r4, r0
 80059ee:	e9c0 3300 	strd	r3, r3, [r0]
 80059f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059f6:	6083      	str	r3, [r0, #8]
 80059f8:	8181      	strh	r1, [r0, #12]
 80059fa:	6643      	str	r3, [r0, #100]	; 0x64
 80059fc:	81c2      	strh	r2, [r0, #14]
 80059fe:	6183      	str	r3, [r0, #24]
 8005a00:	4619      	mov	r1, r3
 8005a02:	2208      	movs	r2, #8
 8005a04:	305c      	adds	r0, #92	; 0x5c
 8005a06:	f000 faa5 	bl	8005f54 <memset>
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <std+0x58>)
 8005a0c:	6224      	str	r4, [r4, #32]
 8005a0e:	6263      	str	r3, [r4, #36]	; 0x24
 8005a10:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <std+0x5c>)
 8005a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <std+0x60>)
 8005a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <std+0x64>)
 8005a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <std+0x68>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d006      	beq.n	8005a30 <std+0x48>
 8005a22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a26:	4294      	cmp	r4, r2
 8005a28:	d002      	beq.n	8005a30 <std+0x48>
 8005a2a:	33d0      	adds	r3, #208	; 0xd0
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d105      	bne.n	8005a3c <std+0x54>
 8005a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f000 bb8a 	b.w	8006150 <__retarget_lock_init_recursive>
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	bf00      	nop
 8005a40:	08005da5 	.word	0x08005da5
 8005a44:	08005dc7 	.word	0x08005dc7
 8005a48:	08005dff 	.word	0x08005dff
 8005a4c:	08005e23 	.word	0x08005e23
 8005a50:	20002264 	.word	0x20002264

08005a54 <stdio_exit_handler>:
 8005a54:	4a02      	ldr	r2, [pc, #8]	; (8005a60 <stdio_exit_handler+0xc>)
 8005a56:	4903      	ldr	r1, [pc, #12]	; (8005a64 <stdio_exit_handler+0x10>)
 8005a58:	4803      	ldr	r0, [pc, #12]	; (8005a68 <stdio_exit_handler+0x14>)
 8005a5a:	f000 b869 	b.w	8005b30 <_fwalk_sglue>
 8005a5e:	bf00      	nop
 8005a60:	20000034 	.word	0x20000034
 8005a64:	08007b01 	.word	0x08007b01
 8005a68:	20000040 	.word	0x20000040

08005a6c <cleanup_stdio>:
 8005a6c:	6841      	ldr	r1, [r0, #4]
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <cleanup_stdio+0x34>)
 8005a70:	b510      	push	{r4, lr}
 8005a72:	4299      	cmp	r1, r3
 8005a74:	4604      	mov	r4, r0
 8005a76:	d001      	beq.n	8005a7c <cleanup_stdio+0x10>
 8005a78:	f002 f842 	bl	8007b00 <_fflush_r>
 8005a7c:	68a1      	ldr	r1, [r4, #8]
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <cleanup_stdio+0x38>)
 8005a80:	4299      	cmp	r1, r3
 8005a82:	d002      	beq.n	8005a8a <cleanup_stdio+0x1e>
 8005a84:	4620      	mov	r0, r4
 8005a86:	f002 f83b 	bl	8007b00 <_fflush_r>
 8005a8a:	68e1      	ldr	r1, [r4, #12]
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <cleanup_stdio+0x3c>)
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	d004      	beq.n	8005a9c <cleanup_stdio+0x30>
 8005a92:	4620      	mov	r0, r4
 8005a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a98:	f002 b832 	b.w	8007b00 <_fflush_r>
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20002264 	.word	0x20002264
 8005aa4:	200022cc 	.word	0x200022cc
 8005aa8:	20002334 	.word	0x20002334

08005aac <global_stdio_init.part.0>:
 8005aac:	b510      	push	{r4, lr}
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <global_stdio_init.part.0+0x30>)
 8005ab0:	4c0b      	ldr	r4, [pc, #44]	; (8005ae0 <global_stdio_init.part.0+0x34>)
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <global_stdio_init.part.0+0x38>)
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	2104      	movs	r1, #4
 8005aba:	2200      	movs	r2, #0
 8005abc:	f7ff ff94 	bl	80059e8 <std>
 8005ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2109      	movs	r1, #9
 8005ac8:	f7ff ff8e 	bl	80059e8 <std>
 8005acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad6:	2112      	movs	r1, #18
 8005ad8:	f7ff bf86 	b.w	80059e8 <std>
 8005adc:	2000239c 	.word	0x2000239c
 8005ae0:	20002264 	.word	0x20002264
 8005ae4:	08005a55 	.word	0x08005a55

08005ae8 <__sfp_lock_acquire>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	; (8005af0 <__sfp_lock_acquire+0x8>)
 8005aea:	f000 bb32 	b.w	8006152 <__retarget_lock_acquire_recursive>
 8005aee:	bf00      	nop
 8005af0:	200023a5 	.word	0x200023a5

08005af4 <__sfp_lock_release>:
 8005af4:	4801      	ldr	r0, [pc, #4]	; (8005afc <__sfp_lock_release+0x8>)
 8005af6:	f000 bb2d 	b.w	8006154 <__retarget_lock_release_recursive>
 8005afa:	bf00      	nop
 8005afc:	200023a5 	.word	0x200023a5

08005b00 <__sinit>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4604      	mov	r4, r0
 8005b04:	f7ff fff0 	bl	8005ae8 <__sfp_lock_acquire>
 8005b08:	6a23      	ldr	r3, [r4, #32]
 8005b0a:	b11b      	cbz	r3, 8005b14 <__sinit+0x14>
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b10:	f7ff bff0 	b.w	8005af4 <__sfp_lock_release>
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <__sinit+0x28>)
 8005b16:	6223      	str	r3, [r4, #32]
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <__sinit+0x2c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f5      	bne.n	8005b0c <__sinit+0xc>
 8005b20:	f7ff ffc4 	bl	8005aac <global_stdio_init.part.0>
 8005b24:	e7f2      	b.n	8005b0c <__sinit+0xc>
 8005b26:	bf00      	nop
 8005b28:	08005a6d 	.word	0x08005a6d
 8005b2c:	2000239c 	.word	0x2000239c

08005b30 <_fwalk_sglue>:
 8005b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b34:	4607      	mov	r7, r0
 8005b36:	4688      	mov	r8, r1
 8005b38:	4614      	mov	r4, r2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b40:	f1b9 0901 	subs.w	r9, r9, #1
 8005b44:	d505      	bpl.n	8005b52 <_fwalk_sglue+0x22>
 8005b46:	6824      	ldr	r4, [r4, #0]
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	d1f7      	bne.n	8005b3c <_fwalk_sglue+0xc>
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d907      	bls.n	8005b68 <_fwalk_sglue+0x38>
 8005b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	d003      	beq.n	8005b68 <_fwalk_sglue+0x38>
 8005b60:	4629      	mov	r1, r5
 8005b62:	4638      	mov	r0, r7
 8005b64:	47c0      	blx	r8
 8005b66:	4306      	orrs	r6, r0
 8005b68:	3568      	adds	r5, #104	; 0x68
 8005b6a:	e7e9      	b.n	8005b40 <_fwalk_sglue+0x10>

08005b6c <iprintf>:
 8005b6c:	b40f      	push	{r0, r1, r2, r3}
 8005b6e:	b507      	push	{r0, r1, r2, lr}
 8005b70:	4906      	ldr	r1, [pc, #24]	; (8005b8c <iprintf+0x20>)
 8005b72:	ab04      	add	r3, sp, #16
 8005b74:	6808      	ldr	r0, [r1, #0]
 8005b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b7a:	6881      	ldr	r1, [r0, #8]
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	f001 fe23 	bl	80077c8 <_vfiprintf_r>
 8005b82:	b003      	add	sp, #12
 8005b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b88:	b004      	add	sp, #16
 8005b8a:	4770      	bx	lr
 8005b8c:	2000008c 	.word	0x2000008c

08005b90 <_puts_r>:
 8005b90:	6a03      	ldr	r3, [r0, #32]
 8005b92:	b570      	push	{r4, r5, r6, lr}
 8005b94:	4605      	mov	r5, r0
 8005b96:	460e      	mov	r6, r1
 8005b98:	6884      	ldr	r4, [r0, #8]
 8005b9a:	b90b      	cbnz	r3, 8005ba0 <_puts_r+0x10>
 8005b9c:	f7ff ffb0 	bl	8005b00 <__sinit>
 8005ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ba2:	07db      	lsls	r3, r3, #31
 8005ba4:	d405      	bmi.n	8005bb2 <_puts_r+0x22>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	0598      	lsls	r0, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_puts_r+0x22>
 8005bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bae:	f000 fad0 	bl	8006152 <__retarget_lock_acquire_recursive>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	0719      	lsls	r1, r3, #28
 8005bb6:	d513      	bpl.n	8005be0 <_puts_r+0x50>
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	b18b      	cbz	r3, 8005be0 <_puts_r+0x50>
 8005bbc:	3e01      	subs	r6, #1
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	60a3      	str	r3, [r4, #8]
 8005bc8:	b9e9      	cbnz	r1, 8005c06 <_puts_r+0x76>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da2e      	bge.n	8005c2c <_puts_r+0x9c>
 8005bce:	4622      	mov	r2, r4
 8005bd0:	210a      	movs	r1, #10
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 f929 	bl	8005e2a <__swbuf_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d007      	beq.n	8005bec <_puts_r+0x5c>
 8005bdc:	250a      	movs	r5, #10
 8005bde:	e007      	b.n	8005bf0 <_puts_r+0x60>
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f95e 	bl	8005ea4 <__swsetup_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d0e7      	beq.n	8005bbc <_puts_r+0x2c>
 8005bec:	f04f 35ff 	mov.w	r5, #4294967295
 8005bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf2:	07da      	lsls	r2, r3, #31
 8005bf4:	d405      	bmi.n	8005c02 <_puts_r+0x72>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	059b      	lsls	r3, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_puts_r+0x72>
 8005bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfe:	f000 faa9 	bl	8006154 <__retarget_lock_release_recursive>
 8005c02:	4628      	mov	r0, r5
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da04      	bge.n	8005c14 <_puts_r+0x84>
 8005c0a:	69a2      	ldr	r2, [r4, #24]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	dc06      	bgt.n	8005c1e <_puts_r+0x8e>
 8005c10:	290a      	cmp	r1, #10
 8005c12:	d004      	beq.n	8005c1e <_puts_r+0x8e>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	6022      	str	r2, [r4, #0]
 8005c1a:	7019      	strb	r1, [r3, #0]
 8005c1c:	e7cf      	b.n	8005bbe <_puts_r+0x2e>
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f902 	bl	8005e2a <__swbuf_r>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d1c9      	bne.n	8005bbe <_puts_r+0x2e>
 8005c2a:	e7df      	b.n	8005bec <_puts_r+0x5c>
 8005c2c:	250a      	movs	r5, #10
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	701d      	strb	r5, [r3, #0]
 8005c36:	e7db      	b.n	8005bf0 <_puts_r+0x60>

08005c38 <puts>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <puts+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f7ff bfa7 	b.w	8005b90 <_puts_r>
 8005c42:	bf00      	nop
 8005c44:	2000008c 	.word	0x2000008c

08005c48 <setvbuf>:
 8005c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	461d      	mov	r5, r3
 8005c4e:	4b54      	ldr	r3, [pc, #336]	; (8005da0 <setvbuf+0x158>)
 8005c50:	4604      	mov	r4, r0
 8005c52:	681f      	ldr	r7, [r3, #0]
 8005c54:	460e      	mov	r6, r1
 8005c56:	4690      	mov	r8, r2
 8005c58:	b127      	cbz	r7, 8005c64 <setvbuf+0x1c>
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	b913      	cbnz	r3, 8005c64 <setvbuf+0x1c>
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff ff4e 	bl	8005b00 <__sinit>
 8005c64:	f1b8 0f02 	cmp.w	r8, #2
 8005c68:	d006      	beq.n	8005c78 <setvbuf+0x30>
 8005c6a:	f1b8 0f01 	cmp.w	r8, #1
 8005c6e:	f200 8094 	bhi.w	8005d9a <setvbuf+0x152>
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	f2c0 8091 	blt.w	8005d9a <setvbuf+0x152>
 8005c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c7a:	07da      	lsls	r2, r3, #31
 8005c7c:	d405      	bmi.n	8005c8a <setvbuf+0x42>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	059b      	lsls	r3, r3, #22
 8005c82:	d402      	bmi.n	8005c8a <setvbuf+0x42>
 8005c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c86:	f000 fa64 	bl	8006152 <__retarget_lock_acquire_recursive>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f001 ff37 	bl	8007b00 <_fflush_r>
 8005c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c94:	b141      	cbz	r1, 8005ca8 <setvbuf+0x60>
 8005c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	d002      	beq.n	8005ca4 <setvbuf+0x5c>
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	f001 f8f6 	bl	8006e90 <_free_r>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61a3      	str	r3, [r4, #24]
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	0618      	lsls	r0, r3, #24
 8005cb2:	d503      	bpl.n	8005cbc <setvbuf+0x74>
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	6921      	ldr	r1, [r4, #16]
 8005cb8:	f001 f8ea 	bl	8006e90 <_free_r>
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f1b8 0f02 	cmp.w	r8, #2
 8005cc2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	d05f      	beq.n	8005d8e <setvbuf+0x146>
 8005cce:	ab01      	add	r3, sp, #4
 8005cd0:	466a      	mov	r2, sp
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f001 ff4d 	bl	8007b74 <__swhatbuf_r>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	4318      	orrs	r0, r3
 8005cde:	81a0      	strh	r0, [r4, #12]
 8005ce0:	bb2d      	cbnz	r5, 8005d2e <setvbuf+0xe6>
 8005ce2:	9d00      	ldr	r5, [sp, #0]
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f001 f91b 	bl	8006f20 <malloc>
 8005cea:	4606      	mov	r6, r0
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d150      	bne.n	8005d92 <setvbuf+0x14a>
 8005cf0:	f8dd 9000 	ldr.w	r9, [sp]
 8005cf4:	45a9      	cmp	r9, r5
 8005cf6:	d13e      	bne.n	8005d76 <setvbuf+0x12e>
 8005cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60a2      	str	r2, [r4, #8]
 8005d00:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	6122      	str	r2, [r4, #16]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0e:	6162      	str	r2, [r4, #20]
 8005d10:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d12:	f043 0302 	orr.w	r3, r3, #2
 8005d16:	07d1      	lsls	r1, r2, #31
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	d404      	bmi.n	8005d26 <setvbuf+0xde>
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <setvbuf+0xde>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f000 fa17 	bl	8006154 <__retarget_lock_release_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	b003      	add	sp, #12
 8005d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	d0d8      	beq.n	8005ce4 <setvbuf+0x9c>
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b913      	cbnz	r3, 8005d3c <setvbuf+0xf4>
 8005d36:	4638      	mov	r0, r7
 8005d38:	f7ff fee2 	bl	8005b00 <__sinit>
 8005d3c:	f1b8 0f01 	cmp.w	r8, #1
 8005d40:	bf08      	it	eq
 8005d42:	89a3      	ldrheq	r3, [r4, #12]
 8005d44:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005d48:	bf04      	itt	eq
 8005d4a:	f043 0301 	orreq.w	r3, r3, #1
 8005d4e:	81a3      	strheq	r3, [r4, #12]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	6026      	str	r6, [r4, #0]
 8005d54:	f013 0208 	ands.w	r2, r3, #8
 8005d58:	d01d      	beq.n	8005d96 <setvbuf+0x14e>
 8005d5a:	07da      	lsls	r2, r3, #31
 8005d5c:	bf41      	itttt	mi
 8005d5e:	2200      	movmi	r2, #0
 8005d60:	426d      	negmi	r5, r5
 8005d62:	60a2      	strmi	r2, [r4, #8]
 8005d64:	61a5      	strmi	r5, [r4, #24]
 8005d66:	bf58      	it	pl
 8005d68:	60a5      	strpl	r5, [r4, #8]
 8005d6a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005d6c:	f015 0501 	ands.w	r5, r5, #1
 8005d70:	d0d4      	beq.n	8005d1c <setvbuf+0xd4>
 8005d72:	2500      	movs	r5, #0
 8005d74:	e7d7      	b.n	8005d26 <setvbuf+0xde>
 8005d76:	4648      	mov	r0, r9
 8005d78:	f001 f8d2 	bl	8006f20 <malloc>
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d0ba      	beq.n	8005cf8 <setvbuf+0xb0>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	464d      	mov	r5, r9
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	e7d1      	b.n	8005d32 <setvbuf+0xea>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	e7b4      	b.n	8005cfc <setvbuf+0xb4>
 8005d92:	46a9      	mov	r9, r5
 8005d94:	e7f5      	b.n	8005d82 <setvbuf+0x13a>
 8005d96:	60a2      	str	r2, [r4, #8]
 8005d98:	e7e7      	b.n	8005d6a <setvbuf+0x122>
 8005d9a:	f04f 35ff 	mov.w	r5, #4294967295
 8005d9e:	e7c2      	b.n	8005d26 <setvbuf+0xde>
 8005da0:	2000008c 	.word	0x2000008c

08005da4 <__sread>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	f000 f982 	bl	80060b4 <_read_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bfab      	itete	ge
 8005db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005db6:	89a3      	ldrhlt	r3, [r4, #12]
 8005db8:	181b      	addge	r3, r3, r0
 8005dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dbe:	bfac      	ite	ge
 8005dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dc2:	81a3      	strhlt	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__swrite>:
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	461f      	mov	r7, r3
 8005dcc:	898b      	ldrh	r3, [r1, #12]
 8005dce:	4605      	mov	r5, r0
 8005dd0:	05db      	lsls	r3, r3, #23
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	d505      	bpl.n	8005de4 <__swrite+0x1e>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de0:	f000 f956 	bl	8006090 <_lseek_r>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	4632      	mov	r2, r6
 8005de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dec:	81a3      	strh	r3, [r4, #12]
 8005dee:	4628      	mov	r0, r5
 8005df0:	463b      	mov	r3, r7
 8005df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	f000 b96d 	b.w	80060d8 <_write_r>

08005dfe <__sseek>:
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 f943 	bl	8006090 <_lseek_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	bf15      	itete	ne
 8005e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e1a:	81a3      	strheq	r3, [r4, #12]
 8005e1c:	bf18      	it	ne
 8005e1e:	81a3      	strhne	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__sclose>:
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 b923 	b.w	8006070 <_close_r>

08005e2a <__swbuf_r>:
 8005e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	4614      	mov	r4, r2
 8005e30:	4605      	mov	r5, r0
 8005e32:	b118      	cbz	r0, 8005e3c <__swbuf_r+0x12>
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	b90b      	cbnz	r3, 8005e3c <__swbuf_r+0x12>
 8005e38:	f7ff fe62 	bl	8005b00 <__sinit>
 8005e3c:	69a3      	ldr	r3, [r4, #24]
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	071a      	lsls	r2, r3, #28
 8005e44:	d525      	bpl.n	8005e92 <__swbuf_r+0x68>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	b31b      	cbz	r3, 8005e92 <__swbuf_r+0x68>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	6922      	ldr	r2, [r4, #16]
 8005e4e:	b2f6      	uxtb	r6, r6
 8005e50:	1a98      	subs	r0, r3, r2
 8005e52:	6963      	ldr	r3, [r4, #20]
 8005e54:	4637      	mov	r7, r6
 8005e56:	4283      	cmp	r3, r0
 8005e58:	dc04      	bgt.n	8005e64 <__swbuf_r+0x3a>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f001 fe4f 	bl	8007b00 <_fflush_r>
 8005e62:	b9e0      	cbnz	r0, 8005e9e <__swbuf_r+0x74>
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	6022      	str	r2, [r4, #0]
 8005e70:	701e      	strb	r6, [r3, #0]
 8005e72:	6962      	ldr	r2, [r4, #20]
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d004      	beq.n	8005e84 <__swbuf_r+0x5a>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	07db      	lsls	r3, r3, #31
 8005e7e:	d506      	bpl.n	8005e8e <__swbuf_r+0x64>
 8005e80:	2e0a      	cmp	r6, #10
 8005e82:	d104      	bne.n	8005e8e <__swbuf_r+0x64>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f001 fe3a 	bl	8007b00 <_fflush_r>
 8005e8c:	b938      	cbnz	r0, 8005e9e <__swbuf_r+0x74>
 8005e8e:	4638      	mov	r0, r7
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f805 	bl	8005ea4 <__swsetup_r>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d0d5      	beq.n	8005e4a <__swbuf_r+0x20>
 8005e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea2:	e7f4      	b.n	8005e8e <__swbuf_r+0x64>

08005ea4 <__swsetup_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <__swsetup_r+0xac>)
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	460c      	mov	r4, r1
 8005eae:	b118      	cbz	r0, 8005eb8 <__swsetup_r+0x14>
 8005eb0:	6a03      	ldr	r3, [r0, #32]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <__swsetup_r+0x14>
 8005eb4:	f7ff fe24 	bl	8005b00 <__sinit>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ebe:	0718      	lsls	r0, r3, #28
 8005ec0:	d422      	bmi.n	8005f08 <__swsetup_r+0x64>
 8005ec2:	06d9      	lsls	r1, r3, #27
 8005ec4:	d407      	bmi.n	8005ed6 <__swsetup_r+0x32>
 8005ec6:	2309      	movs	r3, #9
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	e034      	b.n	8005f40 <__swsetup_r+0x9c>
 8005ed6:	0758      	lsls	r0, r3, #29
 8005ed8:	d512      	bpl.n	8005f00 <__swsetup_r+0x5c>
 8005eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005edc:	b141      	cbz	r1, 8005ef0 <__swsetup_r+0x4c>
 8005ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__swsetup_r+0x48>
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 ffd2 	bl	8006e90 <_free_r>
 8005eec:	2300      	movs	r3, #0
 8005eee:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f043 0308 	orr.w	r3, r3, #8
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b94b      	cbnz	r3, 8005f20 <__swsetup_r+0x7c>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d003      	beq.n	8005f20 <__swsetup_r+0x7c>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f001 fe4f 	bl	8007bbe <__smakebuf_r>
 8005f20:	89a0      	ldrh	r0, [r4, #12]
 8005f22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f26:	f010 0301 	ands.w	r3, r0, #1
 8005f2a:	d00a      	beq.n	8005f42 <__swsetup_r+0x9e>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	425b      	negs	r3, r3
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	b943      	cbnz	r3, 8005f4c <__swsetup_r+0xa8>
 8005f3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f3e:	d1c4      	bne.n	8005eca <__swsetup_r+0x26>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	0781      	lsls	r1, r0, #30
 8005f44:	bf58      	it	pl
 8005f46:	6963      	ldrpl	r3, [r4, #20]
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	e7f4      	b.n	8005f36 <__swsetup_r+0x92>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f7      	b.n	8005f40 <__swsetup_r+0x9c>
 8005f50:	2000008c 	.word	0x2000008c

08005f54 <memset>:
 8005f54:	4603      	mov	r3, r0
 8005f56:	4402      	add	r2, r0
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memset+0xa>
 8005f5c:	4770      	bx	lr
 8005f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f62:	e7f9      	b.n	8005f58 <memset+0x4>

08005f64 <strncmp>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	b16a      	cbz	r2, 8005f84 <strncmp+0x20>
 8005f68:	3901      	subs	r1, #1
 8005f6a:	1884      	adds	r4, r0, r2
 8005f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d103      	bne.n	8005f80 <strncmp+0x1c>
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d001      	beq.n	8005f80 <strncmp+0x1c>
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	d1f5      	bne.n	8005f6c <strncmp+0x8>
 8005f80:	1ad0      	subs	r0, r2, r3
 8005f82:	bd10      	pop	{r4, pc}
 8005f84:	4610      	mov	r0, r2
 8005f86:	e7fc      	b.n	8005f82 <strncmp+0x1e>

08005f88 <strncpy>:
 8005f88:	4603      	mov	r3, r0
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	3901      	subs	r1, #1
 8005f8e:	b132      	cbz	r2, 8005f9e <strncpy+0x16>
 8005f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f94:	3a01      	subs	r2, #1
 8005f96:	f803 4b01 	strb.w	r4, [r3], #1
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	d1f7      	bne.n	8005f8e <strncpy+0x6>
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	441a      	add	r2, r3
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d100      	bne.n	8005fa8 <strncpy+0x20>
 8005fa6:	bd10      	pop	{r4, pc}
 8005fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fac:	e7f9      	b.n	8005fa2 <strncpy+0x1a>
	...

08005fb0 <strtok>:
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <strtok+0x5c>)
 8005fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	681f      	ldr	r7, [r3, #0]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	b9ec      	cbnz	r4, 8005ffc <strtok+0x4c>
 8005fc0:	2050      	movs	r0, #80	; 0x50
 8005fc2:	f000 ffad 	bl	8006f20 <malloc>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6478      	str	r0, [r7, #68]	; 0x44
 8005fca:	b920      	cbnz	r0, 8005fd6 <strtok+0x26>
 8005fcc:	215b      	movs	r1, #91	; 0x5b
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <strtok+0x60>)
 8005fd0:	4810      	ldr	r0, [pc, #64]	; (8006014 <strtok+0x64>)
 8005fd2:	f000 f8cf 	bl	8006174 <__assert_func>
 8005fd6:	e9c0 4400 	strd	r4, r4, [r0]
 8005fda:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005fde:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005fe2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005fe6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005fea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005fee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005ff2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005ff6:	6184      	str	r4, [r0, #24]
 8005ff8:	7704      	strb	r4, [r0, #28]
 8005ffa:	6244      	str	r4, [r0, #36]	; 0x24
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006002:	2301      	movs	r3, #1
 8006004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006008:	f000 b806 	b.w	8006018 <__strtok_r>
 800600c:	2000008c 	.word	0x2000008c
 8006010:	08007fe7 	.word	0x08007fe7
 8006014:	08007ffe 	.word	0x08007ffe

08006018 <__strtok_r>:
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601a:	b908      	cbnz	r0, 8006020 <__strtok_r+0x8>
 800601c:	6810      	ldr	r0, [r2, #0]
 800601e:	b188      	cbz	r0, 8006044 <__strtok_r+0x2c>
 8006020:	4604      	mov	r4, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4620      	mov	r0, r4
 8006026:	f814 5b01 	ldrb.w	r5, [r4], #1
 800602a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800602e:	b91e      	cbnz	r6, 8006038 <__strtok_r+0x20>
 8006030:	b965      	cbnz	r5, 800604c <__strtok_r+0x34>
 8006032:	4628      	mov	r0, r5
 8006034:	6015      	str	r5, [r2, #0]
 8006036:	e005      	b.n	8006044 <__strtok_r+0x2c>
 8006038:	42b5      	cmp	r5, r6
 800603a:	d1f6      	bne.n	800602a <__strtok_r+0x12>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f0      	bne.n	8006022 <__strtok_r+0xa>
 8006040:	6014      	str	r4, [r2, #0]
 8006042:	7003      	strb	r3, [r0, #0]
 8006044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006046:	461c      	mov	r4, r3
 8006048:	e00c      	b.n	8006064 <__strtok_r+0x4c>
 800604a:	b915      	cbnz	r5, 8006052 <__strtok_r+0x3a>
 800604c:	460e      	mov	r6, r1
 800604e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006052:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006056:	42ab      	cmp	r3, r5
 8006058:	d1f7      	bne.n	800604a <__strtok_r+0x32>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f3      	beq.n	8006046 <__strtok_r+0x2e>
 800605e:	2300      	movs	r3, #0
 8006060:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006064:	6014      	str	r4, [r2, #0]
 8006066:	e7ed      	b.n	8006044 <__strtok_r+0x2c>

08006068 <_localeconv_r>:
 8006068:	4800      	ldr	r0, [pc, #0]	; (800606c <_localeconv_r+0x4>)
 800606a:	4770      	bx	lr
 800606c:	20000180 	.word	0x20000180

08006070 <_close_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	2300      	movs	r3, #0
 8006074:	4d05      	ldr	r5, [pc, #20]	; (800608c <_close_r+0x1c>)
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fb ff82 	bl	8001f84 <_close>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_close_r+0x1a>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_close_r+0x1a>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	200023a0 	.word	0x200023a0

08006090 <_lseek_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	2200      	movs	r2, #0
 800609a:	4d05      	ldr	r5, [pc, #20]	; (80060b0 <_lseek_r+0x20>)
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fb ff94 	bl	8001fcc <_lseek>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_lseek_r+0x1e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_lseek_r+0x1e>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	200023a0 	.word	0x200023a0

080060b4 <_read_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	2200      	movs	r2, #0
 80060be:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_read_r+0x20>)
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fb ff41 	bl	8001f4a <_read>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_read_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_read_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	200023a0 	.word	0x200023a0

080060d8 <_write_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	2200      	movs	r2, #0
 80060e2:	4d05      	ldr	r5, [pc, #20]	; (80060f8 <_write_r+0x20>)
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb f938 	bl	800135c <_write>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_write_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_write_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	200023a0 	.word	0x200023a0

080060fc <__errno>:
 80060fc:	4b01      	ldr	r3, [pc, #4]	; (8006104 <__errno+0x8>)
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	2000008c 	.word	0x2000008c

08006108 <__libc_init_array>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	2600      	movs	r6, #0
 800610c:	4d0c      	ldr	r5, [pc, #48]	; (8006140 <__libc_init_array+0x38>)
 800610e:	4c0d      	ldr	r4, [pc, #52]	; (8006144 <__libc_init_array+0x3c>)
 8006110:	1b64      	subs	r4, r4, r5
 8006112:	10a4      	asrs	r4, r4, #2
 8006114:	42a6      	cmp	r6, r4
 8006116:	d109      	bne.n	800612c <__libc_init_array+0x24>
 8006118:	f001 fe4c 	bl	8007db4 <_init>
 800611c:	2600      	movs	r6, #0
 800611e:	4d0a      	ldr	r5, [pc, #40]	; (8006148 <__libc_init_array+0x40>)
 8006120:	4c0a      	ldr	r4, [pc, #40]	; (800614c <__libc_init_array+0x44>)
 8006122:	1b64      	subs	r4, r4, r5
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	42a6      	cmp	r6, r4
 8006128:	d105      	bne.n	8006136 <__libc_init_array+0x2e>
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006130:	4798      	blx	r3
 8006132:	3601      	adds	r6, #1
 8006134:	e7ee      	b.n	8006114 <__libc_init_array+0xc>
 8006136:	f855 3b04 	ldr.w	r3, [r5], #4
 800613a:	4798      	blx	r3
 800613c:	3601      	adds	r6, #1
 800613e:	e7f2      	b.n	8006126 <__libc_init_array+0x1e>
 8006140:	08008280 	.word	0x08008280
 8006144:	08008280 	.word	0x08008280
 8006148:	08008280 	.word	0x08008280
 800614c:	08008284 	.word	0x08008284

08006150 <__retarget_lock_init_recursive>:
 8006150:	4770      	bx	lr

08006152 <__retarget_lock_acquire_recursive>:
 8006152:	4770      	bx	lr

08006154 <__retarget_lock_release_recursive>:
 8006154:	4770      	bx	lr

08006156 <memchr>:
 8006156:	4603      	mov	r3, r0
 8006158:	b510      	push	{r4, lr}
 800615a:	b2c9      	uxtb	r1, r1
 800615c:	4402      	add	r2, r0
 800615e:	4293      	cmp	r3, r2
 8006160:	4618      	mov	r0, r3
 8006162:	d101      	bne.n	8006168 <memchr+0x12>
 8006164:	2000      	movs	r0, #0
 8006166:	e003      	b.n	8006170 <memchr+0x1a>
 8006168:	7804      	ldrb	r4, [r0, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	428c      	cmp	r4, r1
 800616e:	d1f6      	bne.n	800615e <memchr+0x8>
 8006170:	bd10      	pop	{r4, pc}
	...

08006174 <__assert_func>:
 8006174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006176:	4614      	mov	r4, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <__assert_func+0x2c>)
 800617c:	4605      	mov	r5, r0
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68d8      	ldr	r0, [r3, #12]
 8006182:	b14c      	cbz	r4, 8006198 <__assert_func+0x24>
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <__assert_func+0x30>)
 8006186:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800618a:	9100      	str	r1, [sp, #0]
 800618c:	462b      	mov	r3, r5
 800618e:	4906      	ldr	r1, [pc, #24]	; (80061a8 <__assert_func+0x34>)
 8006190:	f001 fcde 	bl	8007b50 <fiprintf>
 8006194:	f001 fd90 	bl	8007cb8 <abort>
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <__assert_func+0x38>)
 800619a:	461c      	mov	r4, r3
 800619c:	e7f3      	b.n	8006186 <__assert_func+0x12>
 800619e:	bf00      	nop
 80061a0:	2000008c 	.word	0x2000008c
 80061a4:	08008058 	.word	0x08008058
 80061a8:	08008065 	.word	0x08008065
 80061ac:	08008093 	.word	0x08008093

080061b0 <quorem>:
 80061b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	6903      	ldr	r3, [r0, #16]
 80061b6:	690c      	ldr	r4, [r1, #16]
 80061b8:	4607      	mov	r7, r0
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	db7f      	blt.n	80062be <quorem+0x10e>
 80061be:	3c01      	subs	r4, #1
 80061c0:	f100 0514 	add.w	r5, r0, #20
 80061c4:	f101 0814 	add.w	r8, r1, #20
 80061c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061d6:	3301      	adds	r3, #1
 80061d8:	429a      	cmp	r2, r3
 80061da:	fbb2 f6f3 	udiv	r6, r2, r3
 80061de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061e6:	d331      	bcc.n	800624c <quorem+0x9c>
 80061e8:	f04f 0e00 	mov.w	lr, #0
 80061ec:	4640      	mov	r0, r8
 80061ee:	46ac      	mov	ip, r5
 80061f0:	46f2      	mov	sl, lr
 80061f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80061f6:	b293      	uxth	r3, r2
 80061f8:	fb06 e303 	mla	r3, r6, r3, lr
 80061fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006200:	0c1a      	lsrs	r2, r3, #16
 8006202:	b29b      	uxth	r3, r3
 8006204:	fb06 220e 	mla	r2, r6, lr, r2
 8006208:	ebaa 0303 	sub.w	r3, sl, r3
 800620c:	f8dc a000 	ldr.w	sl, [ip]
 8006210:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006214:	fa1f fa8a 	uxth.w	sl, sl
 8006218:	4453      	add	r3, sl
 800621a:	f8dc a000 	ldr.w	sl, [ip]
 800621e:	b292      	uxth	r2, r2
 8006220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800622e:	4581      	cmp	r9, r0
 8006230:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006234:	f84c 3b04 	str.w	r3, [ip], #4
 8006238:	d2db      	bcs.n	80061f2 <quorem+0x42>
 800623a:	f855 300b 	ldr.w	r3, [r5, fp]
 800623e:	b92b      	cbnz	r3, 800624c <quorem+0x9c>
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	3b04      	subs	r3, #4
 8006244:	429d      	cmp	r5, r3
 8006246:	461a      	mov	r2, r3
 8006248:	d32d      	bcc.n	80062a6 <quorem+0xf6>
 800624a:	613c      	str	r4, [r7, #16]
 800624c:	4638      	mov	r0, r7
 800624e:	f001 f995 	bl	800757c <__mcmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	db23      	blt.n	800629e <quorem+0xee>
 8006256:	4629      	mov	r1, r5
 8006258:	2000      	movs	r0, #0
 800625a:	3601      	adds	r6, #1
 800625c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006260:	f8d1 c000 	ldr.w	ip, [r1]
 8006264:	b293      	uxth	r3, r2
 8006266:	1ac3      	subs	r3, r0, r3
 8006268:	0c12      	lsrs	r2, r2, #16
 800626a:	fa1f f08c 	uxth.w	r0, ip
 800626e:	4403      	add	r3, r0
 8006270:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006278:	b29b      	uxth	r3, r3
 800627a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800627e:	45c1      	cmp	r9, r8
 8006280:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006284:	f841 3b04 	str.w	r3, [r1], #4
 8006288:	d2e8      	bcs.n	800625c <quorem+0xac>
 800628a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800628e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006292:	b922      	cbnz	r2, 800629e <quorem+0xee>
 8006294:	3b04      	subs	r3, #4
 8006296:	429d      	cmp	r5, r3
 8006298:	461a      	mov	r2, r3
 800629a:	d30a      	bcc.n	80062b2 <quorem+0x102>
 800629c:	613c      	str	r4, [r7, #16]
 800629e:	4630      	mov	r0, r6
 80062a0:	b003      	add	sp, #12
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	d1cd      	bne.n	800624a <quorem+0x9a>
 80062ae:	3c01      	subs	r4, #1
 80062b0:	e7c8      	b.n	8006244 <quorem+0x94>
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	3b04      	subs	r3, #4
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d1f0      	bne.n	800629c <quorem+0xec>
 80062ba:	3c01      	subs	r4, #1
 80062bc:	e7eb      	b.n	8006296 <quorem+0xe6>
 80062be:	2000      	movs	r0, #0
 80062c0:	e7ee      	b.n	80062a0 <quorem+0xf0>
 80062c2:	0000      	movs	r0, r0
 80062c4:	0000      	movs	r0, r0
	...

080062c8 <_dtoa_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	4616      	mov	r6, r2
 80062ce:	461f      	mov	r7, r3
 80062d0:	69c4      	ldr	r4, [r0, #28]
 80062d2:	b099      	sub	sp, #100	; 0x64
 80062d4:	4605      	mov	r5, r0
 80062d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062de:	b974      	cbnz	r4, 80062fe <_dtoa_r+0x36>
 80062e0:	2010      	movs	r0, #16
 80062e2:	f000 fe1d 	bl	8006f20 <malloc>
 80062e6:	4602      	mov	r2, r0
 80062e8:	61e8      	str	r0, [r5, #28]
 80062ea:	b920      	cbnz	r0, 80062f6 <_dtoa_r+0x2e>
 80062ec:	21ef      	movs	r1, #239	; 0xef
 80062ee:	4bac      	ldr	r3, [pc, #688]	; (80065a0 <_dtoa_r+0x2d8>)
 80062f0:	48ac      	ldr	r0, [pc, #688]	; (80065a4 <_dtoa_r+0x2dc>)
 80062f2:	f7ff ff3f 	bl	8006174 <__assert_func>
 80062f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062fa:	6004      	str	r4, [r0, #0]
 80062fc:	60c4      	str	r4, [r0, #12]
 80062fe:	69eb      	ldr	r3, [r5, #28]
 8006300:	6819      	ldr	r1, [r3, #0]
 8006302:	b151      	cbz	r1, 800631a <_dtoa_r+0x52>
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	2301      	movs	r3, #1
 8006308:	4093      	lsls	r3, r2
 800630a:	604a      	str	r2, [r1, #4]
 800630c:	608b      	str	r3, [r1, #8]
 800630e:	4628      	mov	r0, r5
 8006310:	f000 fefa 	bl	8007108 <_Bfree>
 8006314:	2200      	movs	r2, #0
 8006316:	69eb      	ldr	r3, [r5, #28]
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	1e3b      	subs	r3, r7, #0
 800631c:	bfaf      	iteee	ge
 800631e:	2300      	movge	r3, #0
 8006320:	2201      	movlt	r2, #1
 8006322:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006326:	9305      	strlt	r3, [sp, #20]
 8006328:	bfa8      	it	ge
 800632a:	f8c8 3000 	strge.w	r3, [r8]
 800632e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006332:	4b9d      	ldr	r3, [pc, #628]	; (80065a8 <_dtoa_r+0x2e0>)
 8006334:	bfb8      	it	lt
 8006336:	f8c8 2000 	strlt.w	r2, [r8]
 800633a:	ea33 0309 	bics.w	r3, r3, r9
 800633e:	d119      	bne.n	8006374 <_dtoa_r+0xac>
 8006340:	f242 730f 	movw	r3, #9999	; 0x270f
 8006344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800634c:	4333      	orrs	r3, r6
 800634e:	f000 8589 	beq.w	8006e64 <_dtoa_r+0xb9c>
 8006352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006354:	b953      	cbnz	r3, 800636c <_dtoa_r+0xa4>
 8006356:	4b95      	ldr	r3, [pc, #596]	; (80065ac <_dtoa_r+0x2e4>)
 8006358:	e023      	b.n	80063a2 <_dtoa_r+0xda>
 800635a:	4b95      	ldr	r3, [pc, #596]	; (80065b0 <_dtoa_r+0x2e8>)
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	3308      	adds	r3, #8
 8006360:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	9803      	ldr	r0, [sp, #12]
 8006366:	b019      	add	sp, #100	; 0x64
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	4b8f      	ldr	r3, [pc, #572]	; (80065ac <_dtoa_r+0x2e4>)
 800636e:	9303      	str	r3, [sp, #12]
 8006370:	3303      	adds	r3, #3
 8006372:	e7f5      	b.n	8006360 <_dtoa_r+0x98>
 8006374:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006378:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800637c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	2300      	movs	r3, #0
 8006384:	f7fa fb1a 	bl	80009bc <__aeabi_dcmpeq>
 8006388:	4680      	mov	r8, r0
 800638a:	b160      	cbz	r0, 80063a6 <_dtoa_r+0xde>
 800638c:	2301      	movs	r3, #1
 800638e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8562 	beq.w	8006e5e <_dtoa_r+0xb96>
 800639a:	4b86      	ldr	r3, [pc, #536]	; (80065b4 <_dtoa_r+0x2ec>)
 800639c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	9303      	str	r3, [sp, #12]
 80063a4:	e7de      	b.n	8006364 <_dtoa_r+0x9c>
 80063a6:	ab16      	add	r3, sp, #88	; 0x58
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	ab17      	add	r3, sp, #92	; 0x5c
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4628      	mov	r0, r5
 80063b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063b4:	f001 f98a 	bl	80076cc <__d2b>
 80063b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063bc:	4682      	mov	sl, r0
 80063be:	2c00      	cmp	r4, #0
 80063c0:	d07e      	beq.n	80064c0 <_dtoa_r+0x1f8>
 80063c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063d8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063dc:	4619      	mov	r1, r3
 80063de:	2200      	movs	r2, #0
 80063e0:	4b75      	ldr	r3, [pc, #468]	; (80065b8 <_dtoa_r+0x2f0>)
 80063e2:	f7f9 fecb 	bl	800017c <__aeabi_dsub>
 80063e6:	a368      	add	r3, pc, #416	; (adr r3, 8006588 <_dtoa_r+0x2c0>)
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f7fa f87e 	bl	80004ec <__aeabi_dmul>
 80063f0:	a367      	add	r3, pc, #412	; (adr r3, 8006590 <_dtoa_r+0x2c8>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7f9 fec3 	bl	8000180 <__adddf3>
 80063fa:	4606      	mov	r6, r0
 80063fc:	4620      	mov	r0, r4
 80063fe:	460f      	mov	r7, r1
 8006400:	f7fa f80a 	bl	8000418 <__aeabi_i2d>
 8006404:	a364      	add	r3, pc, #400	; (adr r3, 8006598 <_dtoa_r+0x2d0>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7fa f86f 	bl	80004ec <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7f9 feb3 	bl	8000180 <__adddf3>
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7fa fb15 	bl	8000a4c <__aeabi_d2iz>
 8006422:	2200      	movs	r2, #0
 8006424:	4683      	mov	fp, r0
 8006426:	2300      	movs	r3, #0
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa fad0 	bl	80009d0 <__aeabi_dcmplt>
 8006430:	b148      	cbz	r0, 8006446 <_dtoa_r+0x17e>
 8006432:	4658      	mov	r0, fp
 8006434:	f7f9 fff0 	bl	8000418 <__aeabi_i2d>
 8006438:	4632      	mov	r2, r6
 800643a:	463b      	mov	r3, r7
 800643c:	f7fa fabe 	bl	80009bc <__aeabi_dcmpeq>
 8006440:	b908      	cbnz	r0, 8006446 <_dtoa_r+0x17e>
 8006442:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006446:	f1bb 0f16 	cmp.w	fp, #22
 800644a:	d857      	bhi.n	80064fc <_dtoa_r+0x234>
 800644c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006450:	4b5a      	ldr	r3, [pc, #360]	; (80065bc <_dtoa_r+0x2f4>)
 8006452:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7fa fab9 	bl	80009d0 <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d04e      	beq.n	8006500 <_dtoa_r+0x238>
 8006462:	2300      	movs	r3, #0
 8006464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006468:	930f      	str	r3, [sp, #60]	; 0x3c
 800646a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800646c:	1b1b      	subs	r3, r3, r4
 800646e:	1e5a      	subs	r2, r3, #1
 8006470:	bf46      	itte	mi
 8006472:	f1c3 0901 	rsbmi	r9, r3, #1
 8006476:	2300      	movmi	r3, #0
 8006478:	f04f 0900 	movpl.w	r9, #0
 800647c:	9209      	str	r2, [sp, #36]	; 0x24
 800647e:	bf48      	it	mi
 8006480:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006482:	f1bb 0f00 	cmp.w	fp, #0
 8006486:	db3d      	blt.n	8006504 <_dtoa_r+0x23c>
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800648e:	445b      	add	r3, fp
 8006490:	9309      	str	r3, [sp, #36]	; 0x24
 8006492:	2300      	movs	r3, #0
 8006494:	930a      	str	r3, [sp, #40]	; 0x28
 8006496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006498:	2b09      	cmp	r3, #9
 800649a:	d867      	bhi.n	800656c <_dtoa_r+0x2a4>
 800649c:	2b05      	cmp	r3, #5
 800649e:	bfc4      	itt	gt
 80064a0:	3b04      	subgt	r3, #4
 80064a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a6:	bfc8      	it	gt
 80064a8:	2400      	movgt	r4, #0
 80064aa:	f1a3 0302 	sub.w	r3, r3, #2
 80064ae:	bfd8      	it	le
 80064b0:	2401      	movle	r4, #1
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	f200 8086 	bhi.w	80065c4 <_dtoa_r+0x2fc>
 80064b8:	e8df f003 	tbb	[pc, r3]
 80064bc:	5637392c 	.word	0x5637392c
 80064c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064c4:	441c      	add	r4, r3
 80064c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	bfc1      	itttt	gt
 80064ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064d2:	fa09 f903 	lslgt.w	r9, r9, r3
 80064d6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80064da:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064de:	bfd6      	itet	le
 80064e0:	f1c3 0320 	rsble	r3, r3, #32
 80064e4:	ea49 0003 	orrgt.w	r0, r9, r3
 80064e8:	fa06 f003 	lslle.w	r0, r6, r3
 80064ec:	f7f9 ff84 	bl	80003f8 <__aeabi_ui2d>
 80064f0:	2201      	movs	r2, #1
 80064f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064f6:	3c01      	subs	r4, #1
 80064f8:	9213      	str	r2, [sp, #76]	; 0x4c
 80064fa:	e76f      	b.n	80063dc <_dtoa_r+0x114>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e7b3      	b.n	8006468 <_dtoa_r+0x1a0>
 8006500:	900f      	str	r0, [sp, #60]	; 0x3c
 8006502:	e7b2      	b.n	800646a <_dtoa_r+0x1a2>
 8006504:	f1cb 0300 	rsb	r3, fp, #0
 8006508:	930a      	str	r3, [sp, #40]	; 0x28
 800650a:	2300      	movs	r3, #0
 800650c:	eba9 090b 	sub.w	r9, r9, fp
 8006510:	930e      	str	r3, [sp, #56]	; 0x38
 8006512:	e7c0      	b.n	8006496 <_dtoa_r+0x1ce>
 8006514:	2300      	movs	r3, #0
 8006516:	930b      	str	r3, [sp, #44]	; 0x2c
 8006518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800651a:	2b00      	cmp	r3, #0
 800651c:	dc55      	bgt.n	80065ca <_dtoa_r+0x302>
 800651e:	2301      	movs	r3, #1
 8006520:	461a      	mov	r2, r3
 8006522:	9306      	str	r3, [sp, #24]
 8006524:	9308      	str	r3, [sp, #32]
 8006526:	9223      	str	r2, [sp, #140]	; 0x8c
 8006528:	e00b      	b.n	8006542 <_dtoa_r+0x27a>
 800652a:	2301      	movs	r3, #1
 800652c:	e7f3      	b.n	8006516 <_dtoa_r+0x24e>
 800652e:	2300      	movs	r3, #0
 8006530:	930b      	str	r3, [sp, #44]	; 0x2c
 8006532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006534:	445b      	add	r3, fp
 8006536:	9306      	str	r3, [sp, #24]
 8006538:	3301      	adds	r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	9308      	str	r3, [sp, #32]
 800653e:	bfb8      	it	lt
 8006540:	2301      	movlt	r3, #1
 8006542:	2100      	movs	r1, #0
 8006544:	2204      	movs	r2, #4
 8006546:	69e8      	ldr	r0, [r5, #28]
 8006548:	f102 0614 	add.w	r6, r2, #20
 800654c:	429e      	cmp	r6, r3
 800654e:	d940      	bls.n	80065d2 <_dtoa_r+0x30a>
 8006550:	6041      	str	r1, [r0, #4]
 8006552:	4628      	mov	r0, r5
 8006554:	f000 fd98 	bl	8007088 <_Balloc>
 8006558:	9003      	str	r0, [sp, #12]
 800655a:	2800      	cmp	r0, #0
 800655c:	d13c      	bne.n	80065d8 <_dtoa_r+0x310>
 800655e:	4602      	mov	r2, r0
 8006560:	f240 11af 	movw	r1, #431	; 0x1af
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <_dtoa_r+0x2f8>)
 8006566:	e6c3      	b.n	80062f0 <_dtoa_r+0x28>
 8006568:	2301      	movs	r3, #1
 800656a:	e7e1      	b.n	8006530 <_dtoa_r+0x268>
 800656c:	2401      	movs	r4, #1
 800656e:	2300      	movs	r3, #0
 8006570:	940b      	str	r4, [sp, #44]	; 0x2c
 8006572:	9322      	str	r3, [sp, #136]	; 0x88
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	2200      	movs	r2, #0
 800657a:	9306      	str	r3, [sp, #24]
 800657c:	9308      	str	r3, [sp, #32]
 800657e:	2312      	movs	r3, #18
 8006580:	e7d1      	b.n	8006526 <_dtoa_r+0x25e>
 8006582:	bf00      	nop
 8006584:	f3af 8000 	nop.w
 8006588:	636f4361 	.word	0x636f4361
 800658c:	3fd287a7 	.word	0x3fd287a7
 8006590:	8b60c8b3 	.word	0x8b60c8b3
 8006594:	3fc68a28 	.word	0x3fc68a28
 8006598:	509f79fb 	.word	0x509f79fb
 800659c:	3fd34413 	.word	0x3fd34413
 80065a0:	08007fe7 	.word	0x08007fe7
 80065a4:	080080a1 	.word	0x080080a1
 80065a8:	7ff00000 	.word	0x7ff00000
 80065ac:	0800809d 	.word	0x0800809d
 80065b0:	08008094 	.word	0x08008094
 80065b4:	08007fc4 	.word	0x08007fc4
 80065b8:	3ff80000 	.word	0x3ff80000
 80065bc:	08008190 	.word	0x08008190
 80065c0:	080080f9 	.word	0x080080f9
 80065c4:	2301      	movs	r3, #1
 80065c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c8:	e7d4      	b.n	8006574 <_dtoa_r+0x2ac>
 80065ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065cc:	9306      	str	r3, [sp, #24]
 80065ce:	9308      	str	r3, [sp, #32]
 80065d0:	e7b7      	b.n	8006542 <_dtoa_r+0x27a>
 80065d2:	3101      	adds	r1, #1
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	e7b7      	b.n	8006548 <_dtoa_r+0x280>
 80065d8:	69eb      	ldr	r3, [r5, #28]
 80065da:	9a03      	ldr	r2, [sp, #12]
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	9b08      	ldr	r3, [sp, #32]
 80065e0:	2b0e      	cmp	r3, #14
 80065e2:	f200 80a8 	bhi.w	8006736 <_dtoa_r+0x46e>
 80065e6:	2c00      	cmp	r4, #0
 80065e8:	f000 80a5 	beq.w	8006736 <_dtoa_r+0x46e>
 80065ec:	f1bb 0f00 	cmp.w	fp, #0
 80065f0:	dd34      	ble.n	800665c <_dtoa_r+0x394>
 80065f2:	4b9a      	ldr	r3, [pc, #616]	; (800685c <_dtoa_r+0x594>)
 80065f4:	f00b 020f 	and.w	r2, fp, #15
 80065f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006604:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006608:	ea4f 142b 	mov.w	r4, fp, asr #4
 800660c:	d016      	beq.n	800663c <_dtoa_r+0x374>
 800660e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006612:	4b93      	ldr	r3, [pc, #588]	; (8006860 <_dtoa_r+0x598>)
 8006614:	2703      	movs	r7, #3
 8006616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800661a:	f7fa f891 	bl	8000740 <__aeabi_ddiv>
 800661e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006622:	f004 040f 	and.w	r4, r4, #15
 8006626:	4e8e      	ldr	r6, [pc, #568]	; (8006860 <_dtoa_r+0x598>)
 8006628:	b954      	cbnz	r4, 8006640 <_dtoa_r+0x378>
 800662a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800662e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006632:	f7fa f885 	bl	8000740 <__aeabi_ddiv>
 8006636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800663a:	e029      	b.n	8006690 <_dtoa_r+0x3c8>
 800663c:	2702      	movs	r7, #2
 800663e:	e7f2      	b.n	8006626 <_dtoa_r+0x35e>
 8006640:	07e1      	lsls	r1, r4, #31
 8006642:	d508      	bpl.n	8006656 <_dtoa_r+0x38e>
 8006644:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006648:	e9d6 2300 	ldrd	r2, r3, [r6]
 800664c:	f7f9 ff4e 	bl	80004ec <__aeabi_dmul>
 8006650:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006654:	3701      	adds	r7, #1
 8006656:	1064      	asrs	r4, r4, #1
 8006658:	3608      	adds	r6, #8
 800665a:	e7e5      	b.n	8006628 <_dtoa_r+0x360>
 800665c:	f000 80a5 	beq.w	80067aa <_dtoa_r+0x4e2>
 8006660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006664:	f1cb 0400 	rsb	r4, fp, #0
 8006668:	4b7c      	ldr	r3, [pc, #496]	; (800685c <_dtoa_r+0x594>)
 800666a:	f004 020f 	and.w	r2, r4, #15
 800666e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7f9 ff39 	bl	80004ec <__aeabi_dmul>
 800667a:	2702      	movs	r7, #2
 800667c:	2300      	movs	r3, #0
 800667e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006682:	4e77      	ldr	r6, [pc, #476]	; (8006860 <_dtoa_r+0x598>)
 8006684:	1124      	asrs	r4, r4, #4
 8006686:	2c00      	cmp	r4, #0
 8006688:	f040 8084 	bne.w	8006794 <_dtoa_r+0x4cc>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1d2      	bne.n	8006636 <_dtoa_r+0x36e>
 8006690:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006694:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8087 	beq.w	80067ae <_dtoa_r+0x4e6>
 80066a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066a4:	2200      	movs	r2, #0
 80066a6:	4b6f      	ldr	r3, [pc, #444]	; (8006864 <_dtoa_r+0x59c>)
 80066a8:	f7fa f992 	bl	80009d0 <__aeabi_dcmplt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d07e      	beq.n	80067ae <_dtoa_r+0x4e6>
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d07b      	beq.n	80067ae <_dtoa_r+0x4e6>
 80066b6:	9b06      	ldr	r3, [sp, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dd38      	ble.n	800672e <_dtoa_r+0x466>
 80066bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066c0:	2200      	movs	r2, #0
 80066c2:	4b69      	ldr	r3, [pc, #420]	; (8006868 <_dtoa_r+0x5a0>)
 80066c4:	f7f9 ff12 	bl	80004ec <__aeabi_dmul>
 80066c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066cc:	9c06      	ldr	r4, [sp, #24]
 80066ce:	f10b 38ff 	add.w	r8, fp, #4294967295
 80066d2:	3701      	adds	r7, #1
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7f9 fe9f 	bl	8000418 <__aeabi_i2d>
 80066da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066de:	f7f9 ff05 	bl	80004ec <__aeabi_dmul>
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b61      	ldr	r3, [pc, #388]	; (800686c <_dtoa_r+0x5a4>)
 80066e6:	f7f9 fd4b 	bl	8000180 <__adddf3>
 80066ea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066f2:	9611      	str	r6, [sp, #68]	; 0x44
 80066f4:	2c00      	cmp	r4, #0
 80066f6:	d15d      	bne.n	80067b4 <_dtoa_r+0x4ec>
 80066f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4b5c      	ldr	r3, [pc, #368]	; (8006870 <_dtoa_r+0x5a8>)
 8006700:	f7f9 fd3c 	bl	800017c <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800670c:	4633      	mov	r3, r6
 800670e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006710:	f7fa f97c 	bl	8000a0c <__aeabi_dcmpgt>
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 8295 	bne.w	8006c44 <_dtoa_r+0x97c>
 800671a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800671e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006720:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006724:	f7fa f954 	bl	80009d0 <__aeabi_dcmplt>
 8006728:	2800      	cmp	r0, #0
 800672a:	f040 8289 	bne.w	8006c40 <_dtoa_r+0x978>
 800672e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006732:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006738:	2b00      	cmp	r3, #0
 800673a:	f2c0 8151 	blt.w	80069e0 <_dtoa_r+0x718>
 800673e:	f1bb 0f0e 	cmp.w	fp, #14
 8006742:	f300 814d 	bgt.w	80069e0 <_dtoa_r+0x718>
 8006746:	4b45      	ldr	r3, [pc, #276]	; (800685c <_dtoa_r+0x594>)
 8006748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800674c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006750:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006754:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006756:	2b00      	cmp	r3, #0
 8006758:	f280 80da 	bge.w	8006910 <_dtoa_r+0x648>
 800675c:	9b08      	ldr	r3, [sp, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f300 80d6 	bgt.w	8006910 <_dtoa_r+0x648>
 8006764:	f040 826b 	bne.w	8006c3e <_dtoa_r+0x976>
 8006768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676c:	2200      	movs	r2, #0
 800676e:	4b40      	ldr	r3, [pc, #256]	; (8006870 <_dtoa_r+0x5a8>)
 8006770:	f7f9 febc 	bl	80004ec <__aeabi_dmul>
 8006774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006778:	f7fa f93e 	bl	80009f8 <__aeabi_dcmpge>
 800677c:	9c08      	ldr	r4, [sp, #32]
 800677e:	4626      	mov	r6, r4
 8006780:	2800      	cmp	r0, #0
 8006782:	f040 8241 	bne.w	8006c08 <_dtoa_r+0x940>
 8006786:	2331      	movs	r3, #49	; 0x31
 8006788:	9f03      	ldr	r7, [sp, #12]
 800678a:	f10b 0b01 	add.w	fp, fp, #1
 800678e:	f807 3b01 	strb.w	r3, [r7], #1
 8006792:	e23d      	b.n	8006c10 <_dtoa_r+0x948>
 8006794:	07e2      	lsls	r2, r4, #31
 8006796:	d505      	bpl.n	80067a4 <_dtoa_r+0x4dc>
 8006798:	e9d6 2300 	ldrd	r2, r3, [r6]
 800679c:	f7f9 fea6 	bl	80004ec <__aeabi_dmul>
 80067a0:	2301      	movs	r3, #1
 80067a2:	3701      	adds	r7, #1
 80067a4:	1064      	asrs	r4, r4, #1
 80067a6:	3608      	adds	r6, #8
 80067a8:	e76d      	b.n	8006686 <_dtoa_r+0x3be>
 80067aa:	2702      	movs	r7, #2
 80067ac:	e770      	b.n	8006690 <_dtoa_r+0x3c8>
 80067ae:	46d8      	mov	r8, fp
 80067b0:	9c08      	ldr	r4, [sp, #32]
 80067b2:	e78f      	b.n	80066d4 <_dtoa_r+0x40c>
 80067b4:	9903      	ldr	r1, [sp, #12]
 80067b6:	4b29      	ldr	r3, [pc, #164]	; (800685c <_dtoa_r+0x594>)
 80067b8:	4421      	add	r1, r4
 80067ba:	9112      	str	r1, [sp, #72]	; 0x48
 80067bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d054      	beq.n	8006878 <_dtoa_r+0x5b0>
 80067ce:	2000      	movs	r0, #0
 80067d0:	4928      	ldr	r1, [pc, #160]	; (8006874 <_dtoa_r+0x5ac>)
 80067d2:	f7f9 ffb5 	bl	8000740 <__aeabi_ddiv>
 80067d6:	463b      	mov	r3, r7
 80067d8:	4632      	mov	r2, r6
 80067da:	f7f9 fccf 	bl	800017c <__aeabi_dsub>
 80067de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067e2:	9f03      	ldr	r7, [sp, #12]
 80067e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e8:	f7fa f930 	bl	8000a4c <__aeabi_d2iz>
 80067ec:	4604      	mov	r4, r0
 80067ee:	f7f9 fe13 	bl	8000418 <__aeabi_i2d>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067fa:	f7f9 fcbf 	bl	800017c <__aeabi_dsub>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	3430      	adds	r4, #48	; 0x30
 8006804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800680c:	f807 4b01 	strb.w	r4, [r7], #1
 8006810:	f7fa f8de 	bl	80009d0 <__aeabi_dcmplt>
 8006814:	2800      	cmp	r0, #0
 8006816:	d173      	bne.n	8006900 <_dtoa_r+0x638>
 8006818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681c:	2000      	movs	r0, #0
 800681e:	4911      	ldr	r1, [pc, #68]	; (8006864 <_dtoa_r+0x59c>)
 8006820:	f7f9 fcac 	bl	800017c <__aeabi_dsub>
 8006824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006828:	f7fa f8d2 	bl	80009d0 <__aeabi_dcmplt>
 800682c:	2800      	cmp	r0, #0
 800682e:	f040 80b6 	bne.w	800699e <_dtoa_r+0x6d6>
 8006832:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006834:	429f      	cmp	r7, r3
 8006836:	f43f af7a 	beq.w	800672e <_dtoa_r+0x466>
 800683a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800683e:	2200      	movs	r2, #0
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <_dtoa_r+0x5a0>)
 8006842:	f7f9 fe53 	bl	80004ec <__aeabi_dmul>
 8006846:	2200      	movs	r2, #0
 8006848:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800684c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <_dtoa_r+0x5a0>)
 8006852:	f7f9 fe4b 	bl	80004ec <__aeabi_dmul>
 8006856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800685a:	e7c3      	b.n	80067e4 <_dtoa_r+0x51c>
 800685c:	08008190 	.word	0x08008190
 8006860:	08008168 	.word	0x08008168
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	40240000 	.word	0x40240000
 800686c:	401c0000 	.word	0x401c0000
 8006870:	40140000 	.word	0x40140000
 8006874:	3fe00000 	.word	0x3fe00000
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7f9 fe36 	bl	80004ec <__aeabi_dmul>
 8006880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006886:	9c03      	ldr	r4, [sp, #12]
 8006888:	9314      	str	r3, [sp, #80]	; 0x50
 800688a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800688e:	f7fa f8dd 	bl	8000a4c <__aeabi_d2iz>
 8006892:	9015      	str	r0, [sp, #84]	; 0x54
 8006894:	f7f9 fdc0 	bl	8000418 <__aeabi_i2d>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a0:	f7f9 fc6c 	bl	800017c <__aeabi_dsub>
 80068a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068a6:	4606      	mov	r6, r0
 80068a8:	3330      	adds	r3, #48	; 0x30
 80068aa:	f804 3b01 	strb.w	r3, [r4], #1
 80068ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068b0:	460f      	mov	r7, r1
 80068b2:	429c      	cmp	r4, r3
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	d124      	bne.n	8006904 <_dtoa_r+0x63c>
 80068ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068be:	4baf      	ldr	r3, [pc, #700]	; (8006b7c <_dtoa_r+0x8b4>)
 80068c0:	f7f9 fc5e 	bl	8000180 <__adddf3>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	f7fa f89e 	bl	8000a0c <__aeabi_dcmpgt>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d163      	bne.n	800699c <_dtoa_r+0x6d4>
 80068d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068d8:	2000      	movs	r0, #0
 80068da:	49a8      	ldr	r1, [pc, #672]	; (8006b7c <_dtoa_r+0x8b4>)
 80068dc:	f7f9 fc4e 	bl	800017c <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f872 	bl	80009d0 <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f43f af1e 	beq.w	800672e <_dtoa_r+0x466>
 80068f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068f4:	1e7b      	subs	r3, r7, #1
 80068f6:	9314      	str	r3, [sp, #80]	; 0x50
 80068f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80068fc:	2b30      	cmp	r3, #48	; 0x30
 80068fe:	d0f8      	beq.n	80068f2 <_dtoa_r+0x62a>
 8006900:	46c3      	mov	fp, r8
 8006902:	e03b      	b.n	800697c <_dtoa_r+0x6b4>
 8006904:	4b9e      	ldr	r3, [pc, #632]	; (8006b80 <_dtoa_r+0x8b8>)
 8006906:	f7f9 fdf1 	bl	80004ec <__aeabi_dmul>
 800690a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690e:	e7bc      	b.n	800688a <_dtoa_r+0x5c2>
 8006910:	9f03      	ldr	r7, [sp, #12]
 8006912:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 ff0f 	bl	8000740 <__aeabi_ddiv>
 8006922:	f7fa f893 	bl	8000a4c <__aeabi_d2iz>
 8006926:	4604      	mov	r4, r0
 8006928:	f7f9 fd76 	bl	8000418 <__aeabi_i2d>
 800692c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006930:	f7f9 fddc 	bl	80004ec <__aeabi_dmul>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f7f9 fc1e 	bl	800017c <__aeabi_dsub>
 8006940:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006944:	f807 6b01 	strb.w	r6, [r7], #1
 8006948:	9e03      	ldr	r6, [sp, #12]
 800694a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800694e:	1bbe      	subs	r6, r7, r6
 8006950:	45b4      	cmp	ip, r6
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	d136      	bne.n	80069c6 <_dtoa_r+0x6fe>
 8006958:	f7f9 fc12 	bl	8000180 <__adddf3>
 800695c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006960:	4680      	mov	r8, r0
 8006962:	4689      	mov	r9, r1
 8006964:	f7fa f852 	bl	8000a0c <__aeabi_dcmpgt>
 8006968:	bb58      	cbnz	r0, 80069c2 <_dtoa_r+0x6fa>
 800696a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800696e:	4640      	mov	r0, r8
 8006970:	4649      	mov	r1, r9
 8006972:	f7fa f823 	bl	80009bc <__aeabi_dcmpeq>
 8006976:	b108      	cbz	r0, 800697c <_dtoa_r+0x6b4>
 8006978:	07e3      	lsls	r3, r4, #31
 800697a:	d422      	bmi.n	80069c2 <_dtoa_r+0x6fa>
 800697c:	4651      	mov	r1, sl
 800697e:	4628      	mov	r0, r5
 8006980:	f000 fbc2 	bl	8007108 <_Bfree>
 8006984:	2300      	movs	r3, #0
 8006986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006988:	703b      	strb	r3, [r7, #0]
 800698a:	f10b 0301 	add.w	r3, fp, #1
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006992:	2b00      	cmp	r3, #0
 8006994:	f43f ace6 	beq.w	8006364 <_dtoa_r+0x9c>
 8006998:	601f      	str	r7, [r3, #0]
 800699a:	e4e3      	b.n	8006364 <_dtoa_r+0x9c>
 800699c:	4627      	mov	r7, r4
 800699e:	463b      	mov	r3, r7
 80069a0:	461f      	mov	r7, r3
 80069a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069a6:	2a39      	cmp	r2, #57	; 0x39
 80069a8:	d107      	bne.n	80069ba <_dtoa_r+0x6f2>
 80069aa:	9a03      	ldr	r2, [sp, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d1f7      	bne.n	80069a0 <_dtoa_r+0x6d8>
 80069b0:	2230      	movs	r2, #48	; 0x30
 80069b2:	9903      	ldr	r1, [sp, #12]
 80069b4:	f108 0801 	add.w	r8, r8, #1
 80069b8:	700a      	strb	r2, [r1, #0]
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	3201      	adds	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e79e      	b.n	8006900 <_dtoa_r+0x638>
 80069c2:	46d8      	mov	r8, fp
 80069c4:	e7eb      	b.n	800699e <_dtoa_r+0x6d6>
 80069c6:	2200      	movs	r2, #0
 80069c8:	4b6d      	ldr	r3, [pc, #436]	; (8006b80 <_dtoa_r+0x8b8>)
 80069ca:	f7f9 fd8f 	bl	80004ec <__aeabi_dmul>
 80069ce:	2200      	movs	r2, #0
 80069d0:	2300      	movs	r3, #0
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	f7f9 fff1 	bl	80009bc <__aeabi_dcmpeq>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d09b      	beq.n	8006916 <_dtoa_r+0x64e>
 80069de:	e7cd      	b.n	800697c <_dtoa_r+0x6b4>
 80069e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	f000 80c4 	beq.w	8006b70 <_dtoa_r+0x8a8>
 80069e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	f300 80a8 	bgt.w	8006b40 <_dtoa_r+0x878>
 80069f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	f000 80a0 	beq.w	8006b38 <_dtoa_r+0x870>
 80069f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069fc:	464f      	mov	r7, r9
 80069fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a02:	2101      	movs	r1, #1
 8006a04:	441a      	add	r2, r3
 8006a06:	4628      	mov	r0, r5
 8006a08:	4499      	add	r9, r3
 8006a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a0c:	f000 fc32 	bl	8007274 <__i2b>
 8006a10:	4606      	mov	r6, r0
 8006a12:	b15f      	cbz	r7, 8006a2c <_dtoa_r+0x764>
 8006a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd08      	ble.n	8006a2c <_dtoa_r+0x764>
 8006a1a:	42bb      	cmp	r3, r7
 8006a1c:	bfa8      	it	ge
 8006a1e:	463b      	movge	r3, r7
 8006a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a22:	eba9 0903 	sub.w	r9, r9, r3
 8006a26:	1aff      	subs	r7, r7, r3
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2e:	b1f3      	cbz	r3, 8006a6e <_dtoa_r+0x7a6>
 8006a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80a0 	beq.w	8006b78 <_dtoa_r+0x8b0>
 8006a38:	2c00      	cmp	r4, #0
 8006a3a:	dd10      	ble.n	8006a5e <_dtoa_r+0x796>
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 fcd5 	bl	80073f0 <__pow5mult>
 8006a46:	4652      	mov	r2, sl
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 fc27 	bl	80072a0 <__multiply>
 8006a52:	4680      	mov	r8, r0
 8006a54:	4651      	mov	r1, sl
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 fb56 	bl	8007108 <_Bfree>
 8006a5c:	46c2      	mov	sl, r8
 8006a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a60:	1b1a      	subs	r2, r3, r4
 8006a62:	d004      	beq.n	8006a6e <_dtoa_r+0x7a6>
 8006a64:	4651      	mov	r1, sl
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fcc2 	bl	80073f0 <__pow5mult>
 8006a6c:	4682      	mov	sl, r0
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 fbff 	bl	8007274 <__i2b>
 8006a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a78:	4604      	mov	r4, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f340 8082 	ble.w	8006b84 <_dtoa_r+0x8bc>
 8006a80:	461a      	mov	r2, r3
 8006a82:	4601      	mov	r1, r0
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 fcb3 	bl	80073f0 <__pow5mult>
 8006a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	dd7b      	ble.n	8006b8a <_dtoa_r+0x8c2>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a9c:	6918      	ldr	r0, [r3, #16]
 8006a9e:	f000 fb9b 	bl	80071d8 <__hi0bits>
 8006aa2:	f1c0 0020 	rsb	r0, r0, #32
 8006aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa8:	4418      	add	r0, r3
 8006aaa:	f010 001f 	ands.w	r0, r0, #31
 8006aae:	f000 8092 	beq.w	8006bd6 <_dtoa_r+0x90e>
 8006ab2:	f1c0 0320 	rsb	r3, r0, #32
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	f340 8085 	ble.w	8006bc6 <_dtoa_r+0x8fe>
 8006abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abe:	f1c0 001c 	rsb	r0, r0, #28
 8006ac2:	4403      	add	r3, r0
 8006ac4:	4481      	add	r9, r0
 8006ac6:	4407      	add	r7, r0
 8006ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aca:	f1b9 0f00 	cmp.w	r9, #0
 8006ace:	dd05      	ble.n	8006adc <_dtoa_r+0x814>
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	464a      	mov	r2, r9
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 fce5 	bl	80074a4 <__lshift>
 8006ada:	4682      	mov	sl, r0
 8006adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dd05      	ble.n	8006aee <_dtoa_r+0x826>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 fcdc 	bl	80074a4 <__lshift>
 8006aec:	4604      	mov	r4, r0
 8006aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d072      	beq.n	8006bda <_dtoa_r+0x912>
 8006af4:	4621      	mov	r1, r4
 8006af6:	4650      	mov	r0, sl
 8006af8:	f000 fd40 	bl	800757c <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	da6c      	bge.n	8006bda <_dtoa_r+0x912>
 8006b00:	2300      	movs	r3, #0
 8006b02:	4651      	mov	r1, sl
 8006b04:	220a      	movs	r2, #10
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fb20 	bl	800714c <__multadd>
 8006b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0e:	4682      	mov	sl, r0
 8006b10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 81ac 	beq.w	8006e72 <_dtoa_r+0xbaa>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	220a      	movs	r2, #10
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 fb13 	bl	800714c <__multadd>
 8006b26:	9b06      	ldr	r3, [sp, #24]
 8006b28:	4606      	mov	r6, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f300 8093 	bgt.w	8006c56 <_dtoa_r+0x98e>
 8006b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	dc59      	bgt.n	8006bea <_dtoa_r+0x922>
 8006b36:	e08e      	b.n	8006c56 <_dtoa_r+0x98e>
 8006b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b3e:	e75d      	b.n	80069fc <_dtoa_r+0x734>
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	1e5c      	subs	r4, r3, #1
 8006b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	bfbf      	itttt	lt
 8006b4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b4e:	1ae3      	sublt	r3, r4, r3
 8006b50:	18d2      	addlt	r2, r2, r3
 8006b52:	bfa8      	it	ge
 8006b54:	1b1c      	subge	r4, r3, r4
 8006b56:	9b08      	ldr	r3, [sp, #32]
 8006b58:	bfbe      	ittt	lt
 8006b5a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b5c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b5e:	2400      	movlt	r4, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bfb5      	itete	lt
 8006b64:	eba9 0703 	sublt.w	r7, r9, r3
 8006b68:	464f      	movge	r7, r9
 8006b6a:	2300      	movlt	r3, #0
 8006b6c:	9b08      	ldrge	r3, [sp, #32]
 8006b6e:	e747      	b.n	8006a00 <_dtoa_r+0x738>
 8006b70:	464f      	mov	r7, r9
 8006b72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b76:	e74c      	b.n	8006a12 <_dtoa_r+0x74a>
 8006b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b7a:	e773      	b.n	8006a64 <_dtoa_r+0x79c>
 8006b7c:	3fe00000 	.word	0x3fe00000
 8006b80:	40240000 	.word	0x40240000
 8006b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	dc18      	bgt.n	8006bbc <_dtoa_r+0x8f4>
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	b9b3      	cbnz	r3, 8006bbc <_dtoa_r+0x8f4>
 8006b8e:	9b05      	ldr	r3, [sp, #20]
 8006b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b94:	b993      	cbnz	r3, 8006bbc <_dtoa_r+0x8f4>
 8006b96:	9b05      	ldr	r3, [sp, #20]
 8006b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	051b      	lsls	r3, r3, #20
 8006ba0:	b17b      	cbz	r3, 8006bc2 <_dtoa_r+0x8fa>
 8006ba2:	f04f 0801 	mov.w	r8, #1
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	f109 0901 	add.w	r9, r9, #1
 8006bac:	3301      	adds	r3, #1
 8006bae:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f47f af6f 	bne.w	8006a96 <_dtoa_r+0x7ce>
 8006bb8:	2001      	movs	r0, #1
 8006bba:	e774      	b.n	8006aa6 <_dtoa_r+0x7de>
 8006bbc:	f04f 0800 	mov.w	r8, #0
 8006bc0:	e7f6      	b.n	8006bb0 <_dtoa_r+0x8e8>
 8006bc2:	4698      	mov	r8, r3
 8006bc4:	e7f4      	b.n	8006bb0 <_dtoa_r+0x8e8>
 8006bc6:	d080      	beq.n	8006aca <_dtoa_r+0x802>
 8006bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bca:	331c      	adds	r3, #28
 8006bcc:	441a      	add	r2, r3
 8006bce:	4499      	add	r9, r3
 8006bd0:	441f      	add	r7, r3
 8006bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd4:	e779      	b.n	8006aca <_dtoa_r+0x802>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	e7f6      	b.n	8006bc8 <_dtoa_r+0x900>
 8006bda:	9b08      	ldr	r3, [sp, #32]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dc34      	bgt.n	8006c4a <_dtoa_r+0x982>
 8006be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	dd31      	ble.n	8006c4a <_dtoa_r+0x982>
 8006be6:	9b08      	ldr	r3, [sp, #32]
 8006be8:	9306      	str	r3, [sp, #24]
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	b963      	cbnz	r3, 8006c08 <_dtoa_r+0x940>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f000 faaa 	bl	800714c <__multadd>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	f000 fcbd 	bl	800757c <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f73f adbf 	bgt.w	8006786 <_dtoa_r+0x4be>
 8006c08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c0a:	9f03      	ldr	r7, [sp, #12]
 8006c0c:	ea6f 0b03 	mvn.w	fp, r3
 8006c10:	f04f 0800 	mov.w	r8, #0
 8006c14:	4621      	mov	r1, r4
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 fa76 	bl	8007108 <_Bfree>
 8006c1c:	2e00      	cmp	r6, #0
 8006c1e:	f43f aead 	beq.w	800697c <_dtoa_r+0x6b4>
 8006c22:	f1b8 0f00 	cmp.w	r8, #0
 8006c26:	d005      	beq.n	8006c34 <_dtoa_r+0x96c>
 8006c28:	45b0      	cmp	r8, r6
 8006c2a:	d003      	beq.n	8006c34 <_dtoa_r+0x96c>
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 fa6a 	bl	8007108 <_Bfree>
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 fa66 	bl	8007108 <_Bfree>
 8006c3c:	e69e      	b.n	800697c <_dtoa_r+0x6b4>
 8006c3e:	2400      	movs	r4, #0
 8006c40:	4626      	mov	r6, r4
 8006c42:	e7e1      	b.n	8006c08 <_dtoa_r+0x940>
 8006c44:	46c3      	mov	fp, r8
 8006c46:	4626      	mov	r6, r4
 8006c48:	e59d      	b.n	8006786 <_dtoa_r+0x4be>
 8006c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80c8 	beq.w	8006de2 <_dtoa_r+0xb1a>
 8006c52:	9b08      	ldr	r3, [sp, #32]
 8006c54:	9306      	str	r3, [sp, #24]
 8006c56:	2f00      	cmp	r7, #0
 8006c58:	dd05      	ble.n	8006c66 <_dtoa_r+0x99e>
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	463a      	mov	r2, r7
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fc20 	bl	80074a4 <__lshift>
 8006c64:	4606      	mov	r6, r0
 8006c66:	f1b8 0f00 	cmp.w	r8, #0
 8006c6a:	d05b      	beq.n	8006d24 <_dtoa_r+0xa5c>
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	6871      	ldr	r1, [r6, #4]
 8006c70:	f000 fa0a 	bl	8007088 <_Balloc>
 8006c74:	4607      	mov	r7, r0
 8006c76:	b928      	cbnz	r0, 8006c84 <_dtoa_r+0x9bc>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c7e:	4b81      	ldr	r3, [pc, #516]	; (8006e84 <_dtoa_r+0xbbc>)
 8006c80:	f7ff bb36 	b.w	80062f0 <_dtoa_r+0x28>
 8006c84:	6932      	ldr	r2, [r6, #16]
 8006c86:	f106 010c 	add.w	r1, r6, #12
 8006c8a:	3202      	adds	r2, #2
 8006c8c:	0092      	lsls	r2, r2, #2
 8006c8e:	300c      	adds	r0, #12
 8006c90:	f001 f804 	bl	8007c9c <memcpy>
 8006c94:	2201      	movs	r2, #1
 8006c96:	4639      	mov	r1, r7
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 fc03 	bl	80074a4 <__lshift>
 8006c9e:	46b0      	mov	r8, r6
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	9a03      	ldr	r2, [sp, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	9308      	str	r3, [sp, #32]
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	4413      	add	r3, r2
 8006cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cb0:	9b04      	ldr	r3, [sp, #16]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb8:	9b08      	ldr	r3, [sp, #32]
 8006cba:	4621      	mov	r1, r4
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	4650      	mov	r0, sl
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	f7ff fa75 	bl	80061b0 <quorem>
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	9006      	str	r0, [sp, #24]
 8006cca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cce:	4650      	mov	r0, sl
 8006cd0:	f000 fc54 	bl	800757c <__mcmp>
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	9009      	str	r0, [sp, #36]	; 0x24
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f000 fc6a 	bl	80075b4 <__mdiff>
 8006ce0:	68c2      	ldr	r2, [r0, #12]
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	bb02      	cbnz	r2, 8006d28 <_dtoa_r+0xa60>
 8006ce6:	4601      	mov	r1, r0
 8006ce8:	4650      	mov	r0, sl
 8006cea:	f000 fc47 	bl	800757c <__mcmp>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	920c      	str	r2, [sp, #48]	; 0x30
 8006cf6:	f000 fa07 	bl	8007108 <_Bfree>
 8006cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cfe:	9f08      	ldr	r7, [sp, #32]
 8006d00:	ea43 0102 	orr.w	r1, r3, r2
 8006d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d06:	4319      	orrs	r1, r3
 8006d08:	d110      	bne.n	8006d2c <_dtoa_r+0xa64>
 8006d0a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d0e:	d029      	beq.n	8006d64 <_dtoa_r+0xa9c>
 8006d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dd02      	ble.n	8006d1c <_dtoa_r+0xa54>
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	f883 9000 	strb.w	r9, [r3]
 8006d22:	e777      	b.n	8006c14 <_dtoa_r+0x94c>
 8006d24:	4630      	mov	r0, r6
 8006d26:	e7ba      	b.n	8006c9e <_dtoa_r+0x9d6>
 8006d28:	2201      	movs	r2, #1
 8006d2a:	e7e1      	b.n	8006cf0 <_dtoa_r+0xa28>
 8006d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	db04      	blt.n	8006d3c <_dtoa_r+0xa74>
 8006d32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d34:	430b      	orrs	r3, r1
 8006d36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	d120      	bne.n	8006d7e <_dtoa_r+0xab6>
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	dded      	ble.n	8006d1c <_dtoa_r+0xa54>
 8006d40:	4651      	mov	r1, sl
 8006d42:	2201      	movs	r2, #1
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 fbad 	bl	80074a4 <__lshift>
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4682      	mov	sl, r0
 8006d4e:	f000 fc15 	bl	800757c <__mcmp>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	dc03      	bgt.n	8006d5e <_dtoa_r+0xa96>
 8006d56:	d1e1      	bne.n	8006d1c <_dtoa_r+0xa54>
 8006d58:	f019 0f01 	tst.w	r9, #1
 8006d5c:	d0de      	beq.n	8006d1c <_dtoa_r+0xa54>
 8006d5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d62:	d1d8      	bne.n	8006d16 <_dtoa_r+0xa4e>
 8006d64:	2339      	movs	r3, #57	; 0x39
 8006d66:	9a04      	ldr	r2, [sp, #16]
 8006d68:	7013      	strb	r3, [r2, #0]
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	461f      	mov	r7, r3
 8006d6e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	2a39      	cmp	r2, #57	; 0x39
 8006d76:	d06b      	beq.n	8006e50 <_dtoa_r+0xb88>
 8006d78:	3201      	adds	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e74a      	b.n	8006c14 <_dtoa_r+0x94c>
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	dd07      	ble.n	8006d92 <_dtoa_r+0xaca>
 8006d82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d86:	d0ed      	beq.n	8006d64 <_dtoa_r+0xa9c>
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	f109 0301 	add.w	r3, r9, #1
 8006d8e:	7013      	strb	r3, [r2, #0]
 8006d90:	e740      	b.n	8006c14 <_dtoa_r+0x94c>
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d96:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d042      	beq.n	8006e24 <_dtoa_r+0xb5c>
 8006d9e:	4651      	mov	r1, sl
 8006da0:	2300      	movs	r3, #0
 8006da2:	220a      	movs	r2, #10
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f9d1 	bl	800714c <__multadd>
 8006daa:	45b0      	cmp	r8, r6
 8006dac:	4682      	mov	sl, r0
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	f04f 020a 	mov.w	r2, #10
 8006db6:	4641      	mov	r1, r8
 8006db8:	4628      	mov	r0, r5
 8006dba:	d107      	bne.n	8006dcc <_dtoa_r+0xb04>
 8006dbc:	f000 f9c6 	bl	800714c <__multadd>
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	9b08      	ldr	r3, [sp, #32]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	9308      	str	r3, [sp, #32]
 8006dca:	e775      	b.n	8006cb8 <_dtoa_r+0x9f0>
 8006dcc:	f000 f9be 	bl	800714c <__multadd>
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	220a      	movs	r2, #10
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 f9b7 	bl	800714c <__multadd>
 8006dde:	4606      	mov	r6, r0
 8006de0:	e7f0      	b.n	8006dc4 <_dtoa_r+0xafc>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	9306      	str	r3, [sp, #24]
 8006de6:	9f03      	ldr	r7, [sp, #12]
 8006de8:	4621      	mov	r1, r4
 8006dea:	4650      	mov	r0, sl
 8006dec:	f7ff f9e0 	bl	80061b0 <quorem>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006df6:	f807 9b01 	strb.w	r9, [r7], #1
 8006dfa:	1afa      	subs	r2, r7, r3
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	dd07      	ble.n	8006e12 <_dtoa_r+0xb4a>
 8006e02:	4651      	mov	r1, sl
 8006e04:	2300      	movs	r3, #0
 8006e06:	220a      	movs	r2, #10
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 f99f 	bl	800714c <__multadd>
 8006e0e:	4682      	mov	sl, r0
 8006e10:	e7ea      	b.n	8006de8 <_dtoa_r+0xb20>
 8006e12:	9b06      	ldr	r3, [sp, #24]
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfcc      	ite	gt
 8006e1c:	461f      	movgt	r7, r3
 8006e1e:	2701      	movle	r7, #1
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	441f      	add	r7, r3
 8006e24:	4651      	mov	r1, sl
 8006e26:	2201      	movs	r2, #1
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 fb3b 	bl	80074a4 <__lshift>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4682      	mov	sl, r0
 8006e32:	f000 fba3 	bl	800757c <__mcmp>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	dc97      	bgt.n	8006d6a <_dtoa_r+0xaa2>
 8006e3a:	d102      	bne.n	8006e42 <_dtoa_r+0xb7a>
 8006e3c:	f019 0f01 	tst.w	r9, #1
 8006e40:	d193      	bne.n	8006d6a <_dtoa_r+0xaa2>
 8006e42:	463b      	mov	r3, r7
 8006e44:	461f      	mov	r7, r3
 8006e46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e4a:	2a30      	cmp	r2, #48	; 0x30
 8006e4c:	d0fa      	beq.n	8006e44 <_dtoa_r+0xb7c>
 8006e4e:	e6e1      	b.n	8006c14 <_dtoa_r+0x94c>
 8006e50:	9a03      	ldr	r2, [sp, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d18a      	bne.n	8006d6c <_dtoa_r+0xaa4>
 8006e56:	2331      	movs	r3, #49	; 0x31
 8006e58:	f10b 0b01 	add.w	fp, fp, #1
 8006e5c:	e797      	b.n	8006d8e <_dtoa_r+0xac6>
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <_dtoa_r+0xbc0>)
 8006e60:	f7ff ba9f 	b.w	80063a2 <_dtoa_r+0xda>
 8006e64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f47f aa77 	bne.w	800635a <_dtoa_r+0x92>
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <_dtoa_r+0xbc4>)
 8006e6e:	f7ff ba98 	b.w	80063a2 <_dtoa_r+0xda>
 8006e72:	9b06      	ldr	r3, [sp, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dcb6      	bgt.n	8006de6 <_dtoa_r+0xb1e>
 8006e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	f73f aeb5 	bgt.w	8006bea <_dtoa_r+0x922>
 8006e80:	e7b1      	b.n	8006de6 <_dtoa_r+0xb1e>
 8006e82:	bf00      	nop
 8006e84:	080080f9 	.word	0x080080f9
 8006e88:	08007fc3 	.word	0x08007fc3
 8006e8c:	08008094 	.word	0x08008094

08006e90 <_free_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4605      	mov	r5, r0
 8006e94:	2900      	cmp	r1, #0
 8006e96:	d040      	beq.n	8006f1a <_free_r+0x8a>
 8006e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9c:	1f0c      	subs	r4, r1, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfb8      	it	lt
 8006ea2:	18e4      	addlt	r4, r4, r3
 8006ea4:	f000 f8e4 	bl	8007070 <__malloc_lock>
 8006ea8:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <_free_r+0x8c>)
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	b933      	cbnz	r3, 8006ebc <_free_r+0x2c>
 8006eae:	6063      	str	r3, [r4, #4]
 8006eb0:	6014      	str	r4, [r2, #0]
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb8:	f000 b8e0 	b.w	800707c <__malloc_unlock>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d908      	bls.n	8006ed2 <_free_r+0x42>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	1821      	adds	r1, r4, r0
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf01      	itttt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	1809      	addeq	r1, r1, r0
 8006ece:	6021      	streq	r1, [r4, #0]
 8006ed0:	e7ed      	b.n	8006eae <_free_r+0x1e>
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b10b      	cbz	r3, 8006edc <_free_r+0x4c>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d9fa      	bls.n	8006ed2 <_free_r+0x42>
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	1850      	adds	r0, r2, r1
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d10b      	bne.n	8006efc <_free_r+0x6c>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	1850      	adds	r0, r2, r1
 8006eea:	4283      	cmp	r3, r0
 8006eec:	6011      	str	r1, [r2, #0]
 8006eee:	d1e0      	bne.n	8006eb2 <_free_r+0x22>
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4408      	add	r0, r1
 8006ef6:	6010      	str	r0, [r2, #0]
 8006ef8:	6053      	str	r3, [r2, #4]
 8006efa:	e7da      	b.n	8006eb2 <_free_r+0x22>
 8006efc:	d902      	bls.n	8006f04 <_free_r+0x74>
 8006efe:	230c      	movs	r3, #12
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	e7d6      	b.n	8006eb2 <_free_r+0x22>
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	1821      	adds	r1, r4, r0
 8006f08:	428b      	cmp	r3, r1
 8006f0a:	bf01      	itttt	eq
 8006f0c:	6819      	ldreq	r1, [r3, #0]
 8006f0e:	685b      	ldreq	r3, [r3, #4]
 8006f10:	1809      	addeq	r1, r1, r0
 8006f12:	6021      	streq	r1, [r4, #0]
 8006f14:	6063      	str	r3, [r4, #4]
 8006f16:	6054      	str	r4, [r2, #4]
 8006f18:	e7cb      	b.n	8006eb2 <_free_r+0x22>
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	200023a8 	.word	0x200023a8

08006f20 <malloc>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <malloc+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f000 b823 	b.w	8006f70 <_malloc_r>
 8006f2a:	bf00      	nop
 8006f2c:	2000008c 	.word	0x2000008c

08006f30 <sbrk_aligned>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	4e0e      	ldr	r6, [pc, #56]	; (8006f6c <sbrk_aligned+0x3c>)
 8006f34:	460c      	mov	r4, r1
 8006f36:	6831      	ldr	r1, [r6, #0]
 8006f38:	4605      	mov	r5, r0
 8006f3a:	b911      	cbnz	r1, 8006f42 <sbrk_aligned+0x12>
 8006f3c:	f000 fe9e 	bl	8007c7c <_sbrk_r>
 8006f40:	6030      	str	r0, [r6, #0]
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 fe99 	bl	8007c7c <_sbrk_r>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d00a      	beq.n	8006f64 <sbrk_aligned+0x34>
 8006f4e:	1cc4      	adds	r4, r0, #3
 8006f50:	f024 0403 	bic.w	r4, r4, #3
 8006f54:	42a0      	cmp	r0, r4
 8006f56:	d007      	beq.n	8006f68 <sbrk_aligned+0x38>
 8006f58:	1a21      	subs	r1, r4, r0
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 fe8e 	bl	8007c7c <_sbrk_r>
 8006f60:	3001      	adds	r0, #1
 8006f62:	d101      	bne.n	8006f68 <sbrk_aligned+0x38>
 8006f64:	f04f 34ff 	mov.w	r4, #4294967295
 8006f68:	4620      	mov	r0, r4
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	200023ac 	.word	0x200023ac

08006f70 <_malloc_r>:
 8006f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f74:	1ccd      	adds	r5, r1, #3
 8006f76:	f025 0503 	bic.w	r5, r5, #3
 8006f7a:	3508      	adds	r5, #8
 8006f7c:	2d0c      	cmp	r5, #12
 8006f7e:	bf38      	it	cc
 8006f80:	250c      	movcc	r5, #12
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	4607      	mov	r7, r0
 8006f86:	db01      	blt.n	8006f8c <_malloc_r+0x1c>
 8006f88:	42a9      	cmp	r1, r5
 8006f8a:	d905      	bls.n	8006f98 <_malloc_r+0x28>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	2600      	movs	r6, #0
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	4630      	mov	r0, r6
 8006f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800706c <_malloc_r+0xfc>
 8006f9c:	f000 f868 	bl	8007070 <__malloc_lock>
 8006fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	bb5c      	cbnz	r4, 8007000 <_malloc_r+0x90>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4638      	mov	r0, r7
 8006fac:	f7ff ffc0 	bl	8006f30 <sbrk_aligned>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	d155      	bne.n	8007062 <_malloc_r+0xf2>
 8006fb6:	f8d8 4000 	ldr.w	r4, [r8]
 8006fba:	4626      	mov	r6, r4
 8006fbc:	2e00      	cmp	r6, #0
 8006fbe:	d145      	bne.n	800704c <_malloc_r+0xdc>
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	d048      	beq.n	8007056 <_malloc_r+0xe6>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4638      	mov	r0, r7
 8006fca:	eb04 0903 	add.w	r9, r4, r3
 8006fce:	f000 fe55 	bl	8007c7c <_sbrk_r>
 8006fd2:	4581      	cmp	r9, r0
 8006fd4:	d13f      	bne.n	8007056 <_malloc_r+0xe6>
 8006fd6:	6821      	ldr	r1, [r4, #0]
 8006fd8:	4638      	mov	r0, r7
 8006fda:	1a6d      	subs	r5, r5, r1
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7ff ffa7 	bl	8006f30 <sbrk_aligned>
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d037      	beq.n	8007056 <_malloc_r+0xe6>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	442b      	add	r3, r5
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d038      	beq.n	8007066 <_malloc_r+0xf6>
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	42a2      	cmp	r2, r4
 8006ff8:	d12b      	bne.n	8007052 <_malloc_r+0xe2>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	e00f      	b.n	8007020 <_malloc_r+0xb0>
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	1b52      	subs	r2, r2, r5
 8007004:	d41f      	bmi.n	8007046 <_malloc_r+0xd6>
 8007006:	2a0b      	cmp	r2, #11
 8007008:	d917      	bls.n	800703a <_malloc_r+0xca>
 800700a:	1961      	adds	r1, r4, r5
 800700c:	42a3      	cmp	r3, r4
 800700e:	6025      	str	r5, [r4, #0]
 8007010:	bf18      	it	ne
 8007012:	6059      	strne	r1, [r3, #4]
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	bf08      	it	eq
 8007018:	f8c8 1000 	streq.w	r1, [r8]
 800701c:	5162      	str	r2, [r4, r5]
 800701e:	604b      	str	r3, [r1, #4]
 8007020:	4638      	mov	r0, r7
 8007022:	f104 060b 	add.w	r6, r4, #11
 8007026:	f000 f829 	bl	800707c <__malloc_unlock>
 800702a:	f026 0607 	bic.w	r6, r6, #7
 800702e:	1d23      	adds	r3, r4, #4
 8007030:	1af2      	subs	r2, r6, r3
 8007032:	d0ae      	beq.n	8006f92 <_malloc_r+0x22>
 8007034:	1b9b      	subs	r3, r3, r6
 8007036:	50a3      	str	r3, [r4, r2]
 8007038:	e7ab      	b.n	8006f92 <_malloc_r+0x22>
 800703a:	42a3      	cmp	r3, r4
 800703c:	6862      	ldr	r2, [r4, #4]
 800703e:	d1dd      	bne.n	8006ffc <_malloc_r+0x8c>
 8007040:	f8c8 2000 	str.w	r2, [r8]
 8007044:	e7ec      	b.n	8007020 <_malloc_r+0xb0>
 8007046:	4623      	mov	r3, r4
 8007048:	6864      	ldr	r4, [r4, #4]
 800704a:	e7ac      	b.n	8006fa6 <_malloc_r+0x36>
 800704c:	4634      	mov	r4, r6
 800704e:	6876      	ldr	r6, [r6, #4]
 8007050:	e7b4      	b.n	8006fbc <_malloc_r+0x4c>
 8007052:	4613      	mov	r3, r2
 8007054:	e7cc      	b.n	8006ff0 <_malloc_r+0x80>
 8007056:	230c      	movs	r3, #12
 8007058:	4638      	mov	r0, r7
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	f000 f80e 	bl	800707c <__malloc_unlock>
 8007060:	e797      	b.n	8006f92 <_malloc_r+0x22>
 8007062:	6025      	str	r5, [r4, #0]
 8007064:	e7dc      	b.n	8007020 <_malloc_r+0xb0>
 8007066:	605b      	str	r3, [r3, #4]
 8007068:	deff      	udf	#255	; 0xff
 800706a:	bf00      	nop
 800706c:	200023a8 	.word	0x200023a8

08007070 <__malloc_lock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_lock+0x8>)
 8007072:	f7ff b86e 	b.w	8006152 <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	200023a4 	.word	0x200023a4

0800707c <__malloc_unlock>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__malloc_unlock+0x8>)
 800707e:	f7ff b869 	b.w	8006154 <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	200023a4 	.word	0x200023a4

08007088 <_Balloc>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	69c6      	ldr	r6, [r0, #28]
 800708c:	4604      	mov	r4, r0
 800708e:	460d      	mov	r5, r1
 8007090:	b976      	cbnz	r6, 80070b0 <_Balloc+0x28>
 8007092:	2010      	movs	r0, #16
 8007094:	f7ff ff44 	bl	8006f20 <malloc>
 8007098:	4602      	mov	r2, r0
 800709a:	61e0      	str	r0, [r4, #28]
 800709c:	b920      	cbnz	r0, 80070a8 <_Balloc+0x20>
 800709e:	216b      	movs	r1, #107	; 0x6b
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <_Balloc+0x78>)
 80070a2:	4818      	ldr	r0, [pc, #96]	; (8007104 <_Balloc+0x7c>)
 80070a4:	f7ff f866 	bl	8006174 <__assert_func>
 80070a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070ac:	6006      	str	r6, [r0, #0]
 80070ae:	60c6      	str	r6, [r0, #12]
 80070b0:	69e6      	ldr	r6, [r4, #28]
 80070b2:	68f3      	ldr	r3, [r6, #12]
 80070b4:	b183      	cbz	r3, 80070d8 <_Balloc+0x50>
 80070b6:	69e3      	ldr	r3, [r4, #28]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070be:	b9b8      	cbnz	r0, 80070f0 <_Balloc+0x68>
 80070c0:	2101      	movs	r1, #1
 80070c2:	fa01 f605 	lsl.w	r6, r1, r5
 80070c6:	1d72      	adds	r2, r6, #5
 80070c8:	4620      	mov	r0, r4
 80070ca:	0092      	lsls	r2, r2, #2
 80070cc:	f000 fdfb 	bl	8007cc6 <_calloc_r>
 80070d0:	b160      	cbz	r0, 80070ec <_Balloc+0x64>
 80070d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070d6:	e00e      	b.n	80070f6 <_Balloc+0x6e>
 80070d8:	2221      	movs	r2, #33	; 0x21
 80070da:	2104      	movs	r1, #4
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fdf2 	bl	8007cc6 <_calloc_r>
 80070e2:	69e3      	ldr	r3, [r4, #28]
 80070e4:	60f0      	str	r0, [r6, #12]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e4      	bne.n	80070b6 <_Balloc+0x2e>
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	6802      	ldr	r2, [r0, #0]
 80070f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070f6:	2300      	movs	r3, #0
 80070f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070fc:	e7f7      	b.n	80070ee <_Balloc+0x66>
 80070fe:	bf00      	nop
 8007100:	08007fe7 	.word	0x08007fe7
 8007104:	0800810a 	.word	0x0800810a

08007108 <_Bfree>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	69c6      	ldr	r6, [r0, #28]
 800710c:	4605      	mov	r5, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b976      	cbnz	r6, 8007130 <_Bfree+0x28>
 8007112:	2010      	movs	r0, #16
 8007114:	f7ff ff04 	bl	8006f20 <malloc>
 8007118:	4602      	mov	r2, r0
 800711a:	61e8      	str	r0, [r5, #28]
 800711c:	b920      	cbnz	r0, 8007128 <_Bfree+0x20>
 800711e:	218f      	movs	r1, #143	; 0x8f
 8007120:	4b08      	ldr	r3, [pc, #32]	; (8007144 <_Bfree+0x3c>)
 8007122:	4809      	ldr	r0, [pc, #36]	; (8007148 <_Bfree+0x40>)
 8007124:	f7ff f826 	bl	8006174 <__assert_func>
 8007128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800712c:	6006      	str	r6, [r0, #0]
 800712e:	60c6      	str	r6, [r0, #12]
 8007130:	b13c      	cbz	r4, 8007142 <_Bfree+0x3a>
 8007132:	69eb      	ldr	r3, [r5, #28]
 8007134:	6862      	ldr	r2, [r4, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800713c:	6021      	str	r1, [r4, #0]
 800713e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	08007fe7 	.word	0x08007fe7
 8007148:	0800810a 	.word	0x0800810a

0800714c <__multadd>:
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	4607      	mov	r7, r0
 8007152:	460c      	mov	r4, r1
 8007154:	461e      	mov	r6, r3
 8007156:	2000      	movs	r0, #0
 8007158:	690d      	ldr	r5, [r1, #16]
 800715a:	f101 0c14 	add.w	ip, r1, #20
 800715e:	f8dc 3000 	ldr.w	r3, [ip]
 8007162:	3001      	adds	r0, #1
 8007164:	b299      	uxth	r1, r3
 8007166:	fb02 6101 	mla	r1, r2, r1, r6
 800716a:	0c1e      	lsrs	r6, r3, #16
 800716c:	0c0b      	lsrs	r3, r1, #16
 800716e:	fb02 3306 	mla	r3, r2, r6, r3
 8007172:	b289      	uxth	r1, r1
 8007174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007178:	4285      	cmp	r5, r0
 800717a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800717e:	f84c 1b04 	str.w	r1, [ip], #4
 8007182:	dcec      	bgt.n	800715e <__multadd+0x12>
 8007184:	b30e      	cbz	r6, 80071ca <__multadd+0x7e>
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	42ab      	cmp	r3, r5
 800718a:	dc19      	bgt.n	80071c0 <__multadd+0x74>
 800718c:	6861      	ldr	r1, [r4, #4]
 800718e:	4638      	mov	r0, r7
 8007190:	3101      	adds	r1, #1
 8007192:	f7ff ff79 	bl	8007088 <_Balloc>
 8007196:	4680      	mov	r8, r0
 8007198:	b928      	cbnz	r0, 80071a6 <__multadd+0x5a>
 800719a:	4602      	mov	r2, r0
 800719c:	21ba      	movs	r1, #186	; 0xba
 800719e:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <__multadd+0x84>)
 80071a0:	480c      	ldr	r0, [pc, #48]	; (80071d4 <__multadd+0x88>)
 80071a2:	f7fe ffe7 	bl	8006174 <__assert_func>
 80071a6:	6922      	ldr	r2, [r4, #16]
 80071a8:	f104 010c 	add.w	r1, r4, #12
 80071ac:	3202      	adds	r2, #2
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	300c      	adds	r0, #12
 80071b2:	f000 fd73 	bl	8007c9c <memcpy>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ffa5 	bl	8007108 <_Bfree>
 80071be:	4644      	mov	r4, r8
 80071c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071c4:	3501      	adds	r5, #1
 80071c6:	615e      	str	r6, [r3, #20]
 80071c8:	6125      	str	r5, [r4, #16]
 80071ca:	4620      	mov	r0, r4
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	080080f9 	.word	0x080080f9
 80071d4:	0800810a 	.word	0x0800810a

080071d8 <__hi0bits>:
 80071d8:	0c02      	lsrs	r2, r0, #16
 80071da:	0412      	lsls	r2, r2, #16
 80071dc:	4603      	mov	r3, r0
 80071de:	b9ca      	cbnz	r2, 8007214 <__hi0bits+0x3c>
 80071e0:	0403      	lsls	r3, r0, #16
 80071e2:	2010      	movs	r0, #16
 80071e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071e8:	bf04      	itt	eq
 80071ea:	021b      	lsleq	r3, r3, #8
 80071ec:	3008      	addeq	r0, #8
 80071ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071f2:	bf04      	itt	eq
 80071f4:	011b      	lsleq	r3, r3, #4
 80071f6:	3004      	addeq	r0, #4
 80071f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071fc:	bf04      	itt	eq
 80071fe:	009b      	lsleq	r3, r3, #2
 8007200:	3002      	addeq	r0, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	db05      	blt.n	8007212 <__hi0bits+0x3a>
 8007206:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800720a:	f100 0001 	add.w	r0, r0, #1
 800720e:	bf08      	it	eq
 8007210:	2020      	moveq	r0, #32
 8007212:	4770      	bx	lr
 8007214:	2000      	movs	r0, #0
 8007216:	e7e5      	b.n	80071e4 <__hi0bits+0xc>

08007218 <__lo0bits>:
 8007218:	6803      	ldr	r3, [r0, #0]
 800721a:	4602      	mov	r2, r0
 800721c:	f013 0007 	ands.w	r0, r3, #7
 8007220:	d00b      	beq.n	800723a <__lo0bits+0x22>
 8007222:	07d9      	lsls	r1, r3, #31
 8007224:	d421      	bmi.n	800726a <__lo0bits+0x52>
 8007226:	0798      	lsls	r0, r3, #30
 8007228:	bf49      	itett	mi
 800722a:	085b      	lsrmi	r3, r3, #1
 800722c:	089b      	lsrpl	r3, r3, #2
 800722e:	2001      	movmi	r0, #1
 8007230:	6013      	strmi	r3, [r2, #0]
 8007232:	bf5c      	itt	pl
 8007234:	2002      	movpl	r0, #2
 8007236:	6013      	strpl	r3, [r2, #0]
 8007238:	4770      	bx	lr
 800723a:	b299      	uxth	r1, r3
 800723c:	b909      	cbnz	r1, 8007242 <__lo0bits+0x2a>
 800723e:	2010      	movs	r0, #16
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	b2d9      	uxtb	r1, r3
 8007244:	b909      	cbnz	r1, 800724a <__lo0bits+0x32>
 8007246:	3008      	adds	r0, #8
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	0719      	lsls	r1, r3, #28
 800724c:	bf04      	itt	eq
 800724e:	091b      	lsreq	r3, r3, #4
 8007250:	3004      	addeq	r0, #4
 8007252:	0799      	lsls	r1, r3, #30
 8007254:	bf04      	itt	eq
 8007256:	089b      	lsreq	r3, r3, #2
 8007258:	3002      	addeq	r0, #2
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d403      	bmi.n	8007266 <__lo0bits+0x4e>
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	f100 0001 	add.w	r0, r0, #1
 8007264:	d003      	beq.n	800726e <__lo0bits+0x56>
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	4770      	bx	lr
 800726a:	2000      	movs	r0, #0
 800726c:	4770      	bx	lr
 800726e:	2020      	movs	r0, #32
 8007270:	4770      	bx	lr
	...

08007274 <__i2b>:
 8007274:	b510      	push	{r4, lr}
 8007276:	460c      	mov	r4, r1
 8007278:	2101      	movs	r1, #1
 800727a:	f7ff ff05 	bl	8007088 <_Balloc>
 800727e:	4602      	mov	r2, r0
 8007280:	b928      	cbnz	r0, 800728e <__i2b+0x1a>
 8007282:	f240 1145 	movw	r1, #325	; 0x145
 8007286:	4b04      	ldr	r3, [pc, #16]	; (8007298 <__i2b+0x24>)
 8007288:	4804      	ldr	r0, [pc, #16]	; (800729c <__i2b+0x28>)
 800728a:	f7fe ff73 	bl	8006174 <__assert_func>
 800728e:	2301      	movs	r3, #1
 8007290:	6144      	str	r4, [r0, #20]
 8007292:	6103      	str	r3, [r0, #16]
 8007294:	bd10      	pop	{r4, pc}
 8007296:	bf00      	nop
 8007298:	080080f9 	.word	0x080080f9
 800729c:	0800810a 	.word	0x0800810a

080072a0 <__multiply>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	4691      	mov	r9, r2
 80072a6:	690a      	ldr	r2, [r1, #16]
 80072a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072ac:	460c      	mov	r4, r1
 80072ae:	429a      	cmp	r2, r3
 80072b0:	bfbe      	ittt	lt
 80072b2:	460b      	movlt	r3, r1
 80072b4:	464c      	movlt	r4, r9
 80072b6:	4699      	movlt	r9, r3
 80072b8:	6927      	ldr	r7, [r4, #16]
 80072ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	eb07 060a 	add.w	r6, r7, sl
 80072c6:	42b3      	cmp	r3, r6
 80072c8:	b085      	sub	sp, #20
 80072ca:	bfb8      	it	lt
 80072cc:	3101      	addlt	r1, #1
 80072ce:	f7ff fedb 	bl	8007088 <_Balloc>
 80072d2:	b930      	cbnz	r0, 80072e2 <__multiply+0x42>
 80072d4:	4602      	mov	r2, r0
 80072d6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80072da:	4b43      	ldr	r3, [pc, #268]	; (80073e8 <__multiply+0x148>)
 80072dc:	4843      	ldr	r0, [pc, #268]	; (80073ec <__multiply+0x14c>)
 80072de:	f7fe ff49 	bl	8006174 <__assert_func>
 80072e2:	f100 0514 	add.w	r5, r0, #20
 80072e6:	462b      	mov	r3, r5
 80072e8:	2200      	movs	r2, #0
 80072ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072ee:	4543      	cmp	r3, r8
 80072f0:	d321      	bcc.n	8007336 <__multiply+0x96>
 80072f2:	f104 0314 	add.w	r3, r4, #20
 80072f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072fa:	f109 0314 	add.w	r3, r9, #20
 80072fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007302:	9202      	str	r2, [sp, #8]
 8007304:	1b3a      	subs	r2, r7, r4
 8007306:	3a15      	subs	r2, #21
 8007308:	f022 0203 	bic.w	r2, r2, #3
 800730c:	3204      	adds	r2, #4
 800730e:	f104 0115 	add.w	r1, r4, #21
 8007312:	428f      	cmp	r7, r1
 8007314:	bf38      	it	cc
 8007316:	2204      	movcc	r2, #4
 8007318:	9201      	str	r2, [sp, #4]
 800731a:	9a02      	ldr	r2, [sp, #8]
 800731c:	9303      	str	r3, [sp, #12]
 800731e:	429a      	cmp	r2, r3
 8007320:	d80c      	bhi.n	800733c <__multiply+0x9c>
 8007322:	2e00      	cmp	r6, #0
 8007324:	dd03      	ble.n	800732e <__multiply+0x8e>
 8007326:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800732a:	2b00      	cmp	r3, #0
 800732c:	d05a      	beq.n	80073e4 <__multiply+0x144>
 800732e:	6106      	str	r6, [r0, #16]
 8007330:	b005      	add	sp, #20
 8007332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007336:	f843 2b04 	str.w	r2, [r3], #4
 800733a:	e7d8      	b.n	80072ee <__multiply+0x4e>
 800733c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007340:	f1ba 0f00 	cmp.w	sl, #0
 8007344:	d023      	beq.n	800738e <__multiply+0xee>
 8007346:	46a9      	mov	r9, r5
 8007348:	f04f 0c00 	mov.w	ip, #0
 800734c:	f104 0e14 	add.w	lr, r4, #20
 8007350:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007354:	f8d9 1000 	ldr.w	r1, [r9]
 8007358:	fa1f fb82 	uxth.w	fp, r2
 800735c:	b289      	uxth	r1, r1
 800735e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007362:	4461      	add	r1, ip
 8007364:	f8d9 c000 	ldr.w	ip, [r9]
 8007368:	0c12      	lsrs	r2, r2, #16
 800736a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800736e:	fb0a c202 	mla	r2, sl, r2, ip
 8007372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007376:	b289      	uxth	r1, r1
 8007378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800737c:	4577      	cmp	r7, lr
 800737e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007382:	f849 1b04 	str.w	r1, [r9], #4
 8007386:	d8e3      	bhi.n	8007350 <__multiply+0xb0>
 8007388:	9a01      	ldr	r2, [sp, #4]
 800738a:	f845 c002 	str.w	ip, [r5, r2]
 800738e:	9a03      	ldr	r2, [sp, #12]
 8007390:	3304      	adds	r3, #4
 8007392:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007396:	f1b9 0f00 	cmp.w	r9, #0
 800739a:	d021      	beq.n	80073e0 <__multiply+0x140>
 800739c:	46ae      	mov	lr, r5
 800739e:	f04f 0a00 	mov.w	sl, #0
 80073a2:	6829      	ldr	r1, [r5, #0]
 80073a4:	f104 0c14 	add.w	ip, r4, #20
 80073a8:	f8bc b000 	ldrh.w	fp, [ip]
 80073ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073b0:	b289      	uxth	r1, r1
 80073b2:	fb09 220b 	mla	r2, r9, fp, r2
 80073b6:	4452      	add	r2, sl
 80073b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073bc:	f84e 1b04 	str.w	r1, [lr], #4
 80073c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073c8:	f8be 1000 	ldrh.w	r1, [lr]
 80073cc:	4567      	cmp	r7, ip
 80073ce:	fb09 110a 	mla	r1, r9, sl, r1
 80073d2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80073d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073da:	d8e5      	bhi.n	80073a8 <__multiply+0x108>
 80073dc:	9a01      	ldr	r2, [sp, #4]
 80073de:	50a9      	str	r1, [r5, r2]
 80073e0:	3504      	adds	r5, #4
 80073e2:	e79a      	b.n	800731a <__multiply+0x7a>
 80073e4:	3e01      	subs	r6, #1
 80073e6:	e79c      	b.n	8007322 <__multiply+0x82>
 80073e8:	080080f9 	.word	0x080080f9
 80073ec:	0800810a 	.word	0x0800810a

080073f0 <__pow5mult>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4615      	mov	r5, r2
 80073f6:	f012 0203 	ands.w	r2, r2, #3
 80073fa:	4606      	mov	r6, r0
 80073fc:	460f      	mov	r7, r1
 80073fe:	d007      	beq.n	8007410 <__pow5mult+0x20>
 8007400:	4c25      	ldr	r4, [pc, #148]	; (8007498 <__pow5mult+0xa8>)
 8007402:	3a01      	subs	r2, #1
 8007404:	2300      	movs	r3, #0
 8007406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800740a:	f7ff fe9f 	bl	800714c <__multadd>
 800740e:	4607      	mov	r7, r0
 8007410:	10ad      	asrs	r5, r5, #2
 8007412:	d03d      	beq.n	8007490 <__pow5mult+0xa0>
 8007414:	69f4      	ldr	r4, [r6, #28]
 8007416:	b97c      	cbnz	r4, 8007438 <__pow5mult+0x48>
 8007418:	2010      	movs	r0, #16
 800741a:	f7ff fd81 	bl	8006f20 <malloc>
 800741e:	4602      	mov	r2, r0
 8007420:	61f0      	str	r0, [r6, #28]
 8007422:	b928      	cbnz	r0, 8007430 <__pow5mult+0x40>
 8007424:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <__pow5mult+0xac>)
 800742a:	481d      	ldr	r0, [pc, #116]	; (80074a0 <__pow5mult+0xb0>)
 800742c:	f7fe fea2 	bl	8006174 <__assert_func>
 8007430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007434:	6004      	str	r4, [r0, #0]
 8007436:	60c4      	str	r4, [r0, #12]
 8007438:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800743c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007440:	b94c      	cbnz	r4, 8007456 <__pow5mult+0x66>
 8007442:	f240 2171 	movw	r1, #625	; 0x271
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ff14 	bl	8007274 <__i2b>
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	f8c8 0008 	str.w	r0, [r8, #8]
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	f04f 0900 	mov.w	r9, #0
 800745a:	07eb      	lsls	r3, r5, #31
 800745c:	d50a      	bpl.n	8007474 <__pow5mult+0x84>
 800745e:	4639      	mov	r1, r7
 8007460:	4622      	mov	r2, r4
 8007462:	4630      	mov	r0, r6
 8007464:	f7ff ff1c 	bl	80072a0 <__multiply>
 8007468:	4680      	mov	r8, r0
 800746a:	4639      	mov	r1, r7
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff fe4b 	bl	8007108 <_Bfree>
 8007472:	4647      	mov	r7, r8
 8007474:	106d      	asrs	r5, r5, #1
 8007476:	d00b      	beq.n	8007490 <__pow5mult+0xa0>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	b938      	cbnz	r0, 800748c <__pow5mult+0x9c>
 800747c:	4622      	mov	r2, r4
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ff0d 	bl	80072a0 <__multiply>
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f8c0 9000 	str.w	r9, [r0]
 800748c:	4604      	mov	r4, r0
 800748e:	e7e4      	b.n	800745a <__pow5mult+0x6a>
 8007490:	4638      	mov	r0, r7
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	bf00      	nop
 8007498:	08008258 	.word	0x08008258
 800749c:	08007fe7 	.word	0x08007fe7
 80074a0:	0800810a 	.word	0x0800810a

080074a4 <__lshift>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	4607      	mov	r7, r0
 80074ac:	4691      	mov	r9, r2
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	6849      	ldr	r1, [r1, #4]
 80074b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074bc:	f108 0601 	add.w	r6, r8, #1
 80074c0:	42b3      	cmp	r3, r6
 80074c2:	db0b      	blt.n	80074dc <__lshift+0x38>
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fddf 	bl	8007088 <_Balloc>
 80074ca:	4605      	mov	r5, r0
 80074cc:	b948      	cbnz	r0, 80074e2 <__lshift+0x3e>
 80074ce:	4602      	mov	r2, r0
 80074d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80074d4:	4b27      	ldr	r3, [pc, #156]	; (8007574 <__lshift+0xd0>)
 80074d6:	4828      	ldr	r0, [pc, #160]	; (8007578 <__lshift+0xd4>)
 80074d8:	f7fe fe4c 	bl	8006174 <__assert_func>
 80074dc:	3101      	adds	r1, #1
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	e7ee      	b.n	80074c0 <__lshift+0x1c>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f100 0114 	add.w	r1, r0, #20
 80074e8:	f100 0210 	add.w	r2, r0, #16
 80074ec:	4618      	mov	r0, r3
 80074ee:	4553      	cmp	r3, sl
 80074f0:	db33      	blt.n	800755a <__lshift+0xb6>
 80074f2:	6920      	ldr	r0, [r4, #16]
 80074f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074f8:	f104 0314 	add.w	r3, r4, #20
 80074fc:	f019 091f 	ands.w	r9, r9, #31
 8007500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007508:	d02b      	beq.n	8007562 <__lshift+0xbe>
 800750a:	468a      	mov	sl, r1
 800750c:	2200      	movs	r2, #0
 800750e:	f1c9 0e20 	rsb	lr, r9, #32
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	fa00 f009 	lsl.w	r0, r0, r9
 8007518:	4310      	orrs	r0, r2
 800751a:	f84a 0b04 	str.w	r0, [sl], #4
 800751e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007522:	459c      	cmp	ip, r3
 8007524:	fa22 f20e 	lsr.w	r2, r2, lr
 8007528:	d8f3      	bhi.n	8007512 <__lshift+0x6e>
 800752a:	ebac 0304 	sub.w	r3, ip, r4
 800752e:	3b15      	subs	r3, #21
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	3304      	adds	r3, #4
 8007536:	f104 0015 	add.w	r0, r4, #21
 800753a:	4584      	cmp	ip, r0
 800753c:	bf38      	it	cc
 800753e:	2304      	movcc	r3, #4
 8007540:	50ca      	str	r2, [r1, r3]
 8007542:	b10a      	cbz	r2, 8007548 <__lshift+0xa4>
 8007544:	f108 0602 	add.w	r6, r8, #2
 8007548:	3e01      	subs	r6, #1
 800754a:	4638      	mov	r0, r7
 800754c:	4621      	mov	r1, r4
 800754e:	612e      	str	r6, [r5, #16]
 8007550:	f7ff fdda 	bl	8007108 <_Bfree>
 8007554:	4628      	mov	r0, r5
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	f842 0f04 	str.w	r0, [r2, #4]!
 800755e:	3301      	adds	r3, #1
 8007560:	e7c5      	b.n	80074ee <__lshift+0x4a>
 8007562:	3904      	subs	r1, #4
 8007564:	f853 2b04 	ldr.w	r2, [r3], #4
 8007568:	459c      	cmp	ip, r3
 800756a:	f841 2f04 	str.w	r2, [r1, #4]!
 800756e:	d8f9      	bhi.n	8007564 <__lshift+0xc0>
 8007570:	e7ea      	b.n	8007548 <__lshift+0xa4>
 8007572:	bf00      	nop
 8007574:	080080f9 	.word	0x080080f9
 8007578:	0800810a 	.word	0x0800810a

0800757c <__mcmp>:
 800757c:	4603      	mov	r3, r0
 800757e:	690a      	ldr	r2, [r1, #16]
 8007580:	6900      	ldr	r0, [r0, #16]
 8007582:	b530      	push	{r4, r5, lr}
 8007584:	1a80      	subs	r0, r0, r2
 8007586:	d10d      	bne.n	80075a4 <__mcmp+0x28>
 8007588:	3314      	adds	r3, #20
 800758a:	3114      	adds	r1, #20
 800758c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800759c:	4295      	cmp	r5, r2
 800759e:	d002      	beq.n	80075a6 <__mcmp+0x2a>
 80075a0:	d304      	bcc.n	80075ac <__mcmp+0x30>
 80075a2:	2001      	movs	r0, #1
 80075a4:	bd30      	pop	{r4, r5, pc}
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	d3f4      	bcc.n	8007594 <__mcmp+0x18>
 80075aa:	e7fb      	b.n	80075a4 <__mcmp+0x28>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e7f8      	b.n	80075a4 <__mcmp+0x28>
	...

080075b4 <__mdiff>:
 80075b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460d      	mov	r5, r1
 80075ba:	4607      	mov	r7, r0
 80075bc:	4611      	mov	r1, r2
 80075be:	4628      	mov	r0, r5
 80075c0:	4614      	mov	r4, r2
 80075c2:	f7ff ffdb 	bl	800757c <__mcmp>
 80075c6:	1e06      	subs	r6, r0, #0
 80075c8:	d111      	bne.n	80075ee <__mdiff+0x3a>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff fd5b 	bl	8007088 <_Balloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	b928      	cbnz	r0, 80075e2 <__mdiff+0x2e>
 80075d6:	f240 2137 	movw	r1, #567	; 0x237
 80075da:	4b3a      	ldr	r3, [pc, #232]	; (80076c4 <__mdiff+0x110>)
 80075dc:	483a      	ldr	r0, [pc, #232]	; (80076c8 <__mdiff+0x114>)
 80075de:	f7fe fdc9 	bl	8006174 <__assert_func>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075e8:	4610      	mov	r0, r2
 80075ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	bfa4      	itt	ge
 80075f0:	4623      	movge	r3, r4
 80075f2:	462c      	movge	r4, r5
 80075f4:	4638      	mov	r0, r7
 80075f6:	6861      	ldr	r1, [r4, #4]
 80075f8:	bfa6      	itte	ge
 80075fa:	461d      	movge	r5, r3
 80075fc:	2600      	movge	r6, #0
 80075fe:	2601      	movlt	r6, #1
 8007600:	f7ff fd42 	bl	8007088 <_Balloc>
 8007604:	4602      	mov	r2, r0
 8007606:	b918      	cbnz	r0, 8007610 <__mdiff+0x5c>
 8007608:	f240 2145 	movw	r1, #581	; 0x245
 800760c:	4b2d      	ldr	r3, [pc, #180]	; (80076c4 <__mdiff+0x110>)
 800760e:	e7e5      	b.n	80075dc <__mdiff+0x28>
 8007610:	f102 0814 	add.w	r8, r2, #20
 8007614:	46c2      	mov	sl, r8
 8007616:	f04f 0c00 	mov.w	ip, #0
 800761a:	6927      	ldr	r7, [r4, #16]
 800761c:	60c6      	str	r6, [r0, #12]
 800761e:	692e      	ldr	r6, [r5, #16]
 8007620:	f104 0014 	add.w	r0, r4, #20
 8007624:	f105 0914 	add.w	r9, r5, #20
 8007628:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800762c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007630:	3410      	adds	r4, #16
 8007632:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007636:	f859 3b04 	ldr.w	r3, [r9], #4
 800763a:	fa1f f18b 	uxth.w	r1, fp
 800763e:	4461      	add	r1, ip
 8007640:	fa1f fc83 	uxth.w	ip, r3
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	eba1 010c 	sub.w	r1, r1, ip
 800764a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800764e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007652:	b289      	uxth	r1, r1
 8007654:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007658:	454e      	cmp	r6, r9
 800765a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800765e:	f84a 1b04 	str.w	r1, [sl], #4
 8007662:	d8e6      	bhi.n	8007632 <__mdiff+0x7e>
 8007664:	1b73      	subs	r3, r6, r5
 8007666:	3b15      	subs	r3, #21
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	3515      	adds	r5, #21
 800766e:	3304      	adds	r3, #4
 8007670:	42ae      	cmp	r6, r5
 8007672:	bf38      	it	cc
 8007674:	2304      	movcc	r3, #4
 8007676:	4418      	add	r0, r3
 8007678:	4443      	add	r3, r8
 800767a:	461e      	mov	r6, r3
 800767c:	4605      	mov	r5, r0
 800767e:	4575      	cmp	r5, lr
 8007680:	d30e      	bcc.n	80076a0 <__mdiff+0xec>
 8007682:	f10e 0103 	add.w	r1, lr, #3
 8007686:	1a09      	subs	r1, r1, r0
 8007688:	f021 0103 	bic.w	r1, r1, #3
 800768c:	3803      	subs	r0, #3
 800768e:	4586      	cmp	lr, r0
 8007690:	bf38      	it	cc
 8007692:	2100      	movcc	r1, #0
 8007694:	440b      	add	r3, r1
 8007696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800769a:	b189      	cbz	r1, 80076c0 <__mdiff+0x10c>
 800769c:	6117      	str	r7, [r2, #16]
 800769e:	e7a3      	b.n	80075e8 <__mdiff+0x34>
 80076a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80076a4:	fa1f f188 	uxth.w	r1, r8
 80076a8:	4461      	add	r1, ip
 80076aa:	140c      	asrs	r4, r1, #16
 80076ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076b0:	b289      	uxth	r1, r1
 80076b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076b6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80076ba:	f846 1b04 	str.w	r1, [r6], #4
 80076be:	e7de      	b.n	800767e <__mdiff+0xca>
 80076c0:	3f01      	subs	r7, #1
 80076c2:	e7e8      	b.n	8007696 <__mdiff+0xe2>
 80076c4:	080080f9 	.word	0x080080f9
 80076c8:	0800810a 	.word	0x0800810a

080076cc <__d2b>:
 80076cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ce:	2101      	movs	r1, #1
 80076d0:	4617      	mov	r7, r2
 80076d2:	461c      	mov	r4, r3
 80076d4:	9e08      	ldr	r6, [sp, #32]
 80076d6:	f7ff fcd7 	bl	8007088 <_Balloc>
 80076da:	4605      	mov	r5, r0
 80076dc:	b930      	cbnz	r0, 80076ec <__d2b+0x20>
 80076de:	4602      	mov	r2, r0
 80076e0:	f240 310f 	movw	r1, #783	; 0x30f
 80076e4:	4b22      	ldr	r3, [pc, #136]	; (8007770 <__d2b+0xa4>)
 80076e6:	4823      	ldr	r0, [pc, #140]	; (8007774 <__d2b+0xa8>)
 80076e8:	f7fe fd44 	bl	8006174 <__assert_func>
 80076ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80076f0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80076f4:	bb24      	cbnz	r4, 8007740 <__d2b+0x74>
 80076f6:	2f00      	cmp	r7, #0
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	d026      	beq.n	800774a <__d2b+0x7e>
 80076fc:	4668      	mov	r0, sp
 80076fe:	9700      	str	r7, [sp, #0]
 8007700:	f7ff fd8a 	bl	8007218 <__lo0bits>
 8007704:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007708:	b1e8      	cbz	r0, 8007746 <__d2b+0x7a>
 800770a:	f1c0 0320 	rsb	r3, r0, #32
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	430b      	orrs	r3, r1
 8007714:	40c2      	lsrs	r2, r0
 8007716:	616b      	str	r3, [r5, #20]
 8007718:	9201      	str	r2, [sp, #4]
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	bf14      	ite	ne
 8007720:	2102      	movne	r1, #2
 8007722:	2101      	moveq	r1, #1
 8007724:	61ab      	str	r3, [r5, #24]
 8007726:	6129      	str	r1, [r5, #16]
 8007728:	b1bc      	cbz	r4, 800775a <__d2b+0x8e>
 800772a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800772e:	4404      	add	r4, r0
 8007730:	6034      	str	r4, [r6, #0]
 8007732:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007738:	6018      	str	r0, [r3, #0]
 800773a:	4628      	mov	r0, r5
 800773c:	b003      	add	sp, #12
 800773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007744:	e7d7      	b.n	80076f6 <__d2b+0x2a>
 8007746:	6169      	str	r1, [r5, #20]
 8007748:	e7e7      	b.n	800771a <__d2b+0x4e>
 800774a:	a801      	add	r0, sp, #4
 800774c:	f7ff fd64 	bl	8007218 <__lo0bits>
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	2101      	movs	r1, #1
 8007754:	616b      	str	r3, [r5, #20]
 8007756:	3020      	adds	r0, #32
 8007758:	e7e5      	b.n	8007726 <__d2b+0x5a>
 800775a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800775e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007762:	6030      	str	r0, [r6, #0]
 8007764:	6918      	ldr	r0, [r3, #16]
 8007766:	f7ff fd37 	bl	80071d8 <__hi0bits>
 800776a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800776e:	e7e2      	b.n	8007736 <__d2b+0x6a>
 8007770:	080080f9 	.word	0x080080f9
 8007774:	0800810a 	.word	0x0800810a

08007778 <__sfputc_r>:
 8007778:	6893      	ldr	r3, [r2, #8]
 800777a:	b410      	push	{r4}
 800777c:	3b01      	subs	r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	6093      	str	r3, [r2, #8]
 8007782:	da07      	bge.n	8007794 <__sfputc_r+0x1c>
 8007784:	6994      	ldr	r4, [r2, #24]
 8007786:	42a3      	cmp	r3, r4
 8007788:	db01      	blt.n	800778e <__sfputc_r+0x16>
 800778a:	290a      	cmp	r1, #10
 800778c:	d102      	bne.n	8007794 <__sfputc_r+0x1c>
 800778e:	bc10      	pop	{r4}
 8007790:	f7fe bb4b 	b.w	8005e2a <__swbuf_r>
 8007794:	6813      	ldr	r3, [r2, #0]
 8007796:	1c58      	adds	r0, r3, #1
 8007798:	6010      	str	r0, [r2, #0]
 800779a:	7019      	strb	r1, [r3, #0]
 800779c:	4608      	mov	r0, r1
 800779e:	bc10      	pop	{r4}
 80077a0:	4770      	bx	lr

080077a2 <__sfputs_r>:
 80077a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a4:	4606      	mov	r6, r0
 80077a6:	460f      	mov	r7, r1
 80077a8:	4614      	mov	r4, r2
 80077aa:	18d5      	adds	r5, r2, r3
 80077ac:	42ac      	cmp	r4, r5
 80077ae:	d101      	bne.n	80077b4 <__sfputs_r+0x12>
 80077b0:	2000      	movs	r0, #0
 80077b2:	e007      	b.n	80077c4 <__sfputs_r+0x22>
 80077b4:	463a      	mov	r2, r7
 80077b6:	4630      	mov	r0, r6
 80077b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077bc:	f7ff ffdc 	bl	8007778 <__sfputc_r>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d1f3      	bne.n	80077ac <__sfputs_r+0xa>
 80077c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077c8 <_vfiprintf_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	460d      	mov	r5, r1
 80077ce:	4614      	mov	r4, r2
 80077d0:	4698      	mov	r8, r3
 80077d2:	4606      	mov	r6, r0
 80077d4:	b09d      	sub	sp, #116	; 0x74
 80077d6:	b118      	cbz	r0, 80077e0 <_vfiprintf_r+0x18>
 80077d8:	6a03      	ldr	r3, [r0, #32]
 80077da:	b90b      	cbnz	r3, 80077e0 <_vfiprintf_r+0x18>
 80077dc:	f7fe f990 	bl	8005b00 <__sinit>
 80077e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077e2:	07d9      	lsls	r1, r3, #31
 80077e4:	d405      	bmi.n	80077f2 <_vfiprintf_r+0x2a>
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	059a      	lsls	r2, r3, #22
 80077ea:	d402      	bmi.n	80077f2 <_vfiprintf_r+0x2a>
 80077ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ee:	f7fe fcb0 	bl	8006152 <__retarget_lock_acquire_recursive>
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	071b      	lsls	r3, r3, #28
 80077f6:	d501      	bpl.n	80077fc <_vfiprintf_r+0x34>
 80077f8:	692b      	ldr	r3, [r5, #16]
 80077fa:	b99b      	cbnz	r3, 8007824 <_vfiprintf_r+0x5c>
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f7fe fb50 	bl	8005ea4 <__swsetup_r>
 8007804:	b170      	cbz	r0, 8007824 <_vfiprintf_r+0x5c>
 8007806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007808:	07dc      	lsls	r4, r3, #31
 800780a:	d504      	bpl.n	8007816 <_vfiprintf_r+0x4e>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	b01d      	add	sp, #116	; 0x74
 8007812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	0598      	lsls	r0, r3, #22
 800781a:	d4f7      	bmi.n	800780c <_vfiprintf_r+0x44>
 800781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781e:	f7fe fc99 	bl	8006154 <__retarget_lock_release_recursive>
 8007822:	e7f3      	b.n	800780c <_vfiprintf_r+0x44>
 8007824:	2300      	movs	r3, #0
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	2320      	movs	r3, #32
 800782a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800782e:	2330      	movs	r3, #48	; 0x30
 8007830:	f04f 0901 	mov.w	r9, #1
 8007834:	f8cd 800c 	str.w	r8, [sp, #12]
 8007838:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80079e8 <_vfiprintf_r+0x220>
 800783c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007840:	4623      	mov	r3, r4
 8007842:	469a      	mov	sl, r3
 8007844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007848:	b10a      	cbz	r2, 800784e <_vfiprintf_r+0x86>
 800784a:	2a25      	cmp	r2, #37	; 0x25
 800784c:	d1f9      	bne.n	8007842 <_vfiprintf_r+0x7a>
 800784e:	ebba 0b04 	subs.w	fp, sl, r4
 8007852:	d00b      	beq.n	800786c <_vfiprintf_r+0xa4>
 8007854:	465b      	mov	r3, fp
 8007856:	4622      	mov	r2, r4
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ffa1 	bl	80077a2 <__sfputs_r>
 8007860:	3001      	adds	r0, #1
 8007862:	f000 80a9 	beq.w	80079b8 <_vfiprintf_r+0x1f0>
 8007866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007868:	445a      	add	r2, fp
 800786a:	9209      	str	r2, [sp, #36]	; 0x24
 800786c:	f89a 3000 	ldrb.w	r3, [sl]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a1 	beq.w	80079b8 <_vfiprintf_r+0x1f0>
 8007876:	2300      	movs	r3, #0
 8007878:	f04f 32ff 	mov.w	r2, #4294967295
 800787c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007880:	f10a 0a01 	add.w	sl, sl, #1
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	9307      	str	r3, [sp, #28]
 8007888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800788c:	931a      	str	r3, [sp, #104]	; 0x68
 800788e:	4654      	mov	r4, sl
 8007890:	2205      	movs	r2, #5
 8007892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007896:	4854      	ldr	r0, [pc, #336]	; (80079e8 <_vfiprintf_r+0x220>)
 8007898:	f7fe fc5d 	bl	8006156 <memchr>
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	b9d8      	cbnz	r0, 80078d8 <_vfiprintf_r+0x110>
 80078a0:	06d1      	lsls	r1, r2, #27
 80078a2:	bf44      	itt	mi
 80078a4:	2320      	movmi	r3, #32
 80078a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078aa:	0713      	lsls	r3, r2, #28
 80078ac:	bf44      	itt	mi
 80078ae:	232b      	movmi	r3, #43	; 0x2b
 80078b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b4:	f89a 3000 	ldrb.w	r3, [sl]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d015      	beq.n	80078e8 <_vfiprintf_r+0x120>
 80078bc:	4654      	mov	r4, sl
 80078be:	2000      	movs	r0, #0
 80078c0:	f04f 0c0a 	mov.w	ip, #10
 80078c4:	9a07      	ldr	r2, [sp, #28]
 80078c6:	4621      	mov	r1, r4
 80078c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078cc:	3b30      	subs	r3, #48	; 0x30
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d94d      	bls.n	800796e <_vfiprintf_r+0x1a6>
 80078d2:	b1b0      	cbz	r0, 8007902 <_vfiprintf_r+0x13a>
 80078d4:	9207      	str	r2, [sp, #28]
 80078d6:	e014      	b.n	8007902 <_vfiprintf_r+0x13a>
 80078d8:	eba0 0308 	sub.w	r3, r0, r8
 80078dc:	fa09 f303 	lsl.w	r3, r9, r3
 80078e0:	4313      	orrs	r3, r2
 80078e2:	46a2      	mov	sl, r4
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	e7d2      	b.n	800788e <_vfiprintf_r+0xc6>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	1d19      	adds	r1, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	9103      	str	r1, [sp, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbb      	ittet	lt
 80078f4:	425b      	neglt	r3, r3
 80078f6:	f042 0202 	orrlt.w	r2, r2, #2
 80078fa:	9307      	strge	r3, [sp, #28]
 80078fc:	9307      	strlt	r3, [sp, #28]
 80078fe:	bfb8      	it	lt
 8007900:	9204      	strlt	r2, [sp, #16]
 8007902:	7823      	ldrb	r3, [r4, #0]
 8007904:	2b2e      	cmp	r3, #46	; 0x2e
 8007906:	d10c      	bne.n	8007922 <_vfiprintf_r+0x15a>
 8007908:	7863      	ldrb	r3, [r4, #1]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d134      	bne.n	8007978 <_vfiprintf_r+0x1b0>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	3402      	adds	r4, #2
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	9203      	str	r2, [sp, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfb8      	it	lt
 800791c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007920:	9305      	str	r3, [sp, #20]
 8007922:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079ec <_vfiprintf_r+0x224>
 8007926:	2203      	movs	r2, #3
 8007928:	4650      	mov	r0, sl
 800792a:	7821      	ldrb	r1, [r4, #0]
 800792c:	f7fe fc13 	bl	8006156 <memchr>
 8007930:	b138      	cbz	r0, 8007942 <_vfiprintf_r+0x17a>
 8007932:	2240      	movs	r2, #64	; 0x40
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	eba0 000a 	sub.w	r0, r0, sl
 800793a:	4082      	lsls	r2, r0
 800793c:	4313      	orrs	r3, r2
 800793e:	3401      	adds	r4, #1
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007946:	2206      	movs	r2, #6
 8007948:	4829      	ldr	r0, [pc, #164]	; (80079f0 <_vfiprintf_r+0x228>)
 800794a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800794e:	f7fe fc02 	bl	8006156 <memchr>
 8007952:	2800      	cmp	r0, #0
 8007954:	d03f      	beq.n	80079d6 <_vfiprintf_r+0x20e>
 8007956:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <_vfiprintf_r+0x22c>)
 8007958:	bb1b      	cbnz	r3, 80079a2 <_vfiprintf_r+0x1da>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	3307      	adds	r3, #7
 800795e:	f023 0307 	bic.w	r3, r3, #7
 8007962:	3308      	adds	r3, #8
 8007964:	9303      	str	r3, [sp, #12]
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	443b      	add	r3, r7
 800796a:	9309      	str	r3, [sp, #36]	; 0x24
 800796c:	e768      	b.n	8007840 <_vfiprintf_r+0x78>
 800796e:	460c      	mov	r4, r1
 8007970:	2001      	movs	r0, #1
 8007972:	fb0c 3202 	mla	r2, ip, r2, r3
 8007976:	e7a6      	b.n	80078c6 <_vfiprintf_r+0xfe>
 8007978:	2300      	movs	r3, #0
 800797a:	f04f 0c0a 	mov.w	ip, #10
 800797e:	4619      	mov	r1, r3
 8007980:	3401      	adds	r4, #1
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	4620      	mov	r0, r4
 8007986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798a:	3a30      	subs	r2, #48	; 0x30
 800798c:	2a09      	cmp	r2, #9
 800798e:	d903      	bls.n	8007998 <_vfiprintf_r+0x1d0>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0c6      	beq.n	8007922 <_vfiprintf_r+0x15a>
 8007994:	9105      	str	r1, [sp, #20]
 8007996:	e7c4      	b.n	8007922 <_vfiprintf_r+0x15a>
 8007998:	4604      	mov	r4, r0
 800799a:	2301      	movs	r3, #1
 800799c:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a0:	e7f0      	b.n	8007984 <_vfiprintf_r+0x1bc>
 80079a2:	ab03      	add	r3, sp, #12
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	462a      	mov	r2, r5
 80079a8:	4630      	mov	r0, r6
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <_vfiprintf_r+0x230>)
 80079ac:	a904      	add	r1, sp, #16
 80079ae:	f7fd fc59 	bl	8005264 <_printf_float>
 80079b2:	4607      	mov	r7, r0
 80079b4:	1c78      	adds	r0, r7, #1
 80079b6:	d1d6      	bne.n	8007966 <_vfiprintf_r+0x19e>
 80079b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	d405      	bmi.n	80079ca <_vfiprintf_r+0x202>
 80079be:	89ab      	ldrh	r3, [r5, #12]
 80079c0:	059a      	lsls	r2, r3, #22
 80079c2:	d402      	bmi.n	80079ca <_vfiprintf_r+0x202>
 80079c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c6:	f7fe fbc5 	bl	8006154 <__retarget_lock_release_recursive>
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	065b      	lsls	r3, r3, #25
 80079ce:	f53f af1d 	bmi.w	800780c <_vfiprintf_r+0x44>
 80079d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d4:	e71c      	b.n	8007810 <_vfiprintf_r+0x48>
 80079d6:	ab03      	add	r3, sp, #12
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	462a      	mov	r2, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <_vfiprintf_r+0x230>)
 80079e0:	a904      	add	r1, sp, #16
 80079e2:	f7fd fedf 	bl	80057a4 <_printf_i>
 80079e6:	e7e4      	b.n	80079b2 <_vfiprintf_r+0x1ea>
 80079e8:	08008264 	.word	0x08008264
 80079ec:	0800826a 	.word	0x0800826a
 80079f0:	0800826e 	.word	0x0800826e
 80079f4:	08005265 	.word	0x08005265
 80079f8:	080077a3 	.word	0x080077a3

080079fc <__sflush_r>:
 80079fc:	898a      	ldrh	r2, [r1, #12]
 80079fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a00:	4605      	mov	r5, r0
 8007a02:	0710      	lsls	r0, r2, #28
 8007a04:	460c      	mov	r4, r1
 8007a06:	d457      	bmi.n	8007ab8 <__sflush_r+0xbc>
 8007a08:	684b      	ldr	r3, [r1, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dc04      	bgt.n	8007a18 <__sflush_r+0x1c>
 8007a0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dc01      	bgt.n	8007a18 <__sflush_r+0x1c>
 8007a14:	2000      	movs	r0, #0
 8007a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a1a:	2e00      	cmp	r6, #0
 8007a1c:	d0fa      	beq.n	8007a14 <__sflush_r+0x18>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a24:	682f      	ldr	r7, [r5, #0]
 8007a26:	6a21      	ldr	r1, [r4, #32]
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	d032      	beq.n	8007a92 <__sflush_r+0x96>
 8007a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	075a      	lsls	r2, r3, #29
 8007a32:	d505      	bpl.n	8007a40 <__sflush_r+0x44>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	1ac0      	subs	r0, r0, r3
 8007a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a3a:	b10b      	cbz	r3, 8007a40 <__sflush_r+0x44>
 8007a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a3e:	1ac0      	subs	r0, r0, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	4602      	mov	r2, r0
 8007a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a46:	4628      	mov	r0, r5
 8007a48:	6a21      	ldr	r1, [r4, #32]
 8007a4a:	47b0      	blx	r6
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	d106      	bne.n	8007a60 <__sflush_r+0x64>
 8007a52:	6829      	ldr	r1, [r5, #0]
 8007a54:	291d      	cmp	r1, #29
 8007a56:	d82b      	bhi.n	8007ab0 <__sflush_r+0xb4>
 8007a58:	4a28      	ldr	r2, [pc, #160]	; (8007afc <__sflush_r+0x100>)
 8007a5a:	410a      	asrs	r2, r1
 8007a5c:	07d6      	lsls	r6, r2, #31
 8007a5e:	d427      	bmi.n	8007ab0 <__sflush_r+0xb4>
 8007a60:	2200      	movs	r2, #0
 8007a62:	6062      	str	r2, [r4, #4]
 8007a64:	6922      	ldr	r2, [r4, #16]
 8007a66:	04d9      	lsls	r1, r3, #19
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	d504      	bpl.n	8007a76 <__sflush_r+0x7a>
 8007a6c:	1c42      	adds	r2, r0, #1
 8007a6e:	d101      	bne.n	8007a74 <__sflush_r+0x78>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b903      	cbnz	r3, 8007a76 <__sflush_r+0x7a>
 8007a74:	6560      	str	r0, [r4, #84]	; 0x54
 8007a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a78:	602f      	str	r7, [r5, #0]
 8007a7a:	2900      	cmp	r1, #0
 8007a7c:	d0ca      	beq.n	8007a14 <__sflush_r+0x18>
 8007a7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a82:	4299      	cmp	r1, r3
 8007a84:	d002      	beq.n	8007a8c <__sflush_r+0x90>
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7ff fa02 	bl	8006e90 <_free_r>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	6360      	str	r0, [r4, #52]	; 0x34
 8007a90:	e7c1      	b.n	8007a16 <__sflush_r+0x1a>
 8007a92:	2301      	movs	r3, #1
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b0      	blx	r6
 8007a98:	1c41      	adds	r1, r0, #1
 8007a9a:	d1c8      	bne.n	8007a2e <__sflush_r+0x32>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0c5      	beq.n	8007a2e <__sflush_r+0x32>
 8007aa2:	2b1d      	cmp	r3, #29
 8007aa4:	d001      	beq.n	8007aaa <__sflush_r+0xae>
 8007aa6:	2b16      	cmp	r3, #22
 8007aa8:	d101      	bne.n	8007aae <__sflush_r+0xb2>
 8007aaa:	602f      	str	r7, [r5, #0]
 8007aac:	e7b2      	b.n	8007a14 <__sflush_r+0x18>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	e7ae      	b.n	8007a16 <__sflush_r+0x1a>
 8007ab8:	690f      	ldr	r7, [r1, #16]
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	d0aa      	beq.n	8007a14 <__sflush_r+0x18>
 8007abe:	0793      	lsls	r3, r2, #30
 8007ac0:	bf18      	it	ne
 8007ac2:	2300      	movne	r3, #0
 8007ac4:	680e      	ldr	r6, [r1, #0]
 8007ac6:	bf08      	it	eq
 8007ac8:	694b      	ldreq	r3, [r1, #20]
 8007aca:	1bf6      	subs	r6, r6, r7
 8007acc:	600f      	str	r7, [r1, #0]
 8007ace:	608b      	str	r3, [r1, #8]
 8007ad0:	2e00      	cmp	r6, #0
 8007ad2:	dd9f      	ble.n	8007a14 <__sflush_r+0x18>
 8007ad4:	4633      	mov	r3, r6
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	4628      	mov	r0, r5
 8007ada:	6a21      	ldr	r1, [r4, #32]
 8007adc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ae0:	47e0      	blx	ip
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dc06      	bgt.n	8007af4 <__sflush_r+0xf8>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	e790      	b.n	8007a16 <__sflush_r+0x1a>
 8007af4:	4407      	add	r7, r0
 8007af6:	1a36      	subs	r6, r6, r0
 8007af8:	e7ea      	b.n	8007ad0 <__sflush_r+0xd4>
 8007afa:	bf00      	nop
 8007afc:	dfbffffe 	.word	0xdfbffffe

08007b00 <_fflush_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	690b      	ldr	r3, [r1, #16]
 8007b04:	4605      	mov	r5, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	b913      	cbnz	r3, 8007b10 <_fflush_r+0x10>
 8007b0a:	2500      	movs	r5, #0
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	b118      	cbz	r0, 8007b1a <_fflush_r+0x1a>
 8007b12:	6a03      	ldr	r3, [r0, #32]
 8007b14:	b90b      	cbnz	r3, 8007b1a <_fflush_r+0x1a>
 8007b16:	f7fd fff3 	bl	8005b00 <__sinit>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0f3      	beq.n	8007b0a <_fflush_r+0xa>
 8007b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b24:	07d0      	lsls	r0, r2, #31
 8007b26:	d404      	bmi.n	8007b32 <_fflush_r+0x32>
 8007b28:	0599      	lsls	r1, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_fflush_r+0x32>
 8007b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2e:	f7fe fb10 	bl	8006152 <__retarget_lock_acquire_recursive>
 8007b32:	4628      	mov	r0, r5
 8007b34:	4621      	mov	r1, r4
 8007b36:	f7ff ff61 	bl	80079fc <__sflush_r>
 8007b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	07da      	lsls	r2, r3, #31
 8007b40:	d4e4      	bmi.n	8007b0c <_fflush_r+0xc>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	059b      	lsls	r3, r3, #22
 8007b46:	d4e1      	bmi.n	8007b0c <_fflush_r+0xc>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f7fe fb03 	bl	8006154 <__retarget_lock_release_recursive>
 8007b4e:	e7dd      	b.n	8007b0c <_fflush_r+0xc>

08007b50 <fiprintf>:
 8007b50:	b40e      	push	{r1, r2, r3}
 8007b52:	b503      	push	{r0, r1, lr}
 8007b54:	4601      	mov	r1, r0
 8007b56:	ab03      	add	r3, sp, #12
 8007b58:	4805      	ldr	r0, [pc, #20]	; (8007b70 <fiprintf+0x20>)
 8007b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5e:	6800      	ldr	r0, [r0, #0]
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	f7ff fe31 	bl	80077c8 <_vfiprintf_r>
 8007b66:	b002      	add	sp, #8
 8007b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b6c:	b003      	add	sp, #12
 8007b6e:	4770      	bx	lr
 8007b70:	2000008c 	.word	0x2000008c

08007b74 <__swhatbuf_r>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	460c      	mov	r4, r1
 8007b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	461e      	mov	r6, r3
 8007b82:	b096      	sub	sp, #88	; 0x58
 8007b84:	da0c      	bge.n	8007ba0 <__swhatbuf_r+0x2c>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b8e:	bf0c      	ite	eq
 8007b90:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b94:	2340      	movne	r3, #64	; 0x40
 8007b96:	2000      	movs	r0, #0
 8007b98:	6031      	str	r1, [r6, #0]
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	b016      	add	sp, #88	; 0x58
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	466a      	mov	r2, sp
 8007ba2:	f000 f849 	bl	8007c38 <_fstat_r>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	dbed      	blt.n	8007b86 <__swhatbuf_r+0x12>
 8007baa:	9901      	ldr	r1, [sp, #4]
 8007bac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007bb0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bb4:	4259      	negs	r1, r3
 8007bb6:	4159      	adcs	r1, r3
 8007bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bbc:	e7eb      	b.n	8007b96 <__swhatbuf_r+0x22>

08007bbe <__smakebuf_r>:
 8007bbe:	898b      	ldrh	r3, [r1, #12]
 8007bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bc2:	079d      	lsls	r5, r3, #30
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	d507      	bpl.n	8007bda <__smakebuf_r+0x1c>
 8007bca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	6163      	str	r3, [r4, #20]
 8007bd6:	b002      	add	sp, #8
 8007bd8:	bd70      	pop	{r4, r5, r6, pc}
 8007bda:	466a      	mov	r2, sp
 8007bdc:	ab01      	add	r3, sp, #4
 8007bde:	f7ff ffc9 	bl	8007b74 <__swhatbuf_r>
 8007be2:	9900      	ldr	r1, [sp, #0]
 8007be4:	4605      	mov	r5, r0
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7ff f9c2 	bl	8006f70 <_malloc_r>
 8007bec:	b948      	cbnz	r0, 8007c02 <__smakebuf_r+0x44>
 8007bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf2:	059a      	lsls	r2, r3, #22
 8007bf4:	d4ef      	bmi.n	8007bd6 <__smakebuf_r+0x18>
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	f043 0302 	orr.w	r3, r3, #2
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	e7e3      	b.n	8007bca <__smakebuf_r+0xc>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	6020      	str	r0, [r4, #0]
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	9b00      	ldr	r3, [sp, #0]
 8007c0e:	6120      	str	r0, [r4, #16]
 8007c10:	6163      	str	r3, [r4, #20]
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	b15b      	cbz	r3, 8007c2e <__smakebuf_r+0x70>
 8007c16:	4630      	mov	r0, r6
 8007c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1c:	f000 f81e 	bl	8007c5c <_isatty_r>
 8007c20:	b128      	cbz	r0, 8007c2e <__smakebuf_r+0x70>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f023 0303 	bic.w	r3, r3, #3
 8007c28:	f043 0301 	orr.w	r3, r3, #1
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	431d      	orrs	r5, r3
 8007c32:	81a5      	strh	r5, [r4, #12]
 8007c34:	e7cf      	b.n	8007bd6 <__smakebuf_r+0x18>
	...

08007c38 <_fstat_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_fstat_r+0x20>)
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f7fa f9a8 	bl	8001f9a <_fstat>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <_fstat_r+0x1c>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b103      	cbz	r3, 8007c54 <_fstat_r+0x1c>
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	200023a0 	.word	0x200023a0

08007c5c <_isatty_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4d05      	ldr	r5, [pc, #20]	; (8007c78 <_isatty_r+0x1c>)
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fa f9a6 	bl	8001fb8 <_isatty>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_isatty_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_isatty_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	200023a0 	.word	0x200023a0

08007c7c <_sbrk_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4d05      	ldr	r5, [pc, #20]	; (8007c98 <_sbrk_r+0x1c>)
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7fa f9ac 	bl	8001fe4 <_sbrk>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_sbrk_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_sbrk_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	200023a0 	.word	0x200023a0

08007c9c <memcpy>:
 8007c9c:	440a      	add	r2, r1
 8007c9e:	4291      	cmp	r1, r2
 8007ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca4:	d100      	bne.n	8007ca8 <memcpy+0xc>
 8007ca6:	4770      	bx	lr
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cae:	4291      	cmp	r1, r2
 8007cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cb4:	d1f9      	bne.n	8007caa <memcpy+0xe>
 8007cb6:	bd10      	pop	{r4, pc}

08007cb8 <abort>:
 8007cb8:	2006      	movs	r0, #6
 8007cba:	b508      	push	{r3, lr}
 8007cbc:	f000 f85e 	bl	8007d7c <raise>
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f7fa f938 	bl	8001f36 <_exit>

08007cc6 <_calloc_r>:
 8007cc6:	b570      	push	{r4, r5, r6, lr}
 8007cc8:	fba1 5402 	umull	r5, r4, r1, r2
 8007ccc:	b934      	cbnz	r4, 8007cdc <_calloc_r+0x16>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	f7ff f94e 	bl	8006f70 <_malloc_r>
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	b928      	cbnz	r0, 8007ce4 <_calloc_r+0x1e>
 8007cd8:	4630      	mov	r0, r6
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	220c      	movs	r2, #12
 8007cde:	2600      	movs	r6, #0
 8007ce0:	6002      	str	r2, [r0, #0]
 8007ce2:	e7f9      	b.n	8007cd8 <_calloc_r+0x12>
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	f7fe f934 	bl	8005f54 <memset>
 8007cec:	e7f4      	b.n	8007cd8 <_calloc_r+0x12>

08007cee <__ascii_mbtowc>:
 8007cee:	b082      	sub	sp, #8
 8007cf0:	b901      	cbnz	r1, 8007cf4 <__ascii_mbtowc+0x6>
 8007cf2:	a901      	add	r1, sp, #4
 8007cf4:	b142      	cbz	r2, 8007d08 <__ascii_mbtowc+0x1a>
 8007cf6:	b14b      	cbz	r3, 8007d0c <__ascii_mbtowc+0x1e>
 8007cf8:	7813      	ldrb	r3, [r2, #0]
 8007cfa:	600b      	str	r3, [r1, #0]
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	1e10      	subs	r0, r2, #0
 8007d00:	bf18      	it	ne
 8007d02:	2001      	movne	r0, #1
 8007d04:	b002      	add	sp, #8
 8007d06:	4770      	bx	lr
 8007d08:	4610      	mov	r0, r2
 8007d0a:	e7fb      	b.n	8007d04 <__ascii_mbtowc+0x16>
 8007d0c:	f06f 0001 	mvn.w	r0, #1
 8007d10:	e7f8      	b.n	8007d04 <__ascii_mbtowc+0x16>

08007d12 <__ascii_wctomb>:
 8007d12:	4603      	mov	r3, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	b141      	cbz	r1, 8007d2a <__ascii_wctomb+0x18>
 8007d18:	2aff      	cmp	r2, #255	; 0xff
 8007d1a:	d904      	bls.n	8007d26 <__ascii_wctomb+0x14>
 8007d1c:	228a      	movs	r2, #138	; 0x8a
 8007d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	4770      	bx	lr
 8007d26:	2001      	movs	r0, #1
 8007d28:	700a      	strb	r2, [r1, #0]
 8007d2a:	4770      	bx	lr

08007d2c <_raise_r>:
 8007d2c:	291f      	cmp	r1, #31
 8007d2e:	b538      	push	{r3, r4, r5, lr}
 8007d30:	4604      	mov	r4, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	d904      	bls.n	8007d40 <_raise_r+0x14>
 8007d36:	2316      	movs	r3, #22
 8007d38:	6003      	str	r3, [r0, #0]
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d42:	b112      	cbz	r2, 8007d4a <_raise_r+0x1e>
 8007d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d48:	b94b      	cbnz	r3, 8007d5e <_raise_r+0x32>
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f830 	bl	8007db0 <_getpid_r>
 8007d50:	462a      	mov	r2, r5
 8007d52:	4601      	mov	r1, r0
 8007d54:	4620      	mov	r0, r4
 8007d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d5a:	f000 b817 	b.w	8007d8c <_kill_r>
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d00a      	beq.n	8007d78 <_raise_r+0x4c>
 8007d62:	1c59      	adds	r1, r3, #1
 8007d64:	d103      	bne.n	8007d6e <_raise_r+0x42>
 8007d66:	2316      	movs	r3, #22
 8007d68:	6003      	str	r3, [r0, #0]
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	e7e7      	b.n	8007d3e <_raise_r+0x12>
 8007d6e:	2400      	movs	r4, #0
 8007d70:	4628      	mov	r0, r5
 8007d72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d76:	4798      	blx	r3
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e7e0      	b.n	8007d3e <_raise_r+0x12>

08007d7c <raise>:
 8007d7c:	4b02      	ldr	r3, [pc, #8]	; (8007d88 <raise+0xc>)
 8007d7e:	4601      	mov	r1, r0
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	f7ff bfd3 	b.w	8007d2c <_raise_r>
 8007d86:	bf00      	nop
 8007d88:	2000008c 	.word	0x2000008c

08007d8c <_kill_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4d06      	ldr	r5, [pc, #24]	; (8007dac <_kill_r+0x20>)
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	f7fa f8bc 	bl	8001f16 <_kill>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	d102      	bne.n	8007da8 <_kill_r+0x1c>
 8007da2:	682b      	ldr	r3, [r5, #0]
 8007da4:	b103      	cbz	r3, 8007da8 <_kill_r+0x1c>
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	bd38      	pop	{r3, r4, r5, pc}
 8007daa:	bf00      	nop
 8007dac:	200023a0 	.word	0x200023a0

08007db0 <_getpid_r>:
 8007db0:	f7fa b8aa 	b.w	8001f08 <_getpid>

08007db4 <_init>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	bf00      	nop
 8007db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dba:	bc08      	pop	{r3}
 8007dbc:	469e      	mov	lr, r3
 8007dbe:	4770      	bx	lr

08007dc0 <_fini>:
 8007dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc2:	bf00      	nop
 8007dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc6:	bc08      	pop	{r3}
 8007dc8:	469e      	mov	lr, r3
 8007dca:	4770      	bx	lr
