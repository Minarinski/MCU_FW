
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08009870  08009870  00019870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e38  08009e38  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009e38  08009e38  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e38  08009e38  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e3c  08009e3c  00019e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08009e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021e8  200001fc  0800a03c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  0800a03c  000223e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb58  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d11  00000000  00000000  0002bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b7  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fd5  00000000  00000000  0002eeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d78d  00000000  00000000  00046e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086eda  00000000  00000000  00054619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004264  00000000  00000000  000db4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000df758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009854 	.word	0x08009854

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08009854 	.word	0x08009854

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <LCD_SendInternal>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//LCD ============================================
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	b299      	uxth	r1, r3
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	2201      	movs	r2, #1
 8000b68:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <LCD_SendInternal+0xa8>)
 8000b6a:	f002 fd73 	bl	8003654 <HAL_I2C_IsDeviceReady>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d000      	beq.n	8000b7a <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000b78:	e7f1      	b.n	8000b5e <LCD_SendInternal+0x12>
			break;
 8000b7a:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	f023 030f 	bic.w	r3, r3, #15
 8000b82:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 8000b8a:	7bba      	ldrb	r2, [r7, #14]
 8000b8c:	797b      	ldrb	r3, [r7, #5]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f043 030c 	orr.w	r3, r3, #12
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | LCD_BACKLIGHT;
 8000b9a:	7bba      	ldrb	r2, [r7, #14]
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 8000baa:	7b7a      	ldrb	r2, [r7, #13]
 8000bac:	797b      	ldrb	r3, [r7, #5]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f043 030c 	orr.w	r3, r3, #12
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | LCD_BACKLIGHT;
 8000bba:	7b7a      	ldrb	r2, [r7, #13]
 8000bbc:	797b      	ldrb	r3, [r7, #5]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	f107 0208 	add.w	r2, r7, #8
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2304      	movs	r3, #4
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <LCD_SendInternal+0xa8>)
 8000bdc:	f002 fc3c 	bl	8003458 <HAL_I2C_Master_Transmit>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8000be4:	2005      	movs	r0, #5
 8000be6:	f001 fd53 	bl	8002690 <HAL_Delay>
	return res;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000218 	.word	0x20000218

08000bf8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8000c08:	79b9      	ldrb	r1, [r7, #6]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff9c 	bl	8000b4c <LCD_SendInternal>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8000c2c:	79b9      	ldrb	r1, [r7, #6]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff8a 	bl	8000b4c <LCD_SendInternal>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0x30);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2130      	movs	r1, #48	; 0x30
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffd2 	bl	8000bf8 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0x02);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2102      	movs	r1, #2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffcd 	bl	8000bf8 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	210c      	movs	r1, #12
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffc8 	bl	8000bf8 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffc3 	bl	8000bf8 <LCD_SendCommand>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	6039      	str	r1, [r7, #0]
 8000c84:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 8000c86:	e009      	b.n	8000c9c <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffc3 	bl	8000c1c <LCD_SendData>
		str++;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f1      	bne.n	8000c88 <LCD_SendString+0xe>
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	603a      	str	r2, [r7, #0]
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8000ccc:	7afa      	ldrb	r2, [r7, #11]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff90 	bl	8000bf8 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e00b      	b.n	8000cf6 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff96 	bl	8000c1c <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	ddf0      	ble.n	8000cde <LCD_SET_CGRAM+0x30>
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <LCD_Write_Info>:

void LCD_Write_Info(struct DataFlash nowData, struct DataFlash nextData) {
 8000d06:	b084      	sub	sp, #16
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	f107 0c10 	add.w	ip, r7, #16
 8000d12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8000d16:	2101      	movs	r1, #1
 8000d18:	204e      	movs	r0, #78	; 0x4e
 8000d1a:	f7ff ff6d 	bl	8000bf8 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	204e      	movs	r0, #78	; 0x4e
 8000d22:	f7ff ff69 	bl	8000bf8 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 8000d26:	f107 0315 	add.w	r3, r7, #21
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	204e      	movs	r0, #78	; 0x4e
 8000d2e:	f7ff ffa4 	bl	8000c7a <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	204e      	movs	r0, #78	; 0x4e
 8000d36:	f7ff ff71 	bl	8000c1c <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	e006      	b.n	8000d4e <LCD_Write_Info+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000d40:	2114      	movs	r1, #20
 8000d42:	204e      	movs	r0, #78	; 0x4e
 8000d44:	f7ff ff58 	bl	8000bf8 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0a      	cmp	r3, #10
 8000d52:	ddf5      	ble.n	8000d40 <LCD_Write_Info+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 8000d54:	2101      	movs	r1, #1
 8000d56:	204e      	movs	r0, #78	; 0x4e
 8000d58:	f7ff ff60 	bl	8000c1c <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8000d5c:	21c0      	movs	r1, #192	; 0xc0
 8000d5e:	204e      	movs	r0, #78	; 0x4e
 8000d60:	f7ff ff4a 	bl	8000bf8 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 8000d64:	2103      	movs	r1, #3
 8000d66:	204e      	movs	r0, #78	; 0x4e
 8000d68:	f7ff ff58 	bl	8000c1c <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 8000d6c:	f107 031a 	add.w	r3, r7, #26
 8000d70:	4619      	mov	r1, r3
 8000d72:	204e      	movs	r0, #78	; 0x4e
 8000d74:	f7ff ff81 	bl	8000c7a <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 8000d78:	2103      	movs	r1, #3
 8000d7a:	204e      	movs	r0, #78	; 0x4e
 8000d7c:	f7ff ff4e 	bl	8000c1c <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8000d80:	2103      	movs	r1, #3
 8000d82:	204e      	movs	r0, #78	; 0x4e
 8000d84:	f7ff ff4a 	bl	8000c1c <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8000d88:	2103      	movs	r1, #3
 8000d8a:	204e      	movs	r0, #78	; 0x4e
 8000d8c:	f7ff ff46 	bl	8000c1c <LCD_SendData>
	LCD_SendString(LCD_ADDR, nextData.busStopID);
 8000d90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d94:	330a      	adds	r3, #10
 8000d96:	4619      	mov	r1, r3
 8000d98:	204e      	movs	r0, #78	; 0x4e
 8000d9a:	f7ff ff6e 	bl	8000c7a <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	e006      	b.n	8000db2 <LCD_Write_Info+0xac>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000da4:	2114      	movs	r1, #20
 8000da6:	204e      	movs	r0, #78	; 0x4e
 8000da8:	f7ff ff26 	bl	8000bf8 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	ddf5      	ble.n	8000da4 <LCD_Write_Info+0x9e>
	}
	LCD_SendData(LCD_ADDR, 1);
 8000db8:	2101      	movs	r1, #1
 8000dba:	204e      	movs	r0, #78	; 0x4e
 8000dbc:	f7ff ff2e 	bl	8000c1c <LCD_SendData>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dca:	b004      	add	sp, #16
 8000dcc:	4770      	bx	lr
	...

08000dd0 <updateLCD>:

void updateLCD() {
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd4:	b096      	sub	sp, #88	; 0x58
 8000dd6:	af16      	add	r7, sp, #88	; 0x58
	LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <updateLCD+0x9c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <updateLCD+0x9c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	4923      	ldr	r1, [pc, #140]	; (8000e70 <updateLCD+0xa0>)
 8000de4:	2032      	movs	r0, #50	; 0x32
 8000de6:	fb00 f202 	mul.w	r2, r0, r2
 8000dea:	188c      	adds	r4, r1, r2
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <updateLCD+0xa0>)
 8000dee:	2132      	movs	r1, #50	; 0x32
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	461d      	mov	r5, r3
 8000df8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8000dfc:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8000e00:	4666      	mov	r6, ip
 8000e02:	462b      	mov	r3, r5
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	6859      	ldr	r1, [r3, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e0e:	3510      	adds	r5, #16
 8000e10:	f10c 0c10 	add.w	ip, ip, #16
 8000e14:	4575      	cmp	r5, lr
 8000e16:	d1f3      	bne.n	8000e00 <updateLCD+0x30>
 8000e18:	4662      	mov	r2, ip
 8000e1a:	462b      	mov	r3, r5
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	8013      	strh	r3, [r2, #0]
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	469a      	mov	sl, r3
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	4699      	mov	r9, r3
 8000e28:	68a3      	ldr	r3, [r4, #8]
 8000e2a:	4698      	mov	r8, r3
 8000e2c:	68e3      	ldr	r3, [r4, #12]
 8000e2e:	469e      	mov	lr, r3
 8000e30:	3410      	adds	r4, #16
 8000e32:	466e      	mov	r6, sp
 8000e34:	f104 0c20 	add.w	ip, r4, #32
 8000e38:	4635      	mov	r5, r6
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e46:	3410      	adds	r4, #16
 8000e48:	3610      	adds	r6, #16
 8000e4a:	4564      	cmp	r4, ip
 8000e4c:	d1f4      	bne.n	8000e38 <updateLCD+0x68>
 8000e4e:	4632      	mov	r2, r6
 8000e50:	4623      	mov	r3, r4
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	8013      	strh	r3, [r2, #0]
 8000e56:	4650      	mov	r0, sl
 8000e58:	4649      	mov	r1, r9
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	4673      	mov	r3, lr
 8000e5e:	f7ff ff52 	bl	8000d06 <LCD_Write_Info>
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200020d4 	.word	0x200020d4
 8000e70:	20000388 	.word	0x20000388

08000e74 <Flash_Unlock>:

//Flash===========================================================

int dataIdx = 0;

void Flash_Unlock(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;  // Key1
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <Flash_Unlock+0x18>)
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <Flash_Unlock+0x1c>)
 8000e7c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;  // Key2
 8000e7e:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <Flash_Unlock+0x18>)
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <Flash_Unlock+0x20>)
 8000e82:	605a      	str	r2, [r3, #4]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	45670123 	.word	0x45670123
 8000e94:	cdef89ab 	.word	0xcdef89ab

08000e98 <Flash_Lock>:

void Flash_Lock(void) {
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <Flash_Lock+0x18>)
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <Flash_Lock+0x18>)
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea6:	6113      	str	r3, [r2, #16]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t data) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	while (FLASH->SR & FLASH_SR_BSY)
 8000ec0:	bf00      	nop
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <Flash_Write+0x54>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f9      	bne.n	8000ec2 <Flash_Write+0xe>
		;  // Busy flag 체크

	FLASH->CR |= FLASH_CR_PG;  // Programming mode ?��?��
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <Flash_Write+0x54>)
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <Flash_Write+0x54>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*) address = data;  // ?��?��?�� 기록
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	78fa      	ldrb	r2, [r7, #3]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	801a      	strh	r2, [r3, #0]

	while (FLASH->SR & FLASH_SR_BSY)
 8000ee2:	bf00      	nop
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <Flash_Write+0x54>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f9      	bne.n	8000ee4 <Flash_Write+0x30>
		;  // Busy flag 체크

	FLASH->CR &= ~FLASH_CR_PG;  // Programming mode ?��?��
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <Flash_Write+0x54>)
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <Flash_Write+0x54>)
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	6113      	str	r3, [r2, #16]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <Flash_Write_Char>:
	uint16_t value = (uint16_t) strtol((const char*) StrData, NULL, 10);
	Flash_Write(address, value);  // ?��?�� 값을 ?��?��?�� 메모리에 ???��
	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
}

uint32_t Flash_Write_Char(uint32_t address, uint8_t CharData) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	Flash_Unlock();
 8000f18:	f7ff ffac 	bl	8000e74 <Flash_Unlock>
	Flash_Write(address, CharData);
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffc7 	bl	8000eb4 <Flash_Write>
	Flash_Lock();
 8000f26:	f7ff ffb7 	bl	8000e98 <Flash_Lock>
	return address + 0x02;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3302      	adds	r3, #2
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <Flash_Write_Str>:

uint32_t Flash_Write_Str(uint32_t address, uint8_t *StrData) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e00b      	b.n	8000f5e <Flash_Write_Str+0x28>
		address = Flash_Write_Char(address, StrData[i]);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffdb 	bl	8000f0c <Flash_Write_Char>
 8000f56:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff f900 	bl	8000164 <strlen>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8ec      	bhi.n	8000f46 <Flash_Write_Str+0x10>
	}
	//printf("%x\r\n", address);
	return address;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t address, uint8_t *StrData) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	char *token;

	token = strtok(StrData, ",");
 8000f82:	498a      	ldr	r1, [pc, #552]	; (80011ac <Flash_Write_Data+0x234>)
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f006 f8c9 	bl	800711c <strtok>
 8000f8a:	60f8      	str	r0, [r7, #12]
	if (token[0] == 'D') {
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b44      	cmp	r3, #68	; 0x44
 8000f92:	f040 8095 	bne.w	80010c0 <Flash_Write_Data+0x148>
		token = strtok(NULL, ",");
 8000f96:	4985      	ldr	r1, [pc, #532]	; (80011ac <Flash_Write_Data+0x234>)
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f006 f8bf 	bl	800711c <strtok>
 8000f9e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d026      	beq.n	8000ff4 <Flash_Write_Data+0x7c>
			strncpy(data[dataIdx].busNM, token,
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <Flash_Write_Data+0x238>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2232      	movs	r2, #50	; 0x32
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a80      	ldr	r2, [pc, #512]	; (80011b4 <Flash_Write_Data+0x23c>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 f89b 	bl	80070f4 <strncpy>
					sizeof(data[dataIdx].busNM) - 1);
			data[dataIdx].busNM[sizeof(data[dataIdx].busNM) - 1] = '\0';
 8000fbe:	4b7c      	ldr	r3, [pc, #496]	; (80011b0 <Flash_Write_Data+0x238>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a7c      	ldr	r2, [pc, #496]	; (80011b4 <Flash_Write_Data+0x23c>)
 8000fc4:	2132      	movs	r1, #50	; 0x32
 8000fc6:	fb01 f303 	mul.w	r3, r1, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busNM);
 8000fd2:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <Flash_Write_Data+0x238>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2232      	movs	r2, #50	; 0x32
 8000fd8:	fb02 f303 	mul.w	r3, r2, r3
 8000fdc:	4a75      	ldr	r2, [pc, #468]	; (80011b4 <Flash_Write_Data+0x23c>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa7 	bl	8000f36 <Flash_Write_Str>
 8000fe8:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8000fea:	212c      	movs	r1, #44	; 0x2c
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff8d 	bl	8000f0c <Flash_Write_Char>
 8000ff2:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8000ff4:	496d      	ldr	r1, [pc, #436]	; (80011ac <Flash_Write_Data+0x234>)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f006 f890 	bl	800711c <strtok>
 8000ffc:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d028      	beq.n	8001056 <Flash_Write_Data+0xde>
			strncpy(data[dataIdx].busRouteno, token,
 8001004:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <Flash_Write_Data+0x238>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2232      	movs	r2, #50	; 0x32
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	4a69      	ldr	r2, [pc, #420]	; (80011b4 <Flash_Write_Data+0x23c>)
 8001010:	4413      	add	r3, r2
 8001012:	3305      	adds	r3, #5
 8001014:	2204      	movs	r2, #4
 8001016:	68f9      	ldr	r1, [r7, #12]
 8001018:	4618      	mov	r0, r3
 800101a:	f006 f86b 	bl	80070f4 <strncpy>
					sizeof(data[dataIdx].busRouteno) - 1);
			data[dataIdx].busRouteno[sizeof(data[dataIdx].busRouteno) - 1] =
 800101e:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <Flash_Write_Data+0x238>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a64      	ldr	r2, [pc, #400]	; (80011b4 <Flash_Write_Data+0x23c>)
 8001024:	2132      	movs	r1, #50	; 0x32
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	4413      	add	r3, r2
 800102c:	3309      	adds	r3, #9
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
					'\0';
			address = Flash_Write_Str(address, data[dataIdx].busRouteno);
 8001032:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <Flash_Write_Data+0x238>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2232      	movs	r2, #50	; 0x32
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a5d      	ldr	r2, [pc, #372]	; (80011b4 <Flash_Write_Data+0x23c>)
 800103e:	4413      	add	r3, r2
 8001040:	3305      	adds	r3, #5
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff76 	bl	8000f36 <Flash_Write_Str>
 800104a:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 800104c:	212c      	movs	r1, #44	; 0x2c
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff5c 	bl	8000f0c <Flash_Write_Char>
 8001054:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001056:	4955      	ldr	r1, [pc, #340]	; (80011ac <Flash_Write_Data+0x234>)
 8001058:	2000      	movs	r0, #0
 800105a:	f006 f85f 	bl	800711c <strtok>
 800105e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 809d 	beq.w	80011a2 <Flash_Write_Data+0x22a>
			strncpy(data[dataIdx].busStopID, token,
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <Flash_Write_Data+0x238>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2232      	movs	r2, #50	; 0x32
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	3308      	adds	r3, #8
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <Flash_Write_Data+0x23c>)
 8001076:	4413      	add	r3, r2
 8001078:	3302      	adds	r3, #2
 800107a:	2207      	movs	r2, #7
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	4618      	mov	r0, r3
 8001080:	f006 f838 	bl	80070f4 <strncpy>
					sizeof(data[dataIdx].busStopID) - 1);
			data[dataIdx].busStopID[sizeof(data[dataIdx].busStopID) - 1] = '\0';
 8001084:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <Flash_Write_Data+0x238>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <Flash_Write_Data+0x23c>)
 800108a:	2132      	movs	r1, #50	; 0x32
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	3311      	adds	r3, #17
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busStopID);
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <Flash_Write_Data+0x238>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2232      	movs	r2, #50	; 0x32
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	3308      	adds	r3, #8
 80010a4:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <Flash_Write_Data+0x23c>)
 80010a6:	4413      	add	r3, r2
 80010a8:	3302      	adds	r3, #2
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff42 	bl	8000f36 <Flash_Write_Str>
 80010b2:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80010b4:	212c      	movs	r1, #44	; 0x2c
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff28 	bl	8000f0c <Flash_Write_Char>
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	e070      	b.n	80011a2 <Flash_Write_Data+0x22a>
		}
	} else {
		token = strtok(NULL, ",");
 80010c0:	493a      	ldr	r1, [pc, #232]	; (80011ac <Flash_Write_Data+0x234>)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f006 f82a 	bl	800711c <strtok>
 80010c8:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d02a      	beq.n	8001126 <Flash_Write_Data+0x1ae>
			strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 80010d0:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <Flash_Write_Data+0x238>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2232      	movs	r2, #50	; 0x32
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	3310      	adds	r3, #16
 80010dc:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <Flash_Write_Data+0x23c>)
 80010de:	4413      	add	r3, r2
 80010e0:	3302      	adds	r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f804 	bl	80070f4 <strncpy>
			data[dataIdx].lati[sizeof(data[dataIdx].lati) - 1] = '\0';
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <Flash_Write_Data+0x238>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <Flash_Write_Data+0x23c>)
 80010f2:	2132      	movs	r1, #50	; 0x32
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	3321      	adds	r3, #33	; 0x21
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].lati);
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <Flash_Write_Data+0x238>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2232      	movs	r2, #50	; 0x32
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	3310      	adds	r3, #16
 800110c:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <Flash_Write_Data+0x23c>)
 800110e:	4413      	add	r3, r2
 8001110:	3302      	adds	r3, #2
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff0e 	bl	8000f36 <Flash_Write_Str>
 800111a:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 800111c:	212c      	movs	r1, #44	; 0x2c
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fef4 	bl	8000f0c <Flash_Write_Char>
 8001124:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001126:	4921      	ldr	r1, [pc, #132]	; (80011ac <Flash_Write_Data+0x234>)
 8001128:	2000      	movs	r0, #0
 800112a:	f005 fff7 	bl	800711c <strtok>
 800112e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02a      	beq.n	800118c <Flash_Write_Data+0x214>
			strncpy(data[dataIdx].longi, token,
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <Flash_Write_Data+0x238>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2232      	movs	r2, #50	; 0x32
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	3320      	adds	r3, #32
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <Flash_Write_Data+0x23c>)
 8001144:	4413      	add	r3, r2
 8001146:	3302      	adds	r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	4618      	mov	r0, r3
 800114e:	f005 ffd1 	bl	80070f4 <strncpy>
					sizeof(data[dataIdx].longi) - 1);
			data[dataIdx].longi[sizeof(data[dataIdx].longi) - 1] = '\0';
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <Flash_Write_Data+0x238>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <Flash_Write_Data+0x23c>)
 8001158:	2132      	movs	r1, #50	; 0x32
 800115a:	fb01 f303 	mul.w	r3, r1, r3
 800115e:	4413      	add	r3, r2
 8001160:	3331      	adds	r3, #49	; 0x31
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].longi);
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <Flash_Write_Data+0x238>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2232      	movs	r2, #50	; 0x32
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	3320      	adds	r3, #32
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <Flash_Write_Data+0x23c>)
 8001174:	4413      	add	r3, r2
 8001176:	3302      	adds	r3, #2
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fedb 	bl	8000f36 <Flash_Write_Str>
 8001180:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, '!');
 8001182:	2121      	movs	r1, #33	; 0x21
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fec1 	bl	8000f0c <Flash_Write_Char>
 800118a:	6078      	str	r0, [r7, #4]
		}
		dataIdx += 1;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <Flash_Write_Data+0x238>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <Flash_Write_Data+0x238>)
 8001194:	6013      	str	r3, [r2, #0]
		if (dataIdx == 2) {
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <Flash_Write_Data+0x238>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d101      	bne.n	80011a2 <Flash_Write_Data+0x22a>
			updateLCD();
 800119e:	f7ff fe17 	bl	8000dd0 <updateLCD>
		}
	}
//	printf("busNM:%s, busRouteNo:%s, BusStopID:%s, lati:%s, longi:%s\r\n",
//			data.busNM, data.busRouteno, data.busStopID, data.lati, data.longi);
	return address;
 80011a2:	687b      	ldr	r3, [r7, #4]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	08009870 	.word	0x08009870
 80011b0:	200020d8 	.word	0x200020d8
 80011b4:	20000388 	.word	0x20000388

080011b8 <Flash_Read>:

uint16_t Flash_Read(uint32_t address) {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) address; // �???��?�� ?��?��?�� 메모�?? 주소?��?�� ?��?��?�� ?���??
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <Flash_Erase_Page>:

void Flash_Erase_Page(uint32_t address) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	Flash_Unlock();  // ?��?��?�� 메모�?? ?��?��
 80011d8:	f7ff fe4c 	bl	8000e74 <Flash_Unlock>

	FLASH->CR |= FLASH_CR_PER;   // Page Erase 비트 ?��?��
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <Flash_Erase_Page+0x50>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <Flash_Erase_Page+0x50>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6113      	str	r3, [r2, #16]
	FLASH->AR = address;         // �???�� ?��?���???�� 주소 ?��?��
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <Flash_Erase_Page+0x50>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;  // Erase ?��?��
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <Flash_Erase_Page+0x50>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <Flash_Erase_Page+0x50>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	6113      	str	r3, [r2, #16]

	while (FLASH->SR & FLASH_SR_BSY)
 80011fa:	bf00      	nop
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <Flash_Erase_Page+0x50>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f9      	bne.n	80011fc <Flash_Erase_Page+0x2c>
		;  // ?��?��?�� ?��료될 ?��까�? ??�??

	FLASH->CR &= ~FLASH_CR_PER;  // Page Erase 비트 ?��?��
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <Flash_Erase_Page+0x50>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <Flash_Erase_Page+0x50>)
 800120e:	f023 0302 	bic.w	r3, r3, #2
 8001212:	6113      	str	r3, [r2, #16]

	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
 8001214:	f7ff fe40 	bl	8000e98 <Flash_Lock>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000

08001224 <splitData>:

void splitData(char *strData) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	char *token;

	token = strtok(strData, ","); // CarNM
 800122c:	492f      	ldr	r1, [pc, #188]	; (80012ec <splitData+0xc8>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f005 ff74 	bl	800711c <strtok>
 8001234:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <splitData+0xcc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2232      	movs	r2, #50	; 0x32
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a2c      	ldr	r2, [pc, #176]	; (80012f4 <splitData+0xd0>)
 8001242:	4413      	add	r3, r2
 8001244:	2204      	movs	r2, #4
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	4618      	mov	r0, r3
 800124a:	f005 ff53 	bl	80070f4 <strncpy>

	token = strtok(NULL, ","); // RouteNo
 800124e:	4927      	ldr	r1, [pc, #156]	; (80012ec <splitData+0xc8>)
 8001250:	2000      	movs	r0, #0
 8001252:	f005 ff63 	bl	800711c <strtok>
 8001256:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busRouteno, token,
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <splitData+0xcc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2232      	movs	r2, #50	; 0x32
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <splitData+0xd0>)
 8001264:	4413      	add	r3, r2
 8001266:	3305      	adds	r3, #5
 8001268:	2204      	movs	r2, #4
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	f005 ff41 	bl	80070f4 <strncpy>
			sizeof(data[dataIdx].busRouteno) - 1);

	token = strtok(NULL, ","); // StopID
 8001272:	491e      	ldr	r1, [pc, #120]	; (80012ec <splitData+0xc8>)
 8001274:	2000      	movs	r0, #0
 8001276:	f005 ff51 	bl	800711c <strtok>
 800127a:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busStopID, token,
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <splitData+0xcc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2232      	movs	r2, #50	; 0x32
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	3308      	adds	r3, #8
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <splitData+0xd0>)
 800128a:	4413      	add	r3, r2
 800128c:	3302      	adds	r3, #2
 800128e:	2207      	movs	r2, #7
 8001290:	68f9      	ldr	r1, [r7, #12]
 8001292:	4618      	mov	r0, r3
 8001294:	f005 ff2e 	bl	80070f4 <strncpy>
			sizeof(data[dataIdx].busStopID) - 1);

	token = strtok(NULL, ","); // lati
 8001298:	4914      	ldr	r1, [pc, #80]	; (80012ec <splitData+0xc8>)
 800129a:	2000      	movs	r0, #0
 800129c:	f005 ff3e 	bl	800711c <strtok>
 80012a0:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <splitData+0xcc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2232      	movs	r2, #50	; 0x32
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	3310      	adds	r3, #16
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <splitData+0xd0>)
 80012b0:	4413      	add	r3, r2
 80012b2:	3302      	adds	r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	68f9      	ldr	r1, [r7, #12]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f005 ff1b 	bl	80070f4 <strncpy>

	token = strtok(NULL, "!"); // longi
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <splitData+0xd4>)
 80012c0:	2000      	movs	r0, #0
 80012c2:	f005 ff2b 	bl	800711c <strtok>
 80012c6:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <splitData+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2232      	movs	r2, #50	; 0x32
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	3320      	adds	r3, #32
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <splitData+0xd0>)
 80012d6:	4413      	add	r3, r2
 80012d8:	3302      	adds	r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	4618      	mov	r0, r3
 80012e0:	f005 ff08 	bl	80070f4 <strncpy>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08009870 	.word	0x08009870
 80012f0:	200020d8 	.word	0x200020d8
 80012f4:	20000388 	.word	0x20000388
 80012f8:	08009874 	.word	0x08009874

080012fc <CallData>:

uint32_t CallData(uint32_t address) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b096      	sub	sp, #88	; 0x58
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	char a[70] = { 0, };
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2242      	movs	r2, #66	; 0x42
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fed5 	bl	80070c0 <memset>
	int i = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		a[i] = (char) Flash_Read(address);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff4c 	bl	80011b8 <Flash_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	b2d9      	uxtb	r1, r3
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132a:	4413      	add	r3, r2
 800132c:	460a      	mov	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
		address += 0x02;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	607b      	str	r3, [r7, #4]
		if (a[i] == 0xFF) {
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d101      	bne.n	8001348 <CallData+0x4c>
			return address;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	e01e      	b.n	8001386 <CallData+0x8a>
		}
		if (a[i] == '!') {
 8001348:	f107 020c 	add.w	r2, r7, #12
 800134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b21      	cmp	r3, #33	; 0x21
 8001354:	d113      	bne.n	800137e <CallData+0x82>
			splitData(a);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff62 	bl	8001224 <splitData>
			dataIdx += 1;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <CallData+0x94>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <CallData+0x94>)
 8001368:	6013      	str	r3, [r2, #0]
			i = -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	657b      	str	r3, [r7, #84]	; 0x54
			memset(a, 0, 60);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	223c      	movs	r2, #60	; 0x3c
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f005 fea1 	bl	80070c0 <memset>
		}
		i += 1;
 800137e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001380:	3301      	adds	r3, #1
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
		a[i] = (char) Flash_Read(address);
 8001384:	e7c9      	b.n	800131a <CallData+0x1e>
	}
}
 8001386:	4618      	mov	r0, r3
 8001388:	3758      	adds	r7, #88	; 0x58
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200020d8 	.word	0x200020d8

08001394 <convertToDecimalDegrees>:

// GPS=======================================================
char latitude[16];
char longitude[16];

double convertToDecimalDegrees(const char *coordinate, char type) {
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
	int degrees;
	double minutes;
	double decimalDegrees;

	if (type == 'L') { // Latitude
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b4c      	cmp	r3, #76	; 0x4c
 80013a4:	d116      	bne.n	80013d4 <convertToDecimalDegrees+0x40>
		// 첫 두 자리 (도)
		degrees = (coordinate[0] - '0') * 10 + (coordinate[1] - '0'); // dd
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3b30      	subs	r3, #48	; 0x30
 80013c0:	4413      	add	r3, r2
 80013c2:	61fb      	str	r3, [r7, #28]
		// 나머지 부분 (분)
		minutes = atof(coordinate + 2); // mm.mmmm
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3302      	adds	r3, #2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 f941 	bl	8005650 <atof>
 80013ce:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80013d2:	e025      	b.n	8001420 <convertToDecimalDegrees+0x8c>
	} else if (type == 'G') { // Longitude
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b47      	cmp	r3, #71	; 0x47
 80013d8:	d11d      	bne.n	8001416 <convertToDecimalDegrees+0x82>
		// 첫 세 자리 (도)
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b30      	subs	r3, #48	; 0x30
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	fb02 f103 	mul.w	r1, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	18ca      	adds	r2, r1, r3
				+ (coordinate[2] - '0'); // ddd
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3302      	adds	r3, #2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3b30      	subs	r3, #48	; 0x30
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001402:	4413      	add	r3, r2
 8001404:	61fb      	str	r3, [r7, #28]
		// 나머지 부분 (분)
		minutes = atof(coordinate + 3); // mm.mmmm
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3303      	adds	r3, #3
 800140a:	4618      	mov	r0, r3
 800140c:	f004 f920 	bl	8005650 <atof>
 8001410:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001414:	e004      	b.n	8001420 <convertToDecimalDegrees+0x8c>
	} else {
		printf("Invalid type\n");
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <convertToDecimalDegrees+0xc8>)
 8001418:	f005 fcc4 	bl	8006da4 <puts>
		return;
 800141c:	bf00      	nop
 800141e:	e017      	b.n	8001450 <convertToDecimalDegrees+0xbc>
	}

	// 소수점 부분 계산
	decimalDegrees = degrees + (minutes / 60.0);
 8001420:	69f8      	ldr	r0, [r7, #28]
 8001422:	f7fe fff9 	bl	8000418 <__aeabi_i2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <convertToDecimalDegrees+0xcc>)
 8001430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001434:	f7ff f984 	bl	8000740 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe fe9e 	bl	8000180 <__adddf3>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decimalDegrees;
 800144c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bdb0      	pop	{r4, r5, r7, pc}
 800145a:	bf00      	nop
 800145c:	08009878 	.word	0x08009878
 8001460:	404e0000 	.word	0x404e0000

08001464 <parseGPSData>:

void parseGPSData(uint8_t *buffer, uint16_t size) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
	char *nmeaGGA = NULL;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
	double la, lo;
	//printf("%s", (char*)buffer);
	// DMA 버퍼?��?�� $GPGGA 문자?��?�� �??��
	nmeaGGA = strstr((char*) buffer, "GLL");
 8001474:	492a      	ldr	r1, [pc, #168]	; (8001520 <parseGPSData+0xbc>)
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f005 feac 	bl	80071d4 <strstr>
 800147c:	60f8      	str	r0, [r7, #12]
	if (nmeaGGA != NULL) {
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d049      	beq.n	8001518 <parseGPSData+0xb4>
		char *token;

		// NMEA 메시�? ?��?��?��
		token = strtok(nmeaGGA, ",");
 8001484:	4927      	ldr	r1, [pc, #156]	; (8001524 <parseGPSData+0xc0>)
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f005 fe48 	bl	800711c <strtok>
 800148c:	60b8      	str	r0, [r7, #8]

//        // UTC ?���? (무시)
//        token = strtok(NULL, ",");

		// ?��?��
		token = strtok(NULL, ",");
 800148e:	4925      	ldr	r1, [pc, #148]	; (8001524 <parseGPSData+0xc0>)
 8001490:	2000      	movs	r0, #0
 8001492:	f005 fe43 	bl	800711c <strtok>
 8001496:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00d      	beq.n	80014ba <parseGPSData+0x56>
			strncpy(latitude, token, sizeof(latitude) - 1);
 800149e:	220f      	movs	r2, #15
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	4821      	ldr	r0, [pc, #132]	; (8001528 <parseGPSData+0xc4>)
 80014a4:	f005 fe26 	bl	80070f4 <strncpy>
			latitude[sizeof(latitude) - 1] = '\0';
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <parseGPSData+0xc4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	73da      	strb	r2, [r3, #15]
			la = convertToDecimalDegrees(latitude, 'L');
 80014ae:	214c      	movs	r1, #76	; 0x4c
 80014b0:	481d      	ldr	r0, [pc, #116]	; (8001528 <parseGPSData+0xc4>)
 80014b2:	f7ff ff6f 	bl	8001394 <convertToDecimalDegrees>
 80014b6:	e9c7 0106 	strd	r0, r1, [r7, #24]
		}

		// N/S ?��?��
		token = strtok(NULL, ",");
 80014ba:	491a      	ldr	r1, [pc, #104]	; (8001524 <parseGPSData+0xc0>)
 80014bc:	2000      	movs	r0, #0
 80014be:	f005 fe2d 	bl	800711c <strtok>
 80014c2:	60b8      	str	r0, [r7, #8]

		// 경도
		token = strtok(NULL, ",");
 80014c4:	4917      	ldr	r1, [pc, #92]	; (8001524 <parseGPSData+0xc0>)
 80014c6:	2000      	movs	r0, #0
 80014c8:	f005 fe28 	bl	800711c <strtok>
 80014cc:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <parseGPSData+0x8c>
			strncpy(longitude, token, sizeof(longitude) - 1);
 80014d4:	220f      	movs	r2, #15
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <parseGPSData+0xc8>)
 80014da:	f005 fe0b 	bl	80070f4 <strncpy>
			longitude[sizeof(longitude) - 1] = '\0';
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <parseGPSData+0xc8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	73da      	strb	r2, [r3, #15]
			lo = convertToDecimalDegrees(longitude, 'G');
 80014e4:	2147      	movs	r1, #71	; 0x47
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <parseGPSData+0xc8>)
 80014e8:	f7ff ff54 	bl	8001394 <convertToDecimalDegrees>
 80014ec:	e9c7 0104 	strd	r0, r1, [r7, #16]
		}

		// E/W ?��?��
		token = strtok(NULL, ",");
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <parseGPSData+0xc0>)
 80014f2:	2000      	movs	r0, #0
 80014f4:	f005 fe12 	bl	800711c <strtok>
 80014f8:	60b8      	str	r0, [r7, #8]

		// ?��?��?�� 결과�? ?��버그 출력
		printf("\r\nLatitude: %.6f, Longitude: %.6f\r\n", la, lo);
 80014fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <parseGPSData+0xcc>)
 8001508:	f005 fbe6 	bl	8006cd8 <iprintf>
		CheckGPS(la, lo);
 800150c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001514:	f000 f810 	bl	8001538 <CheckGPS>
	}
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08009888 	.word	0x08009888
 8001524:	08009870 	.word	0x08009870
 8001528:	200020dc 	.word	0x200020dc
 800152c:	200020ec 	.word	0x200020ec
 8001530:	0800988c 	.word	0x0800988c
 8001534:	00000000 	.word	0x00000000

08001538 <CheckGPS>:

int checkGPSCnt = 0;

void CheckGPS(double nowLati, double nowLongi) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001542:	e9c7 2300 	strd	r2, r3, [r7]
	double busStopLati = atof(data[nowIdx].lati);
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <CheckGPS+0x100>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2232      	movs	r2, #50	; 0x32
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	3310      	adds	r3, #16
 8001552:	4a3a      	ldr	r2, [pc, #232]	; (800163c <CheckGPS+0x104>)
 8001554:	4413      	add	r3, r2
 8001556:	3302      	adds	r3, #2
 8001558:	4618      	mov	r0, r3
 800155a:	f004 f879 	bl	8005650 <atof>
 800155e:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double busStopLongi = atof(data[nowIdx].longi);
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <CheckGPS+0x100>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2232      	movs	r2, #50	; 0x32
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	3320      	adds	r3, #32
 800156e:	4a33      	ldr	r2, [pc, #204]	; (800163c <CheckGPS+0x104>)
 8001570:	4413      	add	r3, r2
 8001572:	3302      	adds	r3, #2
 8001574:	4618      	mov	r0, r3
 8001576:	f004 f86b 	bl	8005650 <atof>
 800157a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	//printf("La : %f, La1 : %f\r\n", busStopLati - 0.00009, busStopLati + 0.00009);
	//printf("NowLa : %f, NowLo : %f\r\n", nowLati, nowLongi);
	//printf("First : %d\r\n", nowLati >= (busStopLati - 0.00009)
	//		&& nowLati <= (busStopLati + 0.00009));
	if (nowLati >= (busStopLati - 0.00009)
 800157e:	a328      	add	r3, pc, #160	; (adr r3, 8001620 <CheckGPS+0xe8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001588:	f7fe fdf8 	bl	800017c <__aeabi_dsub>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7ff fa30 	bl	80009f8 <__aeabi_dcmpge>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <CheckGPS+0x68>
				&& nowLongi <= (busStopLongi + 0.00012)) {
			checkGPSCnt++;
			printf("Check!!!!!!!!\r\b");
		}
	}
}
 800159e:	e03a      	b.n	8001616 <CheckGPS+0xde>
			&& nowLati <= (busStopLati + 0.00009)) {
 80015a0:	a31f      	add	r3, pc, #124	; (adr r3, 8001620 <CheckGPS+0xe8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015aa:	f7fe fde9 	bl	8000180 <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b6:	f7ff fa15 	bl	80009e4 <__aeabi_dcmple>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <CheckGPS+0x8a>
}
 80015c0:	e029      	b.n	8001616 <CheckGPS+0xde>
		if (nowLongi >= (busStopLongi - 0.00011)
 80015c2:	a319      	add	r3, pc, #100	; (adr r3, 8001628 <CheckGPS+0xf0>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015cc:	f7fe fdd6 	bl	800017c <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d8:	f7ff fa0e 	bl	80009f8 <__aeabi_dcmpge>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <CheckGPS+0xac>
}
 80015e2:	e018      	b.n	8001616 <CheckGPS+0xde>
				&& nowLongi <= (busStopLongi + 0.00012)) {
 80015e4:	a312      	add	r3, pc, #72	; (adr r3, 8001630 <CheckGPS+0xf8>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ee:	f7fe fdc7 	bl	8000180 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015fa:	f7ff f9f3 	bl	80009e4 <__aeabi_dcmple>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <CheckGPS+0xce>
}
 8001604:	e007      	b.n	8001616 <CheckGPS+0xde>
			checkGPSCnt++;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <CheckGPS+0x108>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <CheckGPS+0x108>)
 800160e:	6013      	str	r3, [r2, #0]
			printf("Check!!!!!!!!\r\b");
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <CheckGPS+0x10c>)
 8001612:	f005 fb61 	bl	8006cd8 <iprintf>
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	39ffd60f 	.word	0x39ffd60f
 8001624:	3f1797cc 	.word	0x3f1797cc
 8001628:	9c38b04b 	.word	0x9c38b04b
 800162c:	3f1cd5f9 	.word	0x3f1cd5f9
 8001630:	4d551d69 	.word	0x4d551d69
 8001634:	3f1f7510 	.word	0x3f1f7510
 8001638:	200020d4 	.word	0x200020d4
 800163c:	20000388 	.word	0x20000388
 8001640:	200020fc 	.word	0x200020fc
 8001644:	080098b0 	.word	0x080098b0

08001648 <SetMode>:
uint8_t LoRaRxBuffer[LoRa_RX_BUFFER_SIZE]; // 수신 데이터를 저장할 버퍼
volatile uint8_t LoRaRxEnd = 0; // 데이터 수신 완료 플래그
uint8_t LoRaRxData[2]; // 수신 데이터를 저장할 버퍼
uint8_t LoRaLen = 0;

void SetMode(uint8_t mode) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d837      	bhi.n	80016c8 <SetMode+0x80>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <SetMode+0x18>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	08001687 	.word	0x08001687
 8001668:	0800169d 	.word	0x0800169d
 800166c:	080016b3 	.word	0x080016b3
	case 0:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2101      	movs	r1, #1
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <SetMode+0x88>)
 8001676:	f001 fd7a 	bl	800316e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2102      	movs	r1, #2
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <SetMode+0x88>)
 8001680:	f001 fd75 	bl	800316e <HAL_GPIO_WritePin>
		break;
 8001684:	e020      	b.n	80016c8 <SetMode+0x80>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	2101      	movs	r1, #1
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <SetMode+0x88>)
 800168c:	f001 fd6f 	bl	800316e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	480e      	ldr	r0, [pc, #56]	; (80016d0 <SetMode+0x88>)
 8001696:	f001 fd6a 	bl	800316e <HAL_GPIO_WritePin>
		break;
 800169a:	e015      	b.n	80016c8 <SetMode+0x80>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2101      	movs	r1, #1
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <SetMode+0x88>)
 80016a2:	f001 fd64 	bl	800316e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2102      	movs	r1, #2
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <SetMode+0x88>)
 80016ac:	f001 fd5f 	bl	800316e <HAL_GPIO_WritePin>
		break;
 80016b0:	e00a      	b.n	80016c8 <SetMode+0x80>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2101      	movs	r1, #1
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <SetMode+0x88>)
 80016b8:	f001 fd59 	bl	800316e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <SetMode+0x88>)
 80016c2:	f001 fd54 	bl	800316e <HAL_GPIO_WritePin>
		break;
 80016c6:	bf00      	nop
	}
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010800 	.word	0x40010800

080016d4 <LoRa_SendData>:

void LoRa_SendData(uint8_t *data, uint16_t length) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
	// AUX 핀이 HIGH 상태인지 확인하여 모듈이 준비되었는지 확인
	while (HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET)
 80016e0:	bf00      	nop
 80016e2:	2110      	movs	r1, #16
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <LoRa_SendData+0x34>)
 80016e6:	f001 fd2b 	bl	8003140 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f8      	beq.n	80016e2 <LoRa_SendData+0xe>
		;

	// 데이터 송신
	HAL_UART_Transmit(&huart2, data, length, HAL_MAX_DELAY);
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <LoRa_SendData+0x38>)
 80016fa:	f002 ff93 	bl	8004624 <HAL_UART_Transmit>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010800 	.word	0x40010800
 800170c:	200002b4 	.word	0x200002b4

08001710 <_write>:
uint8_t nmeaBuffer[RX3_BUFFER_SIZE];
uint8_t dataReceived = 0;

uint8_t modeFlag = 0;

int _write(int file, unsigned char *p, int len) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_write+0x5c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b29a      	uxth	r2, r3
 8001728:	230a      	movs	r3, #10
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <_write+0x60>)
 800172e:	f002 ff79 	bl	8004624 <HAL_UART_Transmit>
 8001732:	e016      	b.n	8001762 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <_write+0x5c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	b29a      	uxth	r2, r3
 8001740:	230a      	movs	r3, #10
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <_write+0x64>)
 8001746:	f002 ff6d 	bl	8004624 <HAL_UART_Transmit>
 800174a:	e00a      	b.n	8001762 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <_write+0x5c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d106      	bne.n	8001762 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	b29a      	uxth	r2, r3
 8001758:	230a      	movs	r3, #10
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <_write+0x68>)
 800175e:	f002 ff61 	bl	8004624 <HAL_UART_Transmit>
	}
	return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20002147 	.word	0x20002147
 8001770:	2000026c 	.word	0x2000026c
 8001774:	200002b4 	.word	0x200002b4
 8001778:	200002fc 	.word	0x200002fc

0800177c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001782:	f000 ff23 	bl	80025cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001786:	f000 f9df 	bl	8001b48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800178a:	f000 fae7 	bl	8001d5c <MX_GPIO_Init>
	MX_DMA_Init();
 800178e:	f000 fac7 	bl	8001d20 <MX_DMA_Init>
	MX_I2C1_Init();
 8001792:	f000 fa19 	bl	8001bc8 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001796:	f000 fa45 	bl	8001c24 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800179a:	f000 fa6d 	bl	8001c78 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800179e:	f000 fa95 	bl	8001ccc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	49a6      	ldr	r1, [pc, #664]	; (8001a40 <main+0x2c4>)
 80017a6:	48a7      	ldr	r0, [pc, #668]	; (8001a44 <main+0x2c8>)
 80017a8:	f002 ffbf 	bl	800472a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, LoRaRxData, 1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	49a6      	ldr	r1, [pc, #664]	; (8001a48 <main+0x2cc>)
 80017b0:	48a6      	ldr	r0, [pc, #664]	; (8001a4c <main+0x2d0>)
 80017b2:	f002 ffba 	bl	800472a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rxBuffer, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	49a5      	ldr	r1, [pc, #660]	; (8001a50 <main+0x2d4>)
 80017ba:	48a6      	ldr	r0, [pc, #664]	; (8001a54 <main+0x2d8>)
 80017bc:	f002 ffb5 	bl	800472a <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 80017c0:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <main+0x2dc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6898      	ldr	r0, [r3, #8]
 80017c6:	2300      	movs	r3, #0
 80017c8:	2202      	movs	r2, #2
 80017ca:	2100      	movs	r1, #0
 80017cc:	f005 faf2 	bl	8006db4 <setvbuf>
	//	printf("HELL WORLD\r\n");
	LCD_Init(LCD_ADDR);
 80017d0:	204e      	movs	r0, #78	; 0x4e
 80017d2:	f7ff fa35 	bl	8000c40 <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 80017d6:	4aa1      	ldr	r2, [pc, #644]	; (8001a5c <main+0x2e0>)
 80017d8:	2100      	movs	r1, #0
 80017da:	204e      	movs	r0, #78	; 0x4e
 80017dc:	f7ff fa67 	bl	8000cae <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 80017e0:	4a9f      	ldr	r2, [pc, #636]	; (8001a60 <main+0x2e4>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	204e      	movs	r0, #78	; 0x4e
 80017e6:	f7ff fa62 	bl	8000cae <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 80017ea:	4a9e      	ldr	r2, [pc, #632]	; (8001a64 <main+0x2e8>)
 80017ec:	2102      	movs	r1, #2
 80017ee:	204e      	movs	r0, #78	; 0x4e
 80017f0:	f7ff fa5d 	bl	8000cae <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 80017f4:	4a9c      	ldr	r2, [pc, #624]	; (8001a68 <main+0x2ec>)
 80017f6:	2103      	movs	r1, #3
 80017f8:	204e      	movs	r0, #78	; 0x4e
 80017fa:	f7ff fa58 	bl	8000cae <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 80017fe:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <main+0x2f0>)
 8001800:	2104      	movs	r1, #4
 8001802:	204e      	movs	r0, #78	; 0x4e
 8001804:	f7ff fa53 	bl	8000cae <LCD_SET_CGRAM>
//		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
//	}
//	LCD_SendData(LCD_ADDR, 1);

	//flash
	uint32_t ModeFlashAddress = 0x0800CB00;  // ???��?�� ?��?��?�� 메모�?? 주소
 8001808:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <main+0x2f4>)
 800180a:	60bb      	str	r3, [r7, #8]
	uint32_t DataFlashAddress = 0x0800CC00; // ???��?�� ?��?��?�� 메모�?? 주소
 800180c:	4b99      	ldr	r3, [pc, #612]	; (8001a74 <main+0x2f8>)
 800180e:	61fb      	str	r3, [r7, #28]
	uint16_t InfoModeFlag = Flash_Read(ModeFlashAddress);
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f7ff fcd1 	bl	80011b8 <Flash_Read>
 8001816:	4603      	mov	r3, r0
 8001818:	837b      	strh	r3, [r7, #26]
//	Flash_Erase_Page(0x0800DC00);
//	Flash_Erase_Page(0x0800E000);
//	Flash_Erase_Page(0x0800E400);

	//printf("ModeFlag:%d", InfoModeFlag);
	if (InfoModeFlag >= 1) {
 800181a:	8b7b      	ldrh	r3, [r7, #26]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <main+0xcc>
		DataFlashAddress = CallData(DataFlashAddress);
 8001820:	69f8      	ldr	r0, [r7, #28]
 8001822:	f7ff fd6b 	bl	80012fc <CallData>
 8001826:	61f8      	str	r0, [r7, #28]
		strncpy(data[0].busStopID, "44444", sizeof(data[0].busStopID) - 1);
 8001828:	2207      	movs	r2, #7
 800182a:	4993      	ldr	r1, [pc, #588]	; (8001a78 <main+0x2fc>)
 800182c:	4893      	ldr	r0, [pc, #588]	; (8001a7c <main+0x300>)
 800182e:	f005 fc61 	bl	80070f4 <strncpy>
		strncpy(data[0].lati, "36.124406", sizeof(data[0].lati) - 1);
 8001832:	220f      	movs	r2, #15
 8001834:	4992      	ldr	r1, [pc, #584]	; (8001a80 <main+0x304>)
 8001836:	4893      	ldr	r0, [pc, #588]	; (8001a84 <main+0x308>)
 8001838:	f005 fc5c 	bl	80070f4 <strncpy>
		strncpy(data[0].longi, "128.095744", sizeof(data[0].longi) - 1);
 800183c:	220f      	movs	r2, #15
 800183e:	4992      	ldr	r1, [pc, #584]	; (8001a88 <main+0x30c>)
 8001840:	4892      	ldr	r0, [pc, #584]	; (8001a8c <main+0x310>)
 8001842:	f005 fc57 	bl	80070f4 <strncpy>
 8001846:	e019      	b.n	800187c <main+0x100>

		//LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
	} else if (InfoModeFlag == 0) {
 8001848:	8b7b      	ldrh	r3, [r7, #26]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <main+0xec>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 800184e:	2101      	movs	r1, #1
 8001850:	204e      	movs	r0, #78	; 0x4e
 8001852:	f7ff f9d1 	bl	8000bf8 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	204e      	movs	r0, #78	; 0x4e
 800185a:	f7ff f9cd 	bl	8000bf8 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "InputMode");
 800185e:	498c      	ldr	r1, [pc, #560]	; (8001a90 <main+0x314>)
 8001860:	204e      	movs	r0, #78	; 0x4e
 8001862:	f7ff fa0a 	bl	8000c7a <LCD_SendString>
 8001866:	e009      	b.n	800187c <main+0x100>
	} else {
		InfoModeFlag = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	837b      	strh	r3, [r7, #26]
		Flash_Unlock();
 800186c:	f7ff fb02 	bl	8000e74 <Flash_Unlock>
		Flash_Write(ModeFlashAddress, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f7ff fb1e 	bl	8000eb4 <Flash_Write>
		Flash_Lock();
 8001878:	f7ff fb0e 	bl	8000e98 <Flash_Lock>
	}

	HAL_UART_Receive_DMA(&huart3, rxBuffer, RX3_BUFFER_SIZE);
 800187c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001880:	4973      	ldr	r1, [pc, #460]	; (8001a50 <main+0x2d4>)
 8001882:	4874      	ldr	r0, [pc, #464]	; (8001a54 <main+0x2d8>)
 8001884:	f002 ff76 	bl	8004774 <HAL_UART_Receive_DMA>

	//LoRa ================================================================
	SetMode(0);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fedd 	bl	8001648 <SetMode>



	//FW===================================================================
	modeFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 800188e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001892:	4880      	ldr	r0, [pc, #512]	; (8001a94 <main+0x318>)
 8001894:	f001 fc54 	bl	8003140 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <main+0x31c>)
 800189e:	701a      	strb	r2, [r3, #0]

	GPSTick = HAL_GetTick();
 80018a0:	f000 feec 	bl	800267c <HAL_GetTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a7d      	ldr	r2, [pc, #500]	; (8001a9c <main+0x320>)
 80018a8:	6013      	str	r3, [r2, #0]
	LoRaTick = HAL_GetTick();
 80018aa:	f000 fee7 	bl	800267c <HAL_GetTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a7b      	ldr	r2, [pc, #492]	; (8001aa0 <main+0x324>)
 80018b2:	6013      	str	r3, [r2, #0]
//		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); //BUZZER
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED

		if (!modeFlag) { //Local Mode
 80018b4:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <main+0x31c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f040 80ae 	bne.w	8001a1a <main+0x29e>
			if (InfoModeFlag >= 1){
 80018be:	8b7b      	ldrh	r3, [r7, #26]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <main+0x14c>
				updateLCD();
 80018c4:	f7ff fa84 	bl	8000dd0 <updateLCD>
			}
			while (1) {
				if (UART1_Rx_End) {
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <main+0x328>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d054      	beq.n	800197a <main+0x1fe>
					//printf("Echo\r\n");
					if (!strcmp(UART1_Rx_Buffer, "Input")) {
 80018d0:	4975      	ldr	r1, [pc, #468]	; (8001aa8 <main+0x32c>)
 80018d2:	4876      	ldr	r0, [pc, #472]	; (8001aac <main+0x330>)
 80018d4:	f7fe fc3c 	bl	8000150 <strcmp>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10b      	bne.n	80018f6 <main+0x17a>
						Flash_Erase_Page(ModeFlashAddress);
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f7ff fc76 	bl	80011d0 <Flash_Erase_Page>
						Flash_Unlock();
 80018e4:	f7ff fac6 	bl	8000e74 <Flash_Unlock>
						Flash_Write(ModeFlashAddress, (uint8_t) 0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f7ff fae2 	bl	8000eb4 <Flash_Write>
						Flash_Lock();
 80018f0:	f7ff fad2 	bl	8000e98 <Flash_Lock>
 80018f4:	e02d      	b.n	8001952 <main+0x1d6>
					} else if (!strcmp(UART1_Rx_Buffer, "OutPut")) {
 80018f6:	496e      	ldr	r1, [pc, #440]	; (8001ab0 <main+0x334>)
 80018f8:	486c      	ldr	r0, [pc, #432]	; (8001aac <main+0x330>)
 80018fa:	f7fe fc29 	bl	8000150 <strcmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10b      	bne.n	800191c <main+0x1a0>
						Flash_Erase_Page(ModeFlashAddress);
 8001904:	68b8      	ldr	r0, [r7, #8]
 8001906:	f7ff fc63 	bl	80011d0 <Flash_Erase_Page>
						Flash_Unlock();
 800190a:	f7ff fab3 	bl	8000e74 <Flash_Unlock>
						Flash_Write(ModeFlashAddress, 1);
 800190e:	2101      	movs	r1, #1
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f7ff facf 	bl	8000eb4 <Flash_Write>
						Flash_Lock();
 8001916:	f7ff fabf 	bl	8000e98 <Flash_Lock>
 800191a:	e01a      	b.n	8001952 <main+0x1d6>
					} else if ((!strncmp(UART1_Rx_Buffer, "Data", 4)
 800191c:	2204      	movs	r2, #4
 800191e:	4965      	ldr	r1, [pc, #404]	; (8001ab4 <main+0x338>)
 8001920:	4862      	ldr	r0, [pc, #392]	; (8001aac <main+0x330>)
 8001922:	f005 fbd5 	bl	80070d0 <strncmp>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <main+0x1c0>
							|| !strncmp(UART1_Rx_Buffer, "data", 4))
 800192c:	2204      	movs	r2, #4
 800192e:	4962      	ldr	r1, [pc, #392]	; (8001ab8 <main+0x33c>)
 8001930:	485e      	ldr	r0, [pc, #376]	; (8001aac <main+0x330>)
 8001932:	f005 fbcd 	bl	80070d0 <strncmp>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <main+0x1d6>
							&& InfoModeFlag == 0) {
 800193c:	8b7b      	ldrh	r3, [r7, #26]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <main+0x1d6>
						DataFlashAddress = Flash_Write_Data(DataFlashAddress,
 8001942:	495a      	ldr	r1, [pc, #360]	; (8001aac <main+0x330>)
 8001944:	69f8      	ldr	r0, [r7, #28]
 8001946:	f7ff fb17 	bl	8000f78 <Flash_Write_Data>
 800194a:	61f8      	str	r0, [r7, #28]
								UART1_Rx_Buffer);
						//printf("Data\r\n");
						printf("N\r\n");
 800194c:	485b      	ldr	r0, [pc, #364]	; (8001abc <main+0x340>)
 800194e:	f005 fa29 	bl	8006da4 <puts>
					}
					//HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
					for (int i = 0; i < 50; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e007      	b.n	8001968 <main+0x1ec>
						UART1_Rx_Buffer[i] = '\0';
 8001958:	4a54      	ldr	r2, [pc, #336]	; (8001aac <main+0x330>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4413      	add	r3, r2
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b31      	cmp	r3, #49	; 0x31
 800196c:	ddf4      	ble.n	8001958 <main+0x1dc>
					}
					UART1_Len = 0;
 800196e:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <main+0x344>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <main+0x328>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
				}

				if (InfoModeFlag) { //사용모드일때
 800197a:	8b7b      	ldrh	r3, [r7, #26]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0a3      	beq.n	80018c8 <main+0x14c>
					if (dataReceived) {
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <main+0x348>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <main+0x21c>
						parseGPSData(rxBuffer, RX3_BUFFER_SIZE);
 8001988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198c:	4830      	ldr	r0, [pc, #192]	; (8001a50 <main+0x2d4>)
 800198e:	f7ff fd69 	bl	8001464 <parseGPSData>
						dataReceived = 0;
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <main+0x348>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
					}
					if (LoRaRxEnd) {
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <main+0x34c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <main+0x256>
						printf("LoRa : %s\r\n", LoRaRxBuffer);
 80019a2:	494a      	ldr	r1, [pc, #296]	; (8001acc <main+0x350>)
 80019a4:	484a      	ldr	r0, [pc, #296]	; (8001ad0 <main+0x354>)
 80019a6:	f005 f997 	bl	8006cd8 <iprintf>
						for (int i = 0; i < LoRa_RX_BUFFER_SIZE; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e007      	b.n	80019c0 <main+0x244>
							LoRaRxBuffer[i] = '\0';
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <main+0x350>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4413      	add	r3, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < LoRa_RX_BUFFER_SIZE; i++) {
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3301      	adds	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b3f      	cmp	r3, #63	; 0x3f
 80019c4:	ddf4      	ble.n	80019b0 <main+0x234>
						}
						LoRaLen = 0;
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <main+0x358>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
						LoRaRxEnd = 0; // 수신 완료 플래그 리셋
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <main+0x34c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

					}
					if (HAL_GetTick() - GPSTick >= 2000) {
 80019d2:	f000 fe53 	bl	800267c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <main+0x320>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019e2:	f4ff af71 	bcc.w	80018c8 <main+0x14c>
						GPSTick = HAL_GetTick();
 80019e6:	f000 fe49 	bl	800267c <HAL_GetTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <main+0x320>)
 80019ee:	6013      	str	r3, [r2, #0]
						printf("CNT : %d\r\n", checkGPSCnt);
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <main+0x35c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4839      	ldr	r0, [pc, #228]	; (8001adc <main+0x360>)
 80019f8:	f005 f96e 	bl	8006cd8 <iprintf>
						if (checkGPSCnt >= 4) {
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <main+0x35c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	dd06      	ble.n	8001a12 <main+0x296>
							nowIdx++;
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <main+0x364>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <main+0x364>)
 8001a0c:	6013      	str	r3, [r2, #0]
							updateLCD();
 8001a0e:	f7ff f9df 	bl	8000dd0 <updateLCD>
						}
						checkGPSCnt = 0;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <main+0x35c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
				if (UART1_Rx_End) {
 8001a18:	e756      	b.n	80018c8 <main+0x14c>
				}
			}
		}

		else{ //Remote Mode
			uint8_t data[] = {0x02, 'h', 'a', 'h', 'a', 0x03};
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <main+0x368>)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a22:	6018      	str	r0, [r3, #0]
 8001a24:	3304      	adds	r3, #4
 8001a26:	8019      	strh	r1, [r3, #0]
			while(1){
				if (UART1_Rx_End) {
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <main+0x328>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d06e      	beq.n	8001b0e <main+0x392>
					printf("Re:%s!!!!\r\n", UART1_Rx_Buffer);
 8001a30:	491e      	ldr	r1, [pc, #120]	; (8001aac <main+0x330>)
 8001a32:	482d      	ldr	r0, [pc, #180]	; (8001ae8 <main+0x36c>)
 8001a34:	f005 f950 	bl	8006cd8 <iprintf>
					for (int i = 0; i < 50; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e05e      	b.n	8001afc <main+0x380>
 8001a3e:	bf00      	nop
 8001a40:	20002148 	.word	0x20002148
 8001a44:	2000026c 	.word	0x2000026c
 8001a48:	20002144 	.word	0x20002144
 8001a4c:	200002b4 	.word	0x200002b4
 8001a50:	20002180 	.word	0x20002180
 8001a54:	200002fc 	.word	0x200002fc
 8001a58:	200001f8 	.word	0x200001f8
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000010 	.word	0x20000010
 8001a68:	20000018 	.word	0x20000018
 8001a6c:	20000020 	.word	0x20000020
 8001a70:	0800cb00 	.word	0x0800cb00
 8001a74:	0800cc00 	.word	0x0800cc00
 8001a78:	080098c0 	.word	0x080098c0
 8001a7c:	20000392 	.word	0x20000392
 8001a80:	080098c8 	.word	0x080098c8
 8001a84:	2000039a 	.word	0x2000039a
 8001a88:	080098d4 	.word	0x080098d4
 8001a8c:	200003aa 	.word	0x200003aa
 8001a90:	080098e0 	.word	0x080098e0
 8001a94:	40010800 	.word	0x40010800
 8001a98:	20002281 	.word	0x20002281
 8001a9c:	20002284 	.word	0x20002284
 8001aa0:	20002288 	.word	0x20002288
 8001aa4:	2000217f 	.word	0x2000217f
 8001aa8:	080098ec 	.word	0x080098ec
 8001aac:	2000214c 	.word	0x2000214c
 8001ab0:	080098f4 	.word	0x080098f4
 8001ab4:	080098fc 	.word	0x080098fc
 8001ab8:	08009904 	.word	0x08009904
 8001abc:	0800990c 	.word	0x0800990c
 8001ac0:	2000217e 	.word	0x2000217e
 8001ac4:	20002280 	.word	0x20002280
 8001ac8:	20002140 	.word	0x20002140
 8001acc:	20002100 	.word	0x20002100
 8001ad0:	08009910 	.word	0x08009910
 8001ad4:	20002146 	.word	0x20002146
 8001ad8:	200020fc 	.word	0x200020fc
 8001adc:	0800991c 	.word	0x0800991c
 8001ae0:	200020d4 	.word	0x200020d4
 8001ae4:	08009934 	.word	0x08009934
 8001ae8:	08009928 	.word	0x08009928
						UART1_Rx_Buffer[i] = '\0';
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <main+0x3bc>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b31      	cmp	r3, #49	; 0x31
 8001b00:	ddf4      	ble.n	8001aec <main+0x370>
					}
					UART1_Len = 0;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <main+0x3c0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <main+0x3c4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GetTick() - LoRaTick >= 3000) {
 8001b0e:	f000 fdb5 	bl	800267c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <main+0x3c8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d982      	bls.n	8001a28 <main+0x2ac>
					LoRaTick = HAL_GetTick();
 8001b22:	f000 fdab 	bl	800267c <HAL_GetTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <main+0x3c8>)
 8001b2a:	6013      	str	r3, [r2, #0]
					LoRa_SendData(data, sizeof(data) - 1);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2105      	movs	r1, #5
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fdcf 	bl	80016d4 <LoRa_SendData>
				if (UART1_Rx_End) {
 8001b36:	e777      	b.n	8001a28 <main+0x2ac>
 8001b38:	2000214c 	.word	0x2000214c
 8001b3c:	2000217e 	.word	0x2000217e
 8001b40:	2000217f 	.word	0x2000217f
 8001b44:	20002288 	.word	0x20002288

08001b48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b090      	sub	sp, #64	; 0x40
 8001b4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	2228      	movs	r2, #40	; 0x28
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 fab2 	bl	80070c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b72:	2310      	movs	r3, #16
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001b7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 f8eb 	bl	8003d64 <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x50>
		Error_Handler();
 8001b94:	f000 fa66 	bl	8002064 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b98:	230f      	movs	r3, #15
 8001b9a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fb59 	bl	8004268 <HAL_RCC_ClockConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x78>
		Error_Handler();
 8001bbc:	f000 fa52 	bl	8002064 <Error_Handler>
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	3740      	adds	r7, #64	; 0x40
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <MX_I2C1_Init+0x54>)
 8001bd0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bd4:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <MX_I2C1_Init+0x58>)
 8001bd6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bea:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001c06:	f001 fae3 	bl	80031d0 <HAL_I2C_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001c10:	f000 fa28 	bl	8002064 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000218 	.word	0x20000218
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	000186a0 	.word	0x000186a0

08001c24 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <MX_USART1_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c5c:	f002 fc92 	bl	8004584 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001c66:	f000 f9fd 	bl	8002064 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000026c 	.word	0x2000026c
 8001c74:	40013800 	.word	0x40013800

08001c78 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_USART2_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c88:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f002 fc68 	bl	8004584 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001cba:	f000 f9d3 	bl	8002064 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200002b4 	.word	0x200002b4
 8001cc8:	40004400 	.word	0x40004400

08001ccc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MX_USART3_UART_Init+0x50>)
 8001cd4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_USART3_UART_Init+0x4c>)
 8001d04:	f002 fc3e 	bl	8004584 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001d0e:	f000 f9a9 	bl	8002064 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002fc 	.word	0x200002fc
 8001d1c:	40004800 	.word	0x40004800

08001d20 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_DMA_Init+0x38>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <MX_DMA_Init+0x38>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6153      	str	r3, [r2, #20]
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_DMA_Init+0x38>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	200d      	movs	r0, #13
 8001d44:	f000 fd9f 	bl	8002886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d48:	200d      	movs	r0, #13
 8001d4a:	f000 fdb8 	bl	80028be <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin,
 8001da0:	2200      	movs	r2, #0
 8001da2:	f641 0103 	movw	r1, #6147	; 0x1803
 8001da6:	483b      	ldr	r0, [pc, #236]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001da8:	f001 f9e1 	bl	800316e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8001db2:	4839      	ldr	r0, [pc, #228]	; (8001e98 <MX_GPIO_Init+0x13c>)
 8001db4:	f001 f9db 	bl	800316e <HAL_GPIO_WritePin>
	STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
	GPIO_InitStruct.Pin = LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin;
 8001db8:	f641 0303 	movw	r3, #6147	; 0x1803
 8001dbc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4830      	ldr	r0, [pc, #192]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001dd2:	f001 f831 	bl	8002e38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_AUX_Pin */
	GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	4619      	mov	r1, r3
 8001de8:	482a      	ldr	r0, [pc, #168]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001dea:	f001 f825 	bl	8002e38 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8001dee:	23e0      	movs	r3, #224	; 0xe0
 8001df0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <MX_GPIO_Init+0x140>)
 8001df4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4824      	ldr	r0, [pc, #144]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001e02:	f001 f819 	bl	8002e38 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN5_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin | BTN5_Pin;
 8001e06:	2303      	movs	r3, #3
 8001e08:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <MX_GPIO_Init+0x140>)
 8001e0c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	481f      	ldr	r0, [pc, #124]	; (8001e98 <MX_GPIO_Init+0x13c>)
 8001e1a:	f001 f80d 	bl	8002e38 <HAL_GPIO_Init>

	/*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
	GPIO_InitStruct.Pin = STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin;
 8001e1e:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8001e22:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4619      	mov	r1, r3
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <MX_GPIO_Init+0x13c>)
 8001e38:	f000 fffe 	bl	8002e38 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_SLCT_Pin */
	GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8001e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4810      	ldr	r0, [pc, #64]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001e52:	f000 fff1 	bl	8002e38 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2006      	movs	r0, #6
 8001e5c:	f000 fd13 	bl	8002886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e60:	2006      	movs	r0, #6
 8001e62:	f000 fd2c 	bl	80028be <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2007      	movs	r0, #7
 8001e6c:	f000 fd0b 	bl	8002886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e70:	2007      	movs	r0, #7
 8001e72:	f000 fd24 	bl	80028be <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2017      	movs	r0, #23
 8001e7c:	f000 fd03 	bl	8002886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e80:	2017      	movs	r0, #23
 8001e82:	f000 fd1c 	bl	80028be <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	10110000 	.word	0x10110000

08001ea0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d103      	bne.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x18>
		printf("0x020,10x03\r\n");
 8001eb0:	4811      	ldr	r0, [pc, #68]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001eb2:	f004 ff77 	bl	8006da4 <puts>
	} else if (GPIO_Pin == GPIO_PIN_0) {
		printf("0x023,10x03\r\n");
	} else if (GPIO_Pin == GPIO_PIN_1) {
		printf("0x024,10x03\r\n ");
	}
}
 8001eb6:	e01a      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d103      	bne.n	8001ec6 <HAL_GPIO_EXTI_Callback+0x26>
		printf("0x021,10x03\r\n");
 8001ebe:	480f      	ldr	r0, [pc, #60]	; (8001efc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ec0:	f004 ff70 	bl	8006da4 <puts>
}
 8001ec4:	e013      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d103      	bne.n	8001ed4 <HAL_GPIO_EXTI_Callback+0x34>
		printf("0x022,10x03\r\n");
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ece:	f004 ff69 	bl	8006da4 <puts>
}
 8001ed2:	e00c      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d103      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x42>
		printf("0x023,10x03\r\n");
 8001eda:	480a      	ldr	r0, [pc, #40]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x64>)
 8001edc:	f004 ff62 	bl	8006da4 <puts>
}
 8001ee0:	e005      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d102      	bne.n	8001eee <HAL_GPIO_EXTI_Callback+0x4e>
		printf("0x024,10x03\r\n ");
 8001ee8:	4807      	ldr	r0, [pc, #28]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x68>)
 8001eea:	f004 fef5 	bl	8006cd8 <iprintf>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	0800993c 	.word	0x0800993c
 8001efc:	0800994c 	.word	0x0800994c
 8001f00:	0800995c 	.word	0x0800995c
 8001f04:	0800996c 	.word	0x0800996c
 8001f08:	0800997c 	.word	0x0800997c

08001f0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	static uint16_t index = 0;
	static uint8_t LoRaChk = 0;
	static uint16_t LoRaIdx = 0;
	if (huart->Instance == USART1) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_UART_RxCpltCallback+0x118>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d138      	bne.n	8001f90 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8001f1e:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_UART_RxCpltCallback+0x11c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_UART_RxCpltCallback+0x120>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_UART_RxCpltCallback+0x26>
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d00c      	beq.n	8001f4a <HAL_UART_RxCpltCallback+0x3e>
 8001f30:	e024      	b.n	8001f7c <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_UART_RxCpltCallback+0x124>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d103      	bne.n	8001f42 <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_UART_RxCpltCallback+0x120>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8001f40:	e020      	b.n	8001f84 <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_UART_RxCpltCallback+0x120>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
			break;
 8001f48:	e01c      	b.n	8001f84 <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_UART_RxCpltCallback+0x124>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d106      	bne.n	8001f60 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_UART_RxCpltCallback+0x11c>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_UART_RxCpltCallback+0x120>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 8001f5e:	e011      	b.n	8001f84 <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_UART_RxCpltCallback+0x128>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_UART_RxCpltCallback+0x124>)
 8001f68:	7819      	ldrb	r1, [r3, #0]
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_UART_RxCpltCallback+0x12c>)
 8001f6c:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_UART_RxCpltCallback+0x128>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_UART_RxCpltCallback+0x128>)
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e003      	b.n	8001f84 <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_UART_RxCpltCallback+0x120>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
			break;
 8001f82:	bf00      	nop
		}
		//HAL_UART_Transmit(&huart1, UART1_Rx_Data, 1, 10);
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	492a      	ldr	r1, [pc, #168]	; (8002030 <HAL_UART_RxCpltCallback+0x124>)
 8001f88:	482c      	ldr	r0, [pc, #176]	; (800203c <HAL_UART_RxCpltCallback+0x130>)
 8001f8a:	f002 fbce 	bl	800472a <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 1);
	} else if (huart->Instance == USART3) {
		dataReceived = 1;
	}
}
 8001f8e:	e045      	b.n	800201c <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART2) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <HAL_UART_RxCpltCallback+0x134>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d138      	bne.n	800200c <HAL_UART_RxCpltCallback+0x100>
		LoRaRxEnd = 0;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_UART_RxCpltCallback+0x138>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
		switch (LoRaChk) {
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_UART_RxCpltCallback+0x13c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_UART_RxCpltCallback+0xa2>
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d00c      	beq.n	8001fc6 <HAL_UART_RxCpltCallback+0xba>
 8001fac:	e024      	b.n	8001ff8 <HAL_UART_RxCpltCallback+0xec>
			if (LoRaRxData[0] == 0x02) {
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_UART_RxCpltCallback+0x140>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d103      	bne.n	8001fbe <HAL_UART_RxCpltCallback+0xb2>
				LoRaChk = 1;
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_UART_RxCpltCallback+0x13c>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
			break;
 8001fbc:	e020      	b.n	8002000 <HAL_UART_RxCpltCallback+0xf4>
				LoRaChk = 0;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_UART_RxCpltCallback+0x13c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
			break;
 8001fc4:	e01c      	b.n	8002000 <HAL_UART_RxCpltCallback+0xf4>
			if (LoRaRxData[0] == 0x03) {
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_UART_RxCpltCallback+0x140>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_RxCpltCallback+0xd0>
				LoRaRxEnd = 1;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_UART_RxCpltCallback+0x138>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
				LoRaChk = 0;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <HAL_UART_RxCpltCallback+0x13c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
			break;
 8001fda:	e011      	b.n	8002000 <HAL_UART_RxCpltCallback+0xf4>
				LoRaRxBuffer[UART1_Len] = LoRaRxData[0];
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_UART_RxCpltCallback+0x128>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_UART_RxCpltCallback+0x140>)
 8001fe4:	7819      	ldrb	r1, [r3, #0]
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_UART_RxCpltCallback+0x144>)
 8001fe8:	5499      	strb	r1, [r3, r2]
				LoRaLen++;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_UART_RxCpltCallback+0x148>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_UART_RxCpltCallback+0x148>)
 8001ff4:	701a      	strb	r2, [r3, #0]
			break;
 8001ff6:	e003      	b.n	8002000 <HAL_UART_RxCpltCallback+0xf4>
			LoRaChk = 0;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_UART_RxCpltCallback+0x13c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			break;
 8001ffe:	bf00      	nop
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 1);
 8002000:	2201      	movs	r2, #1
 8002002:	4912      	ldr	r1, [pc, #72]	; (800204c <HAL_UART_RxCpltCallback+0x140>)
 8002004:	4814      	ldr	r0, [pc, #80]	; (8002058 <HAL_UART_RxCpltCallback+0x14c>)
 8002006:	f002 fb90 	bl	800472a <HAL_UART_Receive_IT>
}
 800200a:	e007      	b.n	800201c <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART3) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <HAL_UART_RxCpltCallback+0x150>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d102      	bne.n	800201c <HAL_UART_RxCpltCallback+0x110>
		dataReceived = 1;
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_UART_RxCpltCallback+0x154>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013800 	.word	0x40013800
 8002028:	2000217f 	.word	0x2000217f
 800202c:	2000228c 	.word	0x2000228c
 8002030:	20002148 	.word	0x20002148
 8002034:	2000217e 	.word	0x2000217e
 8002038:	2000214c 	.word	0x2000214c
 800203c:	2000026c 	.word	0x2000026c
 8002040:	40004400 	.word	0x40004400
 8002044:	20002140 	.word	0x20002140
 8002048:	2000228d 	.word	0x2000228d
 800204c:	20002144 	.word	0x20002144
 8002050:	20002100 	.word	0x20002100
 8002054:	20002146 	.word	0x20002146
 8002058:	200002b4 	.word	0x200002b4
 800205c:	40004800 	.word	0x40004800
 8002060:	20002280 	.word	0x20002280

08002064 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>
	...

08002070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_MspInit+0x5c>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_MspInit+0x5c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6193      	str	r3, [r2, #24]
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_MspInit+0x5c>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x5c>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_MspInit+0x5c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_MspInit+0x5c>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_MspInit+0x60>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_MspInit+0x60>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000

080020d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_I2C_MspInit+0x70>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d123      	bne.n	800213c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_I2C_MspInit+0x74>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_I2C_MspInit+0x74>)
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_I2C_MspInit+0x74>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210c:	23c0      	movs	r3, #192	; 0xc0
 800210e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002110:	2312      	movs	r3, #18
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	4619      	mov	r1, r3
 800211e:	480b      	ldr	r0, [pc, #44]	; (800214c <HAL_I2C_MspInit+0x78>)
 8002120:	f000 fe8a 	bl	8002e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_I2C_MspInit+0x74>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_I2C_MspInit+0x74>)
 800212a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800212e:	61d3      	str	r3, [r2, #28]
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_I2C_MspInit+0x74>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40005400 	.word	0x40005400
 8002148:	40021000 	.word	0x40021000
 800214c:	40010c00 	.word	0x40010c00

08002150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a72      	ldr	r2, [pc, #456]	; (8002334 <HAL_UART_MspInit+0x1e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d13a      	bne.n	80021e6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002170:	4b71      	ldr	r3, [pc, #452]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a70      	ldr	r2, [pc, #448]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b6e      	ldr	r3, [pc, #440]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0320 	add.w	r3, r7, #32
 80021b2:	4619      	mov	r1, r3
 80021b4:	4861      	ldr	r0, [pc, #388]	; (800233c <HAL_UART_MspInit+0x1ec>)
 80021b6:	f000 fe3f 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	4619      	mov	r1, r3
 80021ce:	485b      	ldr	r0, [pc, #364]	; (800233c <HAL_UART_MspInit+0x1ec>)
 80021d0:	f000 fe32 	bl	8002e38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2025      	movs	r0, #37	; 0x25
 80021da:	f000 fb54 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021de:	2025      	movs	r0, #37	; 0x25
 80021e0:	f000 fb6d 	bl	80028be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021e4:	e0a2      	b.n	800232c <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_UART_MspInit+0x1f0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d138      	bne.n	8002262 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f0:	4b51      	ldr	r3, [pc, #324]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 80021f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b48      	ldr	r3, [pc, #288]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002220:	2304      	movs	r3, #4
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0320 	add.w	r3, r7, #32
 8002230:	4619      	mov	r1, r3
 8002232:	4842      	ldr	r0, [pc, #264]	; (800233c <HAL_UART_MspInit+0x1ec>)
 8002234:	f000 fe00 	bl	8002e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	4619      	mov	r1, r3
 800224a:	483c      	ldr	r0, [pc, #240]	; (800233c <HAL_UART_MspInit+0x1ec>)
 800224c:	f000 fdf4 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	2026      	movs	r0, #38	; 0x26
 8002256:	f000 fb16 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800225a:	2026      	movs	r0, #38	; 0x26
 800225c:	f000 fb2f 	bl	80028be <HAL_NVIC_EnableIRQ>
}
 8002260:	e064      	b.n	800232c <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a37      	ldr	r2, [pc, #220]	; (8002344 <HAL_UART_MspInit+0x1f4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d15f      	bne.n	800232c <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	4a31      	ldr	r2, [pc, #196]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002276:	61d3      	str	r3, [r2, #28]
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_UART_MspInit+0x1e8>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	4619      	mov	r1, r3
 80022b0:	4825      	ldr	r0, [pc, #148]	; (8002348 <HAL_UART_MspInit+0x1f8>)
 80022b2:	f000 fdc1 	bl	8002e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	4619      	mov	r1, r3
 80022ca:	481f      	ldr	r0, [pc, #124]	; (8002348 <HAL_UART_MspInit+0x1f8>)
 80022cc:	f000 fdb4 	bl	8002e38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_UART_MspInit+0x200>)
 80022d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022f6:	2220      	movs	r2, #32
 80022f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_UART_MspInit+0x1fc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002300:	4812      	ldr	r0, [pc, #72]	; (800234c <HAL_UART_MspInit+0x1fc>)
 8002302:	f000 faf7 	bl	80028f4 <HAL_DMA_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 800230c:	f7ff feaa 	bl	8002064 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_UART_MspInit+0x1fc>)
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c
 8002316:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_UART_MspInit+0x1fc>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2027      	movs	r0, #39	; 0x27
 8002322:	f000 fab0 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002326:	2027      	movs	r0, #39	; 0x27
 8002328:	f000 fac9 	bl	80028be <HAL_NVIC_EnableIRQ>
}
 800232c:	bf00      	nop
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40013800 	.word	0x40013800
 8002338:	40021000 	.word	0x40021000
 800233c:	40010800 	.word	0x40010800
 8002340:	40004400 	.word	0x40004400
 8002344:	40004800 	.word	0x40004800
 8002348:	40010c00 	.word	0x40010c00
 800234c:	20000344 	.word	0x20000344
 8002350:	40020030 	.word	0x40020030

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239a:	f000 f95d 	bl	8002658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 fefa 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f000 fef3 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Channel3_IRQHandler+0x10>)
 80023c6:	f000 fc03 	bl	8002bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000344 	.word	0x20000344

080023d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80023d8:	2020      	movs	r0, #32
 80023da:	f000 fee1 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80023de:	2040      	movs	r0, #64	; 0x40
 80023e0:	f000 fede 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 80023e4:	2080      	movs	r0, #128	; 0x80
 80023e6:	f000 fedb 	bl	80031a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <USART1_IRQHandler+0x10>)
 80023f6:	f002 f9e3 	bl	80047c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000026c 	.word	0x2000026c

08002404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <USART2_IRQHandler+0x10>)
 800240a:	f002 f9d9 	bl	80047c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200002b4 	.word	0x200002b4

08002418 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <USART3_IRQHandler+0x10>)
 800241e:	f002 f9cf 	bl	80047c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002fc 	.word	0x200002fc

0800242c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <_kill>:

int _kill(int pid, int sig)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002444:	f004 ff26 	bl	8007294 <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	2216      	movs	r2, #22
 800244c:	601a      	str	r2, [r3, #0]
  return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_exit>:

void _exit (int status)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002462:	f04f 31ff 	mov.w	r1, #4294967295
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffe7 	bl	800243a <_kill>
  while (1) {}    /* Make sure we hang here */
 800246c:	e7fe      	b.n	800246c <_exit+0x12>

0800246e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e00a      	b.n	8002496 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002480:	f3af 8000 	nop.w
 8002484:	4601      	mov	r1, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	60ba      	str	r2, [r7, #8]
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbf0      	blt.n	8002480 <_read+0x12>
  }

  return len;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ce:	605a      	str	r2, [r3, #4]
  return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <_isatty>:

int _isatty(int file)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f004 feac 	bl	8007294 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20005000 	.word	0x20005000
 8002568:	00000400 	.word	0x00000400
 800256c:	20002290 	.word	0x20002290
 8002570:	200023e8 	.word	0x200023e8

08002574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002580:	f7ff fff8 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002586:	490c      	ldr	r1, [pc, #48]	; (80025b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800258c:	e002      	b.n	8002594 <LoopCopyDataInit>

0800258e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002592:	3304      	adds	r3, #4

08002594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002598:	d3f9      	bcc.n	800258e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800259c:	4c09      	ldr	r4, [pc, #36]	; (80025c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a0:	e001      	b.n	80025a6 <LoopFillZerobss>

080025a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a4:	3204      	adds	r2, #4

080025a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a8:	d3fb      	bcc.n	80025a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025aa:	f004 fe79 	bl	80072a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ae:	f7ff f8e5 	bl	800177c <main>
  bx lr
 80025b2:	4770      	bx	lr
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80025bc:	08009e40 	.word	0x08009e40
  ldr r2, =_sbss
 80025c0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80025c4:	200023e4 	.word	0x200023e4

080025c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC1_2_IRQHandler>
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_Init+0x28>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_Init+0x28>)
 80025d6:	f043 0310 	orr.w	r3, r3, #16
 80025da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f947 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f000 f808 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7ff fd42 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x54>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x58>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f95f 	bl	80028da <HAL_SYSTICK_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d80a      	bhi.n	8002642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f000 f927 	bl	8002886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <HAL_InitTick+0x5c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000028 	.word	0x20000028
 8002650:	20000030 	.word	0x20000030
 8002654:	2000002c 	.word	0x2000002c

08002658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_IncTick+0x1c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_IncTick+0x20>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_IncTick+0x20>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000030 	.word	0x20000030
 8002678:	20002294 	.word	0x20002294

0800267c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b02      	ldr	r3, [pc, #8]	; (800268c <HAL_GetTick+0x10>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20002294 	.word	0x20002294

08002690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff fff0 	bl	800267c <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_Delay+0x44>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffe0 	bl	800267c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000030 	.word	0x20000030

080026d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__NVIC_GetPriorityGrouping+0x18>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 0307 	and.w	r3, r3, #7
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	db0b      	blt.n	8002766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4906      	ldr	r1, [pc, #24]	; (8002770 <__NVIC_EnableIRQ+0x34>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2001      	movs	r0, #1
 800275e:	fa00 f202 	lsl.w	r2, r0, r2
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100

08002774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	2b00      	cmp	r3, #0
 8002786:	db0a      	blt.n	800279e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	490c      	ldr	r1, [pc, #48]	; (80027c0 <__NVIC_SetPriority+0x4c>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	440b      	add	r3, r1
 8002798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800279c:	e00a      	b.n	80027b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4908      	ldr	r1, [pc, #32]	; (80027c4 <__NVIC_SetPriority+0x50>)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	3b04      	subs	r3, #4
 80027ac:	0112      	lsls	r2, r2, #4
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	440b      	add	r3, r1
 80027b2:	761a      	strb	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f1c3 0307 	rsb	r3, r3, #7
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	bf28      	it	cs
 80027e6:	2304      	movcs	r3, #4
 80027e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d902      	bls.n	80027f8 <NVIC_EncodePriority+0x30>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3b03      	subs	r3, #3
 80027f6:	e000      	b.n	80027fa <NVIC_EncodePriority+0x32>
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	43d9      	mvns	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	4313      	orrs	r3, r2
         );
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f7ff ff90 	bl	8002774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff2d 	bl	80026d8 <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff42 	bl	8002720 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff90 	bl	80027c8 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5f 	bl	8002774 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff35 	bl	800273c <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa2 	bl	800282c <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e043      	b.n	8002992 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_DMA_Init+0xa8>)
 8002912:	4413      	add	r3, r2
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_Init+0xac>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	009a      	lsls	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <HAL_DMA_Init+0xb0>)
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800293e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002942:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800294c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	bffdfff8 	.word	0xbffdfff8
 80029a0:	cccccccd 	.word	0xcccccccd
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_DMA_Start_IT+0x20>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e04b      	b.n	8002a60 <HAL_DMA_Start_IT+0xb8>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d13a      	bne.n	8002a52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f9eb 	bl	8002ddc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 020e 	orr.w	r2, r2, #14
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e00f      	b.n	8002a40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0204 	bic.w	r2, r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 020a 	orr.w	r2, r2, #10
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e005      	b.n	8002a5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d008      	beq.n	8002a92 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2204      	movs	r2, #4
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e020      	b.n	8002ad4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 020e 	bic.w	r2, r2, #14
 8002aa0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d005      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2204      	movs	r2, #4
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	e051      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020e 	bic.w	r2, r2, #14
 8002b12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <HAL_DMA_Abort_IT+0xd4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d029      	beq.n	8002b82 <HAL_DMA_Abort_IT+0xa2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_DMA_Abort_IT+0xd8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_Abort_IT+0x9e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_DMA_Abort_IT+0xdc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01a      	beq.n	8002b78 <HAL_DMA_Abort_IT+0x98>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_DMA_Abort_IT+0xe0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d012      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x92>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_DMA_Abort_IT+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00a      	beq.n	8002b6c <HAL_DMA_Abort_IT+0x8c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_DMA_Abort_IT+0xe8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d102      	bne.n	8002b66 <HAL_DMA_Abort_IT+0x86>
 8002b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b64:	e00e      	b.n	8002b84 <HAL_DMA_Abort_IT+0xa4>
 8002b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6a:	e00b      	b.n	8002b84 <HAL_DMA_Abort_IT+0xa4>
 8002b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b70:	e008      	b.n	8002b84 <HAL_DMA_Abort_IT+0xa4>
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	e005      	b.n	8002b84 <HAL_DMA_Abort_IT+0xa4>
 8002b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b7c:	e002      	b.n	8002b84 <HAL_DMA_Abort_IT+0xa4>
 8002b7e:	2310      	movs	r3, #16
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_Abort_IT+0xa4>
 8002b82:	2301      	movs	r3, #1
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_DMA_Abort_IT+0xec>)
 8002b86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
    } 
  }
  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40020008 	.word	0x40020008
 8002bb8:	4002001c 	.word	0x4002001c
 8002bbc:	40020030 	.word	0x40020030
 8002bc0:	40020044 	.word	0x40020044
 8002bc4:	40020058 	.word	0x40020058
 8002bc8:	4002006c 	.word	0x4002006c
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d04f      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xc8>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d04a      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a66      	ldr	r2, [pc, #408]	; (8002dc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d029      	beq.n	8002c7e <HAL_DMA_IRQHandler+0xae>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d022      	beq.n	8002c7a <HAL_DMA_IRQHandler+0xaa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a63      	ldr	r2, [pc, #396]	; (8002dc8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01a      	beq.n	8002c74 <HAL_DMA_IRQHandler+0xa4>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a62      	ldr	r2, [pc, #392]	; (8002dcc <HAL_DMA_IRQHandler+0x1fc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d012      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x9e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <HAL_DMA_IRQHandler+0x200>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00a      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x98>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5f      	ldr	r2, [pc, #380]	; (8002dd4 <HAL_DMA_IRQHandler+0x204>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x92>
 8002c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c60:	e00e      	b.n	8002c80 <HAL_DMA_IRQHandler+0xb0>
 8002c62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c66:	e00b      	b.n	8002c80 <HAL_DMA_IRQHandler+0xb0>
 8002c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c6c:	e008      	b.n	8002c80 <HAL_DMA_IRQHandler+0xb0>
 8002c6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c72:	e005      	b.n	8002c80 <HAL_DMA_IRQHandler+0xb0>
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	e002      	b.n	8002c80 <HAL_DMA_IRQHandler+0xb0>
 8002c7a:	2340      	movs	r3, #64	; 0x40
 8002c7c:	e000      	b.n	8002c80 <HAL_DMA_IRQHandler+0xb0>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	4a55      	ldr	r2, [pc, #340]	; (8002dd8 <HAL_DMA_IRQHandler+0x208>)
 8002c82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8094 	beq.w	8002db6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c96:	e08e      	b.n	8002db6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d056      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x186>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d051      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 020a 	bic.w	r2, r2, #10
 8002cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a38      	ldr	r2, [pc, #224]	; (8002dc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d029      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x166>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a37      	ldr	r2, [pc, #220]	; (8002dc4 <HAL_DMA_IRQHandler+0x1f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x162>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a35      	ldr	r2, [pc, #212]	; (8002dc8 <HAL_DMA_IRQHandler+0x1f8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01a      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x15c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a34      	ldr	r2, [pc, #208]	; (8002dcc <HAL_DMA_IRQHandler+0x1fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d012      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x156>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <HAL_DMA_IRQHandler+0x200>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00a      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x150>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <HAL_DMA_IRQHandler+0x204>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_DMA_IRQHandler+0x14a>
 8002d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d18:	e00e      	b.n	8002d38 <HAL_DMA_IRQHandler+0x168>
 8002d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1e:	e00b      	b.n	8002d38 <HAL_DMA_IRQHandler+0x168>
 8002d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d24:	e008      	b.n	8002d38 <HAL_DMA_IRQHandler+0x168>
 8002d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2a:	e005      	b.n	8002d38 <HAL_DMA_IRQHandler+0x168>
 8002d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d30:	e002      	b.n	8002d38 <HAL_DMA_IRQHandler+0x168>
 8002d32:	2320      	movs	r3, #32
 8002d34:	e000      	b.n	8002d38 <HAL_DMA_IRQHandler+0x168>
 8002d36:	2302      	movs	r3, #2
 8002d38:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_DMA_IRQHandler+0x208>)
 8002d3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d034      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d54:	e02f      	b.n	8002db6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d028      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x1e8>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 020e 	bic.w	r2, r2, #14
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
    }
  }
  return;
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
}
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40020008 	.word	0x40020008
 8002dc4:	4002001c 	.word	0x4002001c
 8002dc8:	40020030 	.word	0x40020030
 8002dcc:	40020044 	.word	0x40020044
 8002dd0:	40020058 	.word	0x40020058
 8002dd4:	4002006c 	.word	0x4002006c
 8002dd8:	40020000 	.word	0x40020000

08002ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f202 	lsl.w	r2, r1, r2
 8002df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d108      	bne.n	8002e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e1a:	e007      	b.n	8002e2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b08b      	sub	sp, #44	; 0x2c
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4a:	e169      	b.n	8003120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8158 	bne.w	800311a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a9a      	ldr	r2, [pc, #616]	; (80030d8 <HAL_GPIO_Init+0x2a0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d05e      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e74:	4a98      	ldr	r2, [pc, #608]	; (80030d8 <HAL_GPIO_Init+0x2a0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d875      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e7a:	4a98      	ldr	r2, [pc, #608]	; (80030dc <HAL_GPIO_Init+0x2a4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d058      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e80:	4a96      	ldr	r2, [pc, #600]	; (80030dc <HAL_GPIO_Init+0x2a4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d86f      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e86:	4a96      	ldr	r2, [pc, #600]	; (80030e0 <HAL_GPIO_Init+0x2a8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d052      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e8c:	4a94      	ldr	r2, [pc, #592]	; (80030e0 <HAL_GPIO_Init+0x2a8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d869      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e92:	4a94      	ldr	r2, [pc, #592]	; (80030e4 <HAL_GPIO_Init+0x2ac>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04c      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e98:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <HAL_GPIO_Init+0x2ac>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d863      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e9e:	4a92      	ldr	r2, [pc, #584]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d046      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002ea4:	4a90      	ldr	r2, [pc, #576]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d85d      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d82a      	bhi.n	8002f04 <HAL_GPIO_Init+0xcc>
 8002eae:	2b12      	cmp	r3, #18
 8002eb0:	d859      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_GPIO_Init+0x80>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f33 	.word	0x08002f33
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f1f 	.word	0x08002f1f
 8002ec4:	08002f61 	.word	0x08002f61
 8002ec8:	08002f67 	.word	0x08002f67
 8002ecc:	08002f67 	.word	0x08002f67
 8002ed0:	08002f67 	.word	0x08002f67
 8002ed4:	08002f67 	.word	0x08002f67
 8002ed8:	08002f67 	.word	0x08002f67
 8002edc:	08002f67 	.word	0x08002f67
 8002ee0:	08002f67 	.word	0x08002f67
 8002ee4:	08002f67 	.word	0x08002f67
 8002ee8:	08002f67 	.word	0x08002f67
 8002eec:	08002f67 	.word	0x08002f67
 8002ef0:	08002f67 	.word	0x08002f67
 8002ef4:	08002f67 	.word	0x08002f67
 8002ef8:	08002f67 	.word	0x08002f67
 8002efc:	08002f15 	.word	0x08002f15
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	4a79      	ldr	r2, [pc, #484]	; (80030ec <HAL_GPIO_Init+0x2b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f0a:	e02c      	b.n	8002f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e029      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	623b      	str	r3, [r7, #32]
          break;
 8002f1c:	e024      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	3308      	adds	r3, #8
 8002f24:	623b      	str	r3, [r7, #32]
          break;
 8002f26:	e01f      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	623b      	str	r3, [r7, #32]
          break;
 8002f30:	e01a      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	623b      	str	r3, [r7, #32]
          break;
 8002f3e:	e013      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	611a      	str	r2, [r3, #16]
          break;
 8002f52:	e009      	b.n	8002f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f54:	2308      	movs	r3, #8
 8002f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	615a      	str	r2, [r3, #20]
          break;
 8002f5e:	e003      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
          break;
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          break;
 8002f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d801      	bhi.n	8002f72 <HAL_GPIO_Init+0x13a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	e001      	b.n	8002f76 <HAL_GPIO_Init+0x13e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2bff      	cmp	r3, #255	; 0xff
 8002f7c:	d802      	bhi.n	8002f84 <HAL_GPIO_Init+0x14c>
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	e002      	b.n	8002f8a <HAL_GPIO_Init+0x152>
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	3b08      	subs	r3, #8
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	210f      	movs	r1, #15
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	6a39      	ldr	r1, [r7, #32]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80b1 	beq.w	800311a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb8:	4b4d      	ldr	r3, [pc, #308]	; (80030f0 <HAL_GPIO_Init+0x2b8>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	; (80030f0 <HAL_GPIO_Init+0x2b8>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6193      	str	r3, [r2, #24]
 8002fc4:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_GPIO_Init+0x2b8>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fd0:	4a48      	ldr	r2, [pc, #288]	; (80030f4 <HAL_GPIO_Init+0x2bc>)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_GPIO_Init+0x2c0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_GPIO_Init+0x1ec>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3f      	ldr	r2, [pc, #252]	; (80030fc <HAL_GPIO_Init+0x2c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00d      	beq.n	8003020 <HAL_GPIO_Init+0x1e8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a3e      	ldr	r2, [pc, #248]	; (8003100 <HAL_GPIO_Init+0x2c8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x1e4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <HAL_GPIO_Init+0x2cc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_GPIO_Init+0x1e0>
 8003014:	2303      	movs	r3, #3
 8003016:	e006      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 8003018:	2304      	movs	r3, #4
 800301a:	e004      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 800301c:	2302      	movs	r3, #2
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 8003024:	2300      	movs	r3, #0
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003036:	492f      	ldr	r1, [pc, #188]	; (80030f4 <HAL_GPIO_Init+0x2bc>)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	492c      	ldr	r1, [pc, #176]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	43db      	mvns	r3, r3
 8003066:	4928      	ldr	r1, [pc, #160]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003068:	4013      	ands	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4922      	ldr	r1, [pc, #136]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	43db      	mvns	r3, r3
 800308e:	491e      	ldr	r1, [pc, #120]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003090:	4013      	ands	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4918      	ldr	r1, [pc, #96]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4914      	ldr	r1, [pc, #80]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d021      	beq.n	800310c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	490e      	ldr	r1, [pc, #56]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e021      	b.n	800311a <HAL_GPIO_Init+0x2e2>
 80030d6:	bf00      	nop
 80030d8:	10320000 	.word	0x10320000
 80030dc:	10310000 	.word	0x10310000
 80030e0:	10220000 	.word	0x10220000
 80030e4:	10210000 	.word	0x10210000
 80030e8:	10120000 	.word	0x10120000
 80030ec:	10110000 	.word	0x10110000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010800 	.word	0x40010800
 80030fc:	40010c00 	.word	0x40010c00
 8003100:	40011000 	.word	0x40011000
 8003104:	40011400 	.word	0x40011400
 8003108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_GPIO_Init+0x304>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	43db      	mvns	r3, r3
 8003114:	4909      	ldr	r1, [pc, #36]	; (800313c <HAL_GPIO_Init+0x304>)
 8003116:	4013      	ands	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	3301      	adds	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f47f ae8e 	bne.w	8002e4c <HAL_GPIO_Init+0x14>
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	372c      	adds	r7, #44	; 0x2c
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40010400 	.word	0x40010400

08003140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e001      	b.n	8003162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
 800317a:	4613      	mov	r3, r2
 800317c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317e:	787b      	ldrb	r3, [r7, #1]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003184:	887a      	ldrh	r2, [r7, #2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800318a:	e003      	b.n	8003194 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	041a      	lsls	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fe6e 	bl	8001ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40010400 	.word	0x40010400

080031d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e12b      	b.n	800343a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe ff6c 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	; 0x24
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003234:	f001 f960 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a81      	ldr	r2, [pc, #516]	; (8003444 <HAL_I2C_Init+0x274>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d807      	bhi.n	8003254 <HAL_I2C_Init+0x84>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_I2C_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e006      	b.n	8003262 <HAL_I2C_Init+0x92>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a7d      	ldr	r2, [pc, #500]	; (800344c <HAL_I2C_Init+0x27c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0e7      	b.n	800343a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a78      	ldr	r2, [pc, #480]	; (8003450 <HAL_I2C_Init+0x280>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0c9b      	lsrs	r3, r3, #18
 8003274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a6a      	ldr	r2, [pc, #424]	; (8003444 <HAL_I2C_Init+0x274>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d802      	bhi.n	80032a4 <HAL_I2C_Init+0xd4>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	e009      	b.n	80032b8 <HAL_I2C_Init+0xe8>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	4a69      	ldr	r2, [pc, #420]	; (8003454 <HAL_I2C_Init+0x284>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	3301      	adds	r3, #1
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	430b      	orrs	r3, r1
 80032be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	495c      	ldr	r1, [pc, #368]	; (8003444 <HAL_I2C_Init+0x274>)
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d819      	bhi.n	800330c <HAL_I2C_Init+0x13c>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e59      	subs	r1, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032ec:	400b      	ands	r3, r1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_I2C_Init+0x138>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e59      	subs	r1, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	e051      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003308:	2304      	movs	r3, #4
 800330a:	e04f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_I2C_Init+0x168>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e58      	subs	r0, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e012      	b.n	800335e <HAL_I2C_Init+0x18e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e58      	subs	r0, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	0099      	lsls	r1, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x196>
 8003362:	2301      	movs	r3, #1
 8003364:	e022      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10e      	bne.n	800338c <HAL_I2C_Init+0x1bc>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e58      	subs	r0, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	440b      	add	r3, r1
 800337c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003380:	3301      	adds	r3, #1
 8003382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	e00f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	6809      	ldr	r1, [r1, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6911      	ldr	r1, [r2, #16]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	000186a0 	.word	0x000186a0
 8003448:	001e847f 	.word	0x001e847f
 800344c:	003d08ff 	.word	0x003d08ff
 8003450:	431bde83 	.word	0x431bde83
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	461a      	mov	r2, r3
 8003464:	460b      	mov	r3, r1
 8003466:	817b      	strh	r3, [r7, #10]
 8003468:	4613      	mov	r3, r2
 800346a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff f906 	bl	800267c <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	f040 80e0 	bne.w	8003640 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2319      	movs	r3, #25
 8003486:	2201      	movs	r2, #1
 8003488:	4970      	ldr	r1, [pc, #448]	; (800364c <HAL_I2C_Master_Transmit+0x1f4>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa92 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	e0d3      	b.n	8003642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_I2C_Master_Transmit+0x50>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0cc      	b.n	8003642 <HAL_I2C_Master_Transmit+0x1ea>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d007      	beq.n	80034ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2221      	movs	r2, #33	; 0x21
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2210      	movs	r2, #16
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	893a      	ldrh	r2, [r7, #8]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a50      	ldr	r2, [pc, #320]	; (8003650 <HAL_I2C_Master_Transmit+0x1f8>)
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f9ca 	bl	80038b0 <I2C_MasterRequestWrite>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e08d      	b.n	8003642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800353c:	e066      	b.n	800360c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fb50 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06b      	b.n	8003642 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_I2C_Master_Transmit+0x188>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d017      	beq.n	80035e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	6a39      	ldr	r1, [r7, #32]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fb47 	bl	8003c78 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d107      	bne.n	8003608 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e01a      	b.n	8003642 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d194      	bne.n	800353e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000

08003654 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003664:	f7ff f80a 	bl	800267c <HAL_GetTick>
 8003668:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	f040 8111 	bne.w	800389e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	4988      	ldr	r1, [pc, #544]	; (80038a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f994 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
 8003694:	e104      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_IsDeviceReady+0x50>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0fd      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d007      	beq.n	80036ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a70      	ldr	r2, [pc, #448]	; (80038ac <HAL_I2C_IsDeviceReady+0x258>)
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f952 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003724:	d103      	bne.n	800372e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0b6      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003740:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003742:	f7fe ff9b 	bl	800267c <HAL_GetTick>
 8003746:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003776:	e025      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fe ff80 	bl	800267c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <HAL_I2C_IsDeviceReady+0x13a>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22a0      	movs	r2, #160	; 0xa0
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2ba0      	cmp	r3, #160	; 0xa0
 80037ce:	d005      	beq.n	80037dc <HAL_I2C_IsDeviceReady+0x188>
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_I2C_IsDeviceReady+0x188>
 80037d6:	7dbb      	ldrb	r3, [r7, #22]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0cd      	beq.n	8003778 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d129      	bne.n	8003846 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2319      	movs	r3, #25
 800381e:	2201      	movs	r2, #1
 8003820:	4921      	ldr	r1, [pc, #132]	; (80038a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f8c6 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e036      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e02c      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	490f      	ldr	r1, [pc, #60]	; (80038a8 <HAL_I2C_IsDeviceReady+0x254>)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8a2 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e012      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3301      	adds	r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	f4ff af32 	bcc.w	80036ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	00100002 	.word	0x00100002
 80038ac:	ffff0000 	.word	0xffff0000

080038b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	460b      	mov	r3, r1
 80038be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d006      	beq.n	80038da <I2C_MasterRequestWrite+0x2a>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d003      	beq.n	80038da <I2C_MasterRequestWrite+0x2a>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d8:	d108      	bne.n	80038ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e00b      	b.n	8003904 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	2b12      	cmp	r3, #18
 80038f2:	d107      	bne.n	8003904 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f84f 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00d      	beq.n	8003938 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392a:	d103      	bne.n	8003934 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e035      	b.n	80039a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003940:	d108      	bne.n	8003954 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003950:	611a      	str	r2, [r3, #16]
 8003952:	e01b      	b.n	800398c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	11db      	asrs	r3, r3, #7
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0306 	and.w	r3, r3, #6
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f063 030f 	orn	r3, r3, #15
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <I2C_MasterRequestWrite+0xfc>)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f898 	bl	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e010      	b.n	80039a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4907      	ldr	r1, [pc, #28]	; (80039b0 <I2C_MasterRequestWrite+0x100>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f888 	bl	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	00010008 	.word	0x00010008
 80039b0:	00010002 	.word	0x00010002

080039b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c4:	e048      	b.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d044      	beq.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fe fe55 	bl	800267c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d139      	bne.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10d      	bne.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x56>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	e00c      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d116      	bne.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e023      	b.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10d      	bne.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	e00c      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d093      	beq.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab6:	e071      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d123      	bne.n	8003b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e067      	b.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d041      	beq.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fe fdb0 	bl	800267c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d136      	bne.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10c      	bne.n	8003b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e00b      	b.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e021      	b.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10c      	bne.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e00b      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f47f af6d 	bne.w	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf4:	e034      	b.n	8003c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f886 	bl	8003d08 <I2C_IsAcknowledgeFailed>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e034      	b.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d028      	beq.n	8003c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fe fd35 	bl	800267c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11d      	bne.n	8003c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d016      	beq.n	8003c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e007      	b.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d1c3      	bne.n	8003bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c84:	e034      	b.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f83e 	bl	8003d08 <I2C_IsAcknowledgeFailed>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e034      	b.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d028      	beq.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe fced 	bl	800267c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11d      	bne.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d016      	beq.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e007      	b.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d1c3      	bne.n	8003c86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d11b      	bne.n	8003d58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e272      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8087 	beq.w	8003e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d84:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d00c      	beq.n	8003daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d90:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d112      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5e>
 8003d9c:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d10b      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003daa:	4b89      	ldr	r3, [pc, #548]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d06c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x12c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d168      	bne.n	8003e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e24c      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x76>
 8003dcc:	4b80      	ldr	r3, [pc, #512]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7f      	ldr	r2, [pc, #508]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e02e      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x98>
 8003de2:	4b7b      	ldr	r3, [pc, #492]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7a      	ldr	r2, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b78      	ldr	r3, [pc, #480]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a77      	ldr	r2, [pc, #476]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e01d      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0xbc>
 8003e06:	4b72      	ldr	r3, [pc, #456]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a71      	ldr	r2, [pc, #452]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6a      	ldr	r2, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fc1c 	bl	800267c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe fc18 	bl	800267c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e200      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0xe4>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fc08 	bl	800267c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fc04 	bl	800267c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1ec      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x10c>
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e9e:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x18c>
 8003eb6:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x176>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1c0      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4939      	ldr	r1, [pc, #228]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	e03a      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_RCC_OscConfig+0x270>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fe fbbd 	bl	800267c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fe fbb9 	bl	800267c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1a1      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4927      	ldr	r1, [pc, #156]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fb9c 	bl	800267c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fe fb98 	bl	800267c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e180      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03a      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe fb7c 	bl	800267c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe fb78 	bl	800267c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e160      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 face 	bl	8004548 <RCC_Delay>
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fe fb62 	bl	800267c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fba:	e00f      	b.n	8003fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fb5e 	bl	800267c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d908      	bls.n	8003fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e146      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	42420000 	.word	0x42420000
 8003fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b92      	ldr	r3, [pc, #584]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e9      	bne.n	8003fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a6 	beq.w	8004142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b8b      	ldr	r3, [pc, #556]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a87      	ldr	r2, [pc, #540]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	4b85      	ldr	r3, [pc, #532]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b82      	ldr	r3, [pc, #520]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7e      	ldr	r2, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe fb1f 	bl	800267c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe fb1b 	bl	800267c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	; 0x64
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e103      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x312>
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a6e      	ldr	r2, [pc, #440]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6213      	str	r3, [r2, #32]
 8004074:	e02d      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x334>
 800407e:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a69      	ldr	r2, [pc, #420]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a66      	ldr	r2, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	e01c      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b05      	cmp	r3, #5
 800409e:	d10c      	bne.n	80040ba <HAL_RCC_OscConfig+0x356>
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a60      	ldr	r2, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	e00b      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 80040ba:	4b5b      	ldr	r3, [pc, #364]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a5a      	ldr	r2, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6213      	str	r3, [r2, #32]
 80040c6:	4b58      	ldr	r3, [pc, #352]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d015      	beq.n	8004106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040da:	f7fe facf 	bl	800267c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fe facb 	bl	800267c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0b1      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <HAL_RCC_OscConfig+0x37e>
 8004104:	e014      	b.n	8004130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fe fab9 	bl	800267c <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fab5 	bl	800267c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e09b      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8087 	beq.w	800425a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414c:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d061      	beq.n	800421c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d146      	bne.n	80041ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fe fa89 	bl	800267c <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7fe fa85 	bl	800267c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e06d      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d108      	bne.n	80041a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4921      	ldr	r1, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a19      	ldr	r1, [r3, #32]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	430b      	orrs	r3, r1
 80041ba:	491b      	ldr	r1, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fe fa59 	bl	800267c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe fa55 	bl	800267c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e03d      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x46a>
 80041ec:	e035      	b.n	800425a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fa42 	bl	800267c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe fa3e 	bl	800267c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e026      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x498>
 800421a:	e01e      	b.n	800425a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e019      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
 8004228:	40021000 	.word	0x40021000
 800422c:	40007000 	.word	0x40007000
 8004230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_OscConfig+0x500>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	429a      	cmp	r2, r3
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d0      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800427c:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d910      	bls.n	80042ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 0207 	bic.w	r2, r3, #7
 8004292:	4965      	ldr	r1, [pc, #404]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b63      	ldr	r3, [pc, #396]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0b8      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c4:	4b59      	ldr	r3, [pc, #356]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a52      	ldr	r2, [pc, #328]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e8:	4b50      	ldr	r3, [pc, #320]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	494d      	ldr	r1, [pc, #308]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d040      	beq.n	8004388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d115      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e07f      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e073      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004336:	4b3d      	ldr	r3, [pc, #244]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06b      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004346:	4b39      	ldr	r3, [pc, #228]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f023 0203 	bic.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4936      	ldr	r1, [pc, #216]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004358:	f7fe f990 	bl	800267c <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	e00a      	b.n	8004376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fe f98c 	bl	800267c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e053      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	4b2d      	ldr	r3, [pc, #180]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 020c 	and.w	r2, r3, #12
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	429a      	cmp	r2, r3
 8004386:	d1eb      	bne.n	8004360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004388:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d210      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 0207 	bic.w	r2, r3, #7
 800439e:	4922      	ldr	r1, [pc, #136]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e032      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4916      	ldr	r1, [pc, #88]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	490e      	ldr	r1, [pc, #56]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043f6:	f000 f821 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	490a      	ldr	r1, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	5ccb      	ldrb	r3, [r1, r3]
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1cc>)
 8004410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x1d0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe f8ee 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40022000 	.word	0x40022000
 800442c:	40021000 	.word	0x40021000
 8004430:	0800998c 	.word	0x0800998c
 8004434:	20000028 	.word	0x20000028
 8004438:	2000002c 	.word	0x2000002c

0800443c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b04      	cmp	r3, #4
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x30>
 8004466:	2b08      	cmp	r3, #8
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x36>
 800446a:	e027      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800446e:	613b      	str	r3, [r7, #16]
      break;
 8004470:	e027      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	0c9b      	lsrs	r3, r3, #18
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	0c5b      	lsrs	r3, r3, #17
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800449e:	fb03 f202 	mul.w	r2, r3, r2
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e004      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	613b      	str	r3, [r7, #16]
      break;
 80044ba:	e002      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80044be:	613b      	str	r3, [r7, #16]
      break;
 80044c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c2:	693b      	ldr	r3, [r7, #16]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	007a1200 	.word	0x007a1200
 80044d8:	080099a4 	.word	0x080099a4
 80044dc:	080099b4 	.word	0x080099b4
 80044e0:	003d0900 	.word	0x003d0900

080044e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b02      	ldr	r3, [pc, #8]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	20000028 	.word	0x20000028

080044f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044fc:	f7ff fff2 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK1Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	0800999c 	.word	0x0800999c

08004520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004524:	f7ff ffde 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0adb      	lsrs	r3, r3, #11
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	0800999c 	.word	0x0800999c

08004548 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <RCC_Delay+0x34>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <RCC_Delay+0x38>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0a5b      	lsrs	r3, r3, #9
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004564:	bf00      	nop
  }
  while (Delay --);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1e5a      	subs	r2, r3, #1
 800456a:	60fa      	str	r2, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f9      	bne.n	8004564 <RCC_Delay+0x1c>
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	20000028 	.word	0x20000028
 8004580:	10624dd3 	.word	0x10624dd3

08004584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e042      	b.n	800461c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fdd0 	bl	8002150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 ffb3 	bl	8005534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	d16d      	bne.n	8004720 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Transmit+0x2c>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e066      	b.n	8004722 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2221      	movs	r2, #33	; 0x21
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fe f80b 	bl	800267c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d108      	bne.n	8004690 <HAL_UART_Transmit+0x6c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e003      	b.n	8004698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004698:	e02a      	b.n	80046f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fc41 	bl	8004f2c <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e036      	b.n	8004722 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3302      	adds	r3, #2
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e007      	b.n	80046e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1cf      	bne.n	800469a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2140      	movs	r1, #64	; 0x40
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fc11 	bl	8004f2c <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b20      	cmp	r3, #32
 8004742:	d112      	bne.n	800476a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Receive_IT+0x26>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e00b      	b.n	800476c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	461a      	mov	r2, r3
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fc51 	bl	8005008 <UART_Start_Receive_IT>
 8004766:	4603      	mov	r3, r0
 8004768:	e000      	b.n	800476c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b20      	cmp	r3, #32
 800478c:	d112      	bne.n	80047b4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_UART_Receive_DMA+0x26>
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00b      	b.n	80047b6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fc66 	bl	800507c <UART_Start_Receive_DMA>
 80047b0:	4603      	mov	r3, r0
 80047b2:	e000      	b.n	80047b6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b0ba      	sub	sp, #232	; 0xe8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_UART_IRQHandler+0x66>
 8004812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fdca 	bl	80053b8 <UART_Receive_IT>
      return;
 8004824:	e25b      	b.n	8004cde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80de 	beq.w	80049ec <HAL_UART_IRQHandler+0x22c>
 8004830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800483c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004840:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80d1 	beq.w	80049ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_UART_IRQHandler+0xae>
 8004856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_UART_IRQHandler+0xd2>
 800487a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_UART_IRQHandler+0xf6>
 800489e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f043 0204 	orr.w	r2, r3, #4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_UART_IRQHandler+0x126>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f043 0208 	orr.w	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 81f2 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_UART_IRQHandler+0x14e>
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fd55 	bl	80053b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <HAL_UART_IRQHandler+0x17a>
 8004932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d04f      	beq.n	80049da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fc5f 	bl	80051fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d041      	beq.n	80049d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3314      	adds	r3, #20
 8004976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800497a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800497e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1d9      	bne.n	800494e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d013      	beq.n	80049ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	4a7e      	ldr	r2, [pc, #504]	; (8004ba0 <HAL_UART_IRQHandler+0x3e0>)
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe f896 	bl	8002ae0 <HAL_DMA_Abort_IT>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049c4:	4610      	mov	r0, r2
 80049c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	e00e      	b.n	80049e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f99c 	bl	8004d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	e00a      	b.n	80049e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f998 	bl	8004d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	e006      	b.n	80049e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f994 	bl	8004d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80049e6:	e175      	b.n	8004cd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	bf00      	nop
    return;
 80049ea:	e173      	b.n	8004cd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	f040 814f 	bne.w	8004c94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8148 	beq.w	8004c94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8141 	beq.w	8004c94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 80b6 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8145 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a56:	429a      	cmp	r2, r3
 8004a58:	f080 813e 	bcs.w	8004cd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	f000 8088 	beq.w	8004b80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004aa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1d9      	bne.n	8004a70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ae0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e1      	bne.n	8004abc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e3      	bne.n	8004af8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b50:	f023 0310 	bic.w	r3, r3, #16
 8004b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b62:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e3      	bne.n	8004b3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd ff74 	bl	8002a68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8bf 	bl	8004d1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b9c:	e09c      	b.n	8004cd8 <HAL_UART_IRQHandler+0x518>
 8004b9e:	bf00      	nop
 8004ba0:	080052c3 	.word	0x080052c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 808e 	beq.w	8004cdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8089 	beq.w	8004cdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bee:	647a      	str	r2, [r7, #68]	; 0x44
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e3      	bne.n	8004bca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	623b      	str	r3, [r7, #32]
   return(result);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c26:	633a      	str	r2, [r7, #48]	; 0x30
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e3      	bne.n	8004c02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0310 	bic.w	r3, r3, #16
 8004c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c6c:	61fa      	str	r2, [r7, #28]
 8004c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e3      	bne.n	8004c48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f844 	bl	8004d1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c92:	e023      	b.n	8004cdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x4f4>
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb1c 	bl	80052ea <UART_Transmit_IT>
    return;
 8004cb2:	e014      	b.n	8004cde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <HAL_UART_IRQHandler+0x51e>
 8004cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fb5b 	bl	8005388 <UART_EndTransmit_IT>
    return;
 8004cd2:	e004      	b.n	8004cde <HAL_UART_IRQHandler+0x51e>
    return;
 8004cd4:	bf00      	nop
 8004cd6:	e002      	b.n	8004cde <HAL_UART_IRQHandler+0x51e>
      return;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <HAL_UART_IRQHandler+0x51e>
      return;
 8004cdc:	bf00      	nop
  }
}
 8004cde:	37e8      	adds	r7, #232	; 0xe8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b09c      	sub	sp, #112	; 0x70
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d172      	bne.n	8004e32 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	2200      	movs	r2, #0
 8004d50:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d72:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004da6:	647a      	str	r2, [r7, #68]	; 0x44
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dda:	633a      	str	r2, [r7, #48]	; 0x30
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d119      	bne.n	8004e32 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0310 	bic.w	r3, r3, #16
 8004e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e1e:	61fa      	str	r2, [r7, #28]
 8004e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e34:	2200      	movs	r2, #0
 8004e36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e44:	4619      	mov	r1, r3
 8004e46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e48:	f7ff ff67 	bl	8004d1a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e4c:	e002      	b.n	8004e54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004e4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e50:	f7fd f85c 	bl	8001f0c <HAL_UART_RxCpltCallback>
}
 8004e54:	bf00      	nop
 8004e56:	3770      	adds	r7, #112	; 0x70
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d108      	bne.n	8004e8a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff ff49 	bl	8004d1a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e88:	e002      	b.n	8004e90 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff ff33 	bl	8004cf6 <HAL_UART_RxHalfCpltCallback>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b21      	cmp	r3, #33	; 0x21
 8004eca:	d108      	bne.n	8004ede <UART_DMAError+0x46>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ed8:	68b8      	ldr	r0, [r7, #8]
 8004eda:	f000 f969 	bl	80051b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b22      	cmp	r3, #34	; 0x22
 8004efe:	d108      	bne.n	8004f12 <UART_DMAError+0x7a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f0c:	68b8      	ldr	r0, [r7, #8]
 8004f0e:	f000 f976 	bl	80051fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f043 0210 	orr.w	r2, r3, #16
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f1e:	68b8      	ldr	r0, [r7, #8]
 8004f20:	f7ff fef2 	bl	8004d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b090      	sub	sp, #64	; 0x40
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3c:	e050      	b.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d04c      	beq.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4c:	f7fd fb96 	bl	800267c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d241      	bcs.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb0:	623a      	str	r2, [r7, #32]
 8004fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e00f      	b.n	8005000 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d09f      	beq.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3740      	adds	r7, #64	; 0x40
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2222      	movs	r2, #34	; 0x22
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0201 	orr.w	r2, r2, #1
 800505c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0220 	orr.w	r2, r2, #32
 800506c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
	...

0800507c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b098      	sub	sp, #96	; 0x60
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2222      	movs	r2, #34	; 0x22
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	4a3e      	ldr	r2, [pc, #248]	; (80051a4 <UART_Start_Receive_DMA+0x128>)
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	4a3d      	ldr	r2, [pc, #244]	; (80051a8 <UART_Start_Receive_DMA+0x12c>)
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	4a3c      	ldr	r2, [pc, #240]	; (80051ac <UART_Start_Receive_DMA+0x130>)
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	2200      	movs	r2, #0
 80050c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	f7fd fc64 	bl	80029a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d019      	beq.n	8005132 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	65bb      	str	r3, [r7, #88]	; 0x58
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800511e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800512c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	657b      	str	r3, [r7, #84]	; 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005152:	63ba      	str	r2, [r7, #56]	; 0x38
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e5      	bne.n	8005132 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	617b      	str	r3, [r7, #20]
   return(result);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005186:	627a      	str	r2, [r7, #36]	; 0x24
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6a39      	ldr	r1, [r7, #32]
 800518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	61fb      	str	r3, [r7, #28]
   return(result);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3760      	adds	r7, #96	; 0x60
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	08004d31 	.word	0x08004d31
 80051a8:	08004e5d 	.word	0x08004e5d
 80051ac:	08004e99 	.word	0x08004e99

080051b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	; 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	330c      	adds	r3, #12
 80051be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	61ba      	str	r2, [r7, #24]
 80051da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	613b      	str	r3, [r7, #16]
   return(result);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80051f4:	bf00      	nop
 80051f6:	3724      	adds	r7, #36	; 0x24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051fe:	b480      	push	{r7}
 8005200:	b095      	sub	sp, #84	; 0x54
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800521c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005226:	643a      	str	r2, [r7, #64]	; 0x40
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800522c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	61fb      	str	r3, [r7, #28]
   return(result);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	64bb      	str	r3, [r7, #72]	; 0x48
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	2b01      	cmp	r3, #1
 8005274:	d119      	bne.n	80052aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	60bb      	str	r3, [r7, #8]
   return(result);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	647b      	str	r3, [r7, #68]	; 0x44
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005296:	61ba      	str	r2, [r7, #24]
 8005298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6979      	ldr	r1, [r7, #20]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	613b      	str	r3, [r7, #16]
   return(result);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052b8:	bf00      	nop
 80052ba:	3754      	adds	r7, #84	; 0x54
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff fd13 	bl	8004d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b21      	cmp	r3, #33	; 0x21
 80052fc:	d13e      	bne.n	800537c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005306:	d114      	bne.n	8005332 <UART_Transmit_IT+0x48>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d110      	bne.n	8005332 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005324:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	1c9a      	adds	r2, r3, #2
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	621a      	str	r2, [r3, #32]
 8005330:	e008      	b.n	8005344 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6211      	str	r1, [r2, #32]
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4619      	mov	r1, r3
 8005352:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005366:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005376:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800537c:	2302      	movs	r3, #2
  }
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fc9b 	bl	8004ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b22      	cmp	r3, #34	; 0x22
 80053ca:	f040 80ae 	bne.w	800552a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	d117      	bne.n	8005408 <UART_Receive_IT+0x50>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d113      	bne.n	8005408 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
 8005406:	e026      	b.n	8005456 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800540e:	2300      	movs	r3, #0
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	d007      	beq.n	800542c <UART_Receive_IT+0x74>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <UART_Receive_IT+0x82>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e008      	b.n	800544c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005446:	b2da      	uxtb	r2, r3
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4619      	mov	r1, r3
 8005464:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005466:	2b00      	cmp	r3, #0
 8005468:	d15d      	bne.n	8005526 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0220 	bic.w	r2, r2, #32
 8005478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d135      	bne.n	800551c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	613b      	str	r3, [r7, #16]
   return(result);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f023 0310 	bic.w	r3, r3, #16
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	623a      	str	r2, [r7, #32]
 80054d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	69f9      	ldr	r1, [r7, #28]
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e5      	bne.n	80054b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d10a      	bne.n	800550e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fc00 	bl	8004d1a <HAL_UARTEx_RxEventCallback>
 800551a:	e002      	b.n	8005522 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fc fcf5 	bl	8001f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e002      	b.n	800552c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3730      	adds	r7, #48	; 0x30
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800556e:	f023 030c 	bic.w	r3, r3, #12
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	430b      	orrs	r3, r1
 800557a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <UART_SetConfig+0x114>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7fe ffc0 	bl	8004520 <HAL_RCC_GetPCLK2Freq>
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	e002      	b.n	80055aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055a4:	f7fe ffa8 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 80055a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009a      	lsls	r2, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <UART_SetConfig+0x118>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	0119      	lsls	r1, r3, #4
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009a      	lsls	r2, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <UART_SetConfig+0x118>)
 80055e2:	fba3 0302 	umull	r0, r3, r3, r2
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	2064      	movs	r0, #100	; 0x64
 80055ea:	fb00 f303 	mul.w	r3, r0, r3
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	3332      	adds	r3, #50	; 0x32
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <UART_SetConfig+0x118>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005600:	4419      	add	r1, r3
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	009a      	lsls	r2, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	fbb2 f2f3 	udiv	r2, r2, r3
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <UART_SetConfig+0x118>)
 800561a:	fba3 0302 	umull	r0, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2064      	movs	r0, #100	; 0x64
 8005622:	fb00 f303 	mul.w	r3, r0, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	3332      	adds	r3, #50	; 0x32
 800562c:	4a07      	ldr	r2, [pc, #28]	; (800564c <UART_SetConfig+0x118>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	440a      	add	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40013800 	.word	0x40013800
 800564c:	51eb851f 	.word	0x51eb851f

08005650 <atof>:
 8005650:	2100      	movs	r1, #0
 8005652:	f000 be15 	b.w	8006280 <strtod>

08005656 <sulp>:
 8005656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565a:	460f      	mov	r7, r1
 800565c:	4690      	mov	r8, r2
 800565e:	f003 fccb 	bl	8008ff8 <__ulp>
 8005662:	4604      	mov	r4, r0
 8005664:	460d      	mov	r5, r1
 8005666:	f1b8 0f00 	cmp.w	r8, #0
 800566a:	d011      	beq.n	8005690 <sulp+0x3a>
 800566c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005670:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005674:	2b00      	cmp	r3, #0
 8005676:	dd0b      	ble.n	8005690 <sulp+0x3a>
 8005678:	2400      	movs	r4, #0
 800567a:	051b      	lsls	r3, r3, #20
 800567c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005680:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005684:	4622      	mov	r2, r4
 8005686:	462b      	mov	r3, r5
 8005688:	f7fa ff30 	bl	80004ec <__aeabi_dmul>
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005698 <_strtod_l>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	b09f      	sub	sp, #124	; 0x7c
 800569e:	9217      	str	r2, [sp, #92]	; 0x5c
 80056a0:	2200      	movs	r2, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	921a      	str	r2, [sp, #104]	; 0x68
 80056a6:	460d      	mov	r5, r1
 80056a8:	f04f 0800 	mov.w	r8, #0
 80056ac:	f04f 0900 	mov.w	r9, #0
 80056b0:	460a      	mov	r2, r1
 80056b2:	9219      	str	r2, [sp, #100]	; 0x64
 80056b4:	7811      	ldrb	r1, [r2, #0]
 80056b6:	292b      	cmp	r1, #43	; 0x2b
 80056b8:	d04a      	beq.n	8005750 <_strtod_l+0xb8>
 80056ba:	d838      	bhi.n	800572e <_strtod_l+0x96>
 80056bc:	290d      	cmp	r1, #13
 80056be:	d832      	bhi.n	8005726 <_strtod_l+0x8e>
 80056c0:	2908      	cmp	r1, #8
 80056c2:	d832      	bhi.n	800572a <_strtod_l+0x92>
 80056c4:	2900      	cmp	r1, #0
 80056c6:	d03b      	beq.n	8005740 <_strtod_l+0xa8>
 80056c8:	2200      	movs	r2, #0
 80056ca:	920e      	str	r2, [sp, #56]	; 0x38
 80056cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80056ce:	7832      	ldrb	r2, [r6, #0]
 80056d0:	2a30      	cmp	r2, #48	; 0x30
 80056d2:	f040 80b2 	bne.w	800583a <_strtod_l+0x1a2>
 80056d6:	7872      	ldrb	r2, [r6, #1]
 80056d8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80056dc:	2a58      	cmp	r2, #88	; 0x58
 80056de:	d16e      	bne.n	80057be <_strtod_l+0x126>
 80056e0:	9302      	str	r3, [sp, #8]
 80056e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e4:	4620      	mov	r0, r4
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	ab1a      	add	r3, sp, #104	; 0x68
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4a8c      	ldr	r2, [pc, #560]	; (8005920 <_strtod_l+0x288>)
 80056ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80056f0:	a919      	add	r1, sp, #100	; 0x64
 80056f2:	f002 fd5d 	bl	80081b0 <__gethex>
 80056f6:	f010 070f 	ands.w	r7, r0, #15
 80056fa:	4605      	mov	r5, r0
 80056fc:	d005      	beq.n	800570a <_strtod_l+0x72>
 80056fe:	2f06      	cmp	r7, #6
 8005700:	d128      	bne.n	8005754 <_strtod_l+0xbc>
 8005702:	2300      	movs	r3, #0
 8005704:	3601      	adds	r6, #1
 8005706:	9619      	str	r6, [sp, #100]	; 0x64
 8005708:	930e      	str	r3, [sp, #56]	; 0x38
 800570a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 85a0 	bne.w	8006252 <_strtod_l+0xbba>
 8005712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005714:	b1cb      	cbz	r3, 800574a <_strtod_l+0xb2>
 8005716:	4642      	mov	r2, r8
 8005718:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	b01f      	add	sp, #124	; 0x7c
 8005722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005726:	2920      	cmp	r1, #32
 8005728:	d1ce      	bne.n	80056c8 <_strtod_l+0x30>
 800572a:	3201      	adds	r2, #1
 800572c:	e7c1      	b.n	80056b2 <_strtod_l+0x1a>
 800572e:	292d      	cmp	r1, #45	; 0x2d
 8005730:	d1ca      	bne.n	80056c8 <_strtod_l+0x30>
 8005732:	2101      	movs	r1, #1
 8005734:	910e      	str	r1, [sp, #56]	; 0x38
 8005736:	1c51      	adds	r1, r2, #1
 8005738:	9119      	str	r1, [sp, #100]	; 0x64
 800573a:	7852      	ldrb	r2, [r2, #1]
 800573c:	2a00      	cmp	r2, #0
 800573e:	d1c5      	bne.n	80056cc <_strtod_l+0x34>
 8005740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005742:	9519      	str	r5, [sp, #100]	; 0x64
 8005744:	2b00      	cmp	r3, #0
 8005746:	f040 8582 	bne.w	800624e <_strtod_l+0xbb6>
 800574a:	4642      	mov	r2, r8
 800574c:	464b      	mov	r3, r9
 800574e:	e7e5      	b.n	800571c <_strtod_l+0x84>
 8005750:	2100      	movs	r1, #0
 8005752:	e7ef      	b.n	8005734 <_strtod_l+0x9c>
 8005754:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005756:	b13a      	cbz	r2, 8005768 <_strtod_l+0xd0>
 8005758:	2135      	movs	r1, #53	; 0x35
 800575a:	a81c      	add	r0, sp, #112	; 0x70
 800575c:	f003 fd38 	bl	80091d0 <__copybits>
 8005760:	4620      	mov	r0, r4
 8005762:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005764:	f003 f91c 	bl	80089a0 <_Bfree>
 8005768:	3f01      	subs	r7, #1
 800576a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800576c:	2f04      	cmp	r7, #4
 800576e:	d806      	bhi.n	800577e <_strtod_l+0xe6>
 8005770:	e8df f007 	tbb	[pc, r7]
 8005774:	201d0314 	.word	0x201d0314
 8005778:	14          	.byte	0x14
 8005779:	00          	.byte	0x00
 800577a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800577e:	05e9      	lsls	r1, r5, #23
 8005780:	bf48      	it	mi
 8005782:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800578a:	0d1b      	lsrs	r3, r3, #20
 800578c:	051b      	lsls	r3, r3, #20
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1bb      	bne.n	800570a <_strtod_l+0x72>
 8005792:	f001 fd7f 	bl	8007294 <__errno>
 8005796:	2322      	movs	r3, #34	; 0x22
 8005798:	6003      	str	r3, [r0, #0]
 800579a:	e7b6      	b.n	800570a <_strtod_l+0x72>
 800579c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80057a0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80057a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80057ac:	e7e7      	b.n	800577e <_strtod_l+0xe6>
 80057ae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005924 <_strtod_l+0x28c>
 80057b2:	e7e4      	b.n	800577e <_strtod_l+0xe6>
 80057b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80057b8:	f04f 38ff 	mov.w	r8, #4294967295
 80057bc:	e7df      	b.n	800577e <_strtod_l+0xe6>
 80057be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	9219      	str	r2, [sp, #100]	; 0x64
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b30      	cmp	r3, #48	; 0x30
 80057c8:	d0f9      	beq.n	80057be <_strtod_l+0x126>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d09d      	beq.n	800570a <_strtod_l+0x72>
 80057ce:	2301      	movs	r3, #1
 80057d0:	f04f 0a00 	mov.w	sl, #0
 80057d4:	220a      	movs	r2, #10
 80057d6:	46d3      	mov	fp, sl
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057dc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80057e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80057e4:	7806      	ldrb	r6, [r0, #0]
 80057e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80057ea:	b2d9      	uxtb	r1, r3
 80057ec:	2909      	cmp	r1, #9
 80057ee:	d926      	bls.n	800583e <_strtod_l+0x1a6>
 80057f0:	2201      	movs	r2, #1
 80057f2:	494d      	ldr	r1, [pc, #308]	; (8005928 <_strtod_l+0x290>)
 80057f4:	f001 fc6c 	bl	80070d0 <strncmp>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d030      	beq.n	800585e <_strtod_l+0x1c6>
 80057fc:	2000      	movs	r0, #0
 80057fe:	4632      	mov	r2, r6
 8005800:	4603      	mov	r3, r0
 8005802:	465e      	mov	r6, fp
 8005804:	9008      	str	r0, [sp, #32]
 8005806:	2a65      	cmp	r2, #101	; 0x65
 8005808:	d001      	beq.n	800580e <_strtod_l+0x176>
 800580a:	2a45      	cmp	r2, #69	; 0x45
 800580c:	d113      	bne.n	8005836 <_strtod_l+0x19e>
 800580e:	b91e      	cbnz	r6, 8005818 <_strtod_l+0x180>
 8005810:	9a05      	ldr	r2, [sp, #20]
 8005812:	4302      	orrs	r2, r0
 8005814:	d094      	beq.n	8005740 <_strtod_l+0xa8>
 8005816:	2600      	movs	r6, #0
 8005818:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800581a:	1c6a      	adds	r2, r5, #1
 800581c:	9219      	str	r2, [sp, #100]	; 0x64
 800581e:	786a      	ldrb	r2, [r5, #1]
 8005820:	2a2b      	cmp	r2, #43	; 0x2b
 8005822:	d074      	beq.n	800590e <_strtod_l+0x276>
 8005824:	2a2d      	cmp	r2, #45	; 0x2d
 8005826:	d078      	beq.n	800591a <_strtod_l+0x282>
 8005828:	f04f 0c00 	mov.w	ip, #0
 800582c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005830:	2909      	cmp	r1, #9
 8005832:	d97f      	bls.n	8005934 <_strtod_l+0x29c>
 8005834:	9519      	str	r5, [sp, #100]	; 0x64
 8005836:	2700      	movs	r7, #0
 8005838:	e09e      	b.n	8005978 <_strtod_l+0x2e0>
 800583a:	2300      	movs	r3, #0
 800583c:	e7c8      	b.n	80057d0 <_strtod_l+0x138>
 800583e:	f1bb 0f08 	cmp.w	fp, #8
 8005842:	bfd8      	it	le
 8005844:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005846:	f100 0001 	add.w	r0, r0, #1
 800584a:	bfd6      	itet	le
 800584c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005850:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005854:	930a      	strle	r3, [sp, #40]	; 0x28
 8005856:	f10b 0b01 	add.w	fp, fp, #1
 800585a:	9019      	str	r0, [sp, #100]	; 0x64
 800585c:	e7c1      	b.n	80057e2 <_strtod_l+0x14a>
 800585e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	9219      	str	r2, [sp, #100]	; 0x64
 8005864:	785a      	ldrb	r2, [r3, #1]
 8005866:	f1bb 0f00 	cmp.w	fp, #0
 800586a:	d037      	beq.n	80058dc <_strtod_l+0x244>
 800586c:	465e      	mov	r6, fp
 800586e:	9008      	str	r0, [sp, #32]
 8005870:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005874:	2b09      	cmp	r3, #9
 8005876:	d912      	bls.n	800589e <_strtod_l+0x206>
 8005878:	2301      	movs	r3, #1
 800587a:	e7c4      	b.n	8005806 <_strtod_l+0x16e>
 800587c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800587e:	3001      	adds	r0, #1
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	9219      	str	r2, [sp, #100]	; 0x64
 8005884:	785a      	ldrb	r2, [r3, #1]
 8005886:	2a30      	cmp	r2, #48	; 0x30
 8005888:	d0f8      	beq.n	800587c <_strtod_l+0x1e4>
 800588a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800588e:	2b08      	cmp	r3, #8
 8005890:	f200 84e4 	bhi.w	800625c <_strtod_l+0xbc4>
 8005894:	9008      	str	r0, [sp, #32]
 8005896:	2000      	movs	r0, #0
 8005898:	4606      	mov	r6, r0
 800589a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800589c:	930b      	str	r3, [sp, #44]	; 0x2c
 800589e:	3a30      	subs	r2, #48	; 0x30
 80058a0:	f100 0301 	add.w	r3, r0, #1
 80058a4:	d014      	beq.n	80058d0 <_strtod_l+0x238>
 80058a6:	9908      	ldr	r1, [sp, #32]
 80058a8:	eb00 0c06 	add.w	ip, r0, r6
 80058ac:	4419      	add	r1, r3
 80058ae:	9108      	str	r1, [sp, #32]
 80058b0:	4633      	mov	r3, r6
 80058b2:	210a      	movs	r1, #10
 80058b4:	4563      	cmp	r3, ip
 80058b6:	d113      	bne.n	80058e0 <_strtod_l+0x248>
 80058b8:	1833      	adds	r3, r6, r0
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	f106 0601 	add.w	r6, r6, #1
 80058c0:	4406      	add	r6, r0
 80058c2:	dc1a      	bgt.n	80058fa <_strtod_l+0x262>
 80058c4:	230a      	movs	r3, #10
 80058c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058c8:	fb03 2301 	mla	r3, r3, r1, r2
 80058cc:	930a      	str	r3, [sp, #40]	; 0x28
 80058ce:	2300      	movs	r3, #0
 80058d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80058d2:	4618      	mov	r0, r3
 80058d4:	1c51      	adds	r1, r2, #1
 80058d6:	9119      	str	r1, [sp, #100]	; 0x64
 80058d8:	7852      	ldrb	r2, [r2, #1]
 80058da:	e7c9      	b.n	8005870 <_strtod_l+0x1d8>
 80058dc:	4658      	mov	r0, fp
 80058de:	e7d2      	b.n	8005886 <_strtod_l+0x1ee>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	f103 0301 	add.w	r3, r3, #1
 80058e6:	dc03      	bgt.n	80058f0 <_strtod_l+0x258>
 80058e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80058ea:	434f      	muls	r7, r1
 80058ec:	970a      	str	r7, [sp, #40]	; 0x28
 80058ee:	e7e1      	b.n	80058b4 <_strtod_l+0x21c>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	bfd8      	it	le
 80058f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80058f8:	e7dc      	b.n	80058b4 <_strtod_l+0x21c>
 80058fa:	2e10      	cmp	r6, #16
 80058fc:	bfdc      	itt	le
 80058fe:	230a      	movle	r3, #10
 8005900:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005904:	e7e3      	b.n	80058ce <_strtod_l+0x236>
 8005906:	2300      	movs	r3, #0
 8005908:	9308      	str	r3, [sp, #32]
 800590a:	2301      	movs	r3, #1
 800590c:	e780      	b.n	8005810 <_strtod_l+0x178>
 800590e:	f04f 0c00 	mov.w	ip, #0
 8005912:	1caa      	adds	r2, r5, #2
 8005914:	9219      	str	r2, [sp, #100]	; 0x64
 8005916:	78aa      	ldrb	r2, [r5, #2]
 8005918:	e788      	b.n	800582c <_strtod_l+0x194>
 800591a:	f04f 0c01 	mov.w	ip, #1
 800591e:	e7f8      	b.n	8005912 <_strtod_l+0x27a>
 8005920:	080099b8 	.word	0x080099b8
 8005924:	7ff00000 	.word	0x7ff00000
 8005928:	080099b6 	.word	0x080099b6
 800592c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800592e:	1c51      	adds	r1, r2, #1
 8005930:	9119      	str	r1, [sp, #100]	; 0x64
 8005932:	7852      	ldrb	r2, [r2, #1]
 8005934:	2a30      	cmp	r2, #48	; 0x30
 8005936:	d0f9      	beq.n	800592c <_strtod_l+0x294>
 8005938:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800593c:	2908      	cmp	r1, #8
 800593e:	f63f af7a 	bhi.w	8005836 <_strtod_l+0x19e>
 8005942:	3a30      	subs	r2, #48	; 0x30
 8005944:	9209      	str	r2, [sp, #36]	; 0x24
 8005946:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005948:	920c      	str	r2, [sp, #48]	; 0x30
 800594a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800594c:	1c57      	adds	r7, r2, #1
 800594e:	9719      	str	r7, [sp, #100]	; 0x64
 8005950:	7852      	ldrb	r2, [r2, #1]
 8005952:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005956:	f1be 0f09 	cmp.w	lr, #9
 800595a:	d938      	bls.n	80059ce <_strtod_l+0x336>
 800595c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800595e:	1a7f      	subs	r7, r7, r1
 8005960:	2f08      	cmp	r7, #8
 8005962:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005966:	dc03      	bgt.n	8005970 <_strtod_l+0x2d8>
 8005968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800596a:	428f      	cmp	r7, r1
 800596c:	bfa8      	it	ge
 800596e:	460f      	movge	r7, r1
 8005970:	f1bc 0f00 	cmp.w	ip, #0
 8005974:	d000      	beq.n	8005978 <_strtod_l+0x2e0>
 8005976:	427f      	negs	r7, r7
 8005978:	2e00      	cmp	r6, #0
 800597a:	d14f      	bne.n	8005a1c <_strtod_l+0x384>
 800597c:	9905      	ldr	r1, [sp, #20]
 800597e:	4301      	orrs	r1, r0
 8005980:	f47f aec3 	bne.w	800570a <_strtod_l+0x72>
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f aedb 	bne.w	8005740 <_strtod_l+0xa8>
 800598a:	2a69      	cmp	r2, #105	; 0x69
 800598c:	d029      	beq.n	80059e2 <_strtod_l+0x34a>
 800598e:	dc26      	bgt.n	80059de <_strtod_l+0x346>
 8005990:	2a49      	cmp	r2, #73	; 0x49
 8005992:	d026      	beq.n	80059e2 <_strtod_l+0x34a>
 8005994:	2a4e      	cmp	r2, #78	; 0x4e
 8005996:	f47f aed3 	bne.w	8005740 <_strtod_l+0xa8>
 800599a:	499a      	ldr	r1, [pc, #616]	; (8005c04 <_strtod_l+0x56c>)
 800599c:	a819      	add	r0, sp, #100	; 0x64
 800599e:	f002 fe49 	bl	8008634 <__match>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	f43f aecc 	beq.w	8005740 <_strtod_l+0xa8>
 80059a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b28      	cmp	r3, #40	; 0x28
 80059ae:	d12f      	bne.n	8005a10 <_strtod_l+0x378>
 80059b0:	4995      	ldr	r1, [pc, #596]	; (8005c08 <_strtod_l+0x570>)
 80059b2:	aa1c      	add	r2, sp, #112	; 0x70
 80059b4:	a819      	add	r0, sp, #100	; 0x64
 80059b6:	f002 fe51 	bl	800865c <__hexnan>
 80059ba:	2805      	cmp	r0, #5
 80059bc:	d128      	bne.n	8005a10 <_strtod_l+0x378>
 80059be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80059c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80059c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80059cc:	e69d      	b.n	800570a <_strtod_l+0x72>
 80059ce:	210a      	movs	r1, #10
 80059d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059d2:	fb01 2107 	mla	r1, r1, r7, r2
 80059d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80059da:	9209      	str	r2, [sp, #36]	; 0x24
 80059dc:	e7b5      	b.n	800594a <_strtod_l+0x2b2>
 80059de:	2a6e      	cmp	r2, #110	; 0x6e
 80059e0:	e7d9      	b.n	8005996 <_strtod_l+0x2fe>
 80059e2:	498a      	ldr	r1, [pc, #552]	; (8005c0c <_strtod_l+0x574>)
 80059e4:	a819      	add	r0, sp, #100	; 0x64
 80059e6:	f002 fe25 	bl	8008634 <__match>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f43f aea8 	beq.w	8005740 <_strtod_l+0xa8>
 80059f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059f2:	4987      	ldr	r1, [pc, #540]	; (8005c10 <_strtod_l+0x578>)
 80059f4:	3b01      	subs	r3, #1
 80059f6:	a819      	add	r0, sp, #100	; 0x64
 80059f8:	9319      	str	r3, [sp, #100]	; 0x64
 80059fa:	f002 fe1b 	bl	8008634 <__match>
 80059fe:	b910      	cbnz	r0, 8005a06 <_strtod_l+0x36e>
 8005a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a02:	3301      	adds	r3, #1
 8005a04:	9319      	str	r3, [sp, #100]	; 0x64
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005c14 <_strtod_l+0x57c>
 8005a0e:	e67c      	b.n	800570a <_strtod_l+0x72>
 8005a10:	4881      	ldr	r0, [pc, #516]	; (8005c18 <_strtod_l+0x580>)
 8005a12:	f001 fc89 	bl	8007328 <nan>
 8005a16:	4680      	mov	r8, r0
 8005a18:	4689      	mov	r9, r1
 8005a1a:	e676      	b.n	800570a <_strtod_l+0x72>
 8005a1c:	9b08      	ldr	r3, [sp, #32]
 8005a1e:	f1bb 0f00 	cmp.w	fp, #0
 8005a22:	bf08      	it	eq
 8005a24:	46b3      	moveq	fp, r6
 8005a26:	1afb      	subs	r3, r7, r3
 8005a28:	2e10      	cmp	r6, #16
 8005a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a2c:	4635      	mov	r5, r6
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	bfa8      	it	ge
 8005a32:	2510      	movge	r5, #16
 8005a34:	f7fa fce0 	bl	80003f8 <__aeabi_ui2d>
 8005a38:	2e09      	cmp	r6, #9
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	dd13      	ble.n	8005a68 <_strtod_l+0x3d0>
 8005a40:	4b76      	ldr	r3, [pc, #472]	; (8005c1c <_strtod_l+0x584>)
 8005a42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005a46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a4a:	f7fa fd4f 	bl	80004ec <__aeabi_dmul>
 8005a4e:	4680      	mov	r8, r0
 8005a50:	4650      	mov	r0, sl
 8005a52:	4689      	mov	r9, r1
 8005a54:	f7fa fcd0 	bl	80003f8 <__aeabi_ui2d>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fa fb8e 	bl	8000180 <__adddf3>
 8005a64:	4680      	mov	r8, r0
 8005a66:	4689      	mov	r9, r1
 8005a68:	2e0f      	cmp	r6, #15
 8005a6a:	dc36      	bgt.n	8005ada <_strtod_l+0x442>
 8005a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f43f ae4b 	beq.w	800570a <_strtod_l+0x72>
 8005a74:	dd22      	ble.n	8005abc <_strtod_l+0x424>
 8005a76:	2b16      	cmp	r3, #22
 8005a78:	dc09      	bgt.n	8005a8e <_strtod_l+0x3f6>
 8005a7a:	4968      	ldr	r1, [pc, #416]	; (8005c1c <_strtod_l+0x584>)
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a82:	464b      	mov	r3, r9
 8005a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a88:	f7fa fd30 	bl	80004ec <__aeabi_dmul>
 8005a8c:	e7c3      	b.n	8005a16 <_strtod_l+0x37e>
 8005a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a90:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005a94:	4293      	cmp	r3, r2
 8005a96:	db20      	blt.n	8005ada <_strtod_l+0x442>
 8005a98:	4c60      	ldr	r4, [pc, #384]	; (8005c1c <_strtod_l+0x584>)
 8005a9a:	f1c6 060f 	rsb	r6, r6, #15
 8005a9e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005aa2:	4642      	mov	r2, r8
 8005aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	f7fa fd1f 	bl	80004ec <__aeabi_dmul>
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	1b9e      	subs	r6, r3, r6
 8005ab2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005aba:	e7e5      	b.n	8005a88 <_strtod_l+0x3f0>
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	3316      	adds	r3, #22
 8005ac0:	db0b      	blt.n	8005ada <_strtod_l+0x442>
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	1bdf      	subs	r7, r3, r7
 8005ac8:	4b54      	ldr	r3, [pc, #336]	; (8005c1c <_strtod_l+0x584>)
 8005aca:	4649      	mov	r1, r9
 8005acc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad4:	f7fa fe34 	bl	8000740 <__aeabi_ddiv>
 8005ad8:	e79d      	b.n	8005a16 <_strtod_l+0x37e>
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	1b75      	subs	r5, r6, r5
 8005ade:	441d      	add	r5, r3
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	dd70      	ble.n	8005bc6 <_strtod_l+0x52e>
 8005ae4:	f015 030f 	ands.w	r3, r5, #15
 8005ae8:	d00a      	beq.n	8005b00 <_strtod_l+0x468>
 8005aea:	494c      	ldr	r1, [pc, #304]	; (8005c1c <_strtod_l+0x584>)
 8005aec:	4642      	mov	r2, r8
 8005aee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005af6:	464b      	mov	r3, r9
 8005af8:	f7fa fcf8 	bl	80004ec <__aeabi_dmul>
 8005afc:	4680      	mov	r8, r0
 8005afe:	4689      	mov	r9, r1
 8005b00:	f035 050f 	bics.w	r5, r5, #15
 8005b04:	d04d      	beq.n	8005ba2 <_strtod_l+0x50a>
 8005b06:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005b0a:	dd22      	ble.n	8005b52 <_strtod_l+0x4ba>
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	46b3      	mov	fp, r6
 8005b10:	960b      	str	r6, [sp, #44]	; 0x2c
 8005b12:	9608      	str	r6, [sp, #32]
 8005b14:	2322      	movs	r3, #34	; 0x22
 8005b16:	f04f 0800 	mov.w	r8, #0
 8005b1a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005c14 <_strtod_l+0x57c>
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f43f adf1 	beq.w	800570a <_strtod_l+0x72>
 8005b28:	4620      	mov	r0, r4
 8005b2a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b2c:	f002 ff38 	bl	80089a0 <_Bfree>
 8005b30:	4620      	mov	r0, r4
 8005b32:	9908      	ldr	r1, [sp, #32]
 8005b34:	f002 ff34 	bl	80089a0 <_Bfree>
 8005b38:	4659      	mov	r1, fp
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f002 ff30 	bl	80089a0 <_Bfree>
 8005b40:	4620      	mov	r0, r4
 8005b42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b44:	f002 ff2c 	bl	80089a0 <_Bfree>
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f002 ff28 	bl	80089a0 <_Bfree>
 8005b50:	e5db      	b.n	800570a <_strtod_l+0x72>
 8005b52:	4b33      	ldr	r3, [pc, #204]	; (8005c20 <_strtod_l+0x588>)
 8005b54:	4640      	mov	r0, r8
 8005b56:	9305      	str	r3, [sp, #20]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	469a      	mov	sl, r3
 8005b5e:	112d      	asrs	r5, r5, #4
 8005b60:	2d01      	cmp	r5, #1
 8005b62:	dc21      	bgt.n	8005ba8 <_strtod_l+0x510>
 8005b64:	b10b      	cbz	r3, 8005b6a <_strtod_l+0x4d2>
 8005b66:	4680      	mov	r8, r0
 8005b68:	4689      	mov	r9, r1
 8005b6a:	492d      	ldr	r1, [pc, #180]	; (8005c20 <_strtod_l+0x588>)
 8005b6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005b70:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b74:	4642      	mov	r2, r8
 8005b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	f7fa fcb6 	bl	80004ec <__aeabi_dmul>
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <_strtod_l+0x57c>)
 8005b82:	460a      	mov	r2, r1
 8005b84:	400b      	ands	r3, r1
 8005b86:	4927      	ldr	r1, [pc, #156]	; (8005c24 <_strtod_l+0x58c>)
 8005b88:	4680      	mov	r8, r0
 8005b8a:	428b      	cmp	r3, r1
 8005b8c:	d8be      	bhi.n	8005b0c <_strtod_l+0x474>
 8005b8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b92:	428b      	cmp	r3, r1
 8005b94:	bf86      	itte	hi
 8005b96:	f04f 38ff 	movhi.w	r8, #4294967295
 8005b9a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8005c28 <_strtod_l+0x590>
 8005b9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	e07b      	b.n	8005ca0 <_strtod_l+0x608>
 8005ba8:	07ea      	lsls	r2, r5, #31
 8005baa:	d505      	bpl.n	8005bb8 <_strtod_l+0x520>
 8005bac:	9b05      	ldr	r3, [sp, #20]
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f7fa fc9b 	bl	80004ec <__aeabi_dmul>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	9a05      	ldr	r2, [sp, #20]
 8005bba:	f10a 0a01 	add.w	sl, sl, #1
 8005bbe:	3208      	adds	r2, #8
 8005bc0:	106d      	asrs	r5, r5, #1
 8005bc2:	9205      	str	r2, [sp, #20]
 8005bc4:	e7cc      	b.n	8005b60 <_strtod_l+0x4c8>
 8005bc6:	d0ec      	beq.n	8005ba2 <_strtod_l+0x50a>
 8005bc8:	426d      	negs	r5, r5
 8005bca:	f015 020f 	ands.w	r2, r5, #15
 8005bce:	d00a      	beq.n	8005be6 <_strtod_l+0x54e>
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <_strtod_l+0x584>)
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd8:	4649      	mov	r1, r9
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fdaf 	bl	8000740 <__aeabi_ddiv>
 8005be2:	4680      	mov	r8, r0
 8005be4:	4689      	mov	r9, r1
 8005be6:	112d      	asrs	r5, r5, #4
 8005be8:	d0db      	beq.n	8005ba2 <_strtod_l+0x50a>
 8005bea:	2d1f      	cmp	r5, #31
 8005bec:	dd1e      	ble.n	8005c2c <_strtod_l+0x594>
 8005bee:	2600      	movs	r6, #0
 8005bf0:	46b3      	mov	fp, r6
 8005bf2:	960b      	str	r6, [sp, #44]	; 0x2c
 8005bf4:	9608      	str	r6, [sp, #32]
 8005bf6:	2322      	movs	r3, #34	; 0x22
 8005bf8:	f04f 0800 	mov.w	r8, #0
 8005bfc:	f04f 0900 	mov.w	r9, #0
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	e78d      	b.n	8005b20 <_strtod_l+0x488>
 8005c04:	08009b16 	.word	0x08009b16
 8005c08:	080099cc 	.word	0x080099cc
 8005c0c:	08009b0e 	.word	0x08009b0e
 8005c10:	08009bf5 	.word	0x08009bf5
 8005c14:	7ff00000 	.word	0x7ff00000
 8005c18:	08009bf1 	.word	0x08009bf1
 8005c1c:	08009d50 	.word	0x08009d50
 8005c20:	08009d28 	.word	0x08009d28
 8005c24:	7ca00000 	.word	0x7ca00000
 8005c28:	7fefffff 	.word	0x7fefffff
 8005c2c:	f015 0310 	ands.w	r3, r5, #16
 8005c30:	bf18      	it	ne
 8005c32:	236a      	movne	r3, #106	; 0x6a
 8005c34:	4640      	mov	r0, r8
 8005c36:	9305      	str	r3, [sp, #20]
 8005c38:	4649      	mov	r1, r9
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8005f08 <_strtod_l+0x870>
 8005c40:	07ea      	lsls	r2, r5, #31
 8005c42:	d504      	bpl.n	8005c4e <_strtod_l+0x5b6>
 8005c44:	e9da 2300 	ldrd	r2, r3, [sl]
 8005c48:	f7fa fc50 	bl	80004ec <__aeabi_dmul>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	106d      	asrs	r5, r5, #1
 8005c50:	f10a 0a08 	add.w	sl, sl, #8
 8005c54:	d1f4      	bne.n	8005c40 <_strtod_l+0x5a8>
 8005c56:	b10b      	cbz	r3, 8005c5c <_strtod_l+0x5c4>
 8005c58:	4680      	mov	r8, r0
 8005c5a:	4689      	mov	r9, r1
 8005c5c:	9b05      	ldr	r3, [sp, #20]
 8005c5e:	b1bb      	cbz	r3, 8005c90 <_strtod_l+0x5f8>
 8005c60:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005c64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	dd10      	ble.n	8005c90 <_strtod_l+0x5f8>
 8005c6e:	2b1f      	cmp	r3, #31
 8005c70:	f340 8128 	ble.w	8005ec4 <_strtod_l+0x82c>
 8005c74:	2b34      	cmp	r3, #52	; 0x34
 8005c76:	bfd8      	it	le
 8005c78:	f04f 33ff 	movle.w	r3, #4294967295
 8005c7c:	f04f 0800 	mov.w	r8, #0
 8005c80:	bfcf      	iteee	gt
 8005c82:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005c86:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005c8a:	4093      	lslle	r3, r2
 8005c8c:	ea03 0901 	andle.w	r9, r3, r1
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	4640      	mov	r0, r8
 8005c96:	4649      	mov	r1, r9
 8005c98:	f7fa fe90 	bl	80009bc <__aeabi_dcmpeq>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d1a6      	bne.n	8005bee <_strtod_l+0x556>
 8005ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca2:	465a      	mov	r2, fp
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4633      	mov	r3, r6
 8005caa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cac:	f002 fee0 	bl	8008a70 <__s2b>
 8005cb0:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	f43f af2a 	beq.w	8005b0c <_strtod_l+0x474>
 8005cb8:	2600      	movs	r6, #0
 8005cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cbc:	9b08      	ldr	r3, [sp, #32]
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	eba3 0307 	sub.w	r3, r3, r7
 8005cc4:	bfa8      	it	ge
 8005cc6:	2300      	movge	r3, #0
 8005cc8:	46b3      	mov	fp, r6
 8005cca:	9312      	str	r3, [sp, #72]	; 0x48
 8005ccc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005cd0:	9316      	str	r3, [sp, #88]	; 0x58
 8005cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	6859      	ldr	r1, [r3, #4]
 8005cd8:	f002 fe22 	bl	8008920 <_Balloc>
 8005cdc:	9008      	str	r0, [sp, #32]
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f43f af18 	beq.w	8005b14 <_strtod_l+0x47c>
 8005ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce6:	300c      	adds	r0, #12
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	f103 010c 	add.w	r1, r3, #12
 8005cee:	3202      	adds	r2, #2
 8005cf0:	0092      	lsls	r2, r2, #2
 8005cf2:	f001 fb0a 	bl	800730a <memcpy>
 8005cf6:	ab1c      	add	r3, sp, #112	; 0x70
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	ab1b      	add	r3, sp, #108	; 0x6c
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4642      	mov	r2, r8
 8005d00:	464b      	mov	r3, r9
 8005d02:	4620      	mov	r0, r4
 8005d04:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005d08:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005d0c:	f003 f9dc 	bl	80090c8 <__d2b>
 8005d10:	901a      	str	r0, [sp, #104]	; 0x68
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f43f aefe 	beq.w	8005b14 <_strtod_l+0x47c>
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f002 ff40 	bl	8008ba0 <__i2b>
 8005d20:	4683      	mov	fp, r0
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f43f aef6 	beq.w	8005b14 <_strtod_l+0x47c>
 8005d28:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005d2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d2c:	2f00      	cmp	r7, #0
 8005d2e:	bfab      	itete	ge
 8005d30:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8005d32:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005d34:	eb07 0a03 	addge.w	sl, r7, r3
 8005d38:	1bdd      	sublt	r5, r3, r7
 8005d3a:	9b05      	ldr	r3, [sp, #20]
 8005d3c:	bfa8      	it	ge
 8005d3e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005d40:	eba7 0703 	sub.w	r7, r7, r3
 8005d44:	4417      	add	r7, r2
 8005d46:	4b71      	ldr	r3, [pc, #452]	; (8005f0c <_strtod_l+0x874>)
 8005d48:	f107 37ff 	add.w	r7, r7, #4294967295
 8005d4c:	bfb8      	it	lt
 8005d4e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8005d52:	429f      	cmp	r7, r3
 8005d54:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d58:	f280 80c7 	bge.w	8005eea <_strtod_l+0x852>
 8005d5c:	1bdb      	subs	r3, r3, r7
 8005d5e:	2b1f      	cmp	r3, #31
 8005d60:	f04f 0101 	mov.w	r1, #1
 8005d64:	eba2 0203 	sub.w	r2, r2, r3
 8005d68:	f300 80b3 	bgt.w	8005ed2 <_strtod_l+0x83a>
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d72:	2300      	movs	r3, #0
 8005d74:	9310      	str	r3, [sp, #64]	; 0x40
 8005d76:	eb0a 0702 	add.w	r7, sl, r2
 8005d7a:	9b05      	ldr	r3, [sp, #20]
 8005d7c:	45ba      	cmp	sl, r7
 8005d7e:	4415      	add	r5, r2
 8005d80:	441d      	add	r5, r3
 8005d82:	4653      	mov	r3, sl
 8005d84:	bfa8      	it	ge
 8005d86:	463b      	movge	r3, r7
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	bfa8      	it	ge
 8005d8c:	462b      	movge	r3, r5
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfc2      	ittt	gt
 8005d92:	1aff      	subgt	r7, r7, r3
 8005d94:	1aed      	subgt	r5, r5, r3
 8005d96:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dd17      	ble.n	8005dd0 <_strtod_l+0x738>
 8005da0:	4659      	mov	r1, fp
 8005da2:	461a      	mov	r2, r3
 8005da4:	4620      	mov	r0, r4
 8005da6:	f002 ffb9 	bl	8008d1c <__pow5mult>
 8005daa:	4683      	mov	fp, r0
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f43f aeb1 	beq.w	8005b14 <_strtod_l+0x47c>
 8005db2:	4601      	mov	r1, r0
 8005db4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005db6:	4620      	mov	r0, r4
 8005db8:	f002 ff08 	bl	8008bcc <__multiply>
 8005dbc:	900a      	str	r0, [sp, #40]	; 0x28
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f43f aea8 	beq.w	8005b14 <_strtod_l+0x47c>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005dc8:	f002 fdea 	bl	80089a0 <_Bfree>
 8005dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dce:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd0:	2f00      	cmp	r7, #0
 8005dd2:	f300 808f 	bgt.w	8005ef4 <_strtod_l+0x85c>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dd08      	ble.n	8005dee <_strtod_l+0x756>
 8005ddc:	4620      	mov	r0, r4
 8005dde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005de0:	9908      	ldr	r1, [sp, #32]
 8005de2:	f002 ff9b 	bl	8008d1c <__pow5mult>
 8005de6:	9008      	str	r0, [sp, #32]
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f43f ae93 	beq.w	8005b14 <_strtod_l+0x47c>
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	dd08      	ble.n	8005e04 <_strtod_l+0x76c>
 8005df2:	462a      	mov	r2, r5
 8005df4:	4620      	mov	r0, r4
 8005df6:	9908      	ldr	r1, [sp, #32]
 8005df8:	f002 ffea 	bl	8008dd0 <__lshift>
 8005dfc:	9008      	str	r0, [sp, #32]
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f43f ae88 	beq.w	8005b14 <_strtod_l+0x47c>
 8005e04:	f1ba 0f00 	cmp.w	sl, #0
 8005e08:	dd08      	ble.n	8005e1c <_strtod_l+0x784>
 8005e0a:	4659      	mov	r1, fp
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f002 ffde 	bl	8008dd0 <__lshift>
 8005e14:	4683      	mov	fp, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f ae7c 	beq.w	8005b14 <_strtod_l+0x47c>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	9a08      	ldr	r2, [sp, #32]
 8005e20:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e22:	f003 f85d 	bl	8008ee0 <__mdiff>
 8005e26:	4606      	mov	r6, r0
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f43f ae73 	beq.w	8005b14 <_strtod_l+0x47c>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	68c3      	ldr	r3, [r0, #12]
 8005e32:	4659      	mov	r1, fp
 8005e34:	60c5      	str	r5, [r0, #12]
 8005e36:	930a      	str	r3, [sp, #40]	; 0x28
 8005e38:	f003 f836 	bl	8008ea8 <__mcmp>
 8005e3c:	42a8      	cmp	r0, r5
 8005e3e:	da6b      	bge.n	8005f18 <_strtod_l+0x880>
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	ea53 0308 	orrs.w	r3, r3, r8
 8005e46:	f040 808f 	bne.w	8005f68 <_strtod_l+0x8d0>
 8005e4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 808a 	bne.w	8005f68 <_strtod_l+0x8d0>
 8005e54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e58:	0d1b      	lsrs	r3, r3, #20
 8005e5a:	051b      	lsls	r3, r3, #20
 8005e5c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e60:	f240 8082 	bls.w	8005f68 <_strtod_l+0x8d0>
 8005e64:	6973      	ldr	r3, [r6, #20]
 8005e66:	b913      	cbnz	r3, 8005e6e <_strtod_l+0x7d6>
 8005e68:	6933      	ldr	r3, [r6, #16]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	dd7c      	ble.n	8005f68 <_strtod_l+0x8d0>
 8005e6e:	4631      	mov	r1, r6
 8005e70:	2201      	movs	r2, #1
 8005e72:	4620      	mov	r0, r4
 8005e74:	f002 ffac 	bl	8008dd0 <__lshift>
 8005e78:	4659      	mov	r1, fp
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	f003 f814 	bl	8008ea8 <__mcmp>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	dd71      	ble.n	8005f68 <_strtod_l+0x8d0>
 8005e84:	9905      	ldr	r1, [sp, #20]
 8005e86:	464b      	mov	r3, r9
 8005e88:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <_strtod_l+0x878>)
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	f000 808d 	beq.w	8005faa <_strtod_l+0x912>
 8005e90:	ea02 0109 	and.w	r1, r2, r9
 8005e94:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e98:	f300 8087 	bgt.w	8005faa <_strtod_l+0x912>
 8005e9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ea0:	f77f aea9 	ble.w	8005bf6 <_strtod_l+0x55e>
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <_strtod_l+0x87c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f7fa fb1e 	bl	80004ec <__aeabi_dmul>
 8005eb0:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <_strtod_l+0x878>)
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	4689      	mov	r9, r1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f ae35 	bne.w	8005b28 <_strtod_l+0x490>
 8005ebe:	2322      	movs	r3, #34	; 0x22
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	e631      	b.n	8005b28 <_strtod_l+0x490>
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	ea03 0808 	and.w	r8, r3, r8
 8005ed0:	e6de      	b.n	8005c90 <_strtod_l+0x5f8>
 8005ed2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8005ed6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8005eda:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8005ede:	37e2      	adds	r7, #226	; 0xe2
 8005ee0:	fa01 f307 	lsl.w	r3, r1, r7
 8005ee4:	9310      	str	r3, [sp, #64]	; 0x40
 8005ee6:	9113      	str	r1, [sp, #76]	; 0x4c
 8005ee8:	e745      	b.n	8005d76 <_strtod_l+0x6de>
 8005eea:	2300      	movs	r3, #0
 8005eec:	9310      	str	r3, [sp, #64]	; 0x40
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ef2:	e740      	b.n	8005d76 <_strtod_l+0x6de>
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005efa:	f002 ff69 	bl	8008dd0 <__lshift>
 8005efe:	901a      	str	r0, [sp, #104]	; 0x68
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f47f af68 	bne.w	8005dd6 <_strtod_l+0x73e>
 8005f06:	e605      	b.n	8005b14 <_strtod_l+0x47c>
 8005f08:	080099e0 	.word	0x080099e0
 8005f0c:	fffffc02 	.word	0xfffffc02
 8005f10:	7ff00000 	.word	0x7ff00000
 8005f14:	39500000 	.word	0x39500000
 8005f18:	46ca      	mov	sl, r9
 8005f1a:	d165      	bne.n	8005fe8 <_strtod_l+0x950>
 8005f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f22:	b352      	cbz	r2, 8005f7a <_strtod_l+0x8e2>
 8005f24:	4a9e      	ldr	r2, [pc, #632]	; (80061a0 <_strtod_l+0xb08>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d12a      	bne.n	8005f80 <_strtod_l+0x8e8>
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	b1fb      	cbz	r3, 8005f70 <_strtod_l+0x8d8>
 8005f30:	4b9c      	ldr	r3, [pc, #624]	; (80061a4 <_strtod_l+0xb0c>)
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	ea09 0303 	and.w	r3, r9, r3
 8005f3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f3e:	d81a      	bhi.n	8005f76 <_strtod_l+0x8de>
 8005f40:	0d1b      	lsrs	r3, r3, #20
 8005f42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	4299      	cmp	r1, r3
 8005f4c:	d118      	bne.n	8005f80 <_strtod_l+0x8e8>
 8005f4e:	4b96      	ldr	r3, [pc, #600]	; (80061a8 <_strtod_l+0xb10>)
 8005f50:	459a      	cmp	sl, r3
 8005f52:	d102      	bne.n	8005f5a <_strtod_l+0x8c2>
 8005f54:	3101      	adds	r1, #1
 8005f56:	f43f addd 	beq.w	8005b14 <_strtod_l+0x47c>
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	4b91      	ldr	r3, [pc, #580]	; (80061a4 <_strtod_l+0xb0c>)
 8005f60:	ea0a 0303 	and.w	r3, sl, r3
 8005f64:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005f68:	9b05      	ldr	r3, [sp, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d19a      	bne.n	8005ea4 <_strtod_l+0x80c>
 8005f6e:	e5db      	b.n	8005b28 <_strtod_l+0x490>
 8005f70:	f04f 33ff 	mov.w	r3, #4294967295
 8005f74:	e7e9      	b.n	8005f4a <_strtod_l+0x8b2>
 8005f76:	4613      	mov	r3, r2
 8005f78:	e7e7      	b.n	8005f4a <_strtod_l+0x8b2>
 8005f7a:	ea53 0308 	orrs.w	r3, r3, r8
 8005f7e:	d081      	beq.n	8005e84 <_strtod_l+0x7ec>
 8005f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f82:	b1e3      	cbz	r3, 8005fbe <_strtod_l+0x926>
 8005f84:	ea13 0f0a 	tst.w	r3, sl
 8005f88:	d0ee      	beq.n	8005f68 <_strtod_l+0x8d0>
 8005f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	9a05      	ldr	r2, [sp, #20]
 8005f92:	b1c3      	cbz	r3, 8005fc6 <_strtod_l+0x92e>
 8005f94:	f7ff fb5f 	bl	8005656 <sulp>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fa0:	f7fa f8ee 	bl	8000180 <__adddf3>
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4689      	mov	r9, r1
 8005fa8:	e7de      	b.n	8005f68 <_strtod_l+0x8d0>
 8005faa:	4013      	ands	r3, r2
 8005fac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005fb0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005fb4:	f04f 38ff 	mov.w	r8, #4294967295
 8005fb8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005fbc:	e7d4      	b.n	8005f68 <_strtod_l+0x8d0>
 8005fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005fc0:	ea13 0f08 	tst.w	r3, r8
 8005fc4:	e7e0      	b.n	8005f88 <_strtod_l+0x8f0>
 8005fc6:	f7ff fb46 	bl	8005656 <sulp>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fd2:	f7fa f8d3 	bl	800017c <__aeabi_dsub>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	f7fa fced 	bl	80009bc <__aeabi_dcmpeq>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d0c0      	beq.n	8005f68 <_strtod_l+0x8d0>
 8005fe6:	e606      	b.n	8005bf6 <_strtod_l+0x55e>
 8005fe8:	4659      	mov	r1, fp
 8005fea:	4630      	mov	r0, r6
 8005fec:	f003 f8c2 	bl	8009174 <__ratio>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ffe:	f7fa fcf1 	bl	80009e4 <__aeabi_dcmple>
 8006002:	2800      	cmp	r0, #0
 8006004:	d06f      	beq.n	80060e6 <_strtod_l+0xa4e>
 8006006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	d17c      	bne.n	8006106 <_strtod_l+0xa6e>
 800600c:	f1b8 0f00 	cmp.w	r8, #0
 8006010:	d159      	bne.n	80060c6 <_strtod_l+0xa2e>
 8006012:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006016:	2b00      	cmp	r3, #0
 8006018:	d17b      	bne.n	8006112 <_strtod_l+0xa7a>
 800601a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800601e:	2200      	movs	r2, #0
 8006020:	4b62      	ldr	r3, [pc, #392]	; (80061ac <_strtod_l+0xb14>)
 8006022:	f7fa fcd5 	bl	80009d0 <__aeabi_dcmplt>
 8006026:	2800      	cmp	r0, #0
 8006028:	d15a      	bne.n	80060e0 <_strtod_l+0xa48>
 800602a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800602e:	2200      	movs	r2, #0
 8006030:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <_strtod_l+0xb18>)
 8006032:	f7fa fa5b 	bl	80004ec <__aeabi_dmul>
 8006036:	4605      	mov	r5, r0
 8006038:	460f      	mov	r7, r1
 800603a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800603e:	9506      	str	r5, [sp, #24]
 8006040:	9307      	str	r3, [sp, #28]
 8006042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006046:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800604a:	4b56      	ldr	r3, [pc, #344]	; (80061a4 <_strtod_l+0xb0c>)
 800604c:	4a55      	ldr	r2, [pc, #340]	; (80061a4 <_strtod_l+0xb0c>)
 800604e:	ea0a 0303 	and.w	r3, sl, r3
 8006052:	9313      	str	r3, [sp, #76]	; 0x4c
 8006054:	4b57      	ldr	r3, [pc, #348]	; (80061b4 <_strtod_l+0xb1c>)
 8006056:	ea0a 0202 	and.w	r2, sl, r2
 800605a:	429a      	cmp	r2, r3
 800605c:	f040 80b0 	bne.w	80061c0 <_strtod_l+0xb28>
 8006060:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006064:	4640      	mov	r0, r8
 8006066:	4649      	mov	r1, r9
 8006068:	f002 ffc6 	bl	8008ff8 <__ulp>
 800606c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006070:	f7fa fa3c 	bl	80004ec <__aeabi_dmul>
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	f7fa f882 	bl	8000180 <__adddf3>
 800607c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80061a4 <_strtod_l+0xb0c>
 8006080:	4a4d      	ldr	r2, [pc, #308]	; (80061b8 <_strtod_l+0xb20>)
 8006082:	ea01 0a0a 	and.w	sl, r1, sl
 8006086:	4592      	cmp	sl, r2
 8006088:	4680      	mov	r8, r0
 800608a:	d948      	bls.n	800611e <_strtod_l+0xa86>
 800608c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800608e:	4b46      	ldr	r3, [pc, #280]	; (80061a8 <_strtod_l+0xb10>)
 8006090:	429a      	cmp	r2, r3
 8006092:	d103      	bne.n	800609c <_strtod_l+0xa04>
 8006094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006096:	3301      	adds	r3, #1
 8006098:	f43f ad3c 	beq.w	8005b14 <_strtod_l+0x47c>
 800609c:	f04f 38ff 	mov.w	r8, #4294967295
 80060a0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80061a8 <_strtod_l+0xb10>
 80060a4:	4620      	mov	r0, r4
 80060a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060a8:	f002 fc7a 	bl	80089a0 <_Bfree>
 80060ac:	4620      	mov	r0, r4
 80060ae:	9908      	ldr	r1, [sp, #32]
 80060b0:	f002 fc76 	bl	80089a0 <_Bfree>
 80060b4:	4659      	mov	r1, fp
 80060b6:	4620      	mov	r0, r4
 80060b8:	f002 fc72 	bl	80089a0 <_Bfree>
 80060bc:	4631      	mov	r1, r6
 80060be:	4620      	mov	r0, r4
 80060c0:	f002 fc6e 	bl	80089a0 <_Bfree>
 80060c4:	e605      	b.n	8005cd2 <_strtod_l+0x63a>
 80060c6:	f1b8 0f01 	cmp.w	r8, #1
 80060ca:	d103      	bne.n	80060d4 <_strtod_l+0xa3c>
 80060cc:	f1b9 0f00 	cmp.w	r9, #0
 80060d0:	f43f ad91 	beq.w	8005bf6 <_strtod_l+0x55e>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b39      	ldr	r3, [pc, #228]	; (80061bc <_strtod_l+0xb24>)
 80060d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80060da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80060de:	e016      	b.n	800610e <_strtod_l+0xa76>
 80060e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80060e2:	4f33      	ldr	r7, [pc, #204]	; (80061b0 <_strtod_l+0xb18>)
 80060e4:	e7a9      	b.n	800603a <_strtod_l+0x9a2>
 80060e6:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <_strtod_l+0xb18>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ee:	f7fa f9fd 	bl	80004ec <__aeabi_dmul>
 80060f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f4:	4605      	mov	r5, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d09e      	beq.n	800603a <_strtod_l+0x9a2>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006104:	e79d      	b.n	8006042 <_strtod_l+0x9aa>
 8006106:	2200      	movs	r2, #0
 8006108:	4b28      	ldr	r3, [pc, #160]	; (80061ac <_strtod_l+0xb14>)
 800610a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800610e:	4f27      	ldr	r7, [pc, #156]	; (80061ac <_strtod_l+0xb14>)
 8006110:	e797      	b.n	8006042 <_strtod_l+0x9aa>
 8006112:	2200      	movs	r2, #0
 8006114:	4b29      	ldr	r3, [pc, #164]	; (80061bc <_strtod_l+0xb24>)
 8006116:	4645      	mov	r5, r8
 8006118:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800611c:	e7f7      	b.n	800610e <_strtod_l+0xa76>
 800611e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	46ca      	mov	sl, r9
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1bc      	bne.n	80060a4 <_strtod_l+0xa0c>
 800612a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800612e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006130:	0d1b      	lsrs	r3, r3, #20
 8006132:	051b      	lsls	r3, r3, #20
 8006134:	429a      	cmp	r2, r3
 8006136:	d1b5      	bne.n	80060a4 <_strtod_l+0xa0c>
 8006138:	4628      	mov	r0, r5
 800613a:	4639      	mov	r1, r7
 800613c:	f7fa fcce 	bl	8000adc <__aeabi_d2lz>
 8006140:	f7fa f9a6 	bl	8000490 <__aeabi_l2d>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4628      	mov	r0, r5
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa f816 	bl	800017c <__aeabi_dsub>
 8006150:	460b      	mov	r3, r1
 8006152:	4602      	mov	r2, r0
 8006154:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	ea4a 0a08 	orr.w	sl, sl, r8
 8006162:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006166:	d06c      	beq.n	8006242 <_strtod_l+0xbaa>
 8006168:	a309      	add	r3, pc, #36	; (adr r3, 8006190 <_strtod_l+0xaf8>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa fc2f 	bl	80009d0 <__aeabi_dcmplt>
 8006172:	2800      	cmp	r0, #0
 8006174:	f47f acd8 	bne.w	8005b28 <_strtod_l+0x490>
 8006178:	a307      	add	r3, pc, #28	; (adr r3, 8006198 <_strtod_l+0xb00>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006182:	f7fa fc43 	bl	8000a0c <__aeabi_dcmpgt>
 8006186:	2800      	cmp	r0, #0
 8006188:	d08c      	beq.n	80060a4 <_strtod_l+0xa0c>
 800618a:	e4cd      	b.n	8005b28 <_strtod_l+0x490>
 800618c:	f3af 8000 	nop.w
 8006190:	94a03595 	.word	0x94a03595
 8006194:	3fdfffff 	.word	0x3fdfffff
 8006198:	35afe535 	.word	0x35afe535
 800619c:	3fe00000 	.word	0x3fe00000
 80061a0:	000fffff 	.word	0x000fffff
 80061a4:	7ff00000 	.word	0x7ff00000
 80061a8:	7fefffff 	.word	0x7fefffff
 80061ac:	3ff00000 	.word	0x3ff00000
 80061b0:	3fe00000 	.word	0x3fe00000
 80061b4:	7fe00000 	.word	0x7fe00000
 80061b8:	7c9fffff 	.word	0x7c9fffff
 80061bc:	bff00000 	.word	0xbff00000
 80061c0:	9b05      	ldr	r3, [sp, #20]
 80061c2:	b333      	cbz	r3, 8006212 <_strtod_l+0xb7a>
 80061c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061ca:	d822      	bhi.n	8006212 <_strtod_l+0xb7a>
 80061cc:	a328      	add	r3, pc, #160	; (adr r3, 8006270 <_strtod_l+0xbd8>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	4628      	mov	r0, r5
 80061d4:	4639      	mov	r1, r7
 80061d6:	f7fa fc05 	bl	80009e4 <__aeabi_dcmple>
 80061da:	b1a0      	cbz	r0, 8006206 <_strtod_l+0xb6e>
 80061dc:	4639      	mov	r1, r7
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fa fc5c 	bl	8000a9c <__aeabi_d2uiz>
 80061e4:	2801      	cmp	r0, #1
 80061e6:	bf38      	it	cc
 80061e8:	2001      	movcc	r0, #1
 80061ea:	f7fa f905 	bl	80003f8 <__aeabi_ui2d>
 80061ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f0:	4605      	mov	r5, r0
 80061f2:	460f      	mov	r7, r1
 80061f4:	bb03      	cbnz	r3, 8006238 <_strtod_l+0xba0>
 80061f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061fa:	9014      	str	r0, [sp, #80]	; 0x50
 80061fc:	9315      	str	r3, [sp, #84]	; 0x54
 80061fe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006202:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800620a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	9311      	str	r3, [sp, #68]	; 0x44
 8006212:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006214:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006216:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800621a:	f002 feed 	bl	8008ff8 <__ulp>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4640      	mov	r0, r8
 8006224:	4649      	mov	r1, r9
 8006226:	f7fa f961 	bl	80004ec <__aeabi_dmul>
 800622a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800622c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800622e:	f7f9 ffa7 	bl	8000180 <__adddf3>
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	e774      	b.n	8006122 <_strtod_l+0xa8a>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006240:	e7dd      	b.n	80061fe <_strtod_l+0xb66>
 8006242:	a30d      	add	r3, pc, #52	; (adr r3, 8006278 <_strtod_l+0xbe0>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa fbc2 	bl	80009d0 <__aeabi_dcmplt>
 800624c:	e79b      	b.n	8006186 <_strtod_l+0xaee>
 800624e:	2300      	movs	r3, #0
 8006250:	930e      	str	r3, [sp, #56]	; 0x38
 8006252:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006254:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	f7ff ba5b 	b.w	8005712 <_strtod_l+0x7a>
 800625c:	2a65      	cmp	r2, #101	; 0x65
 800625e:	f43f ab52 	beq.w	8005906 <_strtod_l+0x26e>
 8006262:	2a45      	cmp	r2, #69	; 0x45
 8006264:	f43f ab4f 	beq.w	8005906 <_strtod_l+0x26e>
 8006268:	2301      	movs	r3, #1
 800626a:	f7ff bb87 	b.w	800597c <_strtod_l+0x2e4>
 800626e:	bf00      	nop
 8006270:	ffc00000 	.word	0xffc00000
 8006274:	41dfffff 	.word	0x41dfffff
 8006278:	94a03595 	.word	0x94a03595
 800627c:	3fcfffff 	.word	0x3fcfffff

08006280 <strtod>:
 8006280:	460a      	mov	r2, r1
 8006282:	4601      	mov	r1, r0
 8006284:	4802      	ldr	r0, [pc, #8]	; (8006290 <strtod+0x10>)
 8006286:	4b03      	ldr	r3, [pc, #12]	; (8006294 <strtod+0x14>)
 8006288:	6800      	ldr	r0, [r0, #0]
 800628a:	f7ff ba05 	b.w	8005698 <_strtod_l>
 800628e:	bf00      	nop
 8006290:	200001f8 	.word	0x200001f8
 8006294:	20000040 	.word	0x20000040

08006298 <__cvt>:
 8006298:	2b00      	cmp	r3, #0
 800629a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629e:	461f      	mov	r7, r3
 80062a0:	bfbb      	ittet	lt
 80062a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80062a6:	461f      	movlt	r7, r3
 80062a8:	2300      	movge	r3, #0
 80062aa:	232d      	movlt	r3, #45	; 0x2d
 80062ac:	b088      	sub	sp, #32
 80062ae:	4614      	mov	r4, r2
 80062b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80062b4:	7013      	strb	r3, [r2, #0]
 80062b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80062bc:	f023 0820 	bic.w	r8, r3, #32
 80062c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062c4:	d005      	beq.n	80062d2 <__cvt+0x3a>
 80062c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062ca:	d100      	bne.n	80062ce <__cvt+0x36>
 80062cc:	3501      	adds	r5, #1
 80062ce:	2302      	movs	r3, #2
 80062d0:	e000      	b.n	80062d4 <__cvt+0x3c>
 80062d2:	2303      	movs	r3, #3
 80062d4:	aa07      	add	r2, sp, #28
 80062d6:	9204      	str	r2, [sp, #16]
 80062d8:	aa06      	add	r2, sp, #24
 80062da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062de:	e9cd 3500 	strd	r3, r5, [sp]
 80062e2:	4622      	mov	r2, r4
 80062e4:	463b      	mov	r3, r7
 80062e6:	f001 f8cf 	bl	8007488 <_dtoa_r>
 80062ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062ee:	4606      	mov	r6, r0
 80062f0:	d102      	bne.n	80062f8 <__cvt+0x60>
 80062f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062f4:	07db      	lsls	r3, r3, #31
 80062f6:	d522      	bpl.n	800633e <__cvt+0xa6>
 80062f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062fc:	eb06 0905 	add.w	r9, r6, r5
 8006300:	d110      	bne.n	8006324 <__cvt+0x8c>
 8006302:	7833      	ldrb	r3, [r6, #0]
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d10a      	bne.n	800631e <__cvt+0x86>
 8006308:	2200      	movs	r2, #0
 800630a:	2300      	movs	r3, #0
 800630c:	4620      	mov	r0, r4
 800630e:	4639      	mov	r1, r7
 8006310:	f7fa fb54 	bl	80009bc <__aeabi_dcmpeq>
 8006314:	b918      	cbnz	r0, 800631e <__cvt+0x86>
 8006316:	f1c5 0501 	rsb	r5, r5, #1
 800631a:	f8ca 5000 	str.w	r5, [sl]
 800631e:	f8da 3000 	ldr.w	r3, [sl]
 8006322:	4499      	add	r9, r3
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	4620      	mov	r0, r4
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa fb46 	bl	80009bc <__aeabi_dcmpeq>
 8006330:	b108      	cbz	r0, 8006336 <__cvt+0x9e>
 8006332:	f8cd 901c 	str.w	r9, [sp, #28]
 8006336:	2230      	movs	r2, #48	; 0x30
 8006338:	9b07      	ldr	r3, [sp, #28]
 800633a:	454b      	cmp	r3, r9
 800633c:	d307      	bcc.n	800634e <__cvt+0xb6>
 800633e:	4630      	mov	r0, r6
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006344:	1b9b      	subs	r3, r3, r6
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	b008      	add	sp, #32
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	9107      	str	r1, [sp, #28]
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e7f0      	b.n	8006338 <__cvt+0xa0>

08006356 <__exponent>:
 8006356:	4603      	mov	r3, r0
 8006358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800635a:	2900      	cmp	r1, #0
 800635c:	f803 2b02 	strb.w	r2, [r3], #2
 8006360:	bfb6      	itet	lt
 8006362:	222d      	movlt	r2, #45	; 0x2d
 8006364:	222b      	movge	r2, #43	; 0x2b
 8006366:	4249      	neglt	r1, r1
 8006368:	2909      	cmp	r1, #9
 800636a:	7042      	strb	r2, [r0, #1]
 800636c:	dd2a      	ble.n	80063c4 <__exponent+0x6e>
 800636e:	f10d 0207 	add.w	r2, sp, #7
 8006372:	4617      	mov	r7, r2
 8006374:	260a      	movs	r6, #10
 8006376:	fb91 f5f6 	sdiv	r5, r1, r6
 800637a:	4694      	mov	ip, r2
 800637c:	fb06 1415 	mls	r4, r6, r5, r1
 8006380:	3430      	adds	r4, #48	; 0x30
 8006382:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006386:	460c      	mov	r4, r1
 8006388:	2c63      	cmp	r4, #99	; 0x63
 800638a:	4629      	mov	r1, r5
 800638c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006390:	dcf1      	bgt.n	8006376 <__exponent+0x20>
 8006392:	3130      	adds	r1, #48	; 0x30
 8006394:	f1ac 0402 	sub.w	r4, ip, #2
 8006398:	f802 1c01 	strb.w	r1, [r2, #-1]
 800639c:	4622      	mov	r2, r4
 800639e:	1c41      	adds	r1, r0, #1
 80063a0:	42ba      	cmp	r2, r7
 80063a2:	d30a      	bcc.n	80063ba <__exponent+0x64>
 80063a4:	f10d 0209 	add.w	r2, sp, #9
 80063a8:	eba2 020c 	sub.w	r2, r2, ip
 80063ac:	42bc      	cmp	r4, r7
 80063ae:	bf88      	it	hi
 80063b0:	2200      	movhi	r2, #0
 80063b2:	4413      	add	r3, r2
 80063b4:	1a18      	subs	r0, r3, r0
 80063b6:	b003      	add	sp, #12
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80063be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80063c2:	e7ed      	b.n	80063a0 <__exponent+0x4a>
 80063c4:	2330      	movs	r3, #48	; 0x30
 80063c6:	3130      	adds	r1, #48	; 0x30
 80063c8:	7083      	strb	r3, [r0, #2]
 80063ca:	70c1      	strb	r1, [r0, #3]
 80063cc:	1d03      	adds	r3, r0, #4
 80063ce:	e7f1      	b.n	80063b4 <__exponent+0x5e>

080063d0 <_printf_float>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	b091      	sub	sp, #68	; 0x44
 80063d6:	460c      	mov	r4, r1
 80063d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063dc:	4616      	mov	r6, r2
 80063de:	461f      	mov	r7, r3
 80063e0:	4605      	mov	r5, r0
 80063e2:	f000 ff0d 	bl	8007200 <_localeconv_r>
 80063e6:	6803      	ldr	r3, [r0, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	9309      	str	r3, [sp, #36]	; 0x24
 80063ec:	f7f9 feba 	bl	8000164 <strlen>
 80063f0:	2300      	movs	r3, #0
 80063f2:	930e      	str	r3, [sp, #56]	; 0x38
 80063f4:	f8d8 3000 	ldr.w	r3, [r8]
 80063f8:	900a      	str	r0, [sp, #40]	; 0x28
 80063fa:	3307      	adds	r3, #7
 80063fc:	f023 0307 	bic.w	r3, r3, #7
 8006400:	f103 0208 	add.w	r2, r3, #8
 8006404:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006408:	f8d4 b000 	ldr.w	fp, [r4]
 800640c:	f8c8 2000 	str.w	r2, [r8]
 8006410:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006414:	4652      	mov	r2, sl
 8006416:	4643      	mov	r3, r8
 8006418:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800641c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006420:	930b      	str	r3, [sp, #44]	; 0x2c
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	4650      	mov	r0, sl
 8006428:	4b9c      	ldr	r3, [pc, #624]	; (800669c <_printf_float+0x2cc>)
 800642a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800642c:	f7fa faf8 	bl	8000a20 <__aeabi_dcmpun>
 8006430:	bb70      	cbnz	r0, 8006490 <_printf_float+0xc0>
 8006432:	f04f 32ff 	mov.w	r2, #4294967295
 8006436:	4650      	mov	r0, sl
 8006438:	4b98      	ldr	r3, [pc, #608]	; (800669c <_printf_float+0x2cc>)
 800643a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800643c:	f7fa fad2 	bl	80009e4 <__aeabi_dcmple>
 8006440:	bb30      	cbnz	r0, 8006490 <_printf_float+0xc0>
 8006442:	2200      	movs	r2, #0
 8006444:	2300      	movs	r3, #0
 8006446:	4650      	mov	r0, sl
 8006448:	4641      	mov	r1, r8
 800644a:	f7fa fac1 	bl	80009d0 <__aeabi_dcmplt>
 800644e:	b110      	cbz	r0, 8006456 <_printf_float+0x86>
 8006450:	232d      	movs	r3, #45	; 0x2d
 8006452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006456:	4a92      	ldr	r2, [pc, #584]	; (80066a0 <_printf_float+0x2d0>)
 8006458:	4b92      	ldr	r3, [pc, #584]	; (80066a4 <_printf_float+0x2d4>)
 800645a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800645e:	bf94      	ite	ls
 8006460:	4690      	movls	r8, r2
 8006462:	4698      	movhi	r8, r3
 8006464:	2303      	movs	r3, #3
 8006466:	f04f 0a00 	mov.w	sl, #0
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	f02b 0304 	bic.w	r3, fp, #4
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	4633      	mov	r3, r6
 8006474:	4621      	mov	r1, r4
 8006476:	4628      	mov	r0, r5
 8006478:	9700      	str	r7, [sp, #0]
 800647a:	aa0f      	add	r2, sp, #60	; 0x3c
 800647c:	f000 f9d6 	bl	800682c <_printf_common>
 8006480:	3001      	adds	r0, #1
 8006482:	f040 8090 	bne.w	80065a6 <_printf_float+0x1d6>
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	b011      	add	sp, #68	; 0x44
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	4652      	mov	r2, sl
 8006492:	4643      	mov	r3, r8
 8006494:	4650      	mov	r0, sl
 8006496:	4641      	mov	r1, r8
 8006498:	f7fa fac2 	bl	8000a20 <__aeabi_dcmpun>
 800649c:	b148      	cbz	r0, 80064b2 <_printf_float+0xe2>
 800649e:	f1b8 0f00 	cmp.w	r8, #0
 80064a2:	bfb8      	it	lt
 80064a4:	232d      	movlt	r3, #45	; 0x2d
 80064a6:	4a80      	ldr	r2, [pc, #512]	; (80066a8 <_printf_float+0x2d8>)
 80064a8:	bfb8      	it	lt
 80064aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ae:	4b7f      	ldr	r3, [pc, #508]	; (80066ac <_printf_float+0x2dc>)
 80064b0:	e7d3      	b.n	800645a <_printf_float+0x8a>
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	d142      	bne.n	8006542 <_printf_float+0x172>
 80064bc:	2306      	movs	r3, #6
 80064be:	6063      	str	r3, [r4, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	9206      	str	r2, [sp, #24]
 80064c4:	aa0e      	add	r2, sp, #56	; 0x38
 80064c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80064ca:	aa0d      	add	r2, sp, #52	; 0x34
 80064cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80064d0:	9203      	str	r2, [sp, #12]
 80064d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80064d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	6863      	ldr	r3, [r4, #4]
 80064de:	4652      	mov	r2, sl
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4628      	mov	r0, r5
 80064e4:	4643      	mov	r3, r8
 80064e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80064e8:	f7ff fed6 	bl	8006298 <__cvt>
 80064ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ee:	4680      	mov	r8, r0
 80064f0:	2947      	cmp	r1, #71	; 0x47
 80064f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064f4:	d108      	bne.n	8006508 <_printf_float+0x138>
 80064f6:	1cc8      	adds	r0, r1, #3
 80064f8:	db02      	blt.n	8006500 <_printf_float+0x130>
 80064fa:	6863      	ldr	r3, [r4, #4]
 80064fc:	4299      	cmp	r1, r3
 80064fe:	dd40      	ble.n	8006582 <_printf_float+0x1b2>
 8006500:	f1a9 0902 	sub.w	r9, r9, #2
 8006504:	fa5f f989 	uxtb.w	r9, r9
 8006508:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800650c:	d81f      	bhi.n	800654e <_printf_float+0x17e>
 800650e:	464a      	mov	r2, r9
 8006510:	3901      	subs	r1, #1
 8006512:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006516:	910d      	str	r1, [sp, #52]	; 0x34
 8006518:	f7ff ff1d 	bl	8006356 <__exponent>
 800651c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800651e:	4682      	mov	sl, r0
 8006520:	1813      	adds	r3, r2, r0
 8006522:	2a01      	cmp	r2, #1
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	dc02      	bgt.n	800652e <_printf_float+0x15e>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	07d2      	lsls	r2, r2, #31
 800652c:	d501      	bpl.n	8006532 <_printf_float+0x162>
 800652e:	3301      	adds	r3, #1
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006536:	2b00      	cmp	r3, #0
 8006538:	d09b      	beq.n	8006472 <_printf_float+0xa2>
 800653a:	232d      	movs	r3, #45	; 0x2d
 800653c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006540:	e797      	b.n	8006472 <_printf_float+0xa2>
 8006542:	2947      	cmp	r1, #71	; 0x47
 8006544:	d1bc      	bne.n	80064c0 <_printf_float+0xf0>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1ba      	bne.n	80064c0 <_printf_float+0xf0>
 800654a:	2301      	movs	r3, #1
 800654c:	e7b7      	b.n	80064be <_printf_float+0xee>
 800654e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006552:	d118      	bne.n	8006586 <_printf_float+0x1b6>
 8006554:	2900      	cmp	r1, #0
 8006556:	6863      	ldr	r3, [r4, #4]
 8006558:	dd0b      	ble.n	8006572 <_printf_float+0x1a2>
 800655a:	6121      	str	r1, [r4, #16]
 800655c:	b913      	cbnz	r3, 8006564 <_printf_float+0x194>
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	07d0      	lsls	r0, r2, #31
 8006562:	d502      	bpl.n	800656a <_printf_float+0x19a>
 8006564:	3301      	adds	r3, #1
 8006566:	440b      	add	r3, r1
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	f04f 0a00 	mov.w	sl, #0
 800656e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006570:	e7df      	b.n	8006532 <_printf_float+0x162>
 8006572:	b913      	cbnz	r3, 800657a <_printf_float+0x1aa>
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	07d2      	lsls	r2, r2, #31
 8006578:	d501      	bpl.n	800657e <_printf_float+0x1ae>
 800657a:	3302      	adds	r3, #2
 800657c:	e7f4      	b.n	8006568 <_printf_float+0x198>
 800657e:	2301      	movs	r3, #1
 8006580:	e7f2      	b.n	8006568 <_printf_float+0x198>
 8006582:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006588:	4299      	cmp	r1, r3
 800658a:	db05      	blt.n	8006598 <_printf_float+0x1c8>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	6121      	str	r1, [r4, #16]
 8006590:	07d8      	lsls	r0, r3, #31
 8006592:	d5ea      	bpl.n	800656a <_printf_float+0x19a>
 8006594:	1c4b      	adds	r3, r1, #1
 8006596:	e7e7      	b.n	8006568 <_printf_float+0x198>
 8006598:	2900      	cmp	r1, #0
 800659a:	bfcc      	ite	gt
 800659c:	2201      	movgt	r2, #1
 800659e:	f1c1 0202 	rsble	r2, r1, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	e7e0      	b.n	8006568 <_printf_float+0x198>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	055a      	lsls	r2, r3, #21
 80065aa:	d407      	bmi.n	80065bc <_printf_float+0x1ec>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	4642      	mov	r2, r8
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	d12b      	bne.n	8006612 <_printf_float+0x242>
 80065ba:	e764      	b.n	8006486 <_printf_float+0xb6>
 80065bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065c0:	f240 80dd 	bls.w	800677e <_printf_float+0x3ae>
 80065c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	f7fa f9f6 	bl	80009bc <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d033      	beq.n	800663c <_printf_float+0x26c>
 80065d4:	2301      	movs	r3, #1
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <_printf_float+0x2e0>)
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	f43f af51 	beq.w	8006486 <_printf_float+0xb6>
 80065e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065e8:	429a      	cmp	r2, r3
 80065ea:	db02      	blt.n	80065f2 <_printf_float+0x222>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07d8      	lsls	r0, r3, #31
 80065f0:	d50f      	bpl.n	8006612 <_printf_float+0x242>
 80065f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f af42 	beq.w	8006486 <_printf_float+0xb6>
 8006602:	f04f 0800 	mov.w	r8, #0
 8006606:	f104 091a 	add.w	r9, r4, #26
 800660a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800660c:	3b01      	subs	r3, #1
 800660e:	4543      	cmp	r3, r8
 8006610:	dc09      	bgt.n	8006626 <_printf_float+0x256>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	079b      	lsls	r3, r3, #30
 8006616:	f100 8104 	bmi.w	8006822 <_printf_float+0x452>
 800661a:	68e0      	ldr	r0, [r4, #12]
 800661c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800661e:	4298      	cmp	r0, r3
 8006620:	bfb8      	it	lt
 8006622:	4618      	movlt	r0, r3
 8006624:	e731      	b.n	800648a <_printf_float+0xba>
 8006626:	2301      	movs	r3, #1
 8006628:	464a      	mov	r2, r9
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f af28 	beq.w	8006486 <_printf_float+0xb6>
 8006636:	f108 0801 	add.w	r8, r8, #1
 800663a:	e7e6      	b.n	800660a <_printf_float+0x23a>
 800663c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800663e:	2b00      	cmp	r3, #0
 8006640:	dc38      	bgt.n	80066b4 <_printf_float+0x2e4>
 8006642:	2301      	movs	r3, #1
 8006644:	4631      	mov	r1, r6
 8006646:	4628      	mov	r0, r5
 8006648:	4a19      	ldr	r2, [pc, #100]	; (80066b0 <_printf_float+0x2e0>)
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f af1a 	beq.w	8006486 <_printf_float+0xb6>
 8006652:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006656:	4313      	orrs	r3, r2
 8006658:	d102      	bne.n	8006660 <_printf_float+0x290>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	07d9      	lsls	r1, r3, #31
 800665e:	d5d8      	bpl.n	8006612 <_printf_float+0x242>
 8006660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af0b 	beq.w	8006486 <_printf_float+0xb6>
 8006670:	f04f 0900 	mov.w	r9, #0
 8006674:	f104 0a1a 	add.w	sl, r4, #26
 8006678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667a:	425b      	negs	r3, r3
 800667c:	454b      	cmp	r3, r9
 800667e:	dc01      	bgt.n	8006684 <_printf_float+0x2b4>
 8006680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006682:	e794      	b.n	80065ae <_printf_float+0x1de>
 8006684:	2301      	movs	r3, #1
 8006686:	4652      	mov	r2, sl
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f aef9 	beq.w	8006486 <_printf_float+0xb6>
 8006694:	f109 0901 	add.w	r9, r9, #1
 8006698:	e7ee      	b.n	8006678 <_printf_float+0x2a8>
 800669a:	bf00      	nop
 800669c:	7fefffff 	.word	0x7fefffff
 80066a0:	08009b09 	.word	0x08009b09
 80066a4:	08009b0d 	.word	0x08009b0d
 80066a8:	08009b11 	.word	0x08009b11
 80066ac:	08009b15 	.word	0x08009b15
 80066b0:	08009b19 	.word	0x08009b19
 80066b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066b8:	429a      	cmp	r2, r3
 80066ba:	bfa8      	it	ge
 80066bc:	461a      	movge	r2, r3
 80066be:	2a00      	cmp	r2, #0
 80066c0:	4691      	mov	r9, r2
 80066c2:	dc37      	bgt.n	8006734 <_printf_float+0x364>
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066cc:	f104 021a 	add.w	r2, r4, #26
 80066d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066d4:	ebaa 0309 	sub.w	r3, sl, r9
 80066d8:	455b      	cmp	r3, fp
 80066da:	dc33      	bgt.n	8006744 <_printf_float+0x374>
 80066dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066e0:	429a      	cmp	r2, r3
 80066e2:	db3b      	blt.n	800675c <_printf_float+0x38c>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	07da      	lsls	r2, r3, #31
 80066e8:	d438      	bmi.n	800675c <_printf_float+0x38c>
 80066ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80066ee:	eba2 0903 	sub.w	r9, r2, r3
 80066f2:	eba2 020a 	sub.w	r2, r2, sl
 80066f6:	4591      	cmp	r9, r2
 80066f8:	bfa8      	it	ge
 80066fa:	4691      	movge	r9, r2
 80066fc:	f1b9 0f00 	cmp.w	r9, #0
 8006700:	dc34      	bgt.n	800676c <_printf_float+0x39c>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800670a:	f104 0a1a 	add.w	sl, r4, #26
 800670e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	eba3 0309 	sub.w	r3, r3, r9
 8006718:	4543      	cmp	r3, r8
 800671a:	f77f af7a 	ble.w	8006612 <_printf_float+0x242>
 800671e:	2301      	movs	r3, #1
 8006720:	4652      	mov	r2, sl
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f aeac 	beq.w	8006486 <_printf_float+0xb6>
 800672e:	f108 0801 	add.w	r8, r8, #1
 8006732:	e7ec      	b.n	800670e <_printf_float+0x33e>
 8006734:	4613      	mov	r3, r2
 8006736:	4631      	mov	r1, r6
 8006738:	4642      	mov	r2, r8
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	d1c0      	bne.n	80066c4 <_printf_float+0x2f4>
 8006742:	e6a0      	b.n	8006486 <_printf_float+0xb6>
 8006744:	2301      	movs	r3, #1
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	920b      	str	r2, [sp, #44]	; 0x2c
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f ae99 	beq.w	8006486 <_printf_float+0xb6>
 8006754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006756:	f10b 0b01 	add.w	fp, fp, #1
 800675a:	e7b9      	b.n	80066d0 <_printf_float+0x300>
 800675c:	4631      	mov	r1, r6
 800675e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d1bf      	bne.n	80066ea <_printf_float+0x31a>
 800676a:	e68c      	b.n	8006486 <_printf_float+0xb6>
 800676c:	464b      	mov	r3, r9
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	eb08 020a 	add.w	r2, r8, sl
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d1c2      	bne.n	8006702 <_printf_float+0x332>
 800677c:	e683      	b.n	8006486 <_printf_float+0xb6>
 800677e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006780:	2a01      	cmp	r2, #1
 8006782:	dc01      	bgt.n	8006788 <_printf_float+0x3b8>
 8006784:	07db      	lsls	r3, r3, #31
 8006786:	d539      	bpl.n	80067fc <_printf_float+0x42c>
 8006788:	2301      	movs	r3, #1
 800678a:	4642      	mov	r2, r8
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f ae77 	beq.w	8006486 <_printf_float+0xb6>
 8006798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f ae6f 	beq.w	8006486 <_printf_float+0xb6>
 80067a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067ac:	2200      	movs	r2, #0
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80067b4:	f7fa f902 	bl	80009bc <__aeabi_dcmpeq>
 80067b8:	b9d8      	cbnz	r0, 80067f2 <_printf_float+0x422>
 80067ba:	f109 33ff 	add.w	r3, r9, #4294967295
 80067be:	f108 0201 	add.w	r2, r8, #1
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	d10e      	bne.n	80067ea <_printf_float+0x41a>
 80067cc:	e65b      	b.n	8006486 <_printf_float+0xb6>
 80067ce:	2301      	movs	r3, #1
 80067d0:	464a      	mov	r2, r9
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f ae54 	beq.w	8006486 <_printf_float+0xb6>
 80067de:	f108 0801 	add.w	r8, r8, #1
 80067e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067e4:	3b01      	subs	r3, #1
 80067e6:	4543      	cmp	r3, r8
 80067e8:	dcf1      	bgt.n	80067ce <_printf_float+0x3fe>
 80067ea:	4653      	mov	r3, sl
 80067ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067f0:	e6de      	b.n	80065b0 <_printf_float+0x1e0>
 80067f2:	f04f 0800 	mov.w	r8, #0
 80067f6:	f104 091a 	add.w	r9, r4, #26
 80067fa:	e7f2      	b.n	80067e2 <_printf_float+0x412>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4642      	mov	r2, r8
 8006800:	e7df      	b.n	80067c2 <_printf_float+0x3f2>
 8006802:	2301      	movs	r3, #1
 8006804:	464a      	mov	r2, r9
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae3a 	beq.w	8006486 <_printf_float+0xb6>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800681a:	1a5b      	subs	r3, r3, r1
 800681c:	4543      	cmp	r3, r8
 800681e:	dcf0      	bgt.n	8006802 <_printf_float+0x432>
 8006820:	e6fb      	b.n	800661a <_printf_float+0x24a>
 8006822:	f04f 0800 	mov.w	r8, #0
 8006826:	f104 0919 	add.w	r9, r4, #25
 800682a:	e7f4      	b.n	8006816 <_printf_float+0x446>

0800682c <_printf_common>:
 800682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	4616      	mov	r6, r2
 8006832:	4699      	mov	r9, r3
 8006834:	688a      	ldr	r2, [r1, #8]
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	4607      	mov	r7, r0
 800683a:	4293      	cmp	r3, r2
 800683c:	bfb8      	it	lt
 800683e:	4613      	movlt	r3, r2
 8006840:	6033      	str	r3, [r6, #0]
 8006842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006846:	460c      	mov	r4, r1
 8006848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800684c:	b10a      	cbz	r2, 8006852 <_printf_common+0x26>
 800684e:	3301      	adds	r3, #1
 8006850:	6033      	str	r3, [r6, #0]
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	0699      	lsls	r1, r3, #26
 8006856:	bf42      	ittt	mi
 8006858:	6833      	ldrmi	r3, [r6, #0]
 800685a:	3302      	addmi	r3, #2
 800685c:	6033      	strmi	r3, [r6, #0]
 800685e:	6825      	ldr	r5, [r4, #0]
 8006860:	f015 0506 	ands.w	r5, r5, #6
 8006864:	d106      	bne.n	8006874 <_printf_common+0x48>
 8006866:	f104 0a19 	add.w	sl, r4, #25
 800686a:	68e3      	ldr	r3, [r4, #12]
 800686c:	6832      	ldr	r2, [r6, #0]
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	42ab      	cmp	r3, r5
 8006872:	dc2b      	bgt.n	80068cc <_printf_common+0xa0>
 8006874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006878:	1e13      	subs	r3, r2, #0
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	bf18      	it	ne
 800687e:	2301      	movne	r3, #1
 8006880:	0692      	lsls	r2, r2, #26
 8006882:	d430      	bmi.n	80068e6 <_printf_common+0xba>
 8006884:	4649      	mov	r1, r9
 8006886:	4638      	mov	r0, r7
 8006888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800688c:	47c0      	blx	r8
 800688e:	3001      	adds	r0, #1
 8006890:	d023      	beq.n	80068da <_printf_common+0xae>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	6922      	ldr	r2, [r4, #16]
 8006896:	f003 0306 	and.w	r3, r3, #6
 800689a:	2b04      	cmp	r3, #4
 800689c:	bf14      	ite	ne
 800689e:	2500      	movne	r5, #0
 80068a0:	6833      	ldreq	r3, [r6, #0]
 80068a2:	f04f 0600 	mov.w	r6, #0
 80068a6:	bf08      	it	eq
 80068a8:	68e5      	ldreq	r5, [r4, #12]
 80068aa:	f104 041a 	add.w	r4, r4, #26
 80068ae:	bf08      	it	eq
 80068b0:	1aed      	subeq	r5, r5, r3
 80068b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80068b6:	bf08      	it	eq
 80068b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068bc:	4293      	cmp	r3, r2
 80068be:	bfc4      	itt	gt
 80068c0:	1a9b      	subgt	r3, r3, r2
 80068c2:	18ed      	addgt	r5, r5, r3
 80068c4:	42b5      	cmp	r5, r6
 80068c6:	d11a      	bne.n	80068fe <_printf_common+0xd2>
 80068c8:	2000      	movs	r0, #0
 80068ca:	e008      	b.n	80068de <_printf_common+0xb2>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4652      	mov	r2, sl
 80068d0:	4649      	mov	r1, r9
 80068d2:	4638      	mov	r0, r7
 80068d4:	47c0      	blx	r8
 80068d6:	3001      	adds	r0, #1
 80068d8:	d103      	bne.n	80068e2 <_printf_common+0xb6>
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e2:	3501      	adds	r5, #1
 80068e4:	e7c1      	b.n	800686a <_printf_common+0x3e>
 80068e6:	2030      	movs	r0, #48	; 0x30
 80068e8:	18e1      	adds	r1, r4, r3
 80068ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f4:	4422      	add	r2, r4
 80068f6:	3302      	adds	r3, #2
 80068f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068fc:	e7c2      	b.n	8006884 <_printf_common+0x58>
 80068fe:	2301      	movs	r3, #1
 8006900:	4622      	mov	r2, r4
 8006902:	4649      	mov	r1, r9
 8006904:	4638      	mov	r0, r7
 8006906:	47c0      	blx	r8
 8006908:	3001      	adds	r0, #1
 800690a:	d0e6      	beq.n	80068da <_printf_common+0xae>
 800690c:	3601      	adds	r6, #1
 800690e:	e7d9      	b.n	80068c4 <_printf_common+0x98>

08006910 <_printf_i>:
 8006910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	7e0f      	ldrb	r7, [r1, #24]
 8006916:	4691      	mov	r9, r2
 8006918:	2f78      	cmp	r7, #120	; 0x78
 800691a:	4680      	mov	r8, r0
 800691c:	460c      	mov	r4, r1
 800691e:	469a      	mov	sl, r3
 8006920:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006926:	d807      	bhi.n	8006938 <_printf_i+0x28>
 8006928:	2f62      	cmp	r7, #98	; 0x62
 800692a:	d80a      	bhi.n	8006942 <_printf_i+0x32>
 800692c:	2f00      	cmp	r7, #0
 800692e:	f000 80d5 	beq.w	8006adc <_printf_i+0x1cc>
 8006932:	2f58      	cmp	r7, #88	; 0x58
 8006934:	f000 80c1 	beq.w	8006aba <_printf_i+0x1aa>
 8006938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800693c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006940:	e03a      	b.n	80069b8 <_printf_i+0xa8>
 8006942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006946:	2b15      	cmp	r3, #21
 8006948:	d8f6      	bhi.n	8006938 <_printf_i+0x28>
 800694a:	a101      	add	r1, pc, #4	; (adr r1, 8006950 <_printf_i+0x40>)
 800694c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006950:	080069a9 	.word	0x080069a9
 8006954:	080069bd 	.word	0x080069bd
 8006958:	08006939 	.word	0x08006939
 800695c:	08006939 	.word	0x08006939
 8006960:	08006939 	.word	0x08006939
 8006964:	08006939 	.word	0x08006939
 8006968:	080069bd 	.word	0x080069bd
 800696c:	08006939 	.word	0x08006939
 8006970:	08006939 	.word	0x08006939
 8006974:	08006939 	.word	0x08006939
 8006978:	08006939 	.word	0x08006939
 800697c:	08006ac3 	.word	0x08006ac3
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006a7d 	.word	0x08006a7d
 8006988:	08006939 	.word	0x08006939
 800698c:	08006939 	.word	0x08006939
 8006990:	08006ae5 	.word	0x08006ae5
 8006994:	08006939 	.word	0x08006939
 8006998:	080069e9 	.word	0x080069e9
 800699c:	08006939 	.word	0x08006939
 80069a0:	08006939 	.word	0x08006939
 80069a4:	08006a85 	.word	0x08006a85
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	602a      	str	r2, [r5, #0]
 80069b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069b8:	2301      	movs	r3, #1
 80069ba:	e0a0      	b.n	8006afe <_printf_i+0x1ee>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	682b      	ldr	r3, [r5, #0]
 80069c0:	0607      	lsls	r7, r0, #24
 80069c2:	f103 0104 	add.w	r1, r3, #4
 80069c6:	6029      	str	r1, [r5, #0]
 80069c8:	d501      	bpl.n	80069ce <_printf_i+0xbe>
 80069ca:	681e      	ldr	r6, [r3, #0]
 80069cc:	e003      	b.n	80069d6 <_printf_i+0xc6>
 80069ce:	0646      	lsls	r6, r0, #25
 80069d0:	d5fb      	bpl.n	80069ca <_printf_i+0xba>
 80069d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	da03      	bge.n	80069e2 <_printf_i+0xd2>
 80069da:	232d      	movs	r3, #45	; 0x2d
 80069dc:	4276      	negs	r6, r6
 80069de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e2:	230a      	movs	r3, #10
 80069e4:	4859      	ldr	r0, [pc, #356]	; (8006b4c <_printf_i+0x23c>)
 80069e6:	e012      	b.n	8006a0e <_printf_i+0xfe>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1d19      	adds	r1, r3, #4
 80069ee:	6029      	str	r1, [r5, #0]
 80069f0:	0605      	lsls	r5, r0, #24
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0xe8>
 80069f4:	681e      	ldr	r6, [r3, #0]
 80069f6:	e002      	b.n	80069fe <_printf_i+0xee>
 80069f8:	0641      	lsls	r1, r0, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0xe4>
 80069fc:	881e      	ldrh	r6, [r3, #0]
 80069fe:	2f6f      	cmp	r7, #111	; 0x6f
 8006a00:	bf0c      	ite	eq
 8006a02:	2308      	moveq	r3, #8
 8006a04:	230a      	movne	r3, #10
 8006a06:	4851      	ldr	r0, [pc, #324]	; (8006b4c <_printf_i+0x23c>)
 8006a08:	2100      	movs	r1, #0
 8006a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a0e:	6865      	ldr	r5, [r4, #4]
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	bfa8      	it	ge
 8006a14:	6821      	ldrge	r1, [r4, #0]
 8006a16:	60a5      	str	r5, [r4, #8]
 8006a18:	bfa4      	itt	ge
 8006a1a:	f021 0104 	bicge.w	r1, r1, #4
 8006a1e:	6021      	strge	r1, [r4, #0]
 8006a20:	b90e      	cbnz	r6, 8006a26 <_printf_i+0x116>
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	d04b      	beq.n	8006abe <_printf_i+0x1ae>
 8006a26:	4615      	mov	r5, r2
 8006a28:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a2c:	fb03 6711 	mls	r7, r3, r1, r6
 8006a30:	5dc7      	ldrb	r7, [r0, r7]
 8006a32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a36:	4637      	mov	r7, r6
 8006a38:	42bb      	cmp	r3, r7
 8006a3a:	460e      	mov	r6, r1
 8006a3c:	d9f4      	bls.n	8006a28 <_printf_i+0x118>
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d10b      	bne.n	8006a5a <_printf_i+0x14a>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	07de      	lsls	r6, r3, #31
 8006a46:	d508      	bpl.n	8006a5a <_printf_i+0x14a>
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	6861      	ldr	r1, [r4, #4]
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	bfde      	ittt	le
 8006a50:	2330      	movle	r3, #48	; 0x30
 8006a52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a5a:	1b52      	subs	r2, r2, r5
 8006a5c:	6122      	str	r2, [r4, #16]
 8006a5e:	464b      	mov	r3, r9
 8006a60:	4621      	mov	r1, r4
 8006a62:	4640      	mov	r0, r8
 8006a64:	f8cd a000 	str.w	sl, [sp]
 8006a68:	aa03      	add	r2, sp, #12
 8006a6a:	f7ff fedf 	bl	800682c <_printf_common>
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d14a      	bne.n	8006b08 <_printf_i+0x1f8>
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	b004      	add	sp, #16
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f043 0320 	orr.w	r3, r3, #32
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	2778      	movs	r7, #120	; 0x78
 8006a86:	4832      	ldr	r0, [pc, #200]	; (8006b50 <_printf_i+0x240>)
 8006a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6829      	ldr	r1, [r5, #0]
 8006a90:	061f      	lsls	r7, r3, #24
 8006a92:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a96:	d402      	bmi.n	8006a9e <_printf_i+0x18e>
 8006a98:	065f      	lsls	r7, r3, #25
 8006a9a:	bf48      	it	mi
 8006a9c:	b2b6      	uxthmi	r6, r6
 8006a9e:	07df      	lsls	r7, r3, #31
 8006aa0:	bf48      	it	mi
 8006aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8006aa6:	6029      	str	r1, [r5, #0]
 8006aa8:	bf48      	it	mi
 8006aaa:	6023      	strmi	r3, [r4, #0]
 8006aac:	b91e      	cbnz	r6, 8006ab6 <_printf_i+0x1a6>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	f023 0320 	bic.w	r3, r3, #32
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	e7a6      	b.n	8006a08 <_printf_i+0xf8>
 8006aba:	4824      	ldr	r0, [pc, #144]	; (8006b4c <_printf_i+0x23c>)
 8006abc:	e7e4      	b.n	8006a88 <_printf_i+0x178>
 8006abe:	4615      	mov	r5, r2
 8006ac0:	e7bd      	b.n	8006a3e <_printf_i+0x12e>
 8006ac2:	682b      	ldr	r3, [r5, #0]
 8006ac4:	6826      	ldr	r6, [r4, #0]
 8006ac6:	1d18      	adds	r0, r3, #4
 8006ac8:	6961      	ldr	r1, [r4, #20]
 8006aca:	6028      	str	r0, [r5, #0]
 8006acc:	0635      	lsls	r5, r6, #24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	d501      	bpl.n	8006ad6 <_printf_i+0x1c6>
 8006ad2:	6019      	str	r1, [r3, #0]
 8006ad4:	e002      	b.n	8006adc <_printf_i+0x1cc>
 8006ad6:	0670      	lsls	r0, r6, #25
 8006ad8:	d5fb      	bpl.n	8006ad2 <_printf_i+0x1c2>
 8006ada:	8019      	strh	r1, [r3, #0]
 8006adc:	2300      	movs	r3, #0
 8006ade:	4615      	mov	r5, r2
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	e7bc      	b.n	8006a5e <_printf_i+0x14e>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	602a      	str	r2, [r5, #0]
 8006aec:	681d      	ldr	r5, [r3, #0]
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 fbfc 	bl	80072ee <memchr>
 8006af6:	b108      	cbz	r0, 8006afc <_printf_i+0x1ec>
 8006af8:	1b40      	subs	r0, r0, r5
 8006afa:	6060      	str	r0, [r4, #4]
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	2300      	movs	r3, #0
 8006b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b06:	e7aa      	b.n	8006a5e <_printf_i+0x14e>
 8006b08:	462a      	mov	r2, r5
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	47d0      	blx	sl
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0ad      	beq.n	8006a72 <_printf_i+0x162>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	079b      	lsls	r3, r3, #30
 8006b1a:	d413      	bmi.n	8006b44 <_printf_i+0x234>
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	4298      	cmp	r0, r3
 8006b22:	bfb8      	it	lt
 8006b24:	4618      	movlt	r0, r3
 8006b26:	e7a6      	b.n	8006a76 <_printf_i+0x166>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4640      	mov	r0, r8
 8006b30:	47d0      	blx	sl
 8006b32:	3001      	adds	r0, #1
 8006b34:	d09d      	beq.n	8006a72 <_printf_i+0x162>
 8006b36:	3501      	adds	r5, #1
 8006b38:	68e3      	ldr	r3, [r4, #12]
 8006b3a:	9903      	ldr	r1, [sp, #12]
 8006b3c:	1a5b      	subs	r3, r3, r1
 8006b3e:	42ab      	cmp	r3, r5
 8006b40:	dcf2      	bgt.n	8006b28 <_printf_i+0x218>
 8006b42:	e7eb      	b.n	8006b1c <_printf_i+0x20c>
 8006b44:	2500      	movs	r5, #0
 8006b46:	f104 0619 	add.w	r6, r4, #25
 8006b4a:	e7f5      	b.n	8006b38 <_printf_i+0x228>
 8006b4c:	08009b1b 	.word	0x08009b1b
 8006b50:	08009b2c 	.word	0x08009b2c

08006b54 <std>:
 8006b54:	2300      	movs	r3, #0
 8006b56:	b510      	push	{r4, lr}
 8006b58:	4604      	mov	r4, r0
 8006b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b62:	6083      	str	r3, [r0, #8]
 8006b64:	8181      	strh	r1, [r0, #12]
 8006b66:	6643      	str	r3, [r0, #100]	; 0x64
 8006b68:	81c2      	strh	r2, [r0, #14]
 8006b6a:	6183      	str	r3, [r0, #24]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	2208      	movs	r2, #8
 8006b70:	305c      	adds	r0, #92	; 0x5c
 8006b72:	f000 faa5 	bl	80070c0 <memset>
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <std+0x58>)
 8006b78:	6224      	str	r4, [r4, #32]
 8006b7a:	6263      	str	r3, [r4, #36]	; 0x24
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <std+0x5c>)
 8006b7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <std+0x60>)
 8006b82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <std+0x64>)
 8006b86:	6323      	str	r3, [r4, #48]	; 0x30
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <std+0x68>)
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	d006      	beq.n	8006b9c <std+0x48>
 8006b8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b92:	4294      	cmp	r4, r2
 8006b94:	d002      	beq.n	8006b9c <std+0x48>
 8006b96:	33d0      	adds	r3, #208	; 0xd0
 8006b98:	429c      	cmp	r4, r3
 8006b9a:	d105      	bne.n	8006ba8 <std+0x54>
 8006b9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba4:	f000 bba0 	b.w	80072e8 <__retarget_lock_init_recursive>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	08006f11 	.word	0x08006f11
 8006bb0:	08006f33 	.word	0x08006f33
 8006bb4:	08006f6b 	.word	0x08006f6b
 8006bb8:	08006f8f 	.word	0x08006f8f
 8006bbc:	20002298 	.word	0x20002298

08006bc0 <stdio_exit_handler>:
 8006bc0:	4a02      	ldr	r2, [pc, #8]	; (8006bcc <stdio_exit_handler+0xc>)
 8006bc2:	4903      	ldr	r1, [pc, #12]	; (8006bd0 <stdio_exit_handler+0x10>)
 8006bc4:	4803      	ldr	r0, [pc, #12]	; (8006bd4 <stdio_exit_handler+0x14>)
 8006bc6:	f000 b869 	b.w	8006c9c <_fwalk_sglue>
 8006bca:	bf00      	nop
 8006bcc:	20000034 	.word	0x20000034
 8006bd0:	080095f9 	.word	0x080095f9
 8006bd4:	200001ac 	.word	0x200001ac

08006bd8 <cleanup_stdio>:
 8006bd8:	6841      	ldr	r1, [r0, #4]
 8006bda:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <cleanup_stdio+0x34>)
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4299      	cmp	r1, r3
 8006be0:	4604      	mov	r4, r0
 8006be2:	d001      	beq.n	8006be8 <cleanup_stdio+0x10>
 8006be4:	f002 fd08 	bl	80095f8 <_fflush_r>
 8006be8:	68a1      	ldr	r1, [r4, #8]
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <cleanup_stdio+0x38>)
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d002      	beq.n	8006bf6 <cleanup_stdio+0x1e>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f002 fd01 	bl	80095f8 <_fflush_r>
 8006bf6:	68e1      	ldr	r1, [r4, #12]
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <cleanup_stdio+0x3c>)
 8006bfa:	4299      	cmp	r1, r3
 8006bfc:	d004      	beq.n	8006c08 <cleanup_stdio+0x30>
 8006bfe:	4620      	mov	r0, r4
 8006c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c04:	f002 bcf8 	b.w	80095f8 <_fflush_r>
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20002298 	.word	0x20002298
 8006c10:	20002300 	.word	0x20002300
 8006c14:	20002368 	.word	0x20002368

08006c18 <global_stdio_init.part.0>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <global_stdio_init.part.0+0x30>)
 8006c1c:	4c0b      	ldr	r4, [pc, #44]	; (8006c4c <global_stdio_init.part.0+0x34>)
 8006c1e:	4a0c      	ldr	r2, [pc, #48]	; (8006c50 <global_stdio_init.part.0+0x38>)
 8006c20:	4620      	mov	r0, r4
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	2104      	movs	r1, #4
 8006c26:	2200      	movs	r2, #0
 8006c28:	f7ff ff94 	bl	8006b54 <std>
 8006c2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c30:	2201      	movs	r2, #1
 8006c32:	2109      	movs	r1, #9
 8006c34:	f7ff ff8e 	bl	8006b54 <std>
 8006c38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c42:	2112      	movs	r1, #18
 8006c44:	f7ff bf86 	b.w	8006b54 <std>
 8006c48:	200023d0 	.word	0x200023d0
 8006c4c:	20002298 	.word	0x20002298
 8006c50:	08006bc1 	.word	0x08006bc1

08006c54 <__sfp_lock_acquire>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__sfp_lock_acquire+0x8>)
 8006c56:	f000 bb48 	b.w	80072ea <__retarget_lock_acquire_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	200023d9 	.word	0x200023d9

08006c60 <__sfp_lock_release>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__sfp_lock_release+0x8>)
 8006c62:	f000 bb43 	b.w	80072ec <__retarget_lock_release_recursive>
 8006c66:	bf00      	nop
 8006c68:	200023d9 	.word	0x200023d9

08006c6c <__sinit>:
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	4604      	mov	r4, r0
 8006c70:	f7ff fff0 	bl	8006c54 <__sfp_lock_acquire>
 8006c74:	6a23      	ldr	r3, [r4, #32]
 8006c76:	b11b      	cbz	r3, 8006c80 <__sinit+0x14>
 8006c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7c:	f7ff bff0 	b.w	8006c60 <__sfp_lock_release>
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <__sinit+0x28>)
 8006c82:	6223      	str	r3, [r4, #32]
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <__sinit+0x2c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f5      	bne.n	8006c78 <__sinit+0xc>
 8006c8c:	f7ff ffc4 	bl	8006c18 <global_stdio_init.part.0>
 8006c90:	e7f2      	b.n	8006c78 <__sinit+0xc>
 8006c92:	bf00      	nop
 8006c94:	08006bd9 	.word	0x08006bd9
 8006c98:	200023d0 	.word	0x200023d0

08006c9c <_fwalk_sglue>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	4688      	mov	r8, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cac:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb0:	d505      	bpl.n	8006cbe <_fwalk_sglue+0x22>
 8006cb2:	6824      	ldr	r4, [r4, #0]
 8006cb4:	2c00      	cmp	r4, #0
 8006cb6:	d1f7      	bne.n	8006ca8 <_fwalk_sglue+0xc>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d907      	bls.n	8006cd4 <_fwalk_sglue+0x38>
 8006cc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	d003      	beq.n	8006cd4 <_fwalk_sglue+0x38>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4638      	mov	r0, r7
 8006cd0:	47c0      	blx	r8
 8006cd2:	4306      	orrs	r6, r0
 8006cd4:	3568      	adds	r5, #104	; 0x68
 8006cd6:	e7e9      	b.n	8006cac <_fwalk_sglue+0x10>

08006cd8 <iprintf>:
 8006cd8:	b40f      	push	{r0, r1, r2, r3}
 8006cda:	b507      	push	{r0, r1, r2, lr}
 8006cdc:	4906      	ldr	r1, [pc, #24]	; (8006cf8 <iprintf+0x20>)
 8006cde:	ab04      	add	r3, sp, #16
 8006ce0:	6808      	ldr	r0, [r1, #0]
 8006ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce6:	6881      	ldr	r1, [r0, #8]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	f002 fae9 	bl	80092c0 <_vfiprintf_r>
 8006cee:	b003      	add	sp, #12
 8006cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cf4:	b004      	add	sp, #16
 8006cf6:	4770      	bx	lr
 8006cf8:	200001f8 	.word	0x200001f8

08006cfc <_puts_r>:
 8006cfc:	6a03      	ldr	r3, [r0, #32]
 8006cfe:	b570      	push	{r4, r5, r6, lr}
 8006d00:	4605      	mov	r5, r0
 8006d02:	460e      	mov	r6, r1
 8006d04:	6884      	ldr	r4, [r0, #8]
 8006d06:	b90b      	cbnz	r3, 8006d0c <_puts_r+0x10>
 8006d08:	f7ff ffb0 	bl	8006c6c <__sinit>
 8006d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d0e:	07db      	lsls	r3, r3, #31
 8006d10:	d405      	bmi.n	8006d1e <_puts_r+0x22>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	0598      	lsls	r0, r3, #22
 8006d16:	d402      	bmi.n	8006d1e <_puts_r+0x22>
 8006d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d1a:	f000 fae6 	bl	80072ea <__retarget_lock_acquire_recursive>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	0719      	lsls	r1, r3, #28
 8006d22:	d513      	bpl.n	8006d4c <_puts_r+0x50>
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	b18b      	cbz	r3, 8006d4c <_puts_r+0x50>
 8006d28:	3e01      	subs	r6, #1
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d30:	3b01      	subs	r3, #1
 8006d32:	60a3      	str	r3, [r4, #8]
 8006d34:	b9e9      	cbnz	r1, 8006d72 <_puts_r+0x76>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da2e      	bge.n	8006d98 <_puts_r+0x9c>
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	210a      	movs	r1, #10
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f929 	bl	8006f96 <__swbuf_r>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d007      	beq.n	8006d58 <_puts_r+0x5c>
 8006d48:	250a      	movs	r5, #10
 8006d4a:	e007      	b.n	8006d5c <_puts_r+0x60>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 f95e 	bl	8007010 <__swsetup_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d0e7      	beq.n	8006d28 <_puts_r+0x2c>
 8006d58:	f04f 35ff 	mov.w	r5, #4294967295
 8006d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d5e:	07da      	lsls	r2, r3, #31
 8006d60:	d405      	bmi.n	8006d6e <_puts_r+0x72>
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	059b      	lsls	r3, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_puts_r+0x72>
 8006d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6a:	f000 fabf 	bl	80072ec <__retarget_lock_release_recursive>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da04      	bge.n	8006d80 <_puts_r+0x84>
 8006d76:	69a2      	ldr	r2, [r4, #24]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	dc06      	bgt.n	8006d8a <_puts_r+0x8e>
 8006d7c:	290a      	cmp	r1, #10
 8006d7e:	d004      	beq.n	8006d8a <_puts_r+0x8e>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	7019      	strb	r1, [r3, #0]
 8006d88:	e7cf      	b.n	8006d2a <_puts_r+0x2e>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f902 	bl	8006f96 <__swbuf_r>
 8006d92:	3001      	adds	r0, #1
 8006d94:	d1c9      	bne.n	8006d2a <_puts_r+0x2e>
 8006d96:	e7df      	b.n	8006d58 <_puts_r+0x5c>
 8006d98:	250a      	movs	r5, #10
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	6022      	str	r2, [r4, #0]
 8006da0:	701d      	strb	r5, [r3, #0]
 8006da2:	e7db      	b.n	8006d5c <_puts_r+0x60>

08006da4 <puts>:
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <puts+0xc>)
 8006da6:	4601      	mov	r1, r0
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f7ff bfa7 	b.w	8006cfc <_puts_r>
 8006dae:	bf00      	nop
 8006db0:	200001f8 	.word	0x200001f8

08006db4 <setvbuf>:
 8006db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	461d      	mov	r5, r3
 8006dba:	4b54      	ldr	r3, [pc, #336]	; (8006f0c <setvbuf+0x158>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	681f      	ldr	r7, [r3, #0]
 8006dc0:	460e      	mov	r6, r1
 8006dc2:	4690      	mov	r8, r2
 8006dc4:	b127      	cbz	r7, 8006dd0 <setvbuf+0x1c>
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	b913      	cbnz	r3, 8006dd0 <setvbuf+0x1c>
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f7ff ff4e 	bl	8006c6c <__sinit>
 8006dd0:	f1b8 0f02 	cmp.w	r8, #2
 8006dd4:	d006      	beq.n	8006de4 <setvbuf+0x30>
 8006dd6:	f1b8 0f01 	cmp.w	r8, #1
 8006dda:	f200 8094 	bhi.w	8006f06 <setvbuf+0x152>
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	f2c0 8091 	blt.w	8006f06 <setvbuf+0x152>
 8006de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006de6:	07da      	lsls	r2, r3, #31
 8006de8:	d405      	bmi.n	8006df6 <setvbuf+0x42>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	059b      	lsls	r3, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <setvbuf+0x42>
 8006df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df2:	f000 fa7a 	bl	80072ea <__retarget_lock_acquire_recursive>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f002 fbfd 	bl	80095f8 <_fflush_r>
 8006dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e00:	b141      	cbz	r1, 8006e14 <setvbuf+0x60>
 8006e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e06:	4299      	cmp	r1, r3
 8006e08:	d002      	beq.n	8006e10 <setvbuf+0x5c>
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f001 f920 	bl	8008050 <_free_r>
 8006e10:	2300      	movs	r3, #0
 8006e12:	6363      	str	r3, [r4, #52]	; 0x34
 8006e14:	2300      	movs	r3, #0
 8006e16:	61a3      	str	r3, [r4, #24]
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	0618      	lsls	r0, r3, #24
 8006e1e:	d503      	bpl.n	8006e28 <setvbuf+0x74>
 8006e20:	4638      	mov	r0, r7
 8006e22:	6921      	ldr	r1, [r4, #16]
 8006e24:	f001 f914 	bl	8008050 <_free_r>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f1b8 0f02 	cmp.w	r8, #2
 8006e2e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	d05f      	beq.n	8006efa <setvbuf+0x146>
 8006e3a:	ab01      	add	r3, sp, #4
 8006e3c:	466a      	mov	r2, sp
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4638      	mov	r0, r7
 8006e42:	f002 fc13 	bl	800966c <__swhatbuf_r>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	4318      	orrs	r0, r3
 8006e4a:	81a0      	strh	r0, [r4, #12]
 8006e4c:	bb2d      	cbnz	r5, 8006e9a <setvbuf+0xe6>
 8006e4e:	9d00      	ldr	r5, [sp, #0]
 8006e50:	4628      	mov	r0, r5
 8006e52:	f001 fc9f 	bl	8008794 <malloc>
 8006e56:	4606      	mov	r6, r0
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d150      	bne.n	8006efe <setvbuf+0x14a>
 8006e5c:	f8dd 9000 	ldr.w	r9, [sp]
 8006e60:	45a9      	cmp	r9, r5
 8006e62:	d13e      	bne.n	8006ee2 <setvbuf+0x12e>
 8006e64:	f04f 35ff 	mov.w	r5, #4294967295
 8006e68:	2200      	movs	r2, #0
 8006e6a:	60a2      	str	r2, [r4, #8]
 8006e6c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	6122      	str	r2, [r4, #16]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7a:	6162      	str	r2, [r4, #20]
 8006e7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e7e:	f043 0302 	orr.w	r3, r3, #2
 8006e82:	07d1      	lsls	r1, r2, #31
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	d404      	bmi.n	8006e92 <setvbuf+0xde>
 8006e88:	059b      	lsls	r3, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <setvbuf+0xde>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e8e:	f000 fa2d 	bl	80072ec <__retarget_lock_release_recursive>
 8006e92:	4628      	mov	r0, r5
 8006e94:	b003      	add	sp, #12
 8006e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d0d8      	beq.n	8006e50 <setvbuf+0x9c>
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	b913      	cbnz	r3, 8006ea8 <setvbuf+0xf4>
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	f7ff fee2 	bl	8006c6c <__sinit>
 8006ea8:	f1b8 0f01 	cmp.w	r8, #1
 8006eac:	bf08      	it	eq
 8006eae:	89a3      	ldrheq	r3, [r4, #12]
 8006eb0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006eb4:	bf04      	itt	eq
 8006eb6:	f043 0301 	orreq.w	r3, r3, #1
 8006eba:	81a3      	strheq	r3, [r4, #12]
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	6026      	str	r6, [r4, #0]
 8006ec0:	f013 0208 	ands.w	r2, r3, #8
 8006ec4:	d01d      	beq.n	8006f02 <setvbuf+0x14e>
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	bf41      	itttt	mi
 8006eca:	2200      	movmi	r2, #0
 8006ecc:	426d      	negmi	r5, r5
 8006ece:	60a2      	strmi	r2, [r4, #8]
 8006ed0:	61a5      	strmi	r5, [r4, #24]
 8006ed2:	bf58      	it	pl
 8006ed4:	60a5      	strpl	r5, [r4, #8]
 8006ed6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006ed8:	f015 0501 	ands.w	r5, r5, #1
 8006edc:	d0d4      	beq.n	8006e88 <setvbuf+0xd4>
 8006ede:	2500      	movs	r5, #0
 8006ee0:	e7d7      	b.n	8006e92 <setvbuf+0xde>
 8006ee2:	4648      	mov	r0, r9
 8006ee4:	f001 fc56 	bl	8008794 <malloc>
 8006ee8:	4606      	mov	r6, r0
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d0ba      	beq.n	8006e64 <setvbuf+0xb0>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	464d      	mov	r5, r9
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	e7d1      	b.n	8006e9e <setvbuf+0xea>
 8006efa:	2500      	movs	r5, #0
 8006efc:	e7b4      	b.n	8006e68 <setvbuf+0xb4>
 8006efe:	46a9      	mov	r9, r5
 8006f00:	e7f5      	b.n	8006eee <setvbuf+0x13a>
 8006f02:	60a2      	str	r2, [r4, #8]
 8006f04:	e7e7      	b.n	8006ed6 <setvbuf+0x122>
 8006f06:	f04f 35ff 	mov.w	r5, #4294967295
 8006f0a:	e7c2      	b.n	8006e92 <setvbuf+0xde>
 8006f0c:	200001f8 	.word	0x200001f8

08006f10 <__sread>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	460c      	mov	r4, r1
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	f000 f998 	bl	800724c <_read_r>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	bfab      	itete	ge
 8006f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f22:	89a3      	ldrhlt	r3, [r4, #12]
 8006f24:	181b      	addge	r3, r3, r0
 8006f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f2a:	bfac      	ite	ge
 8006f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f2e:	81a3      	strhlt	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__swrite>:
 8006f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	461f      	mov	r7, r3
 8006f38:	898b      	ldrh	r3, [r1, #12]
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	05db      	lsls	r3, r3, #23
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4616      	mov	r6, r2
 8006f42:	d505      	bpl.n	8006f50 <__swrite+0x1e>
 8006f44:	2302      	movs	r3, #2
 8006f46:	2200      	movs	r2, #0
 8006f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4c:	f000 f96c 	bl	8007228 <_lseek_r>
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	4632      	mov	r2, r6
 8006f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	f000 b983 	b.w	8007270 <_write_r>

08006f6a <__sseek>:
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f72:	f000 f959 	bl	8007228 <_lseek_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	bf15      	itete	ne
 8006f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f86:	81a3      	strheq	r3, [r4, #12]
 8006f88:	bf18      	it	ne
 8006f8a:	81a3      	strhne	r3, [r4, #12]
 8006f8c:	bd10      	pop	{r4, pc}

08006f8e <__sclose>:
 8006f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f92:	f000 b939 	b.w	8007208 <_close_r>

08006f96 <__swbuf_r>:
 8006f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f98:	460e      	mov	r6, r1
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	b118      	cbz	r0, 8006fa8 <__swbuf_r+0x12>
 8006fa0:	6a03      	ldr	r3, [r0, #32]
 8006fa2:	b90b      	cbnz	r3, 8006fa8 <__swbuf_r+0x12>
 8006fa4:	f7ff fe62 	bl	8006c6c <__sinit>
 8006fa8:	69a3      	ldr	r3, [r4, #24]
 8006faa:	60a3      	str	r3, [r4, #8]
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	071a      	lsls	r2, r3, #28
 8006fb0:	d525      	bpl.n	8006ffe <__swbuf_r+0x68>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	b31b      	cbz	r3, 8006ffe <__swbuf_r+0x68>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	b2f6      	uxtb	r6, r6
 8006fbc:	1a98      	subs	r0, r3, r2
 8006fbe:	6963      	ldr	r3, [r4, #20]
 8006fc0:	4637      	mov	r7, r6
 8006fc2:	4283      	cmp	r3, r0
 8006fc4:	dc04      	bgt.n	8006fd0 <__swbuf_r+0x3a>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f002 fb15 	bl	80095f8 <_fflush_r>
 8006fce:	b9e0      	cbnz	r0, 800700a <__swbuf_r+0x74>
 8006fd0:	68a3      	ldr	r3, [r4, #8]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	701e      	strb	r6, [r3, #0]
 8006fde:	6962      	ldr	r2, [r4, #20]
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d004      	beq.n	8006ff0 <__swbuf_r+0x5a>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	07db      	lsls	r3, r3, #31
 8006fea:	d506      	bpl.n	8006ffa <__swbuf_r+0x64>
 8006fec:	2e0a      	cmp	r6, #10
 8006fee:	d104      	bne.n	8006ffa <__swbuf_r+0x64>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f002 fb00 	bl	80095f8 <_fflush_r>
 8006ff8:	b938      	cbnz	r0, 800700a <__swbuf_r+0x74>
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	4621      	mov	r1, r4
 8007000:	4628      	mov	r0, r5
 8007002:	f000 f805 	bl	8007010 <__swsetup_r>
 8007006:	2800      	cmp	r0, #0
 8007008:	d0d5      	beq.n	8006fb6 <__swbuf_r+0x20>
 800700a:	f04f 37ff 	mov.w	r7, #4294967295
 800700e:	e7f4      	b.n	8006ffa <__swbuf_r+0x64>

08007010 <__swsetup_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4b2a      	ldr	r3, [pc, #168]	; (80070bc <__swsetup_r+0xac>)
 8007014:	4605      	mov	r5, r0
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	460c      	mov	r4, r1
 800701a:	b118      	cbz	r0, 8007024 <__swsetup_r+0x14>
 800701c:	6a03      	ldr	r3, [r0, #32]
 800701e:	b90b      	cbnz	r3, 8007024 <__swsetup_r+0x14>
 8007020:	f7ff fe24 	bl	8006c6c <__sinit>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800702a:	0718      	lsls	r0, r3, #28
 800702c:	d422      	bmi.n	8007074 <__swsetup_r+0x64>
 800702e:	06d9      	lsls	r1, r3, #27
 8007030:	d407      	bmi.n	8007042 <__swsetup_r+0x32>
 8007032:	2309      	movs	r3, #9
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800703a:	f04f 30ff 	mov.w	r0, #4294967295
 800703e:	81a3      	strh	r3, [r4, #12]
 8007040:	e034      	b.n	80070ac <__swsetup_r+0x9c>
 8007042:	0758      	lsls	r0, r3, #29
 8007044:	d512      	bpl.n	800706c <__swsetup_r+0x5c>
 8007046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007048:	b141      	cbz	r1, 800705c <__swsetup_r+0x4c>
 800704a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800704e:	4299      	cmp	r1, r3
 8007050:	d002      	beq.n	8007058 <__swsetup_r+0x48>
 8007052:	4628      	mov	r0, r5
 8007054:	f000 fffc 	bl	8008050 <_free_r>
 8007058:	2300      	movs	r3, #0
 800705a:	6363      	str	r3, [r4, #52]	; 0x34
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	2300      	movs	r3, #0
 8007066:	6063      	str	r3, [r4, #4]
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f043 0308 	orr.w	r3, r3, #8
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	b94b      	cbnz	r3, 800708c <__swsetup_r+0x7c>
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800707e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007082:	d003      	beq.n	800708c <__swsetup_r+0x7c>
 8007084:	4621      	mov	r1, r4
 8007086:	4628      	mov	r0, r5
 8007088:	f002 fb15 	bl	80096b6 <__smakebuf_r>
 800708c:	89a0      	ldrh	r0, [r4, #12]
 800708e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007092:	f010 0301 	ands.w	r3, r0, #1
 8007096:	d00a      	beq.n	80070ae <__swsetup_r+0x9e>
 8007098:	2300      	movs	r3, #0
 800709a:	60a3      	str	r3, [r4, #8]
 800709c:	6963      	ldr	r3, [r4, #20]
 800709e:	425b      	negs	r3, r3
 80070a0:	61a3      	str	r3, [r4, #24]
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	b943      	cbnz	r3, 80070b8 <__swsetup_r+0xa8>
 80070a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070aa:	d1c4      	bne.n	8007036 <__swsetup_r+0x26>
 80070ac:	bd38      	pop	{r3, r4, r5, pc}
 80070ae:	0781      	lsls	r1, r0, #30
 80070b0:	bf58      	it	pl
 80070b2:	6963      	ldrpl	r3, [r4, #20]
 80070b4:	60a3      	str	r3, [r4, #8]
 80070b6:	e7f4      	b.n	80070a2 <__swsetup_r+0x92>
 80070b8:	2000      	movs	r0, #0
 80070ba:	e7f7      	b.n	80070ac <__swsetup_r+0x9c>
 80070bc:	200001f8 	.word	0x200001f8

080070c0 <memset>:
 80070c0:	4603      	mov	r3, r0
 80070c2:	4402      	add	r2, r0
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d100      	bne.n	80070ca <memset+0xa>
 80070c8:	4770      	bx	lr
 80070ca:	f803 1b01 	strb.w	r1, [r3], #1
 80070ce:	e7f9      	b.n	80070c4 <memset+0x4>

080070d0 <strncmp>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	b16a      	cbz	r2, 80070f0 <strncmp+0x20>
 80070d4:	3901      	subs	r1, #1
 80070d6:	1884      	adds	r4, r0, r2
 80070d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d103      	bne.n	80070ec <strncmp+0x1c>
 80070e4:	42a0      	cmp	r0, r4
 80070e6:	d001      	beq.n	80070ec <strncmp+0x1c>
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	d1f5      	bne.n	80070d8 <strncmp+0x8>
 80070ec:	1ad0      	subs	r0, r2, r3
 80070ee:	bd10      	pop	{r4, pc}
 80070f0:	4610      	mov	r0, r2
 80070f2:	e7fc      	b.n	80070ee <strncmp+0x1e>

080070f4 <strncpy>:
 80070f4:	4603      	mov	r3, r0
 80070f6:	b510      	push	{r4, lr}
 80070f8:	3901      	subs	r1, #1
 80070fa:	b132      	cbz	r2, 800710a <strncpy+0x16>
 80070fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007100:	3a01      	subs	r2, #1
 8007102:	f803 4b01 	strb.w	r4, [r3], #1
 8007106:	2c00      	cmp	r4, #0
 8007108:	d1f7      	bne.n	80070fa <strncpy+0x6>
 800710a:	2100      	movs	r1, #0
 800710c:	441a      	add	r2, r3
 800710e:	4293      	cmp	r3, r2
 8007110:	d100      	bne.n	8007114 <strncpy+0x20>
 8007112:	bd10      	pop	{r4, pc}
 8007114:	f803 1b01 	strb.w	r1, [r3], #1
 8007118:	e7f9      	b.n	800710e <strncpy+0x1a>
	...

0800711c <strtok>:
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <strtok+0x5c>)
 800711e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007122:	681f      	ldr	r7, [r3, #0]
 8007124:	4605      	mov	r5, r0
 8007126:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007128:	460e      	mov	r6, r1
 800712a:	b9ec      	cbnz	r4, 8007168 <strtok+0x4c>
 800712c:	2050      	movs	r0, #80	; 0x50
 800712e:	f001 fb31 	bl	8008794 <malloc>
 8007132:	4602      	mov	r2, r0
 8007134:	6478      	str	r0, [r7, #68]	; 0x44
 8007136:	b920      	cbnz	r0, 8007142 <strtok+0x26>
 8007138:	215b      	movs	r1, #91	; 0x5b
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <strtok+0x60>)
 800713c:	4810      	ldr	r0, [pc, #64]	; (8007180 <strtok+0x64>)
 800713e:	f000 f8f9 	bl	8007334 <__assert_func>
 8007142:	e9c0 4400 	strd	r4, r4, [r0]
 8007146:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800714a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800714e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007152:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007156:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800715a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800715e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007162:	6184      	str	r4, [r0, #24]
 8007164:	7704      	strb	r4, [r0, #28]
 8007166:	6244      	str	r4, [r0, #36]	; 0x24
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800716e:	2301      	movs	r3, #1
 8007170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	f000 b806 	b.w	8007184 <__strtok_r>
 8007178:	200001f8 	.word	0x200001f8
 800717c:	08009b3d 	.word	0x08009b3d
 8007180:	08009b54 	.word	0x08009b54

08007184 <__strtok_r>:
 8007184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007186:	b908      	cbnz	r0, 800718c <__strtok_r+0x8>
 8007188:	6810      	ldr	r0, [r2, #0]
 800718a:	b188      	cbz	r0, 80071b0 <__strtok_r+0x2c>
 800718c:	4604      	mov	r4, r0
 800718e:	460f      	mov	r7, r1
 8007190:	4620      	mov	r0, r4
 8007192:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007196:	f817 6b01 	ldrb.w	r6, [r7], #1
 800719a:	b91e      	cbnz	r6, 80071a4 <__strtok_r+0x20>
 800719c:	b965      	cbnz	r5, 80071b8 <__strtok_r+0x34>
 800719e:	4628      	mov	r0, r5
 80071a0:	6015      	str	r5, [r2, #0]
 80071a2:	e005      	b.n	80071b0 <__strtok_r+0x2c>
 80071a4:	42b5      	cmp	r5, r6
 80071a6:	d1f6      	bne.n	8007196 <__strtok_r+0x12>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f0      	bne.n	800718e <__strtok_r+0xa>
 80071ac:	6014      	str	r4, [r2, #0]
 80071ae:	7003      	strb	r3, [r0, #0]
 80071b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b2:	461c      	mov	r4, r3
 80071b4:	e00c      	b.n	80071d0 <__strtok_r+0x4c>
 80071b6:	b915      	cbnz	r5, 80071be <__strtok_r+0x3a>
 80071b8:	460e      	mov	r6, r1
 80071ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80071c2:	42ab      	cmp	r3, r5
 80071c4:	d1f7      	bne.n	80071b6 <__strtok_r+0x32>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0f3      	beq.n	80071b2 <__strtok_r+0x2e>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80071d0:	6014      	str	r4, [r2, #0]
 80071d2:	e7ed      	b.n	80071b0 <__strtok_r+0x2c>

080071d4 <strstr>:
 80071d4:	780a      	ldrb	r2, [r1, #0]
 80071d6:	b570      	push	{r4, r5, r6, lr}
 80071d8:	b96a      	cbnz	r2, 80071f6 <strstr+0x22>
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	429a      	cmp	r2, r3
 80071de:	d109      	bne.n	80071f4 <strstr+0x20>
 80071e0:	460c      	mov	r4, r1
 80071e2:	4605      	mov	r5, r0
 80071e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0f6      	beq.n	80071da <strstr+0x6>
 80071ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80071f0:	429e      	cmp	r6, r3
 80071f2:	d0f7      	beq.n	80071e4 <strstr+0x10>
 80071f4:	3001      	adds	r0, #1
 80071f6:	7803      	ldrb	r3, [r0, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1ef      	bne.n	80071dc <strstr+0x8>
 80071fc:	4618      	mov	r0, r3
 80071fe:	e7ec      	b.n	80071da <strstr+0x6>

08007200 <_localeconv_r>:
 8007200:	4800      	ldr	r0, [pc, #0]	; (8007204 <_localeconv_r+0x4>)
 8007202:	4770      	bx	lr
 8007204:	20000130 	.word	0x20000130

08007208 <_close_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	2300      	movs	r3, #0
 800720c:	4d05      	ldr	r5, [pc, #20]	; (8007224 <_close_r+0x1c>)
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7fb f948 	bl	80024a8 <_close>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_close_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_close_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	200023d4 	.word	0x200023d4

08007228 <_lseek_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	2200      	movs	r2, #0
 8007232:	4d05      	ldr	r5, [pc, #20]	; (8007248 <_lseek_r+0x20>)
 8007234:	602a      	str	r2, [r5, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	f7fb f95a 	bl	80024f0 <_lseek>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_lseek_r+0x1e>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	b103      	cbz	r3, 8007246 <_lseek_r+0x1e>
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	200023d4 	.word	0x200023d4

0800724c <_read_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	2200      	movs	r2, #0
 8007256:	4d05      	ldr	r5, [pc, #20]	; (800726c <_read_r+0x20>)
 8007258:	602a      	str	r2, [r5, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	f7fb f907 	bl	800246e <_read>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_read_r+0x1e>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_read_r+0x1e>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	200023d4 	.word	0x200023d4

08007270 <_write_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	2200      	movs	r2, #0
 800727a:	4d05      	ldr	r5, [pc, #20]	; (8007290 <_write_r+0x20>)
 800727c:	602a      	str	r2, [r5, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	f7fa fa46 	bl	8001710 <_write>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_write_r+0x1e>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_write_r+0x1e>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	200023d4 	.word	0x200023d4

08007294 <__errno>:
 8007294:	4b01      	ldr	r3, [pc, #4]	; (800729c <__errno+0x8>)
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	200001f8 	.word	0x200001f8

080072a0 <__libc_init_array>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	2600      	movs	r6, #0
 80072a4:	4d0c      	ldr	r5, [pc, #48]	; (80072d8 <__libc_init_array+0x38>)
 80072a6:	4c0d      	ldr	r4, [pc, #52]	; (80072dc <__libc_init_array+0x3c>)
 80072a8:	1b64      	subs	r4, r4, r5
 80072aa:	10a4      	asrs	r4, r4, #2
 80072ac:	42a6      	cmp	r6, r4
 80072ae:	d109      	bne.n	80072c4 <__libc_init_array+0x24>
 80072b0:	f002 fad0 	bl	8009854 <_init>
 80072b4:	2600      	movs	r6, #0
 80072b6:	4d0a      	ldr	r5, [pc, #40]	; (80072e0 <__libc_init_array+0x40>)
 80072b8:	4c0a      	ldr	r4, [pc, #40]	; (80072e4 <__libc_init_array+0x44>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	42a6      	cmp	r6, r4
 80072c0:	d105      	bne.n	80072ce <__libc_init_array+0x2e>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c8:	4798      	blx	r3
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7ee      	b.n	80072ac <__libc_init_array+0xc>
 80072ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d2:	4798      	blx	r3
 80072d4:	3601      	adds	r6, #1
 80072d6:	e7f2      	b.n	80072be <__libc_init_array+0x1e>
 80072d8:	08009e38 	.word	0x08009e38
 80072dc:	08009e38 	.word	0x08009e38
 80072e0:	08009e38 	.word	0x08009e38
 80072e4:	08009e3c 	.word	0x08009e3c

080072e8 <__retarget_lock_init_recursive>:
 80072e8:	4770      	bx	lr

080072ea <__retarget_lock_acquire_recursive>:
 80072ea:	4770      	bx	lr

080072ec <__retarget_lock_release_recursive>:
 80072ec:	4770      	bx	lr

080072ee <memchr>:
 80072ee:	4603      	mov	r3, r0
 80072f0:	b510      	push	{r4, lr}
 80072f2:	b2c9      	uxtb	r1, r1
 80072f4:	4402      	add	r2, r0
 80072f6:	4293      	cmp	r3, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	d101      	bne.n	8007300 <memchr+0x12>
 80072fc:	2000      	movs	r0, #0
 80072fe:	e003      	b.n	8007308 <memchr+0x1a>
 8007300:	7804      	ldrb	r4, [r0, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	428c      	cmp	r4, r1
 8007306:	d1f6      	bne.n	80072f6 <memchr+0x8>
 8007308:	bd10      	pop	{r4, pc}

0800730a <memcpy>:
 800730a:	440a      	add	r2, r1
 800730c:	4291      	cmp	r1, r2
 800730e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007312:	d100      	bne.n	8007316 <memcpy+0xc>
 8007314:	4770      	bx	lr
 8007316:	b510      	push	{r4, lr}
 8007318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731c:	4291      	cmp	r1, r2
 800731e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007322:	d1f9      	bne.n	8007318 <memcpy+0xe>
 8007324:	bd10      	pop	{r4, pc}
	...

08007328 <nan>:
 8007328:	2000      	movs	r0, #0
 800732a:	4901      	ldr	r1, [pc, #4]	; (8007330 <nan+0x8>)
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	7ff80000 	.word	0x7ff80000

08007334 <__assert_func>:
 8007334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007336:	4614      	mov	r4, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <__assert_func+0x2c>)
 800733c:	4605      	mov	r5, r0
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68d8      	ldr	r0, [r3, #12]
 8007342:	b14c      	cbz	r4, 8007358 <__assert_func+0x24>
 8007344:	4b07      	ldr	r3, [pc, #28]	; (8007364 <__assert_func+0x30>)
 8007346:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800734a:	9100      	str	r1, [sp, #0]
 800734c:	462b      	mov	r3, r5
 800734e:	4906      	ldr	r1, [pc, #24]	; (8007368 <__assert_func+0x34>)
 8007350:	f002 f97a 	bl	8009648 <fiprintf>
 8007354:	f002 fa1e 	bl	8009794 <abort>
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <__assert_func+0x38>)
 800735a:	461c      	mov	r4, r3
 800735c:	e7f3      	b.n	8007346 <__assert_func+0x12>
 800735e:	bf00      	nop
 8007360:	200001f8 	.word	0x200001f8
 8007364:	08009bb6 	.word	0x08009bb6
 8007368:	08009bc3 	.word	0x08009bc3
 800736c:	08009bf1 	.word	0x08009bf1

08007370 <quorem>:
 8007370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	6903      	ldr	r3, [r0, #16]
 8007376:	690c      	ldr	r4, [r1, #16]
 8007378:	4607      	mov	r7, r0
 800737a:	42a3      	cmp	r3, r4
 800737c:	db7f      	blt.n	800747e <quorem+0x10e>
 800737e:	3c01      	subs	r4, #1
 8007380:	f100 0514 	add.w	r5, r0, #20
 8007384:	f101 0814 	add.w	r8, r1, #20
 8007388:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007396:	3301      	adds	r3, #1
 8007398:	429a      	cmp	r2, r3
 800739a:	fbb2 f6f3 	udiv	r6, r2, r3
 800739e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073a6:	d331      	bcc.n	800740c <quorem+0x9c>
 80073a8:	f04f 0e00 	mov.w	lr, #0
 80073ac:	4640      	mov	r0, r8
 80073ae:	46ac      	mov	ip, r5
 80073b0:	46f2      	mov	sl, lr
 80073b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80073b6:	b293      	uxth	r3, r2
 80073b8:	fb06 e303 	mla	r3, r6, r3, lr
 80073bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073c0:	0c1a      	lsrs	r2, r3, #16
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	fb06 220e 	mla	r2, r6, lr, r2
 80073c8:	ebaa 0303 	sub.w	r3, sl, r3
 80073cc:	f8dc a000 	ldr.w	sl, [ip]
 80073d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073d4:	fa1f fa8a 	uxth.w	sl, sl
 80073d8:	4453      	add	r3, sl
 80073da:	f8dc a000 	ldr.w	sl, [ip]
 80073de:	b292      	uxth	r2, r2
 80073e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ee:	4581      	cmp	r9, r0
 80073f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073f4:	f84c 3b04 	str.w	r3, [ip], #4
 80073f8:	d2db      	bcs.n	80073b2 <quorem+0x42>
 80073fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80073fe:	b92b      	cbnz	r3, 800740c <quorem+0x9c>
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	3b04      	subs	r3, #4
 8007404:	429d      	cmp	r5, r3
 8007406:	461a      	mov	r2, r3
 8007408:	d32d      	bcc.n	8007466 <quorem+0xf6>
 800740a:	613c      	str	r4, [r7, #16]
 800740c:	4638      	mov	r0, r7
 800740e:	f001 fd4b 	bl	8008ea8 <__mcmp>
 8007412:	2800      	cmp	r0, #0
 8007414:	db23      	blt.n	800745e <quorem+0xee>
 8007416:	4629      	mov	r1, r5
 8007418:	2000      	movs	r0, #0
 800741a:	3601      	adds	r6, #1
 800741c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007420:	f8d1 c000 	ldr.w	ip, [r1]
 8007424:	b293      	uxth	r3, r2
 8007426:	1ac3      	subs	r3, r0, r3
 8007428:	0c12      	lsrs	r2, r2, #16
 800742a:	fa1f f08c 	uxth.w	r0, ip
 800742e:	4403      	add	r3, r0
 8007430:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007438:	b29b      	uxth	r3, r3
 800743a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800743e:	45c1      	cmp	r9, r8
 8007440:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007444:	f841 3b04 	str.w	r3, [r1], #4
 8007448:	d2e8      	bcs.n	800741c <quorem+0xac>
 800744a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800744e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007452:	b922      	cbnz	r2, 800745e <quorem+0xee>
 8007454:	3b04      	subs	r3, #4
 8007456:	429d      	cmp	r5, r3
 8007458:	461a      	mov	r2, r3
 800745a:	d30a      	bcc.n	8007472 <quorem+0x102>
 800745c:	613c      	str	r4, [r7, #16]
 800745e:	4630      	mov	r0, r6
 8007460:	b003      	add	sp, #12
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	3b04      	subs	r3, #4
 800746a:	2a00      	cmp	r2, #0
 800746c:	d1cd      	bne.n	800740a <quorem+0x9a>
 800746e:	3c01      	subs	r4, #1
 8007470:	e7c8      	b.n	8007404 <quorem+0x94>
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	3b04      	subs	r3, #4
 8007476:	2a00      	cmp	r2, #0
 8007478:	d1f0      	bne.n	800745c <quorem+0xec>
 800747a:	3c01      	subs	r4, #1
 800747c:	e7eb      	b.n	8007456 <quorem+0xe6>
 800747e:	2000      	movs	r0, #0
 8007480:	e7ee      	b.n	8007460 <quorem+0xf0>
 8007482:	0000      	movs	r0, r0
 8007484:	0000      	movs	r0, r0
	...

08007488 <_dtoa_r>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	4616      	mov	r6, r2
 800748e:	461f      	mov	r7, r3
 8007490:	69c4      	ldr	r4, [r0, #28]
 8007492:	b099      	sub	sp, #100	; 0x64
 8007494:	4605      	mov	r5, r0
 8007496:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800749a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800749e:	b974      	cbnz	r4, 80074be <_dtoa_r+0x36>
 80074a0:	2010      	movs	r0, #16
 80074a2:	f001 f977 	bl	8008794 <malloc>
 80074a6:	4602      	mov	r2, r0
 80074a8:	61e8      	str	r0, [r5, #28]
 80074aa:	b920      	cbnz	r0, 80074b6 <_dtoa_r+0x2e>
 80074ac:	21ef      	movs	r1, #239	; 0xef
 80074ae:	4bac      	ldr	r3, [pc, #688]	; (8007760 <_dtoa_r+0x2d8>)
 80074b0:	48ac      	ldr	r0, [pc, #688]	; (8007764 <_dtoa_r+0x2dc>)
 80074b2:	f7ff ff3f 	bl	8007334 <__assert_func>
 80074b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074ba:	6004      	str	r4, [r0, #0]
 80074bc:	60c4      	str	r4, [r0, #12]
 80074be:	69eb      	ldr	r3, [r5, #28]
 80074c0:	6819      	ldr	r1, [r3, #0]
 80074c2:	b151      	cbz	r1, 80074da <_dtoa_r+0x52>
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	2301      	movs	r3, #1
 80074c8:	4093      	lsls	r3, r2
 80074ca:	604a      	str	r2, [r1, #4]
 80074cc:	608b      	str	r3, [r1, #8]
 80074ce:	4628      	mov	r0, r5
 80074d0:	f001 fa66 	bl	80089a0 <_Bfree>
 80074d4:	2200      	movs	r2, #0
 80074d6:	69eb      	ldr	r3, [r5, #28]
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	1e3b      	subs	r3, r7, #0
 80074dc:	bfaf      	iteee	ge
 80074de:	2300      	movge	r3, #0
 80074e0:	2201      	movlt	r2, #1
 80074e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074e6:	9305      	strlt	r3, [sp, #20]
 80074e8:	bfa8      	it	ge
 80074ea:	f8c8 3000 	strge.w	r3, [r8]
 80074ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80074f2:	4b9d      	ldr	r3, [pc, #628]	; (8007768 <_dtoa_r+0x2e0>)
 80074f4:	bfb8      	it	lt
 80074f6:	f8c8 2000 	strlt.w	r2, [r8]
 80074fa:	ea33 0309 	bics.w	r3, r3, r9
 80074fe:	d119      	bne.n	8007534 <_dtoa_r+0xac>
 8007500:	f242 730f 	movw	r3, #9999	; 0x270f
 8007504:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800750c:	4333      	orrs	r3, r6
 800750e:	f000 8589 	beq.w	8008024 <_dtoa_r+0xb9c>
 8007512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007514:	b953      	cbnz	r3, 800752c <_dtoa_r+0xa4>
 8007516:	4b95      	ldr	r3, [pc, #596]	; (800776c <_dtoa_r+0x2e4>)
 8007518:	e023      	b.n	8007562 <_dtoa_r+0xda>
 800751a:	4b95      	ldr	r3, [pc, #596]	; (8007770 <_dtoa_r+0x2e8>)
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	3308      	adds	r3, #8
 8007520:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	9803      	ldr	r0, [sp, #12]
 8007526:	b019      	add	sp, #100	; 0x64
 8007528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752c:	4b8f      	ldr	r3, [pc, #572]	; (800776c <_dtoa_r+0x2e4>)
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	3303      	adds	r3, #3
 8007532:	e7f5      	b.n	8007520 <_dtoa_r+0x98>
 8007534:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007538:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800753c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007540:	2200      	movs	r2, #0
 8007542:	2300      	movs	r3, #0
 8007544:	f7f9 fa3a 	bl	80009bc <__aeabi_dcmpeq>
 8007548:	4680      	mov	r8, r0
 800754a:	b160      	cbz	r0, 8007566 <_dtoa_r+0xde>
 800754c:	2301      	movs	r3, #1
 800754e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8562 	beq.w	800801e <_dtoa_r+0xb96>
 800755a:	4b86      	ldr	r3, [pc, #536]	; (8007774 <_dtoa_r+0x2ec>)
 800755c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	3b01      	subs	r3, #1
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	e7de      	b.n	8007524 <_dtoa_r+0x9c>
 8007566:	ab16      	add	r3, sp, #88	; 0x58
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	ab17      	add	r3, sp, #92	; 0x5c
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	4628      	mov	r0, r5
 8007570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007574:	f001 fda8 	bl	80090c8 <__d2b>
 8007578:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800757c:	4682      	mov	sl, r0
 800757e:	2c00      	cmp	r4, #0
 8007580:	d07e      	beq.n	8007680 <_dtoa_r+0x1f8>
 8007582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007588:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800758c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007590:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007594:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007598:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800759c:	4619      	mov	r1, r3
 800759e:	2200      	movs	r2, #0
 80075a0:	4b75      	ldr	r3, [pc, #468]	; (8007778 <_dtoa_r+0x2f0>)
 80075a2:	f7f8 fdeb 	bl	800017c <__aeabi_dsub>
 80075a6:	a368      	add	r3, pc, #416	; (adr r3, 8007748 <_dtoa_r+0x2c0>)
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f7f8 ff9e 	bl	80004ec <__aeabi_dmul>
 80075b0:	a367      	add	r3, pc, #412	; (adr r3, 8007750 <_dtoa_r+0x2c8>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f8 fde3 	bl	8000180 <__adddf3>
 80075ba:	4606      	mov	r6, r0
 80075bc:	4620      	mov	r0, r4
 80075be:	460f      	mov	r7, r1
 80075c0:	f7f8 ff2a 	bl	8000418 <__aeabi_i2d>
 80075c4:	a364      	add	r3, pc, #400	; (adr r3, 8007758 <_dtoa_r+0x2d0>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 ff8f 	bl	80004ec <__aeabi_dmul>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f8 fdd3 	bl	8000180 <__adddf3>
 80075da:	4606      	mov	r6, r0
 80075dc:	460f      	mov	r7, r1
 80075de:	f7f9 fa35 	bl	8000a4c <__aeabi_d2iz>
 80075e2:	2200      	movs	r2, #0
 80075e4:	4683      	mov	fp, r0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f9 f9f0 	bl	80009d0 <__aeabi_dcmplt>
 80075f0:	b148      	cbz	r0, 8007606 <_dtoa_r+0x17e>
 80075f2:	4658      	mov	r0, fp
 80075f4:	f7f8 ff10 	bl	8000418 <__aeabi_i2d>
 80075f8:	4632      	mov	r2, r6
 80075fa:	463b      	mov	r3, r7
 80075fc:	f7f9 f9de 	bl	80009bc <__aeabi_dcmpeq>
 8007600:	b908      	cbnz	r0, 8007606 <_dtoa_r+0x17e>
 8007602:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007606:	f1bb 0f16 	cmp.w	fp, #22
 800760a:	d857      	bhi.n	80076bc <_dtoa_r+0x234>
 800760c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007610:	4b5a      	ldr	r3, [pc, #360]	; (800777c <_dtoa_r+0x2f4>)
 8007612:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f9 f9d9 	bl	80009d0 <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	d04e      	beq.n	80076c0 <_dtoa_r+0x238>
 8007622:	2300      	movs	r3, #0
 8007624:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007628:	930f      	str	r3, [sp, #60]	; 0x3c
 800762a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800762c:	1b1b      	subs	r3, r3, r4
 800762e:	1e5a      	subs	r2, r3, #1
 8007630:	bf46      	itte	mi
 8007632:	f1c3 0901 	rsbmi	r9, r3, #1
 8007636:	2300      	movmi	r3, #0
 8007638:	f04f 0900 	movpl.w	r9, #0
 800763c:	9209      	str	r2, [sp, #36]	; 0x24
 800763e:	bf48      	it	mi
 8007640:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007642:	f1bb 0f00 	cmp.w	fp, #0
 8007646:	db3d      	blt.n	80076c4 <_dtoa_r+0x23c>
 8007648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800764e:	445b      	add	r3, fp
 8007650:	9309      	str	r3, [sp, #36]	; 0x24
 8007652:	2300      	movs	r3, #0
 8007654:	930a      	str	r3, [sp, #40]	; 0x28
 8007656:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007658:	2b09      	cmp	r3, #9
 800765a:	d867      	bhi.n	800772c <_dtoa_r+0x2a4>
 800765c:	2b05      	cmp	r3, #5
 800765e:	bfc4      	itt	gt
 8007660:	3b04      	subgt	r3, #4
 8007662:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007666:	bfc8      	it	gt
 8007668:	2400      	movgt	r4, #0
 800766a:	f1a3 0302 	sub.w	r3, r3, #2
 800766e:	bfd8      	it	le
 8007670:	2401      	movle	r4, #1
 8007672:	2b03      	cmp	r3, #3
 8007674:	f200 8086 	bhi.w	8007784 <_dtoa_r+0x2fc>
 8007678:	e8df f003 	tbb	[pc, r3]
 800767c:	5637392c 	.word	0x5637392c
 8007680:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007684:	441c      	add	r4, r3
 8007686:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800768a:	2b20      	cmp	r3, #32
 800768c:	bfc1      	itttt	gt
 800768e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007692:	fa09 f903 	lslgt.w	r9, r9, r3
 8007696:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800769a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800769e:	bfd6      	itet	le
 80076a0:	f1c3 0320 	rsble	r3, r3, #32
 80076a4:	ea49 0003 	orrgt.w	r0, r9, r3
 80076a8:	fa06 f003 	lslle.w	r0, r6, r3
 80076ac:	f7f8 fea4 	bl	80003f8 <__aeabi_ui2d>
 80076b0:	2201      	movs	r2, #1
 80076b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80076b6:	3c01      	subs	r4, #1
 80076b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80076ba:	e76f      	b.n	800759c <_dtoa_r+0x114>
 80076bc:	2301      	movs	r3, #1
 80076be:	e7b3      	b.n	8007628 <_dtoa_r+0x1a0>
 80076c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80076c2:	e7b2      	b.n	800762a <_dtoa_r+0x1a2>
 80076c4:	f1cb 0300 	rsb	r3, fp, #0
 80076c8:	930a      	str	r3, [sp, #40]	; 0x28
 80076ca:	2300      	movs	r3, #0
 80076cc:	eba9 090b 	sub.w	r9, r9, fp
 80076d0:	930e      	str	r3, [sp, #56]	; 0x38
 80076d2:	e7c0      	b.n	8007656 <_dtoa_r+0x1ce>
 80076d4:	2300      	movs	r3, #0
 80076d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc55      	bgt.n	800778a <_dtoa_r+0x302>
 80076de:	2301      	movs	r3, #1
 80076e0:	461a      	mov	r2, r3
 80076e2:	9306      	str	r3, [sp, #24]
 80076e4:	9308      	str	r3, [sp, #32]
 80076e6:	9223      	str	r2, [sp, #140]	; 0x8c
 80076e8:	e00b      	b.n	8007702 <_dtoa_r+0x27a>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7f3      	b.n	80076d6 <_dtoa_r+0x24e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80076f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076f4:	445b      	add	r3, fp
 80076f6:	9306      	str	r3, [sp, #24]
 80076f8:	3301      	adds	r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	bfb8      	it	lt
 8007700:	2301      	movlt	r3, #1
 8007702:	2100      	movs	r1, #0
 8007704:	2204      	movs	r2, #4
 8007706:	69e8      	ldr	r0, [r5, #28]
 8007708:	f102 0614 	add.w	r6, r2, #20
 800770c:	429e      	cmp	r6, r3
 800770e:	d940      	bls.n	8007792 <_dtoa_r+0x30a>
 8007710:	6041      	str	r1, [r0, #4]
 8007712:	4628      	mov	r0, r5
 8007714:	f001 f904 	bl	8008920 <_Balloc>
 8007718:	9003      	str	r0, [sp, #12]
 800771a:	2800      	cmp	r0, #0
 800771c:	d13c      	bne.n	8007798 <_dtoa_r+0x310>
 800771e:	4602      	mov	r2, r0
 8007720:	f240 11af 	movw	r1, #431	; 0x1af
 8007724:	4b16      	ldr	r3, [pc, #88]	; (8007780 <_dtoa_r+0x2f8>)
 8007726:	e6c3      	b.n	80074b0 <_dtoa_r+0x28>
 8007728:	2301      	movs	r3, #1
 800772a:	e7e1      	b.n	80076f0 <_dtoa_r+0x268>
 800772c:	2401      	movs	r4, #1
 800772e:	2300      	movs	r3, #0
 8007730:	940b      	str	r4, [sp, #44]	; 0x2c
 8007732:	9322      	str	r3, [sp, #136]	; 0x88
 8007734:	f04f 33ff 	mov.w	r3, #4294967295
 8007738:	2200      	movs	r2, #0
 800773a:	9306      	str	r3, [sp, #24]
 800773c:	9308      	str	r3, [sp, #32]
 800773e:	2312      	movs	r3, #18
 8007740:	e7d1      	b.n	80076e6 <_dtoa_r+0x25e>
 8007742:	bf00      	nop
 8007744:	f3af 8000 	nop.w
 8007748:	636f4361 	.word	0x636f4361
 800774c:	3fd287a7 	.word	0x3fd287a7
 8007750:	8b60c8b3 	.word	0x8b60c8b3
 8007754:	3fc68a28 	.word	0x3fc68a28
 8007758:	509f79fb 	.word	0x509f79fb
 800775c:	3fd34413 	.word	0x3fd34413
 8007760:	08009b3d 	.word	0x08009b3d
 8007764:	08009bff 	.word	0x08009bff
 8007768:	7ff00000 	.word	0x7ff00000
 800776c:	08009bfb 	.word	0x08009bfb
 8007770:	08009bf2 	.word	0x08009bf2
 8007774:	08009b1a 	.word	0x08009b1a
 8007778:	3ff80000 	.word	0x3ff80000
 800777c:	08009d50 	.word	0x08009d50
 8007780:	08009c57 	.word	0x08009c57
 8007784:	2301      	movs	r3, #1
 8007786:	930b      	str	r3, [sp, #44]	; 0x2c
 8007788:	e7d4      	b.n	8007734 <_dtoa_r+0x2ac>
 800778a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800778c:	9306      	str	r3, [sp, #24]
 800778e:	9308      	str	r3, [sp, #32]
 8007790:	e7b7      	b.n	8007702 <_dtoa_r+0x27a>
 8007792:	3101      	adds	r1, #1
 8007794:	0052      	lsls	r2, r2, #1
 8007796:	e7b7      	b.n	8007708 <_dtoa_r+0x280>
 8007798:	69eb      	ldr	r3, [r5, #28]
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	9b08      	ldr	r3, [sp, #32]
 80077a0:	2b0e      	cmp	r3, #14
 80077a2:	f200 80a8 	bhi.w	80078f6 <_dtoa_r+0x46e>
 80077a6:	2c00      	cmp	r4, #0
 80077a8:	f000 80a5 	beq.w	80078f6 <_dtoa_r+0x46e>
 80077ac:	f1bb 0f00 	cmp.w	fp, #0
 80077b0:	dd34      	ble.n	800781c <_dtoa_r+0x394>
 80077b2:	4b9a      	ldr	r3, [pc, #616]	; (8007a1c <_dtoa_r+0x594>)
 80077b4:	f00b 020f 	and.w	r2, fp, #15
 80077b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80077c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077c8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80077cc:	d016      	beq.n	80077fc <_dtoa_r+0x374>
 80077ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077d2:	4b93      	ldr	r3, [pc, #588]	; (8007a20 <_dtoa_r+0x598>)
 80077d4:	2703      	movs	r7, #3
 80077d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077da:	f7f8 ffb1 	bl	8000740 <__aeabi_ddiv>
 80077de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077e2:	f004 040f 	and.w	r4, r4, #15
 80077e6:	4e8e      	ldr	r6, [pc, #568]	; (8007a20 <_dtoa_r+0x598>)
 80077e8:	b954      	cbnz	r4, 8007800 <_dtoa_r+0x378>
 80077ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077f2:	f7f8 ffa5 	bl	8000740 <__aeabi_ddiv>
 80077f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077fa:	e029      	b.n	8007850 <_dtoa_r+0x3c8>
 80077fc:	2702      	movs	r7, #2
 80077fe:	e7f2      	b.n	80077e6 <_dtoa_r+0x35e>
 8007800:	07e1      	lsls	r1, r4, #31
 8007802:	d508      	bpl.n	8007816 <_dtoa_r+0x38e>
 8007804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007808:	e9d6 2300 	ldrd	r2, r3, [r6]
 800780c:	f7f8 fe6e 	bl	80004ec <__aeabi_dmul>
 8007810:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007814:	3701      	adds	r7, #1
 8007816:	1064      	asrs	r4, r4, #1
 8007818:	3608      	adds	r6, #8
 800781a:	e7e5      	b.n	80077e8 <_dtoa_r+0x360>
 800781c:	f000 80a5 	beq.w	800796a <_dtoa_r+0x4e2>
 8007820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007824:	f1cb 0400 	rsb	r4, fp, #0
 8007828:	4b7c      	ldr	r3, [pc, #496]	; (8007a1c <_dtoa_r+0x594>)
 800782a:	f004 020f 	and.w	r2, r4, #15
 800782e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fe59 	bl	80004ec <__aeabi_dmul>
 800783a:	2702      	movs	r7, #2
 800783c:	2300      	movs	r3, #0
 800783e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007842:	4e77      	ldr	r6, [pc, #476]	; (8007a20 <_dtoa_r+0x598>)
 8007844:	1124      	asrs	r4, r4, #4
 8007846:	2c00      	cmp	r4, #0
 8007848:	f040 8084 	bne.w	8007954 <_dtoa_r+0x4cc>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1d2      	bne.n	80077f6 <_dtoa_r+0x36e>
 8007850:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007854:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8087 	beq.w	800796e <_dtoa_r+0x4e6>
 8007860:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007864:	2200      	movs	r2, #0
 8007866:	4b6f      	ldr	r3, [pc, #444]	; (8007a24 <_dtoa_r+0x59c>)
 8007868:	f7f9 f8b2 	bl	80009d0 <__aeabi_dcmplt>
 800786c:	2800      	cmp	r0, #0
 800786e:	d07e      	beq.n	800796e <_dtoa_r+0x4e6>
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d07b      	beq.n	800796e <_dtoa_r+0x4e6>
 8007876:	9b06      	ldr	r3, [sp, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd38      	ble.n	80078ee <_dtoa_r+0x466>
 800787c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007880:	2200      	movs	r2, #0
 8007882:	4b69      	ldr	r3, [pc, #420]	; (8007a28 <_dtoa_r+0x5a0>)
 8007884:	f7f8 fe32 	bl	80004ec <__aeabi_dmul>
 8007888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800788c:	9c06      	ldr	r4, [sp, #24]
 800788e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007892:	3701      	adds	r7, #1
 8007894:	4638      	mov	r0, r7
 8007896:	f7f8 fdbf 	bl	8000418 <__aeabi_i2d>
 800789a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800789e:	f7f8 fe25 	bl	80004ec <__aeabi_dmul>
 80078a2:	2200      	movs	r2, #0
 80078a4:	4b61      	ldr	r3, [pc, #388]	; (8007a2c <_dtoa_r+0x5a4>)
 80078a6:	f7f8 fc6b 	bl	8000180 <__adddf3>
 80078aa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078b2:	9611      	str	r6, [sp, #68]	; 0x44
 80078b4:	2c00      	cmp	r4, #0
 80078b6:	d15d      	bne.n	8007974 <_dtoa_r+0x4ec>
 80078b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078bc:	2200      	movs	r2, #0
 80078be:	4b5c      	ldr	r3, [pc, #368]	; (8007a30 <_dtoa_r+0x5a8>)
 80078c0:	f7f8 fc5c 	bl	800017c <__aeabi_dsub>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078cc:	4633      	mov	r3, r6
 80078ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078d0:	f7f9 f89c 	bl	8000a0c <__aeabi_dcmpgt>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	f040 8295 	bne.w	8007e04 <_dtoa_r+0x97c>
 80078da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078e4:	f7f9 f874 	bl	80009d0 <__aeabi_dcmplt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f040 8289 	bne.w	8007e00 <_dtoa_r+0x978>
 80078ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80078f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80078f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f2c0 8151 	blt.w	8007ba0 <_dtoa_r+0x718>
 80078fe:	f1bb 0f0e 	cmp.w	fp, #14
 8007902:	f300 814d 	bgt.w	8007ba0 <_dtoa_r+0x718>
 8007906:	4b45      	ldr	r3, [pc, #276]	; (8007a1c <_dtoa_r+0x594>)
 8007908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800790c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007910:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007916:	2b00      	cmp	r3, #0
 8007918:	f280 80da 	bge.w	8007ad0 <_dtoa_r+0x648>
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f300 80d6 	bgt.w	8007ad0 <_dtoa_r+0x648>
 8007924:	f040 826b 	bne.w	8007dfe <_dtoa_r+0x976>
 8007928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800792c:	2200      	movs	r2, #0
 800792e:	4b40      	ldr	r3, [pc, #256]	; (8007a30 <_dtoa_r+0x5a8>)
 8007930:	f7f8 fddc 	bl	80004ec <__aeabi_dmul>
 8007934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007938:	f7f9 f85e 	bl	80009f8 <__aeabi_dcmpge>
 800793c:	9c08      	ldr	r4, [sp, #32]
 800793e:	4626      	mov	r6, r4
 8007940:	2800      	cmp	r0, #0
 8007942:	f040 8241 	bne.w	8007dc8 <_dtoa_r+0x940>
 8007946:	2331      	movs	r3, #49	; 0x31
 8007948:	9f03      	ldr	r7, [sp, #12]
 800794a:	f10b 0b01 	add.w	fp, fp, #1
 800794e:	f807 3b01 	strb.w	r3, [r7], #1
 8007952:	e23d      	b.n	8007dd0 <_dtoa_r+0x948>
 8007954:	07e2      	lsls	r2, r4, #31
 8007956:	d505      	bpl.n	8007964 <_dtoa_r+0x4dc>
 8007958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800795c:	f7f8 fdc6 	bl	80004ec <__aeabi_dmul>
 8007960:	2301      	movs	r3, #1
 8007962:	3701      	adds	r7, #1
 8007964:	1064      	asrs	r4, r4, #1
 8007966:	3608      	adds	r6, #8
 8007968:	e76d      	b.n	8007846 <_dtoa_r+0x3be>
 800796a:	2702      	movs	r7, #2
 800796c:	e770      	b.n	8007850 <_dtoa_r+0x3c8>
 800796e:	46d8      	mov	r8, fp
 8007970:	9c08      	ldr	r4, [sp, #32]
 8007972:	e78f      	b.n	8007894 <_dtoa_r+0x40c>
 8007974:	9903      	ldr	r1, [sp, #12]
 8007976:	4b29      	ldr	r3, [pc, #164]	; (8007a1c <_dtoa_r+0x594>)
 8007978:	4421      	add	r1, r4
 800797a:	9112      	str	r1, [sp, #72]	; 0x48
 800797c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800797e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007982:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007986:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800798a:	2900      	cmp	r1, #0
 800798c:	d054      	beq.n	8007a38 <_dtoa_r+0x5b0>
 800798e:	2000      	movs	r0, #0
 8007990:	4928      	ldr	r1, [pc, #160]	; (8007a34 <_dtoa_r+0x5ac>)
 8007992:	f7f8 fed5 	bl	8000740 <__aeabi_ddiv>
 8007996:	463b      	mov	r3, r7
 8007998:	4632      	mov	r2, r6
 800799a:	f7f8 fbef 	bl	800017c <__aeabi_dsub>
 800799e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079a2:	9f03      	ldr	r7, [sp, #12]
 80079a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079a8:	f7f9 f850 	bl	8000a4c <__aeabi_d2iz>
 80079ac:	4604      	mov	r4, r0
 80079ae:	f7f8 fd33 	bl	8000418 <__aeabi_i2d>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ba:	f7f8 fbdf 	bl	800017c <__aeabi_dsub>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	3430      	adds	r4, #48	; 0x30
 80079c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079cc:	f807 4b01 	strb.w	r4, [r7], #1
 80079d0:	f7f8 fffe 	bl	80009d0 <__aeabi_dcmplt>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d173      	bne.n	8007ac0 <_dtoa_r+0x638>
 80079d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079dc:	2000      	movs	r0, #0
 80079de:	4911      	ldr	r1, [pc, #68]	; (8007a24 <_dtoa_r+0x59c>)
 80079e0:	f7f8 fbcc 	bl	800017c <__aeabi_dsub>
 80079e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079e8:	f7f8 fff2 	bl	80009d0 <__aeabi_dcmplt>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	f040 80b6 	bne.w	8007b5e <_dtoa_r+0x6d6>
 80079f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079f4:	429f      	cmp	r7, r3
 80079f6:	f43f af7a 	beq.w	80078ee <_dtoa_r+0x466>
 80079fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079fe:	2200      	movs	r2, #0
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <_dtoa_r+0x5a0>)
 8007a02:	f7f8 fd73 	bl	80004ec <__aeabi_dmul>
 8007a06:	2200      	movs	r2, #0
 8007a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a10:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <_dtoa_r+0x5a0>)
 8007a12:	f7f8 fd6b 	bl	80004ec <__aeabi_dmul>
 8007a16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a1a:	e7c3      	b.n	80079a4 <_dtoa_r+0x51c>
 8007a1c:	08009d50 	.word	0x08009d50
 8007a20:	08009d28 	.word	0x08009d28
 8007a24:	3ff00000 	.word	0x3ff00000
 8007a28:	40240000 	.word	0x40240000
 8007a2c:	401c0000 	.word	0x401c0000
 8007a30:	40140000 	.word	0x40140000
 8007a34:	3fe00000 	.word	0x3fe00000
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	f7f8 fd56 	bl	80004ec <__aeabi_dmul>
 8007a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a46:	9c03      	ldr	r4, [sp, #12]
 8007a48:	9314      	str	r3, [sp, #80]	; 0x50
 8007a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a4e:	f7f8 fffd 	bl	8000a4c <__aeabi_d2iz>
 8007a52:	9015      	str	r0, [sp, #84]	; 0x54
 8007a54:	f7f8 fce0 	bl	8000418 <__aeabi_i2d>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a60:	f7f8 fb8c 	bl	800017c <__aeabi_dsub>
 8007a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a66:	4606      	mov	r6, r0
 8007a68:	3330      	adds	r3, #48	; 0x30
 8007a6a:	f804 3b01 	strb.w	r3, [r4], #1
 8007a6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a70:	460f      	mov	r7, r1
 8007a72:	429c      	cmp	r4, r3
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	d124      	bne.n	8007ac4 <_dtoa_r+0x63c>
 8007a7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a7e:	4baf      	ldr	r3, [pc, #700]	; (8007d3c <_dtoa_r+0x8b4>)
 8007a80:	f7f8 fb7e 	bl	8000180 <__adddf3>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 ffbe 	bl	8000a0c <__aeabi_dcmpgt>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d163      	bne.n	8007b5c <_dtoa_r+0x6d4>
 8007a94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a98:	2000      	movs	r0, #0
 8007a9a:	49a8      	ldr	r1, [pc, #672]	; (8007d3c <_dtoa_r+0x8b4>)
 8007a9c:	f7f8 fb6e 	bl	800017c <__aeabi_dsub>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	f7f8 ff92 	bl	80009d0 <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f43f af1e 	beq.w	80078ee <_dtoa_r+0x466>
 8007ab2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007ab4:	1e7b      	subs	r3, r7, #1
 8007ab6:	9314      	str	r3, [sp, #80]	; 0x50
 8007ab8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d0f8      	beq.n	8007ab2 <_dtoa_r+0x62a>
 8007ac0:	46c3      	mov	fp, r8
 8007ac2:	e03b      	b.n	8007b3c <_dtoa_r+0x6b4>
 8007ac4:	4b9e      	ldr	r3, [pc, #632]	; (8007d40 <_dtoa_r+0x8b8>)
 8007ac6:	f7f8 fd11 	bl	80004ec <__aeabi_dmul>
 8007aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ace:	e7bc      	b.n	8007a4a <_dtoa_r+0x5c2>
 8007ad0:	9f03      	ldr	r7, [sp, #12]
 8007ad2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 fe2f 	bl	8000740 <__aeabi_ddiv>
 8007ae2:	f7f8 ffb3 	bl	8000a4c <__aeabi_d2iz>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	f7f8 fc96 	bl	8000418 <__aeabi_i2d>
 8007aec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007af0:	f7f8 fcfc 	bl	80004ec <__aeabi_dmul>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4640      	mov	r0, r8
 8007afa:	4649      	mov	r1, r9
 8007afc:	f7f8 fb3e 	bl	800017c <__aeabi_dsub>
 8007b00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007b04:	f807 6b01 	strb.w	r6, [r7], #1
 8007b08:	9e03      	ldr	r6, [sp, #12]
 8007b0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007b0e:	1bbe      	subs	r6, r7, r6
 8007b10:	45b4      	cmp	ip, r6
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	d136      	bne.n	8007b86 <_dtoa_r+0x6fe>
 8007b18:	f7f8 fb32 	bl	8000180 <__adddf3>
 8007b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b20:	4680      	mov	r8, r0
 8007b22:	4689      	mov	r9, r1
 8007b24:	f7f8 ff72 	bl	8000a0c <__aeabi_dcmpgt>
 8007b28:	bb58      	cbnz	r0, 8007b82 <_dtoa_r+0x6fa>
 8007b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 ff43 	bl	80009bc <__aeabi_dcmpeq>
 8007b36:	b108      	cbz	r0, 8007b3c <_dtoa_r+0x6b4>
 8007b38:	07e3      	lsls	r3, r4, #31
 8007b3a:	d422      	bmi.n	8007b82 <_dtoa_r+0x6fa>
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 ff2e 	bl	80089a0 <_Bfree>
 8007b44:	2300      	movs	r3, #0
 8007b46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b48:	703b      	strb	r3, [r7, #0]
 8007b4a:	f10b 0301 	add.w	r3, fp, #1
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f43f ace6 	beq.w	8007524 <_dtoa_r+0x9c>
 8007b58:	601f      	str	r7, [r3, #0]
 8007b5a:	e4e3      	b.n	8007524 <_dtoa_r+0x9c>
 8007b5c:	4627      	mov	r7, r4
 8007b5e:	463b      	mov	r3, r7
 8007b60:	461f      	mov	r7, r3
 8007b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b66:	2a39      	cmp	r2, #57	; 0x39
 8007b68:	d107      	bne.n	8007b7a <_dtoa_r+0x6f2>
 8007b6a:	9a03      	ldr	r2, [sp, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1f7      	bne.n	8007b60 <_dtoa_r+0x6d8>
 8007b70:	2230      	movs	r2, #48	; 0x30
 8007b72:	9903      	ldr	r1, [sp, #12]
 8007b74:	f108 0801 	add.w	r8, r8, #1
 8007b78:	700a      	strb	r2, [r1, #0]
 8007b7a:	781a      	ldrb	r2, [r3, #0]
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	e79e      	b.n	8007ac0 <_dtoa_r+0x638>
 8007b82:	46d8      	mov	r8, fp
 8007b84:	e7eb      	b.n	8007b5e <_dtoa_r+0x6d6>
 8007b86:	2200      	movs	r2, #0
 8007b88:	4b6d      	ldr	r3, [pc, #436]	; (8007d40 <_dtoa_r+0x8b8>)
 8007b8a:	f7f8 fcaf 	bl	80004ec <__aeabi_dmul>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2300      	movs	r3, #0
 8007b92:	4680      	mov	r8, r0
 8007b94:	4689      	mov	r9, r1
 8007b96:	f7f8 ff11 	bl	80009bc <__aeabi_dcmpeq>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d09b      	beq.n	8007ad6 <_dtoa_r+0x64e>
 8007b9e:	e7cd      	b.n	8007b3c <_dtoa_r+0x6b4>
 8007ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ba2:	2a00      	cmp	r2, #0
 8007ba4:	f000 80c4 	beq.w	8007d30 <_dtoa_r+0x8a8>
 8007ba8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	f300 80a8 	bgt.w	8007d00 <_dtoa_r+0x878>
 8007bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	f000 80a0 	beq.w	8007cf8 <_dtoa_r+0x870>
 8007bb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bbc:	464f      	mov	r7, r9
 8007bbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	441a      	add	r2, r3
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	4499      	add	r9, r3
 8007bca:	9209      	str	r2, [sp, #36]	; 0x24
 8007bcc:	f000 ffe8 	bl	8008ba0 <__i2b>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	b15f      	cbz	r7, 8007bec <_dtoa_r+0x764>
 8007bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd08      	ble.n	8007bec <_dtoa_r+0x764>
 8007bda:	42bb      	cmp	r3, r7
 8007bdc:	bfa8      	it	ge
 8007bde:	463b      	movge	r3, r7
 8007be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be2:	eba9 0903 	sub.w	r9, r9, r3
 8007be6:	1aff      	subs	r7, r7, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	9309      	str	r3, [sp, #36]	; 0x24
 8007bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bee:	b1f3      	cbz	r3, 8007c2e <_dtoa_r+0x7a6>
 8007bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80a0 	beq.w	8007d38 <_dtoa_r+0x8b0>
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	dd10      	ble.n	8007c1e <_dtoa_r+0x796>
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4622      	mov	r2, r4
 8007c00:	4628      	mov	r0, r5
 8007c02:	f001 f88b 	bl	8008d1c <__pow5mult>
 8007c06:	4652      	mov	r2, sl
 8007c08:	4601      	mov	r1, r0
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 ffdd 	bl	8008bcc <__multiply>
 8007c12:	4680      	mov	r8, r0
 8007c14:	4651      	mov	r1, sl
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 fec2 	bl	80089a0 <_Bfree>
 8007c1c:	46c2      	mov	sl, r8
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	1b1a      	subs	r2, r3, r4
 8007c22:	d004      	beq.n	8007c2e <_dtoa_r+0x7a6>
 8007c24:	4651      	mov	r1, sl
 8007c26:	4628      	mov	r0, r5
 8007c28:	f001 f878 	bl	8008d1c <__pow5mult>
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 ffb5 	bl	8008ba0 <__i2b>
 8007c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c38:	4604      	mov	r4, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f340 8082 	ble.w	8007d44 <_dtoa_r+0x8bc>
 8007c40:	461a      	mov	r2, r3
 8007c42:	4601      	mov	r1, r0
 8007c44:	4628      	mov	r0, r5
 8007c46:	f001 f869 	bl	8008d1c <__pow5mult>
 8007c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	dd7b      	ble.n	8007d4a <_dtoa_r+0x8c2>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c5c:	6918      	ldr	r0, [r3, #16]
 8007c5e:	f000 ff51 	bl	8008b04 <__hi0bits>
 8007c62:	f1c0 0020 	rsb	r0, r0, #32
 8007c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c68:	4418      	add	r0, r3
 8007c6a:	f010 001f 	ands.w	r0, r0, #31
 8007c6e:	f000 8092 	beq.w	8007d96 <_dtoa_r+0x90e>
 8007c72:	f1c0 0320 	rsb	r3, r0, #32
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	f340 8085 	ble.w	8007d86 <_dtoa_r+0x8fe>
 8007c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7e:	f1c0 001c 	rsb	r0, r0, #28
 8007c82:	4403      	add	r3, r0
 8007c84:	4481      	add	r9, r0
 8007c86:	4407      	add	r7, r0
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	f1b9 0f00 	cmp.w	r9, #0
 8007c8e:	dd05      	ble.n	8007c9c <_dtoa_r+0x814>
 8007c90:	4651      	mov	r1, sl
 8007c92:	464a      	mov	r2, r9
 8007c94:	4628      	mov	r0, r5
 8007c96:	f001 f89b 	bl	8008dd0 <__lshift>
 8007c9a:	4682      	mov	sl, r0
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dd05      	ble.n	8007cae <_dtoa_r+0x826>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f001 f892 	bl	8008dd0 <__lshift>
 8007cac:	4604      	mov	r4, r0
 8007cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d072      	beq.n	8007d9a <_dtoa_r+0x912>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	f001 f8f6 	bl	8008ea8 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	da6c      	bge.n	8007d9a <_dtoa_r+0x912>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4651      	mov	r1, sl
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fe8c 	bl	80089e4 <__multadd>
 8007ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cce:	4682      	mov	sl, r0
 8007cd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 81ac 	beq.w	8008032 <_dtoa_r+0xbaa>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4631      	mov	r1, r6
 8007cde:	220a      	movs	r2, #10
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 fe7f 	bl	80089e4 <__multadd>
 8007ce6:	9b06      	ldr	r3, [sp, #24]
 8007ce8:	4606      	mov	r6, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f300 8093 	bgt.w	8007e16 <_dtoa_r+0x98e>
 8007cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	dc59      	bgt.n	8007daa <_dtoa_r+0x922>
 8007cf6:	e08e      	b.n	8007e16 <_dtoa_r+0x98e>
 8007cf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cfe:	e75d      	b.n	8007bbc <_dtoa_r+0x734>
 8007d00:	9b08      	ldr	r3, [sp, #32]
 8007d02:	1e5c      	subs	r4, r3, #1
 8007d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	bfbf      	itttt	lt
 8007d0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d0c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007d0e:	1ae3      	sublt	r3, r4, r3
 8007d10:	18d2      	addlt	r2, r2, r3
 8007d12:	bfa8      	it	ge
 8007d14:	1b1c      	subge	r4, r3, r4
 8007d16:	9b08      	ldr	r3, [sp, #32]
 8007d18:	bfbe      	ittt	lt
 8007d1a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007d1c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007d1e:	2400      	movlt	r4, #0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfb5      	itete	lt
 8007d24:	eba9 0703 	sublt.w	r7, r9, r3
 8007d28:	464f      	movge	r7, r9
 8007d2a:	2300      	movlt	r3, #0
 8007d2c:	9b08      	ldrge	r3, [sp, #32]
 8007d2e:	e747      	b.n	8007bc0 <_dtoa_r+0x738>
 8007d30:	464f      	mov	r7, r9
 8007d32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d36:	e74c      	b.n	8007bd2 <_dtoa_r+0x74a>
 8007d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d3a:	e773      	b.n	8007c24 <_dtoa_r+0x79c>
 8007d3c:	3fe00000 	.word	0x3fe00000
 8007d40:	40240000 	.word	0x40240000
 8007d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	dc18      	bgt.n	8007d7c <_dtoa_r+0x8f4>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	b9b3      	cbnz	r3, 8007d7c <_dtoa_r+0x8f4>
 8007d4e:	9b05      	ldr	r3, [sp, #20]
 8007d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d54:	b993      	cbnz	r3, 8007d7c <_dtoa_r+0x8f4>
 8007d56:	9b05      	ldr	r3, [sp, #20]
 8007d58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d5c:	0d1b      	lsrs	r3, r3, #20
 8007d5e:	051b      	lsls	r3, r3, #20
 8007d60:	b17b      	cbz	r3, 8007d82 <_dtoa_r+0x8fa>
 8007d62:	f04f 0801 	mov.w	r8, #1
 8007d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d68:	f109 0901 	add.w	r9, r9, #1
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f47f af6f 	bne.w	8007c56 <_dtoa_r+0x7ce>
 8007d78:	2001      	movs	r0, #1
 8007d7a:	e774      	b.n	8007c66 <_dtoa_r+0x7de>
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	e7f6      	b.n	8007d70 <_dtoa_r+0x8e8>
 8007d82:	4698      	mov	r8, r3
 8007d84:	e7f4      	b.n	8007d70 <_dtoa_r+0x8e8>
 8007d86:	d080      	beq.n	8007c8a <_dtoa_r+0x802>
 8007d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d8a:	331c      	adds	r3, #28
 8007d8c:	441a      	add	r2, r3
 8007d8e:	4499      	add	r9, r3
 8007d90:	441f      	add	r7, r3
 8007d92:	9209      	str	r2, [sp, #36]	; 0x24
 8007d94:	e779      	b.n	8007c8a <_dtoa_r+0x802>
 8007d96:	4603      	mov	r3, r0
 8007d98:	e7f6      	b.n	8007d88 <_dtoa_r+0x900>
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dc34      	bgt.n	8007e0a <_dtoa_r+0x982>
 8007da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	dd31      	ble.n	8007e0a <_dtoa_r+0x982>
 8007da6:	9b08      	ldr	r3, [sp, #32]
 8007da8:	9306      	str	r3, [sp, #24]
 8007daa:	9b06      	ldr	r3, [sp, #24]
 8007dac:	b963      	cbnz	r3, 8007dc8 <_dtoa_r+0x940>
 8007dae:	4621      	mov	r1, r4
 8007db0:	2205      	movs	r2, #5
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 fe16 	bl	80089e4 <__multadd>
 8007db8:	4601      	mov	r1, r0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	f001 f873 	bl	8008ea8 <__mcmp>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f73f adbf 	bgt.w	8007946 <_dtoa_r+0x4be>
 8007dc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dca:	9f03      	ldr	r7, [sp, #12]
 8007dcc:	ea6f 0b03 	mvn.w	fp, r3
 8007dd0:	f04f 0800 	mov.w	r8, #0
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 fde2 	bl	80089a0 <_Bfree>
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	f43f aead 	beq.w	8007b3c <_dtoa_r+0x6b4>
 8007de2:	f1b8 0f00 	cmp.w	r8, #0
 8007de6:	d005      	beq.n	8007df4 <_dtoa_r+0x96c>
 8007de8:	45b0      	cmp	r8, r6
 8007dea:	d003      	beq.n	8007df4 <_dtoa_r+0x96c>
 8007dec:	4641      	mov	r1, r8
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fdd6 	bl	80089a0 <_Bfree>
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 fdd2 	bl	80089a0 <_Bfree>
 8007dfc:	e69e      	b.n	8007b3c <_dtoa_r+0x6b4>
 8007dfe:	2400      	movs	r4, #0
 8007e00:	4626      	mov	r6, r4
 8007e02:	e7e1      	b.n	8007dc8 <_dtoa_r+0x940>
 8007e04:	46c3      	mov	fp, r8
 8007e06:	4626      	mov	r6, r4
 8007e08:	e59d      	b.n	8007946 <_dtoa_r+0x4be>
 8007e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80c8 	beq.w	8007fa2 <_dtoa_r+0xb1a>
 8007e12:	9b08      	ldr	r3, [sp, #32]
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	dd05      	ble.n	8007e26 <_dtoa_r+0x99e>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	463a      	mov	r2, r7
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 ffd6 	bl	8008dd0 <__lshift>
 8007e24:	4606      	mov	r6, r0
 8007e26:	f1b8 0f00 	cmp.w	r8, #0
 8007e2a:	d05b      	beq.n	8007ee4 <_dtoa_r+0xa5c>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	6871      	ldr	r1, [r6, #4]
 8007e30:	f000 fd76 	bl	8008920 <_Balloc>
 8007e34:	4607      	mov	r7, r0
 8007e36:	b928      	cbnz	r0, 8007e44 <_dtoa_r+0x9bc>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e3e:	4b81      	ldr	r3, [pc, #516]	; (8008044 <_dtoa_r+0xbbc>)
 8007e40:	f7ff bb36 	b.w	80074b0 <_dtoa_r+0x28>
 8007e44:	6932      	ldr	r2, [r6, #16]
 8007e46:	f106 010c 	add.w	r1, r6, #12
 8007e4a:	3202      	adds	r2, #2
 8007e4c:	0092      	lsls	r2, r2, #2
 8007e4e:	300c      	adds	r0, #12
 8007e50:	f7ff fa5b 	bl	800730a <memcpy>
 8007e54:	2201      	movs	r2, #1
 8007e56:	4639      	mov	r1, r7
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 ffb9 	bl	8008dd0 <__lshift>
 8007e5e:	46b0      	mov	r8, r6
 8007e60:	4606      	mov	r6, r0
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	9a03      	ldr	r2, [sp, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	9308      	str	r3, [sp, #32]
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e70:	9b04      	ldr	r3, [sp, #16]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	930a      	str	r3, [sp, #40]	; 0x28
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4650      	mov	r0, sl
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	f7ff fa75 	bl	8007370 <quorem>
 8007e86:	4641      	mov	r1, r8
 8007e88:	9006      	str	r0, [sp, #24]
 8007e8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e8e:	4650      	mov	r0, sl
 8007e90:	f001 f80a 	bl	8008ea8 <__mcmp>
 8007e94:	4632      	mov	r2, r6
 8007e96:	9009      	str	r0, [sp, #36]	; 0x24
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f001 f820 	bl	8008ee0 <__mdiff>
 8007ea0:	68c2      	ldr	r2, [r0, #12]
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	bb02      	cbnz	r2, 8007ee8 <_dtoa_r+0xa60>
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f000 fffd 	bl	8008ea8 <__mcmp>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	920c      	str	r2, [sp, #48]	; 0x30
 8007eb6:	f000 fd73 	bl	80089a0 <_Bfree>
 8007eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ebe:	9f08      	ldr	r7, [sp, #32]
 8007ec0:	ea43 0102 	orr.w	r1, r3, r2
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	4319      	orrs	r1, r3
 8007ec8:	d110      	bne.n	8007eec <_dtoa_r+0xa64>
 8007eca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ece:	d029      	beq.n	8007f24 <_dtoa_r+0xa9c>
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd02      	ble.n	8007edc <_dtoa_r+0xa54>
 8007ed6:	9b06      	ldr	r3, [sp, #24]
 8007ed8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	f883 9000 	strb.w	r9, [r3]
 8007ee2:	e777      	b.n	8007dd4 <_dtoa_r+0x94c>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	e7ba      	b.n	8007e5e <_dtoa_r+0x9d6>
 8007ee8:	2201      	movs	r2, #1
 8007eea:	e7e1      	b.n	8007eb0 <_dtoa_r+0xa28>
 8007eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	db04      	blt.n	8007efc <_dtoa_r+0xa74>
 8007ef2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	d120      	bne.n	8007f3e <_dtoa_r+0xab6>
 8007efc:	2a00      	cmp	r2, #0
 8007efe:	dded      	ble.n	8007edc <_dtoa_r+0xa54>
 8007f00:	4651      	mov	r1, sl
 8007f02:	2201      	movs	r2, #1
 8007f04:	4628      	mov	r0, r5
 8007f06:	f000 ff63 	bl	8008dd0 <__lshift>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	f000 ffcb 	bl	8008ea8 <__mcmp>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dc03      	bgt.n	8007f1e <_dtoa_r+0xa96>
 8007f16:	d1e1      	bne.n	8007edc <_dtoa_r+0xa54>
 8007f18:	f019 0f01 	tst.w	r9, #1
 8007f1c:	d0de      	beq.n	8007edc <_dtoa_r+0xa54>
 8007f1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f22:	d1d8      	bne.n	8007ed6 <_dtoa_r+0xa4e>
 8007f24:	2339      	movs	r3, #57	; 0x39
 8007f26:	9a04      	ldr	r2, [sp, #16]
 8007f28:	7013      	strb	r3, [r2, #0]
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	461f      	mov	r7, r3
 8007f2e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	2a39      	cmp	r2, #57	; 0x39
 8007f36:	d06b      	beq.n	8008010 <_dtoa_r+0xb88>
 8007f38:	3201      	adds	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e74a      	b.n	8007dd4 <_dtoa_r+0x94c>
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	dd07      	ble.n	8007f52 <_dtoa_r+0xaca>
 8007f42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f46:	d0ed      	beq.n	8007f24 <_dtoa_r+0xa9c>
 8007f48:	9a04      	ldr	r2, [sp, #16]
 8007f4a:	f109 0301 	add.w	r3, r9, #1
 8007f4e:	7013      	strb	r3, [r2, #0]
 8007f50:	e740      	b.n	8007dd4 <_dtoa_r+0x94c>
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f56:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d042      	beq.n	8007fe4 <_dtoa_r+0xb5c>
 8007f5e:	4651      	mov	r1, sl
 8007f60:	2300      	movs	r3, #0
 8007f62:	220a      	movs	r2, #10
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 fd3d 	bl	80089e4 <__multadd>
 8007f6a:	45b0      	cmp	r8, r6
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	f04f 020a 	mov.w	r2, #10
 8007f76:	4641      	mov	r1, r8
 8007f78:	4628      	mov	r0, r5
 8007f7a:	d107      	bne.n	8007f8c <_dtoa_r+0xb04>
 8007f7c:	f000 fd32 	bl	80089e4 <__multadd>
 8007f80:	4680      	mov	r8, r0
 8007f82:	4606      	mov	r6, r0
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	3301      	adds	r3, #1
 8007f88:	9308      	str	r3, [sp, #32]
 8007f8a:	e775      	b.n	8007e78 <_dtoa_r+0x9f0>
 8007f8c:	f000 fd2a 	bl	80089e4 <__multadd>
 8007f90:	4631      	mov	r1, r6
 8007f92:	4680      	mov	r8, r0
 8007f94:	2300      	movs	r3, #0
 8007f96:	220a      	movs	r2, #10
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 fd23 	bl	80089e4 <__multadd>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	e7f0      	b.n	8007f84 <_dtoa_r+0xafc>
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	9306      	str	r3, [sp, #24]
 8007fa6:	9f03      	ldr	r7, [sp, #12]
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4650      	mov	r0, sl
 8007fac:	f7ff f9e0 	bl	8007370 <quorem>
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007fb6:	f807 9b01 	strb.w	r9, [r7], #1
 8007fba:	1afa      	subs	r2, r7, r3
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	dd07      	ble.n	8007fd2 <_dtoa_r+0xb4a>
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 fd0b 	bl	80089e4 <__multadd>
 8007fce:	4682      	mov	sl, r0
 8007fd0:	e7ea      	b.n	8007fa8 <_dtoa_r+0xb20>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	f04f 0800 	mov.w	r8, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfcc      	ite	gt
 8007fdc:	461f      	movgt	r7, r3
 8007fde:	2701      	movle	r7, #1
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	441f      	add	r7, r3
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f000 fef1 	bl	8008dd0 <__lshift>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4682      	mov	sl, r0
 8007ff2:	f000 ff59 	bl	8008ea8 <__mcmp>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	dc97      	bgt.n	8007f2a <_dtoa_r+0xaa2>
 8007ffa:	d102      	bne.n	8008002 <_dtoa_r+0xb7a>
 8007ffc:	f019 0f01 	tst.w	r9, #1
 8008000:	d193      	bne.n	8007f2a <_dtoa_r+0xaa2>
 8008002:	463b      	mov	r3, r7
 8008004:	461f      	mov	r7, r3
 8008006:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800800a:	2a30      	cmp	r2, #48	; 0x30
 800800c:	d0fa      	beq.n	8008004 <_dtoa_r+0xb7c>
 800800e:	e6e1      	b.n	8007dd4 <_dtoa_r+0x94c>
 8008010:	9a03      	ldr	r2, [sp, #12]
 8008012:	429a      	cmp	r2, r3
 8008014:	d18a      	bne.n	8007f2c <_dtoa_r+0xaa4>
 8008016:	2331      	movs	r3, #49	; 0x31
 8008018:	f10b 0b01 	add.w	fp, fp, #1
 800801c:	e797      	b.n	8007f4e <_dtoa_r+0xac6>
 800801e:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <_dtoa_r+0xbc0>)
 8008020:	f7ff ba9f 	b.w	8007562 <_dtoa_r+0xda>
 8008024:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008026:	2b00      	cmp	r3, #0
 8008028:	f47f aa77 	bne.w	800751a <_dtoa_r+0x92>
 800802c:	4b07      	ldr	r3, [pc, #28]	; (800804c <_dtoa_r+0xbc4>)
 800802e:	f7ff ba98 	b.w	8007562 <_dtoa_r+0xda>
 8008032:	9b06      	ldr	r3, [sp, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dcb6      	bgt.n	8007fa6 <_dtoa_r+0xb1e>
 8008038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800803a:	2b02      	cmp	r3, #2
 800803c:	f73f aeb5 	bgt.w	8007daa <_dtoa_r+0x922>
 8008040:	e7b1      	b.n	8007fa6 <_dtoa_r+0xb1e>
 8008042:	bf00      	nop
 8008044:	08009c57 	.word	0x08009c57
 8008048:	08009b19 	.word	0x08009b19
 800804c:	08009bf2 	.word	0x08009bf2

08008050 <_free_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4605      	mov	r5, r0
 8008054:	2900      	cmp	r1, #0
 8008056:	d040      	beq.n	80080da <_free_r+0x8a>
 8008058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805c:	1f0c      	subs	r4, r1, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfb8      	it	lt
 8008062:	18e4      	addlt	r4, r4, r3
 8008064:	f000 fc50 	bl	8008908 <__malloc_lock>
 8008068:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <_free_r+0x8c>)
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	b933      	cbnz	r3, 800807c <_free_r+0x2c>
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	6014      	str	r4, [r2, #0]
 8008072:	4628      	mov	r0, r5
 8008074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008078:	f000 bc4c 	b.w	8008914 <__malloc_unlock>
 800807c:	42a3      	cmp	r3, r4
 800807e:	d908      	bls.n	8008092 <_free_r+0x42>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	1821      	adds	r1, r4, r0
 8008084:	428b      	cmp	r3, r1
 8008086:	bf01      	itttt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	1809      	addeq	r1, r1, r0
 800808e:	6021      	streq	r1, [r4, #0]
 8008090:	e7ed      	b.n	800806e <_free_r+0x1e>
 8008092:	461a      	mov	r2, r3
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	b10b      	cbz	r3, 800809c <_free_r+0x4c>
 8008098:	42a3      	cmp	r3, r4
 800809a:	d9fa      	bls.n	8008092 <_free_r+0x42>
 800809c:	6811      	ldr	r1, [r2, #0]
 800809e:	1850      	adds	r0, r2, r1
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d10b      	bne.n	80080bc <_free_r+0x6c>
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	4401      	add	r1, r0
 80080a8:	1850      	adds	r0, r2, r1
 80080aa:	4283      	cmp	r3, r0
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	d1e0      	bne.n	8008072 <_free_r+0x22>
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4408      	add	r0, r1
 80080b6:	6010      	str	r0, [r2, #0]
 80080b8:	6053      	str	r3, [r2, #4]
 80080ba:	e7da      	b.n	8008072 <_free_r+0x22>
 80080bc:	d902      	bls.n	80080c4 <_free_r+0x74>
 80080be:	230c      	movs	r3, #12
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	e7d6      	b.n	8008072 <_free_r+0x22>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	1821      	adds	r1, r4, r0
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf01      	itttt	eq
 80080cc:	6819      	ldreq	r1, [r3, #0]
 80080ce:	685b      	ldreq	r3, [r3, #4]
 80080d0:	1809      	addeq	r1, r1, r0
 80080d2:	6021      	streq	r1, [r4, #0]
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	6054      	str	r4, [r2, #4]
 80080d8:	e7cb      	b.n	8008072 <_free_r+0x22>
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	200023dc 	.word	0x200023dc

080080e0 <rshift>:
 80080e0:	6903      	ldr	r3, [r0, #16]
 80080e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80080ea:	f100 0414 	add.w	r4, r0, #20
 80080ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80080f2:	dd46      	ble.n	8008182 <rshift+0xa2>
 80080f4:	f011 011f 	ands.w	r1, r1, #31
 80080f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80080fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008100:	d10c      	bne.n	800811c <rshift+0x3c>
 8008102:	4629      	mov	r1, r5
 8008104:	f100 0710 	add.w	r7, r0, #16
 8008108:	42b1      	cmp	r1, r6
 800810a:	d335      	bcc.n	8008178 <rshift+0x98>
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	1eea      	subs	r2, r5, #3
 8008112:	4296      	cmp	r6, r2
 8008114:	bf38      	it	cc
 8008116:	2300      	movcc	r3, #0
 8008118:	4423      	add	r3, r4
 800811a:	e015      	b.n	8008148 <rshift+0x68>
 800811c:	46a1      	mov	r9, r4
 800811e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008122:	f1c1 0820 	rsb	r8, r1, #32
 8008126:	40cf      	lsrs	r7, r1
 8008128:	f105 0e04 	add.w	lr, r5, #4
 800812c:	4576      	cmp	r6, lr
 800812e:	46f4      	mov	ip, lr
 8008130:	d816      	bhi.n	8008160 <rshift+0x80>
 8008132:	1a9a      	subs	r2, r3, r2
 8008134:	0092      	lsls	r2, r2, #2
 8008136:	3a04      	subs	r2, #4
 8008138:	3501      	adds	r5, #1
 800813a:	42ae      	cmp	r6, r5
 800813c:	bf38      	it	cc
 800813e:	2200      	movcc	r2, #0
 8008140:	18a3      	adds	r3, r4, r2
 8008142:	50a7      	str	r7, [r4, r2]
 8008144:	b107      	cbz	r7, 8008148 <rshift+0x68>
 8008146:	3304      	adds	r3, #4
 8008148:	42a3      	cmp	r3, r4
 800814a:	eba3 0204 	sub.w	r2, r3, r4
 800814e:	bf08      	it	eq
 8008150:	2300      	moveq	r3, #0
 8008152:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008156:	6102      	str	r2, [r0, #16]
 8008158:	bf08      	it	eq
 800815a:	6143      	streq	r3, [r0, #20]
 800815c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008160:	f8dc c000 	ldr.w	ip, [ip]
 8008164:	fa0c fc08 	lsl.w	ip, ip, r8
 8008168:	ea4c 0707 	orr.w	r7, ip, r7
 800816c:	f849 7b04 	str.w	r7, [r9], #4
 8008170:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008174:	40cf      	lsrs	r7, r1
 8008176:	e7d9      	b.n	800812c <rshift+0x4c>
 8008178:	f851 cb04 	ldr.w	ip, [r1], #4
 800817c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008180:	e7c2      	b.n	8008108 <rshift+0x28>
 8008182:	4623      	mov	r3, r4
 8008184:	e7e0      	b.n	8008148 <rshift+0x68>

08008186 <__hexdig_fun>:
 8008186:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800818a:	2b09      	cmp	r3, #9
 800818c:	d802      	bhi.n	8008194 <__hexdig_fun+0xe>
 800818e:	3820      	subs	r0, #32
 8008190:	b2c0      	uxtb	r0, r0
 8008192:	4770      	bx	lr
 8008194:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008198:	2b05      	cmp	r3, #5
 800819a:	d801      	bhi.n	80081a0 <__hexdig_fun+0x1a>
 800819c:	3847      	subs	r0, #71	; 0x47
 800819e:	e7f7      	b.n	8008190 <__hexdig_fun+0xa>
 80081a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80081a4:	2b05      	cmp	r3, #5
 80081a6:	d801      	bhi.n	80081ac <__hexdig_fun+0x26>
 80081a8:	3827      	subs	r0, #39	; 0x27
 80081aa:	e7f1      	b.n	8008190 <__hexdig_fun+0xa>
 80081ac:	2000      	movs	r0, #0
 80081ae:	4770      	bx	lr

080081b0 <__gethex>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	4681      	mov	r9, r0
 80081b6:	468a      	mov	sl, r1
 80081b8:	4617      	mov	r7, r2
 80081ba:	680a      	ldr	r2, [r1, #0]
 80081bc:	b085      	sub	sp, #20
 80081be:	f102 0b02 	add.w	fp, r2, #2
 80081c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80081c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	32fe      	adds	r2, #254	; 0xfe
 80081ce:	eb02 030b 	add.w	r3, r2, fp
 80081d2:	46d8      	mov	r8, fp
 80081d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	2830      	cmp	r0, #48	; 0x30
 80081dc:	d0f7      	beq.n	80081ce <__gethex+0x1e>
 80081de:	f7ff ffd2 	bl	8008186 <__hexdig_fun>
 80081e2:	4604      	mov	r4, r0
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d138      	bne.n	800825a <__gethex+0xaa>
 80081e8:	2201      	movs	r2, #1
 80081ea:	4640      	mov	r0, r8
 80081ec:	49a7      	ldr	r1, [pc, #668]	; (800848c <__gethex+0x2dc>)
 80081ee:	f7fe ff6f 	bl	80070d0 <strncmp>
 80081f2:	4606      	mov	r6, r0
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d169      	bne.n	80082cc <__gethex+0x11c>
 80081f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80081fc:	465d      	mov	r5, fp
 80081fe:	f7ff ffc2 	bl	8008186 <__hexdig_fun>
 8008202:	2800      	cmp	r0, #0
 8008204:	d064      	beq.n	80082d0 <__gethex+0x120>
 8008206:	465a      	mov	r2, fp
 8008208:	7810      	ldrb	r0, [r2, #0]
 800820a:	4690      	mov	r8, r2
 800820c:	2830      	cmp	r0, #48	; 0x30
 800820e:	f102 0201 	add.w	r2, r2, #1
 8008212:	d0f9      	beq.n	8008208 <__gethex+0x58>
 8008214:	f7ff ffb7 	bl	8008186 <__hexdig_fun>
 8008218:	2301      	movs	r3, #1
 800821a:	fab0 f480 	clz	r4, r0
 800821e:	465e      	mov	r6, fp
 8008220:	0964      	lsrs	r4, r4, #5
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	4642      	mov	r2, r8
 8008226:	4615      	mov	r5, r2
 8008228:	7828      	ldrb	r0, [r5, #0]
 800822a:	3201      	adds	r2, #1
 800822c:	f7ff ffab 	bl	8008186 <__hexdig_fun>
 8008230:	2800      	cmp	r0, #0
 8008232:	d1f8      	bne.n	8008226 <__gethex+0x76>
 8008234:	2201      	movs	r2, #1
 8008236:	4628      	mov	r0, r5
 8008238:	4994      	ldr	r1, [pc, #592]	; (800848c <__gethex+0x2dc>)
 800823a:	f7fe ff49 	bl	80070d0 <strncmp>
 800823e:	b978      	cbnz	r0, 8008260 <__gethex+0xb0>
 8008240:	b946      	cbnz	r6, 8008254 <__gethex+0xa4>
 8008242:	1c6e      	adds	r6, r5, #1
 8008244:	4632      	mov	r2, r6
 8008246:	4615      	mov	r5, r2
 8008248:	7828      	ldrb	r0, [r5, #0]
 800824a:	3201      	adds	r2, #1
 800824c:	f7ff ff9b 	bl	8008186 <__hexdig_fun>
 8008250:	2800      	cmp	r0, #0
 8008252:	d1f8      	bne.n	8008246 <__gethex+0x96>
 8008254:	1b73      	subs	r3, r6, r5
 8008256:	009e      	lsls	r6, r3, #2
 8008258:	e004      	b.n	8008264 <__gethex+0xb4>
 800825a:	2400      	movs	r4, #0
 800825c:	4626      	mov	r6, r4
 800825e:	e7e1      	b.n	8008224 <__gethex+0x74>
 8008260:	2e00      	cmp	r6, #0
 8008262:	d1f7      	bne.n	8008254 <__gethex+0xa4>
 8008264:	782b      	ldrb	r3, [r5, #0]
 8008266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800826a:	2b50      	cmp	r3, #80	; 0x50
 800826c:	d13d      	bne.n	80082ea <__gethex+0x13a>
 800826e:	786b      	ldrb	r3, [r5, #1]
 8008270:	2b2b      	cmp	r3, #43	; 0x2b
 8008272:	d02f      	beq.n	80082d4 <__gethex+0x124>
 8008274:	2b2d      	cmp	r3, #45	; 0x2d
 8008276:	d031      	beq.n	80082dc <__gethex+0x12c>
 8008278:	f04f 0b00 	mov.w	fp, #0
 800827c:	1c69      	adds	r1, r5, #1
 800827e:	7808      	ldrb	r0, [r1, #0]
 8008280:	f7ff ff81 	bl	8008186 <__hexdig_fun>
 8008284:	1e42      	subs	r2, r0, #1
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	2a18      	cmp	r2, #24
 800828a:	d82e      	bhi.n	80082ea <__gethex+0x13a>
 800828c:	f1a0 0210 	sub.w	r2, r0, #16
 8008290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008294:	f7ff ff77 	bl	8008186 <__hexdig_fun>
 8008298:	f100 3cff 	add.w	ip, r0, #4294967295
 800829c:	fa5f fc8c 	uxtb.w	ip, ip
 80082a0:	f1bc 0f18 	cmp.w	ip, #24
 80082a4:	d91d      	bls.n	80082e2 <__gethex+0x132>
 80082a6:	f1bb 0f00 	cmp.w	fp, #0
 80082aa:	d000      	beq.n	80082ae <__gethex+0xfe>
 80082ac:	4252      	negs	r2, r2
 80082ae:	4416      	add	r6, r2
 80082b0:	f8ca 1000 	str.w	r1, [sl]
 80082b4:	b1dc      	cbz	r4, 80082ee <__gethex+0x13e>
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bf14      	ite	ne
 80082bc:	f04f 0800 	movne.w	r8, #0
 80082c0:	f04f 0806 	moveq.w	r8, #6
 80082c4:	4640      	mov	r0, r8
 80082c6:	b005      	add	sp, #20
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	4645      	mov	r5, r8
 80082ce:	4626      	mov	r6, r4
 80082d0:	2401      	movs	r4, #1
 80082d2:	e7c7      	b.n	8008264 <__gethex+0xb4>
 80082d4:	f04f 0b00 	mov.w	fp, #0
 80082d8:	1ca9      	adds	r1, r5, #2
 80082da:	e7d0      	b.n	800827e <__gethex+0xce>
 80082dc:	f04f 0b01 	mov.w	fp, #1
 80082e0:	e7fa      	b.n	80082d8 <__gethex+0x128>
 80082e2:	230a      	movs	r3, #10
 80082e4:	fb03 0002 	mla	r0, r3, r2, r0
 80082e8:	e7d0      	b.n	800828c <__gethex+0xdc>
 80082ea:	4629      	mov	r1, r5
 80082ec:	e7e0      	b.n	80082b0 <__gethex+0x100>
 80082ee:	4621      	mov	r1, r4
 80082f0:	eba5 0308 	sub.w	r3, r5, r8
 80082f4:	3b01      	subs	r3, #1
 80082f6:	2b07      	cmp	r3, #7
 80082f8:	dc0a      	bgt.n	8008310 <__gethex+0x160>
 80082fa:	4648      	mov	r0, r9
 80082fc:	f000 fb10 	bl	8008920 <_Balloc>
 8008300:	4604      	mov	r4, r0
 8008302:	b940      	cbnz	r0, 8008316 <__gethex+0x166>
 8008304:	4602      	mov	r2, r0
 8008306:	21e4      	movs	r1, #228	; 0xe4
 8008308:	4b61      	ldr	r3, [pc, #388]	; (8008490 <__gethex+0x2e0>)
 800830a:	4862      	ldr	r0, [pc, #392]	; (8008494 <__gethex+0x2e4>)
 800830c:	f7ff f812 	bl	8007334 <__assert_func>
 8008310:	3101      	adds	r1, #1
 8008312:	105b      	asrs	r3, r3, #1
 8008314:	e7ef      	b.n	80082f6 <__gethex+0x146>
 8008316:	2300      	movs	r3, #0
 8008318:	469b      	mov	fp, r3
 800831a:	f100 0a14 	add.w	sl, r0, #20
 800831e:	f8cd a004 	str.w	sl, [sp, #4]
 8008322:	45a8      	cmp	r8, r5
 8008324:	d344      	bcc.n	80083b0 <__gethex+0x200>
 8008326:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800832a:	4658      	mov	r0, fp
 800832c:	f848 bb04 	str.w	fp, [r8], #4
 8008330:	eba8 080a 	sub.w	r8, r8, sl
 8008334:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008338:	6122      	str	r2, [r4, #16]
 800833a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800833e:	f000 fbe1 	bl	8008b04 <__hi0bits>
 8008342:	683d      	ldr	r5, [r7, #0]
 8008344:	eba8 0800 	sub.w	r8, r8, r0
 8008348:	45a8      	cmp	r8, r5
 800834a:	dd59      	ble.n	8008400 <__gethex+0x250>
 800834c:	eba8 0805 	sub.w	r8, r8, r5
 8008350:	4641      	mov	r1, r8
 8008352:	4620      	mov	r0, r4
 8008354:	f000 ff5f 	bl	8009216 <__any_on>
 8008358:	4683      	mov	fp, r0
 800835a:	b1b8      	cbz	r0, 800838c <__gethex+0x1dc>
 800835c:	f04f 0b01 	mov.w	fp, #1
 8008360:	f108 33ff 	add.w	r3, r8, #4294967295
 8008364:	1159      	asrs	r1, r3, #5
 8008366:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800836a:	f003 021f 	and.w	r2, r3, #31
 800836e:	fa0b f202 	lsl.w	r2, fp, r2
 8008372:	420a      	tst	r2, r1
 8008374:	d00a      	beq.n	800838c <__gethex+0x1dc>
 8008376:	455b      	cmp	r3, fp
 8008378:	dd06      	ble.n	8008388 <__gethex+0x1d8>
 800837a:	4620      	mov	r0, r4
 800837c:	f1a8 0102 	sub.w	r1, r8, #2
 8008380:	f000 ff49 	bl	8009216 <__any_on>
 8008384:	2800      	cmp	r0, #0
 8008386:	d138      	bne.n	80083fa <__gethex+0x24a>
 8008388:	f04f 0b02 	mov.w	fp, #2
 800838c:	4641      	mov	r1, r8
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff fea6 	bl	80080e0 <rshift>
 8008394:	4446      	add	r6, r8
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	42b3      	cmp	r3, r6
 800839a:	da41      	bge.n	8008420 <__gethex+0x270>
 800839c:	4621      	mov	r1, r4
 800839e:	4648      	mov	r0, r9
 80083a0:	f000 fafe 	bl	80089a0 <_Bfree>
 80083a4:	2300      	movs	r3, #0
 80083a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e789      	b.n	80082c4 <__gethex+0x114>
 80083b0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80083b4:	2a2e      	cmp	r2, #46	; 0x2e
 80083b6:	d014      	beq.n	80083e2 <__gethex+0x232>
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d106      	bne.n	80083ca <__gethex+0x21a>
 80083bc:	9b01      	ldr	r3, [sp, #4]
 80083be:	f843 bb04 	str.w	fp, [r3], #4
 80083c2:	f04f 0b00 	mov.w	fp, #0
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	465b      	mov	r3, fp
 80083ca:	7828      	ldrb	r0, [r5, #0]
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	f7ff feda 	bl	8008186 <__hexdig_fun>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	f000 000f 	and.w	r0, r0, #15
 80083d8:	4098      	lsls	r0, r3
 80083da:	ea4b 0b00 	orr.w	fp, fp, r0
 80083de:	3304      	adds	r3, #4
 80083e0:	e79f      	b.n	8008322 <__gethex+0x172>
 80083e2:	45a8      	cmp	r8, r5
 80083e4:	d8e8      	bhi.n	80083b8 <__gethex+0x208>
 80083e6:	2201      	movs	r2, #1
 80083e8:	4628      	mov	r0, r5
 80083ea:	4928      	ldr	r1, [pc, #160]	; (800848c <__gethex+0x2dc>)
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	f7fe fe6f 	bl	80070d0 <strncmp>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d1df      	bne.n	80083b8 <__gethex+0x208>
 80083f8:	e793      	b.n	8008322 <__gethex+0x172>
 80083fa:	f04f 0b03 	mov.w	fp, #3
 80083fe:	e7c5      	b.n	800838c <__gethex+0x1dc>
 8008400:	da0b      	bge.n	800841a <__gethex+0x26a>
 8008402:	eba5 0808 	sub.w	r8, r5, r8
 8008406:	4621      	mov	r1, r4
 8008408:	4642      	mov	r2, r8
 800840a:	4648      	mov	r0, r9
 800840c:	f000 fce0 	bl	8008dd0 <__lshift>
 8008410:	4604      	mov	r4, r0
 8008412:	eba6 0608 	sub.w	r6, r6, r8
 8008416:	f100 0a14 	add.w	sl, r0, #20
 800841a:	f04f 0b00 	mov.w	fp, #0
 800841e:	e7ba      	b.n	8008396 <__gethex+0x1e6>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	42b3      	cmp	r3, r6
 8008424:	dd74      	ble.n	8008510 <__gethex+0x360>
 8008426:	1b9e      	subs	r6, r3, r6
 8008428:	42b5      	cmp	r5, r6
 800842a:	dc35      	bgt.n	8008498 <__gethex+0x2e8>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d023      	beq.n	800847a <__gethex+0x2ca>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d025      	beq.n	8008482 <__gethex+0x2d2>
 8008436:	2b01      	cmp	r3, #1
 8008438:	d115      	bne.n	8008466 <__gethex+0x2b6>
 800843a:	42b5      	cmp	r5, r6
 800843c:	d113      	bne.n	8008466 <__gethex+0x2b6>
 800843e:	2d01      	cmp	r5, #1
 8008440:	d10b      	bne.n	800845a <__gethex+0x2aa>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	9a02      	ldr	r2, [sp, #8]
 8008446:	f04f 0862 	mov.w	r8, #98	; 0x62
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	2301      	movs	r3, #1
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	f8ca 3000 	str.w	r3, [sl]
 8008454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008456:	601c      	str	r4, [r3, #0]
 8008458:	e734      	b.n	80082c4 <__gethex+0x114>
 800845a:	4620      	mov	r0, r4
 800845c:	1e69      	subs	r1, r5, #1
 800845e:	f000 feda 	bl	8009216 <__any_on>
 8008462:	2800      	cmp	r0, #0
 8008464:	d1ed      	bne.n	8008442 <__gethex+0x292>
 8008466:	4621      	mov	r1, r4
 8008468:	4648      	mov	r0, r9
 800846a:	f000 fa99 	bl	80089a0 <_Bfree>
 800846e:	2300      	movs	r3, #0
 8008470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008472:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e724      	b.n	80082c4 <__gethex+0x114>
 800847a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1f2      	bne.n	8008466 <__gethex+0x2b6>
 8008480:	e7df      	b.n	8008442 <__gethex+0x292>
 8008482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1dc      	bne.n	8008442 <__gethex+0x292>
 8008488:	e7ed      	b.n	8008466 <__gethex+0x2b6>
 800848a:	bf00      	nop
 800848c:	080099b6 	.word	0x080099b6
 8008490:	08009c57 	.word	0x08009c57
 8008494:	08009c68 	.word	0x08009c68
 8008498:	f106 38ff 	add.w	r8, r6, #4294967295
 800849c:	f1bb 0f00 	cmp.w	fp, #0
 80084a0:	d133      	bne.n	800850a <__gethex+0x35a>
 80084a2:	f1b8 0f00 	cmp.w	r8, #0
 80084a6:	d004      	beq.n	80084b2 <__gethex+0x302>
 80084a8:	4641      	mov	r1, r8
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 feb3 	bl	8009216 <__any_on>
 80084b0:	4683      	mov	fp, r0
 80084b2:	2301      	movs	r3, #1
 80084b4:	ea4f 1268 	mov.w	r2, r8, asr #5
 80084b8:	f008 081f 	and.w	r8, r8, #31
 80084bc:	fa03 f308 	lsl.w	r3, r3, r8
 80084c0:	f04f 0802 	mov.w	r8, #2
 80084c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80084c8:	4631      	mov	r1, r6
 80084ca:	4213      	tst	r3, r2
 80084cc:	4620      	mov	r0, r4
 80084ce:	bf18      	it	ne
 80084d0:	f04b 0b02 	orrne.w	fp, fp, #2
 80084d4:	1bad      	subs	r5, r5, r6
 80084d6:	f7ff fe03 	bl	80080e0 <rshift>
 80084da:	687e      	ldr	r6, [r7, #4]
 80084dc:	f1bb 0f00 	cmp.w	fp, #0
 80084e0:	d04a      	beq.n	8008578 <__gethex+0x3c8>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d016      	beq.n	8008516 <__gethex+0x366>
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d018      	beq.n	800851e <__gethex+0x36e>
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d109      	bne.n	8008504 <__gethex+0x354>
 80084f0:	f01b 0f02 	tst.w	fp, #2
 80084f4:	d006      	beq.n	8008504 <__gethex+0x354>
 80084f6:	f8da 3000 	ldr.w	r3, [sl]
 80084fa:	ea4b 0b03 	orr.w	fp, fp, r3
 80084fe:	f01b 0f01 	tst.w	fp, #1
 8008502:	d10f      	bne.n	8008524 <__gethex+0x374>
 8008504:	f048 0810 	orr.w	r8, r8, #16
 8008508:	e036      	b.n	8008578 <__gethex+0x3c8>
 800850a:	f04f 0b01 	mov.w	fp, #1
 800850e:	e7d0      	b.n	80084b2 <__gethex+0x302>
 8008510:	f04f 0801 	mov.w	r8, #1
 8008514:	e7e2      	b.n	80084dc <__gethex+0x32c>
 8008516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008518:	f1c3 0301 	rsb	r3, r3, #1
 800851c:	930f      	str	r3, [sp, #60]	; 0x3c
 800851e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0ef      	beq.n	8008504 <__gethex+0x354>
 8008524:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008528:	f104 0214 	add.w	r2, r4, #20
 800852c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	2300      	movs	r3, #0
 8008534:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008538:	4694      	mov	ip, r2
 800853a:	f852 1b04 	ldr.w	r1, [r2], #4
 800853e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008542:	d01e      	beq.n	8008582 <__gethex+0x3d2>
 8008544:	3101      	adds	r1, #1
 8008546:	f8cc 1000 	str.w	r1, [ip]
 800854a:	f1b8 0f02 	cmp.w	r8, #2
 800854e:	f104 0214 	add.w	r2, r4, #20
 8008552:	d13d      	bne.n	80085d0 <__gethex+0x420>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	3b01      	subs	r3, #1
 8008558:	42ab      	cmp	r3, r5
 800855a:	d10b      	bne.n	8008574 <__gethex+0x3c4>
 800855c:	2301      	movs	r3, #1
 800855e:	1169      	asrs	r1, r5, #5
 8008560:	f005 051f 	and.w	r5, r5, #31
 8008564:	fa03 f505 	lsl.w	r5, r3, r5
 8008568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800856c:	421d      	tst	r5, r3
 800856e:	bf18      	it	ne
 8008570:	f04f 0801 	movne.w	r8, #1
 8008574:	f048 0820 	orr.w	r8, r8, #32
 8008578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800857a:	601c      	str	r4, [r3, #0]
 800857c:	9b02      	ldr	r3, [sp, #8]
 800857e:	601e      	str	r6, [r3, #0]
 8008580:	e6a0      	b.n	80082c4 <__gethex+0x114>
 8008582:	4290      	cmp	r0, r2
 8008584:	f842 3c04 	str.w	r3, [r2, #-4]
 8008588:	d8d6      	bhi.n	8008538 <__gethex+0x388>
 800858a:	68a2      	ldr	r2, [r4, #8]
 800858c:	4593      	cmp	fp, r2
 800858e:	db17      	blt.n	80085c0 <__gethex+0x410>
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	4648      	mov	r0, r9
 8008594:	3101      	adds	r1, #1
 8008596:	f000 f9c3 	bl	8008920 <_Balloc>
 800859a:	4682      	mov	sl, r0
 800859c:	b918      	cbnz	r0, 80085a6 <__gethex+0x3f6>
 800859e:	4602      	mov	r2, r0
 80085a0:	2184      	movs	r1, #132	; 0x84
 80085a2:	4b1a      	ldr	r3, [pc, #104]	; (800860c <__gethex+0x45c>)
 80085a4:	e6b1      	b.n	800830a <__gethex+0x15a>
 80085a6:	6922      	ldr	r2, [r4, #16]
 80085a8:	f104 010c 	add.w	r1, r4, #12
 80085ac:	3202      	adds	r2, #2
 80085ae:	0092      	lsls	r2, r2, #2
 80085b0:	300c      	adds	r0, #12
 80085b2:	f7fe feaa 	bl	800730a <memcpy>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4648      	mov	r0, r9
 80085ba:	f000 f9f1 	bl	80089a0 <_Bfree>
 80085be:	4654      	mov	r4, sl
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	1c51      	adds	r1, r2, #1
 80085c4:	6121      	str	r1, [r4, #16]
 80085c6:	2101      	movs	r1, #1
 80085c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80085cc:	6151      	str	r1, [r2, #20]
 80085ce:	e7bc      	b.n	800854a <__gethex+0x39a>
 80085d0:	6921      	ldr	r1, [r4, #16]
 80085d2:	4559      	cmp	r1, fp
 80085d4:	dd0b      	ble.n	80085ee <__gethex+0x43e>
 80085d6:	2101      	movs	r1, #1
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff fd81 	bl	80080e0 <rshift>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3601      	adds	r6, #1
 80085e2:	42b3      	cmp	r3, r6
 80085e4:	f6ff aeda 	blt.w	800839c <__gethex+0x1ec>
 80085e8:	f04f 0801 	mov.w	r8, #1
 80085ec:	e7c2      	b.n	8008574 <__gethex+0x3c4>
 80085ee:	f015 051f 	ands.w	r5, r5, #31
 80085f2:	d0f9      	beq.n	80085e8 <__gethex+0x438>
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	f1c5 0520 	rsb	r5, r5, #32
 80085fa:	441a      	add	r2, r3
 80085fc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008600:	f000 fa80 	bl	8008b04 <__hi0bits>
 8008604:	42a8      	cmp	r0, r5
 8008606:	dbe6      	blt.n	80085d6 <__gethex+0x426>
 8008608:	e7ee      	b.n	80085e8 <__gethex+0x438>
 800860a:	bf00      	nop
 800860c:	08009c57 	.word	0x08009c57

08008610 <L_shift>:
 8008610:	f1c2 0208 	rsb	r2, r2, #8
 8008614:	0092      	lsls	r2, r2, #2
 8008616:	b570      	push	{r4, r5, r6, lr}
 8008618:	f1c2 0620 	rsb	r6, r2, #32
 800861c:	6843      	ldr	r3, [r0, #4]
 800861e:	6804      	ldr	r4, [r0, #0]
 8008620:	fa03 f506 	lsl.w	r5, r3, r6
 8008624:	432c      	orrs	r4, r5
 8008626:	40d3      	lsrs	r3, r2
 8008628:	6004      	str	r4, [r0, #0]
 800862a:	f840 3f04 	str.w	r3, [r0, #4]!
 800862e:	4288      	cmp	r0, r1
 8008630:	d3f4      	bcc.n	800861c <L_shift+0xc>
 8008632:	bd70      	pop	{r4, r5, r6, pc}

08008634 <__match>:
 8008634:	b530      	push	{r4, r5, lr}
 8008636:	6803      	ldr	r3, [r0, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800863e:	b914      	cbnz	r4, 8008646 <__match+0x12>
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	2001      	movs	r0, #1
 8008644:	bd30      	pop	{r4, r5, pc}
 8008646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800864e:	2d19      	cmp	r5, #25
 8008650:	bf98      	it	ls
 8008652:	3220      	addls	r2, #32
 8008654:	42a2      	cmp	r2, r4
 8008656:	d0f0      	beq.n	800863a <__match+0x6>
 8008658:	2000      	movs	r0, #0
 800865a:	e7f3      	b.n	8008644 <__match+0x10>

0800865c <__hexnan>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	2500      	movs	r5, #0
 8008662:	680b      	ldr	r3, [r1, #0]
 8008664:	4682      	mov	sl, r0
 8008666:	115e      	asrs	r6, r3, #5
 8008668:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800866c:	f013 031f 	ands.w	r3, r3, #31
 8008670:	bf18      	it	ne
 8008672:	3604      	addne	r6, #4
 8008674:	1f37      	subs	r7, r6, #4
 8008676:	4690      	mov	r8, r2
 8008678:	46b9      	mov	r9, r7
 800867a:	463c      	mov	r4, r7
 800867c:	46ab      	mov	fp, r5
 800867e:	b087      	sub	sp, #28
 8008680:	6801      	ldr	r1, [r0, #0]
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	f846 5c04 	str.w	r5, [r6, #-4]
 8008688:	9502      	str	r5, [sp, #8]
 800868a:	784a      	ldrb	r2, [r1, #1]
 800868c:	1c4b      	adds	r3, r1, #1
 800868e:	9303      	str	r3, [sp, #12]
 8008690:	b342      	cbz	r2, 80086e4 <__hexnan+0x88>
 8008692:	4610      	mov	r0, r2
 8008694:	9105      	str	r1, [sp, #20]
 8008696:	9204      	str	r2, [sp, #16]
 8008698:	f7ff fd75 	bl	8008186 <__hexdig_fun>
 800869c:	2800      	cmp	r0, #0
 800869e:	d14f      	bne.n	8008740 <__hexnan+0xe4>
 80086a0:	9a04      	ldr	r2, [sp, #16]
 80086a2:	9905      	ldr	r1, [sp, #20]
 80086a4:	2a20      	cmp	r2, #32
 80086a6:	d818      	bhi.n	80086da <__hexnan+0x7e>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	459b      	cmp	fp, r3
 80086ac:	dd13      	ble.n	80086d6 <__hexnan+0x7a>
 80086ae:	454c      	cmp	r4, r9
 80086b0:	d206      	bcs.n	80086c0 <__hexnan+0x64>
 80086b2:	2d07      	cmp	r5, #7
 80086b4:	dc04      	bgt.n	80086c0 <__hexnan+0x64>
 80086b6:	462a      	mov	r2, r5
 80086b8:	4649      	mov	r1, r9
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff ffa8 	bl	8008610 <L_shift>
 80086c0:	4544      	cmp	r4, r8
 80086c2:	d950      	bls.n	8008766 <__hexnan+0x10a>
 80086c4:	2300      	movs	r3, #0
 80086c6:	f1a4 0904 	sub.w	r9, r4, #4
 80086ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80086ce:	461d      	mov	r5, r3
 80086d0:	464c      	mov	r4, r9
 80086d2:	f8cd b008 	str.w	fp, [sp, #8]
 80086d6:	9903      	ldr	r1, [sp, #12]
 80086d8:	e7d7      	b.n	800868a <__hexnan+0x2e>
 80086da:	2a29      	cmp	r2, #41	; 0x29
 80086dc:	d155      	bne.n	800878a <__hexnan+0x12e>
 80086de:	3102      	adds	r1, #2
 80086e0:	f8ca 1000 	str.w	r1, [sl]
 80086e4:	f1bb 0f00 	cmp.w	fp, #0
 80086e8:	d04f      	beq.n	800878a <__hexnan+0x12e>
 80086ea:	454c      	cmp	r4, r9
 80086ec:	d206      	bcs.n	80086fc <__hexnan+0xa0>
 80086ee:	2d07      	cmp	r5, #7
 80086f0:	dc04      	bgt.n	80086fc <__hexnan+0xa0>
 80086f2:	462a      	mov	r2, r5
 80086f4:	4649      	mov	r1, r9
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff ff8a 	bl	8008610 <L_shift>
 80086fc:	4544      	cmp	r4, r8
 80086fe:	d934      	bls.n	800876a <__hexnan+0x10e>
 8008700:	4623      	mov	r3, r4
 8008702:	f1a8 0204 	sub.w	r2, r8, #4
 8008706:	f853 1b04 	ldr.w	r1, [r3], #4
 800870a:	429f      	cmp	r7, r3
 800870c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008710:	d2f9      	bcs.n	8008706 <__hexnan+0xaa>
 8008712:	1b3b      	subs	r3, r7, r4
 8008714:	f023 0303 	bic.w	r3, r3, #3
 8008718:	3304      	adds	r3, #4
 800871a:	3e03      	subs	r6, #3
 800871c:	3401      	adds	r4, #1
 800871e:	42a6      	cmp	r6, r4
 8008720:	bf38      	it	cc
 8008722:	2304      	movcc	r3, #4
 8008724:	2200      	movs	r2, #0
 8008726:	4443      	add	r3, r8
 8008728:	f843 2b04 	str.w	r2, [r3], #4
 800872c:	429f      	cmp	r7, r3
 800872e:	d2fb      	bcs.n	8008728 <__hexnan+0xcc>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	b91b      	cbnz	r3, 800873c <__hexnan+0xe0>
 8008734:	4547      	cmp	r7, r8
 8008736:	d126      	bne.n	8008786 <__hexnan+0x12a>
 8008738:	2301      	movs	r3, #1
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	2005      	movs	r0, #5
 800873e:	e025      	b.n	800878c <__hexnan+0x130>
 8008740:	3501      	adds	r5, #1
 8008742:	2d08      	cmp	r5, #8
 8008744:	f10b 0b01 	add.w	fp, fp, #1
 8008748:	dd06      	ble.n	8008758 <__hexnan+0xfc>
 800874a:	4544      	cmp	r4, r8
 800874c:	d9c3      	bls.n	80086d6 <__hexnan+0x7a>
 800874e:	2300      	movs	r3, #0
 8008750:	2501      	movs	r5, #1
 8008752:	f844 3c04 	str.w	r3, [r4, #-4]
 8008756:	3c04      	subs	r4, #4
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	f000 000f 	and.w	r0, r0, #15
 800875e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	e7b7      	b.n	80086d6 <__hexnan+0x7a>
 8008766:	2508      	movs	r5, #8
 8008768:	e7b5      	b.n	80086d6 <__hexnan+0x7a>
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0df      	beq.n	8008730 <__hexnan+0xd4>
 8008770:	f04f 32ff 	mov.w	r2, #4294967295
 8008774:	f1c3 0320 	rsb	r3, r3, #32
 8008778:	40da      	lsrs	r2, r3
 800877a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800877e:	4013      	ands	r3, r2
 8008780:	f846 3c04 	str.w	r3, [r6, #-4]
 8008784:	e7d4      	b.n	8008730 <__hexnan+0xd4>
 8008786:	3f04      	subs	r7, #4
 8008788:	e7d2      	b.n	8008730 <__hexnan+0xd4>
 800878a:	2004      	movs	r0, #4
 800878c:	b007      	add	sp, #28
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008794 <malloc>:
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <malloc+0xc>)
 8008796:	4601      	mov	r1, r0
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f000 b823 	b.w	80087e4 <_malloc_r>
 800879e:	bf00      	nop
 80087a0:	200001f8 	.word	0x200001f8

080087a4 <sbrk_aligned>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4e0e      	ldr	r6, [pc, #56]	; (80087e0 <sbrk_aligned+0x3c>)
 80087a8:	460c      	mov	r4, r1
 80087aa:	6831      	ldr	r1, [r6, #0]
 80087ac:	4605      	mov	r5, r0
 80087ae:	b911      	cbnz	r1, 80087b6 <sbrk_aligned+0x12>
 80087b0:	f000 ffe0 	bl	8009774 <_sbrk_r>
 80087b4:	6030      	str	r0, [r6, #0]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 ffdb 	bl	8009774 <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d00a      	beq.n	80087d8 <sbrk_aligned+0x34>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d007      	beq.n	80087dc <sbrk_aligned+0x38>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 ffd0 	bl	8009774 <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d101      	bne.n	80087dc <sbrk_aligned+0x38>
 80087d8:	f04f 34ff 	mov.w	r4, #4294967295
 80087dc:	4620      	mov	r0, r4
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	200023e0 	.word	0x200023e0

080087e4 <_malloc_r>:
 80087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e8:	1ccd      	adds	r5, r1, #3
 80087ea:	f025 0503 	bic.w	r5, r5, #3
 80087ee:	3508      	adds	r5, #8
 80087f0:	2d0c      	cmp	r5, #12
 80087f2:	bf38      	it	cc
 80087f4:	250c      	movcc	r5, #12
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	4607      	mov	r7, r0
 80087fa:	db01      	blt.n	8008800 <_malloc_r+0x1c>
 80087fc:	42a9      	cmp	r1, r5
 80087fe:	d905      	bls.n	800880c <_malloc_r+0x28>
 8008800:	230c      	movs	r3, #12
 8008802:	2600      	movs	r6, #0
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	4630      	mov	r0, r6
 8008808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088e0 <_malloc_r+0xfc>
 8008810:	f000 f87a 	bl	8008908 <__malloc_lock>
 8008814:	f8d8 3000 	ldr.w	r3, [r8]
 8008818:	461c      	mov	r4, r3
 800881a:	bb5c      	cbnz	r4, 8008874 <_malloc_r+0x90>
 800881c:	4629      	mov	r1, r5
 800881e:	4638      	mov	r0, r7
 8008820:	f7ff ffc0 	bl	80087a4 <sbrk_aligned>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	4604      	mov	r4, r0
 8008828:	d155      	bne.n	80088d6 <_malloc_r+0xf2>
 800882a:	f8d8 4000 	ldr.w	r4, [r8]
 800882e:	4626      	mov	r6, r4
 8008830:	2e00      	cmp	r6, #0
 8008832:	d145      	bne.n	80088c0 <_malloc_r+0xdc>
 8008834:	2c00      	cmp	r4, #0
 8008836:	d048      	beq.n	80088ca <_malloc_r+0xe6>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	4631      	mov	r1, r6
 800883c:	4638      	mov	r0, r7
 800883e:	eb04 0903 	add.w	r9, r4, r3
 8008842:	f000 ff97 	bl	8009774 <_sbrk_r>
 8008846:	4581      	cmp	r9, r0
 8008848:	d13f      	bne.n	80088ca <_malloc_r+0xe6>
 800884a:	6821      	ldr	r1, [r4, #0]
 800884c:	4638      	mov	r0, r7
 800884e:	1a6d      	subs	r5, r5, r1
 8008850:	4629      	mov	r1, r5
 8008852:	f7ff ffa7 	bl	80087a4 <sbrk_aligned>
 8008856:	3001      	adds	r0, #1
 8008858:	d037      	beq.n	80088ca <_malloc_r+0xe6>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	442b      	add	r3, r5
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	f8d8 3000 	ldr.w	r3, [r8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d038      	beq.n	80088da <_malloc_r+0xf6>
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	42a2      	cmp	r2, r4
 800886c:	d12b      	bne.n	80088c6 <_malloc_r+0xe2>
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	e00f      	b.n	8008894 <_malloc_r+0xb0>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	1b52      	subs	r2, r2, r5
 8008878:	d41f      	bmi.n	80088ba <_malloc_r+0xd6>
 800887a:	2a0b      	cmp	r2, #11
 800887c:	d917      	bls.n	80088ae <_malloc_r+0xca>
 800887e:	1961      	adds	r1, r4, r5
 8008880:	42a3      	cmp	r3, r4
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	bf18      	it	ne
 8008886:	6059      	strne	r1, [r3, #4]
 8008888:	6863      	ldr	r3, [r4, #4]
 800888a:	bf08      	it	eq
 800888c:	f8c8 1000 	streq.w	r1, [r8]
 8008890:	5162      	str	r2, [r4, r5]
 8008892:	604b      	str	r3, [r1, #4]
 8008894:	4638      	mov	r0, r7
 8008896:	f104 060b 	add.w	r6, r4, #11
 800889a:	f000 f83b 	bl	8008914 <__malloc_unlock>
 800889e:	f026 0607 	bic.w	r6, r6, #7
 80088a2:	1d23      	adds	r3, r4, #4
 80088a4:	1af2      	subs	r2, r6, r3
 80088a6:	d0ae      	beq.n	8008806 <_malloc_r+0x22>
 80088a8:	1b9b      	subs	r3, r3, r6
 80088aa:	50a3      	str	r3, [r4, r2]
 80088ac:	e7ab      	b.n	8008806 <_malloc_r+0x22>
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	d1dd      	bne.n	8008870 <_malloc_r+0x8c>
 80088b4:	f8c8 2000 	str.w	r2, [r8]
 80088b8:	e7ec      	b.n	8008894 <_malloc_r+0xb0>
 80088ba:	4623      	mov	r3, r4
 80088bc:	6864      	ldr	r4, [r4, #4]
 80088be:	e7ac      	b.n	800881a <_malloc_r+0x36>
 80088c0:	4634      	mov	r4, r6
 80088c2:	6876      	ldr	r6, [r6, #4]
 80088c4:	e7b4      	b.n	8008830 <_malloc_r+0x4c>
 80088c6:	4613      	mov	r3, r2
 80088c8:	e7cc      	b.n	8008864 <_malloc_r+0x80>
 80088ca:	230c      	movs	r3, #12
 80088cc:	4638      	mov	r0, r7
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	f000 f820 	bl	8008914 <__malloc_unlock>
 80088d4:	e797      	b.n	8008806 <_malloc_r+0x22>
 80088d6:	6025      	str	r5, [r4, #0]
 80088d8:	e7dc      	b.n	8008894 <_malloc_r+0xb0>
 80088da:	605b      	str	r3, [r3, #4]
 80088dc:	deff      	udf	#255	; 0xff
 80088de:	bf00      	nop
 80088e0:	200023dc 	.word	0x200023dc

080088e4 <__ascii_mbtowc>:
 80088e4:	b082      	sub	sp, #8
 80088e6:	b901      	cbnz	r1, 80088ea <__ascii_mbtowc+0x6>
 80088e8:	a901      	add	r1, sp, #4
 80088ea:	b142      	cbz	r2, 80088fe <__ascii_mbtowc+0x1a>
 80088ec:	b14b      	cbz	r3, 8008902 <__ascii_mbtowc+0x1e>
 80088ee:	7813      	ldrb	r3, [r2, #0]
 80088f0:	600b      	str	r3, [r1, #0]
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	1e10      	subs	r0, r2, #0
 80088f6:	bf18      	it	ne
 80088f8:	2001      	movne	r0, #1
 80088fa:	b002      	add	sp, #8
 80088fc:	4770      	bx	lr
 80088fe:	4610      	mov	r0, r2
 8008900:	e7fb      	b.n	80088fa <__ascii_mbtowc+0x16>
 8008902:	f06f 0001 	mvn.w	r0, #1
 8008906:	e7f8      	b.n	80088fa <__ascii_mbtowc+0x16>

08008908 <__malloc_lock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_lock+0x8>)
 800890a:	f7fe bcee 	b.w	80072ea <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	200023d8 	.word	0x200023d8

08008914 <__malloc_unlock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_unlock+0x8>)
 8008916:	f7fe bce9 	b.w	80072ec <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	200023d8 	.word	0x200023d8

08008920 <_Balloc>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	69c6      	ldr	r6, [r0, #28]
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	b976      	cbnz	r6, 8008948 <_Balloc+0x28>
 800892a:	2010      	movs	r0, #16
 800892c:	f7ff ff32 	bl	8008794 <malloc>
 8008930:	4602      	mov	r2, r0
 8008932:	61e0      	str	r0, [r4, #28]
 8008934:	b920      	cbnz	r0, 8008940 <_Balloc+0x20>
 8008936:	216b      	movs	r1, #107	; 0x6b
 8008938:	4b17      	ldr	r3, [pc, #92]	; (8008998 <_Balloc+0x78>)
 800893a:	4818      	ldr	r0, [pc, #96]	; (800899c <_Balloc+0x7c>)
 800893c:	f7fe fcfa 	bl	8007334 <__assert_func>
 8008940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008944:	6006      	str	r6, [r0, #0]
 8008946:	60c6      	str	r6, [r0, #12]
 8008948:	69e6      	ldr	r6, [r4, #28]
 800894a:	68f3      	ldr	r3, [r6, #12]
 800894c:	b183      	cbz	r3, 8008970 <_Balloc+0x50>
 800894e:	69e3      	ldr	r3, [r4, #28]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008956:	b9b8      	cbnz	r0, 8008988 <_Balloc+0x68>
 8008958:	2101      	movs	r1, #1
 800895a:	fa01 f605 	lsl.w	r6, r1, r5
 800895e:	1d72      	adds	r2, r6, #5
 8008960:	4620      	mov	r0, r4
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	f000 ff1d 	bl	80097a2 <_calloc_r>
 8008968:	b160      	cbz	r0, 8008984 <_Balloc+0x64>
 800896a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800896e:	e00e      	b.n	800898e <_Balloc+0x6e>
 8008970:	2221      	movs	r2, #33	; 0x21
 8008972:	2104      	movs	r1, #4
 8008974:	4620      	mov	r0, r4
 8008976:	f000 ff14 	bl	80097a2 <_calloc_r>
 800897a:	69e3      	ldr	r3, [r4, #28]
 800897c:	60f0      	str	r0, [r6, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e4      	bne.n	800894e <_Balloc+0x2e>
 8008984:	2000      	movs	r0, #0
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800898e:	2300      	movs	r3, #0
 8008990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008994:	e7f7      	b.n	8008986 <_Balloc+0x66>
 8008996:	bf00      	nop
 8008998:	08009b3d 	.word	0x08009b3d
 800899c:	08009cc8 	.word	0x08009cc8

080089a0 <_Bfree>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	69c6      	ldr	r6, [r0, #28]
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	b976      	cbnz	r6, 80089c8 <_Bfree+0x28>
 80089aa:	2010      	movs	r0, #16
 80089ac:	f7ff fef2 	bl	8008794 <malloc>
 80089b0:	4602      	mov	r2, r0
 80089b2:	61e8      	str	r0, [r5, #28]
 80089b4:	b920      	cbnz	r0, 80089c0 <_Bfree+0x20>
 80089b6:	218f      	movs	r1, #143	; 0x8f
 80089b8:	4b08      	ldr	r3, [pc, #32]	; (80089dc <_Bfree+0x3c>)
 80089ba:	4809      	ldr	r0, [pc, #36]	; (80089e0 <_Bfree+0x40>)
 80089bc:	f7fe fcba 	bl	8007334 <__assert_func>
 80089c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c4:	6006      	str	r6, [r0, #0]
 80089c6:	60c6      	str	r6, [r0, #12]
 80089c8:	b13c      	cbz	r4, 80089da <_Bfree+0x3a>
 80089ca:	69eb      	ldr	r3, [r5, #28]
 80089cc:	6862      	ldr	r2, [r4, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089d4:	6021      	str	r1, [r4, #0]
 80089d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	08009b3d 	.word	0x08009b3d
 80089e0:	08009cc8 	.word	0x08009cc8

080089e4 <__multadd>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	4607      	mov	r7, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	461e      	mov	r6, r3
 80089ee:	2000      	movs	r0, #0
 80089f0:	690d      	ldr	r5, [r1, #16]
 80089f2:	f101 0c14 	add.w	ip, r1, #20
 80089f6:	f8dc 3000 	ldr.w	r3, [ip]
 80089fa:	3001      	adds	r0, #1
 80089fc:	b299      	uxth	r1, r3
 80089fe:	fb02 6101 	mla	r1, r2, r1, r6
 8008a02:	0c1e      	lsrs	r6, r3, #16
 8008a04:	0c0b      	lsrs	r3, r1, #16
 8008a06:	fb02 3306 	mla	r3, r2, r6, r3
 8008a0a:	b289      	uxth	r1, r1
 8008a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a10:	4285      	cmp	r5, r0
 8008a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a16:	f84c 1b04 	str.w	r1, [ip], #4
 8008a1a:	dcec      	bgt.n	80089f6 <__multadd+0x12>
 8008a1c:	b30e      	cbz	r6, 8008a62 <__multadd+0x7e>
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dc19      	bgt.n	8008a58 <__multadd+0x74>
 8008a24:	6861      	ldr	r1, [r4, #4]
 8008a26:	4638      	mov	r0, r7
 8008a28:	3101      	adds	r1, #1
 8008a2a:	f7ff ff79 	bl	8008920 <_Balloc>
 8008a2e:	4680      	mov	r8, r0
 8008a30:	b928      	cbnz	r0, 8008a3e <__multadd+0x5a>
 8008a32:	4602      	mov	r2, r0
 8008a34:	21ba      	movs	r1, #186	; 0xba
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <__multadd+0x84>)
 8008a38:	480c      	ldr	r0, [pc, #48]	; (8008a6c <__multadd+0x88>)
 8008a3a:	f7fe fc7b 	bl	8007334 <__assert_func>
 8008a3e:	6922      	ldr	r2, [r4, #16]
 8008a40:	f104 010c 	add.w	r1, r4, #12
 8008a44:	3202      	adds	r2, #2
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	300c      	adds	r0, #12
 8008a4a:	f7fe fc5e 	bl	800730a <memcpy>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff ffa5 	bl	80089a0 <_Bfree>
 8008a56:	4644      	mov	r4, r8
 8008a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	615e      	str	r6, [r3, #20]
 8008a60:	6125      	str	r5, [r4, #16]
 8008a62:	4620      	mov	r0, r4
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a68:	08009c57 	.word	0x08009c57
 8008a6c:	08009cc8 	.word	0x08009cc8

08008a70 <__s2b>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	4615      	mov	r5, r2
 8008a76:	2209      	movs	r2, #9
 8008a78:	461f      	mov	r7, r3
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a82:	4606      	mov	r6, r0
 8008a84:	2201      	movs	r2, #1
 8008a86:	2100      	movs	r1, #0
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	db09      	blt.n	8008aa0 <__s2b+0x30>
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff ff47 	bl	8008920 <_Balloc>
 8008a92:	b940      	cbnz	r0, 8008aa6 <__s2b+0x36>
 8008a94:	4602      	mov	r2, r0
 8008a96:	21d3      	movs	r1, #211	; 0xd3
 8008a98:	4b18      	ldr	r3, [pc, #96]	; (8008afc <__s2b+0x8c>)
 8008a9a:	4819      	ldr	r0, [pc, #100]	; (8008b00 <__s2b+0x90>)
 8008a9c:	f7fe fc4a 	bl	8007334 <__assert_func>
 8008aa0:	0052      	lsls	r2, r2, #1
 8008aa2:	3101      	adds	r1, #1
 8008aa4:	e7f0      	b.n	8008a88 <__s2b+0x18>
 8008aa6:	9b08      	ldr	r3, [sp, #32]
 8008aa8:	2d09      	cmp	r5, #9
 8008aaa:	6143      	str	r3, [r0, #20]
 8008aac:	f04f 0301 	mov.w	r3, #1
 8008ab0:	6103      	str	r3, [r0, #16]
 8008ab2:	dd16      	ble.n	8008ae2 <__s2b+0x72>
 8008ab4:	f104 0909 	add.w	r9, r4, #9
 8008ab8:	46c8      	mov	r8, r9
 8008aba:	442c      	add	r4, r5
 8008abc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	3b30      	subs	r3, #48	; 0x30
 8008ac8:	f7ff ff8c 	bl	80089e4 <__multadd>
 8008acc:	45a0      	cmp	r8, r4
 8008ace:	d1f5      	bne.n	8008abc <__s2b+0x4c>
 8008ad0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ad4:	444c      	add	r4, r9
 8008ad6:	1b2d      	subs	r5, r5, r4
 8008ad8:	1963      	adds	r3, r4, r5
 8008ada:	42bb      	cmp	r3, r7
 8008adc:	db04      	blt.n	8008ae8 <__s2b+0x78>
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	2509      	movs	r5, #9
 8008ae4:	340a      	adds	r4, #10
 8008ae6:	e7f6      	b.n	8008ad6 <__s2b+0x66>
 8008ae8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008aec:	4601      	mov	r1, r0
 8008aee:	220a      	movs	r2, #10
 8008af0:	4630      	mov	r0, r6
 8008af2:	3b30      	subs	r3, #48	; 0x30
 8008af4:	f7ff ff76 	bl	80089e4 <__multadd>
 8008af8:	e7ee      	b.n	8008ad8 <__s2b+0x68>
 8008afa:	bf00      	nop
 8008afc:	08009c57 	.word	0x08009c57
 8008b00:	08009cc8 	.word	0x08009cc8

08008b04 <__hi0bits>:
 8008b04:	0c02      	lsrs	r2, r0, #16
 8008b06:	0412      	lsls	r2, r2, #16
 8008b08:	4603      	mov	r3, r0
 8008b0a:	b9ca      	cbnz	r2, 8008b40 <__hi0bits+0x3c>
 8008b0c:	0403      	lsls	r3, r0, #16
 8008b0e:	2010      	movs	r0, #16
 8008b10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b14:	bf04      	itt	eq
 8008b16:	021b      	lsleq	r3, r3, #8
 8008b18:	3008      	addeq	r0, #8
 8008b1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b1e:	bf04      	itt	eq
 8008b20:	011b      	lsleq	r3, r3, #4
 8008b22:	3004      	addeq	r0, #4
 8008b24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b28:	bf04      	itt	eq
 8008b2a:	009b      	lsleq	r3, r3, #2
 8008b2c:	3002      	addeq	r0, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	db05      	blt.n	8008b3e <__hi0bits+0x3a>
 8008b32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008b36:	f100 0001 	add.w	r0, r0, #1
 8008b3a:	bf08      	it	eq
 8008b3c:	2020      	moveq	r0, #32
 8008b3e:	4770      	bx	lr
 8008b40:	2000      	movs	r0, #0
 8008b42:	e7e5      	b.n	8008b10 <__hi0bits+0xc>

08008b44 <__lo0bits>:
 8008b44:	6803      	ldr	r3, [r0, #0]
 8008b46:	4602      	mov	r2, r0
 8008b48:	f013 0007 	ands.w	r0, r3, #7
 8008b4c:	d00b      	beq.n	8008b66 <__lo0bits+0x22>
 8008b4e:	07d9      	lsls	r1, r3, #31
 8008b50:	d421      	bmi.n	8008b96 <__lo0bits+0x52>
 8008b52:	0798      	lsls	r0, r3, #30
 8008b54:	bf49      	itett	mi
 8008b56:	085b      	lsrmi	r3, r3, #1
 8008b58:	089b      	lsrpl	r3, r3, #2
 8008b5a:	2001      	movmi	r0, #1
 8008b5c:	6013      	strmi	r3, [r2, #0]
 8008b5e:	bf5c      	itt	pl
 8008b60:	2002      	movpl	r0, #2
 8008b62:	6013      	strpl	r3, [r2, #0]
 8008b64:	4770      	bx	lr
 8008b66:	b299      	uxth	r1, r3
 8008b68:	b909      	cbnz	r1, 8008b6e <__lo0bits+0x2a>
 8008b6a:	2010      	movs	r0, #16
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	b2d9      	uxtb	r1, r3
 8008b70:	b909      	cbnz	r1, 8008b76 <__lo0bits+0x32>
 8008b72:	3008      	adds	r0, #8
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	0719      	lsls	r1, r3, #28
 8008b78:	bf04      	itt	eq
 8008b7a:	091b      	lsreq	r3, r3, #4
 8008b7c:	3004      	addeq	r0, #4
 8008b7e:	0799      	lsls	r1, r3, #30
 8008b80:	bf04      	itt	eq
 8008b82:	089b      	lsreq	r3, r3, #2
 8008b84:	3002      	addeq	r0, #2
 8008b86:	07d9      	lsls	r1, r3, #31
 8008b88:	d403      	bmi.n	8008b92 <__lo0bits+0x4e>
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	f100 0001 	add.w	r0, r0, #1
 8008b90:	d003      	beq.n	8008b9a <__lo0bits+0x56>
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	4770      	bx	lr
 8008b96:	2000      	movs	r0, #0
 8008b98:	4770      	bx	lr
 8008b9a:	2020      	movs	r0, #32
 8008b9c:	4770      	bx	lr
	...

08008ba0 <__i2b>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	f7ff febb 	bl	8008920 <_Balloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	b928      	cbnz	r0, 8008bba <__i2b+0x1a>
 8008bae:	f240 1145 	movw	r1, #325	; 0x145
 8008bb2:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <__i2b+0x24>)
 8008bb4:	4804      	ldr	r0, [pc, #16]	; (8008bc8 <__i2b+0x28>)
 8008bb6:	f7fe fbbd 	bl	8007334 <__assert_func>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	6144      	str	r4, [r0, #20]
 8008bbe:	6103      	str	r3, [r0, #16]
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08009c57 	.word	0x08009c57
 8008bc8:	08009cc8 	.word	0x08009cc8

08008bcc <__multiply>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	4691      	mov	r9, r2
 8008bd2:	690a      	ldr	r2, [r1, #16]
 8008bd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd8:	460c      	mov	r4, r1
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	bfbe      	ittt	lt
 8008bde:	460b      	movlt	r3, r1
 8008be0:	464c      	movlt	r4, r9
 8008be2:	4699      	movlt	r9, r3
 8008be4:	6927      	ldr	r7, [r4, #16]
 8008be6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	eb07 060a 	add.w	r6, r7, sl
 8008bf2:	42b3      	cmp	r3, r6
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	bfb8      	it	lt
 8008bf8:	3101      	addlt	r1, #1
 8008bfa:	f7ff fe91 	bl	8008920 <_Balloc>
 8008bfe:	b930      	cbnz	r0, 8008c0e <__multiply+0x42>
 8008c00:	4602      	mov	r2, r0
 8008c02:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008c06:	4b43      	ldr	r3, [pc, #268]	; (8008d14 <__multiply+0x148>)
 8008c08:	4843      	ldr	r0, [pc, #268]	; (8008d18 <__multiply+0x14c>)
 8008c0a:	f7fe fb93 	bl	8007334 <__assert_func>
 8008c0e:	f100 0514 	add.w	r5, r0, #20
 8008c12:	462b      	mov	r3, r5
 8008c14:	2200      	movs	r2, #0
 8008c16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c1a:	4543      	cmp	r3, r8
 8008c1c:	d321      	bcc.n	8008c62 <__multiply+0x96>
 8008c1e:	f104 0314 	add.w	r3, r4, #20
 8008c22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c26:	f109 0314 	add.w	r3, r9, #20
 8008c2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c2e:	9202      	str	r2, [sp, #8]
 8008c30:	1b3a      	subs	r2, r7, r4
 8008c32:	3a15      	subs	r2, #21
 8008c34:	f022 0203 	bic.w	r2, r2, #3
 8008c38:	3204      	adds	r2, #4
 8008c3a:	f104 0115 	add.w	r1, r4, #21
 8008c3e:	428f      	cmp	r7, r1
 8008c40:	bf38      	it	cc
 8008c42:	2204      	movcc	r2, #4
 8008c44:	9201      	str	r2, [sp, #4]
 8008c46:	9a02      	ldr	r2, [sp, #8]
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d80c      	bhi.n	8008c68 <__multiply+0x9c>
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	dd03      	ble.n	8008c5a <__multiply+0x8e>
 8008c52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d05a      	beq.n	8008d10 <__multiply+0x144>
 8008c5a:	6106      	str	r6, [r0, #16]
 8008c5c:	b005      	add	sp, #20
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	f843 2b04 	str.w	r2, [r3], #4
 8008c66:	e7d8      	b.n	8008c1a <__multiply+0x4e>
 8008c68:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c6c:	f1ba 0f00 	cmp.w	sl, #0
 8008c70:	d023      	beq.n	8008cba <__multiply+0xee>
 8008c72:	46a9      	mov	r9, r5
 8008c74:	f04f 0c00 	mov.w	ip, #0
 8008c78:	f104 0e14 	add.w	lr, r4, #20
 8008c7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c80:	f8d9 1000 	ldr.w	r1, [r9]
 8008c84:	fa1f fb82 	uxth.w	fp, r2
 8008c88:	b289      	uxth	r1, r1
 8008c8a:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c8e:	4461      	add	r1, ip
 8008c90:	f8d9 c000 	ldr.w	ip, [r9]
 8008c94:	0c12      	lsrs	r2, r2, #16
 8008c96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008c9a:	fb0a c202 	mla	r2, sl, r2, ip
 8008c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ca2:	b289      	uxth	r1, r1
 8008ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ca8:	4577      	cmp	r7, lr
 8008caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cae:	f849 1b04 	str.w	r1, [r9], #4
 8008cb2:	d8e3      	bhi.n	8008c7c <__multiply+0xb0>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f845 c002 	str.w	ip, [r5, r2]
 8008cba:	9a03      	ldr	r2, [sp, #12]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	d021      	beq.n	8008d0c <__multiply+0x140>
 8008cc8:	46ae      	mov	lr, r5
 8008cca:	f04f 0a00 	mov.w	sl, #0
 8008cce:	6829      	ldr	r1, [r5, #0]
 8008cd0:	f104 0c14 	add.w	ip, r4, #20
 8008cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cdc:	b289      	uxth	r1, r1
 8008cde:	fb09 220b 	mla	r2, r9, fp, r2
 8008ce2:	4452      	add	r2, sl
 8008ce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cf4:	f8be 1000 	ldrh.w	r1, [lr]
 8008cf8:	4567      	cmp	r7, ip
 8008cfa:	fb09 110a 	mla	r1, r9, sl, r1
 8008cfe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d06:	d8e5      	bhi.n	8008cd4 <__multiply+0x108>
 8008d08:	9a01      	ldr	r2, [sp, #4]
 8008d0a:	50a9      	str	r1, [r5, r2]
 8008d0c:	3504      	adds	r5, #4
 8008d0e:	e79a      	b.n	8008c46 <__multiply+0x7a>
 8008d10:	3e01      	subs	r6, #1
 8008d12:	e79c      	b.n	8008c4e <__multiply+0x82>
 8008d14:	08009c57 	.word	0x08009c57
 8008d18:	08009cc8 	.word	0x08009cc8

08008d1c <__pow5mult>:
 8008d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	4615      	mov	r5, r2
 8008d22:	f012 0203 	ands.w	r2, r2, #3
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	d007      	beq.n	8008d3c <__pow5mult+0x20>
 8008d2c:	4c25      	ldr	r4, [pc, #148]	; (8008dc4 <__pow5mult+0xa8>)
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	2300      	movs	r3, #0
 8008d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d36:	f7ff fe55 	bl	80089e4 <__multadd>
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	10ad      	asrs	r5, r5, #2
 8008d3e:	d03d      	beq.n	8008dbc <__pow5mult+0xa0>
 8008d40:	69f4      	ldr	r4, [r6, #28]
 8008d42:	b97c      	cbnz	r4, 8008d64 <__pow5mult+0x48>
 8008d44:	2010      	movs	r0, #16
 8008d46:	f7ff fd25 	bl	8008794 <malloc>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	61f0      	str	r0, [r6, #28]
 8008d4e:	b928      	cbnz	r0, 8008d5c <__pow5mult+0x40>
 8008d50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d54:	4b1c      	ldr	r3, [pc, #112]	; (8008dc8 <__pow5mult+0xac>)
 8008d56:	481d      	ldr	r0, [pc, #116]	; (8008dcc <__pow5mult+0xb0>)
 8008d58:	f7fe faec 	bl	8007334 <__assert_func>
 8008d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d60:	6004      	str	r4, [r0, #0]
 8008d62:	60c4      	str	r4, [r0, #12]
 8008d64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d6c:	b94c      	cbnz	r4, 8008d82 <__pow5mult+0x66>
 8008d6e:	f240 2171 	movw	r1, #625	; 0x271
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ff14 	bl	8008ba0 <__i2b>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	07eb      	lsls	r3, r5, #31
 8008d88:	d50a      	bpl.n	8008da0 <__pow5mult+0x84>
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ff1c 	bl	8008bcc <__multiply>
 8008d94:	4680      	mov	r8, r0
 8008d96:	4639      	mov	r1, r7
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fe01 	bl	80089a0 <_Bfree>
 8008d9e:	4647      	mov	r7, r8
 8008da0:	106d      	asrs	r5, r5, #1
 8008da2:	d00b      	beq.n	8008dbc <__pow5mult+0xa0>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	b938      	cbnz	r0, 8008db8 <__pow5mult+0x9c>
 8008da8:	4622      	mov	r2, r4
 8008daa:	4621      	mov	r1, r4
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ff0d 	bl	8008bcc <__multiply>
 8008db2:	6020      	str	r0, [r4, #0]
 8008db4:	f8c0 9000 	str.w	r9, [r0]
 8008db8:	4604      	mov	r4, r0
 8008dba:	e7e4      	b.n	8008d86 <__pow5mult+0x6a>
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	bf00      	nop
 8008dc4:	08009e18 	.word	0x08009e18
 8008dc8:	08009b3d 	.word	0x08009b3d
 8008dcc:	08009cc8 	.word	0x08009cc8

08008dd0 <__lshift>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	4691      	mov	r9, r2
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	6849      	ldr	r1, [r1, #4]
 8008dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008de8:	f108 0601 	add.w	r6, r8, #1
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	db0b      	blt.n	8008e08 <__lshift+0x38>
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff fd95 	bl	8008920 <_Balloc>
 8008df6:	4605      	mov	r5, r0
 8008df8:	b948      	cbnz	r0, 8008e0e <__lshift+0x3e>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e00:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <__lshift+0xd0>)
 8008e02:	4828      	ldr	r0, [pc, #160]	; (8008ea4 <__lshift+0xd4>)
 8008e04:	f7fe fa96 	bl	8007334 <__assert_func>
 8008e08:	3101      	adds	r1, #1
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	e7ee      	b.n	8008dec <__lshift+0x1c>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f100 0114 	add.w	r1, r0, #20
 8008e14:	f100 0210 	add.w	r2, r0, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4553      	cmp	r3, sl
 8008e1c:	db33      	blt.n	8008e86 <__lshift+0xb6>
 8008e1e:	6920      	ldr	r0, [r4, #16]
 8008e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e24:	f104 0314 	add.w	r3, r4, #20
 8008e28:	f019 091f 	ands.w	r9, r9, #31
 8008e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e34:	d02b      	beq.n	8008e8e <__lshift+0xbe>
 8008e36:	468a      	mov	sl, r1
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	fa00 f009 	lsl.w	r0, r0, r9
 8008e44:	4310      	orrs	r0, r2
 8008e46:	f84a 0b04 	str.w	r0, [sl], #4
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	459c      	cmp	ip, r3
 8008e50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e54:	d8f3      	bhi.n	8008e3e <__lshift+0x6e>
 8008e56:	ebac 0304 	sub.w	r3, ip, r4
 8008e5a:	3b15      	subs	r3, #21
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	3304      	adds	r3, #4
 8008e62:	f104 0015 	add.w	r0, r4, #21
 8008e66:	4584      	cmp	ip, r0
 8008e68:	bf38      	it	cc
 8008e6a:	2304      	movcc	r3, #4
 8008e6c:	50ca      	str	r2, [r1, r3]
 8008e6e:	b10a      	cbz	r2, 8008e74 <__lshift+0xa4>
 8008e70:	f108 0602 	add.w	r6, r8, #2
 8008e74:	3e01      	subs	r6, #1
 8008e76:	4638      	mov	r0, r7
 8008e78:	4621      	mov	r1, r4
 8008e7a:	612e      	str	r6, [r5, #16]
 8008e7c:	f7ff fd90 	bl	80089a0 <_Bfree>
 8008e80:	4628      	mov	r0, r5
 8008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	e7c5      	b.n	8008e1a <__lshift+0x4a>
 8008e8e:	3904      	subs	r1, #4
 8008e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e94:	459c      	cmp	ip, r3
 8008e96:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e9a:	d8f9      	bhi.n	8008e90 <__lshift+0xc0>
 8008e9c:	e7ea      	b.n	8008e74 <__lshift+0xa4>
 8008e9e:	bf00      	nop
 8008ea0:	08009c57 	.word	0x08009c57
 8008ea4:	08009cc8 	.word	0x08009cc8

08008ea8 <__mcmp>:
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	690a      	ldr	r2, [r1, #16]
 8008eac:	6900      	ldr	r0, [r0, #16]
 8008eae:	b530      	push	{r4, r5, lr}
 8008eb0:	1a80      	subs	r0, r0, r2
 8008eb2:	d10d      	bne.n	8008ed0 <__mcmp+0x28>
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	3114      	adds	r1, #20
 8008eb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ebc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ec0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ec4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ec8:	4295      	cmp	r5, r2
 8008eca:	d002      	beq.n	8008ed2 <__mcmp+0x2a>
 8008ecc:	d304      	bcc.n	8008ed8 <__mcmp+0x30>
 8008ece:	2001      	movs	r0, #1
 8008ed0:	bd30      	pop	{r4, r5, pc}
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	d3f4      	bcc.n	8008ec0 <__mcmp+0x18>
 8008ed6:	e7fb      	b.n	8008ed0 <__mcmp+0x28>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e7f8      	b.n	8008ed0 <__mcmp+0x28>
	...

08008ee0 <__mdiff>:
 8008ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4628      	mov	r0, r5
 8008eec:	4614      	mov	r4, r2
 8008eee:	f7ff ffdb 	bl	8008ea8 <__mcmp>
 8008ef2:	1e06      	subs	r6, r0, #0
 8008ef4:	d111      	bne.n	8008f1a <__mdiff+0x3a>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff fd11 	bl	8008920 <_Balloc>
 8008efe:	4602      	mov	r2, r0
 8008f00:	b928      	cbnz	r0, 8008f0e <__mdiff+0x2e>
 8008f02:	f240 2137 	movw	r1, #567	; 0x237
 8008f06:	4b3a      	ldr	r3, [pc, #232]	; (8008ff0 <__mdiff+0x110>)
 8008f08:	483a      	ldr	r0, [pc, #232]	; (8008ff4 <__mdiff+0x114>)
 8008f0a:	f7fe fa13 	bl	8007334 <__assert_func>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f14:	4610      	mov	r0, r2
 8008f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	bfa4      	itt	ge
 8008f1c:	4623      	movge	r3, r4
 8008f1e:	462c      	movge	r4, r5
 8008f20:	4638      	mov	r0, r7
 8008f22:	6861      	ldr	r1, [r4, #4]
 8008f24:	bfa6      	itte	ge
 8008f26:	461d      	movge	r5, r3
 8008f28:	2600      	movge	r6, #0
 8008f2a:	2601      	movlt	r6, #1
 8008f2c:	f7ff fcf8 	bl	8008920 <_Balloc>
 8008f30:	4602      	mov	r2, r0
 8008f32:	b918      	cbnz	r0, 8008f3c <__mdiff+0x5c>
 8008f34:	f240 2145 	movw	r1, #581	; 0x245
 8008f38:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <__mdiff+0x110>)
 8008f3a:	e7e5      	b.n	8008f08 <__mdiff+0x28>
 8008f3c:	f102 0814 	add.w	r8, r2, #20
 8008f40:	46c2      	mov	sl, r8
 8008f42:	f04f 0c00 	mov.w	ip, #0
 8008f46:	6927      	ldr	r7, [r4, #16]
 8008f48:	60c6      	str	r6, [r0, #12]
 8008f4a:	692e      	ldr	r6, [r5, #16]
 8008f4c:	f104 0014 	add.w	r0, r4, #20
 8008f50:	f105 0914 	add.w	r9, r5, #20
 8008f54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f5c:	3410      	adds	r4, #16
 8008f5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008f62:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f66:	fa1f f18b 	uxth.w	r1, fp
 8008f6a:	4461      	add	r1, ip
 8008f6c:	fa1f fc83 	uxth.w	ip, r3
 8008f70:	0c1b      	lsrs	r3, r3, #16
 8008f72:	eba1 010c 	sub.w	r1, r1, ip
 8008f76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008f7e:	b289      	uxth	r1, r1
 8008f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f84:	454e      	cmp	r6, r9
 8008f86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008f8a:	f84a 1b04 	str.w	r1, [sl], #4
 8008f8e:	d8e6      	bhi.n	8008f5e <__mdiff+0x7e>
 8008f90:	1b73      	subs	r3, r6, r5
 8008f92:	3b15      	subs	r3, #21
 8008f94:	f023 0303 	bic.w	r3, r3, #3
 8008f98:	3515      	adds	r5, #21
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	42ae      	cmp	r6, r5
 8008f9e:	bf38      	it	cc
 8008fa0:	2304      	movcc	r3, #4
 8008fa2:	4418      	add	r0, r3
 8008fa4:	4443      	add	r3, r8
 8008fa6:	461e      	mov	r6, r3
 8008fa8:	4605      	mov	r5, r0
 8008faa:	4575      	cmp	r5, lr
 8008fac:	d30e      	bcc.n	8008fcc <__mdiff+0xec>
 8008fae:	f10e 0103 	add.w	r1, lr, #3
 8008fb2:	1a09      	subs	r1, r1, r0
 8008fb4:	f021 0103 	bic.w	r1, r1, #3
 8008fb8:	3803      	subs	r0, #3
 8008fba:	4586      	cmp	lr, r0
 8008fbc:	bf38      	it	cc
 8008fbe:	2100      	movcc	r1, #0
 8008fc0:	440b      	add	r3, r1
 8008fc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fc6:	b189      	cbz	r1, 8008fec <__mdiff+0x10c>
 8008fc8:	6117      	str	r7, [r2, #16]
 8008fca:	e7a3      	b.n	8008f14 <__mdiff+0x34>
 8008fcc:	f855 8b04 	ldr.w	r8, [r5], #4
 8008fd0:	fa1f f188 	uxth.w	r1, r8
 8008fd4:	4461      	add	r1, ip
 8008fd6:	140c      	asrs	r4, r1, #16
 8008fd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fdc:	b289      	uxth	r1, r1
 8008fde:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008fe2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008fe6:	f846 1b04 	str.w	r1, [r6], #4
 8008fea:	e7de      	b.n	8008faa <__mdiff+0xca>
 8008fec:	3f01      	subs	r7, #1
 8008fee:	e7e8      	b.n	8008fc2 <__mdiff+0xe2>
 8008ff0:	08009c57 	.word	0x08009c57
 8008ff4:	08009cc8 	.word	0x08009cc8

08008ff8 <__ulp>:
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <__ulp+0x3c>)
 8008ffa:	400b      	ands	r3, r1
 8008ffc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc08      	bgt.n	8009016 <__ulp+0x1e>
 8009004:	425b      	negs	r3, r3
 8009006:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800900a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800900e:	da04      	bge.n	800901a <__ulp+0x22>
 8009010:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009014:	4113      	asrs	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	e008      	b.n	800902c <__ulp+0x34>
 800901a:	f1a2 0314 	sub.w	r3, r2, #20
 800901e:	2b1e      	cmp	r3, #30
 8009020:	bfd6      	itet	le
 8009022:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009026:	2201      	movgt	r2, #1
 8009028:	40da      	lsrle	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	7ff00000 	.word	0x7ff00000

08009038 <__b2d>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	6905      	ldr	r5, [r0, #16]
 800903c:	f100 0714 	add.w	r7, r0, #20
 8009040:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009044:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009048:	1f2e      	subs	r6, r5, #4
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff fd5a 	bl	8008b04 <__hi0bits>
 8009050:	f1c0 0220 	rsb	r2, r0, #32
 8009054:	280a      	cmp	r0, #10
 8009056:	4603      	mov	r3, r0
 8009058:	f8df c068 	ldr.w	ip, [pc, #104]	; 80090c4 <__b2d+0x8c>
 800905c:	600a      	str	r2, [r1, #0]
 800905e:	dc12      	bgt.n	8009086 <__b2d+0x4e>
 8009060:	f1c0 0e0b 	rsb	lr, r0, #11
 8009064:	fa24 f20e 	lsr.w	r2, r4, lr
 8009068:	42b7      	cmp	r7, r6
 800906a:	ea42 010c 	orr.w	r1, r2, ip
 800906e:	bf2c      	ite	cs
 8009070:	2200      	movcs	r2, #0
 8009072:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009076:	3315      	adds	r3, #21
 8009078:	fa04 f303 	lsl.w	r3, r4, r3
 800907c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009080:	431a      	orrs	r2, r3
 8009082:	4610      	mov	r0, r2
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009086:	42b7      	cmp	r7, r6
 8009088:	bf2e      	itee	cs
 800908a:	2200      	movcs	r2, #0
 800908c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009090:	f1a5 0608 	subcc.w	r6, r5, #8
 8009094:	3b0b      	subs	r3, #11
 8009096:	d012      	beq.n	80090be <__b2d+0x86>
 8009098:	f1c3 0520 	rsb	r5, r3, #32
 800909c:	fa22 f105 	lsr.w	r1, r2, r5
 80090a0:	409c      	lsls	r4, r3
 80090a2:	430c      	orrs	r4, r1
 80090a4:	42be      	cmp	r6, r7
 80090a6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80090aa:	bf94      	ite	ls
 80090ac:	2400      	movls	r4, #0
 80090ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80090b2:	409a      	lsls	r2, r3
 80090b4:	40ec      	lsrs	r4, r5
 80090b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80090ba:	4322      	orrs	r2, r4
 80090bc:	e7e1      	b.n	8009082 <__b2d+0x4a>
 80090be:	ea44 010c 	orr.w	r1, r4, ip
 80090c2:	e7de      	b.n	8009082 <__b2d+0x4a>
 80090c4:	3ff00000 	.word	0x3ff00000

080090c8 <__d2b>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	2101      	movs	r1, #1
 80090cc:	4617      	mov	r7, r2
 80090ce:	461c      	mov	r4, r3
 80090d0:	9e08      	ldr	r6, [sp, #32]
 80090d2:	f7ff fc25 	bl	8008920 <_Balloc>
 80090d6:	4605      	mov	r5, r0
 80090d8:	b930      	cbnz	r0, 80090e8 <__d2b+0x20>
 80090da:	4602      	mov	r2, r0
 80090dc:	f240 310f 	movw	r1, #783	; 0x30f
 80090e0:	4b22      	ldr	r3, [pc, #136]	; (800916c <__d2b+0xa4>)
 80090e2:	4823      	ldr	r0, [pc, #140]	; (8009170 <__d2b+0xa8>)
 80090e4:	f7fe f926 	bl	8007334 <__assert_func>
 80090e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80090ec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80090f0:	bb24      	cbnz	r4, 800913c <__d2b+0x74>
 80090f2:	2f00      	cmp	r7, #0
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	d026      	beq.n	8009146 <__d2b+0x7e>
 80090f8:	4668      	mov	r0, sp
 80090fa:	9700      	str	r7, [sp, #0]
 80090fc:	f7ff fd22 	bl	8008b44 <__lo0bits>
 8009100:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009104:	b1e8      	cbz	r0, 8009142 <__d2b+0x7a>
 8009106:	f1c0 0320 	rsb	r3, r0, #32
 800910a:	fa02 f303 	lsl.w	r3, r2, r3
 800910e:	430b      	orrs	r3, r1
 8009110:	40c2      	lsrs	r2, r0
 8009112:	616b      	str	r3, [r5, #20]
 8009114:	9201      	str	r2, [sp, #4]
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf14      	ite	ne
 800911c:	2102      	movne	r1, #2
 800911e:	2101      	moveq	r1, #1
 8009120:	61ab      	str	r3, [r5, #24]
 8009122:	6129      	str	r1, [r5, #16]
 8009124:	b1bc      	cbz	r4, 8009156 <__d2b+0x8e>
 8009126:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800912a:	4404      	add	r4, r0
 800912c:	6034      	str	r4, [r6, #0]
 800912e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009134:	6018      	str	r0, [r3, #0]
 8009136:	4628      	mov	r0, r5
 8009138:	b003      	add	sp, #12
 800913a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009140:	e7d7      	b.n	80090f2 <__d2b+0x2a>
 8009142:	6169      	str	r1, [r5, #20]
 8009144:	e7e7      	b.n	8009116 <__d2b+0x4e>
 8009146:	a801      	add	r0, sp, #4
 8009148:	f7ff fcfc 	bl	8008b44 <__lo0bits>
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	2101      	movs	r1, #1
 8009150:	616b      	str	r3, [r5, #20]
 8009152:	3020      	adds	r0, #32
 8009154:	e7e5      	b.n	8009122 <__d2b+0x5a>
 8009156:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800915a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800915e:	6030      	str	r0, [r6, #0]
 8009160:	6918      	ldr	r0, [r3, #16]
 8009162:	f7ff fccf 	bl	8008b04 <__hi0bits>
 8009166:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800916a:	e7e2      	b.n	8009132 <__d2b+0x6a>
 800916c:	08009c57 	.word	0x08009c57
 8009170:	08009cc8 	.word	0x08009cc8

08009174 <__ratio>:
 8009174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	4688      	mov	r8, r1
 800917a:	4669      	mov	r1, sp
 800917c:	4681      	mov	r9, r0
 800917e:	f7ff ff5b 	bl	8009038 <__b2d>
 8009182:	460f      	mov	r7, r1
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	4640      	mov	r0, r8
 800918a:	a901      	add	r1, sp, #4
 800918c:	f7ff ff54 	bl	8009038 <__b2d>
 8009190:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009194:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009198:	468b      	mov	fp, r1
 800919a:	eba3 0c02 	sub.w	ip, r3, r2
 800919e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfd5      	itete	le
 80091ac:	460a      	movle	r2, r1
 80091ae:	462a      	movgt	r2, r5
 80091b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091b4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091b8:	bfd8      	it	le
 80091ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80091be:	465b      	mov	r3, fp
 80091c0:	4602      	mov	r2, r0
 80091c2:	4639      	mov	r1, r7
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7f7 fabb 	bl	8000740 <__aeabi_ddiv>
 80091ca:	b003      	add	sp, #12
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091d0 <__copybits>:
 80091d0:	3901      	subs	r1, #1
 80091d2:	b570      	push	{r4, r5, r6, lr}
 80091d4:	1149      	asrs	r1, r1, #5
 80091d6:	6914      	ldr	r4, [r2, #16]
 80091d8:	3101      	adds	r1, #1
 80091da:	f102 0314 	add.w	r3, r2, #20
 80091de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091e6:	1f05      	subs	r5, r0, #4
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d30c      	bcc.n	8009206 <__copybits+0x36>
 80091ec:	1aa3      	subs	r3, r4, r2
 80091ee:	3b11      	subs	r3, #17
 80091f0:	f023 0303 	bic.w	r3, r3, #3
 80091f4:	3211      	adds	r2, #17
 80091f6:	42a2      	cmp	r2, r4
 80091f8:	bf88      	it	hi
 80091fa:	2300      	movhi	r3, #0
 80091fc:	4418      	add	r0, r3
 80091fe:	2300      	movs	r3, #0
 8009200:	4288      	cmp	r0, r1
 8009202:	d305      	bcc.n	8009210 <__copybits+0x40>
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	f853 6b04 	ldr.w	r6, [r3], #4
 800920a:	f845 6f04 	str.w	r6, [r5, #4]!
 800920e:	e7eb      	b.n	80091e8 <__copybits+0x18>
 8009210:	f840 3b04 	str.w	r3, [r0], #4
 8009214:	e7f4      	b.n	8009200 <__copybits+0x30>

08009216 <__any_on>:
 8009216:	f100 0214 	add.w	r2, r0, #20
 800921a:	6900      	ldr	r0, [r0, #16]
 800921c:	114b      	asrs	r3, r1, #5
 800921e:	4298      	cmp	r0, r3
 8009220:	b510      	push	{r4, lr}
 8009222:	db11      	blt.n	8009248 <__any_on+0x32>
 8009224:	dd0a      	ble.n	800923c <__any_on+0x26>
 8009226:	f011 011f 	ands.w	r1, r1, #31
 800922a:	d007      	beq.n	800923c <__any_on+0x26>
 800922c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009230:	fa24 f001 	lsr.w	r0, r4, r1
 8009234:	fa00 f101 	lsl.w	r1, r0, r1
 8009238:	428c      	cmp	r4, r1
 800923a:	d10b      	bne.n	8009254 <__any_on+0x3e>
 800923c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009240:	4293      	cmp	r3, r2
 8009242:	d803      	bhi.n	800924c <__any_on+0x36>
 8009244:	2000      	movs	r0, #0
 8009246:	bd10      	pop	{r4, pc}
 8009248:	4603      	mov	r3, r0
 800924a:	e7f7      	b.n	800923c <__any_on+0x26>
 800924c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009250:	2900      	cmp	r1, #0
 8009252:	d0f5      	beq.n	8009240 <__any_on+0x2a>
 8009254:	2001      	movs	r0, #1
 8009256:	e7f6      	b.n	8009246 <__any_on+0x30>

08009258 <__ascii_wctomb>:
 8009258:	4603      	mov	r3, r0
 800925a:	4608      	mov	r0, r1
 800925c:	b141      	cbz	r1, 8009270 <__ascii_wctomb+0x18>
 800925e:	2aff      	cmp	r2, #255	; 0xff
 8009260:	d904      	bls.n	800926c <__ascii_wctomb+0x14>
 8009262:	228a      	movs	r2, #138	; 0x8a
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	4770      	bx	lr
 800926c:	2001      	movs	r0, #1
 800926e:	700a      	strb	r2, [r1, #0]
 8009270:	4770      	bx	lr

08009272 <__sfputc_r>:
 8009272:	6893      	ldr	r3, [r2, #8]
 8009274:	b410      	push	{r4}
 8009276:	3b01      	subs	r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	6093      	str	r3, [r2, #8]
 800927c:	da07      	bge.n	800928e <__sfputc_r+0x1c>
 800927e:	6994      	ldr	r4, [r2, #24]
 8009280:	42a3      	cmp	r3, r4
 8009282:	db01      	blt.n	8009288 <__sfputc_r+0x16>
 8009284:	290a      	cmp	r1, #10
 8009286:	d102      	bne.n	800928e <__sfputc_r+0x1c>
 8009288:	bc10      	pop	{r4}
 800928a:	f7fd be84 	b.w	8006f96 <__swbuf_r>
 800928e:	6813      	ldr	r3, [r2, #0]
 8009290:	1c58      	adds	r0, r3, #1
 8009292:	6010      	str	r0, [r2, #0]
 8009294:	7019      	strb	r1, [r3, #0]
 8009296:	4608      	mov	r0, r1
 8009298:	bc10      	pop	{r4}
 800929a:	4770      	bx	lr

0800929c <__sfputs_r>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	4606      	mov	r6, r0
 80092a0:	460f      	mov	r7, r1
 80092a2:	4614      	mov	r4, r2
 80092a4:	18d5      	adds	r5, r2, r3
 80092a6:	42ac      	cmp	r4, r5
 80092a8:	d101      	bne.n	80092ae <__sfputs_r+0x12>
 80092aa:	2000      	movs	r0, #0
 80092ac:	e007      	b.n	80092be <__sfputs_r+0x22>
 80092ae:	463a      	mov	r2, r7
 80092b0:	4630      	mov	r0, r6
 80092b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b6:	f7ff ffdc 	bl	8009272 <__sfputc_r>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	d1f3      	bne.n	80092a6 <__sfputs_r+0xa>
 80092be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092c0 <_vfiprintf_r>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	460d      	mov	r5, r1
 80092c6:	4614      	mov	r4, r2
 80092c8:	4698      	mov	r8, r3
 80092ca:	4606      	mov	r6, r0
 80092cc:	b09d      	sub	sp, #116	; 0x74
 80092ce:	b118      	cbz	r0, 80092d8 <_vfiprintf_r+0x18>
 80092d0:	6a03      	ldr	r3, [r0, #32]
 80092d2:	b90b      	cbnz	r3, 80092d8 <_vfiprintf_r+0x18>
 80092d4:	f7fd fcca 	bl	8006c6c <__sinit>
 80092d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092da:	07d9      	lsls	r1, r3, #31
 80092dc:	d405      	bmi.n	80092ea <_vfiprintf_r+0x2a>
 80092de:	89ab      	ldrh	r3, [r5, #12]
 80092e0:	059a      	lsls	r2, r3, #22
 80092e2:	d402      	bmi.n	80092ea <_vfiprintf_r+0x2a>
 80092e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092e6:	f7fe f800 	bl	80072ea <__retarget_lock_acquire_recursive>
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	071b      	lsls	r3, r3, #28
 80092ee:	d501      	bpl.n	80092f4 <_vfiprintf_r+0x34>
 80092f0:	692b      	ldr	r3, [r5, #16]
 80092f2:	b99b      	cbnz	r3, 800931c <_vfiprintf_r+0x5c>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7fd fe8a 	bl	8007010 <__swsetup_r>
 80092fc:	b170      	cbz	r0, 800931c <_vfiprintf_r+0x5c>
 80092fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009300:	07dc      	lsls	r4, r3, #31
 8009302:	d504      	bpl.n	800930e <_vfiprintf_r+0x4e>
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	b01d      	add	sp, #116	; 0x74
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	0598      	lsls	r0, r3, #22
 8009312:	d4f7      	bmi.n	8009304 <_vfiprintf_r+0x44>
 8009314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009316:	f7fd ffe9 	bl	80072ec <__retarget_lock_release_recursive>
 800931a:	e7f3      	b.n	8009304 <_vfiprintf_r+0x44>
 800931c:	2300      	movs	r3, #0
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	2320      	movs	r3, #32
 8009322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009326:	2330      	movs	r3, #48	; 0x30
 8009328:	f04f 0901 	mov.w	r9, #1
 800932c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009330:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80094e0 <_vfiprintf_r+0x220>
 8009334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009338:	4623      	mov	r3, r4
 800933a:	469a      	mov	sl, r3
 800933c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009340:	b10a      	cbz	r2, 8009346 <_vfiprintf_r+0x86>
 8009342:	2a25      	cmp	r2, #37	; 0x25
 8009344:	d1f9      	bne.n	800933a <_vfiprintf_r+0x7a>
 8009346:	ebba 0b04 	subs.w	fp, sl, r4
 800934a:	d00b      	beq.n	8009364 <_vfiprintf_r+0xa4>
 800934c:	465b      	mov	r3, fp
 800934e:	4622      	mov	r2, r4
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ffa2 	bl	800929c <__sfputs_r>
 8009358:	3001      	adds	r0, #1
 800935a:	f000 80a9 	beq.w	80094b0 <_vfiprintf_r+0x1f0>
 800935e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009360:	445a      	add	r2, fp
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	f89a 3000 	ldrb.w	r3, [sl]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80a1 	beq.w	80094b0 <_vfiprintf_r+0x1f0>
 800936e:	2300      	movs	r3, #0
 8009370:	f04f 32ff 	mov.w	r2, #4294967295
 8009374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009384:	931a      	str	r3, [sp, #104]	; 0x68
 8009386:	4654      	mov	r4, sl
 8009388:	2205      	movs	r2, #5
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4854      	ldr	r0, [pc, #336]	; (80094e0 <_vfiprintf_r+0x220>)
 8009390:	f7fd ffad 	bl	80072ee <memchr>
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	b9d8      	cbnz	r0, 80093d0 <_vfiprintf_r+0x110>
 8009398:	06d1      	lsls	r1, r2, #27
 800939a:	bf44      	itt	mi
 800939c:	2320      	movmi	r3, #32
 800939e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a2:	0713      	lsls	r3, r2, #28
 80093a4:	bf44      	itt	mi
 80093a6:	232b      	movmi	r3, #43	; 0x2b
 80093a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ac:	f89a 3000 	ldrb.w	r3, [sl]
 80093b0:	2b2a      	cmp	r3, #42	; 0x2a
 80093b2:	d015      	beq.n	80093e0 <_vfiprintf_r+0x120>
 80093b4:	4654      	mov	r4, sl
 80093b6:	2000      	movs	r0, #0
 80093b8:	f04f 0c0a 	mov.w	ip, #10
 80093bc:	9a07      	ldr	r2, [sp, #28]
 80093be:	4621      	mov	r1, r4
 80093c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c4:	3b30      	subs	r3, #48	; 0x30
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d94d      	bls.n	8009466 <_vfiprintf_r+0x1a6>
 80093ca:	b1b0      	cbz	r0, 80093fa <_vfiprintf_r+0x13a>
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	e014      	b.n	80093fa <_vfiprintf_r+0x13a>
 80093d0:	eba0 0308 	sub.w	r3, r0, r8
 80093d4:	fa09 f303 	lsl.w	r3, r9, r3
 80093d8:	4313      	orrs	r3, r2
 80093da:	46a2      	mov	sl, r4
 80093dc:	9304      	str	r3, [sp, #16]
 80093de:	e7d2      	b.n	8009386 <_vfiprintf_r+0xc6>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	1d19      	adds	r1, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9103      	str	r1, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfbb      	ittet	lt
 80093ec:	425b      	neglt	r3, r3
 80093ee:	f042 0202 	orrlt.w	r2, r2, #2
 80093f2:	9307      	strge	r3, [sp, #28]
 80093f4:	9307      	strlt	r3, [sp, #28]
 80093f6:	bfb8      	it	lt
 80093f8:	9204      	strlt	r2, [sp, #16]
 80093fa:	7823      	ldrb	r3, [r4, #0]
 80093fc:	2b2e      	cmp	r3, #46	; 0x2e
 80093fe:	d10c      	bne.n	800941a <_vfiprintf_r+0x15a>
 8009400:	7863      	ldrb	r3, [r4, #1]
 8009402:	2b2a      	cmp	r3, #42	; 0x2a
 8009404:	d134      	bne.n	8009470 <_vfiprintf_r+0x1b0>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	3402      	adds	r4, #2
 800940a:	1d1a      	adds	r2, r3, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	9203      	str	r2, [sp, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfb8      	it	lt
 8009414:	f04f 33ff 	movlt.w	r3, #4294967295
 8009418:	9305      	str	r3, [sp, #20]
 800941a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094e4 <_vfiprintf_r+0x224>
 800941e:	2203      	movs	r2, #3
 8009420:	4650      	mov	r0, sl
 8009422:	7821      	ldrb	r1, [r4, #0]
 8009424:	f7fd ff63 	bl	80072ee <memchr>
 8009428:	b138      	cbz	r0, 800943a <_vfiprintf_r+0x17a>
 800942a:	2240      	movs	r2, #64	; 0x40
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	eba0 000a 	sub.w	r0, r0, sl
 8009432:	4082      	lsls	r2, r0
 8009434:	4313      	orrs	r3, r2
 8009436:	3401      	adds	r4, #1
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943e:	2206      	movs	r2, #6
 8009440:	4829      	ldr	r0, [pc, #164]	; (80094e8 <_vfiprintf_r+0x228>)
 8009442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009446:	f7fd ff52 	bl	80072ee <memchr>
 800944a:	2800      	cmp	r0, #0
 800944c:	d03f      	beq.n	80094ce <_vfiprintf_r+0x20e>
 800944e:	4b27      	ldr	r3, [pc, #156]	; (80094ec <_vfiprintf_r+0x22c>)
 8009450:	bb1b      	cbnz	r3, 800949a <_vfiprintf_r+0x1da>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	3307      	adds	r3, #7
 8009456:	f023 0307 	bic.w	r3, r3, #7
 800945a:	3308      	adds	r3, #8
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009460:	443b      	add	r3, r7
 8009462:	9309      	str	r3, [sp, #36]	; 0x24
 8009464:	e768      	b.n	8009338 <_vfiprintf_r+0x78>
 8009466:	460c      	mov	r4, r1
 8009468:	2001      	movs	r0, #1
 800946a:	fb0c 3202 	mla	r2, ip, r2, r3
 800946e:	e7a6      	b.n	80093be <_vfiprintf_r+0xfe>
 8009470:	2300      	movs	r3, #0
 8009472:	f04f 0c0a 	mov.w	ip, #10
 8009476:	4619      	mov	r1, r3
 8009478:	3401      	adds	r4, #1
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	4620      	mov	r0, r4
 800947e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009482:	3a30      	subs	r2, #48	; 0x30
 8009484:	2a09      	cmp	r2, #9
 8009486:	d903      	bls.n	8009490 <_vfiprintf_r+0x1d0>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d0c6      	beq.n	800941a <_vfiprintf_r+0x15a>
 800948c:	9105      	str	r1, [sp, #20]
 800948e:	e7c4      	b.n	800941a <_vfiprintf_r+0x15a>
 8009490:	4604      	mov	r4, r0
 8009492:	2301      	movs	r3, #1
 8009494:	fb0c 2101 	mla	r1, ip, r1, r2
 8009498:	e7f0      	b.n	800947c <_vfiprintf_r+0x1bc>
 800949a:	ab03      	add	r3, sp, #12
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	462a      	mov	r2, r5
 80094a0:	4630      	mov	r0, r6
 80094a2:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <_vfiprintf_r+0x230>)
 80094a4:	a904      	add	r1, sp, #16
 80094a6:	f7fc ff93 	bl	80063d0 <_printf_float>
 80094aa:	4607      	mov	r7, r0
 80094ac:	1c78      	adds	r0, r7, #1
 80094ae:	d1d6      	bne.n	800945e <_vfiprintf_r+0x19e>
 80094b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b2:	07d9      	lsls	r1, r3, #31
 80094b4:	d405      	bmi.n	80094c2 <_vfiprintf_r+0x202>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	059a      	lsls	r2, r3, #22
 80094ba:	d402      	bmi.n	80094c2 <_vfiprintf_r+0x202>
 80094bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094be:	f7fd ff15 	bl	80072ec <__retarget_lock_release_recursive>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	065b      	lsls	r3, r3, #25
 80094c6:	f53f af1d 	bmi.w	8009304 <_vfiprintf_r+0x44>
 80094ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094cc:	e71c      	b.n	8009308 <_vfiprintf_r+0x48>
 80094ce:	ab03      	add	r3, sp, #12
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	462a      	mov	r2, r5
 80094d4:	4630      	mov	r0, r6
 80094d6:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <_vfiprintf_r+0x230>)
 80094d8:	a904      	add	r1, sp, #16
 80094da:	f7fd fa19 	bl	8006910 <_printf_i>
 80094de:	e7e4      	b.n	80094aa <_vfiprintf_r+0x1ea>
 80094e0:	08009e24 	.word	0x08009e24
 80094e4:	08009e2a 	.word	0x08009e2a
 80094e8:	08009e2e 	.word	0x08009e2e
 80094ec:	080063d1 	.word	0x080063d1
 80094f0:	0800929d 	.word	0x0800929d

080094f4 <__sflush_r>:
 80094f4:	898a      	ldrh	r2, [r1, #12]
 80094f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f8:	4605      	mov	r5, r0
 80094fa:	0710      	lsls	r0, r2, #28
 80094fc:	460c      	mov	r4, r1
 80094fe:	d457      	bmi.n	80095b0 <__sflush_r+0xbc>
 8009500:	684b      	ldr	r3, [r1, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	dc04      	bgt.n	8009510 <__sflush_r+0x1c>
 8009506:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	dc01      	bgt.n	8009510 <__sflush_r+0x1c>
 800950c:	2000      	movs	r0, #0
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009512:	2e00      	cmp	r6, #0
 8009514:	d0fa      	beq.n	800950c <__sflush_r+0x18>
 8009516:	2300      	movs	r3, #0
 8009518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800951c:	682f      	ldr	r7, [r5, #0]
 800951e:	6a21      	ldr	r1, [r4, #32]
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	d032      	beq.n	800958a <__sflush_r+0x96>
 8009524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	075a      	lsls	r2, r3, #29
 800952a:	d505      	bpl.n	8009538 <__sflush_r+0x44>
 800952c:	6863      	ldr	r3, [r4, #4]
 800952e:	1ac0      	subs	r0, r0, r3
 8009530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009532:	b10b      	cbz	r3, 8009538 <__sflush_r+0x44>
 8009534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009536:	1ac0      	subs	r0, r0, r3
 8009538:	2300      	movs	r3, #0
 800953a:	4602      	mov	r2, r0
 800953c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800953e:	4628      	mov	r0, r5
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	47b0      	blx	r6
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	d106      	bne.n	8009558 <__sflush_r+0x64>
 800954a:	6829      	ldr	r1, [r5, #0]
 800954c:	291d      	cmp	r1, #29
 800954e:	d82b      	bhi.n	80095a8 <__sflush_r+0xb4>
 8009550:	4a28      	ldr	r2, [pc, #160]	; (80095f4 <__sflush_r+0x100>)
 8009552:	410a      	asrs	r2, r1
 8009554:	07d6      	lsls	r6, r2, #31
 8009556:	d427      	bmi.n	80095a8 <__sflush_r+0xb4>
 8009558:	2200      	movs	r2, #0
 800955a:	6062      	str	r2, [r4, #4]
 800955c:	6922      	ldr	r2, [r4, #16]
 800955e:	04d9      	lsls	r1, r3, #19
 8009560:	6022      	str	r2, [r4, #0]
 8009562:	d504      	bpl.n	800956e <__sflush_r+0x7a>
 8009564:	1c42      	adds	r2, r0, #1
 8009566:	d101      	bne.n	800956c <__sflush_r+0x78>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b903      	cbnz	r3, 800956e <__sflush_r+0x7a>
 800956c:	6560      	str	r0, [r4, #84]	; 0x54
 800956e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009570:	602f      	str	r7, [r5, #0]
 8009572:	2900      	cmp	r1, #0
 8009574:	d0ca      	beq.n	800950c <__sflush_r+0x18>
 8009576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800957a:	4299      	cmp	r1, r3
 800957c:	d002      	beq.n	8009584 <__sflush_r+0x90>
 800957e:	4628      	mov	r0, r5
 8009580:	f7fe fd66 	bl	8008050 <_free_r>
 8009584:	2000      	movs	r0, #0
 8009586:	6360      	str	r0, [r4, #52]	; 0x34
 8009588:	e7c1      	b.n	800950e <__sflush_r+0x1a>
 800958a:	2301      	movs	r3, #1
 800958c:	4628      	mov	r0, r5
 800958e:	47b0      	blx	r6
 8009590:	1c41      	adds	r1, r0, #1
 8009592:	d1c8      	bne.n	8009526 <__sflush_r+0x32>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0c5      	beq.n	8009526 <__sflush_r+0x32>
 800959a:	2b1d      	cmp	r3, #29
 800959c:	d001      	beq.n	80095a2 <__sflush_r+0xae>
 800959e:	2b16      	cmp	r3, #22
 80095a0:	d101      	bne.n	80095a6 <__sflush_r+0xb2>
 80095a2:	602f      	str	r7, [r5, #0]
 80095a4:	e7b2      	b.n	800950c <__sflush_r+0x18>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	e7ae      	b.n	800950e <__sflush_r+0x1a>
 80095b0:	690f      	ldr	r7, [r1, #16]
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	d0aa      	beq.n	800950c <__sflush_r+0x18>
 80095b6:	0793      	lsls	r3, r2, #30
 80095b8:	bf18      	it	ne
 80095ba:	2300      	movne	r3, #0
 80095bc:	680e      	ldr	r6, [r1, #0]
 80095be:	bf08      	it	eq
 80095c0:	694b      	ldreq	r3, [r1, #20]
 80095c2:	1bf6      	subs	r6, r6, r7
 80095c4:	600f      	str	r7, [r1, #0]
 80095c6:	608b      	str	r3, [r1, #8]
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	dd9f      	ble.n	800950c <__sflush_r+0x18>
 80095cc:	4633      	mov	r3, r6
 80095ce:	463a      	mov	r2, r7
 80095d0:	4628      	mov	r0, r5
 80095d2:	6a21      	ldr	r1, [r4, #32]
 80095d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80095d8:	47e0      	blx	ip
 80095da:	2800      	cmp	r0, #0
 80095dc:	dc06      	bgt.n	80095ec <__sflush_r+0xf8>
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	e790      	b.n	800950e <__sflush_r+0x1a>
 80095ec:	4407      	add	r7, r0
 80095ee:	1a36      	subs	r6, r6, r0
 80095f0:	e7ea      	b.n	80095c8 <__sflush_r+0xd4>
 80095f2:	bf00      	nop
 80095f4:	dfbffffe 	.word	0xdfbffffe

080095f8 <_fflush_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	690b      	ldr	r3, [r1, #16]
 80095fc:	4605      	mov	r5, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	b913      	cbnz	r3, 8009608 <_fflush_r+0x10>
 8009602:	2500      	movs	r5, #0
 8009604:	4628      	mov	r0, r5
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	b118      	cbz	r0, 8009612 <_fflush_r+0x1a>
 800960a:	6a03      	ldr	r3, [r0, #32]
 800960c:	b90b      	cbnz	r3, 8009612 <_fflush_r+0x1a>
 800960e:	f7fd fb2d 	bl	8006c6c <__sinit>
 8009612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f3      	beq.n	8009602 <_fflush_r+0xa>
 800961a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800961c:	07d0      	lsls	r0, r2, #31
 800961e:	d404      	bmi.n	800962a <_fflush_r+0x32>
 8009620:	0599      	lsls	r1, r3, #22
 8009622:	d402      	bmi.n	800962a <_fflush_r+0x32>
 8009624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009626:	f7fd fe60 	bl	80072ea <__retarget_lock_acquire_recursive>
 800962a:	4628      	mov	r0, r5
 800962c:	4621      	mov	r1, r4
 800962e:	f7ff ff61 	bl	80094f4 <__sflush_r>
 8009632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009634:	4605      	mov	r5, r0
 8009636:	07da      	lsls	r2, r3, #31
 8009638:	d4e4      	bmi.n	8009604 <_fflush_r+0xc>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	059b      	lsls	r3, r3, #22
 800963e:	d4e1      	bmi.n	8009604 <_fflush_r+0xc>
 8009640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009642:	f7fd fe53 	bl	80072ec <__retarget_lock_release_recursive>
 8009646:	e7dd      	b.n	8009604 <_fflush_r+0xc>

08009648 <fiprintf>:
 8009648:	b40e      	push	{r1, r2, r3}
 800964a:	b503      	push	{r0, r1, lr}
 800964c:	4601      	mov	r1, r0
 800964e:	ab03      	add	r3, sp, #12
 8009650:	4805      	ldr	r0, [pc, #20]	; (8009668 <fiprintf+0x20>)
 8009652:	f853 2b04 	ldr.w	r2, [r3], #4
 8009656:	6800      	ldr	r0, [r0, #0]
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	f7ff fe31 	bl	80092c0 <_vfiprintf_r>
 800965e:	b002      	add	sp, #8
 8009660:	f85d eb04 	ldr.w	lr, [sp], #4
 8009664:	b003      	add	sp, #12
 8009666:	4770      	bx	lr
 8009668:	200001f8 	.word	0x200001f8

0800966c <__swhatbuf_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	4615      	mov	r5, r2
 8009676:	2900      	cmp	r1, #0
 8009678:	461e      	mov	r6, r3
 800967a:	b096      	sub	sp, #88	; 0x58
 800967c:	da0c      	bge.n	8009698 <__swhatbuf_r+0x2c>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	2100      	movs	r1, #0
 8009682:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009686:	bf0c      	ite	eq
 8009688:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800968c:	2340      	movne	r3, #64	; 0x40
 800968e:	2000      	movs	r0, #0
 8009690:	6031      	str	r1, [r6, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	b016      	add	sp, #88	; 0x58
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	466a      	mov	r2, sp
 800969a:	f000 f849 	bl	8009730 <_fstat_r>
 800969e:	2800      	cmp	r0, #0
 80096a0:	dbed      	blt.n	800967e <__swhatbuf_r+0x12>
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096a8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096ac:	4259      	negs	r1, r3
 80096ae:	4159      	adcs	r1, r3
 80096b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096b4:	e7eb      	b.n	800968e <__swhatbuf_r+0x22>

080096b6 <__smakebuf_r>:
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096ba:	079d      	lsls	r5, r3, #30
 80096bc:	4606      	mov	r6, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	d507      	bpl.n	80096d2 <__smakebuf_r+0x1c>
 80096c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	2301      	movs	r3, #1
 80096cc:	6163      	str	r3, [r4, #20]
 80096ce:	b002      	add	sp, #8
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	466a      	mov	r2, sp
 80096d4:	ab01      	add	r3, sp, #4
 80096d6:	f7ff ffc9 	bl	800966c <__swhatbuf_r>
 80096da:	9900      	ldr	r1, [sp, #0]
 80096dc:	4605      	mov	r5, r0
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff f880 	bl	80087e4 <_malloc_r>
 80096e4:	b948      	cbnz	r0, 80096fa <__smakebuf_r+0x44>
 80096e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ea:	059a      	lsls	r2, r3, #22
 80096ec:	d4ef      	bmi.n	80096ce <__smakebuf_r+0x18>
 80096ee:	f023 0303 	bic.w	r3, r3, #3
 80096f2:	f043 0302 	orr.w	r3, r3, #2
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	e7e3      	b.n	80096c2 <__smakebuf_r+0xc>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	6020      	str	r0, [r4, #0]
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	9b00      	ldr	r3, [sp, #0]
 8009706:	6120      	str	r0, [r4, #16]
 8009708:	6163      	str	r3, [r4, #20]
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	b15b      	cbz	r3, 8009726 <__smakebuf_r+0x70>
 800970e:	4630      	mov	r0, r6
 8009710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009714:	f000 f81e 	bl	8009754 <_isatty_r>
 8009718:	b128      	cbz	r0, 8009726 <__smakebuf_r+0x70>
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f023 0303 	bic.w	r3, r3, #3
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	431d      	orrs	r5, r3
 800972a:	81a5      	strh	r5, [r4, #12]
 800972c:	e7cf      	b.n	80096ce <__smakebuf_r+0x18>
	...

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	2300      	movs	r3, #0
 8009734:	4d06      	ldr	r5, [pc, #24]	; (8009750 <_fstat_r+0x20>)
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f8 febe 	bl	80024be <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	200023d4 	.word	0x200023d4

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	2300      	movs	r3, #0
 8009758:	4d05      	ldr	r5, [pc, #20]	; (8009770 <_isatty_r+0x1c>)
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f8 febc 	bl	80024dc <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	200023d4 	.word	0x200023d4

08009774 <_sbrk_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	2300      	movs	r3, #0
 8009778:	4d05      	ldr	r5, [pc, #20]	; (8009790 <_sbrk_r+0x1c>)
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f8 fec2 	bl	8002508 <_sbrk>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_sbrk_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_sbrk_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	200023d4 	.word	0x200023d4

08009794 <abort>:
 8009794:	2006      	movs	r0, #6
 8009796:	b508      	push	{r3, lr}
 8009798:	f000 f840 	bl	800981c <raise>
 800979c:	2001      	movs	r0, #1
 800979e:	f7f8 fe5c 	bl	800245a <_exit>

080097a2 <_calloc_r>:
 80097a2:	b570      	push	{r4, r5, r6, lr}
 80097a4:	fba1 5402 	umull	r5, r4, r1, r2
 80097a8:	b934      	cbnz	r4, 80097b8 <_calloc_r+0x16>
 80097aa:	4629      	mov	r1, r5
 80097ac:	f7ff f81a 	bl	80087e4 <_malloc_r>
 80097b0:	4606      	mov	r6, r0
 80097b2:	b928      	cbnz	r0, 80097c0 <_calloc_r+0x1e>
 80097b4:	4630      	mov	r0, r6
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	220c      	movs	r2, #12
 80097ba:	2600      	movs	r6, #0
 80097bc:	6002      	str	r2, [r0, #0]
 80097be:	e7f9      	b.n	80097b4 <_calloc_r+0x12>
 80097c0:	462a      	mov	r2, r5
 80097c2:	4621      	mov	r1, r4
 80097c4:	f7fd fc7c 	bl	80070c0 <memset>
 80097c8:	e7f4      	b.n	80097b4 <_calloc_r+0x12>

080097ca <_raise_r>:
 80097ca:	291f      	cmp	r1, #31
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4604      	mov	r4, r0
 80097d0:	460d      	mov	r5, r1
 80097d2:	d904      	bls.n	80097de <_raise_r+0x14>
 80097d4:	2316      	movs	r3, #22
 80097d6:	6003      	str	r3, [r0, #0]
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295
 80097dc:	bd38      	pop	{r3, r4, r5, pc}
 80097de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097e0:	b112      	cbz	r2, 80097e8 <_raise_r+0x1e>
 80097e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097e6:	b94b      	cbnz	r3, 80097fc <_raise_r+0x32>
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 f831 	bl	8009850 <_getpid_r>
 80097ee:	462a      	mov	r2, r5
 80097f0:	4601      	mov	r1, r0
 80097f2:	4620      	mov	r0, r4
 80097f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f8:	f000 b818 	b.w	800982c <_kill_r>
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d00a      	beq.n	8009816 <_raise_r+0x4c>
 8009800:	1c59      	adds	r1, r3, #1
 8009802:	d103      	bne.n	800980c <_raise_r+0x42>
 8009804:	2316      	movs	r3, #22
 8009806:	6003      	str	r3, [r0, #0]
 8009808:	2001      	movs	r0, #1
 800980a:	e7e7      	b.n	80097dc <_raise_r+0x12>
 800980c:	2400      	movs	r4, #0
 800980e:	4628      	mov	r0, r5
 8009810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009814:	4798      	blx	r3
 8009816:	2000      	movs	r0, #0
 8009818:	e7e0      	b.n	80097dc <_raise_r+0x12>
	...

0800981c <raise>:
 800981c:	4b02      	ldr	r3, [pc, #8]	; (8009828 <raise+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f7ff bfd2 	b.w	80097ca <_raise_r>
 8009826:	bf00      	nop
 8009828:	200001f8 	.word	0x200001f8

0800982c <_kill_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	2300      	movs	r3, #0
 8009830:	4d06      	ldr	r5, [pc, #24]	; (800984c <_kill_r+0x20>)
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f8 fdfe 	bl	800243a <_kill>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_kill_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_kill_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	200023d4 	.word	0x200023d4

08009850 <_getpid_r>:
 8009850:	f7f8 bdec 	b.w	800242c <_getpid>

08009854 <_init>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr

08009860 <_fini>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	bf00      	nop
 8009864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009866:	bc08      	pop	{r3}
 8009868:	469e      	mov	lr, r3
 800986a:	4770      	bx	lr
