
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a1c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006b30  08006b30  00007b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef0  08006ef0  000081dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef8  08006ef8  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef8  08006ef8  00007ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006efc  08006efc  00007efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006f00  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001dc  080070dc  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  080070dc  000084a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af8e  00000000  00000000  00008205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc3  00000000  00000000  00013193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00014d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081e  00000000  00000000  000157c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f83  00000000  00000000  00015fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1e2  00000000  00000000  0002df61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ae3  00000000  00000000  0003b143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  000c1c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c575c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b14 	.word	0x08006b14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006b14 	.word	0x08006b14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <LCD_SendInternal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	460b      	mov	r3, r1
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	4613      	mov	r3, r2
 8000a98:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4822      	ldr	r0, [pc, #136]	@ (8000b30 <LCD_SendInternal+0xa8>)
 8000aa6:	f001 fc87 	bl	80023b8 <HAL_I2C_IsDeviceReady>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d000      	beq.n	8000ab6 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ab4:	e7f1      	b.n	8000a9a <LCD_SendInternal+0x12>
            break;
 8000ab6:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|LCD_BACKLIGHT|LCD_PIN_EN;
 8000ac6:	7bba      	ldrb	r2, [r7, #14]
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|LCD_BACKLIGHT;
 8000ad6:	7bba      	ldrb	r2, [r7, #14]
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|LCD_BACKLIGHT|LCD_PIN_EN;
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f043 030c 	orr.w	r3, r3, #12
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|LCD_BACKLIGHT;
 8000af6:	7b7a      	ldrb	r2, [r7, #13]
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2304      	movs	r3, #4
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <LCD_SendInternal+0xa8>)
 8000b18:	f001 fb50 	bl	80021bc <HAL_I2C_Master_Transmit>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000b20:	2005      	movs	r0, #5
 8000b22:	f000 fe6d 	bl	8001800 <HAL_Delay>
    return res;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200001f8 	.word	0x200001f8

08000b34 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000b44:	79b9      	ldrb	r1, [r7, #6]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff9c 	bl	8000a88 <LCD_SendInternal>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8000b68:	79b9      	ldrb	r1, [r7, #6]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff8a 	bl	8000a88 <LCD_SendInternal>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0x30);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2130      	movs	r1, #48	@ 0x30
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffd2 	bl	8000b34 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0x02);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffcd 	bl	8000b34 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	210c      	movs	r1, #12
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffc8 	bl	8000b34 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffc3 	bl	8000b34 <LCD_SendCommand>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	6039      	str	r1, [r7, #0]
 8000bc0:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000bc2:	e009      	b.n	8000bd8 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffc3 	bl	8000b58 <LCD_SendData>
        str++;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f1      	bne.n	8000bc4 <LCD_SendString+0xe>
    }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	603a      	str	r2, [r7, #0]
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8000c08:	7afa      	ldrb	r2, [r7, #11]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff90 	bl	8000b34 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e00b      	b.n	8000c32 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff96 	bl	8000b58 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	ddf0      	ble.n	8000c1a <LCD_SET_CGRAM+0x30>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <_write>:
uint8_t UART1_Len = 0;

unsigned char UART1_Rx_End = 0;


int _write(int file, unsigned char *p, int len) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <_write+0x5c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d107      	bne.n	8000c68 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	4810      	ldr	r0, [pc, #64]	@ (8000ca4 <_write+0x60>)
 8000c62:	f002 fb91 	bl	8003388 <HAL_UART_Transmit>
 8000c66:	e016      	b.n	8000c96 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <_write+0x5c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	230a      	movs	r3, #10
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <_write+0x64>)
 8000c7a:	f002 fb85 	bl	8003388 <HAL_UART_Transmit>
 8000c7e:	e00a      	b.n	8000c96 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <_write+0x5c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d106      	bne.n	8000c96 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	4806      	ldr	r0, [pc, #24]	@ (8000cac <_write+0x68>)
 8000c92:	f002 fb79 	bl	8003388 <HAL_UART_Transmit>
	}
	return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000324 	.word	0x20000324
 8000ca4:	2000024c 	.word	0x2000024c
 8000ca8:	20000294 	.word	0x20000294
 8000cac:	200002dc 	.word	0x200002dc

08000cb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cb4:	f000 fd42 	bl	800173c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cb8:	f000 f8de 	bl	8000e78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cbc:	f000 f9c8 	bl	8001050 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000cc0:	f000 f91a 	bl	8000ef8 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000cc4:	f000 f946 	bl	8000f54 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000cc8:	f000 f96e 	bl	8000fa8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000ccc:	f000 f996 	bl	8000ffc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4958      	ldr	r1, [pc, #352]	@ (8000e34 <main+0x184>)
 8000cd4:	4858      	ldr	r0, [pc, #352]	@ (8000e38 <main+0x188>)
 8000cd6:	f002 fbda 	bl	800348e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4957      	ldr	r1, [pc, #348]	@ (8000e3c <main+0x18c>)
 8000cde:	4858      	ldr	r0, [pc, #352]	@ (8000e40 <main+0x190>)
 8000ce0:	f002 fbd5 	bl	800348e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4957      	ldr	r1, [pc, #348]	@ (8000e44 <main+0x194>)
 8000ce8:	4857      	ldr	r0, [pc, #348]	@ (8000e48 <main+0x198>)
 8000cea:	f002 fbd0 	bl	800348e <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000cee:	4b57      	ldr	r3, [pc, #348]	@ (8000e4c <main+0x19c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6898      	ldr	r0, [r3, #8]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f003 fee9 	bl	8004ad0 <setvbuf>
	printf("HELL WORLD\r\n");
 8000cfe:	4854      	ldr	r0, [pc, #336]	@ (8000e50 <main+0x1a0>)
 8000d00:	f003 fede 	bl	8004ac0 <puts>
	LCD_Init(LCD_ADDR);
 8000d04:	204e      	movs	r0, #78	@ 0x4e
 8000d06:	f7ff ff39 	bl	8000b7c <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, custom_char);
 8000d0a:	4a52      	ldr	r2, [pc, #328]	@ (8000e54 <main+0x1a4>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	204e      	movs	r0, #78	@ 0x4e
 8000d10:	f7ff ff6b 	bl	8000bea <LCD_SET_CGRAM>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR);
 8000d14:	2101      	movs	r1, #1
 8000d16:	204e      	movs	r0, #78	@ 0x4e
 8000d18:	f7ff ff0c 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	204e      	movs	r0, #78	@ 0x4e
 8000d20:	f7ff ff08 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000d24:	2114      	movs	r1, #20
 8000d26:	204e      	movs	r0, #78	@ 0x4e
 8000d28:	f7ff ff04 	bl	8000b34 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 0b10100010);
 8000d2c:	21a2      	movs	r1, #162	@ 0xa2
 8000d2e:	204e      	movs	r0, #78	@ 0x4e
 8000d30:	f7ff ff12 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11010000);
 8000d34:	21d0      	movs	r1, #208	@ 0xd0
 8000d36:	204e      	movs	r0, #78	@ 0x4e
 8000d38:	f7ff ff0e 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11000101);
 8000d3c:	21c5      	movs	r1, #197	@ 0xc5
 8000d3e:	204e      	movs	r0, #78	@ 0x4e
 8000d40:	f7ff ff0a 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11011000);
 8000d44:	21d8      	movs	r1, #216	@ 0xd8
 8000d46:	204e      	movs	r0, #78	@ 0x4e
 8000d48:	f7ff ff06 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11011101);
 8000d4c:	21dd      	movs	r1, #221	@ 0xdd
 8000d4e:	204e      	movs	r0, #78	@ 0x4e
 8000d50:	f7ff ff02 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10111101);
 8000d54:	21bd      	movs	r1, #189	@ 0xbd
 8000d56:	204e      	movs	r0, #78	@ 0x4e
 8000d58:	f7ff fefe 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110111);
 8000d5c:	21b7      	movs	r1, #183	@ 0xb7
 8000d5e:	204e      	movs	r0, #78	@ 0x4e
 8000d60:	f7ff fefa 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110000);
 8000d64:	21b0      	movs	r1, #176	@ 0xb0
 8000d66:	204e      	movs	r0, #78	@ 0x4e
 8000d68:	f7ff fef6 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10100011);
 8000d6c:	21a3      	movs	r1, #163	@ 0xa3
 8000d6e:	204e      	movs	r0, #78	@ 0x4e
 8000d70:	f7ff fef2 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11000000);
 8000d74:	21c0      	movs	r1, #192	@ 0xc0
 8000d76:	204e      	movs	r0, #78	@ 0x4e
 8000d78:	f7ff feee 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b11011110);
 8000d7c:	21de      	movs	r1, #222	@ 0xde
 8000d7e:	204e      	movs	r0, #78	@ 0x4e
 8000d80:	f7ff feea 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110010);
 8000d84:	21b2      	movs	r1, #178	@ 0xb2
 8000d86:	204e      	movs	r0, #78	@ 0x4e
 8000d88:	f7ff fee6 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10111101);
 8000d8c:	21bd      	movs	r1, #189	@ 0xbd
 8000d8e:	204e      	movs	r0, #78	@ 0x4e
 8000d90:	f7ff fee2 	bl	8000b58 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 0b10110111);
 8000d94:	21b7      	movs	r1, #183	@ 0xb7
 8000d96:	204e      	movs	r0, #78	@ 0x4e
 8000d98:	f7ff fede 	bl	8000b58 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8000d9c:	21c0      	movs	r1, #192	@ 0xc0
 8000d9e:	204e      	movs	r0, #78	@ 0x4e
 8000da0:	f7ff fec8 	bl	8000b34 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8000da4:	2114      	movs	r1, #20
 8000da6:	204e      	movs	r0, #78	@ 0x4e
 8000da8:	f7ff fec4 	bl	8000b34 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Hell");
 8000dac:	492a      	ldr	r1, [pc, #168]	@ (8000e58 <main+0x1a8>)
 8000dae:	204e      	movs	r0, #78	@ 0x4e
 8000db0:	f7ff ff01 	bl	8000bb6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	204e      	movs	r0, #78	@ 0x4e
 8000db8:	f7ff fece 	bl	8000b58 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "World www");
 8000dbc:	4927      	ldr	r1, [pc, #156]	@ (8000e5c <main+0x1ac>)
 8000dbe:	204e      	movs	r0, #78	@ 0x4e
 8000dc0:	f7ff fef9 	bl	8000bb6 <LCD_SendString>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); //LAMP2
 8000dc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc8:	4825      	ldr	r0, [pc, #148]	@ (8000e60 <main+0x1b0>)
 8000dca:	f001 f899 	bl	8001f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); //LAMP1
 8000dce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd2:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <main+0x1b0>)
 8000dd4:	f001 f894 	bl	8001f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); //BUZZER
 8000dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ddc:	4821      	ldr	r0, [pc, #132]	@ (8000e64 <main+0x1b4>)
 8000dde:	f001 f88f 	bl	8001f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
 8000de2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de6:	481f      	ldr	r0, [pc, #124]	@ (8000e64 <main+0x1b4>)
 8000de8:	f001 f88a 	bl	8001f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 8000dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df0:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <main+0x1b4>)
 8000df2:	f001 f885 	bl	8001f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 8000df6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfa:	481a      	ldr	r0, [pc, #104]	@ (8000e64 <main+0x1b4>)
 8000dfc:	f001 f880 	bl	8001f00 <HAL_GPIO_TogglePin>

		if (UART1_Rx_End) {
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <main+0x1b8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d010      	beq.n	8000e2a <main+0x17a>
			printf("Echo\r\n");
 8000e08:	4818      	ldr	r0, [pc, #96]	@ (8000e6c <main+0x1bc>)
 8000e0a:	f003 fe59 	bl	8004ac0 <puts>
			HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <main+0x1c0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	2302      	movs	r3, #2
 8000e16:	4917      	ldr	r1, [pc, #92]	@ (8000e74 <main+0x1c4>)
 8000e18:	4807      	ldr	r0, [pc, #28]	@ (8000e38 <main+0x188>)
 8000e1a:	f002 fab5 	bl	8003388 <HAL_UART_Transmit>
			UART1_Len = 0;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <main+0x1c0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
			UART1_Rx_End = 0;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <main+0x1b8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1000);
 8000e2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e2e:	f000 fce7 	bl	8001800 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); //LAMP2
 8000e32:	e7c7      	b.n	8000dc4 <main+0x114>
 8000e34:	20000328 	.word	0x20000328
 8000e38:	2000024c 	.word	0x2000024c
 8000e3c:	2000032c 	.word	0x2000032c
 8000e40:	20000294 	.word	0x20000294
 8000e44:	20000330 	.word	0x20000330
 8000e48:	200002dc 	.word	0x200002dc
 8000e4c:	20000020 	.word	0x20000020
 8000e50:	08006b30 	.word	0x08006b30
 8000e54:	20000000 	.word	0x20000000
 8000e58:	08006b3c 	.word	0x08006b3c
 8000e5c:	08006b44 	.word	0x08006b44
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	20000349 	.word	0x20000349
 8000e6c:	08006b50 	.word	0x08006b50
 8000e70:	20000348 	.word	0x20000348
 8000e74:	20000334 	.word	0x20000334

08000e78 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b090      	sub	sp, #64	@ 0x40
 8000e7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	2228      	movs	r2, #40	@ 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 ffae 	bl	8004de8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000eae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fe05 	bl	8002ac8 <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x50>
		Error_Handler();
 8000ec4:	f000 f9d0 	bl	8001268 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 f873 	bl	8002fcc <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x78>
		Error_Handler();
 8000eec:	f000 f9bc 	bl	8001268 <Error_Handler>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3740      	adds	r7, #64	@ 0x40
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_I2C1_Init+0x54>)
 8000f00:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <MX_I2C1_Init+0x58>)
 8000f06:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f1a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_I2C1_Init+0x50>)
 8000f36:	f000 fffd 	bl	8001f34 <HAL_I2C_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000f40:	f000 f992 	bl	8001268 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001f8 	.word	0x200001f8
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	000186a0 	.word	0x000186a0

08000f54 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <MX_USART1_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	f002 f9ac 	bl	80032e8 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f96:	f000 f967 	bl	8001268 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000024c 	.word	0x2000024c
 8000fa4:	40013800 	.word	0x40013800

08000fa8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_USART2_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	f002 f982 	bl	80032e8 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000fea:	f000 f93d 	bl	8001268 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000294 	.word	0x20000294
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <MX_USART3_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_USART3_UART_Init+0x4c>)
 8001034:	f002 f958 	bl	80032e8 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800103e:	f000 f913 	bl	8001268 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002dc 	.word	0x200002dc
 800104c:	40004800 	.word	0x40004800

08001050 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <MX_GPIO_Init+0x104>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a3a      	ldr	r2, [pc, #232]	@ (8001154 <MX_GPIO_Init+0x104>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b38      	ldr	r3, [pc, #224]	@ (8001154 <MX_GPIO_Init+0x104>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <MX_GPIO_Init+0x104>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <MX_GPIO_Init+0x104>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <MX_GPIO_Init+0x104>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin,
 8001094:	2200      	movs	r2, #0
 8001096:	f641 0103 	movw	r1, #6147	@ 0x1803
 800109a:	482f      	ldr	r0, [pc, #188]	@ (8001158 <MX_GPIO_Init+0x108>)
 800109c:	f000 ff18 	bl	8001ed0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 41c6 	mov.w	r1, #25344	@ 0x6300
 80010a6:	482d      	ldr	r0, [pc, #180]	@ (800115c <MX_GPIO_Init+0x10c>)
 80010a8:	f000 ff12 	bl	8001ed0 <HAL_GPIO_WritePin>
	STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
	GPIO_InitStruct.Pin = LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin;
 80010ac:	f641 0303 	movw	r3, #6147	@ 0x1803
 80010b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2302      	movs	r3, #2
 80010bc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4824      	ldr	r0, [pc, #144]	@ (8001158 <MX_GPIO_Init+0x108>)
 80010c6:	f000 fd7f 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_AUX_Pin */
	GPIO_InitStruct.Pin = LORA_AUX_Pin;
 80010ca:	2310      	movs	r3, #16
 80010cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4619      	mov	r1, r3
 80010dc:	481e      	ldr	r0, [pc, #120]	@ (8001158 <MX_GPIO_Init+0x108>)
 80010de:	f000 fd73 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 80010e2:	23e0      	movs	r3, #224	@ 0xe0
 80010e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_GPIO_Init+0x110>)
 80010e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	4818      	ldr	r0, [pc, #96]	@ (8001158 <MX_GPIO_Init+0x108>)
 80010f6:	f000 fd67 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN5_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin | BTN5_Pin;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_GPIO_Init+0x110>)
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4619      	mov	r1, r3
 800110c:	4813      	ldr	r0, [pc, #76]	@ (800115c <MX_GPIO_Init+0x10c>)
 800110e:	f000 fd5b 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
	GPIO_InitStruct.Pin = STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin;
 8001112:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8001116:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4619      	mov	r1, r3
 800112a:	480c      	ldr	r0, [pc, #48]	@ (800115c <MX_GPIO_Init+0x10c>)
 800112c:	f000 fd4c 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_SLCT_Pin */
	GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8001130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001134:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113a:	2301      	movs	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4619      	mov	r1, r3
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_GPIO_Init+0x108>)
 8001146:	f000 fd3f 	bl	8001bc8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00
 8001160:	10110000 	.word	0x10110000

08001164 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	if (huart->Instance == USART1) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a30      	ldr	r2, [pc, #192]	@ (8001234 <HAL_UART_RxCpltCallback+0xd0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d138      	bne.n	80011e8 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8001176:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <HAL_UART_RxCpltCallback+0xd4>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <HAL_UART_RxCpltCallback+0xd8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_UART_RxCpltCallback+0x26>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00c      	beq.n	80011a2 <HAL_UART_RxCpltCallback+0x3e>
 8001188:	e024      	b.n	80011d4 <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_UART_RxCpltCallback+0xdc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d103      	bne.n	800119a <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 8001192:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <HAL_UART_RxCpltCallback+0xd8>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8001198:	e020      	b.n	80011dc <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <HAL_UART_RxCpltCallback+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
			break;
 80011a0:	e01c      	b.n	80011dc <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 80011a2:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <HAL_UART_RxCpltCallback+0xdc>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d106      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <HAL_UART_RxCpltCallback+0xd4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <HAL_UART_RxCpltCallback+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 80011b6:	e011      	b.n	80011dc <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <HAL_UART_RxCpltCallback+0xe0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_UART_RxCpltCallback+0xdc>)
 80011c0:	7819      	ldrb	r1, [r3, #0]
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <HAL_UART_RxCpltCallback+0xe4>)
 80011c4:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <HAL_UART_RxCpltCallback+0xe0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <HAL_UART_RxCpltCallback+0xe0>)
 80011d0:	701a      	strb	r2, [r3, #0]
			break;
 80011d2:	e003      	b.n	80011dc <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_UART_RxCpltCallback+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
			break;
 80011da:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	4918      	ldr	r1, [pc, #96]	@ (8001240 <HAL_UART_RxCpltCallback+0xdc>)
 80011e0:	481a      	ldr	r0, [pc, #104]	@ (800124c <HAL_UART_RxCpltCallback+0xe8>)
 80011e2:	f002 f954 	bl	800348e <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
	} else if (huart->Instance == USART3) {
		HAL_UART_Transmit(&huart1, UART3_Rx_Data, 1, 2);
		HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
	}
}
 80011e6:	e020      	b.n	800122a <HAL_UART_RxCpltCallback+0xc6>
	} else if (huart->Instance == USART2) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_UART_RxCpltCallback+0xec>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10b      	bne.n	800120a <HAL_UART_RxCpltCallback+0xa6>
		HAL_UART_Transmit(&huart1, UART2_Rx_Data, 1, 2);
 80011f2:	2302      	movs	r3, #2
 80011f4:	2201      	movs	r2, #1
 80011f6:	4917      	ldr	r1, [pc, #92]	@ (8001254 <HAL_UART_RxCpltCallback+0xf0>)
 80011f8:	4814      	ldr	r0, [pc, #80]	@ (800124c <HAL_UART_RxCpltCallback+0xe8>)
 80011fa:	f002 f8c5 	bl	8003388 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, UART2_Rx_Data, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	4914      	ldr	r1, [pc, #80]	@ (8001254 <HAL_UART_RxCpltCallback+0xf0>)
 8001202:	4815      	ldr	r0, [pc, #84]	@ (8001258 <HAL_UART_RxCpltCallback+0xf4>)
 8001204:	f002 f943 	bl	800348e <HAL_UART_Receive_IT>
}
 8001208:	e00f      	b.n	800122a <HAL_UART_RxCpltCallback+0xc6>
	} else if (huart->Instance == USART3) {
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a13      	ldr	r2, [pc, #76]	@ (800125c <HAL_UART_RxCpltCallback+0xf8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d10a      	bne.n	800122a <HAL_UART_RxCpltCallback+0xc6>
		HAL_UART_Transmit(&huart1, UART3_Rx_Data, 1, 2);
 8001214:	2302      	movs	r3, #2
 8001216:	2201      	movs	r2, #1
 8001218:	4911      	ldr	r1, [pc, #68]	@ (8001260 <HAL_UART_RxCpltCallback+0xfc>)
 800121a:	480c      	ldr	r0, [pc, #48]	@ (800124c <HAL_UART_RxCpltCallback+0xe8>)
 800121c:	f002 f8b4 	bl	8003388 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, UART3_Rx_Data, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	490f      	ldr	r1, [pc, #60]	@ (8001260 <HAL_UART_RxCpltCallback+0xfc>)
 8001224:	480f      	ldr	r0, [pc, #60]	@ (8001264 <HAL_UART_RxCpltCallback+0x100>)
 8001226:	f002 f932 	bl	800348e <HAL_UART_Receive_IT>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40013800 	.word	0x40013800
 8001238:	20000349 	.word	0x20000349
 800123c:	2000034a 	.word	0x2000034a
 8001240:	20000328 	.word	0x20000328
 8001244:	20000348 	.word	0x20000348
 8001248:	20000334 	.word	0x20000334
 800124c:	2000024c 	.word	0x2000024c
 8001250:	40004400 	.word	0x40004400
 8001254:	2000032c 	.word	0x2000032c
 8001258:	20000294 	.word	0x20000294
 800125c:	40004800 	.word	0x40004800
 8001260:	20000330 	.word	0x20000330
 8001264:	200002dc 	.word	0x200002dc

08001268 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <HAL_I2C_MspInit+0x70>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d123      	bne.n	8001340 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_I2C_MspInit+0x74>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a13      	ldr	r2, [pc, #76]	@ (800134c <HAL_I2C_MspInit+0x74>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_I2C_MspInit+0x74>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001310:	23c0      	movs	r3, #192	@ 0xc0
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	480b      	ldr	r0, [pc, #44]	@ (8001350 <HAL_I2C_MspInit+0x78>)
 8001324:	f000 fc50 	bl	8001bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_I2C_MspInit+0x74>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_I2C_MspInit+0x74>)
 800132e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_I2C_MspInit+0x74>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40005400 	.word	0x40005400
 800134c:	40021000 	.word	0x40021000
 8001350:	40010c00 	.word	0x40010c00

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5f      	ldr	r2, [pc, #380]	@ (80014ec <HAL_UART_MspInit+0x198>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d13a      	bne.n	80013ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001374:	4b5e      	ldr	r3, [pc, #376]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a5d      	ldr	r2, [pc, #372]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b5b      	ldr	r3, [pc, #364]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b58      	ldr	r3, [pc, #352]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a57      	ldr	r2, [pc, #348]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b55      	ldr	r3, [pc, #340]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4619      	mov	r1, r3
 80013b8:	484e      	ldr	r0, [pc, #312]	@ (80014f4 <HAL_UART_MspInit+0x1a0>)
 80013ba:	f000 fc05 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4619      	mov	r1, r3
 80013d2:	4848      	ldr	r0, [pc, #288]	@ (80014f4 <HAL_UART_MspInit+0x1a0>)
 80013d4:	f000 fbf8 	bl	8001bc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2025      	movs	r0, #37	@ 0x25
 80013de:	f000 fb0a 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013e2:	2025      	movs	r0, #37	@ 0x25
 80013e4:	f000 fb23 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e8:	e07c      	b.n	80014e4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a42      	ldr	r2, [pc, #264]	@ (80014f8 <HAL_UART_MspInit+0x1a4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d138      	bne.n	8001466 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a37      	ldr	r2, [pc, #220]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001424:	2304      	movs	r3, #4
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4619      	mov	r1, r3
 8001436:	482f      	ldr	r0, [pc, #188]	@ (80014f4 <HAL_UART_MspInit+0x1a0>)
 8001438:	f000 fbc6 	bl	8001bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4619      	mov	r1, r3
 800144e:	4829      	ldr	r0, [pc, #164]	@ (80014f4 <HAL_UART_MspInit+0x1a0>)
 8001450:	f000 fbba 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2026      	movs	r0, #38	@ 0x26
 800145a:	f000 facc 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800145e:	2026      	movs	r0, #38	@ 0x26
 8001460:	f000 fae5 	bl	8001a2e <HAL_NVIC_EnableIRQ>
}
 8001464:	e03e      	b.n	80014e4 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a24      	ldr	r2, [pc, #144]	@ (80014fc <HAL_UART_MspInit+0x1a8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d139      	bne.n	80014e4 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800147a:	61d3      	str	r3, [r2, #28]
 800147c:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_UART_MspInit+0x19c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	4619      	mov	r1, r3
 80014b4:	4812      	ldr	r0, [pc, #72]	@ (8001500 <HAL_UART_MspInit+0x1ac>)
 80014b6:	f000 fb87 	bl	8001bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	4619      	mov	r1, r3
 80014ce:	480c      	ldr	r0, [pc, #48]	@ (8001500 <HAL_UART_MspInit+0x1ac>)
 80014d0:	f000 fb7a 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2027      	movs	r0, #39	@ 0x27
 80014da:	f000 fa8c 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014de:	2027      	movs	r0, #39	@ 0x27
 80014e0:	f000 faa5 	bl	8001a2e <HAL_NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	@ 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40004800 	.word	0x40004800
 8001500:	40010c00 	.word	0x40010c00

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 f938 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <USART1_IRQHandler+0x10>)
 8001562:	f001 ffb9 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000024c 	.word	0x2000024c

08001570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <USART2_IRQHandler+0x10>)
 8001576:	f001 ffaf 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000294 	.word	0x20000294

08001584 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <USART3_IRQHandler+0x10>)
 800158a:	f001 ffa5 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002dc 	.word	0x200002dc

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <_kill>:

int _kill(int pid, int sig)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b0:	f003 fc6c 	bl	8004e8c <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2216      	movs	r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_exit>:

void _exit (int status)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffe7 	bl	80015a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <_exit+0x12>

080015dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00a      	b.n	8001604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ee:	f3af 8000 	nop.w
 80015f2:	4601      	mov	r1, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf0      	blt.n	80015ee <_read+0x12>
  }

  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800163c:	605a      	str	r2, [r3, #4]
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <_isatty>:

int _isatty(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f003 fbf0 	bl	8004e8c <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20005000 	.word	0x20005000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	2000034c 	.word	0x2000034c
 80016e0:	200004a0 	.word	0x200004a0

080016e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f0:	f7ff fff8 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480b      	ldr	r0, [pc, #44]	@ (8001724 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016f6:	490c      	ldr	r1, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016f8:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800170c:	4c09      	ldr	r4, [pc, #36]	@ (8001734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f003 fbbd 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800171e:	f7ff fac7 	bl	8000cb0 <main>
  bx lr
 8001722:	4770      	bx	lr
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800172c:	08006f00 	.word	0x08006f00
  ldr r2, =_sbss
 8001730:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001734:	200004a0 	.word	0x200004a0

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <HAL_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_Init+0x28>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f947 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fd8c 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f95f 	bl	8001a4a <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f927 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000010 	.word	0x20000010
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_IncTick+0x1c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_IncTick+0x20>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a03      	ldr	r2, [pc, #12]	@ (80017e8 <HAL_IncTick+0x20>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000010 	.word	0x20000010
 80017e8:	20000350 	.word	0x20000350

080017ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b02      	ldr	r3, [pc, #8]	@ (80017fc <HAL_GetTick+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000350 	.word	0x20000350

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fff0 	bl	80017ec <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffe0 	bl	80017ec <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000010 	.word	0x20000010

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4906      	ldr	r1, [pc, #24]	@ (80018e0 <__NVIC_EnableIRQ+0x34>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff90 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff2d 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff42 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff35 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e020      	b.n	8001ace <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020e 	bic.w	r2, r2, #14
 8001a9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d005      	beq.n	8001afc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e051      	b.n	8001ba0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <HAL_DMA_Abort_IT+0xd4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d029      	beq.n	8001b7a <HAL_DMA_Abort_IT+0xa2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <HAL_DMA_Abort_IT+0xd8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x9e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <HAL_DMA_Abort_IT+0xdc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01a      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x98>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_DMA_Abort_IT+0xe0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x92>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	@ (8001bbc <HAL_DMA_Abort_IT+0xe4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00a      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x8c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_DMA_Abort_IT+0xe8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d102      	bne.n	8001b5e <HAL_DMA_Abort_IT+0x86>
 8001b58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b5c:	e00e      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b62:	e00b      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b68:	e008      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b6e:	e005      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b74:	e002      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b76:	2310      	movs	r3, #16
 8001b78:	e000      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <HAL_DMA_Abort_IT+0xec>)
 8001b7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020008 	.word	0x40020008
 8001bb0:	4002001c 	.word	0x4002001c
 8001bb4:	40020030 	.word	0x40020030
 8001bb8:	40020044 	.word	0x40020044
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	4002006c 	.word	0x4002006c
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	@ 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e169      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8158 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a9a      	ldr	r2, [pc, #616]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a98      	ldr	r2, [pc, #608]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a98      	ldr	r2, [pc, #608]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a96      	ldr	r2, [pc, #600]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a96      	ldr	r2, [pc, #600]	@ (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	@ (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a79      	ldr	r2, [pc, #484]	@ (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	@ 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	@ 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80b1 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a48      	ldr	r2, [pc, #288]	@ (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3e      	ldr	r2, [pc, #248]	@ (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	492f      	ldr	r1, [pc, #188]	@ (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	492c      	ldr	r1, [pc, #176]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4928      	ldr	r1, [pc, #160]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e08:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4922      	ldr	r1, [pc, #136]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491e      	ldr	r1, [pc, #120]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4918      	ldr	r1, [pc, #96]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4914      	ldr	r1, [pc, #80]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	490e      	ldr	r1, [pc, #56]	@ (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e021      	b.n	8001eaa <HAL_GPIO_Init+0x2e2>
 8001e66:	bf00      	nop
 8001e68:	10320000 	.word	0x10320000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	10110000 	.word	0x10110000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_GPIO_Init+0x304>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4909      	ldr	r1, [pc, #36]	@ (8001ecc <HAL_GPIO_Init+0x304>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae8e 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	372c      	adds	r7, #44	@ 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4013      	ands	r3, r2
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43d9      	mvns	r1, r3
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	400b      	ands	r3, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e12b      	b.n	800219e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff f9bc 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	@ 0x24
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f98:	f001 f960 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a81      	ldr	r2, [pc, #516]	@ (80021a8 <HAL_I2C_Init+0x274>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d807      	bhi.n	8001fb8 <HAL_I2C_Init+0x84>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a80      	ldr	r2, [pc, #512]	@ (80021ac <HAL_I2C_Init+0x278>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e006      	b.n	8001fc6 <HAL_I2C_Init+0x92>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a7d      	ldr	r2, [pc, #500]	@ (80021b0 <HAL_I2C_Init+0x27c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0e7      	b.n	800219e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a78      	ldr	r2, [pc, #480]	@ (80021b4 <HAL_I2C_Init+0x280>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80021a8 <HAL_I2C_Init+0x274>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d802      	bhi.n	8002008 <HAL_I2C_Init+0xd4>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	e009      	b.n	800201c <HAL_I2C_Init+0xe8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4a69      	ldr	r2, [pc, #420]	@ (80021b8 <HAL_I2C_Init+0x284>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	3301      	adds	r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800202e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	495c      	ldr	r1, [pc, #368]	@ (80021a8 <HAL_I2C_Init+0x274>)
 8002038:	428b      	cmp	r3, r1
 800203a:	d819      	bhi.n	8002070 <HAL_I2C_Init+0x13c>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e59      	subs	r1, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fbb1 f3f3 	udiv	r3, r1, r3
 800204a:	1c59      	adds	r1, r3, #1
 800204c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002050:	400b      	ands	r3, r1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_I2C_Init+0x138>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e59      	subs	r1, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fbb1 f3f3 	udiv	r3, r1, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206a:	e051      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 800206c:	2304      	movs	r3, #4
 800206e:	e04f      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d111      	bne.n	800209c <HAL_I2C_Init+0x168>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e012      	b.n	80020c2 <HAL_I2C_Init+0x18e>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x196>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e022      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10e      	bne.n	80020f0 <HAL_I2C_Init+0x1bc>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e58      	subs	r0, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	440b      	add	r3, r1
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Init+0x1dc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	0099      	lsls	r1, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	6809      	ldr	r1, [r1, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800213e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6911      	ldr	r1, [r2, #16]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68d2      	ldr	r2, [r2, #12]
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	000186a0 	.word	0x000186a0
 80021ac:	001e847f 	.word	0x001e847f
 80021b0:	003d08ff 	.word	0x003d08ff
 80021b4:	431bde83 	.word	0x431bde83
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	460b      	mov	r3, r1
 80021ca:	817b      	strh	r3, [r7, #10]
 80021cc:	4613      	mov	r3, r2
 80021ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff fb0c 	bl	80017ec <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	f040 80e0 	bne.w	80023a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2319      	movs	r3, #25
 80021ea:	2201      	movs	r2, #1
 80021ec:	4970      	ldr	r1, [pc, #448]	@ (80023b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fa92 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0d3      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_I2C_Master_Transmit+0x50>
 8002208:	2302      	movs	r3, #2
 800220a:	e0cc      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d007      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	@ 0x21
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a50      	ldr	r2, [pc, #320]	@ (80023b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f9ca 	bl	8002614 <I2C_MasterRequestWrite>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e08d      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022a0:	e066      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb50 	bl	800294c <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06b      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d11b      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x188>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6a39      	ldr	r1, [r7, #32]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fb47 	bl	80029dc <I2C_WaitOnBTFFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800236a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e01a      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d194      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	00100002 	.word	0x00100002
 80023b4:	ffff0000 	.word	0xffff0000

080023b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fa10 	bl	80017ec <HAL_GetTick>
 80023cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	f040 8111 	bne.w	8002602 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2319      	movs	r3, #25
 80023e6:	2201      	movs	r2, #1
 80023e8:	4988      	ldr	r1, [pc, #544]	@ (800260c <HAL_I2C_IsDeviceReady+0x254>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f994 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	e104      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_I2C_IsDeviceReady+0x50>
 8002404:	2302      	movs	r3, #2
 8002406:	e0fd      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d007      	beq.n	800242e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800243c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2224      	movs	r2, #36	@ 0x24
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a70      	ldr	r2, [pc, #448]	@ (8002610 <HAL_I2C_IsDeviceReady+0x258>)
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002460:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f952 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002488:	d103      	bne.n	8002492 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0b6      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002496:	897b      	ldrh	r3, [r7, #10]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff f9a1 	bl	80017ec <HAL_GetTick>
 80024aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	bf0c      	ite	eq
 80024ba:	2301      	moveq	r3, #1
 80024bc:	2300      	movne	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024da:	e025      	b.n	8002528 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024dc:	f7ff f986 	bl	80017ec <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d302      	bcc.n	80024f2 <HAL_I2C_IsDeviceReady+0x13a>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22a0      	movs	r2, #160	@ 0xa0
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2ba0      	cmp	r3, #160	@ 0xa0
 8002532:	d005      	beq.n	8002540 <HAL_I2C_IsDeviceReady+0x188>
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_I2C_IsDeviceReady+0x188>
 800253a:	7dbb      	ldrb	r3, [r7, #22]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0cd      	beq.n	80024dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d129      	bne.n	80025aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002564:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2319      	movs	r3, #25
 8002582:	2201      	movs	r2, #1
 8002584:	4921      	ldr	r1, [pc, #132]	@ (800260c <HAL_I2C_IsDeviceReady+0x254>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8c6 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e036      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e02c      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2319      	movs	r3, #25
 80025ca:	2201      	movs	r2, #1
 80025cc:	490f      	ldr	r1, [pc, #60]	@ (800260c <HAL_I2C_IsDeviceReady+0x254>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8a2 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e012      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f4ff af32 	bcc.w	8002452 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000

08002614 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d006      	beq.n	800263e <I2C_MasterRequestWrite+0x2a>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d003      	beq.n	800263e <I2C_MasterRequestWrite+0x2a>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00b      	b.n	8002668 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	2b12      	cmp	r3, #18
 8002656:	d107      	bne.n	8002668 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f84f 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800268e:	d103      	bne.n	8002698 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e035      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026a4:	d108      	bne.n	80026b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	e01b      	b.n	80026f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026b8:	897b      	ldrh	r3, [r7, #10]
 80026ba:	11db      	asrs	r3, r3, #7
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0306 	and.w	r3, r3, #6
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f063 030f 	orn	r3, r3, #15
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	490e      	ldr	r1, [pc, #56]	@ (8002710 <I2C_MasterRequestWrite+0xfc>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f898 	bl	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e010      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4907      	ldr	r1, [pc, #28]	@ (8002714 <I2C_MasterRequestWrite+0x100>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f888 	bl	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010008 	.word	0x00010008
 8002714:	00010002 	.word	0x00010002

08002718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	e048      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d044      	beq.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff f85b 	bl	80017ec <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d139      	bne.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	0c1b      	lsrs	r3, r3, #16
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10d      	bne.n	800276e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	43da      	mvns	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	e00c      	b.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x70>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	43da      	mvns	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	429a      	cmp	r2, r3
 800278c:	d116      	bne.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e023      	b.n	8002804 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	e00c      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d093      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800281a:	e071      	b.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282a:	d123      	bne.n	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e067      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d041      	beq.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7fe ffb6 	bl	80017ec <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d136      	bne.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10c      	bne.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4013      	ands	r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	e00b      	b.n	80028ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	43da      	mvns	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e021      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10c      	bne.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	43da      	mvns	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4013      	ands	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e00b      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf14      	ite	ne
 8002936:	2301      	movne	r3, #1
 8002938:	2300      	moveq	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f af6d 	bne.w	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002958:	e034      	b.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f886 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e034      	b.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d028      	beq.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe ff3b 	bl	80017ec <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11d      	bne.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d016      	beq.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e007      	b.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b80      	cmp	r3, #128	@ 0x80
 80029d0:	d1c3      	bne.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e8:	e034      	b.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f83e 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e034      	b.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d028      	beq.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fef3 	bl	80017ec <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11d      	bne.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d016      	beq.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d1c3      	bne.n	80029ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a82:	d11b      	bne.n	8002abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e272      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8087 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae8:	4b92      	ldr	r3, [pc, #584]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af4:	4b8f      	ldr	r3, [pc, #572]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d112      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
 8002b00:	4b8c      	ldr	r3, [pc, #560]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	4b89      	ldr	r3, [pc, #548]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d06c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d168      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e24c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x76>
 8002b30:	4b80      	ldr	r3, [pc, #512]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a7f      	ldr	r2, [pc, #508]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e02e      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x98>
 8002b46:	4b7b      	ldr	r3, [pc, #492]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b78      	ldr	r3, [pc, #480]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a77      	ldr	r2, [pc, #476]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0xbc>
 8002b6a:	4b72      	ldr	r3, [pc, #456]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a71      	ldr	r2, [pc, #452]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6f      	ldr	r3, [pc, #444]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b84:	4b6b      	ldr	r3, [pc, #428]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6a      	ldr	r2, [pc, #424]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b68      	ldr	r3, [pc, #416]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a67      	ldr	r2, [pc, #412]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fe22 	bl	80017ec <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fe1e 	bl	80017ec <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e200      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0xe4>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fe0e 	bl	80017ec <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fe0a 	bl	80017ec <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1ec      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x10c>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d063      	beq.n	8002cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c02:	4b4c      	ldr	r3, [pc, #304]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0e:	4b49      	ldr	r3, [pc, #292]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
 8002c1a:	4b46      	ldr	r3, [pc, #280]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	4b43      	ldr	r3, [pc, #268]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1c0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4939      	ldr	r1, [pc, #228]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	e03a      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5c:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fdc3 	bl	80017ec <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fdbf 	bl	80017ec <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1a1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4927      	ldr	r1, [pc, #156]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fda2 	bl	80017ec <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe fd9e 	bl	80017ec <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e180      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03a      	beq.n	8002d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fd82 	bl	80017ec <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd7e 	bl	80017ec <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e160      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 face 	bl	80032ac <RCC_Delay>
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7fe fd68 	bl	80017ec <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fd64 	bl	80017ec <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e146      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	42420000 	.word	0x42420000
 8002d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b92      	ldr	r3, [pc, #584]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e9      	bne.n	8002d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a6 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4b88      	ldr	r3, [pc, #544]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a87      	ldr	r2, [pc, #540]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b85      	ldr	r3, [pc, #532]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d92:	4b7f      	ldr	r3, [pc, #508]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7e      	ldr	r2, [pc, #504]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fd25 	bl	80017ec <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7fe fd21 	bl	80017ec <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	@ 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e103      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b75      	ldr	r3, [pc, #468]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x312>
 8002dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x334>
 8002de2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a69      	ldr	r2, [pc, #420]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	4b67      	ldr	r3, [pc, #412]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a66      	ldr	r2, [pc, #408]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x356>
 8002e04:	4b61      	ldr	r3, [pc, #388]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a60      	ldr	r2, [pc, #384]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b5e      	ldr	r3, [pc, #376]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a5d      	ldr	r2, [pc, #372]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a5a      	ldr	r2, [pc, #360]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b58      	ldr	r3, [pc, #352]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a57      	ldr	r2, [pc, #348]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fcd5 	bl	80017ec <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fcd1 	bl	80017ec <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0b1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x37e>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fcbf 	bl	80017ec <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe fcbb 	bl	80017ec <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e09b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8087 	beq.w	8002fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb0:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d061      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d146      	bne.n	8002f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b33      	ldr	r3, [pc, #204]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe fc8f 	bl	80017ec <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe fc8b 	bl	80017ec <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e06d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efa:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4921      	ldr	r1, [pc, #132]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a19      	ldr	r1, [r3, #32]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	491b      	ldr	r1, [pc, #108]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fc5f 	bl	80017ec <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe fc5b 	bl	80017ec <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e03d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x46a>
 8002f50:	e035      	b.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe fc48 	bl	80017ec <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fc44 	bl	80017ec <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e026      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x498>
 8002f7e:	e01e      	b.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e019      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_OscConfig+0x500>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d0      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b67      	ldr	r3, [pc, #412]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4965      	ldr	r1, [pc, #404]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b63      	ldr	r3, [pc, #396]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b8      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a58      	ldr	r2, [pc, #352]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a52      	ldr	r2, [pc, #328]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800304a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b50      	ldr	r3, [pc, #320]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494d      	ldr	r1, [pc, #308]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d040      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d115      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b41      	ldr	r3, [pc, #260]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e073      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3d      	ldr	r3, [pc, #244]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e06b      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b39      	ldr	r3, [pc, #228]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4936      	ldr	r1, [pc, #216]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7fe fb96 	bl	80017ec <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7fe fb92 	bl	80017ec <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e053      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2d      	ldr	r3, [pc, #180]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d210      	bcs.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b24      	ldr	r3, [pc, #144]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4922      	ldr	r1, [pc, #136]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4916      	ldr	r1, [pc, #88]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003146:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490e      	ldr	r1, [pc, #56]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f821 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490a      	ldr	r1, [pc, #40]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a09      	ldr	r2, [pc, #36]	@ (8003198 <HAL_RCC_ClockConfig+0x1cc>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_RCC_ClockConfig+0x1d0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe faf4 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	08006b58 	.word	0x08006b58
 8003198:	20000008 	.word	0x20000008
 800319c:	2000000c 	.word	0x2000000c

080031a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x94>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x36>
 80031ce:	e027      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d2:	613b      	str	r3, [r7, #16]
      break;
 80031d4:	e027      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0c9b      	lsrs	r3, r3, #18
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	4a17      	ldr	r2, [pc, #92]	@ (800323c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x94>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0c5b      	lsrs	r3, r3, #17
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e004      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0c      	ldr	r2, [pc, #48]	@ (8003244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	613b      	str	r3, [r7, #16]
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	693b      	ldr	r3, [r7, #16]
}
 8003228:	4618      	mov	r0, r3
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	007a1200 	.word	0x007a1200
 800323c:	08006b70 	.word	0x08006b70
 8003240:	08006b80 	.word	0x08006b80
 8003244:	003d0900 	.word	0x003d0900

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b02      	ldr	r3, [pc, #8]	@ (8003258 <HAL_RCC_GetHCLKFreq+0x10>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	20000008 	.word	0x20000008

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003260:	f7ff fff2 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4903      	ldr	r1, [pc, #12]	@ (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	08006b68 	.word	0x08006b68

08003284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003288:	f7ff ffde 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0adb      	lsrs	r3, r3, #11
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08006b68 	.word	0x08006b68

080032ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b4:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <RCC_Delay+0x34>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0a      	ldr	r2, [pc, #40]	@ (80032e4 <RCC_Delay+0x38>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0a5b      	lsrs	r3, r3, #9
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032c8:	bf00      	nop
  }
  while (Delay --);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	60fa      	str	r2, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <RCC_Delay+0x1c>
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20000008 	.word	0x20000008
 80032e4:	10624dd3 	.word	0x10624dd3

080032e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e042      	b.n	8003380 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe f820 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800332a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fdc5 	bl	8003ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	@ 0x28
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d16d      	bne.n	8003484 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Transmit+0x2c>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e066      	b.n	8003486 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2221      	movs	r2, #33	@ 0x21
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c6:	f7fe fa11 	bl	80017ec <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e0:	d108      	bne.n	80033f4 <HAL_UART_Transmit+0x6c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e003      	b.n	80033fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033fc:	e02a      	b.n	8003454 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	@ 0x80
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fb14 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e036      	b.n	8003486 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800342c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3302      	adds	r3, #2
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	e007      	b.n	8003446 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	3301      	adds	r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1cf      	bne.n	80033fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2140      	movs	r1, #64	@ 0x40
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fae4 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e006      	b.n	8003486 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	4613      	mov	r3, r2
 800349a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d112      	bne.n	80034ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_UART_Receive_IT+0x26>
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e00b      	b.n	80034d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	461a      	mov	r2, r3
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fb24 	bl	8003b12 <UART_Start_Receive_IT>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e000      	b.n	80034d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0ba      	sub	sp, #232	@ 0xe8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0x66>
 800352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fc01 	bl	8003d3e <UART_Receive_IT>
      return;
 800353c:	e25b      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800353e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80de 	beq.w	8003704 <HAL_UART_IRQHandler+0x22c>
 8003548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80d1 	beq.w	8003704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xae>
 800356e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0xd2>
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_UART_IRQHandler+0xf6>
 80035b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d011      	beq.n	80035fe <HAL_UART_IRQHandler+0x126>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	f043 0208 	orr.w	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 81f2 	beq.w	80039ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_UART_IRQHandler+0x14e>
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb8c 	bl	8003d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_UART_IRQHandler+0x17a>
 800364a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d04f      	beq.n	80036f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa96 	bl	8003b84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d041      	beq.n	80036ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800367c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800369e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1d9      	bne.n	8003666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d013      	beq.n	80036e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	4a7e      	ldr	r2, [pc, #504]	@ (80038b8 <HAL_UART_IRQHandler+0x3e0>)
 80036c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fa06 	bl	8001ad8 <HAL_DMA_Abort_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036dc:	4610      	mov	r0, r2
 80036de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e00e      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f993 	bl	8003a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e00a      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f98f 	bl	8003a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	e006      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f98b 	bl	8003a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036fe:	e175      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003700:	bf00      	nop
    return;
 8003702:	e173      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 814f 	bne.w	80039ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8148 	beq.w	80039ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8141 	beq.w	80039ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80b6 	beq.w	80038bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800375c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8145 	beq.w	80039f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800376a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800376e:	429a      	cmp	r2, r3
 8003770:	f080 813e 	bcs.w	80039f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800377a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b20      	cmp	r3, #32
 8003784:	f000 8088 	beq.w	8003898 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800379e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037b4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1d9      	bne.n	8003788 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003800:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800380a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e1      	bne.n	80037d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003834:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003836:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800383a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800387a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800387c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe f8e5 	bl	8001a62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8b6 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b4:	e09c      	b.n	80039f0 <HAL_UART_IRQHandler+0x518>
 80038b6:	bf00      	nop
 80038b8:	08003c49 	.word	0x08003c49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 808e 	beq.w	80039f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8089 	beq.w	80039f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003906:	647a      	str	r2, [r7, #68]	@ 0x44
 8003908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800390c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	623b      	str	r3, [r7, #32]
   return(result);
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800393e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003984:	61fa      	str	r2, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	617b      	str	r3, [r7, #20]
   return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800399e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f83b 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039aa:	e023      	b.n	80039f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_UART_IRQHandler+0x4f4>
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f953 	bl	8003c70 <UART_Transmit_IT>
    return;
 80039ca:	e014      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_UART_IRQHandler+0x51e>
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f992 	bl	8003d0e <UART_EndTransmit_IT>
    return;
 80039ea:	e004      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80039ec:	bf00      	nop
 80039ee:	e002      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80039f4:	bf00      	nop
  }
}
 80039f6:	37e8      	adds	r7, #232	@ 0xe8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b090      	sub	sp, #64	@ 0x40
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	e050      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d04c      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a56:	f7fd fec9 	bl	80017ec <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d241      	bcs.n	8003aea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a86:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a88:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e5      	bne.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aba:	623a      	str	r2, [r7, #32]
 8003abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	69f9      	ldr	r1, [r7, #28]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e00f      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d09f      	beq.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3740      	adds	r7, #64	@ 0x40
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	@ 0x22
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0220 	orr.w	r2, r2, #32
 8003b76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b095      	sub	sp, #84	@ 0x54
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bac:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e5      	bne.n	8003b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d119      	bne.n	8003c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f023 0310 	bic.w	r3, r3, #16
 8003c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c1c:	61ba      	str	r2, [r7, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6979      	ldr	r1, [r7, #20]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c3e:	bf00      	nop
 8003c40:	3754      	adds	r7, #84	@ 0x54
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff fed3 	bl	8003a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b21      	cmp	r3, #33	@ 0x21
 8003c82:	d13e      	bne.n	8003d02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	d114      	bne.n	8003cb8 <UART_Transmit_IT+0x48>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d110      	bne.n	8003cb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003caa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]
 8003cb6:	e008      	b.n	8003cca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6211      	str	r1, [r2, #32]
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fe64 	bl	80039fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b08c      	sub	sp, #48	@ 0x30
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b22      	cmp	r3, #34	@ 0x22
 8003d50:	f040 80ae 	bne.w	8003eb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5c:	d117      	bne.n	8003d8e <UART_Receive_IT+0x50>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	1c9a      	adds	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d8c:	e026      	b.n	8003ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da0:	d007      	beq.n	8003db2 <UART_Receive_IT+0x74>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <UART_Receive_IT+0x82>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e008      	b.n	8003dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4619      	mov	r1, r3
 8003dea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d15d      	bne.n	8003eac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0220 	bic.w	r2, r2, #32
 8003dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d135      	bne.n	8003ea2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5c:	623a      	str	r2, [r7, #32]
 8003e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	69f9      	ldr	r1, [r7, #28]
 8003e62:	6a3a      	ldr	r2, [r7, #32]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d10a      	bne.n	8003e94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fdc0 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
 8003ea0:	e002      	b.n	8003ea8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd f95e 	bl	8001164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e002      	b.n	8003eb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3730      	adds	r7, #48	@ 0x30
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003ef6:	f023 030c 	bic.w	r3, r3, #12
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd0 <UART_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7ff f9ae 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	e002      	b.n	8003f32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f2c:	f7ff f996 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8003f30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009a      	lsls	r2, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	4a22      	ldr	r2, [pc, #136]	@ (8003fd4 <UART_SetConfig+0x118>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	0119      	lsls	r1, r3, #4
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009a      	lsls	r2, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <UART_SetConfig+0x118>)
 8003f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2064      	movs	r0, #100	@ 0x64
 8003f72:	fb00 f303 	mul.w	r3, r0, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	3332      	adds	r3, #50	@ 0x32
 8003f7c:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <UART_SetConfig+0x118>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f88:	4419      	add	r1, r3
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <UART_SetConfig+0x118>)
 8003fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2064      	movs	r0, #100	@ 0x64
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	@ 0x32
 8003fb4:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <UART_SetConfig+0x118>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	51eb851f 	.word	0x51eb851f

08003fd8 <__cvt>:
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fde:	461d      	mov	r5, r3
 8003fe0:	bfbb      	ittet	lt
 8003fe2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003fe6:	461d      	movlt	r5, r3
 8003fe8:	2300      	movge	r3, #0
 8003fea:	232d      	movlt	r3, #45	@ 0x2d
 8003fec:	b088      	sub	sp, #32
 8003fee:	4614      	mov	r4, r2
 8003ff0:	bfb8      	it	lt
 8003ff2:	4614      	movlt	r4, r2
 8003ff4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003ff6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003ff8:	7013      	strb	r3, [r2, #0]
 8003ffa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ffc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004000:	f023 0820 	bic.w	r8, r3, #32
 8004004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004008:	d005      	beq.n	8004016 <__cvt+0x3e>
 800400a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800400e:	d100      	bne.n	8004012 <__cvt+0x3a>
 8004010:	3601      	adds	r6, #1
 8004012:	2302      	movs	r3, #2
 8004014:	e000      	b.n	8004018 <__cvt+0x40>
 8004016:	2303      	movs	r3, #3
 8004018:	aa07      	add	r2, sp, #28
 800401a:	9204      	str	r2, [sp, #16]
 800401c:	aa06      	add	r2, sp, #24
 800401e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004022:	e9cd 3600 	strd	r3, r6, [sp]
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	f000 fff5 	bl	8005018 <_dtoa_r>
 800402e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004032:	4607      	mov	r7, r0
 8004034:	d119      	bne.n	800406a <__cvt+0x92>
 8004036:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004038:	07db      	lsls	r3, r3, #31
 800403a:	d50e      	bpl.n	800405a <__cvt+0x82>
 800403c:	eb00 0906 	add.w	r9, r0, r6
 8004040:	2200      	movs	r2, #0
 8004042:	2300      	movs	r3, #0
 8004044:	4620      	mov	r0, r4
 8004046:	4629      	mov	r1, r5
 8004048:	f7fc fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800404c:	b108      	cbz	r0, 8004052 <__cvt+0x7a>
 800404e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004052:	2230      	movs	r2, #48	@ 0x30
 8004054:	9b07      	ldr	r3, [sp, #28]
 8004056:	454b      	cmp	r3, r9
 8004058:	d31e      	bcc.n	8004098 <__cvt+0xc0>
 800405a:	4638      	mov	r0, r7
 800405c:	9b07      	ldr	r3, [sp, #28]
 800405e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004060:	1bdb      	subs	r3, r3, r7
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	b008      	add	sp, #32
 8004066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800406e:	eb00 0906 	add.w	r9, r0, r6
 8004072:	d1e5      	bne.n	8004040 <__cvt+0x68>
 8004074:	7803      	ldrb	r3, [r0, #0]
 8004076:	2b30      	cmp	r3, #48	@ 0x30
 8004078:	d10a      	bne.n	8004090 <__cvt+0xb8>
 800407a:	2200      	movs	r2, #0
 800407c:	2300      	movs	r3, #0
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f7fc fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8004086:	b918      	cbnz	r0, 8004090 <__cvt+0xb8>
 8004088:	f1c6 0601 	rsb	r6, r6, #1
 800408c:	f8ca 6000 	str.w	r6, [sl]
 8004090:	f8da 3000 	ldr.w	r3, [sl]
 8004094:	4499      	add	r9, r3
 8004096:	e7d3      	b.n	8004040 <__cvt+0x68>
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	9107      	str	r1, [sp, #28]
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e7d9      	b.n	8004054 <__cvt+0x7c>

080040a0 <__exponent>:
 80040a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a2:	2900      	cmp	r1, #0
 80040a4:	bfb6      	itet	lt
 80040a6:	232d      	movlt	r3, #45	@ 0x2d
 80040a8:	232b      	movge	r3, #43	@ 0x2b
 80040aa:	4249      	neglt	r1, r1
 80040ac:	2909      	cmp	r1, #9
 80040ae:	7002      	strb	r2, [r0, #0]
 80040b0:	7043      	strb	r3, [r0, #1]
 80040b2:	dd29      	ble.n	8004108 <__exponent+0x68>
 80040b4:	f10d 0307 	add.w	r3, sp, #7
 80040b8:	461d      	mov	r5, r3
 80040ba:	270a      	movs	r7, #10
 80040bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80040c0:	461a      	mov	r2, r3
 80040c2:	fb07 1416 	mls	r4, r7, r6, r1
 80040c6:	3430      	adds	r4, #48	@ 0x30
 80040c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040cc:	460c      	mov	r4, r1
 80040ce:	2c63      	cmp	r4, #99	@ 0x63
 80040d0:	4631      	mov	r1, r6
 80040d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80040d6:	dcf1      	bgt.n	80040bc <__exponent+0x1c>
 80040d8:	3130      	adds	r1, #48	@ 0x30
 80040da:	1e94      	subs	r4, r2, #2
 80040dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040e0:	4623      	mov	r3, r4
 80040e2:	1c41      	adds	r1, r0, #1
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	d30a      	bcc.n	80040fe <__exponent+0x5e>
 80040e8:	f10d 0309 	add.w	r3, sp, #9
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	42ac      	cmp	r4, r5
 80040f0:	bf88      	it	hi
 80040f2:	2300      	movhi	r3, #0
 80040f4:	3302      	adds	r3, #2
 80040f6:	4403      	add	r3, r0
 80040f8:	1a18      	subs	r0, r3, r0
 80040fa:	b003      	add	sp, #12
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004102:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004106:	e7ed      	b.n	80040e4 <__exponent+0x44>
 8004108:	2330      	movs	r3, #48	@ 0x30
 800410a:	3130      	adds	r1, #48	@ 0x30
 800410c:	7083      	strb	r3, [r0, #2]
 800410e:	70c1      	strb	r1, [r0, #3]
 8004110:	1d03      	adds	r3, r0, #4
 8004112:	e7f1      	b.n	80040f8 <__exponent+0x58>

08004114 <_printf_float>:
 8004114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004118:	b091      	sub	sp, #68	@ 0x44
 800411a:	460c      	mov	r4, r1
 800411c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004120:	4616      	mov	r6, r2
 8004122:	461f      	mov	r7, r3
 8004124:	4605      	mov	r5, r0
 8004126:	f000 fe67 	bl	8004df8 <_localeconv_r>
 800412a:	6803      	ldr	r3, [r0, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	9308      	str	r3, [sp, #32]
 8004130:	f7fc f80e 	bl	8000150 <strlen>
 8004134:	2300      	movs	r3, #0
 8004136:	930e      	str	r3, [sp, #56]	@ 0x38
 8004138:	f8d8 3000 	ldr.w	r3, [r8]
 800413c:	9009      	str	r0, [sp, #36]	@ 0x24
 800413e:	3307      	adds	r3, #7
 8004140:	f023 0307 	bic.w	r3, r3, #7
 8004144:	f103 0208 	add.w	r2, r3, #8
 8004148:	f894 a018 	ldrb.w	sl, [r4, #24]
 800414c:	f8d4 b000 	ldr.w	fp, [r4]
 8004150:	f8c8 2000 	str.w	r2, [r8]
 8004154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004158:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800415c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800415e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004162:	f04f 32ff 	mov.w	r2, #4294967295
 8004166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800416a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800416e:	4b9c      	ldr	r3, [pc, #624]	@ (80043e0 <_printf_float+0x2cc>)
 8004170:	f7fc fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8004174:	bb70      	cbnz	r0, 80041d4 <_printf_float+0xc0>
 8004176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800417a:	f04f 32ff 	mov.w	r2, #4294967295
 800417e:	4b98      	ldr	r3, [pc, #608]	@ (80043e0 <_printf_float+0x2cc>)
 8004180:	f7fc fc26 	bl	80009d0 <__aeabi_dcmple>
 8004184:	bb30      	cbnz	r0, 80041d4 <_printf_float+0xc0>
 8004186:	2200      	movs	r2, #0
 8004188:	2300      	movs	r3, #0
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fc fc15 	bl	80009bc <__aeabi_dcmplt>
 8004192:	b110      	cbz	r0, 800419a <_printf_float+0x86>
 8004194:	232d      	movs	r3, #45	@ 0x2d
 8004196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800419a:	4a92      	ldr	r2, [pc, #584]	@ (80043e4 <_printf_float+0x2d0>)
 800419c:	4b92      	ldr	r3, [pc, #584]	@ (80043e8 <_printf_float+0x2d4>)
 800419e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041a2:	bf94      	ite	ls
 80041a4:	4690      	movls	r8, r2
 80041a6:	4698      	movhi	r8, r3
 80041a8:	2303      	movs	r3, #3
 80041aa:	f04f 0900 	mov.w	r9, #0
 80041ae:	6123      	str	r3, [r4, #16]
 80041b0:	f02b 0304 	bic.w	r3, fp, #4
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	4633      	mov	r3, r6
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	9700      	str	r7, [sp, #0]
 80041be:	aa0f      	add	r2, sp, #60	@ 0x3c
 80041c0:	f000 f9d4 	bl	800456c <_printf_common>
 80041c4:	3001      	adds	r0, #1
 80041c6:	f040 8090 	bne.w	80042ea <_printf_float+0x1d6>
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
 80041ce:	b011      	add	sp, #68	@ 0x44
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	4642      	mov	r2, r8
 80041d6:	464b      	mov	r3, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	4649      	mov	r1, r9
 80041dc:	f7fc fc16 	bl	8000a0c <__aeabi_dcmpun>
 80041e0:	b148      	cbz	r0, 80041f6 <_printf_float+0xe2>
 80041e2:	464b      	mov	r3, r9
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bfb8      	it	lt
 80041e8:	232d      	movlt	r3, #45	@ 0x2d
 80041ea:	4a80      	ldr	r2, [pc, #512]	@ (80043ec <_printf_float+0x2d8>)
 80041ec:	bfb8      	it	lt
 80041ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041f2:	4b7f      	ldr	r3, [pc, #508]	@ (80043f0 <_printf_float+0x2dc>)
 80041f4:	e7d3      	b.n	800419e <_printf_float+0x8a>
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	d13f      	bne.n	8004280 <_printf_float+0x16c>
 8004200:	2306      	movs	r3, #6
 8004202:	6063      	str	r3, [r4, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	9206      	str	r2, [sp, #24]
 800420e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004210:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004214:	aa0d      	add	r2, sp, #52	@ 0x34
 8004216:	9203      	str	r2, [sp, #12]
 8004218:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800421c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	4642      	mov	r2, r8
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	464b      	mov	r3, r9
 800422a:	910a      	str	r1, [sp, #40]	@ 0x28
 800422c:	f7ff fed4 	bl	8003fd8 <__cvt>
 8004230:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004232:	4680      	mov	r8, r0
 8004234:	2947      	cmp	r1, #71	@ 0x47
 8004236:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004238:	d128      	bne.n	800428c <_printf_float+0x178>
 800423a:	1cc8      	adds	r0, r1, #3
 800423c:	db02      	blt.n	8004244 <_printf_float+0x130>
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	4299      	cmp	r1, r3
 8004242:	dd40      	ble.n	80042c6 <_printf_float+0x1b2>
 8004244:	f1aa 0a02 	sub.w	sl, sl, #2
 8004248:	fa5f fa8a 	uxtb.w	sl, sl
 800424c:	4652      	mov	r2, sl
 800424e:	3901      	subs	r1, #1
 8004250:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004254:	910d      	str	r1, [sp, #52]	@ 0x34
 8004256:	f7ff ff23 	bl	80040a0 <__exponent>
 800425a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800425c:	4681      	mov	r9, r0
 800425e:	1813      	adds	r3, r2, r0
 8004260:	2a01      	cmp	r2, #1
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	dc02      	bgt.n	800426c <_printf_float+0x158>
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	07d2      	lsls	r2, r2, #31
 800426a:	d501      	bpl.n	8004270 <_printf_float+0x15c>
 800426c:	3301      	adds	r3, #1
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004274:	2b00      	cmp	r3, #0
 8004276:	d09e      	beq.n	80041b6 <_printf_float+0xa2>
 8004278:	232d      	movs	r3, #45	@ 0x2d
 800427a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800427e:	e79a      	b.n	80041b6 <_printf_float+0xa2>
 8004280:	2947      	cmp	r1, #71	@ 0x47
 8004282:	d1bf      	bne.n	8004204 <_printf_float+0xf0>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1bd      	bne.n	8004204 <_printf_float+0xf0>
 8004288:	2301      	movs	r3, #1
 800428a:	e7ba      	b.n	8004202 <_printf_float+0xee>
 800428c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004290:	d9dc      	bls.n	800424c <_printf_float+0x138>
 8004292:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004296:	d118      	bne.n	80042ca <_printf_float+0x1b6>
 8004298:	2900      	cmp	r1, #0
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	dd0b      	ble.n	80042b6 <_printf_float+0x1a2>
 800429e:	6121      	str	r1, [r4, #16]
 80042a0:	b913      	cbnz	r3, 80042a8 <_printf_float+0x194>
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	07d0      	lsls	r0, r2, #31
 80042a6:	d502      	bpl.n	80042ae <_printf_float+0x19a>
 80042a8:	3301      	adds	r3, #1
 80042aa:	440b      	add	r3, r1
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	f04f 0900 	mov.w	r9, #0
 80042b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042b4:	e7dc      	b.n	8004270 <_printf_float+0x15c>
 80042b6:	b913      	cbnz	r3, 80042be <_printf_float+0x1aa>
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	07d2      	lsls	r2, r2, #31
 80042bc:	d501      	bpl.n	80042c2 <_printf_float+0x1ae>
 80042be:	3302      	adds	r3, #2
 80042c0:	e7f4      	b.n	80042ac <_printf_float+0x198>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e7f2      	b.n	80042ac <_printf_float+0x198>
 80042c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042cc:	4299      	cmp	r1, r3
 80042ce:	db05      	blt.n	80042dc <_printf_float+0x1c8>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	6121      	str	r1, [r4, #16]
 80042d4:	07d8      	lsls	r0, r3, #31
 80042d6:	d5ea      	bpl.n	80042ae <_printf_float+0x19a>
 80042d8:	1c4b      	adds	r3, r1, #1
 80042da:	e7e7      	b.n	80042ac <_printf_float+0x198>
 80042dc:	2900      	cmp	r1, #0
 80042de:	bfcc      	ite	gt
 80042e0:	2201      	movgt	r2, #1
 80042e2:	f1c1 0202 	rsble	r2, r1, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	e7e0      	b.n	80042ac <_printf_float+0x198>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	055a      	lsls	r2, r3, #21
 80042ee:	d407      	bmi.n	8004300 <_printf_float+0x1ec>
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	4642      	mov	r2, r8
 80042f4:	4631      	mov	r1, r6
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	d12b      	bne.n	8004356 <_printf_float+0x242>
 80042fe:	e764      	b.n	80041ca <_printf_float+0xb6>
 8004300:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004304:	f240 80dc 	bls.w	80044c0 <_printf_float+0x3ac>
 8004308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	f7fc fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004314:	2800      	cmp	r0, #0
 8004316:	d033      	beq.n	8004380 <_printf_float+0x26c>
 8004318:	2301      	movs	r3, #1
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	4a35      	ldr	r2, [pc, #212]	@ (80043f4 <_printf_float+0x2e0>)
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	f43f af51 	beq.w	80041ca <_printf_float+0xb6>
 8004328:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800432c:	4543      	cmp	r3, r8
 800432e:	db02      	blt.n	8004336 <_printf_float+0x222>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	07d8      	lsls	r0, r3, #31
 8004334:	d50f      	bpl.n	8004356 <_printf_float+0x242>
 8004336:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f af42 	beq.w	80041ca <_printf_float+0xb6>
 8004346:	f04f 0900 	mov.w	r9, #0
 800434a:	f108 38ff 	add.w	r8, r8, #4294967295
 800434e:	f104 0a1a 	add.w	sl, r4, #26
 8004352:	45c8      	cmp	r8, r9
 8004354:	dc09      	bgt.n	800436a <_printf_float+0x256>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	079b      	lsls	r3, r3, #30
 800435a:	f100 8102 	bmi.w	8004562 <_printf_float+0x44e>
 800435e:	68e0      	ldr	r0, [r4, #12]
 8004360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004362:	4298      	cmp	r0, r3
 8004364:	bfb8      	it	lt
 8004366:	4618      	movlt	r0, r3
 8004368:	e731      	b.n	80041ce <_printf_float+0xba>
 800436a:	2301      	movs	r3, #1
 800436c:	4652      	mov	r2, sl
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	f43f af28 	beq.w	80041ca <_printf_float+0xb6>
 800437a:	f109 0901 	add.w	r9, r9, #1
 800437e:	e7e8      	b.n	8004352 <_printf_float+0x23e>
 8004380:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	dc38      	bgt.n	80043f8 <_printf_float+0x2e4>
 8004386:	2301      	movs	r3, #1
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <_printf_float+0x2e0>)
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f af1a 	beq.w	80041ca <_printf_float+0xb6>
 8004396:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800439a:	ea59 0303 	orrs.w	r3, r9, r3
 800439e:	d102      	bne.n	80043a6 <_printf_float+0x292>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	07d9      	lsls	r1, r3, #31
 80043a4:	d5d7      	bpl.n	8004356 <_printf_float+0x242>
 80043a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043aa:	4631      	mov	r1, r6
 80043ac:	4628      	mov	r0, r5
 80043ae:	47b8      	blx	r7
 80043b0:	3001      	adds	r0, #1
 80043b2:	f43f af0a 	beq.w	80041ca <_printf_float+0xb6>
 80043b6:	f04f 0a00 	mov.w	sl, #0
 80043ba:	f104 0b1a 	add.w	fp, r4, #26
 80043be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043c0:	425b      	negs	r3, r3
 80043c2:	4553      	cmp	r3, sl
 80043c4:	dc01      	bgt.n	80043ca <_printf_float+0x2b6>
 80043c6:	464b      	mov	r3, r9
 80043c8:	e793      	b.n	80042f2 <_printf_float+0x1de>
 80043ca:	2301      	movs	r3, #1
 80043cc:	465a      	mov	r2, fp
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b8      	blx	r7
 80043d4:	3001      	adds	r0, #1
 80043d6:	f43f aef8 	beq.w	80041ca <_printf_float+0xb6>
 80043da:	f10a 0a01 	add.w	sl, sl, #1
 80043de:	e7ee      	b.n	80043be <_printf_float+0x2aa>
 80043e0:	7fefffff 	.word	0x7fefffff
 80043e4:	08006b82 	.word	0x08006b82
 80043e8:	08006b86 	.word	0x08006b86
 80043ec:	08006b8a 	.word	0x08006b8a
 80043f0:	08006b8e 	.word	0x08006b8e
 80043f4:	08006b92 	.word	0x08006b92
 80043f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80043fe:	4553      	cmp	r3, sl
 8004400:	bfa8      	it	ge
 8004402:	4653      	movge	r3, sl
 8004404:	2b00      	cmp	r3, #0
 8004406:	4699      	mov	r9, r3
 8004408:	dc36      	bgt.n	8004478 <_printf_float+0x364>
 800440a:	f04f 0b00 	mov.w	fp, #0
 800440e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004412:	f104 021a 	add.w	r2, r4, #26
 8004416:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004418:	930a      	str	r3, [sp, #40]	@ 0x28
 800441a:	eba3 0309 	sub.w	r3, r3, r9
 800441e:	455b      	cmp	r3, fp
 8004420:	dc31      	bgt.n	8004486 <_printf_float+0x372>
 8004422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004424:	459a      	cmp	sl, r3
 8004426:	dc3a      	bgt.n	800449e <_printf_float+0x38a>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d437      	bmi.n	800449e <_printf_float+0x38a>
 800442e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004430:	ebaa 0903 	sub.w	r9, sl, r3
 8004434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004436:	ebaa 0303 	sub.w	r3, sl, r3
 800443a:	4599      	cmp	r9, r3
 800443c:	bfa8      	it	ge
 800443e:	4699      	movge	r9, r3
 8004440:	f1b9 0f00 	cmp.w	r9, #0
 8004444:	dc33      	bgt.n	80044ae <_printf_float+0x39a>
 8004446:	f04f 0800 	mov.w	r8, #0
 800444a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800444e:	f104 0b1a 	add.w	fp, r4, #26
 8004452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004454:	ebaa 0303 	sub.w	r3, sl, r3
 8004458:	eba3 0309 	sub.w	r3, r3, r9
 800445c:	4543      	cmp	r3, r8
 800445e:	f77f af7a 	ble.w	8004356 <_printf_float+0x242>
 8004462:	2301      	movs	r3, #1
 8004464:	465a      	mov	r2, fp
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	f43f aeac 	beq.w	80041ca <_printf_float+0xb6>
 8004472:	f108 0801 	add.w	r8, r8, #1
 8004476:	e7ec      	b.n	8004452 <_printf_float+0x33e>
 8004478:	4642      	mov	r2, r8
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	d1c2      	bne.n	800440a <_printf_float+0x2f6>
 8004484:	e6a1      	b.n	80041ca <_printf_float+0xb6>
 8004486:	2301      	movs	r3, #1
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	920a      	str	r2, [sp, #40]	@ 0x28
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	f43f ae9a 	beq.w	80041ca <_printf_float+0xb6>
 8004496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004498:	f10b 0b01 	add.w	fp, fp, #1
 800449c:	e7bb      	b.n	8004416 <_printf_float+0x302>
 800449e:	4631      	mov	r1, r6
 80044a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b8      	blx	r7
 80044a8:	3001      	adds	r0, #1
 80044aa:	d1c0      	bne.n	800442e <_printf_float+0x31a>
 80044ac:	e68d      	b.n	80041ca <_printf_float+0xb6>
 80044ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044b0:	464b      	mov	r3, r9
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	4442      	add	r2, r8
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	d1c3      	bne.n	8004446 <_printf_float+0x332>
 80044be:	e684      	b.n	80041ca <_printf_float+0xb6>
 80044c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044c4:	f1ba 0f01 	cmp.w	sl, #1
 80044c8:	dc01      	bgt.n	80044ce <_printf_float+0x3ba>
 80044ca:	07db      	lsls	r3, r3, #31
 80044cc:	d536      	bpl.n	800453c <_printf_float+0x428>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4642      	mov	r2, r8
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	f43f ae76 	beq.w	80041ca <_printf_float+0xb6>
 80044de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044e2:	4631      	mov	r1, r6
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b8      	blx	r7
 80044e8:	3001      	adds	r0, #1
 80044ea:	f43f ae6e 	beq.w	80041ca <_printf_float+0xb6>
 80044ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044f2:	2200      	movs	r2, #0
 80044f4:	2300      	movs	r3, #0
 80044f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044fa:	f7fc fa55 	bl	80009a8 <__aeabi_dcmpeq>
 80044fe:	b9c0      	cbnz	r0, 8004532 <_printf_float+0x41e>
 8004500:	4653      	mov	r3, sl
 8004502:	f108 0201 	add.w	r2, r8, #1
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	d10c      	bne.n	800452a <_printf_float+0x416>
 8004510:	e65b      	b.n	80041ca <_printf_float+0xb6>
 8004512:	2301      	movs	r3, #1
 8004514:	465a      	mov	r2, fp
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae54 	beq.w	80041ca <_printf_float+0xb6>
 8004522:	f108 0801 	add.w	r8, r8, #1
 8004526:	45d0      	cmp	r8, sl
 8004528:	dbf3      	blt.n	8004512 <_printf_float+0x3fe>
 800452a:	464b      	mov	r3, r9
 800452c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004530:	e6e0      	b.n	80042f4 <_printf_float+0x1e0>
 8004532:	f04f 0800 	mov.w	r8, #0
 8004536:	f104 0b1a 	add.w	fp, r4, #26
 800453a:	e7f4      	b.n	8004526 <_printf_float+0x412>
 800453c:	2301      	movs	r3, #1
 800453e:	4642      	mov	r2, r8
 8004540:	e7e1      	b.n	8004506 <_printf_float+0x3f2>
 8004542:	2301      	movs	r3, #1
 8004544:	464a      	mov	r2, r9
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	f43f ae3c 	beq.w	80041ca <_printf_float+0xb6>
 8004552:	f108 0801 	add.w	r8, r8, #1
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800455a:	1a5b      	subs	r3, r3, r1
 800455c:	4543      	cmp	r3, r8
 800455e:	dcf0      	bgt.n	8004542 <_printf_float+0x42e>
 8004560:	e6fd      	b.n	800435e <_printf_float+0x24a>
 8004562:	f04f 0800 	mov.w	r8, #0
 8004566:	f104 0919 	add.w	r9, r4, #25
 800456a:	e7f4      	b.n	8004556 <_printf_float+0x442>

0800456c <_printf_common>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	4616      	mov	r6, r2
 8004572:	4698      	mov	r8, r3
 8004574:	688a      	ldr	r2, [r1, #8]
 8004576:	690b      	ldr	r3, [r1, #16]
 8004578:	4607      	mov	r7, r0
 800457a:	4293      	cmp	r3, r2
 800457c:	bfb8      	it	lt
 800457e:	4613      	movlt	r3, r2
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004586:	460c      	mov	r4, r1
 8004588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800458c:	b10a      	cbz	r2, 8004592 <_printf_common+0x26>
 800458e:	3301      	adds	r3, #1
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	0699      	lsls	r1, r3, #26
 8004596:	bf42      	ittt	mi
 8004598:	6833      	ldrmi	r3, [r6, #0]
 800459a:	3302      	addmi	r3, #2
 800459c:	6033      	strmi	r3, [r6, #0]
 800459e:	6825      	ldr	r5, [r4, #0]
 80045a0:	f015 0506 	ands.w	r5, r5, #6
 80045a4:	d106      	bne.n	80045b4 <_printf_common+0x48>
 80045a6:	f104 0a19 	add.w	sl, r4, #25
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	6832      	ldr	r2, [r6, #0]
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	42ab      	cmp	r3, r5
 80045b2:	dc2b      	bgt.n	800460c <_printf_common+0xa0>
 80045b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	3b00      	subs	r3, #0
 80045bc:	bf18      	it	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	0692      	lsls	r2, r2, #26
 80045c2:	d430      	bmi.n	8004626 <_printf_common+0xba>
 80045c4:	4641      	mov	r1, r8
 80045c6:	4638      	mov	r0, r7
 80045c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045cc:	47c8      	blx	r9
 80045ce:	3001      	adds	r0, #1
 80045d0:	d023      	beq.n	800461a <_printf_common+0xae>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	6922      	ldr	r2, [r4, #16]
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf14      	ite	ne
 80045de:	2500      	movne	r5, #0
 80045e0:	6833      	ldreq	r3, [r6, #0]
 80045e2:	f04f 0600 	mov.w	r6, #0
 80045e6:	bf08      	it	eq
 80045e8:	68e5      	ldreq	r5, [r4, #12]
 80045ea:	f104 041a 	add.w	r4, r4, #26
 80045ee:	bf08      	it	eq
 80045f0:	1aed      	subeq	r5, r5, r3
 80045f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045f6:	bf08      	it	eq
 80045f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bfc4      	itt	gt
 8004600:	1a9b      	subgt	r3, r3, r2
 8004602:	18ed      	addgt	r5, r5, r3
 8004604:	42b5      	cmp	r5, r6
 8004606:	d11a      	bne.n	800463e <_printf_common+0xd2>
 8004608:	2000      	movs	r0, #0
 800460a:	e008      	b.n	800461e <_printf_common+0xb2>
 800460c:	2301      	movs	r3, #1
 800460e:	4652      	mov	r2, sl
 8004610:	4641      	mov	r1, r8
 8004612:	4638      	mov	r0, r7
 8004614:	47c8      	blx	r9
 8004616:	3001      	adds	r0, #1
 8004618:	d103      	bne.n	8004622 <_printf_common+0xb6>
 800461a:	f04f 30ff 	mov.w	r0, #4294967295
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	3501      	adds	r5, #1
 8004624:	e7c1      	b.n	80045aa <_printf_common+0x3e>
 8004626:	2030      	movs	r0, #48	@ 0x30
 8004628:	18e1      	adds	r1, r4, r3
 800462a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004634:	4422      	add	r2, r4
 8004636:	3302      	adds	r3, #2
 8004638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800463c:	e7c2      	b.n	80045c4 <_printf_common+0x58>
 800463e:	2301      	movs	r3, #1
 8004640:	4622      	mov	r2, r4
 8004642:	4641      	mov	r1, r8
 8004644:	4638      	mov	r0, r7
 8004646:	47c8      	blx	r9
 8004648:	3001      	adds	r0, #1
 800464a:	d0e6      	beq.n	800461a <_printf_common+0xae>
 800464c:	3601      	adds	r6, #1
 800464e:	e7d9      	b.n	8004604 <_printf_common+0x98>

08004650 <_printf_i>:
 8004650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	7e0f      	ldrb	r7, [r1, #24]
 8004656:	4691      	mov	r9, r2
 8004658:	2f78      	cmp	r7, #120	@ 0x78
 800465a:	4680      	mov	r8, r0
 800465c:	460c      	mov	r4, r1
 800465e:	469a      	mov	sl, r3
 8004660:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004666:	d807      	bhi.n	8004678 <_printf_i+0x28>
 8004668:	2f62      	cmp	r7, #98	@ 0x62
 800466a:	d80a      	bhi.n	8004682 <_printf_i+0x32>
 800466c:	2f00      	cmp	r7, #0
 800466e:	f000 80d3 	beq.w	8004818 <_printf_i+0x1c8>
 8004672:	2f58      	cmp	r7, #88	@ 0x58
 8004674:	f000 80ba 	beq.w	80047ec <_printf_i+0x19c>
 8004678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800467c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004680:	e03a      	b.n	80046f8 <_printf_i+0xa8>
 8004682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004686:	2b15      	cmp	r3, #21
 8004688:	d8f6      	bhi.n	8004678 <_printf_i+0x28>
 800468a:	a101      	add	r1, pc, #4	@ (adr r1, 8004690 <_printf_i+0x40>)
 800468c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046fd 	.word	0x080046fd
 8004698:	08004679 	.word	0x08004679
 800469c:	08004679 	.word	0x08004679
 80046a0:	08004679 	.word	0x08004679
 80046a4:	08004679 	.word	0x08004679
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004679 	.word	0x08004679
 80046b0:	08004679 	.word	0x08004679
 80046b4:	08004679 	.word	0x08004679
 80046b8:	08004679 	.word	0x08004679
 80046bc:	080047ff 	.word	0x080047ff
 80046c0:	08004727 	.word	0x08004727
 80046c4:	080047b9 	.word	0x080047b9
 80046c8:	08004679 	.word	0x08004679
 80046cc:	08004679 	.word	0x08004679
 80046d0:	08004821 	.word	0x08004821
 80046d4:	08004679 	.word	0x08004679
 80046d8:	08004727 	.word	0x08004727
 80046dc:	08004679 	.word	0x08004679
 80046e0:	08004679 	.word	0x08004679
 80046e4:	080047c1 	.word	0x080047c1
 80046e8:	6833      	ldr	r3, [r6, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6032      	str	r2, [r6, #0]
 80046f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046f8:	2301      	movs	r3, #1
 80046fa:	e09e      	b.n	800483a <_printf_i+0x1ea>
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	6031      	str	r1, [r6, #0]
 8004704:	0606      	lsls	r6, r0, #24
 8004706:	d501      	bpl.n	800470c <_printf_i+0xbc>
 8004708:	681d      	ldr	r5, [r3, #0]
 800470a:	e003      	b.n	8004714 <_printf_i+0xc4>
 800470c:	0645      	lsls	r5, r0, #25
 800470e:	d5fb      	bpl.n	8004708 <_printf_i+0xb8>
 8004710:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004714:	2d00      	cmp	r5, #0
 8004716:	da03      	bge.n	8004720 <_printf_i+0xd0>
 8004718:	232d      	movs	r3, #45	@ 0x2d
 800471a:	426d      	negs	r5, r5
 800471c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004720:	230a      	movs	r3, #10
 8004722:	4859      	ldr	r0, [pc, #356]	@ (8004888 <_printf_i+0x238>)
 8004724:	e011      	b.n	800474a <_printf_i+0xfa>
 8004726:	6821      	ldr	r1, [r4, #0]
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	0608      	lsls	r0, r1, #24
 800472c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004730:	d402      	bmi.n	8004738 <_printf_i+0xe8>
 8004732:	0649      	lsls	r1, r1, #25
 8004734:	bf48      	it	mi
 8004736:	b2ad      	uxthmi	r5, r5
 8004738:	2f6f      	cmp	r7, #111	@ 0x6f
 800473a:	6033      	str	r3, [r6, #0]
 800473c:	bf14      	ite	ne
 800473e:	230a      	movne	r3, #10
 8004740:	2308      	moveq	r3, #8
 8004742:	4851      	ldr	r0, [pc, #324]	@ (8004888 <_printf_i+0x238>)
 8004744:	2100      	movs	r1, #0
 8004746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800474a:	6866      	ldr	r6, [r4, #4]
 800474c:	2e00      	cmp	r6, #0
 800474e:	bfa8      	it	ge
 8004750:	6821      	ldrge	r1, [r4, #0]
 8004752:	60a6      	str	r6, [r4, #8]
 8004754:	bfa4      	itt	ge
 8004756:	f021 0104 	bicge.w	r1, r1, #4
 800475a:	6021      	strge	r1, [r4, #0]
 800475c:	b90d      	cbnz	r5, 8004762 <_printf_i+0x112>
 800475e:	2e00      	cmp	r6, #0
 8004760:	d04b      	beq.n	80047fa <_printf_i+0x1aa>
 8004762:	4616      	mov	r6, r2
 8004764:	fbb5 f1f3 	udiv	r1, r5, r3
 8004768:	fb03 5711 	mls	r7, r3, r1, r5
 800476c:	5dc7      	ldrb	r7, [r0, r7]
 800476e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004772:	462f      	mov	r7, r5
 8004774:	42bb      	cmp	r3, r7
 8004776:	460d      	mov	r5, r1
 8004778:	d9f4      	bls.n	8004764 <_printf_i+0x114>
 800477a:	2b08      	cmp	r3, #8
 800477c:	d10b      	bne.n	8004796 <_printf_i+0x146>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	07df      	lsls	r7, r3, #31
 8004782:	d508      	bpl.n	8004796 <_printf_i+0x146>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	6861      	ldr	r1, [r4, #4]
 8004788:	4299      	cmp	r1, r3
 800478a:	bfde      	ittt	le
 800478c:	2330      	movle	r3, #48	@ 0x30
 800478e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004792:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004796:	1b92      	subs	r2, r2, r6
 8004798:	6122      	str	r2, [r4, #16]
 800479a:	464b      	mov	r3, r9
 800479c:	4621      	mov	r1, r4
 800479e:	4640      	mov	r0, r8
 80047a0:	f8cd a000 	str.w	sl, [sp]
 80047a4:	aa03      	add	r2, sp, #12
 80047a6:	f7ff fee1 	bl	800456c <_printf_common>
 80047aa:	3001      	adds	r0, #1
 80047ac:	d14a      	bne.n	8004844 <_printf_i+0x1f4>
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	b004      	add	sp, #16
 80047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	2778      	movs	r7, #120	@ 0x78
 80047c2:	4832      	ldr	r0, [pc, #200]	@ (800488c <_printf_i+0x23c>)
 80047c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	6831      	ldr	r1, [r6, #0]
 80047cc:	061f      	lsls	r7, r3, #24
 80047ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80047d2:	d402      	bmi.n	80047da <_printf_i+0x18a>
 80047d4:	065f      	lsls	r7, r3, #25
 80047d6:	bf48      	it	mi
 80047d8:	b2ad      	uxthmi	r5, r5
 80047da:	6031      	str	r1, [r6, #0]
 80047dc:	07d9      	lsls	r1, r3, #31
 80047de:	bf44      	itt	mi
 80047e0:	f043 0320 	orrmi.w	r3, r3, #32
 80047e4:	6023      	strmi	r3, [r4, #0]
 80047e6:	b11d      	cbz	r5, 80047f0 <_printf_i+0x1a0>
 80047e8:	2310      	movs	r3, #16
 80047ea:	e7ab      	b.n	8004744 <_printf_i+0xf4>
 80047ec:	4826      	ldr	r0, [pc, #152]	@ (8004888 <_printf_i+0x238>)
 80047ee:	e7e9      	b.n	80047c4 <_printf_i+0x174>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	e7f6      	b.n	80047e8 <_printf_i+0x198>
 80047fa:	4616      	mov	r6, r2
 80047fc:	e7bd      	b.n	800477a <_printf_i+0x12a>
 80047fe:	6833      	ldr	r3, [r6, #0]
 8004800:	6825      	ldr	r5, [r4, #0]
 8004802:	1d18      	adds	r0, r3, #4
 8004804:	6961      	ldr	r1, [r4, #20]
 8004806:	6030      	str	r0, [r6, #0]
 8004808:	062e      	lsls	r6, r5, #24
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	d501      	bpl.n	8004812 <_printf_i+0x1c2>
 800480e:	6019      	str	r1, [r3, #0]
 8004810:	e002      	b.n	8004818 <_printf_i+0x1c8>
 8004812:	0668      	lsls	r0, r5, #25
 8004814:	d5fb      	bpl.n	800480e <_printf_i+0x1be>
 8004816:	8019      	strh	r1, [r3, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	4616      	mov	r6, r2
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	e7bc      	b.n	800479a <_printf_i+0x14a>
 8004820:	6833      	ldr	r3, [r6, #0]
 8004822:	2100      	movs	r1, #0
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	6032      	str	r2, [r6, #0]
 8004828:	681e      	ldr	r6, [r3, #0]
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	4630      	mov	r0, r6
 800482e:	f000 fb5a 	bl	8004ee6 <memchr>
 8004832:	b108      	cbz	r0, 8004838 <_printf_i+0x1e8>
 8004834:	1b80      	subs	r0, r0, r6
 8004836:	6060      	str	r0, [r4, #4]
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	2300      	movs	r3, #0
 800483e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004842:	e7aa      	b.n	800479a <_printf_i+0x14a>
 8004844:	4632      	mov	r2, r6
 8004846:	4649      	mov	r1, r9
 8004848:	4640      	mov	r0, r8
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	47d0      	blx	sl
 800484e:	3001      	adds	r0, #1
 8004850:	d0ad      	beq.n	80047ae <_printf_i+0x15e>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	079b      	lsls	r3, r3, #30
 8004856:	d413      	bmi.n	8004880 <_printf_i+0x230>
 8004858:	68e0      	ldr	r0, [r4, #12]
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	4298      	cmp	r0, r3
 800485e:	bfb8      	it	lt
 8004860:	4618      	movlt	r0, r3
 8004862:	e7a6      	b.n	80047b2 <_printf_i+0x162>
 8004864:	2301      	movs	r3, #1
 8004866:	4632      	mov	r2, r6
 8004868:	4649      	mov	r1, r9
 800486a:	4640      	mov	r0, r8
 800486c:	47d0      	blx	sl
 800486e:	3001      	adds	r0, #1
 8004870:	d09d      	beq.n	80047ae <_printf_i+0x15e>
 8004872:	3501      	adds	r5, #1
 8004874:	68e3      	ldr	r3, [r4, #12]
 8004876:	9903      	ldr	r1, [sp, #12]
 8004878:	1a5b      	subs	r3, r3, r1
 800487a:	42ab      	cmp	r3, r5
 800487c:	dcf2      	bgt.n	8004864 <_printf_i+0x214>
 800487e:	e7eb      	b.n	8004858 <_printf_i+0x208>
 8004880:	2500      	movs	r5, #0
 8004882:	f104 0619 	add.w	r6, r4, #25
 8004886:	e7f5      	b.n	8004874 <_printf_i+0x224>
 8004888:	08006b94 	.word	0x08006b94
 800488c:	08006ba5 	.word	0x08006ba5

08004890 <std>:
 8004890:	2300      	movs	r3, #0
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	e9c0 3300 	strd	r3, r3, [r0]
 800489a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489e:	6083      	str	r3, [r0, #8]
 80048a0:	8181      	strh	r1, [r0, #12]
 80048a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80048a4:	81c2      	strh	r2, [r0, #14]
 80048a6:	6183      	str	r3, [r0, #24]
 80048a8:	4619      	mov	r1, r3
 80048aa:	2208      	movs	r2, #8
 80048ac:	305c      	adds	r0, #92	@ 0x5c
 80048ae:	f000 fa9b 	bl	8004de8 <memset>
 80048b2:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <std+0x58>)
 80048b4:	6224      	str	r4, [r4, #32]
 80048b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <std+0x5c>)
 80048ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <std+0x60>)
 80048be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048c0:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <std+0x64>)
 80048c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <std+0x68>)
 80048c6:	429c      	cmp	r4, r3
 80048c8:	d006      	beq.n	80048d8 <std+0x48>
 80048ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ce:	4294      	cmp	r4, r2
 80048d0:	d002      	beq.n	80048d8 <std+0x48>
 80048d2:	33d0      	adds	r3, #208	@ 0xd0
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d105      	bne.n	80048e4 <std+0x54>
 80048d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e0:	f000 bafe 	b.w	8004ee0 <__retarget_lock_init_recursive>
 80048e4:	bd10      	pop	{r4, pc}
 80048e6:	bf00      	nop
 80048e8:	08004c39 	.word	0x08004c39
 80048ec:	08004c5b 	.word	0x08004c5b
 80048f0:	08004c93 	.word	0x08004c93
 80048f4:	08004cb7 	.word	0x08004cb7
 80048f8:	20000354 	.word	0x20000354

080048fc <stdio_exit_handler>:
 80048fc:	4a02      	ldr	r2, [pc, #8]	@ (8004908 <stdio_exit_handler+0xc>)
 80048fe:	4903      	ldr	r1, [pc, #12]	@ (800490c <stdio_exit_handler+0x10>)
 8004900:	4803      	ldr	r0, [pc, #12]	@ (8004910 <stdio_exit_handler+0x14>)
 8004902:	f000 b869 	b.w	80049d8 <_fwalk_sglue>
 8004906:	bf00      	nop
 8004908:	20000014 	.word	0x20000014
 800490c:	080065a5 	.word	0x080065a5
 8004910:	20000024 	.word	0x20000024

08004914 <cleanup_stdio>:
 8004914:	6841      	ldr	r1, [r0, #4]
 8004916:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <cleanup_stdio+0x34>)
 8004918:	b510      	push	{r4, lr}
 800491a:	4299      	cmp	r1, r3
 800491c:	4604      	mov	r4, r0
 800491e:	d001      	beq.n	8004924 <cleanup_stdio+0x10>
 8004920:	f001 fe40 	bl	80065a4 <_fflush_r>
 8004924:	68a1      	ldr	r1, [r4, #8]
 8004926:	4b09      	ldr	r3, [pc, #36]	@ (800494c <cleanup_stdio+0x38>)
 8004928:	4299      	cmp	r1, r3
 800492a:	d002      	beq.n	8004932 <cleanup_stdio+0x1e>
 800492c:	4620      	mov	r0, r4
 800492e:	f001 fe39 	bl	80065a4 <_fflush_r>
 8004932:	68e1      	ldr	r1, [r4, #12]
 8004934:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <cleanup_stdio+0x3c>)
 8004936:	4299      	cmp	r1, r3
 8004938:	d004      	beq.n	8004944 <cleanup_stdio+0x30>
 800493a:	4620      	mov	r0, r4
 800493c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004940:	f001 be30 	b.w	80065a4 <_fflush_r>
 8004944:	bd10      	pop	{r4, pc}
 8004946:	bf00      	nop
 8004948:	20000354 	.word	0x20000354
 800494c:	200003bc 	.word	0x200003bc
 8004950:	20000424 	.word	0x20000424

08004954 <global_stdio_init.part.0>:
 8004954:	b510      	push	{r4, lr}
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <global_stdio_init.part.0+0x30>)
 8004958:	4c0b      	ldr	r4, [pc, #44]	@ (8004988 <global_stdio_init.part.0+0x34>)
 800495a:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <global_stdio_init.part.0+0x38>)
 800495c:	4620      	mov	r0, r4
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	2104      	movs	r1, #4
 8004962:	2200      	movs	r2, #0
 8004964:	f7ff ff94 	bl	8004890 <std>
 8004968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800496c:	2201      	movs	r2, #1
 800496e:	2109      	movs	r1, #9
 8004970:	f7ff ff8e 	bl	8004890 <std>
 8004974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004978:	2202      	movs	r2, #2
 800497a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497e:	2112      	movs	r1, #18
 8004980:	f7ff bf86 	b.w	8004890 <std>
 8004984:	2000048c 	.word	0x2000048c
 8004988:	20000354 	.word	0x20000354
 800498c:	080048fd 	.word	0x080048fd

08004990 <__sfp_lock_acquire>:
 8004990:	4801      	ldr	r0, [pc, #4]	@ (8004998 <__sfp_lock_acquire+0x8>)
 8004992:	f000 baa6 	b.w	8004ee2 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	20000495 	.word	0x20000495

0800499c <__sfp_lock_release>:
 800499c:	4801      	ldr	r0, [pc, #4]	@ (80049a4 <__sfp_lock_release+0x8>)
 800499e:	f000 baa1 	b.w	8004ee4 <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	20000495 	.word	0x20000495

080049a8 <__sinit>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4604      	mov	r4, r0
 80049ac:	f7ff fff0 	bl	8004990 <__sfp_lock_acquire>
 80049b0:	6a23      	ldr	r3, [r4, #32]
 80049b2:	b11b      	cbz	r3, 80049bc <__sinit+0x14>
 80049b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b8:	f7ff bff0 	b.w	800499c <__sfp_lock_release>
 80049bc:	4b04      	ldr	r3, [pc, #16]	@ (80049d0 <__sinit+0x28>)
 80049be:	6223      	str	r3, [r4, #32]
 80049c0:	4b04      	ldr	r3, [pc, #16]	@ (80049d4 <__sinit+0x2c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f5      	bne.n	80049b4 <__sinit+0xc>
 80049c8:	f7ff ffc4 	bl	8004954 <global_stdio_init.part.0>
 80049cc:	e7f2      	b.n	80049b4 <__sinit+0xc>
 80049ce:	bf00      	nop
 80049d0:	08004915 	.word	0x08004915
 80049d4:	2000048c 	.word	0x2000048c

080049d8 <_fwalk_sglue>:
 80049d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049dc:	4607      	mov	r7, r0
 80049de:	4688      	mov	r8, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	2600      	movs	r6, #0
 80049e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049e8:	f1b9 0901 	subs.w	r9, r9, #1
 80049ec:	d505      	bpl.n	80049fa <_fwalk_sglue+0x22>
 80049ee:	6824      	ldr	r4, [r4, #0]
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d1f7      	bne.n	80049e4 <_fwalk_sglue+0xc>
 80049f4:	4630      	mov	r0, r6
 80049f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049fa:	89ab      	ldrh	r3, [r5, #12]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d907      	bls.n	8004a10 <_fwalk_sglue+0x38>
 8004a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a04:	3301      	adds	r3, #1
 8004a06:	d003      	beq.n	8004a10 <_fwalk_sglue+0x38>
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	4306      	orrs	r6, r0
 8004a10:	3568      	adds	r5, #104	@ 0x68
 8004a12:	e7e9      	b.n	80049e8 <_fwalk_sglue+0x10>

08004a14 <_puts_r>:
 8004a14:	6a03      	ldr	r3, [r0, #32]
 8004a16:	b570      	push	{r4, r5, r6, lr}
 8004a18:	4605      	mov	r5, r0
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	6884      	ldr	r4, [r0, #8]
 8004a1e:	b90b      	cbnz	r3, 8004a24 <_puts_r+0x10>
 8004a20:	f7ff ffc2 	bl	80049a8 <__sinit>
 8004a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a26:	07db      	lsls	r3, r3, #31
 8004a28:	d405      	bmi.n	8004a36 <_puts_r+0x22>
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	0598      	lsls	r0, r3, #22
 8004a2e:	d402      	bmi.n	8004a36 <_puts_r+0x22>
 8004a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a32:	f000 fa56 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	0719      	lsls	r1, r3, #28
 8004a3a:	d502      	bpl.n	8004a42 <_puts_r+0x2e>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d135      	bne.n	8004aae <_puts_r+0x9a>
 8004a42:	4621      	mov	r1, r4
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 f979 	bl	8004d3c <__swsetup_r>
 8004a4a:	b380      	cbz	r0, 8004aae <_puts_r+0x9a>
 8004a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a52:	07da      	lsls	r2, r3, #31
 8004a54:	d405      	bmi.n	8004a62 <_puts_r+0x4e>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	059b      	lsls	r3, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_puts_r+0x4e>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a5e:	f000 fa41 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004a62:	4628      	mov	r0, r5
 8004a64:	bd70      	pop	{r4, r5, r6, pc}
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da04      	bge.n	8004a74 <_puts_r+0x60>
 8004a6a:	69a2      	ldr	r2, [r4, #24]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	dc17      	bgt.n	8004aa0 <_puts_r+0x8c>
 8004a70:	290a      	cmp	r1, #10
 8004a72:	d015      	beq.n	8004aa0 <_puts_r+0x8c>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	7019      	strb	r1, [r3, #0]
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60a3      	str	r3, [r4, #8]
 8004a86:	2900      	cmp	r1, #0
 8004a88:	d1ed      	bne.n	8004a66 <_puts_r+0x52>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da11      	bge.n	8004ab2 <_puts_r+0x9e>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	210a      	movs	r1, #10
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 f913 	bl	8004cbe <__swbuf_r>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d0d7      	beq.n	8004a4c <_puts_r+0x38>
 8004a9c:	250a      	movs	r5, #10
 8004a9e:	e7d7      	b.n	8004a50 <_puts_r+0x3c>
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 f90b 	bl	8004cbe <__swbuf_r>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d1e7      	bne.n	8004a7c <_puts_r+0x68>
 8004aac:	e7ce      	b.n	8004a4c <_puts_r+0x38>
 8004aae:	3e01      	subs	r6, #1
 8004ab0:	e7e4      	b.n	8004a7c <_puts_r+0x68>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	220a      	movs	r2, #10
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e7ee      	b.n	8004a9c <_puts_r+0x88>
	...

08004ac0 <puts>:
 8004ac0:	4b02      	ldr	r3, [pc, #8]	@ (8004acc <puts+0xc>)
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	f7ff bfa5 	b.w	8004a14 <_puts_r>
 8004aca:	bf00      	nop
 8004acc:	20000020 	.word	0x20000020

08004ad0 <setvbuf>:
 8004ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	461d      	mov	r5, r3
 8004ad6:	4b57      	ldr	r3, [pc, #348]	@ (8004c34 <setvbuf+0x164>)
 8004ad8:	4604      	mov	r4, r0
 8004ada:	681f      	ldr	r7, [r3, #0]
 8004adc:	460e      	mov	r6, r1
 8004ade:	4690      	mov	r8, r2
 8004ae0:	b127      	cbz	r7, 8004aec <setvbuf+0x1c>
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	b913      	cbnz	r3, 8004aec <setvbuf+0x1c>
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f7ff ff5e 	bl	80049a8 <__sinit>
 8004aec:	f1b8 0f02 	cmp.w	r8, #2
 8004af0:	d006      	beq.n	8004b00 <setvbuf+0x30>
 8004af2:	f1b8 0f01 	cmp.w	r8, #1
 8004af6:	f200 809a 	bhi.w	8004c2e <setvbuf+0x15e>
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	f2c0 8097 	blt.w	8004c2e <setvbuf+0x15e>
 8004b00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b02:	07d9      	lsls	r1, r3, #31
 8004b04:	d405      	bmi.n	8004b12 <setvbuf+0x42>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	059a      	lsls	r2, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <setvbuf+0x42>
 8004b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b0e:	f000 f9e8 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8004b12:	4621      	mov	r1, r4
 8004b14:	4638      	mov	r0, r7
 8004b16:	f001 fd45 	bl	80065a4 <_fflush_r>
 8004b1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b1c:	b141      	cbz	r1, 8004b30 <setvbuf+0x60>
 8004b1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b22:	4299      	cmp	r1, r3
 8004b24:	d002      	beq.n	8004b2c <setvbuf+0x5c>
 8004b26:	4638      	mov	r0, r7
 8004b28:	f001 f83e 	bl	8005ba8 <_free_r>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b30:	2300      	movs	r3, #0
 8004b32:	61a3      	str	r3, [r4, #24]
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	d503      	bpl.n	8004b44 <setvbuf+0x74>
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	6921      	ldr	r1, [r4, #16]
 8004b40:	f001 f832 	bl	8005ba8 <_free_r>
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f1b8 0f02 	cmp.w	r8, #2
 8004b4a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	d061      	beq.n	8004c1a <setvbuf+0x14a>
 8004b56:	ab01      	add	r3, sp, #4
 8004b58:	466a      	mov	r2, sp
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f001 fd49 	bl	80065f4 <__swhatbuf_r>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	4318      	orrs	r0, r3
 8004b66:	81a0      	strh	r0, [r4, #12]
 8004b68:	bb2d      	cbnz	r5, 8004bb6 <setvbuf+0xe6>
 8004b6a:	9d00      	ldr	r5, [sp, #0]
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f001 f863 	bl	8005c38 <malloc>
 8004b72:	4606      	mov	r6, r0
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d152      	bne.n	8004c1e <setvbuf+0x14e>
 8004b78:	f8dd 9000 	ldr.w	r9, [sp]
 8004b7c:	45a9      	cmp	r9, r5
 8004b7e:	d140      	bne.n	8004c02 <setvbuf+0x132>
 8004b80:	f04f 35ff 	mov.w	r5, #4294967295
 8004b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b88:	f043 0202 	orr.w	r2, r3, #2
 8004b8c:	81a2      	strh	r2, [r4, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60a2      	str	r2, [r4, #8]
 8004b92:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004b96:	6022      	str	r2, [r4, #0]
 8004b98:	6122      	str	r2, [r4, #16]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	6162      	str	r2, [r4, #20]
 8004b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ba0:	07d6      	lsls	r6, r2, #31
 8004ba2:	d404      	bmi.n	8004bae <setvbuf+0xde>
 8004ba4:	0598      	lsls	r0, r3, #22
 8004ba6:	d402      	bmi.n	8004bae <setvbuf+0xde>
 8004ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004baa:	f000 f99b 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004bae:	4628      	mov	r0, r5
 8004bb0:	b003      	add	sp, #12
 8004bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	d0d8      	beq.n	8004b6c <setvbuf+0x9c>
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	b913      	cbnz	r3, 8004bc4 <setvbuf+0xf4>
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7ff fef2 	bl	80049a8 <__sinit>
 8004bc4:	f1b8 0f01 	cmp.w	r8, #1
 8004bc8:	bf08      	it	eq
 8004bca:	89a3      	ldrheq	r3, [r4, #12]
 8004bcc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004bd0:	bf04      	itt	eq
 8004bd2:	f043 0301 	orreq.w	r3, r3, #1
 8004bd6:	81a3      	strheq	r3, [r4, #12]
 8004bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bdc:	6026      	str	r6, [r4, #0]
 8004bde:	f013 0208 	ands.w	r2, r3, #8
 8004be2:	d01e      	beq.n	8004c22 <setvbuf+0x152>
 8004be4:	07d9      	lsls	r1, r3, #31
 8004be6:	bf41      	itttt	mi
 8004be8:	2200      	movmi	r2, #0
 8004bea:	426d      	negmi	r5, r5
 8004bec:	60a2      	strmi	r2, [r4, #8]
 8004bee:	61a5      	strmi	r5, [r4, #24]
 8004bf0:	bf58      	it	pl
 8004bf2:	60a5      	strpl	r5, [r4, #8]
 8004bf4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bf6:	07d2      	lsls	r2, r2, #31
 8004bf8:	d401      	bmi.n	8004bfe <setvbuf+0x12e>
 8004bfa:	059b      	lsls	r3, r3, #22
 8004bfc:	d513      	bpl.n	8004c26 <setvbuf+0x156>
 8004bfe:	2500      	movs	r5, #0
 8004c00:	e7d5      	b.n	8004bae <setvbuf+0xde>
 8004c02:	4648      	mov	r0, r9
 8004c04:	f001 f818 	bl	8005c38 <malloc>
 8004c08:	4606      	mov	r6, r0
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d0b8      	beq.n	8004b80 <setvbuf+0xb0>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	464d      	mov	r5, r9
 8004c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	e7cf      	b.n	8004bba <setvbuf+0xea>
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	e7b2      	b.n	8004b84 <setvbuf+0xb4>
 8004c1e:	46a9      	mov	r9, r5
 8004c20:	e7f5      	b.n	8004c0e <setvbuf+0x13e>
 8004c22:	60a2      	str	r2, [r4, #8]
 8004c24:	e7e6      	b.n	8004bf4 <setvbuf+0x124>
 8004c26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c28:	f000 f95c 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004c2c:	e7e7      	b.n	8004bfe <setvbuf+0x12e>
 8004c2e:	f04f 35ff 	mov.w	r5, #4294967295
 8004c32:	e7bc      	b.n	8004bae <setvbuf+0xde>
 8004c34:	20000020 	.word	0x20000020

08004c38 <__sread>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c40:	f000 f900 	bl	8004e44 <_read_r>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	bfab      	itete	ge
 8004c48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c4c:	181b      	addge	r3, r3, r0
 8004c4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c52:	bfac      	ite	ge
 8004c54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c56:	81a3      	strhlt	r3, [r4, #12]
 8004c58:	bd10      	pop	{r4, pc}

08004c5a <__swrite>:
 8004c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	461f      	mov	r7, r3
 8004c60:	898b      	ldrh	r3, [r1, #12]
 8004c62:	4605      	mov	r5, r0
 8004c64:	05db      	lsls	r3, r3, #23
 8004c66:	460c      	mov	r4, r1
 8004c68:	4616      	mov	r6, r2
 8004c6a:	d505      	bpl.n	8004c78 <__swrite+0x1e>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c74:	f000 f8d4 	bl	8004e20 <_lseek_r>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	4628      	mov	r0, r5
 8004c84:	463b      	mov	r3, r7
 8004c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8e:	f000 b8eb 	b.w	8004e68 <_write_r>

08004c92 <__sseek>:
 8004c92:	b510      	push	{r4, lr}
 8004c94:	460c      	mov	r4, r1
 8004c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c9a:	f000 f8c1 	bl	8004e20 <_lseek_r>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	bf15      	itete	ne
 8004ca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004caa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cae:	81a3      	strheq	r3, [r4, #12]
 8004cb0:	bf18      	it	ne
 8004cb2:	81a3      	strhne	r3, [r4, #12]
 8004cb4:	bd10      	pop	{r4, pc}

08004cb6 <__sclose>:
 8004cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cba:	f000 b8a1 	b.w	8004e00 <_close_r>

08004cbe <__swbuf_r>:
 8004cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	b118      	cbz	r0, 8004cd0 <__swbuf_r+0x12>
 8004cc8:	6a03      	ldr	r3, [r0, #32]
 8004cca:	b90b      	cbnz	r3, 8004cd0 <__swbuf_r+0x12>
 8004ccc:	f7ff fe6c 	bl	80049a8 <__sinit>
 8004cd0:	69a3      	ldr	r3, [r4, #24]
 8004cd2:	60a3      	str	r3, [r4, #8]
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	071a      	lsls	r2, r3, #28
 8004cd8:	d501      	bpl.n	8004cde <__swbuf_r+0x20>
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	b943      	cbnz	r3, 8004cf0 <__swbuf_r+0x32>
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 f82b 	bl	8004d3c <__swsetup_r>
 8004ce6:	b118      	cbz	r0, 8004cf0 <__swbuf_r+0x32>
 8004ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8004cec:	4638      	mov	r0, r7
 8004cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	6922      	ldr	r2, [r4, #16]
 8004cf4:	b2f6      	uxtb	r6, r6
 8004cf6:	1a98      	subs	r0, r3, r2
 8004cf8:	6963      	ldr	r3, [r4, #20]
 8004cfa:	4637      	mov	r7, r6
 8004cfc:	4283      	cmp	r3, r0
 8004cfe:	dc05      	bgt.n	8004d0c <__swbuf_r+0x4e>
 8004d00:	4621      	mov	r1, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	f001 fc4e 	bl	80065a4 <_fflush_r>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d1ed      	bne.n	8004ce8 <__swbuf_r+0x2a>
 8004d0c:	68a3      	ldr	r3, [r4, #8]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	60a3      	str	r3, [r4, #8]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	6022      	str	r2, [r4, #0]
 8004d18:	701e      	strb	r6, [r3, #0]
 8004d1a:	6962      	ldr	r2, [r4, #20]
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d004      	beq.n	8004d2c <__swbuf_r+0x6e>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	07db      	lsls	r3, r3, #31
 8004d26:	d5e1      	bpl.n	8004cec <__swbuf_r+0x2e>
 8004d28:	2e0a      	cmp	r6, #10
 8004d2a:	d1df      	bne.n	8004cec <__swbuf_r+0x2e>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f001 fc38 	bl	80065a4 <_fflush_r>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d0d9      	beq.n	8004cec <__swbuf_r+0x2e>
 8004d38:	e7d6      	b.n	8004ce8 <__swbuf_r+0x2a>
	...

08004d3c <__swsetup_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4b29      	ldr	r3, [pc, #164]	@ (8004de4 <__swsetup_r+0xa8>)
 8004d40:	4605      	mov	r5, r0
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	460c      	mov	r4, r1
 8004d46:	b118      	cbz	r0, 8004d50 <__swsetup_r+0x14>
 8004d48:	6a03      	ldr	r3, [r0, #32]
 8004d4a:	b90b      	cbnz	r3, 8004d50 <__swsetup_r+0x14>
 8004d4c:	f7ff fe2c 	bl	80049a8 <__sinit>
 8004d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d54:	0719      	lsls	r1, r3, #28
 8004d56:	d422      	bmi.n	8004d9e <__swsetup_r+0x62>
 8004d58:	06da      	lsls	r2, r3, #27
 8004d5a:	d407      	bmi.n	8004d6c <__swsetup_r+0x30>
 8004d5c:	2209      	movs	r2, #9
 8004d5e:	602a      	str	r2, [r5, #0]
 8004d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	e033      	b.n	8004dd4 <__swsetup_r+0x98>
 8004d6c:	0758      	lsls	r0, r3, #29
 8004d6e:	d512      	bpl.n	8004d96 <__swsetup_r+0x5a>
 8004d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d72:	b141      	cbz	r1, 8004d86 <__swsetup_r+0x4a>
 8004d74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	d002      	beq.n	8004d82 <__swsetup_r+0x46>
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 ff13 	bl	8005ba8 <_free_r>
 8004d82:	2300      	movs	r3, #0
 8004d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d8c:	81a3      	strh	r3, [r4, #12]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6063      	str	r3, [r4, #4]
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f043 0308 	orr.w	r3, r3, #8
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	b94b      	cbnz	r3, 8004db6 <__swsetup_r+0x7a>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dac:	d003      	beq.n	8004db6 <__swsetup_r+0x7a>
 8004dae:	4621      	mov	r1, r4
 8004db0:	4628      	mov	r0, r5
 8004db2:	f001 fc44 	bl	800663e <__smakebuf_r>
 8004db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dba:	f013 0201 	ands.w	r2, r3, #1
 8004dbe:	d00a      	beq.n	8004dd6 <__swsetup_r+0x9a>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60a2      	str	r2, [r4, #8]
 8004dc4:	6962      	ldr	r2, [r4, #20]
 8004dc6:	4252      	negs	r2, r2
 8004dc8:	61a2      	str	r2, [r4, #24]
 8004dca:	6922      	ldr	r2, [r4, #16]
 8004dcc:	b942      	cbnz	r2, 8004de0 <__swsetup_r+0xa4>
 8004dce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004dd2:	d1c5      	bne.n	8004d60 <__swsetup_r+0x24>
 8004dd4:	bd38      	pop	{r3, r4, r5, pc}
 8004dd6:	0799      	lsls	r1, r3, #30
 8004dd8:	bf58      	it	pl
 8004dda:	6962      	ldrpl	r2, [r4, #20]
 8004ddc:	60a2      	str	r2, [r4, #8]
 8004dde:	e7f4      	b.n	8004dca <__swsetup_r+0x8e>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e7f7      	b.n	8004dd4 <__swsetup_r+0x98>
 8004de4:	20000020 	.word	0x20000020

08004de8 <memset>:
 8004de8:	4603      	mov	r3, r0
 8004dea:	4402      	add	r2, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <_localeconv_r>:
 8004df8:	4800      	ldr	r0, [pc, #0]	@ (8004dfc <_localeconv_r+0x4>)
 8004dfa:	4770      	bx	lr
 8004dfc:	20000160 	.word	0x20000160

08004e00 <_close_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	2300      	movs	r3, #0
 8004e04:	4d05      	ldr	r5, [pc, #20]	@ (8004e1c <_close_r+0x1c>)
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fc fc03 	bl	8001616 <_close>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_close_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_close_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000490 	.word	0x20000490

08004e20 <_lseek_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4d05      	ldr	r5, [pc, #20]	@ (8004e40 <_lseek_r+0x20>)
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc fc15 	bl	800165e <_lseek>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_lseek_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_lseek_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000490 	.word	0x20000490

08004e44 <_read_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4d05      	ldr	r5, [pc, #20]	@ (8004e64 <_read_r+0x20>)
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fc fbc2 	bl	80015dc <_read>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_read_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_read_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000490 	.word	0x20000490

08004e68 <_write_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	2200      	movs	r2, #0
 8004e72:	4d05      	ldr	r5, [pc, #20]	@ (8004e88 <_write_r+0x20>)
 8004e74:	602a      	str	r2, [r5, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7fb fee4 	bl	8000c44 <_write>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_write_r+0x1e>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_write_r+0x1e>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	20000490 	.word	0x20000490

08004e8c <__errno>:
 8004e8c:	4b01      	ldr	r3, [pc, #4]	@ (8004e94 <__errno+0x8>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000020 	.word	0x20000020

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	4d0c      	ldr	r5, [pc, #48]	@ (8004ed0 <__libc_init_array+0x38>)
 8004e9e:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed4 <__libc_init_array+0x3c>)
 8004ea0:	1b64      	subs	r4, r4, r5
 8004ea2:	10a4      	asrs	r4, r4, #2
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	f001 fe34 	bl	8006b14 <_init>
 8004eac:	2600      	movs	r6, #0
 8004eae:	4d0a      	ldr	r5, [pc, #40]	@ (8004ed8 <__libc_init_array+0x40>)
 8004eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8004edc <__libc_init_array+0x44>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec0:	4798      	blx	r3
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eca:	4798      	blx	r3
 8004ecc:	3601      	adds	r6, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	08006ef8 	.word	0x08006ef8
 8004ed4:	08006ef8 	.word	0x08006ef8
 8004ed8:	08006ef8 	.word	0x08006ef8
 8004edc:	08006efc 	.word	0x08006efc

08004ee0 <__retarget_lock_init_recursive>:
 8004ee0:	4770      	bx	lr

08004ee2 <__retarget_lock_acquire_recursive>:
 8004ee2:	4770      	bx	lr

08004ee4 <__retarget_lock_release_recursive>:
 8004ee4:	4770      	bx	lr

08004ee6 <memchr>:
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	b2c9      	uxtb	r1, r1
 8004eec:	4402      	add	r2, r0
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	d101      	bne.n	8004ef8 <memchr+0x12>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e003      	b.n	8004f00 <memchr+0x1a>
 8004ef8:	7804      	ldrb	r4, [r0, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	428c      	cmp	r4, r1
 8004efe:	d1f6      	bne.n	8004eee <memchr+0x8>
 8004f00:	bd10      	pop	{r4, pc}

08004f02 <quorem>:
 8004f02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f06:	6903      	ldr	r3, [r0, #16]
 8004f08:	690c      	ldr	r4, [r1, #16]
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	db7e      	blt.n	800500e <quorem+0x10c>
 8004f10:	3c01      	subs	r4, #1
 8004f12:	00a3      	lsls	r3, r4, #2
 8004f14:	f100 0514 	add.w	r5, r0, #20
 8004f18:	f101 0814 	add.w	r8, r1, #20
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f38:	d32e      	bcc.n	8004f98 <quorem+0x96>
 8004f3a:	f04f 0a00 	mov.w	sl, #0
 8004f3e:	46c4      	mov	ip, r8
 8004f40:	46ae      	mov	lr, r5
 8004f42:	46d3      	mov	fp, sl
 8004f44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f48:	b298      	uxth	r0, r3
 8004f4a:	fb06 a000 	mla	r0, r6, r0, sl
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	0c02      	lsrs	r2, r0, #16
 8004f52:	fb06 2303 	mla	r3, r6, r3, r2
 8004f56:	f8de 2000 	ldr.w	r2, [lr]
 8004f5a:	b280      	uxth	r0, r0
 8004f5c:	b292      	uxth	r2, r2
 8004f5e:	1a12      	subs	r2, r2, r0
 8004f60:	445a      	add	r2, fp
 8004f62:	f8de 0000 	ldr.w	r0, [lr]
 8004f66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f74:	b292      	uxth	r2, r2
 8004f76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f7a:	45e1      	cmp	r9, ip
 8004f7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f80:	f84e 2b04 	str.w	r2, [lr], #4
 8004f84:	d2de      	bcs.n	8004f44 <quorem+0x42>
 8004f86:	9b00      	ldr	r3, [sp, #0]
 8004f88:	58eb      	ldr	r3, [r5, r3]
 8004f8a:	b92b      	cbnz	r3, 8004f98 <quorem+0x96>
 8004f8c:	9b01      	ldr	r3, [sp, #4]
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	429d      	cmp	r5, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	d32f      	bcc.n	8004ff6 <quorem+0xf4>
 8004f96:	613c      	str	r4, [r7, #16]
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f001 f97b 	bl	8006294 <__mcmp>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	db25      	blt.n	8004fee <quorem+0xec>
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004faa:	f8d1 c000 	ldr.w	ip, [r1]
 8004fae:	fa1f fe82 	uxth.w	lr, r2
 8004fb2:	fa1f f38c 	uxth.w	r3, ip
 8004fb6:	eba3 030e 	sub.w	r3, r3, lr
 8004fba:	4403      	add	r3, r0
 8004fbc:	0c12      	lsrs	r2, r2, #16
 8004fbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004fc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fcc:	45c1      	cmp	r9, r8
 8004fce:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fd2:	f841 3b04 	str.w	r3, [r1], #4
 8004fd6:	d2e6      	bcs.n	8004fa6 <quorem+0xa4>
 8004fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fe0:	b922      	cbnz	r2, 8004fec <quorem+0xea>
 8004fe2:	3b04      	subs	r3, #4
 8004fe4:	429d      	cmp	r5, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	d30b      	bcc.n	8005002 <quorem+0x100>
 8004fea:	613c      	str	r4, [r7, #16]
 8004fec:	3601      	adds	r6, #1
 8004fee:	4630      	mov	r0, r6
 8004ff0:	b003      	add	sp, #12
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	3b04      	subs	r3, #4
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	d1cb      	bne.n	8004f96 <quorem+0x94>
 8004ffe:	3c01      	subs	r4, #1
 8005000:	e7c6      	b.n	8004f90 <quorem+0x8e>
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	3b04      	subs	r3, #4
 8005006:	2a00      	cmp	r2, #0
 8005008:	d1ef      	bne.n	8004fea <quorem+0xe8>
 800500a:	3c01      	subs	r4, #1
 800500c:	e7ea      	b.n	8004fe4 <quorem+0xe2>
 800500e:	2000      	movs	r0, #0
 8005010:	e7ee      	b.n	8004ff0 <quorem+0xee>
 8005012:	0000      	movs	r0, r0
 8005014:	0000      	movs	r0, r0
	...

08005018 <_dtoa_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	4614      	mov	r4, r2
 800501e:	461d      	mov	r5, r3
 8005020:	69c7      	ldr	r7, [r0, #28]
 8005022:	b097      	sub	sp, #92	@ 0x5c
 8005024:	4683      	mov	fp, r0
 8005026:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800502a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800502c:	b97f      	cbnz	r7, 800504e <_dtoa_r+0x36>
 800502e:	2010      	movs	r0, #16
 8005030:	f000 fe02 	bl	8005c38 <malloc>
 8005034:	4602      	mov	r2, r0
 8005036:	f8cb 001c 	str.w	r0, [fp, #28]
 800503a:	b920      	cbnz	r0, 8005046 <_dtoa_r+0x2e>
 800503c:	21ef      	movs	r1, #239	@ 0xef
 800503e:	4ba8      	ldr	r3, [pc, #672]	@ (80052e0 <_dtoa_r+0x2c8>)
 8005040:	48a8      	ldr	r0, [pc, #672]	@ (80052e4 <_dtoa_r+0x2cc>)
 8005042:	f001 fb79 	bl	8006738 <__assert_func>
 8005046:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800504a:	6007      	str	r7, [r0, #0]
 800504c:	60c7      	str	r7, [r0, #12]
 800504e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	b159      	cbz	r1, 800506e <_dtoa_r+0x56>
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	2301      	movs	r3, #1
 800505a:	4093      	lsls	r3, r2
 800505c:	604a      	str	r2, [r1, #4]
 800505e:	608b      	str	r3, [r1, #8]
 8005060:	4658      	mov	r0, fp
 8005062:	f000 fedf 	bl	8005e24 <_Bfree>
 8005066:	2200      	movs	r2, #0
 8005068:	f8db 301c 	ldr.w	r3, [fp, #28]
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	1e2b      	subs	r3, r5, #0
 8005070:	bfaf      	iteee	ge
 8005072:	2300      	movge	r3, #0
 8005074:	2201      	movlt	r2, #1
 8005076:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800507a:	9303      	strlt	r3, [sp, #12]
 800507c:	bfa8      	it	ge
 800507e:	6033      	strge	r3, [r6, #0]
 8005080:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005084:	4b98      	ldr	r3, [pc, #608]	@ (80052e8 <_dtoa_r+0x2d0>)
 8005086:	bfb8      	it	lt
 8005088:	6032      	strlt	r2, [r6, #0]
 800508a:	ea33 0308 	bics.w	r3, r3, r8
 800508e:	d112      	bne.n	80050b6 <_dtoa_r+0x9e>
 8005090:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005094:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800509c:	4323      	orrs	r3, r4
 800509e:	f000 8550 	beq.w	8005b42 <_dtoa_r+0xb2a>
 80050a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050a4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80052ec <_dtoa_r+0x2d4>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8552 	beq.w	8005b52 <_dtoa_r+0xb3a>
 80050ae:	f10a 0303 	add.w	r3, sl, #3
 80050b2:	f000 bd4c 	b.w	8005b4e <_dtoa_r+0xb36>
 80050b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80050be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050c2:	2200      	movs	r2, #0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f7fb fc6f 	bl	80009a8 <__aeabi_dcmpeq>
 80050ca:	4607      	mov	r7, r0
 80050cc:	b158      	cbz	r0, 80050e6 <_dtoa_r+0xce>
 80050ce:	2301      	movs	r3, #1
 80050d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050d6:	b113      	cbz	r3, 80050de <_dtoa_r+0xc6>
 80050d8:	4b85      	ldr	r3, [pc, #532]	@ (80052f0 <_dtoa_r+0x2d8>)
 80050da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80052f4 <_dtoa_r+0x2dc>
 80050e2:	f000 bd36 	b.w	8005b52 <_dtoa_r+0xb3a>
 80050e6:	ab14      	add	r3, sp, #80	@ 0x50
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	ab15      	add	r3, sp, #84	@ 0x54
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	4658      	mov	r0, fp
 80050f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050f4:	f001 f97e 	bl	80063f4 <__d2b>
 80050f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050fc:	4681      	mov	r9, r0
 80050fe:	2e00      	cmp	r6, #0
 8005100:	d077      	beq.n	80051f2 <_dtoa_r+0x1da>
 8005102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005108:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800510c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005110:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005114:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005118:	9712      	str	r7, [sp, #72]	@ 0x48
 800511a:	4619      	mov	r1, r3
 800511c:	2200      	movs	r2, #0
 800511e:	4b76      	ldr	r3, [pc, #472]	@ (80052f8 <_dtoa_r+0x2e0>)
 8005120:	f7fb f822 	bl	8000168 <__aeabi_dsub>
 8005124:	a368      	add	r3, pc, #416	@ (adr r3, 80052c8 <_dtoa_r+0x2b0>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f7fb f9d5 	bl	80004d8 <__aeabi_dmul>
 800512e:	a368      	add	r3, pc, #416	@ (adr r3, 80052d0 <_dtoa_r+0x2b8>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb f81a 	bl	800016c <__adddf3>
 8005138:	4604      	mov	r4, r0
 800513a:	4630      	mov	r0, r6
 800513c:	460d      	mov	r5, r1
 800513e:	f7fb f961 	bl	8000404 <__aeabi_i2d>
 8005142:	a365      	add	r3, pc, #404	@ (adr r3, 80052d8 <_dtoa_r+0x2c0>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f9c6 	bl	80004d8 <__aeabi_dmul>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	f7fb f80a 	bl	800016c <__adddf3>
 8005158:	4604      	mov	r4, r0
 800515a:	460d      	mov	r5, r1
 800515c:	f7fb fc6c 	bl	8000a38 <__aeabi_d2iz>
 8005160:	2200      	movs	r2, #0
 8005162:	4607      	mov	r7, r0
 8005164:	2300      	movs	r3, #0
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	f7fb fc27 	bl	80009bc <__aeabi_dcmplt>
 800516e:	b140      	cbz	r0, 8005182 <_dtoa_r+0x16a>
 8005170:	4638      	mov	r0, r7
 8005172:	f7fb f947 	bl	8000404 <__aeabi_i2d>
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	f7fb fc15 	bl	80009a8 <__aeabi_dcmpeq>
 800517e:	b900      	cbnz	r0, 8005182 <_dtoa_r+0x16a>
 8005180:	3f01      	subs	r7, #1
 8005182:	2f16      	cmp	r7, #22
 8005184:	d853      	bhi.n	800522e <_dtoa_r+0x216>
 8005186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800518a:	4b5c      	ldr	r3, [pc, #368]	@ (80052fc <_dtoa_r+0x2e4>)
 800518c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fb fc12 	bl	80009bc <__aeabi_dcmplt>
 8005198:	2800      	cmp	r0, #0
 800519a:	d04a      	beq.n	8005232 <_dtoa_r+0x21a>
 800519c:	2300      	movs	r3, #0
 800519e:	3f01      	subs	r7, #1
 80051a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80051a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051a4:	1b9b      	subs	r3, r3, r6
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	bf46      	itte	mi
 80051aa:	f1c3 0801 	rsbmi	r8, r3, #1
 80051ae:	2300      	movmi	r3, #0
 80051b0:	f04f 0800 	movpl.w	r8, #0
 80051b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051b6:	bf48      	it	mi
 80051b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80051ba:	2f00      	cmp	r7, #0
 80051bc:	db3b      	blt.n	8005236 <_dtoa_r+0x21e>
 80051be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80051c2:	443b      	add	r3, r7
 80051c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c6:	2300      	movs	r3, #0
 80051c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d866      	bhi.n	800529e <_dtoa_r+0x286>
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	bfc4      	itt	gt
 80051d4:	3b04      	subgt	r3, #4
 80051d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80051d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051da:	bfc8      	it	gt
 80051dc:	2400      	movgt	r4, #0
 80051de:	f1a3 0302 	sub.w	r3, r3, #2
 80051e2:	bfd8      	it	le
 80051e4:	2401      	movle	r4, #1
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d864      	bhi.n	80052b4 <_dtoa_r+0x29c>
 80051ea:	e8df f003 	tbb	[pc, r3]
 80051ee:	382b      	.short	0x382b
 80051f0:	5636      	.short	0x5636
 80051f2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051f6:	441e      	add	r6, r3
 80051f8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	bfc1      	itttt	gt
 8005200:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005204:	fa08 f803 	lslgt.w	r8, r8, r3
 8005208:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800520c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005210:	bfd6      	itet	le
 8005212:	f1c3 0320 	rsble	r3, r3, #32
 8005216:	ea48 0003 	orrgt.w	r0, r8, r3
 800521a:	fa04 f003 	lslle.w	r0, r4, r3
 800521e:	f7fb f8e1 	bl	80003e4 <__aeabi_ui2d>
 8005222:	2201      	movs	r2, #1
 8005224:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005228:	3e01      	subs	r6, #1
 800522a:	9212      	str	r2, [sp, #72]	@ 0x48
 800522c:	e775      	b.n	800511a <_dtoa_r+0x102>
 800522e:	2301      	movs	r3, #1
 8005230:	e7b6      	b.n	80051a0 <_dtoa_r+0x188>
 8005232:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005234:	e7b5      	b.n	80051a2 <_dtoa_r+0x18a>
 8005236:	427b      	negs	r3, r7
 8005238:	930a      	str	r3, [sp, #40]	@ 0x28
 800523a:	2300      	movs	r3, #0
 800523c:	eba8 0807 	sub.w	r8, r8, r7
 8005240:	930e      	str	r3, [sp, #56]	@ 0x38
 8005242:	e7c2      	b.n	80051ca <_dtoa_r+0x1b2>
 8005244:	2300      	movs	r3, #0
 8005246:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005248:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800524a:	2b00      	cmp	r3, #0
 800524c:	dc35      	bgt.n	80052ba <_dtoa_r+0x2a2>
 800524e:	2301      	movs	r3, #1
 8005250:	461a      	mov	r2, r3
 8005252:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005256:	9221      	str	r2, [sp, #132]	@ 0x84
 8005258:	e00b      	b.n	8005272 <_dtoa_r+0x25a>
 800525a:	2301      	movs	r3, #1
 800525c:	e7f3      	b.n	8005246 <_dtoa_r+0x22e>
 800525e:	2300      	movs	r3, #0
 8005260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005262:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	9308      	str	r3, [sp, #32]
 8005268:	3301      	adds	r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	bfb8      	it	lt
 8005270:	2301      	movlt	r3, #1
 8005272:	2100      	movs	r1, #0
 8005274:	2204      	movs	r2, #4
 8005276:	f8db 001c 	ldr.w	r0, [fp, #28]
 800527a:	f102 0514 	add.w	r5, r2, #20
 800527e:	429d      	cmp	r5, r3
 8005280:	d91f      	bls.n	80052c2 <_dtoa_r+0x2aa>
 8005282:	6041      	str	r1, [r0, #4]
 8005284:	4658      	mov	r0, fp
 8005286:	f000 fd8d 	bl	8005da4 <_Balloc>
 800528a:	4682      	mov	sl, r0
 800528c:	2800      	cmp	r0, #0
 800528e:	d139      	bne.n	8005304 <_dtoa_r+0x2ec>
 8005290:	4602      	mov	r2, r0
 8005292:	f240 11af 	movw	r1, #431	@ 0x1af
 8005296:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <_dtoa_r+0x2e8>)
 8005298:	e6d2      	b.n	8005040 <_dtoa_r+0x28>
 800529a:	2301      	movs	r3, #1
 800529c:	e7e0      	b.n	8005260 <_dtoa_r+0x248>
 800529e:	2401      	movs	r4, #1
 80052a0:	2300      	movs	r3, #0
 80052a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80052a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	2200      	movs	r2, #0
 80052ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052b0:	2312      	movs	r3, #18
 80052b2:	e7d0      	b.n	8005256 <_dtoa_r+0x23e>
 80052b4:	2301      	movs	r3, #1
 80052b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052b8:	e7f5      	b.n	80052a6 <_dtoa_r+0x28e>
 80052ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052c0:	e7d7      	b.n	8005272 <_dtoa_r+0x25a>
 80052c2:	3101      	adds	r1, #1
 80052c4:	0052      	lsls	r2, r2, #1
 80052c6:	e7d8      	b.n	800527a <_dtoa_r+0x262>
 80052c8:	636f4361 	.word	0x636f4361
 80052cc:	3fd287a7 	.word	0x3fd287a7
 80052d0:	8b60c8b3 	.word	0x8b60c8b3
 80052d4:	3fc68a28 	.word	0x3fc68a28
 80052d8:	509f79fb 	.word	0x509f79fb
 80052dc:	3fd34413 	.word	0x3fd34413
 80052e0:	08006bc3 	.word	0x08006bc3
 80052e4:	08006bda 	.word	0x08006bda
 80052e8:	7ff00000 	.word	0x7ff00000
 80052ec:	08006bbf 	.word	0x08006bbf
 80052f0:	08006b93 	.word	0x08006b93
 80052f4:	08006b92 	.word	0x08006b92
 80052f8:	3ff80000 	.word	0x3ff80000
 80052fc:	08006cd0 	.word	0x08006cd0
 8005300:	08006c32 	.word	0x08006c32
 8005304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005308:	6018      	str	r0, [r3, #0]
 800530a:	9b07      	ldr	r3, [sp, #28]
 800530c:	2b0e      	cmp	r3, #14
 800530e:	f200 80a4 	bhi.w	800545a <_dtoa_r+0x442>
 8005312:	2c00      	cmp	r4, #0
 8005314:	f000 80a1 	beq.w	800545a <_dtoa_r+0x442>
 8005318:	2f00      	cmp	r7, #0
 800531a:	dd33      	ble.n	8005384 <_dtoa_r+0x36c>
 800531c:	4b86      	ldr	r3, [pc, #536]	@ (8005538 <_dtoa_r+0x520>)
 800531e:	f007 020f 	and.w	r2, r7, #15
 8005322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005326:	05f8      	lsls	r0, r7, #23
 8005328:	e9d3 3400 	ldrd	r3, r4, [r3]
 800532c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005330:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005334:	d516      	bpl.n	8005364 <_dtoa_r+0x34c>
 8005336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800533a:	4b80      	ldr	r3, [pc, #512]	@ (800553c <_dtoa_r+0x524>)
 800533c:	2603      	movs	r6, #3
 800533e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005342:	f7fb f9f3 	bl	800072c <__aeabi_ddiv>
 8005346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800534a:	f004 040f 	and.w	r4, r4, #15
 800534e:	4d7b      	ldr	r5, [pc, #492]	@ (800553c <_dtoa_r+0x524>)
 8005350:	b954      	cbnz	r4, 8005368 <_dtoa_r+0x350>
 8005352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800535a:	f7fb f9e7 	bl	800072c <__aeabi_ddiv>
 800535e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005362:	e028      	b.n	80053b6 <_dtoa_r+0x39e>
 8005364:	2602      	movs	r6, #2
 8005366:	e7f2      	b.n	800534e <_dtoa_r+0x336>
 8005368:	07e1      	lsls	r1, r4, #31
 800536a:	d508      	bpl.n	800537e <_dtoa_r+0x366>
 800536c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005374:	f7fb f8b0 	bl	80004d8 <__aeabi_dmul>
 8005378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800537c:	3601      	adds	r6, #1
 800537e:	1064      	asrs	r4, r4, #1
 8005380:	3508      	adds	r5, #8
 8005382:	e7e5      	b.n	8005350 <_dtoa_r+0x338>
 8005384:	f000 80d2 	beq.w	800552c <_dtoa_r+0x514>
 8005388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800538c:	427c      	negs	r4, r7
 800538e:	4b6a      	ldr	r3, [pc, #424]	@ (8005538 <_dtoa_r+0x520>)
 8005390:	f004 020f 	and.w	r2, r4, #15
 8005394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f7fb f89c 	bl	80004d8 <__aeabi_dmul>
 80053a0:	2602      	movs	r6, #2
 80053a2:	2300      	movs	r3, #0
 80053a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a8:	4d64      	ldr	r5, [pc, #400]	@ (800553c <_dtoa_r+0x524>)
 80053aa:	1124      	asrs	r4, r4, #4
 80053ac:	2c00      	cmp	r4, #0
 80053ae:	f040 80b2 	bne.w	8005516 <_dtoa_r+0x4fe>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1d3      	bne.n	800535e <_dtoa_r+0x346>
 80053b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80b7 	beq.w	8005530 <_dtoa_r+0x518>
 80053c2:	2200      	movs	r2, #0
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005540 <_dtoa_r+0x528>)
 80053ca:	f7fb faf7 	bl	80009bc <__aeabi_dcmplt>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f000 80ae 	beq.w	8005530 <_dtoa_r+0x518>
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80aa 	beq.w	8005530 <_dtoa_r+0x518>
 80053dc:	9b08      	ldr	r3, [sp, #32]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dd37      	ble.n	8005452 <_dtoa_r+0x43a>
 80053e2:	1e7b      	subs	r3, r7, #1
 80053e4:	4620      	mov	r0, r4
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	2200      	movs	r2, #0
 80053ea:	4629      	mov	r1, r5
 80053ec:	4b55      	ldr	r3, [pc, #340]	@ (8005544 <_dtoa_r+0x52c>)
 80053ee:	f7fb f873 	bl	80004d8 <__aeabi_dmul>
 80053f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f6:	9c08      	ldr	r4, [sp, #32]
 80053f8:	3601      	adds	r6, #1
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7fb f802 	bl	8000404 <__aeabi_i2d>
 8005400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005404:	f7fb f868 	bl	80004d8 <__aeabi_dmul>
 8005408:	2200      	movs	r2, #0
 800540a:	4b4f      	ldr	r3, [pc, #316]	@ (8005548 <_dtoa_r+0x530>)
 800540c:	f7fa feae 	bl	800016c <__adddf3>
 8005410:	4605      	mov	r5, r0
 8005412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005416:	2c00      	cmp	r4, #0
 8005418:	f040 809a 	bne.w	8005550 <_dtoa_r+0x538>
 800541c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005420:	2200      	movs	r2, #0
 8005422:	4b4a      	ldr	r3, [pc, #296]	@ (800554c <_dtoa_r+0x534>)
 8005424:	f7fa fea0 	bl	8000168 <__aeabi_dsub>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005430:	462a      	mov	r2, r5
 8005432:	4633      	mov	r3, r6
 8005434:	f7fb fae0 	bl	80009f8 <__aeabi_dcmpgt>
 8005438:	2800      	cmp	r0, #0
 800543a:	f040 828e 	bne.w	800595a <_dtoa_r+0x942>
 800543e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005442:	462a      	mov	r2, r5
 8005444:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005448:	f7fb fab8 	bl	80009bc <__aeabi_dcmplt>
 800544c:	2800      	cmp	r0, #0
 800544e:	f040 8127 	bne.w	80056a0 <_dtoa_r+0x688>
 8005452:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800545a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800545c:	2b00      	cmp	r3, #0
 800545e:	f2c0 8163 	blt.w	8005728 <_dtoa_r+0x710>
 8005462:	2f0e      	cmp	r7, #14
 8005464:	f300 8160 	bgt.w	8005728 <_dtoa_r+0x710>
 8005468:	4b33      	ldr	r3, [pc, #204]	@ (8005538 <_dtoa_r+0x520>)
 800546a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800546e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005472:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005476:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005478:	2b00      	cmp	r3, #0
 800547a:	da03      	bge.n	8005484 <_dtoa_r+0x46c>
 800547c:	9b07      	ldr	r3, [sp, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f340 8100 	ble.w	8005684 <_dtoa_r+0x66c>
 8005484:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005488:	4656      	mov	r6, sl
 800548a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800548e:	4620      	mov	r0, r4
 8005490:	4629      	mov	r1, r5
 8005492:	f7fb f94b 	bl	800072c <__aeabi_ddiv>
 8005496:	f7fb facf 	bl	8000a38 <__aeabi_d2iz>
 800549a:	4680      	mov	r8, r0
 800549c:	f7fa ffb2 	bl	8000404 <__aeabi_i2d>
 80054a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054a4:	f7fb f818 	bl	80004d8 <__aeabi_dmul>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fa fe5a 	bl	8000168 <__aeabi_dsub>
 80054b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80054b8:	9d07      	ldr	r5, [sp, #28]
 80054ba:	f806 4b01 	strb.w	r4, [r6], #1
 80054be:	eba6 040a 	sub.w	r4, r6, sl
 80054c2:	42a5      	cmp	r5, r4
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	f040 8116 	bne.w	80056f8 <_dtoa_r+0x6e0>
 80054cc:	f7fa fe4e 	bl	800016c <__adddf3>
 80054d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d4:	4604      	mov	r4, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	f7fb fa8e 	bl	80009f8 <__aeabi_dcmpgt>
 80054dc:	2800      	cmp	r0, #0
 80054de:	f040 80f8 	bne.w	80056d2 <_dtoa_r+0x6ba>
 80054e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054e6:	4620      	mov	r0, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	f7fb fa5d 	bl	80009a8 <__aeabi_dcmpeq>
 80054ee:	b118      	cbz	r0, 80054f8 <_dtoa_r+0x4e0>
 80054f0:	f018 0f01 	tst.w	r8, #1
 80054f4:	f040 80ed 	bne.w	80056d2 <_dtoa_r+0x6ba>
 80054f8:	4649      	mov	r1, r9
 80054fa:	4658      	mov	r0, fp
 80054fc:	f000 fc92 	bl	8005e24 <_Bfree>
 8005500:	2300      	movs	r3, #0
 8005502:	7033      	strb	r3, [r6, #0]
 8005504:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005506:	3701      	adds	r7, #1
 8005508:	601f      	str	r7, [r3, #0]
 800550a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8320 	beq.w	8005b52 <_dtoa_r+0xb3a>
 8005512:	601e      	str	r6, [r3, #0]
 8005514:	e31d      	b.n	8005b52 <_dtoa_r+0xb3a>
 8005516:	07e2      	lsls	r2, r4, #31
 8005518:	d505      	bpl.n	8005526 <_dtoa_r+0x50e>
 800551a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800551e:	f7fa ffdb 	bl	80004d8 <__aeabi_dmul>
 8005522:	2301      	movs	r3, #1
 8005524:	3601      	adds	r6, #1
 8005526:	1064      	asrs	r4, r4, #1
 8005528:	3508      	adds	r5, #8
 800552a:	e73f      	b.n	80053ac <_dtoa_r+0x394>
 800552c:	2602      	movs	r6, #2
 800552e:	e742      	b.n	80053b6 <_dtoa_r+0x39e>
 8005530:	9c07      	ldr	r4, [sp, #28]
 8005532:	9704      	str	r7, [sp, #16]
 8005534:	e761      	b.n	80053fa <_dtoa_r+0x3e2>
 8005536:	bf00      	nop
 8005538:	08006cd0 	.word	0x08006cd0
 800553c:	08006ca8 	.word	0x08006ca8
 8005540:	3ff00000 	.word	0x3ff00000
 8005544:	40240000 	.word	0x40240000
 8005548:	401c0000 	.word	0x401c0000
 800554c:	40140000 	.word	0x40140000
 8005550:	4b70      	ldr	r3, [pc, #448]	@ (8005714 <_dtoa_r+0x6fc>)
 8005552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005554:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800555c:	4454      	add	r4, sl
 800555e:	2900      	cmp	r1, #0
 8005560:	d045      	beq.n	80055ee <_dtoa_r+0x5d6>
 8005562:	2000      	movs	r0, #0
 8005564:	496c      	ldr	r1, [pc, #432]	@ (8005718 <_dtoa_r+0x700>)
 8005566:	f7fb f8e1 	bl	800072c <__aeabi_ddiv>
 800556a:	4633      	mov	r3, r6
 800556c:	462a      	mov	r2, r5
 800556e:	f7fa fdfb 	bl	8000168 <__aeabi_dsub>
 8005572:	4656      	mov	r6, sl
 8005574:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800557c:	f7fb fa5c 	bl	8000a38 <__aeabi_d2iz>
 8005580:	4605      	mov	r5, r0
 8005582:	f7fa ff3f 	bl	8000404 <__aeabi_i2d>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800558e:	f7fa fdeb 	bl	8000168 <__aeabi_dsub>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	3530      	adds	r5, #48	@ 0x30
 8005598:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800559c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055a0:	f806 5b01 	strb.w	r5, [r6], #1
 80055a4:	f7fb fa0a 	bl	80009bc <__aeabi_dcmplt>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d163      	bne.n	8005674 <_dtoa_r+0x65c>
 80055ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b0:	2000      	movs	r0, #0
 80055b2:	495a      	ldr	r1, [pc, #360]	@ (800571c <_dtoa_r+0x704>)
 80055b4:	f7fa fdd8 	bl	8000168 <__aeabi_dsub>
 80055b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055bc:	f7fb f9fe 	bl	80009bc <__aeabi_dcmplt>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f040 8087 	bne.w	80056d4 <_dtoa_r+0x6bc>
 80055c6:	42a6      	cmp	r6, r4
 80055c8:	f43f af43 	beq.w	8005452 <_dtoa_r+0x43a>
 80055cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055d0:	2200      	movs	r2, #0
 80055d2:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <_dtoa_r+0x708>)
 80055d4:	f7fa ff80 	bl	80004d8 <__aeabi_dmul>
 80055d8:	2200      	movs	r2, #0
 80055da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005720 <_dtoa_r+0x708>)
 80055e4:	f7fa ff78 	bl	80004d8 <__aeabi_dmul>
 80055e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ec:	e7c4      	b.n	8005578 <_dtoa_r+0x560>
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	f7fa ff71 	bl	80004d8 <__aeabi_dmul>
 80055f6:	4656      	mov	r6, sl
 80055f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005602:	f7fb fa19 	bl	8000a38 <__aeabi_d2iz>
 8005606:	4605      	mov	r5, r0
 8005608:	f7fa fefc 	bl	8000404 <__aeabi_i2d>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005614:	f7fa fda8 	bl	8000168 <__aeabi_dsub>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	3530      	adds	r5, #48	@ 0x30
 800561e:	f806 5b01 	strb.w	r5, [r6], #1
 8005622:	42a6      	cmp	r6, r4
 8005624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	d124      	bne.n	8005678 <_dtoa_r+0x660>
 800562e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005632:	4b39      	ldr	r3, [pc, #228]	@ (8005718 <_dtoa_r+0x700>)
 8005634:	f7fa fd9a 	bl	800016c <__adddf3>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005640:	f7fb f9da 	bl	80009f8 <__aeabi_dcmpgt>
 8005644:	2800      	cmp	r0, #0
 8005646:	d145      	bne.n	80056d4 <_dtoa_r+0x6bc>
 8005648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800564c:	2000      	movs	r0, #0
 800564e:	4932      	ldr	r1, [pc, #200]	@ (8005718 <_dtoa_r+0x700>)
 8005650:	f7fa fd8a 	bl	8000168 <__aeabi_dsub>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565c:	f7fb f9ae 	bl	80009bc <__aeabi_dcmplt>
 8005660:	2800      	cmp	r0, #0
 8005662:	f43f aef6 	beq.w	8005452 <_dtoa_r+0x43a>
 8005666:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005668:	1e73      	subs	r3, r6, #1
 800566a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800566c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005670:	2b30      	cmp	r3, #48	@ 0x30
 8005672:	d0f8      	beq.n	8005666 <_dtoa_r+0x64e>
 8005674:	9f04      	ldr	r7, [sp, #16]
 8005676:	e73f      	b.n	80054f8 <_dtoa_r+0x4e0>
 8005678:	4b29      	ldr	r3, [pc, #164]	@ (8005720 <_dtoa_r+0x708>)
 800567a:	f7fa ff2d 	bl	80004d8 <__aeabi_dmul>
 800567e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005682:	e7bc      	b.n	80055fe <_dtoa_r+0x5e6>
 8005684:	d10c      	bne.n	80056a0 <_dtoa_r+0x688>
 8005686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568a:	2200      	movs	r2, #0
 800568c:	4b25      	ldr	r3, [pc, #148]	@ (8005724 <_dtoa_r+0x70c>)
 800568e:	f7fa ff23 	bl	80004d8 <__aeabi_dmul>
 8005692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005696:	f7fb f9a5 	bl	80009e4 <__aeabi_dcmpge>
 800569a:	2800      	cmp	r0, #0
 800569c:	f000 815b 	beq.w	8005956 <_dtoa_r+0x93e>
 80056a0:	2400      	movs	r4, #0
 80056a2:	4625      	mov	r5, r4
 80056a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056a6:	4656      	mov	r6, sl
 80056a8:	43db      	mvns	r3, r3
 80056aa:	9304      	str	r3, [sp, #16]
 80056ac:	2700      	movs	r7, #0
 80056ae:	4621      	mov	r1, r4
 80056b0:	4658      	mov	r0, fp
 80056b2:	f000 fbb7 	bl	8005e24 <_Bfree>
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	d0dc      	beq.n	8005674 <_dtoa_r+0x65c>
 80056ba:	b12f      	cbz	r7, 80056c8 <_dtoa_r+0x6b0>
 80056bc:	42af      	cmp	r7, r5
 80056be:	d003      	beq.n	80056c8 <_dtoa_r+0x6b0>
 80056c0:	4639      	mov	r1, r7
 80056c2:	4658      	mov	r0, fp
 80056c4:	f000 fbae 	bl	8005e24 <_Bfree>
 80056c8:	4629      	mov	r1, r5
 80056ca:	4658      	mov	r0, fp
 80056cc:	f000 fbaa 	bl	8005e24 <_Bfree>
 80056d0:	e7d0      	b.n	8005674 <_dtoa_r+0x65c>
 80056d2:	9704      	str	r7, [sp, #16]
 80056d4:	4633      	mov	r3, r6
 80056d6:	461e      	mov	r6, r3
 80056d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056dc:	2a39      	cmp	r2, #57	@ 0x39
 80056de:	d107      	bne.n	80056f0 <_dtoa_r+0x6d8>
 80056e0:	459a      	cmp	sl, r3
 80056e2:	d1f8      	bne.n	80056d6 <_dtoa_r+0x6be>
 80056e4:	9a04      	ldr	r2, [sp, #16]
 80056e6:	3201      	adds	r2, #1
 80056e8:	9204      	str	r2, [sp, #16]
 80056ea:	2230      	movs	r2, #48	@ 0x30
 80056ec:	f88a 2000 	strb.w	r2, [sl]
 80056f0:	781a      	ldrb	r2, [r3, #0]
 80056f2:	3201      	adds	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	e7bd      	b.n	8005674 <_dtoa_r+0x65c>
 80056f8:	2200      	movs	r2, #0
 80056fa:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <_dtoa_r+0x708>)
 80056fc:	f7fa feec 	bl	80004d8 <__aeabi_dmul>
 8005700:	2200      	movs	r2, #0
 8005702:	2300      	movs	r3, #0
 8005704:	4604      	mov	r4, r0
 8005706:	460d      	mov	r5, r1
 8005708:	f7fb f94e 	bl	80009a8 <__aeabi_dcmpeq>
 800570c:	2800      	cmp	r0, #0
 800570e:	f43f aebc 	beq.w	800548a <_dtoa_r+0x472>
 8005712:	e6f1      	b.n	80054f8 <_dtoa_r+0x4e0>
 8005714:	08006cd0 	.word	0x08006cd0
 8005718:	3fe00000 	.word	0x3fe00000
 800571c:	3ff00000 	.word	0x3ff00000
 8005720:	40240000 	.word	0x40240000
 8005724:	40140000 	.word	0x40140000
 8005728:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800572a:	2a00      	cmp	r2, #0
 800572c:	f000 80db 	beq.w	80058e6 <_dtoa_r+0x8ce>
 8005730:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005732:	2a01      	cmp	r2, #1
 8005734:	f300 80bf 	bgt.w	80058b6 <_dtoa_r+0x89e>
 8005738:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800573a:	2a00      	cmp	r2, #0
 800573c:	f000 80b7 	beq.w	80058ae <_dtoa_r+0x896>
 8005740:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005744:	4646      	mov	r6, r8
 8005746:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800574a:	2101      	movs	r1, #1
 800574c:	441a      	add	r2, r3
 800574e:	4658      	mov	r0, fp
 8005750:	4498      	add	r8, r3
 8005752:	9209      	str	r2, [sp, #36]	@ 0x24
 8005754:	f000 fc1a 	bl	8005f8c <__i2b>
 8005758:	4605      	mov	r5, r0
 800575a:	b15e      	cbz	r6, 8005774 <_dtoa_r+0x75c>
 800575c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	dd08      	ble.n	8005774 <_dtoa_r+0x75c>
 8005762:	42b3      	cmp	r3, r6
 8005764:	bfa8      	it	ge
 8005766:	4633      	movge	r3, r6
 8005768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800576a:	eba8 0803 	sub.w	r8, r8, r3
 800576e:	1af6      	subs	r6, r6, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	9309      	str	r3, [sp, #36]	@ 0x24
 8005774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005776:	b1f3      	cbz	r3, 80057b6 <_dtoa_r+0x79e>
 8005778:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80b7 	beq.w	80058ee <_dtoa_r+0x8d6>
 8005780:	b18c      	cbz	r4, 80057a6 <_dtoa_r+0x78e>
 8005782:	4629      	mov	r1, r5
 8005784:	4622      	mov	r2, r4
 8005786:	4658      	mov	r0, fp
 8005788:	f000 fcbe 	bl	8006108 <__pow5mult>
 800578c:	464a      	mov	r2, r9
 800578e:	4601      	mov	r1, r0
 8005790:	4605      	mov	r5, r0
 8005792:	4658      	mov	r0, fp
 8005794:	f000 fc10 	bl	8005fb8 <__multiply>
 8005798:	4649      	mov	r1, r9
 800579a:	9004      	str	r0, [sp, #16]
 800579c:	4658      	mov	r0, fp
 800579e:	f000 fb41 	bl	8005e24 <_Bfree>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	4699      	mov	r9, r3
 80057a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057a8:	1b1a      	subs	r2, r3, r4
 80057aa:	d004      	beq.n	80057b6 <_dtoa_r+0x79e>
 80057ac:	4649      	mov	r1, r9
 80057ae:	4658      	mov	r0, fp
 80057b0:	f000 fcaa 	bl	8006108 <__pow5mult>
 80057b4:	4681      	mov	r9, r0
 80057b6:	2101      	movs	r1, #1
 80057b8:	4658      	mov	r0, fp
 80057ba:	f000 fbe7 	bl	8005f8c <__i2b>
 80057be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057c0:	4604      	mov	r4, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 81c9 	beq.w	8005b5a <_dtoa_r+0xb42>
 80057c8:	461a      	mov	r2, r3
 80057ca:	4601      	mov	r1, r0
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 fc9b 	bl	8006108 <__pow5mult>
 80057d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057d4:	4604      	mov	r4, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	f300 808f 	bgt.w	80058fa <_dtoa_r+0x8e2>
 80057dc:	9b02      	ldr	r3, [sp, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 8087 	bne.w	80058f2 <_dtoa_r+0x8da>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 8083 	bne.w	80058f6 <_dtoa_r+0x8de>
 80057f0:	9b03      	ldr	r3, [sp, #12]
 80057f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057f6:	0d1b      	lsrs	r3, r3, #20
 80057f8:	051b      	lsls	r3, r3, #20
 80057fa:	b12b      	cbz	r3, 8005808 <_dtoa_r+0x7f0>
 80057fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fe:	f108 0801 	add.w	r8, r8, #1
 8005802:	3301      	adds	r3, #1
 8005804:	9309      	str	r3, [sp, #36]	@ 0x24
 8005806:	2301      	movs	r3, #1
 8005808:	930a      	str	r3, [sp, #40]	@ 0x28
 800580a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 81aa 	beq.w	8005b66 <_dtoa_r+0xb4e>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005818:	6918      	ldr	r0, [r3, #16]
 800581a:	f000 fb6b 	bl	8005ef4 <__hi0bits>
 800581e:	f1c0 0020 	rsb	r0, r0, #32
 8005822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005824:	4418      	add	r0, r3
 8005826:	f010 001f 	ands.w	r0, r0, #31
 800582a:	d071      	beq.n	8005910 <_dtoa_r+0x8f8>
 800582c:	f1c0 0320 	rsb	r3, r0, #32
 8005830:	2b04      	cmp	r3, #4
 8005832:	dd65      	ble.n	8005900 <_dtoa_r+0x8e8>
 8005834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005836:	f1c0 001c 	rsb	r0, r0, #28
 800583a:	4403      	add	r3, r0
 800583c:	4480      	add	r8, r0
 800583e:	4406      	add	r6, r0
 8005840:	9309      	str	r3, [sp, #36]	@ 0x24
 8005842:	f1b8 0f00 	cmp.w	r8, #0
 8005846:	dd05      	ble.n	8005854 <_dtoa_r+0x83c>
 8005848:	4649      	mov	r1, r9
 800584a:	4642      	mov	r2, r8
 800584c:	4658      	mov	r0, fp
 800584e:	f000 fcb5 	bl	80061bc <__lshift>
 8005852:	4681      	mov	r9, r0
 8005854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	dd05      	ble.n	8005866 <_dtoa_r+0x84e>
 800585a:	4621      	mov	r1, r4
 800585c:	461a      	mov	r2, r3
 800585e:	4658      	mov	r0, fp
 8005860:	f000 fcac 	bl	80061bc <__lshift>
 8005864:	4604      	mov	r4, r0
 8005866:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d053      	beq.n	8005914 <_dtoa_r+0x8fc>
 800586c:	4621      	mov	r1, r4
 800586e:	4648      	mov	r0, r9
 8005870:	f000 fd10 	bl	8006294 <__mcmp>
 8005874:	2800      	cmp	r0, #0
 8005876:	da4d      	bge.n	8005914 <_dtoa_r+0x8fc>
 8005878:	1e7b      	subs	r3, r7, #1
 800587a:	4649      	mov	r1, r9
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	220a      	movs	r2, #10
 8005880:	2300      	movs	r3, #0
 8005882:	4658      	mov	r0, fp
 8005884:	f000 faf0 	bl	8005e68 <__multadd>
 8005888:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800588a:	4681      	mov	r9, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 816c 	beq.w	8005b6a <_dtoa_r+0xb52>
 8005892:	2300      	movs	r3, #0
 8005894:	4629      	mov	r1, r5
 8005896:	220a      	movs	r2, #10
 8005898:	4658      	mov	r0, fp
 800589a:	f000 fae5 	bl	8005e68 <__multadd>
 800589e:	9b08      	ldr	r3, [sp, #32]
 80058a0:	4605      	mov	r5, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dc61      	bgt.n	800596a <_dtoa_r+0x952>
 80058a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	dc3b      	bgt.n	8005924 <_dtoa_r+0x90c>
 80058ac:	e05d      	b.n	800596a <_dtoa_r+0x952>
 80058ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058b0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80058b4:	e746      	b.n	8005744 <_dtoa_r+0x72c>
 80058b6:	9b07      	ldr	r3, [sp, #28]
 80058b8:	1e5c      	subs	r4, r3, #1
 80058ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058bc:	42a3      	cmp	r3, r4
 80058be:	bfbf      	itttt	lt
 80058c0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80058c2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80058c4:	1ae3      	sublt	r3, r4, r3
 80058c6:	18d2      	addlt	r2, r2, r3
 80058c8:	bfa8      	it	ge
 80058ca:	1b1c      	subge	r4, r3, r4
 80058cc:	9b07      	ldr	r3, [sp, #28]
 80058ce:	bfbe      	ittt	lt
 80058d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80058d2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80058d4:	2400      	movlt	r4, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb5      	itete	lt
 80058da:	eba8 0603 	sublt.w	r6, r8, r3
 80058de:	4646      	movge	r6, r8
 80058e0:	2300      	movlt	r3, #0
 80058e2:	9b07      	ldrge	r3, [sp, #28]
 80058e4:	e730      	b.n	8005748 <_dtoa_r+0x730>
 80058e6:	4646      	mov	r6, r8
 80058e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058ec:	e735      	b.n	800575a <_dtoa_r+0x742>
 80058ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058f0:	e75c      	b.n	80057ac <_dtoa_r+0x794>
 80058f2:	2300      	movs	r3, #0
 80058f4:	e788      	b.n	8005808 <_dtoa_r+0x7f0>
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	e786      	b.n	8005808 <_dtoa_r+0x7f0>
 80058fa:	2300      	movs	r3, #0
 80058fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80058fe:	e788      	b.n	8005812 <_dtoa_r+0x7fa>
 8005900:	d09f      	beq.n	8005842 <_dtoa_r+0x82a>
 8005902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005904:	331c      	adds	r3, #28
 8005906:	441a      	add	r2, r3
 8005908:	4498      	add	r8, r3
 800590a:	441e      	add	r6, r3
 800590c:	9209      	str	r2, [sp, #36]	@ 0x24
 800590e:	e798      	b.n	8005842 <_dtoa_r+0x82a>
 8005910:	4603      	mov	r3, r0
 8005912:	e7f6      	b.n	8005902 <_dtoa_r+0x8ea>
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	9704      	str	r7, [sp, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dc20      	bgt.n	800595e <_dtoa_r+0x946>
 800591c:	9308      	str	r3, [sp, #32]
 800591e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005920:	2b02      	cmp	r3, #2
 8005922:	dd1e      	ble.n	8005962 <_dtoa_r+0x94a>
 8005924:	9b08      	ldr	r3, [sp, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f47f aebc 	bne.w	80056a4 <_dtoa_r+0x68c>
 800592c:	4621      	mov	r1, r4
 800592e:	2205      	movs	r2, #5
 8005930:	4658      	mov	r0, fp
 8005932:	f000 fa99 	bl	8005e68 <__multadd>
 8005936:	4601      	mov	r1, r0
 8005938:	4604      	mov	r4, r0
 800593a:	4648      	mov	r0, r9
 800593c:	f000 fcaa 	bl	8006294 <__mcmp>
 8005940:	2800      	cmp	r0, #0
 8005942:	f77f aeaf 	ble.w	80056a4 <_dtoa_r+0x68c>
 8005946:	2331      	movs	r3, #49	@ 0x31
 8005948:	4656      	mov	r6, sl
 800594a:	f806 3b01 	strb.w	r3, [r6], #1
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	3301      	adds	r3, #1
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	e6aa      	b.n	80056ac <_dtoa_r+0x694>
 8005956:	9c07      	ldr	r4, [sp, #28]
 8005958:	9704      	str	r7, [sp, #16]
 800595a:	4625      	mov	r5, r4
 800595c:	e7f3      	b.n	8005946 <_dtoa_r+0x92e>
 800595e:	9b07      	ldr	r3, [sp, #28]
 8005960:	9308      	str	r3, [sp, #32]
 8005962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8104 	beq.w	8005b72 <_dtoa_r+0xb5a>
 800596a:	2e00      	cmp	r6, #0
 800596c:	dd05      	ble.n	800597a <_dtoa_r+0x962>
 800596e:	4629      	mov	r1, r5
 8005970:	4632      	mov	r2, r6
 8005972:	4658      	mov	r0, fp
 8005974:	f000 fc22 	bl	80061bc <__lshift>
 8005978:	4605      	mov	r5, r0
 800597a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05a      	beq.n	8005a36 <_dtoa_r+0xa1e>
 8005980:	4658      	mov	r0, fp
 8005982:	6869      	ldr	r1, [r5, #4]
 8005984:	f000 fa0e 	bl	8005da4 <_Balloc>
 8005988:	4606      	mov	r6, r0
 800598a:	b928      	cbnz	r0, 8005998 <_dtoa_r+0x980>
 800598c:	4602      	mov	r2, r0
 800598e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005992:	4b83      	ldr	r3, [pc, #524]	@ (8005ba0 <_dtoa_r+0xb88>)
 8005994:	f7ff bb54 	b.w	8005040 <_dtoa_r+0x28>
 8005998:	692a      	ldr	r2, [r5, #16]
 800599a:	f105 010c 	add.w	r1, r5, #12
 800599e:	3202      	adds	r2, #2
 80059a0:	0092      	lsls	r2, r2, #2
 80059a2:	300c      	adds	r0, #12
 80059a4:	f000 feba 	bl	800671c <memcpy>
 80059a8:	2201      	movs	r2, #1
 80059aa:	4631      	mov	r1, r6
 80059ac:	4658      	mov	r0, fp
 80059ae:	f000 fc05 	bl	80061bc <__lshift>
 80059b2:	462f      	mov	r7, r5
 80059b4:	4605      	mov	r5, r0
 80059b6:	f10a 0301 	add.w	r3, sl, #1
 80059ba:	9307      	str	r3, [sp, #28]
 80059bc:	9b08      	ldr	r3, [sp, #32]
 80059be:	4453      	add	r3, sl
 80059c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059c2:	9b02      	ldr	r3, [sp, #8]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ca:	9b07      	ldr	r3, [sp, #28]
 80059cc:	4621      	mov	r1, r4
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4648      	mov	r0, r9
 80059d2:	9302      	str	r3, [sp, #8]
 80059d4:	f7ff fa95 	bl	8004f02 <quorem>
 80059d8:	4639      	mov	r1, r7
 80059da:	9008      	str	r0, [sp, #32]
 80059dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059e0:	4648      	mov	r0, r9
 80059e2:	f000 fc57 	bl	8006294 <__mcmp>
 80059e6:	462a      	mov	r2, r5
 80059e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80059ea:	4621      	mov	r1, r4
 80059ec:	4658      	mov	r0, fp
 80059ee:	f000 fc6d 	bl	80062cc <__mdiff>
 80059f2:	68c2      	ldr	r2, [r0, #12]
 80059f4:	4606      	mov	r6, r0
 80059f6:	bb02      	cbnz	r2, 8005a3a <_dtoa_r+0xa22>
 80059f8:	4601      	mov	r1, r0
 80059fa:	4648      	mov	r0, r9
 80059fc:	f000 fc4a 	bl	8006294 <__mcmp>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4631      	mov	r1, r6
 8005a04:	4658      	mov	r0, fp
 8005a06:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a08:	f000 fa0c 	bl	8005e24 <_Bfree>
 8005a0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a10:	9e07      	ldr	r6, [sp, #28]
 8005a12:	ea43 0102 	orr.w	r1, r3, r2
 8005a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a18:	4319      	orrs	r1, r3
 8005a1a:	d110      	bne.n	8005a3e <_dtoa_r+0xa26>
 8005a1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a20:	d029      	beq.n	8005a76 <_dtoa_r+0xa5e>
 8005a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dd02      	ble.n	8005a2e <_dtoa_r+0xa16>
 8005a28:	9b08      	ldr	r3, [sp, #32]
 8005a2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005a2e:	9b02      	ldr	r3, [sp, #8]
 8005a30:	f883 8000 	strb.w	r8, [r3]
 8005a34:	e63b      	b.n	80056ae <_dtoa_r+0x696>
 8005a36:	4628      	mov	r0, r5
 8005a38:	e7bb      	b.n	80059b2 <_dtoa_r+0x99a>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	e7e1      	b.n	8005a02 <_dtoa_r+0x9ea>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db04      	blt.n	8005a4e <_dtoa_r+0xa36>
 8005a44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005a46:	430b      	orrs	r3, r1
 8005a48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	d120      	bne.n	8005a90 <_dtoa_r+0xa78>
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	dded      	ble.n	8005a2e <_dtoa_r+0xa16>
 8005a52:	4649      	mov	r1, r9
 8005a54:	2201      	movs	r2, #1
 8005a56:	4658      	mov	r0, fp
 8005a58:	f000 fbb0 	bl	80061bc <__lshift>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4681      	mov	r9, r0
 8005a60:	f000 fc18 	bl	8006294 <__mcmp>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	dc03      	bgt.n	8005a70 <_dtoa_r+0xa58>
 8005a68:	d1e1      	bne.n	8005a2e <_dtoa_r+0xa16>
 8005a6a:	f018 0f01 	tst.w	r8, #1
 8005a6e:	d0de      	beq.n	8005a2e <_dtoa_r+0xa16>
 8005a70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a74:	d1d8      	bne.n	8005a28 <_dtoa_r+0xa10>
 8005a76:	2339      	movs	r3, #57	@ 0x39
 8005a78:	9a02      	ldr	r2, [sp, #8]
 8005a7a:	7013      	strb	r3, [r2, #0]
 8005a7c:	4633      	mov	r3, r6
 8005a7e:	461e      	mov	r6, r3
 8005a80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2a39      	cmp	r2, #57	@ 0x39
 8005a88:	d052      	beq.n	8005b30 <_dtoa_r+0xb18>
 8005a8a:	3201      	adds	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e60e      	b.n	80056ae <_dtoa_r+0x696>
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	dd07      	ble.n	8005aa4 <_dtoa_r+0xa8c>
 8005a94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a98:	d0ed      	beq.n	8005a76 <_dtoa_r+0xa5e>
 8005a9a:	9a02      	ldr	r2, [sp, #8]
 8005a9c:	f108 0301 	add.w	r3, r8, #1
 8005aa0:	7013      	strb	r3, [r2, #0]
 8005aa2:	e604      	b.n	80056ae <_dtoa_r+0x696>
 8005aa4:	9b07      	ldr	r3, [sp, #28]
 8005aa6:	9a07      	ldr	r2, [sp, #28]
 8005aa8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005aac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d028      	beq.n	8005b04 <_dtoa_r+0xaec>
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	220a      	movs	r2, #10
 8005ab8:	4658      	mov	r0, fp
 8005aba:	f000 f9d5 	bl	8005e68 <__multadd>
 8005abe:	42af      	cmp	r7, r5
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	f04f 020a 	mov.w	r2, #10
 8005aca:	4639      	mov	r1, r7
 8005acc:	4658      	mov	r0, fp
 8005ace:	d107      	bne.n	8005ae0 <_dtoa_r+0xac8>
 8005ad0:	f000 f9ca 	bl	8005e68 <__multadd>
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	9b07      	ldr	r3, [sp, #28]
 8005ada:	3301      	adds	r3, #1
 8005adc:	9307      	str	r3, [sp, #28]
 8005ade:	e774      	b.n	80059ca <_dtoa_r+0x9b2>
 8005ae0:	f000 f9c2 	bl	8005e68 <__multadd>
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	220a      	movs	r2, #10
 8005aec:	4658      	mov	r0, fp
 8005aee:	f000 f9bb 	bl	8005e68 <__multadd>
 8005af2:	4605      	mov	r5, r0
 8005af4:	e7f0      	b.n	8005ad8 <_dtoa_r+0xac0>
 8005af6:	9b08      	ldr	r3, [sp, #32]
 8005af8:	2700      	movs	r7, #0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bfcc      	ite	gt
 8005afe:	461e      	movgt	r6, r3
 8005b00:	2601      	movle	r6, #1
 8005b02:	4456      	add	r6, sl
 8005b04:	4649      	mov	r1, r9
 8005b06:	2201      	movs	r2, #1
 8005b08:	4658      	mov	r0, fp
 8005b0a:	f000 fb57 	bl	80061bc <__lshift>
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4681      	mov	r9, r0
 8005b12:	f000 fbbf 	bl	8006294 <__mcmp>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	dcb0      	bgt.n	8005a7c <_dtoa_r+0xa64>
 8005b1a:	d102      	bne.n	8005b22 <_dtoa_r+0xb0a>
 8005b1c:	f018 0f01 	tst.w	r8, #1
 8005b20:	d1ac      	bne.n	8005a7c <_dtoa_r+0xa64>
 8005b22:	4633      	mov	r3, r6
 8005b24:	461e      	mov	r6, r3
 8005b26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b2a:	2a30      	cmp	r2, #48	@ 0x30
 8005b2c:	d0fa      	beq.n	8005b24 <_dtoa_r+0xb0c>
 8005b2e:	e5be      	b.n	80056ae <_dtoa_r+0x696>
 8005b30:	459a      	cmp	sl, r3
 8005b32:	d1a4      	bne.n	8005a7e <_dtoa_r+0xa66>
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	3301      	adds	r3, #1
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	2331      	movs	r3, #49	@ 0x31
 8005b3c:	f88a 3000 	strb.w	r3, [sl]
 8005b40:	e5b5      	b.n	80056ae <_dtoa_r+0x696>
 8005b42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ba4 <_dtoa_r+0xb8c>
 8005b48:	b11b      	cbz	r3, 8005b52 <_dtoa_r+0xb3a>
 8005b4a:	f10a 0308 	add.w	r3, sl, #8
 8005b4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4650      	mov	r0, sl
 8005b54:	b017      	add	sp, #92	@ 0x5c
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f77f ae3d 	ble.w	80057dc <_dtoa_r+0x7c4>
 8005b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b64:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b66:	2001      	movs	r0, #1
 8005b68:	e65b      	b.n	8005822 <_dtoa_r+0x80a>
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f77f aed6 	ble.w	800591e <_dtoa_r+0x906>
 8005b72:	4656      	mov	r6, sl
 8005b74:	4621      	mov	r1, r4
 8005b76:	4648      	mov	r0, r9
 8005b78:	f7ff f9c3 	bl	8004f02 <quorem>
 8005b7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b80:	9b08      	ldr	r3, [sp, #32]
 8005b82:	f806 8b01 	strb.w	r8, [r6], #1
 8005b86:	eba6 020a 	sub.w	r2, r6, sl
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	ddb3      	ble.n	8005af6 <_dtoa_r+0xade>
 8005b8e:	4649      	mov	r1, r9
 8005b90:	2300      	movs	r3, #0
 8005b92:	220a      	movs	r2, #10
 8005b94:	4658      	mov	r0, fp
 8005b96:	f000 f967 	bl	8005e68 <__multadd>
 8005b9a:	4681      	mov	r9, r0
 8005b9c:	e7ea      	b.n	8005b74 <_dtoa_r+0xb5c>
 8005b9e:	bf00      	nop
 8005ba0:	08006c32 	.word	0x08006c32
 8005ba4:	08006bb6 	.word	0x08006bb6

08005ba8 <_free_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4605      	mov	r5, r0
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d040      	beq.n	8005c32 <_free_r+0x8a>
 8005bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb4:	1f0c      	subs	r4, r1, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bfb8      	it	lt
 8005bba:	18e4      	addlt	r4, r4, r3
 8005bbc:	f000 f8e6 	bl	8005d8c <__malloc_lock>
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <_free_r+0x8c>)
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	b933      	cbnz	r3, 8005bd4 <_free_r+0x2c>
 8005bc6:	6063      	str	r3, [r4, #4]
 8005bc8:	6014      	str	r4, [r2, #0]
 8005bca:	4628      	mov	r0, r5
 8005bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd0:	f000 b8e2 	b.w	8005d98 <__malloc_unlock>
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d908      	bls.n	8005bea <_free_r+0x42>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	1821      	adds	r1, r4, r0
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	bf01      	itttt	eq
 8005be0:	6819      	ldreq	r1, [r3, #0]
 8005be2:	685b      	ldreq	r3, [r3, #4]
 8005be4:	1809      	addeq	r1, r1, r0
 8005be6:	6021      	streq	r1, [r4, #0]
 8005be8:	e7ed      	b.n	8005bc6 <_free_r+0x1e>
 8005bea:	461a      	mov	r2, r3
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b10b      	cbz	r3, 8005bf4 <_free_r+0x4c>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d9fa      	bls.n	8005bea <_free_r+0x42>
 8005bf4:	6811      	ldr	r1, [r2, #0]
 8005bf6:	1850      	adds	r0, r2, r1
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d10b      	bne.n	8005c14 <_free_r+0x6c>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	4401      	add	r1, r0
 8005c00:	1850      	adds	r0, r2, r1
 8005c02:	4283      	cmp	r3, r0
 8005c04:	6011      	str	r1, [r2, #0]
 8005c06:	d1e0      	bne.n	8005bca <_free_r+0x22>
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4408      	add	r0, r1
 8005c0e:	6010      	str	r0, [r2, #0]
 8005c10:	6053      	str	r3, [r2, #4]
 8005c12:	e7da      	b.n	8005bca <_free_r+0x22>
 8005c14:	d902      	bls.n	8005c1c <_free_r+0x74>
 8005c16:	230c      	movs	r3, #12
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	e7d6      	b.n	8005bca <_free_r+0x22>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	1821      	adds	r1, r4, r0
 8005c20:	428b      	cmp	r3, r1
 8005c22:	bf01      	itttt	eq
 8005c24:	6819      	ldreq	r1, [r3, #0]
 8005c26:	685b      	ldreq	r3, [r3, #4]
 8005c28:	1809      	addeq	r1, r1, r0
 8005c2a:	6021      	streq	r1, [r4, #0]
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	6054      	str	r4, [r2, #4]
 8005c30:	e7cb      	b.n	8005bca <_free_r+0x22>
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	2000049c 	.word	0x2000049c

08005c38 <malloc>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	@ (8005c44 <malloc+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f000 b825 	b.w	8005c8c <_malloc_r>
 8005c42:	bf00      	nop
 8005c44:	20000020 	.word	0x20000020

08005c48 <sbrk_aligned>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c88 <sbrk_aligned+0x40>)
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	6831      	ldr	r1, [r6, #0]
 8005c50:	4605      	mov	r5, r0
 8005c52:	b911      	cbnz	r1, 8005c5a <sbrk_aligned+0x12>
 8005c54:	f000 fd52 	bl	80066fc <_sbrk_r>
 8005c58:	6030      	str	r0, [r6, #0]
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 fd4d 	bl	80066fc <_sbrk_r>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	d103      	bne.n	8005c6e <sbrk_aligned+0x26>
 8005c66:	f04f 34ff 	mov.w	r4, #4294967295
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	1cc4      	adds	r4, r0, #3
 8005c70:	f024 0403 	bic.w	r4, r4, #3
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d0f8      	beq.n	8005c6a <sbrk_aligned+0x22>
 8005c78:	1a21      	subs	r1, r4, r0
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 fd3e 	bl	80066fc <_sbrk_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d1f2      	bne.n	8005c6a <sbrk_aligned+0x22>
 8005c84:	e7ef      	b.n	8005c66 <sbrk_aligned+0x1e>
 8005c86:	bf00      	nop
 8005c88:	20000498 	.word	0x20000498

08005c8c <_malloc_r>:
 8005c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c90:	1ccd      	adds	r5, r1, #3
 8005c92:	f025 0503 	bic.w	r5, r5, #3
 8005c96:	3508      	adds	r5, #8
 8005c98:	2d0c      	cmp	r5, #12
 8005c9a:	bf38      	it	cc
 8005c9c:	250c      	movcc	r5, #12
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	db01      	blt.n	8005ca8 <_malloc_r+0x1c>
 8005ca4:	42a9      	cmp	r1, r5
 8005ca6:	d904      	bls.n	8005cb2 <_malloc_r+0x26>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	2000      	movs	r0, #0
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d88 <_malloc_r+0xfc>
 8005cb6:	f000 f869 	bl	8005d8c <__malloc_lock>
 8005cba:	f8d8 3000 	ldr.w	r3, [r8]
 8005cbe:	461c      	mov	r4, r3
 8005cc0:	bb44      	cbnz	r4, 8005d14 <_malloc_r+0x88>
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f7ff ffbf 	bl	8005c48 <sbrk_aligned>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	4604      	mov	r4, r0
 8005cce:	d158      	bne.n	8005d82 <_malloc_r+0xf6>
 8005cd0:	f8d8 4000 	ldr.w	r4, [r8]
 8005cd4:	4627      	mov	r7, r4
 8005cd6:	2f00      	cmp	r7, #0
 8005cd8:	d143      	bne.n	8005d62 <_malloc_r+0xd6>
 8005cda:	2c00      	cmp	r4, #0
 8005cdc:	d04b      	beq.n	8005d76 <_malloc_r+0xea>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	eb04 0903 	add.w	r9, r4, r3
 8005ce8:	f000 fd08 	bl	80066fc <_sbrk_r>
 8005cec:	4581      	cmp	r9, r0
 8005cee:	d142      	bne.n	8005d76 <_malloc_r+0xea>
 8005cf0:	6821      	ldr	r1, [r4, #0]
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	1a6d      	subs	r5, r5, r1
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7ff ffa6 	bl	8005c48 <sbrk_aligned>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d03a      	beq.n	8005d76 <_malloc_r+0xea>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	442b      	add	r3, r5
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	f8d8 3000 	ldr.w	r3, [r8]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	bb62      	cbnz	r2, 8005d68 <_malloc_r+0xdc>
 8005d0e:	f8c8 7000 	str.w	r7, [r8]
 8005d12:	e00f      	b.n	8005d34 <_malloc_r+0xa8>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	1b52      	subs	r2, r2, r5
 8005d18:	d420      	bmi.n	8005d5c <_malloc_r+0xd0>
 8005d1a:	2a0b      	cmp	r2, #11
 8005d1c:	d917      	bls.n	8005d4e <_malloc_r+0xc2>
 8005d1e:	1961      	adds	r1, r4, r5
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	6025      	str	r5, [r4, #0]
 8005d24:	bf18      	it	ne
 8005d26:	6059      	strne	r1, [r3, #4]
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	bf08      	it	eq
 8005d2c:	f8c8 1000 	streq.w	r1, [r8]
 8005d30:	5162      	str	r2, [r4, r5]
 8005d32:	604b      	str	r3, [r1, #4]
 8005d34:	4630      	mov	r0, r6
 8005d36:	f000 f82f 	bl	8005d98 <__malloc_unlock>
 8005d3a:	f104 000b 	add.w	r0, r4, #11
 8005d3e:	1d23      	adds	r3, r4, #4
 8005d40:	f020 0007 	bic.w	r0, r0, #7
 8005d44:	1ac2      	subs	r2, r0, r3
 8005d46:	bf1c      	itt	ne
 8005d48:	1a1b      	subne	r3, r3, r0
 8005d4a:	50a3      	strne	r3, [r4, r2]
 8005d4c:	e7af      	b.n	8005cae <_malloc_r+0x22>
 8005d4e:	6862      	ldr	r2, [r4, #4]
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	bf0c      	ite	eq
 8005d54:	f8c8 2000 	streq.w	r2, [r8]
 8005d58:	605a      	strne	r2, [r3, #4]
 8005d5a:	e7eb      	b.n	8005d34 <_malloc_r+0xa8>
 8005d5c:	4623      	mov	r3, r4
 8005d5e:	6864      	ldr	r4, [r4, #4]
 8005d60:	e7ae      	b.n	8005cc0 <_malloc_r+0x34>
 8005d62:	463c      	mov	r4, r7
 8005d64:	687f      	ldr	r7, [r7, #4]
 8005d66:	e7b6      	b.n	8005cd6 <_malloc_r+0x4a>
 8005d68:	461a      	mov	r2, r3
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d1fb      	bne.n	8005d68 <_malloc_r+0xdc>
 8005d70:	2300      	movs	r3, #0
 8005d72:	6053      	str	r3, [r2, #4]
 8005d74:	e7de      	b.n	8005d34 <_malloc_r+0xa8>
 8005d76:	230c      	movs	r3, #12
 8005d78:	4630      	mov	r0, r6
 8005d7a:	6033      	str	r3, [r6, #0]
 8005d7c:	f000 f80c 	bl	8005d98 <__malloc_unlock>
 8005d80:	e794      	b.n	8005cac <_malloc_r+0x20>
 8005d82:	6005      	str	r5, [r0, #0]
 8005d84:	e7d6      	b.n	8005d34 <_malloc_r+0xa8>
 8005d86:	bf00      	nop
 8005d88:	2000049c 	.word	0x2000049c

08005d8c <__malloc_lock>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	@ (8005d94 <__malloc_lock+0x8>)
 8005d8e:	f7ff b8a8 	b.w	8004ee2 <__retarget_lock_acquire_recursive>
 8005d92:	bf00      	nop
 8005d94:	20000494 	.word	0x20000494

08005d98 <__malloc_unlock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	@ (8005da0 <__malloc_unlock+0x8>)
 8005d9a:	f7ff b8a3 	b.w	8004ee4 <__retarget_lock_release_recursive>
 8005d9e:	bf00      	nop
 8005da0:	20000494 	.word	0x20000494

08005da4 <_Balloc>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	69c6      	ldr	r6, [r0, #28]
 8005da8:	4604      	mov	r4, r0
 8005daa:	460d      	mov	r5, r1
 8005dac:	b976      	cbnz	r6, 8005dcc <_Balloc+0x28>
 8005dae:	2010      	movs	r0, #16
 8005db0:	f7ff ff42 	bl	8005c38 <malloc>
 8005db4:	4602      	mov	r2, r0
 8005db6:	61e0      	str	r0, [r4, #28]
 8005db8:	b920      	cbnz	r0, 8005dc4 <_Balloc+0x20>
 8005dba:	216b      	movs	r1, #107	@ 0x6b
 8005dbc:	4b17      	ldr	r3, [pc, #92]	@ (8005e1c <_Balloc+0x78>)
 8005dbe:	4818      	ldr	r0, [pc, #96]	@ (8005e20 <_Balloc+0x7c>)
 8005dc0:	f000 fcba 	bl	8006738 <__assert_func>
 8005dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dc8:	6006      	str	r6, [r0, #0]
 8005dca:	60c6      	str	r6, [r0, #12]
 8005dcc:	69e6      	ldr	r6, [r4, #28]
 8005dce:	68f3      	ldr	r3, [r6, #12]
 8005dd0:	b183      	cbz	r3, 8005df4 <_Balloc+0x50>
 8005dd2:	69e3      	ldr	r3, [r4, #28]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dda:	b9b8      	cbnz	r0, 8005e0c <_Balloc+0x68>
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f605 	lsl.w	r6, r1, r5
 8005de2:	1d72      	adds	r2, r6, #5
 8005de4:	4620      	mov	r0, r4
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	f000 fcc4 	bl	8006774 <_calloc_r>
 8005dec:	b160      	cbz	r0, 8005e08 <_Balloc+0x64>
 8005dee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005df2:	e00e      	b.n	8005e12 <_Balloc+0x6e>
 8005df4:	2221      	movs	r2, #33	@ 0x21
 8005df6:	2104      	movs	r1, #4
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fcbb 	bl	8006774 <_calloc_r>
 8005dfe:	69e3      	ldr	r3, [r4, #28]
 8005e00:	60f0      	str	r0, [r6, #12]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e4      	bne.n	8005dd2 <_Balloc+0x2e>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	6802      	ldr	r2, [r0, #0]
 8005e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e12:	2300      	movs	r3, #0
 8005e14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e18:	e7f7      	b.n	8005e0a <_Balloc+0x66>
 8005e1a:	bf00      	nop
 8005e1c:	08006bc3 	.word	0x08006bc3
 8005e20:	08006c43 	.word	0x08006c43

08005e24 <_Bfree>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	69c6      	ldr	r6, [r0, #28]
 8005e28:	4605      	mov	r5, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	b976      	cbnz	r6, 8005e4c <_Bfree+0x28>
 8005e2e:	2010      	movs	r0, #16
 8005e30:	f7ff ff02 	bl	8005c38 <malloc>
 8005e34:	4602      	mov	r2, r0
 8005e36:	61e8      	str	r0, [r5, #28]
 8005e38:	b920      	cbnz	r0, 8005e44 <_Bfree+0x20>
 8005e3a:	218f      	movs	r1, #143	@ 0x8f
 8005e3c:	4b08      	ldr	r3, [pc, #32]	@ (8005e60 <_Bfree+0x3c>)
 8005e3e:	4809      	ldr	r0, [pc, #36]	@ (8005e64 <_Bfree+0x40>)
 8005e40:	f000 fc7a 	bl	8006738 <__assert_func>
 8005e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e48:	6006      	str	r6, [r0, #0]
 8005e4a:	60c6      	str	r6, [r0, #12]
 8005e4c:	b13c      	cbz	r4, 8005e5e <_Bfree+0x3a>
 8005e4e:	69eb      	ldr	r3, [r5, #28]
 8005e50:	6862      	ldr	r2, [r4, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e58:	6021      	str	r1, [r4, #0]
 8005e5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	08006bc3 	.word	0x08006bc3
 8005e64:	08006c43 	.word	0x08006c43

08005e68 <__multadd>:
 8005e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	461e      	mov	r6, r3
 8005e72:	2000      	movs	r0, #0
 8005e74:	690d      	ldr	r5, [r1, #16]
 8005e76:	f101 0c14 	add.w	ip, r1, #20
 8005e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e7e:	3001      	adds	r0, #1
 8005e80:	b299      	uxth	r1, r3
 8005e82:	fb02 6101 	mla	r1, r2, r1, r6
 8005e86:	0c1e      	lsrs	r6, r3, #16
 8005e88:	0c0b      	lsrs	r3, r1, #16
 8005e8a:	fb02 3306 	mla	r3, r2, r6, r3
 8005e8e:	b289      	uxth	r1, r1
 8005e90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e94:	4285      	cmp	r5, r0
 8005e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e9e:	dcec      	bgt.n	8005e7a <__multadd+0x12>
 8005ea0:	b30e      	cbz	r6, 8005ee6 <__multadd+0x7e>
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dc19      	bgt.n	8005edc <__multadd+0x74>
 8005ea8:	6861      	ldr	r1, [r4, #4]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	3101      	adds	r1, #1
 8005eae:	f7ff ff79 	bl	8005da4 <_Balloc>
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	b928      	cbnz	r0, 8005ec2 <__multadd+0x5a>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	21ba      	movs	r1, #186	@ 0xba
 8005eba:	4b0c      	ldr	r3, [pc, #48]	@ (8005eec <__multadd+0x84>)
 8005ebc:	480c      	ldr	r0, [pc, #48]	@ (8005ef0 <__multadd+0x88>)
 8005ebe:	f000 fc3b 	bl	8006738 <__assert_func>
 8005ec2:	6922      	ldr	r2, [r4, #16]
 8005ec4:	f104 010c 	add.w	r1, r4, #12
 8005ec8:	3202      	adds	r2, #2
 8005eca:	0092      	lsls	r2, r2, #2
 8005ecc:	300c      	adds	r0, #12
 8005ece:	f000 fc25 	bl	800671c <memcpy>
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f7ff ffa5 	bl	8005e24 <_Bfree>
 8005eda:	4644      	mov	r4, r8
 8005edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	615e      	str	r6, [r3, #20]
 8005ee4:	6125      	str	r5, [r4, #16]
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eec:	08006c32 	.word	0x08006c32
 8005ef0:	08006c43 	.word	0x08006c43

08005ef4 <__hi0bits>:
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005efa:	bf3a      	itte	cc
 8005efc:	0403      	lslcc	r3, r0, #16
 8005efe:	2010      	movcc	r0, #16
 8005f00:	2000      	movcs	r0, #0
 8005f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f06:	bf3c      	itt	cc
 8005f08:	021b      	lslcc	r3, r3, #8
 8005f0a:	3008      	addcc	r0, #8
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f10:	bf3c      	itt	cc
 8005f12:	011b      	lslcc	r3, r3, #4
 8005f14:	3004      	addcc	r0, #4
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1a:	bf3c      	itt	cc
 8005f1c:	009b      	lslcc	r3, r3, #2
 8005f1e:	3002      	addcc	r0, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db05      	blt.n	8005f30 <__hi0bits+0x3c>
 8005f24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f28:	f100 0001 	add.w	r0, r0, #1
 8005f2c:	bf08      	it	eq
 8005f2e:	2020      	moveq	r0, #32
 8005f30:	4770      	bx	lr

08005f32 <__lo0bits>:
 8005f32:	6803      	ldr	r3, [r0, #0]
 8005f34:	4602      	mov	r2, r0
 8005f36:	f013 0007 	ands.w	r0, r3, #7
 8005f3a:	d00b      	beq.n	8005f54 <__lo0bits+0x22>
 8005f3c:	07d9      	lsls	r1, r3, #31
 8005f3e:	d421      	bmi.n	8005f84 <__lo0bits+0x52>
 8005f40:	0798      	lsls	r0, r3, #30
 8005f42:	bf49      	itett	mi
 8005f44:	085b      	lsrmi	r3, r3, #1
 8005f46:	089b      	lsrpl	r3, r3, #2
 8005f48:	2001      	movmi	r0, #1
 8005f4a:	6013      	strmi	r3, [r2, #0]
 8005f4c:	bf5c      	itt	pl
 8005f4e:	2002      	movpl	r0, #2
 8005f50:	6013      	strpl	r3, [r2, #0]
 8005f52:	4770      	bx	lr
 8005f54:	b299      	uxth	r1, r3
 8005f56:	b909      	cbnz	r1, 8005f5c <__lo0bits+0x2a>
 8005f58:	2010      	movs	r0, #16
 8005f5a:	0c1b      	lsrs	r3, r3, #16
 8005f5c:	b2d9      	uxtb	r1, r3
 8005f5e:	b909      	cbnz	r1, 8005f64 <__lo0bits+0x32>
 8005f60:	3008      	adds	r0, #8
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	0719      	lsls	r1, r3, #28
 8005f66:	bf04      	itt	eq
 8005f68:	091b      	lsreq	r3, r3, #4
 8005f6a:	3004      	addeq	r0, #4
 8005f6c:	0799      	lsls	r1, r3, #30
 8005f6e:	bf04      	itt	eq
 8005f70:	089b      	lsreq	r3, r3, #2
 8005f72:	3002      	addeq	r0, #2
 8005f74:	07d9      	lsls	r1, r3, #31
 8005f76:	d403      	bmi.n	8005f80 <__lo0bits+0x4e>
 8005f78:	085b      	lsrs	r3, r3, #1
 8005f7a:	f100 0001 	add.w	r0, r0, #1
 8005f7e:	d003      	beq.n	8005f88 <__lo0bits+0x56>
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4770      	bx	lr
 8005f84:	2000      	movs	r0, #0
 8005f86:	4770      	bx	lr
 8005f88:	2020      	movs	r0, #32
 8005f8a:	4770      	bx	lr

08005f8c <__i2b>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	460c      	mov	r4, r1
 8005f90:	2101      	movs	r1, #1
 8005f92:	f7ff ff07 	bl	8005da4 <_Balloc>
 8005f96:	4602      	mov	r2, r0
 8005f98:	b928      	cbnz	r0, 8005fa6 <__i2b+0x1a>
 8005f9a:	f240 1145 	movw	r1, #325	@ 0x145
 8005f9e:	4b04      	ldr	r3, [pc, #16]	@ (8005fb0 <__i2b+0x24>)
 8005fa0:	4804      	ldr	r0, [pc, #16]	@ (8005fb4 <__i2b+0x28>)
 8005fa2:	f000 fbc9 	bl	8006738 <__assert_func>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	6144      	str	r4, [r0, #20]
 8005faa:	6103      	str	r3, [r0, #16]
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop
 8005fb0:	08006c32 	.word	0x08006c32
 8005fb4:	08006c43 	.word	0x08006c43

08005fb8 <__multiply>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	690a      	ldr	r2, [r1, #16]
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	460f      	mov	r7, r1
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	bfa2      	ittt	ge
 8005fc8:	4623      	movge	r3, r4
 8005fca:	460c      	movge	r4, r1
 8005fcc:	461f      	movge	r7, r3
 8005fce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005fd2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005fd6:	68a3      	ldr	r3, [r4, #8]
 8005fd8:	6861      	ldr	r1, [r4, #4]
 8005fda:	eb0a 0609 	add.w	r6, sl, r9
 8005fde:	42b3      	cmp	r3, r6
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	bfb8      	it	lt
 8005fe4:	3101      	addlt	r1, #1
 8005fe6:	f7ff fedd 	bl	8005da4 <_Balloc>
 8005fea:	b930      	cbnz	r0, 8005ffa <__multiply+0x42>
 8005fec:	4602      	mov	r2, r0
 8005fee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ff2:	4b43      	ldr	r3, [pc, #268]	@ (8006100 <__multiply+0x148>)
 8005ff4:	4843      	ldr	r0, [pc, #268]	@ (8006104 <__multiply+0x14c>)
 8005ff6:	f000 fb9f 	bl	8006738 <__assert_func>
 8005ffa:	f100 0514 	add.w	r5, r0, #20
 8005ffe:	462b      	mov	r3, r5
 8006000:	2200      	movs	r2, #0
 8006002:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006006:	4543      	cmp	r3, r8
 8006008:	d321      	bcc.n	800604e <__multiply+0x96>
 800600a:	f107 0114 	add.w	r1, r7, #20
 800600e:	f104 0214 	add.w	r2, r4, #20
 8006012:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006016:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800601a:	9302      	str	r3, [sp, #8]
 800601c:	1b13      	subs	r3, r2, r4
 800601e:	3b15      	subs	r3, #21
 8006020:	f023 0303 	bic.w	r3, r3, #3
 8006024:	3304      	adds	r3, #4
 8006026:	f104 0715 	add.w	r7, r4, #21
 800602a:	42ba      	cmp	r2, r7
 800602c:	bf38      	it	cc
 800602e:	2304      	movcc	r3, #4
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	9b02      	ldr	r3, [sp, #8]
 8006034:	9103      	str	r1, [sp, #12]
 8006036:	428b      	cmp	r3, r1
 8006038:	d80c      	bhi.n	8006054 <__multiply+0x9c>
 800603a:	2e00      	cmp	r6, #0
 800603c:	dd03      	ble.n	8006046 <__multiply+0x8e>
 800603e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006042:	2b00      	cmp	r3, #0
 8006044:	d05a      	beq.n	80060fc <__multiply+0x144>
 8006046:	6106      	str	r6, [r0, #16]
 8006048:	b005      	add	sp, #20
 800604a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604e:	f843 2b04 	str.w	r2, [r3], #4
 8006052:	e7d8      	b.n	8006006 <__multiply+0x4e>
 8006054:	f8b1 a000 	ldrh.w	sl, [r1]
 8006058:	f1ba 0f00 	cmp.w	sl, #0
 800605c:	d023      	beq.n	80060a6 <__multiply+0xee>
 800605e:	46a9      	mov	r9, r5
 8006060:	f04f 0c00 	mov.w	ip, #0
 8006064:	f104 0e14 	add.w	lr, r4, #20
 8006068:	f85e 7b04 	ldr.w	r7, [lr], #4
 800606c:	f8d9 3000 	ldr.w	r3, [r9]
 8006070:	fa1f fb87 	uxth.w	fp, r7
 8006074:	b29b      	uxth	r3, r3
 8006076:	fb0a 330b 	mla	r3, sl, fp, r3
 800607a:	4463      	add	r3, ip
 800607c:	f8d9 c000 	ldr.w	ip, [r9]
 8006080:	0c3f      	lsrs	r7, r7, #16
 8006082:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006086:	fb0a c707 	mla	r7, sl, r7, ip
 800608a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800608e:	b29b      	uxth	r3, r3
 8006090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006094:	4572      	cmp	r2, lr
 8006096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800609a:	f849 3b04 	str.w	r3, [r9], #4
 800609e:	d8e3      	bhi.n	8006068 <__multiply+0xb0>
 80060a0:	9b01      	ldr	r3, [sp, #4]
 80060a2:	f845 c003 	str.w	ip, [r5, r3]
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	3104      	adds	r1, #4
 80060aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060ae:	f1b9 0f00 	cmp.w	r9, #0
 80060b2:	d021      	beq.n	80060f8 <__multiply+0x140>
 80060b4:	46ae      	mov	lr, r5
 80060b6:	f04f 0a00 	mov.w	sl, #0
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	f104 0c14 	add.w	ip, r4, #20
 80060c0:	f8bc b000 	ldrh.w	fp, [ip]
 80060c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	fb09 770b 	mla	r7, r9, fp, r7
 80060ce:	4457      	add	r7, sl
 80060d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060d4:	f84e 3b04 	str.w	r3, [lr], #4
 80060d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060e0:	f8be 3000 	ldrh.w	r3, [lr]
 80060e4:	4562      	cmp	r2, ip
 80060e6:	fb09 330a 	mla	r3, r9, sl, r3
 80060ea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80060ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060f2:	d8e5      	bhi.n	80060c0 <__multiply+0x108>
 80060f4:	9f01      	ldr	r7, [sp, #4]
 80060f6:	51eb      	str	r3, [r5, r7]
 80060f8:	3504      	adds	r5, #4
 80060fa:	e79a      	b.n	8006032 <__multiply+0x7a>
 80060fc:	3e01      	subs	r6, #1
 80060fe:	e79c      	b.n	800603a <__multiply+0x82>
 8006100:	08006c32 	.word	0x08006c32
 8006104:	08006c43 	.word	0x08006c43

08006108 <__pow5mult>:
 8006108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800610c:	4615      	mov	r5, r2
 800610e:	f012 0203 	ands.w	r2, r2, #3
 8006112:	4607      	mov	r7, r0
 8006114:	460e      	mov	r6, r1
 8006116:	d007      	beq.n	8006128 <__pow5mult+0x20>
 8006118:	4c25      	ldr	r4, [pc, #148]	@ (80061b0 <__pow5mult+0xa8>)
 800611a:	3a01      	subs	r2, #1
 800611c:	2300      	movs	r3, #0
 800611e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006122:	f7ff fea1 	bl	8005e68 <__multadd>
 8006126:	4606      	mov	r6, r0
 8006128:	10ad      	asrs	r5, r5, #2
 800612a:	d03d      	beq.n	80061a8 <__pow5mult+0xa0>
 800612c:	69fc      	ldr	r4, [r7, #28]
 800612e:	b97c      	cbnz	r4, 8006150 <__pow5mult+0x48>
 8006130:	2010      	movs	r0, #16
 8006132:	f7ff fd81 	bl	8005c38 <malloc>
 8006136:	4602      	mov	r2, r0
 8006138:	61f8      	str	r0, [r7, #28]
 800613a:	b928      	cbnz	r0, 8006148 <__pow5mult+0x40>
 800613c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006140:	4b1c      	ldr	r3, [pc, #112]	@ (80061b4 <__pow5mult+0xac>)
 8006142:	481d      	ldr	r0, [pc, #116]	@ (80061b8 <__pow5mult+0xb0>)
 8006144:	f000 faf8 	bl	8006738 <__assert_func>
 8006148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800614c:	6004      	str	r4, [r0, #0]
 800614e:	60c4      	str	r4, [r0, #12]
 8006150:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006158:	b94c      	cbnz	r4, 800616e <__pow5mult+0x66>
 800615a:	f240 2171 	movw	r1, #625	@ 0x271
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff ff14 	bl	8005f8c <__i2b>
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	f8c8 0008 	str.w	r0, [r8, #8]
 800616c:	6003      	str	r3, [r0, #0]
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	07eb      	lsls	r3, r5, #31
 8006174:	d50a      	bpl.n	800618c <__pow5mult+0x84>
 8006176:	4631      	mov	r1, r6
 8006178:	4622      	mov	r2, r4
 800617a:	4638      	mov	r0, r7
 800617c:	f7ff ff1c 	bl	8005fb8 <__multiply>
 8006180:	4680      	mov	r8, r0
 8006182:	4631      	mov	r1, r6
 8006184:	4638      	mov	r0, r7
 8006186:	f7ff fe4d 	bl	8005e24 <_Bfree>
 800618a:	4646      	mov	r6, r8
 800618c:	106d      	asrs	r5, r5, #1
 800618e:	d00b      	beq.n	80061a8 <__pow5mult+0xa0>
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	b938      	cbnz	r0, 80061a4 <__pow5mult+0x9c>
 8006194:	4622      	mov	r2, r4
 8006196:	4621      	mov	r1, r4
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ff0d 	bl	8005fb8 <__multiply>
 800619e:	6020      	str	r0, [r4, #0]
 80061a0:	f8c0 9000 	str.w	r9, [r0]
 80061a4:	4604      	mov	r4, r0
 80061a6:	e7e4      	b.n	8006172 <__pow5mult+0x6a>
 80061a8:	4630      	mov	r0, r6
 80061aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ae:	bf00      	nop
 80061b0:	08006c9c 	.word	0x08006c9c
 80061b4:	08006bc3 	.word	0x08006bc3
 80061b8:	08006c43 	.word	0x08006c43

080061bc <__lshift>:
 80061bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	460c      	mov	r4, r1
 80061c2:	4607      	mov	r7, r0
 80061c4:	4691      	mov	r9, r2
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6849      	ldr	r1, [r1, #4]
 80061ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061ce:	68a3      	ldr	r3, [r4, #8]
 80061d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061d4:	f108 0601 	add.w	r6, r8, #1
 80061d8:	42b3      	cmp	r3, r6
 80061da:	db0b      	blt.n	80061f4 <__lshift+0x38>
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff fde1 	bl	8005da4 <_Balloc>
 80061e2:	4605      	mov	r5, r0
 80061e4:	b948      	cbnz	r0, 80061fa <__lshift+0x3e>
 80061e6:	4602      	mov	r2, r0
 80061e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061ec:	4b27      	ldr	r3, [pc, #156]	@ (800628c <__lshift+0xd0>)
 80061ee:	4828      	ldr	r0, [pc, #160]	@ (8006290 <__lshift+0xd4>)
 80061f0:	f000 faa2 	bl	8006738 <__assert_func>
 80061f4:	3101      	adds	r1, #1
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	e7ee      	b.n	80061d8 <__lshift+0x1c>
 80061fa:	2300      	movs	r3, #0
 80061fc:	f100 0114 	add.w	r1, r0, #20
 8006200:	f100 0210 	add.w	r2, r0, #16
 8006204:	4618      	mov	r0, r3
 8006206:	4553      	cmp	r3, sl
 8006208:	db33      	blt.n	8006272 <__lshift+0xb6>
 800620a:	6920      	ldr	r0, [r4, #16]
 800620c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006210:	f104 0314 	add.w	r3, r4, #20
 8006214:	f019 091f 	ands.w	r9, r9, #31
 8006218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800621c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006220:	d02b      	beq.n	800627a <__lshift+0xbe>
 8006222:	468a      	mov	sl, r1
 8006224:	2200      	movs	r2, #0
 8006226:	f1c9 0e20 	rsb	lr, r9, #32
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	fa00 f009 	lsl.w	r0, r0, r9
 8006230:	4310      	orrs	r0, r2
 8006232:	f84a 0b04 	str.w	r0, [sl], #4
 8006236:	f853 2b04 	ldr.w	r2, [r3], #4
 800623a:	459c      	cmp	ip, r3
 800623c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006240:	d8f3      	bhi.n	800622a <__lshift+0x6e>
 8006242:	ebac 0304 	sub.w	r3, ip, r4
 8006246:	3b15      	subs	r3, #21
 8006248:	f023 0303 	bic.w	r3, r3, #3
 800624c:	3304      	adds	r3, #4
 800624e:	f104 0015 	add.w	r0, r4, #21
 8006252:	4584      	cmp	ip, r0
 8006254:	bf38      	it	cc
 8006256:	2304      	movcc	r3, #4
 8006258:	50ca      	str	r2, [r1, r3]
 800625a:	b10a      	cbz	r2, 8006260 <__lshift+0xa4>
 800625c:	f108 0602 	add.w	r6, r8, #2
 8006260:	3e01      	subs	r6, #1
 8006262:	4638      	mov	r0, r7
 8006264:	4621      	mov	r1, r4
 8006266:	612e      	str	r6, [r5, #16]
 8006268:	f7ff fddc 	bl	8005e24 <_Bfree>
 800626c:	4628      	mov	r0, r5
 800626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006272:	f842 0f04 	str.w	r0, [r2, #4]!
 8006276:	3301      	adds	r3, #1
 8006278:	e7c5      	b.n	8006206 <__lshift+0x4a>
 800627a:	3904      	subs	r1, #4
 800627c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006280:	459c      	cmp	ip, r3
 8006282:	f841 2f04 	str.w	r2, [r1, #4]!
 8006286:	d8f9      	bhi.n	800627c <__lshift+0xc0>
 8006288:	e7ea      	b.n	8006260 <__lshift+0xa4>
 800628a:	bf00      	nop
 800628c:	08006c32 	.word	0x08006c32
 8006290:	08006c43 	.word	0x08006c43

08006294 <__mcmp>:
 8006294:	4603      	mov	r3, r0
 8006296:	690a      	ldr	r2, [r1, #16]
 8006298:	6900      	ldr	r0, [r0, #16]
 800629a:	b530      	push	{r4, r5, lr}
 800629c:	1a80      	subs	r0, r0, r2
 800629e:	d10e      	bne.n	80062be <__mcmp+0x2a>
 80062a0:	3314      	adds	r3, #20
 80062a2:	3114      	adds	r1, #20
 80062a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062b4:	4295      	cmp	r5, r2
 80062b6:	d003      	beq.n	80062c0 <__mcmp+0x2c>
 80062b8:	d205      	bcs.n	80062c6 <__mcmp+0x32>
 80062ba:	f04f 30ff 	mov.w	r0, #4294967295
 80062be:	bd30      	pop	{r4, r5, pc}
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d3f3      	bcc.n	80062ac <__mcmp+0x18>
 80062c4:	e7fb      	b.n	80062be <__mcmp+0x2a>
 80062c6:	2001      	movs	r0, #1
 80062c8:	e7f9      	b.n	80062be <__mcmp+0x2a>
	...

080062cc <__mdiff>:
 80062cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	4689      	mov	r9, r1
 80062d2:	4606      	mov	r6, r0
 80062d4:	4611      	mov	r1, r2
 80062d6:	4648      	mov	r0, r9
 80062d8:	4614      	mov	r4, r2
 80062da:	f7ff ffdb 	bl	8006294 <__mcmp>
 80062de:	1e05      	subs	r5, r0, #0
 80062e0:	d112      	bne.n	8006308 <__mdiff+0x3c>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff fd5d 	bl	8005da4 <_Balloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__mdiff+0x2e>
 80062ee:	f240 2137 	movw	r1, #567	@ 0x237
 80062f2:	4b3e      	ldr	r3, [pc, #248]	@ (80063ec <__mdiff+0x120>)
 80062f4:	483e      	ldr	r0, [pc, #248]	@ (80063f0 <__mdiff+0x124>)
 80062f6:	f000 fa1f 	bl	8006738 <__assert_func>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006300:	4610      	mov	r0, r2
 8006302:	b003      	add	sp, #12
 8006304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006308:	bfbc      	itt	lt
 800630a:	464b      	movlt	r3, r9
 800630c:	46a1      	movlt	r9, r4
 800630e:	4630      	mov	r0, r6
 8006310:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006314:	bfba      	itte	lt
 8006316:	461c      	movlt	r4, r3
 8006318:	2501      	movlt	r5, #1
 800631a:	2500      	movge	r5, #0
 800631c:	f7ff fd42 	bl	8005da4 <_Balloc>
 8006320:	4602      	mov	r2, r0
 8006322:	b918      	cbnz	r0, 800632c <__mdiff+0x60>
 8006324:	f240 2145 	movw	r1, #581	@ 0x245
 8006328:	4b30      	ldr	r3, [pc, #192]	@ (80063ec <__mdiff+0x120>)
 800632a:	e7e3      	b.n	80062f4 <__mdiff+0x28>
 800632c:	f100 0b14 	add.w	fp, r0, #20
 8006330:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006334:	f109 0310 	add.w	r3, r9, #16
 8006338:	60c5      	str	r5, [r0, #12]
 800633a:	f04f 0c00 	mov.w	ip, #0
 800633e:	f109 0514 	add.w	r5, r9, #20
 8006342:	46d9      	mov	r9, fp
 8006344:	6926      	ldr	r6, [r4, #16]
 8006346:	f104 0e14 	add.w	lr, r4, #20
 800634a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800634e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	f85e 0b04 	ldr.w	r0, [lr], #4
 800635a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800635e:	b281      	uxth	r1, r0
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	fa1f f38a 	uxth.w	r3, sl
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	0c00      	lsrs	r0, r0, #16
 800636a:	4463      	add	r3, ip
 800636c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006370:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006374:	b29b      	uxth	r3, r3
 8006376:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800637a:	4576      	cmp	r6, lr
 800637c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006380:	f849 3b04 	str.w	r3, [r9], #4
 8006384:	d8e6      	bhi.n	8006354 <__mdiff+0x88>
 8006386:	1b33      	subs	r3, r6, r4
 8006388:	3b15      	subs	r3, #21
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	3415      	adds	r4, #21
 8006390:	3304      	adds	r3, #4
 8006392:	42a6      	cmp	r6, r4
 8006394:	bf38      	it	cc
 8006396:	2304      	movcc	r3, #4
 8006398:	441d      	add	r5, r3
 800639a:	445b      	add	r3, fp
 800639c:	461e      	mov	r6, r3
 800639e:	462c      	mov	r4, r5
 80063a0:	4544      	cmp	r4, r8
 80063a2:	d30e      	bcc.n	80063c2 <__mdiff+0xf6>
 80063a4:	f108 0103 	add.w	r1, r8, #3
 80063a8:	1b49      	subs	r1, r1, r5
 80063aa:	f021 0103 	bic.w	r1, r1, #3
 80063ae:	3d03      	subs	r5, #3
 80063b0:	45a8      	cmp	r8, r5
 80063b2:	bf38      	it	cc
 80063b4:	2100      	movcc	r1, #0
 80063b6:	440b      	add	r3, r1
 80063b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063bc:	b199      	cbz	r1, 80063e6 <__mdiff+0x11a>
 80063be:	6117      	str	r7, [r2, #16]
 80063c0:	e79e      	b.n	8006300 <__mdiff+0x34>
 80063c2:	46e6      	mov	lr, ip
 80063c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80063c8:	fa1f fc81 	uxth.w	ip, r1
 80063cc:	44f4      	add	ip, lr
 80063ce:	0c08      	lsrs	r0, r1, #16
 80063d0:	4471      	add	r1, lr
 80063d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063d6:	b289      	uxth	r1, r1
 80063d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063e0:	f846 1b04 	str.w	r1, [r6], #4
 80063e4:	e7dc      	b.n	80063a0 <__mdiff+0xd4>
 80063e6:	3f01      	subs	r7, #1
 80063e8:	e7e6      	b.n	80063b8 <__mdiff+0xec>
 80063ea:	bf00      	nop
 80063ec:	08006c32 	.word	0x08006c32
 80063f0:	08006c43 	.word	0x08006c43

080063f4 <__d2b>:
 80063f4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80063f8:	2101      	movs	r1, #1
 80063fa:	4690      	mov	r8, r2
 80063fc:	4699      	mov	r9, r3
 80063fe:	9e08      	ldr	r6, [sp, #32]
 8006400:	f7ff fcd0 	bl	8005da4 <_Balloc>
 8006404:	4604      	mov	r4, r0
 8006406:	b930      	cbnz	r0, 8006416 <__d2b+0x22>
 8006408:	4602      	mov	r2, r0
 800640a:	f240 310f 	movw	r1, #783	@ 0x30f
 800640e:	4b23      	ldr	r3, [pc, #140]	@ (800649c <__d2b+0xa8>)
 8006410:	4823      	ldr	r0, [pc, #140]	@ (80064a0 <__d2b+0xac>)
 8006412:	f000 f991 	bl	8006738 <__assert_func>
 8006416:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800641a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800641e:	b10d      	cbz	r5, 8006424 <__d2b+0x30>
 8006420:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	f1b8 0300 	subs.w	r3, r8, #0
 800642a:	d024      	beq.n	8006476 <__d2b+0x82>
 800642c:	4668      	mov	r0, sp
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	f7ff fd7f 	bl	8005f32 <__lo0bits>
 8006434:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006438:	b1d8      	cbz	r0, 8006472 <__d2b+0x7e>
 800643a:	f1c0 0320 	rsb	r3, r0, #32
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	430b      	orrs	r3, r1
 8006444:	40c2      	lsrs	r2, r0
 8006446:	6163      	str	r3, [r4, #20]
 8006448:	9201      	str	r2, [sp, #4]
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf0c      	ite	eq
 8006450:	2201      	moveq	r2, #1
 8006452:	2202      	movne	r2, #2
 8006454:	61a3      	str	r3, [r4, #24]
 8006456:	6122      	str	r2, [r4, #16]
 8006458:	b1ad      	cbz	r5, 8006486 <__d2b+0x92>
 800645a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800645e:	4405      	add	r5, r0
 8006460:	6035      	str	r5, [r6, #0]
 8006462:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006468:	6018      	str	r0, [r3, #0]
 800646a:	4620      	mov	r0, r4
 800646c:	b002      	add	sp, #8
 800646e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006472:	6161      	str	r1, [r4, #20]
 8006474:	e7e9      	b.n	800644a <__d2b+0x56>
 8006476:	a801      	add	r0, sp, #4
 8006478:	f7ff fd5b 	bl	8005f32 <__lo0bits>
 800647c:	9b01      	ldr	r3, [sp, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	6163      	str	r3, [r4, #20]
 8006482:	3020      	adds	r0, #32
 8006484:	e7e7      	b.n	8006456 <__d2b+0x62>
 8006486:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800648a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800648e:	6030      	str	r0, [r6, #0]
 8006490:	6918      	ldr	r0, [r3, #16]
 8006492:	f7ff fd2f 	bl	8005ef4 <__hi0bits>
 8006496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800649a:	e7e4      	b.n	8006466 <__d2b+0x72>
 800649c:	08006c32 	.word	0x08006c32
 80064a0:	08006c43 	.word	0x08006c43

080064a4 <__sflush_r>:
 80064a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	0716      	lsls	r6, r2, #28
 80064ac:	4605      	mov	r5, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	d454      	bmi.n	800655c <__sflush_r+0xb8>
 80064b2:	684b      	ldr	r3, [r1, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	dc02      	bgt.n	80064be <__sflush_r+0x1a>
 80064b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd48      	ble.n	8006550 <__sflush_r+0xac>
 80064be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064c0:	2e00      	cmp	r6, #0
 80064c2:	d045      	beq.n	8006550 <__sflush_r+0xac>
 80064c4:	2300      	movs	r3, #0
 80064c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064ca:	682f      	ldr	r7, [r5, #0]
 80064cc:	6a21      	ldr	r1, [r4, #32]
 80064ce:	602b      	str	r3, [r5, #0]
 80064d0:	d030      	beq.n	8006534 <__sflush_r+0x90>
 80064d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	0759      	lsls	r1, r3, #29
 80064d8:	d505      	bpl.n	80064e6 <__sflush_r+0x42>
 80064da:	6863      	ldr	r3, [r4, #4]
 80064dc:	1ad2      	subs	r2, r2, r3
 80064de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064e0:	b10b      	cbz	r3, 80064e6 <__sflush_r+0x42>
 80064e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064e4:	1ad2      	subs	r2, r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	4628      	mov	r0, r5
 80064ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064ec:	6a21      	ldr	r1, [r4, #32]
 80064ee:	47b0      	blx	r6
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	d106      	bne.n	8006504 <__sflush_r+0x60>
 80064f6:	6829      	ldr	r1, [r5, #0]
 80064f8:	291d      	cmp	r1, #29
 80064fa:	d82b      	bhi.n	8006554 <__sflush_r+0xb0>
 80064fc:	4a28      	ldr	r2, [pc, #160]	@ (80065a0 <__sflush_r+0xfc>)
 80064fe:	410a      	asrs	r2, r1
 8006500:	07d6      	lsls	r6, r2, #31
 8006502:	d427      	bmi.n	8006554 <__sflush_r+0xb0>
 8006504:	2200      	movs	r2, #0
 8006506:	6062      	str	r2, [r4, #4]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	04d9      	lsls	r1, r3, #19
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	d504      	bpl.n	800651a <__sflush_r+0x76>
 8006510:	1c42      	adds	r2, r0, #1
 8006512:	d101      	bne.n	8006518 <__sflush_r+0x74>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b903      	cbnz	r3, 800651a <__sflush_r+0x76>
 8006518:	6560      	str	r0, [r4, #84]	@ 0x54
 800651a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800651c:	602f      	str	r7, [r5, #0]
 800651e:	b1b9      	cbz	r1, 8006550 <__sflush_r+0xac>
 8006520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006524:	4299      	cmp	r1, r3
 8006526:	d002      	beq.n	800652e <__sflush_r+0x8a>
 8006528:	4628      	mov	r0, r5
 800652a:	f7ff fb3d 	bl	8005ba8 <_free_r>
 800652e:	2300      	movs	r3, #0
 8006530:	6363      	str	r3, [r4, #52]	@ 0x34
 8006532:	e00d      	b.n	8006550 <__sflush_r+0xac>
 8006534:	2301      	movs	r3, #1
 8006536:	4628      	mov	r0, r5
 8006538:	47b0      	blx	r6
 800653a:	4602      	mov	r2, r0
 800653c:	1c50      	adds	r0, r2, #1
 800653e:	d1c9      	bne.n	80064d4 <__sflush_r+0x30>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0c6      	beq.n	80064d4 <__sflush_r+0x30>
 8006546:	2b1d      	cmp	r3, #29
 8006548:	d001      	beq.n	800654e <__sflush_r+0xaa>
 800654a:	2b16      	cmp	r3, #22
 800654c:	d11d      	bne.n	800658a <__sflush_r+0xe6>
 800654e:	602f      	str	r7, [r5, #0]
 8006550:	2000      	movs	r0, #0
 8006552:	e021      	b.n	8006598 <__sflush_r+0xf4>
 8006554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006558:	b21b      	sxth	r3, r3
 800655a:	e01a      	b.n	8006592 <__sflush_r+0xee>
 800655c:	690f      	ldr	r7, [r1, #16]
 800655e:	2f00      	cmp	r7, #0
 8006560:	d0f6      	beq.n	8006550 <__sflush_r+0xac>
 8006562:	0793      	lsls	r3, r2, #30
 8006564:	bf18      	it	ne
 8006566:	2300      	movne	r3, #0
 8006568:	680e      	ldr	r6, [r1, #0]
 800656a:	bf08      	it	eq
 800656c:	694b      	ldreq	r3, [r1, #20]
 800656e:	1bf6      	subs	r6, r6, r7
 8006570:	600f      	str	r7, [r1, #0]
 8006572:	608b      	str	r3, [r1, #8]
 8006574:	2e00      	cmp	r6, #0
 8006576:	ddeb      	ble.n	8006550 <__sflush_r+0xac>
 8006578:	4633      	mov	r3, r6
 800657a:	463a      	mov	r2, r7
 800657c:	4628      	mov	r0, r5
 800657e:	6a21      	ldr	r1, [r4, #32]
 8006580:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006584:	47e0      	blx	ip
 8006586:	2800      	cmp	r0, #0
 8006588:	dc07      	bgt.n	800659a <__sflush_r+0xf6>
 800658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800659a:	4407      	add	r7, r0
 800659c:	1a36      	subs	r6, r6, r0
 800659e:	e7e9      	b.n	8006574 <__sflush_r+0xd0>
 80065a0:	dfbffffe 	.word	0xdfbffffe

080065a4 <_fflush_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	690b      	ldr	r3, [r1, #16]
 80065a8:	4605      	mov	r5, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b913      	cbnz	r3, 80065b4 <_fflush_r+0x10>
 80065ae:	2500      	movs	r5, #0
 80065b0:	4628      	mov	r0, r5
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	b118      	cbz	r0, 80065be <_fflush_r+0x1a>
 80065b6:	6a03      	ldr	r3, [r0, #32]
 80065b8:	b90b      	cbnz	r3, 80065be <_fflush_r+0x1a>
 80065ba:	f7fe f9f5 	bl	80049a8 <__sinit>
 80065be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f3      	beq.n	80065ae <_fflush_r+0xa>
 80065c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065c8:	07d0      	lsls	r0, r2, #31
 80065ca:	d404      	bmi.n	80065d6 <_fflush_r+0x32>
 80065cc:	0599      	lsls	r1, r3, #22
 80065ce:	d402      	bmi.n	80065d6 <_fflush_r+0x32>
 80065d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d2:	f7fe fc86 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 80065d6:	4628      	mov	r0, r5
 80065d8:	4621      	mov	r1, r4
 80065da:	f7ff ff63 	bl	80064a4 <__sflush_r>
 80065de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065e0:	4605      	mov	r5, r0
 80065e2:	07da      	lsls	r2, r3, #31
 80065e4:	d4e4      	bmi.n	80065b0 <_fflush_r+0xc>
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	059b      	lsls	r3, r3, #22
 80065ea:	d4e1      	bmi.n	80065b0 <_fflush_r+0xc>
 80065ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ee:	f7fe fc79 	bl	8004ee4 <__retarget_lock_release_recursive>
 80065f2:	e7dd      	b.n	80065b0 <_fflush_r+0xc>

080065f4 <__swhatbuf_r>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	460c      	mov	r4, r1
 80065f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fc:	4615      	mov	r5, r2
 80065fe:	2900      	cmp	r1, #0
 8006600:	461e      	mov	r6, r3
 8006602:	b096      	sub	sp, #88	@ 0x58
 8006604:	da0c      	bge.n	8006620 <__swhatbuf_r+0x2c>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	2100      	movs	r1, #0
 800660a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800660e:	bf14      	ite	ne
 8006610:	2340      	movne	r3, #64	@ 0x40
 8006612:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006616:	2000      	movs	r0, #0
 8006618:	6031      	str	r1, [r6, #0]
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	b016      	add	sp, #88	@ 0x58
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	466a      	mov	r2, sp
 8006622:	f000 f849 	bl	80066b8 <_fstat_r>
 8006626:	2800      	cmp	r0, #0
 8006628:	dbed      	blt.n	8006606 <__swhatbuf_r+0x12>
 800662a:	9901      	ldr	r1, [sp, #4]
 800662c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006630:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006634:	4259      	negs	r1, r3
 8006636:	4159      	adcs	r1, r3
 8006638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800663c:	e7eb      	b.n	8006616 <__swhatbuf_r+0x22>

0800663e <__smakebuf_r>:
 800663e:	898b      	ldrh	r3, [r1, #12]
 8006640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006642:	079d      	lsls	r5, r3, #30
 8006644:	4606      	mov	r6, r0
 8006646:	460c      	mov	r4, r1
 8006648:	d507      	bpl.n	800665a <__smakebuf_r+0x1c>
 800664a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2301      	movs	r3, #1
 8006654:	6163      	str	r3, [r4, #20]
 8006656:	b003      	add	sp, #12
 8006658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665a:	466a      	mov	r2, sp
 800665c:	ab01      	add	r3, sp, #4
 800665e:	f7ff ffc9 	bl	80065f4 <__swhatbuf_r>
 8006662:	9f00      	ldr	r7, [sp, #0]
 8006664:	4605      	mov	r5, r0
 8006666:	4639      	mov	r1, r7
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff fb0f 	bl	8005c8c <_malloc_r>
 800666e:	b948      	cbnz	r0, 8006684 <__smakebuf_r+0x46>
 8006670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d4ee      	bmi.n	8006656 <__smakebuf_r+0x18>
 8006678:	f023 0303 	bic.w	r3, r3, #3
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7e2      	b.n	800664a <__smakebuf_r+0xc>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800668a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	6020      	str	r0, [r4, #0]
 8006694:	b15b      	cbz	r3, 80066ae <__smakebuf_r+0x70>
 8006696:	4630      	mov	r0, r6
 8006698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669c:	f000 f81e 	bl	80066dc <_isatty_r>
 80066a0:	b128      	cbz	r0, 80066ae <__smakebuf_r+0x70>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f023 0303 	bic.w	r3, r3, #3
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	431d      	orrs	r5, r3
 80066b2:	81a5      	strh	r5, [r4, #12]
 80066b4:	e7cf      	b.n	8006656 <__smakebuf_r+0x18>
	...

080066b8 <_fstat_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	2300      	movs	r3, #0
 80066bc:	4d06      	ldr	r5, [pc, #24]	@ (80066d8 <_fstat_r+0x20>)
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	f7fa ffb1 	bl	800162c <_fstat>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d102      	bne.n	80066d4 <_fstat_r+0x1c>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b103      	cbz	r3, 80066d4 <_fstat_r+0x1c>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
 80066d6:	bf00      	nop
 80066d8:	20000490 	.word	0x20000490

080066dc <_isatty_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	2300      	movs	r3, #0
 80066e0:	4d05      	ldr	r5, [pc, #20]	@ (80066f8 <_isatty_r+0x1c>)
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa ffaf 	bl	800164a <_isatty>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_isatty_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_isatty_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20000490 	.word	0x20000490

080066fc <_sbrk_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	2300      	movs	r3, #0
 8006700:	4d05      	ldr	r5, [pc, #20]	@ (8006718 <_sbrk_r+0x1c>)
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fa ffb6 	bl	8001678 <_sbrk>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_sbrk_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_sbrk_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000490 	.word	0x20000490

0800671c <memcpy>:
 800671c:	440a      	add	r2, r1
 800671e:	4291      	cmp	r1, r2
 8006720:	f100 33ff 	add.w	r3, r0, #4294967295
 8006724:	d100      	bne.n	8006728 <memcpy+0xc>
 8006726:	4770      	bx	lr
 8006728:	b510      	push	{r4, lr}
 800672a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672e:	4291      	cmp	r1, r2
 8006730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006734:	d1f9      	bne.n	800672a <memcpy+0xe>
 8006736:	bd10      	pop	{r4, pc}

08006738 <__assert_func>:
 8006738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800673a:	4614      	mov	r4, r2
 800673c:	461a      	mov	r2, r3
 800673e:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <__assert_func+0x2c>)
 8006740:	4605      	mov	r5, r0
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68d8      	ldr	r0, [r3, #12]
 8006746:	b954      	cbnz	r4, 800675e <__assert_func+0x26>
 8006748:	4b07      	ldr	r3, [pc, #28]	@ (8006768 <__assert_func+0x30>)
 800674a:	461c      	mov	r4, r3
 800674c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006750:	9100      	str	r1, [sp, #0]
 8006752:	462b      	mov	r3, r5
 8006754:	4905      	ldr	r1, [pc, #20]	@ (800676c <__assert_func+0x34>)
 8006756:	f000 f841 	bl	80067dc <fiprintf>
 800675a:	f000 f851 	bl	8006800 <abort>
 800675e:	4b04      	ldr	r3, [pc, #16]	@ (8006770 <__assert_func+0x38>)
 8006760:	e7f4      	b.n	800674c <__assert_func+0x14>
 8006762:	bf00      	nop
 8006764:	20000020 	.word	0x20000020
 8006768:	08006ddd 	.word	0x08006ddd
 800676c:	08006daf 	.word	0x08006daf
 8006770:	08006da2 	.word	0x08006da2

08006774 <_calloc_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	fba1 5402 	umull	r5, r4, r1, r2
 800677a:	b93c      	cbnz	r4, 800678c <_calloc_r+0x18>
 800677c:	4629      	mov	r1, r5
 800677e:	f7ff fa85 	bl	8005c8c <_malloc_r>
 8006782:	4606      	mov	r6, r0
 8006784:	b928      	cbnz	r0, 8006792 <_calloc_r+0x1e>
 8006786:	2600      	movs	r6, #0
 8006788:	4630      	mov	r0, r6
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	220c      	movs	r2, #12
 800678e:	6002      	str	r2, [r0, #0]
 8006790:	e7f9      	b.n	8006786 <_calloc_r+0x12>
 8006792:	462a      	mov	r2, r5
 8006794:	4621      	mov	r1, r4
 8006796:	f7fe fb27 	bl	8004de8 <memset>
 800679a:	e7f5      	b.n	8006788 <_calloc_r+0x14>

0800679c <__ascii_mbtowc>:
 800679c:	b082      	sub	sp, #8
 800679e:	b901      	cbnz	r1, 80067a2 <__ascii_mbtowc+0x6>
 80067a0:	a901      	add	r1, sp, #4
 80067a2:	b142      	cbz	r2, 80067b6 <__ascii_mbtowc+0x1a>
 80067a4:	b14b      	cbz	r3, 80067ba <__ascii_mbtowc+0x1e>
 80067a6:	7813      	ldrb	r3, [r2, #0]
 80067a8:	600b      	str	r3, [r1, #0]
 80067aa:	7812      	ldrb	r2, [r2, #0]
 80067ac:	1e10      	subs	r0, r2, #0
 80067ae:	bf18      	it	ne
 80067b0:	2001      	movne	r0, #1
 80067b2:	b002      	add	sp, #8
 80067b4:	4770      	bx	lr
 80067b6:	4610      	mov	r0, r2
 80067b8:	e7fb      	b.n	80067b2 <__ascii_mbtowc+0x16>
 80067ba:	f06f 0001 	mvn.w	r0, #1
 80067be:	e7f8      	b.n	80067b2 <__ascii_mbtowc+0x16>

080067c0 <__ascii_wctomb>:
 80067c0:	4603      	mov	r3, r0
 80067c2:	4608      	mov	r0, r1
 80067c4:	b141      	cbz	r1, 80067d8 <__ascii_wctomb+0x18>
 80067c6:	2aff      	cmp	r2, #255	@ 0xff
 80067c8:	d904      	bls.n	80067d4 <__ascii_wctomb+0x14>
 80067ca:	228a      	movs	r2, #138	@ 0x8a
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	4770      	bx	lr
 80067d4:	2001      	movs	r0, #1
 80067d6:	700a      	strb	r2, [r1, #0]
 80067d8:	4770      	bx	lr
	...

080067dc <fiprintf>:
 80067dc:	b40e      	push	{r1, r2, r3}
 80067de:	b503      	push	{r0, r1, lr}
 80067e0:	4601      	mov	r1, r0
 80067e2:	ab03      	add	r3, sp, #12
 80067e4:	4805      	ldr	r0, [pc, #20]	@ (80067fc <fiprintf+0x20>)
 80067e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	f000 f835 	bl	800685c <_vfiprintf_r>
 80067f2:	b002      	add	sp, #8
 80067f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f8:	b003      	add	sp, #12
 80067fa:	4770      	bx	lr
 80067fc:	20000020 	.word	0x20000020

08006800 <abort>:
 8006800:	2006      	movs	r0, #6
 8006802:	b508      	push	{r3, lr}
 8006804:	f000 f96a 	bl	8006adc <raise>
 8006808:	2001      	movs	r0, #1
 800680a:	f7fa fedc 	bl	80015c6 <_exit>

0800680e <__sfputc_r>:
 800680e:	6893      	ldr	r3, [r2, #8]
 8006810:	b410      	push	{r4}
 8006812:	3b01      	subs	r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	da07      	bge.n	800682a <__sfputc_r+0x1c>
 800681a:	6994      	ldr	r4, [r2, #24]
 800681c:	42a3      	cmp	r3, r4
 800681e:	db01      	blt.n	8006824 <__sfputc_r+0x16>
 8006820:	290a      	cmp	r1, #10
 8006822:	d102      	bne.n	800682a <__sfputc_r+0x1c>
 8006824:	bc10      	pop	{r4}
 8006826:	f7fe ba4a 	b.w	8004cbe <__swbuf_r>
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	1c58      	adds	r0, r3, #1
 800682e:	6010      	str	r0, [r2, #0]
 8006830:	7019      	strb	r1, [r3, #0]
 8006832:	4608      	mov	r0, r1
 8006834:	bc10      	pop	{r4}
 8006836:	4770      	bx	lr

08006838 <__sfputs_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	4614      	mov	r4, r2
 8006840:	18d5      	adds	r5, r2, r3
 8006842:	42ac      	cmp	r4, r5
 8006844:	d101      	bne.n	800684a <__sfputs_r+0x12>
 8006846:	2000      	movs	r0, #0
 8006848:	e007      	b.n	800685a <__sfputs_r+0x22>
 800684a:	463a      	mov	r2, r7
 800684c:	4630      	mov	r0, r6
 800684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006852:	f7ff ffdc 	bl	800680e <__sfputc_r>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d1f3      	bne.n	8006842 <__sfputs_r+0xa>
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800685c <_vfiprintf_r>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	460d      	mov	r5, r1
 8006862:	4614      	mov	r4, r2
 8006864:	4698      	mov	r8, r3
 8006866:	4606      	mov	r6, r0
 8006868:	b09d      	sub	sp, #116	@ 0x74
 800686a:	b118      	cbz	r0, 8006874 <_vfiprintf_r+0x18>
 800686c:	6a03      	ldr	r3, [r0, #32]
 800686e:	b90b      	cbnz	r3, 8006874 <_vfiprintf_r+0x18>
 8006870:	f7fe f89a 	bl	80049a8 <__sinit>
 8006874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006876:	07d9      	lsls	r1, r3, #31
 8006878:	d405      	bmi.n	8006886 <_vfiprintf_r+0x2a>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	059a      	lsls	r2, r3, #22
 800687e:	d402      	bmi.n	8006886 <_vfiprintf_r+0x2a>
 8006880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006882:	f7fe fb2e 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	071b      	lsls	r3, r3, #28
 800688a:	d501      	bpl.n	8006890 <_vfiprintf_r+0x34>
 800688c:	692b      	ldr	r3, [r5, #16]
 800688e:	b99b      	cbnz	r3, 80068b8 <_vfiprintf_r+0x5c>
 8006890:	4629      	mov	r1, r5
 8006892:	4630      	mov	r0, r6
 8006894:	f7fe fa52 	bl	8004d3c <__swsetup_r>
 8006898:	b170      	cbz	r0, 80068b8 <_vfiprintf_r+0x5c>
 800689a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800689c:	07dc      	lsls	r4, r3, #31
 800689e:	d504      	bpl.n	80068aa <_vfiprintf_r+0x4e>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	b01d      	add	sp, #116	@ 0x74
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	89ab      	ldrh	r3, [r5, #12]
 80068ac:	0598      	lsls	r0, r3, #22
 80068ae:	d4f7      	bmi.n	80068a0 <_vfiprintf_r+0x44>
 80068b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068b2:	f7fe fb17 	bl	8004ee4 <__retarget_lock_release_recursive>
 80068b6:	e7f3      	b.n	80068a0 <_vfiprintf_r+0x44>
 80068b8:	2300      	movs	r3, #0
 80068ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80068bc:	2320      	movs	r3, #32
 80068be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068c2:	2330      	movs	r3, #48	@ 0x30
 80068c4:	f04f 0901 	mov.w	r9, #1
 80068c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006a78 <_vfiprintf_r+0x21c>
 80068d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068d4:	4623      	mov	r3, r4
 80068d6:	469a      	mov	sl, r3
 80068d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068dc:	b10a      	cbz	r2, 80068e2 <_vfiprintf_r+0x86>
 80068de:	2a25      	cmp	r2, #37	@ 0x25
 80068e0:	d1f9      	bne.n	80068d6 <_vfiprintf_r+0x7a>
 80068e2:	ebba 0b04 	subs.w	fp, sl, r4
 80068e6:	d00b      	beq.n	8006900 <_vfiprintf_r+0xa4>
 80068e8:	465b      	mov	r3, fp
 80068ea:	4622      	mov	r2, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ffa2 	bl	8006838 <__sfputs_r>
 80068f4:	3001      	adds	r0, #1
 80068f6:	f000 80a7 	beq.w	8006a48 <_vfiprintf_r+0x1ec>
 80068fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fc:	445a      	add	r2, fp
 80068fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006900:	f89a 3000 	ldrb.w	r3, [sl]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 809f 	beq.w	8006a48 <_vfiprintf_r+0x1ec>
 800690a:	2300      	movs	r3, #0
 800690c:	f04f 32ff 	mov.w	r2, #4294967295
 8006910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006914:	f10a 0a01 	add.w	sl, sl, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006920:	931a      	str	r3, [sp, #104]	@ 0x68
 8006922:	4654      	mov	r4, sl
 8006924:	2205      	movs	r2, #5
 8006926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692a:	4853      	ldr	r0, [pc, #332]	@ (8006a78 <_vfiprintf_r+0x21c>)
 800692c:	f7fe fadb 	bl	8004ee6 <memchr>
 8006930:	9a04      	ldr	r2, [sp, #16]
 8006932:	b9d8      	cbnz	r0, 800696c <_vfiprintf_r+0x110>
 8006934:	06d1      	lsls	r1, r2, #27
 8006936:	bf44      	itt	mi
 8006938:	2320      	movmi	r3, #32
 800693a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800693e:	0713      	lsls	r3, r2, #28
 8006940:	bf44      	itt	mi
 8006942:	232b      	movmi	r3, #43	@ 0x2b
 8006944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006948:	f89a 3000 	ldrb.w	r3, [sl]
 800694c:	2b2a      	cmp	r3, #42	@ 0x2a
 800694e:	d015      	beq.n	800697c <_vfiprintf_r+0x120>
 8006950:	4654      	mov	r4, sl
 8006952:	2000      	movs	r0, #0
 8006954:	f04f 0c0a 	mov.w	ip, #10
 8006958:	9a07      	ldr	r2, [sp, #28]
 800695a:	4621      	mov	r1, r4
 800695c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006960:	3b30      	subs	r3, #48	@ 0x30
 8006962:	2b09      	cmp	r3, #9
 8006964:	d94b      	bls.n	80069fe <_vfiprintf_r+0x1a2>
 8006966:	b1b0      	cbz	r0, 8006996 <_vfiprintf_r+0x13a>
 8006968:	9207      	str	r2, [sp, #28]
 800696a:	e014      	b.n	8006996 <_vfiprintf_r+0x13a>
 800696c:	eba0 0308 	sub.w	r3, r0, r8
 8006970:	fa09 f303 	lsl.w	r3, r9, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	46a2      	mov	sl, r4
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	e7d2      	b.n	8006922 <_vfiprintf_r+0xc6>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	1d19      	adds	r1, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	9103      	str	r1, [sp, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	bfbb      	ittet	lt
 8006988:	425b      	neglt	r3, r3
 800698a:	f042 0202 	orrlt.w	r2, r2, #2
 800698e:	9307      	strge	r3, [sp, #28]
 8006990:	9307      	strlt	r3, [sp, #28]
 8006992:	bfb8      	it	lt
 8006994:	9204      	strlt	r2, [sp, #16]
 8006996:	7823      	ldrb	r3, [r4, #0]
 8006998:	2b2e      	cmp	r3, #46	@ 0x2e
 800699a:	d10a      	bne.n	80069b2 <_vfiprintf_r+0x156>
 800699c:	7863      	ldrb	r3, [r4, #1]
 800699e:	2b2a      	cmp	r3, #42	@ 0x2a
 80069a0:	d132      	bne.n	8006a08 <_vfiprintf_r+0x1ac>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	3402      	adds	r4, #2
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	9203      	str	r2, [sp, #12]
 80069ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006a7c <_vfiprintf_r+0x220>
 80069b6:	2203      	movs	r2, #3
 80069b8:	4650      	mov	r0, sl
 80069ba:	7821      	ldrb	r1, [r4, #0]
 80069bc:	f7fe fa93 	bl	8004ee6 <memchr>
 80069c0:	b138      	cbz	r0, 80069d2 <_vfiprintf_r+0x176>
 80069c2:	2240      	movs	r2, #64	@ 0x40
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	eba0 000a 	sub.w	r0, r0, sl
 80069ca:	4082      	lsls	r2, r0
 80069cc:	4313      	orrs	r3, r2
 80069ce:	3401      	adds	r4, #1
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d6:	2206      	movs	r2, #6
 80069d8:	4829      	ldr	r0, [pc, #164]	@ (8006a80 <_vfiprintf_r+0x224>)
 80069da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069de:	f7fe fa82 	bl	8004ee6 <memchr>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d03f      	beq.n	8006a66 <_vfiprintf_r+0x20a>
 80069e6:	4b27      	ldr	r3, [pc, #156]	@ (8006a84 <_vfiprintf_r+0x228>)
 80069e8:	bb1b      	cbnz	r3, 8006a32 <_vfiprintf_r+0x1d6>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	3307      	adds	r3, #7
 80069ee:	f023 0307 	bic.w	r3, r3, #7
 80069f2:	3308      	adds	r3, #8
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f8:	443b      	add	r3, r7
 80069fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fc:	e76a      	b.n	80068d4 <_vfiprintf_r+0x78>
 80069fe:	460c      	mov	r4, r1
 8006a00:	2001      	movs	r0, #1
 8006a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a06:	e7a8      	b.n	800695a <_vfiprintf_r+0xfe>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4619      	mov	r1, r3
 8006a10:	3401      	adds	r4, #1
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	4620      	mov	r0, r4
 8006a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a1a:	3a30      	subs	r2, #48	@ 0x30
 8006a1c:	2a09      	cmp	r2, #9
 8006a1e:	d903      	bls.n	8006a28 <_vfiprintf_r+0x1cc>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0c6      	beq.n	80069b2 <_vfiprintf_r+0x156>
 8006a24:	9105      	str	r1, [sp, #20]
 8006a26:	e7c4      	b.n	80069b2 <_vfiprintf_r+0x156>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a30:	e7f0      	b.n	8006a14 <_vfiprintf_r+0x1b8>
 8006a32:	ab03      	add	r3, sp, #12
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	462a      	mov	r2, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	4b13      	ldr	r3, [pc, #76]	@ (8006a88 <_vfiprintf_r+0x22c>)
 8006a3c:	a904      	add	r1, sp, #16
 8006a3e:	f7fd fb69 	bl	8004114 <_printf_float>
 8006a42:	4607      	mov	r7, r0
 8006a44:	1c78      	adds	r0, r7, #1
 8006a46:	d1d6      	bne.n	80069f6 <_vfiprintf_r+0x19a>
 8006a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_vfiprintf_r+0x1fe>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_vfiprintf_r+0x1fe>
 8006a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a56:	f7fe fa45 	bl	8004ee4 <__retarget_lock_release_recursive>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	065b      	lsls	r3, r3, #25
 8006a5e:	f53f af1f 	bmi.w	80068a0 <_vfiprintf_r+0x44>
 8006a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a64:	e71e      	b.n	80068a4 <_vfiprintf_r+0x48>
 8006a66:	ab03      	add	r3, sp, #12
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <_vfiprintf_r+0x22c>)
 8006a70:	a904      	add	r1, sp, #16
 8006a72:	f7fd fded 	bl	8004650 <_printf_i>
 8006a76:	e7e4      	b.n	8006a42 <_vfiprintf_r+0x1e6>
 8006a78:	08006edf 	.word	0x08006edf
 8006a7c:	08006ee5 	.word	0x08006ee5
 8006a80:	08006ee9 	.word	0x08006ee9
 8006a84:	08004115 	.word	0x08004115
 8006a88:	08006839 	.word	0x08006839

08006a8c <_raise_r>:
 8006a8c:	291f      	cmp	r1, #31
 8006a8e:	b538      	push	{r3, r4, r5, lr}
 8006a90:	4605      	mov	r5, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	d904      	bls.n	8006aa0 <_raise_r+0x14>
 8006a96:	2316      	movs	r3, #22
 8006a98:	6003      	str	r3, [r0, #0]
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006aa2:	b112      	cbz	r2, 8006aaa <_raise_r+0x1e>
 8006aa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006aa8:	b94b      	cbnz	r3, 8006abe <_raise_r+0x32>
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 f830 	bl	8006b10 <_getpid_r>
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aba:	f000 b817 	b.w	8006aec <_kill_r>
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d00a      	beq.n	8006ad8 <_raise_r+0x4c>
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	d103      	bne.n	8006ace <_raise_r+0x42>
 8006ac6:	2316      	movs	r3, #22
 8006ac8:	6003      	str	r3, [r0, #0]
 8006aca:	2001      	movs	r0, #1
 8006acc:	e7e7      	b.n	8006a9e <_raise_r+0x12>
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ad6:	4798      	blx	r3
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e7e0      	b.n	8006a9e <_raise_r+0x12>

08006adc <raise>:
 8006adc:	4b02      	ldr	r3, [pc, #8]	@ (8006ae8 <raise+0xc>)
 8006ade:	4601      	mov	r1, r0
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	f7ff bfd3 	b.w	8006a8c <_raise_r>
 8006ae6:	bf00      	nop
 8006ae8:	20000020 	.word	0x20000020

08006aec <_kill_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	2300      	movs	r3, #0
 8006af0:	4d06      	ldr	r5, [pc, #24]	@ (8006b0c <_kill_r+0x20>)
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f7fa fd54 	bl	80015a6 <_kill>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d102      	bne.n	8006b08 <_kill_r+0x1c>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	b103      	cbz	r3, 8006b08 <_kill_r+0x1c>
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000490 	.word	0x20000490

08006b10 <_getpid_r>:
 8006b10:	f7fa bd42 	b.w	8001598 <_getpid>

08006b14 <_init>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr

08006b20 <_fini>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	bf00      	nop
 8006b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b26:	bc08      	pop	{r3}
 8006b28:	469e      	mov	lr, r3
 8006b2a:	4770      	bx	lr
