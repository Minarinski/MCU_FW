
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800b3c0  0800b3c0  0001b3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae0  0800bae0  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800bae0  0800bae0  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bae0  0800bae0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800bae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002568  20000208  0800bcec  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002770  0800bcec  00022770  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6f1  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec1  00000000  00000000  0002c961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008fd  00000000  00000000  0002f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001829f  00000000  00000000  0002fca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7da  00000000  00000000  00047f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087166  00000000  00000000  0005671e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004628  00000000  00000000  000dd884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e1eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3a4 	.word	0x0800b3a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800b3a4 	.word	0x0800b3a4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc37 	bl	80009d0 <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9ad 	bl	80004ec <__aeabi_dmul>
 8001192:	f7ff fc83 	bl	8000a9c <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f92e 	bl	80003f8 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f9a4 	bl	80004ec <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffe6 	bl	800017c <__aeabi_dsub>
 80011b0:	f7ff fc74 	bl	8000a9c <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
    oldPos = newPos; //keep track of the last position in the buffer
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d2:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	4413      	add	r3, r2
 80011de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e2:	dd22      	ble.n	800122a <HAL_UARTEx_RxEventCallback+0x6a>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011ec:	81fb      	strh	r3, [r7, #14]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 80011f6:	4413      	add	r3, r2
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	4920      	ldr	r1, [pc, #128]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 feec 	bl	8008fda <memcpy>

        oldPos = 0;  // point to the start of the buffer
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 800120c:	1899      	adds	r1, r3, r2
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001218:	f007 fedf 	bl	8008fda <memcpy>
        newPos = (Size-datatocopy);  // update the position
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	e010      	b.n	800124c <HAL_UARTEx_RxEventCallback+0x8c>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001232:	4413      	add	r3, r2
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	4911      	ldr	r1, [pc, #68]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fece 	bl	8008fda <memcpy>
        newPos = Size+oldPos; //update buffer position
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	4413      	add	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_UARTEx_RxEventCallback+0xb0>)
 800124a:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	490b      	ldr	r1, [pc, #44]	; (800127c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001252:	f004 ff0f 	bl	8006074 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); //disable the half transfer interrupt
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_UARTEx_RxEventCallback+0xc4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002180 	.word	0x20002180
 8001274:	2000217e 	.word	0x2000217e
 8001278:	200021c4 	.word	0x200021c4
 800127c:	20002184 	.word	0x20002184
 8001280:	20000308 	.word	0x20000308
 8001284:	20000350 	.word	0x20000350

08001288 <LCD_SendInternal>:

//LCD ============================================
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	460b      	mov	r3, r1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	b299      	uxth	r1, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2201      	movs	r2, #1
 80012a4:	4822      	ldr	r0, [pc, #136]	; (8001330 <LCD_SendInternal+0xa8>)
 80012a6:	f003 fe55 	bl	8004f54 <HAL_I2C_IsDeviceReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d000      	beq.n	80012b6 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80012b4:	e7f1      	b.n	800129a <LCD_SendInternal+0x12>
			break;
 80012b6:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f043 030c 	orr.w	r3, r3, #12
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | LCD_BACKLIGHT;
 80012d6:	7bba      	ldrb	r2, [r7, #14]
 80012d8:	797b      	ldrb	r3, [r7, #5]
 80012da:	4313      	orrs	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012e6:	7b7a      	ldrb	r2, [r7, #13]
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f043 030c 	orr.w	r3, r3, #12
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | LCD_BACKLIGHT;
 80012f6:	7b7a      	ldrb	r2, [r7, #13]
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	b299      	uxth	r1, r3
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2304      	movs	r3, #4
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <LCD_SendInternal+0xa8>)
 8001318:	f003 fd1e 	bl	8004d58 <HAL_I2C_Master_Transmit>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001320:	2005      	movs	r0, #5
 8001322:	f002 fe1d 	bl	8003f60 <HAL_Delay>
	return res;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000224 	.word	0x20000224

08001334 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2200      	movs	r2, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff9c 	bl	8001288 <LCD_SendInternal>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8001368:	79b9      	ldrb	r1, [r7, #6]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2201      	movs	r2, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff8a 	bl	8001288 <LCD_SendInternal>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0x30);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2130      	movs	r1, #48	; 0x30
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffd2 	bl	8001334 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0x02);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffcd 	bl	8001334 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	210c      	movs	r1, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffc8 	bl	8001334 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffc3 	bl	8001334 <LCD_SendCommand>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	6039      	str	r1, [r7, #0]
 80013c0:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80013c2:	e009      	b.n	80013d8 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffc3 	bl	8001358 <LCD_SendData>
		str++;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f1      	bne.n	80013c4 <LCD_SendString+0xe>
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	603a      	str	r2, [r7, #0]
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	460b      	mov	r3, r1
 80013f8:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001404:	b25b      	sxtb	r3, r3
 8001406:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 8001408:	7afa      	ldrb	r2, [r7, #11]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff90 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e00b      	b.n	8001432 <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff96 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b07      	cmp	r3, #7
 8001436:	ddf0      	ble.n	800141a <LCD_SET_CGRAM+0x30>
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <LCD_Write_Info>:

void LCD_Write_Info(struct DataFlash nowData, struct DataFlash nextData) {
 8001442:	b084      	sub	sp, #16
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	f107 0c10 	add.w	ip, r7, #16
 800144e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8001452:	2101      	movs	r1, #1
 8001454:	204e      	movs	r0, #78	; 0x4e
 8001456:	f7ff ff6d 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	204e      	movs	r0, #78	; 0x4e
 800145e:	f7ff ff69 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 8001462:	f107 0315 	add.w	r3, r7, #21
 8001466:	4619      	mov	r1, r3
 8001468:	204e      	movs	r0, #78	; 0x4e
 800146a:	f7ff ffa4 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	204e      	movs	r0, #78	; 0x4e
 8001472:	f7ff ff71 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e006      	b.n	800148a <LCD_Write_Info+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800147c:	2114      	movs	r1, #20
 800147e:	204e      	movs	r0, #78	; 0x4e
 8001480:	f7ff ff58 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0a      	cmp	r3, #10
 800148e:	ddf5      	ble.n	800147c <LCD_Write_Info+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001490:	2101      	movs	r1, #1
 8001492:	204e      	movs	r0, #78	; 0x4e
 8001494:	f7ff ff60 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001498:	21c0      	movs	r1, #192	; 0xc0
 800149a:	204e      	movs	r0, #78	; 0x4e
 800149c:	f7ff ff4a 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 80014a0:	2103      	movs	r1, #3
 80014a2:	204e      	movs	r0, #78	; 0x4e
 80014a4:	f7ff ff58 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 80014a8:	f107 031a 	add.w	r3, r7, #26
 80014ac:	4619      	mov	r1, r3
 80014ae:	204e      	movs	r0, #78	; 0x4e
 80014b0:	f7ff ff81 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 80014b4:	2103      	movs	r1, #3
 80014b6:	204e      	movs	r0, #78	; 0x4e
 80014b8:	f7ff ff4e 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014bc:	2103      	movs	r1, #3
 80014be:	204e      	movs	r0, #78	; 0x4e
 80014c0:	f7ff ff4a 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014c4:	2103      	movs	r1, #3
 80014c6:	204e      	movs	r0, #78	; 0x4e
 80014c8:	f7ff ff46 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nextData.busStopID);
 80014cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014d0:	330a      	adds	r3, #10
 80014d2:	4619      	mov	r1, r3
 80014d4:	204e      	movs	r0, #78	; 0x4e
 80014d6:	f7ff ff6e 	bl	80013b6 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	e006      	b.n	80014ee <LCD_Write_Info+0xac>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80014e0:	2114      	movs	r1, #20
 80014e2:	204e      	movs	r0, #78	; 0x4e
 80014e4:	f7ff ff26 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	ddf5      	ble.n	80014e0 <LCD_Write_Info+0x9e>
	}
	LCD_SendData(LCD_ADDR, 1);
 80014f4:	2101      	movs	r1, #1
 80014f6:	204e      	movs	r0, #78	; 0x4e
 80014f8:	f7ff ff2e 	bl	8001358 <LCD_SendData>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001506:	b004      	add	sp, #16
 8001508:	4770      	bx	lr
	...

0800150c <updateLCD>:

void updateLCD() {
 800150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001510:	b096      	sub	sp, #88	; 0x58
 8001512:	af16      	add	r7, sp, #88	; 0x58
	LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <updateLCD+0xac>)
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <updateLCD+0xac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4827      	ldr	r0, [pc, #156]	; (80015bc <updateLCD+0xb0>)
 8001520:	460b      	mov	r3, r1
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	440b      	add	r3, r1
 8001526:	0119      	lsls	r1, r3, #4
 8001528:	440b      	add	r3, r1
 800152a:	18c4      	adds	r4, r0, r3
 800152c:	4923      	ldr	r1, [pc, #140]	; (80015bc <updateLCD+0xb0>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	011a      	lsls	r2, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	440b      	add	r3, r1
 800153a:	461d      	mov	r5, r3
 800153c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8001540:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001544:	4666      	mov	r6, ip
 8001546:	462b      	mov	r3, r5
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001552:	3510      	adds	r5, #16
 8001554:	f10c 0c10 	add.w	ip, ip, #16
 8001558:	4575      	cmp	r5, lr
 800155a:	d1f3      	bne.n	8001544 <updateLCD+0x38>
 800155c:	4663      	mov	r3, ip
 800155e:	462a      	mov	r2, r5
 8001560:	8811      	ldrh	r1, [r2, #0]
 8001562:	7892      	ldrb	r2, [r2, #2]
 8001564:	8019      	strh	r1, [r3, #0]
 8001566:	709a      	strb	r2, [r3, #2]
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	469a      	mov	sl, r3
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	4699      	mov	r9, r3
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	4698      	mov	r8, r3
 8001574:	68e3      	ldr	r3, [r4, #12]
 8001576:	469e      	mov	lr, r3
 8001578:	3410      	adds	r4, #16
 800157a:	466e      	mov	r6, sp
 800157c:	f104 0c20 	add.w	ip, r4, #32
 8001580:	4635      	mov	r5, r6
 8001582:	4623      	mov	r3, r4
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158e:	3410      	adds	r4, #16
 8001590:	3610      	adds	r6, #16
 8001592:	4564      	cmp	r4, ip
 8001594:	d1f4      	bne.n	8001580 <updateLCD+0x74>
 8001596:	4633      	mov	r3, r6
 8001598:	4622      	mov	r2, r4
 800159a:	8811      	ldrh	r1, [r2, #0]
 800159c:	7892      	ldrb	r2, [r2, #2]
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	709a      	strb	r2, [r3, #2]
 80015a2:	4650      	mov	r0, sl
 80015a4:	4649      	mov	r1, r9
 80015a6:	4642      	mov	r2, r8
 80015a8:	4673      	mov	r3, lr
 80015aa:	f7ff ff4a 	bl	8001442 <LCD_Write_Info>
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015b6:	bf00      	nop
 80015b8:	20002178 	.word	0x20002178
 80015bc:	20000394 	.word	0x20000394

080015c0 <LCD_Write_Arrive>:

void LCD_Write_Arrive(struct DataFlash nowData) {
 80015c0:	b084      	sub	sp, #16
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	f107 0c10 	add.w	ip, r7, #16
 80015cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 80015d0:	2101      	movs	r1, #1
 80015d2:	204e      	movs	r0, #78	; 0x4e
 80015d4:	f7ff feae 	bl	8001334 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	204e      	movs	r0, #78	; 0x4e
 80015dc:	f7ff feaa 	bl	8001334 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 80015e0:	f107 0315 	add.w	r3, r7, #21
 80015e4:	4619      	mov	r1, r3
 80015e6:	204e      	movs	r0, #78	; 0x4e
 80015e8:	f7ff fee5 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	204e      	movs	r0, #78	; 0x4e
 80015f0:	f7ff feb2 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	e006      	b.n	8001608 <LCD_Write_Arrive+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80015fa:	2114      	movs	r1, #20
 80015fc:	204e      	movs	r0, #78	; 0x4e
 80015fe:	f7ff fe99 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b0a      	cmp	r3, #10
 800160c:	ddf5      	ble.n	80015fa <LCD_Write_Arrive+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 800160e:	2101      	movs	r1, #1
 8001610:	204e      	movs	r0, #78	; 0x4e
 8001612:	f7ff fea1 	bl	8001358 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001616:	21c0      	movs	r1, #192	; 0xc0
 8001618:	204e      	movs	r0, #78	; 0x4e
 800161a:	f7ff fe8b 	bl	8001334 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 800161e:	2103      	movs	r1, #3
 8001620:	204e      	movs	r0, #78	; 0x4e
 8001622:	f7ff fe99 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8001626:	2103      	movs	r1, #3
 8001628:	204e      	movs	r0, #78	; 0x4e
 800162a:	f7ff fe95 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 800162e:	2103      	movs	r1, #3
 8001630:	204e      	movs	r0, #78	; 0x4e
 8001632:	f7ff fe91 	bl	8001358 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 8001636:	f107 031a 	add.w	r3, r7, #26
 800163a:	4619      	mov	r1, r3
 800163c:	204e      	movs	r0, #78	; 0x4e
 800163e:	f7ff feba 	bl	80013b6 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 4);
 8001642:	2104      	movs	r1, #4
 8001644:	204e      	movs	r0, #78	; 0x4e
 8001646:	f7ff fe87 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 800164a:	2104      	movs	r1, #4
 800164c:	204e      	movs	r0, #78	; 0x4e
 800164e:	f7ff fe83 	bl	8001358 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 8001652:	2104      	movs	r1, #4
 8001654:	204e      	movs	r0, #78	; 0x4e
 8001656:	f7ff fe7f 	bl	8001358 <LCD_SendData>
	for (int i = 0; i < 4; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	e006      	b.n	800166e <LCD_Write_Arrive+0xae>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8001660:	2114      	movs	r1, #20
 8001662:	204e      	movs	r0, #78	; 0x4e
 8001664:	f7ff fe66 	bl	8001334 <LCD_SendCommand>
	for (int i = 0; i < 4; i++) {
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	ddf5      	ble.n	8001660 <LCD_Write_Arrive+0xa0>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001674:	2101      	movs	r1, #1
 8001676:	204e      	movs	r0, #78	; 0x4e
 8001678:	f7ff fe6e 	bl	8001358 <LCD_SendData>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001686:	b004      	add	sp, #16
 8001688:	4770      	bx	lr
	...

0800168c <Flash_Unlock>:

//Flash===========================================================

int dataIdx = 0;

void Flash_Unlock(void) {
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;  // Key1
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <Flash_Unlock+0x18>)
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <Flash_Unlock+0x1c>)
 8001694:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;  // Key2
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <Flash_Unlock+0x18>)
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <Flash_Unlock+0x20>)
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40022000 	.word	0x40022000
 80016a8:	45670123 	.word	0x45670123
 80016ac:	cdef89ab 	.word	0xcdef89ab

080016b0 <Flash_Lock>:

void Flash_Lock(void) {
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <Flash_Lock+0x18>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <Flash_Lock+0x18>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	6113      	str	r3, [r2, #16]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40022000 	.word	0x40022000

080016cc <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t data) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
	while (FLASH->SR & FLASH_SR_BSY)
 80016d8:	bf00      	nop
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <Flash_Write+0x54>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <Flash_Write+0xe>
		;  // Busy flag 체크

	FLASH->CR |= FLASH_CR_PG;  // Programming mode ?��?��
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <Flash_Write+0x54>)
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <Flash_Write+0x54>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*) address = data;  // ?��?��?�� 기록
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	801a      	strh	r2, [r3, #0]

	while (FLASH->SR & FLASH_SR_BSY)
 80016fa:	bf00      	nop
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <Flash_Write+0x54>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <Flash_Write+0x30>
		;  // Busy flag 체크

	FLASH->CR &= ~FLASH_CR_PG;  // Programming mode ?��?��
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <Flash_Write+0x54>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <Flash_Write+0x54>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6113      	str	r3, [r2, #16]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <Flash_Write_Char>:
	uint16_t value = (uint16_t) strtol((const char*) StrData, NULL, 10);
	Flash_Write(address, value);  // ?��?�� 값을 ?��?��?�� 메모리에 ???��
	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
}

uint32_t Flash_Write_Char(uint32_t address, uint8_t CharData) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
	Flash_Unlock();
 8001730:	f7ff ffac 	bl	800168c <Flash_Unlock>
	Flash_Write(address, CharData);
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffc7 	bl	80016cc <Flash_Write>
	Flash_Lock();
 800173e:	f7ff ffb7 	bl	80016b0 <Flash_Lock>
	return address + 0x02;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3302      	adds	r3, #2
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <Flash_Write_Str>:

uint32_t Flash_Write_Str(uint32_t address, uint8_t *StrData) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e00b      	b.n	8001776 <Flash_Write_Str+0x28>
		address = Flash_Write_Char(address, StrData[i]);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ffdb 	bl	8001724 <Flash_Write_Char>
 800176e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f7fe fcf4 	bl	8000164 <strlen>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8ec      	bhi.n	800175e <Flash_Write_Str+0x10>
	}
	//printf("%x\r\n", address);
	return address;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t address, uint8_t *StrData) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	char *token;

	token = strtok(StrData, ",");
 800179a:	4999      	ldr	r1, [pc, #612]	; (8001a00 <Flash_Write_Data+0x270>)
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f007 fb0d 	bl	8008dbc <strtok>
 80017a2:	60f8      	str	r0, [r7, #12]
	if (token[0] == 'D') {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b44      	cmp	r3, #68	; 0x44
 80017aa:	f040 80a7 	bne.w	80018fc <Flash_Write_Data+0x16c>
		token = strtok(NULL, ",");
 80017ae:	4994      	ldr	r1, [pc, #592]	; (8001a00 <Flash_Write_Data+0x270>)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f007 fb03 	bl	8008dbc <strtok>
 80017b6:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02c      	beq.n	8001818 <Flash_Write_Data+0x88>
			strncpy(data[dataIdx].busNM, token,
 80017be:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <Flash_Write_Data+0x274>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	011a      	lsls	r2, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	4a8e      	ldr	r2, [pc, #568]	; (8001a08 <Flash_Write_Data+0x278>)
 80017ce:	4413      	add	r3, r2
 80017d0:	2204      	movs	r2, #4
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 fadd 	bl	8008d94 <strncpy>
					sizeof(data[dataIdx].busNM) - 1);
			data[dataIdx].busNM[sizeof(data[dataIdx].busNM) - 1] = '\0';
 80017da:	4b8a      	ldr	r3, [pc, #552]	; (8001a04 <Flash_Write_Data+0x274>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	498a      	ldr	r1, [pc, #552]	; (8001a08 <Flash_Write_Data+0x278>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	011a      	lsls	r2, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busNM);
 80017f2:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <Flash_Write_Data+0x274>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	011a      	lsls	r2, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	4a81      	ldr	r2, [pc, #516]	; (8001a08 <Flash_Write_Data+0x278>)
 8001802:	4413      	add	r3, r2
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa1 	bl	800174e <Flash_Write_Str>
 800180c:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff87 	bl	8001724 <Flash_Write_Char>
 8001816:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001818:	4979      	ldr	r1, [pc, #484]	; (8001a00 <Flash_Write_Data+0x270>)
 800181a:	2000      	movs	r0, #0
 800181c:	f007 face 	bl	8008dbc <strtok>
 8001820:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02e      	beq.n	8001886 <Flash_Write_Data+0xf6>
			strncpy(data[dataIdx].busRouteno, token,
 8001828:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <Flash_Write_Data+0x274>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	011a      	lsls	r2, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	4a74      	ldr	r2, [pc, #464]	; (8001a08 <Flash_Write_Data+0x278>)
 8001838:	4413      	add	r3, r2
 800183a:	3305      	adds	r3, #5
 800183c:	2204      	movs	r2, #4
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	4618      	mov	r0, r3
 8001842:	f007 faa7 	bl	8008d94 <strncpy>
					sizeof(data[dataIdx].busRouteno) - 1);
			data[dataIdx].busRouteno[sizeof(data[dataIdx].busRouteno) - 1] =
 8001846:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <Flash_Write_Data+0x274>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	496f      	ldr	r1, [pc, #444]	; (8001a08 <Flash_Write_Data+0x278>)
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	011a      	lsls	r2, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	440b      	add	r3, r1
 8001858:	3309      	adds	r3, #9
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
					'\0';
			address = Flash_Write_Str(address, data[dataIdx].busRouteno);
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <Flash_Write_Data+0x274>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	011a      	lsls	r2, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	4a66      	ldr	r2, [pc, #408]	; (8001a08 <Flash_Write_Data+0x278>)
 800186e:	4413      	add	r3, r2
 8001870:	3305      	adds	r3, #5
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff6a 	bl	800174e <Flash_Write_Str>
 800187a:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff50 	bl	8001724 <Flash_Write_Char>
 8001884:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001886:	495e      	ldr	r1, [pc, #376]	; (8001a00 <Flash_Write_Data+0x270>)
 8001888:	2000      	movs	r0, #0
 800188a:	f007 fa97 	bl	8008dbc <strtok>
 800188e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80af 	beq.w	80019f6 <Flash_Write_Data+0x266>
			strncpy(data[dataIdx].busStopID, token,
 8001898:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <Flash_Write_Data+0x274>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	011a      	lsls	r2, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	3308      	adds	r3, #8
 80018a8:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <Flash_Write_Data+0x278>)
 80018aa:	4413      	add	r3, r2
 80018ac:	3302      	adds	r3, #2
 80018ae:	2207      	movs	r2, #7
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f007 fa6e 	bl	8008d94 <strncpy>
					sizeof(data[dataIdx].busStopID) - 1);
			data[dataIdx].busStopID[sizeof(data[dataIdx].busStopID) - 1] = '\0';
 80018b8:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <Flash_Write_Data+0x274>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4952      	ldr	r1, [pc, #328]	; (8001a08 <Flash_Write_Data+0x278>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	011a      	lsls	r2, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	3311      	adds	r3, #17
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busStopID);
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <Flash_Write_Data+0x274>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	011a      	lsls	r2, r3, #4
 80018dc:	4413      	add	r3, r2
 80018de:	3308      	adds	r3, #8
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <Flash_Write_Data+0x278>)
 80018e2:	4413      	add	r3, r2
 80018e4:	3302      	adds	r3, #2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff30 	bl	800174e <Flash_Write_Str>
 80018ee:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff16 	bl	8001724 <Flash_Write_Char>
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	e07c      	b.n	80019f6 <Flash_Write_Data+0x266>
		}
	} else {
		token = strtok(NULL, ",");
 80018fc:	4940      	ldr	r1, [pc, #256]	; (8001a00 <Flash_Write_Data+0x270>)
 80018fe:	2000      	movs	r0, #0
 8001900:	f007 fa5c 	bl	8008dbc <strtok>
 8001904:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d030      	beq.n	800196e <Flash_Write_Data+0x1de>
			strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <Flash_Write_Data+0x274>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	011a      	lsls	r2, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	3310      	adds	r3, #16
 800191c:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <Flash_Write_Data+0x278>)
 800191e:	4413      	add	r3, r2
 8001920:	3302      	adds	r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f007 fa34 	bl	8008d94 <strncpy>
			data[dataIdx].lati[sizeof(data[dataIdx].lati) - 1] = '\0';
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <Flash_Write_Data+0x274>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4935      	ldr	r1, [pc, #212]	; (8001a08 <Flash_Write_Data+0x278>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	011a      	lsls	r2, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	440b      	add	r3, r1
 800193e:	3321      	adds	r3, #33	; 0x21
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].lati);
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <Flash_Write_Data+0x274>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	011a      	lsls	r2, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	3310      	adds	r3, #16
 8001954:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <Flash_Write_Data+0x278>)
 8001956:	4413      	add	r3, r2
 8001958:	3302      	adds	r3, #2
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fef6 	bl	800174e <Flash_Write_Str>
 8001962:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fedc 	bl	8001724 <Flash_Write_Char>
 800196c:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 800196e:	4924      	ldr	r1, [pc, #144]	; (8001a00 <Flash_Write_Data+0x270>)
 8001970:	2000      	movs	r0, #0
 8001972:	f007 fa23 	bl	8008dbc <strtok>
 8001976:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d030      	beq.n	80019e0 <Flash_Write_Data+0x250>
			strncpy(data[dataIdx].longi, token,
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <Flash_Write_Data+0x274>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	011a      	lsls	r2, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3320      	adds	r3, #32
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <Flash_Write_Data+0x278>)
 8001990:	4413      	add	r3, r2
 8001992:	3302      	adds	r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	4618      	mov	r0, r3
 800199a:	f007 f9fb 	bl	8008d94 <strncpy>
					sizeof(data[dataIdx].longi) - 1);
			data[dataIdx].longi[sizeof(data[dataIdx].longi) - 1] = '\0';
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <Flash_Write_Data+0x274>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4919      	ldr	r1, [pc, #100]	; (8001a08 <Flash_Write_Data+0x278>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	011a      	lsls	r2, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	3331      	adds	r3, #49	; 0x31
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].longi);
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <Flash_Write_Data+0x274>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	011a      	lsls	r2, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	3320      	adds	r3, #32
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <Flash_Write_Data+0x278>)
 80019c8:	4413      	add	r3, r2
 80019ca:	3302      	adds	r3, #2
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff febd 	bl	800174e <Flash_Write_Str>
 80019d4:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, '!');
 80019d6:	2121      	movs	r1, #33	; 0x21
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fea3 	bl	8001724 <Flash_Write_Char>
 80019de:	6078      	str	r0, [r7, #4]
		}
		dataIdx += 1;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <Flash_Write_Data+0x274>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <Flash_Write_Data+0x274>)
 80019e8:	6013      	str	r3, [r2, #0]
		if (dataIdx == 2) {
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <Flash_Write_Data+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d101      	bne.n	80019f6 <Flash_Write_Data+0x266>
			updateLCD();
 80019f2:	f7ff fd8b 	bl	800150c <updateLCD>
		}
	}
//	printf("busNM:%s, busRouteNo:%s, BusStopID:%s, lati:%s, longi:%s\r\n",
//			data.busNM, data.busRouteno, data.busStopID, data.lati, data.longi);
	return address;
 80019f6:	687b      	ldr	r3, [r7, #4]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	0800b3c0 	.word	0x0800b3c0
 8001a04:	20002404 	.word	0x20002404
 8001a08:	20000394 	.word	0x20000394

08001a0c <Flash_Read>:

uint16_t Flash_Read(uint32_t address) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) address; // �???��?�� ?��?��?�� 메모�?? 주소?��?�� ?��?��?�� ?���??
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <Flash_Erase_Page>:

void Flash_Erase_Page(uint32_t address) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	Flash_Unlock();  // ?��?��?�� 메모�?? ?��?��
 8001a2c:	f7ff fe2e 	bl	800168c <Flash_Unlock>

	FLASH->CR |= FLASH_CR_PER;   // Page Erase 비트 ?��?��
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	6113      	str	r3, [r2, #16]
	FLASH->AR = address;         // �???�� ?��?���???�� 주소 ?��?��
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;  // Erase ?��?��
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4c:	6113      	str	r3, [r2, #16]

	while (FLASH->SR & FLASH_SR_BSY)
 8001a4e:	bf00      	nop
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <Flash_Erase_Page+0x2c>
		;  // ?��?��?�� ?��료될 ?��까�? ??�??

	FLASH->CR &= ~FLASH_CR_PER;  // Page Erase 비트 ?��?��
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <Flash_Erase_Page+0x50>)
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	6113      	str	r3, [r2, #16]

	Flash_Lock();  // ?��?��?�� 메모�?? ?���??
 8001a68:	f7ff fe22 	bl	80016b0 <Flash_Lock>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40022000 	.word	0x40022000

08001a78 <splitData>:

void splitData(char *strData) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	char *token;

	token = strtok(strData, ","); // CarNM
 8001a80:	4934      	ldr	r1, [pc, #208]	; (8001b54 <splitData+0xdc>)
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f007 f99a 	bl	8008dbc <strtok>
 8001a88:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <splitData+0xe0>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	011a      	lsls	r2, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <splitData+0xe4>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 f977 	bl	8008d94 <strncpy>

	token = strtok(NULL, ","); // RouteNo
 8001aa6:	492b      	ldr	r1, [pc, #172]	; (8001b54 <splitData+0xdc>)
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f007 f987 	bl	8008dbc <strtok>
 8001aae:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busRouteno, token,
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <splitData+0xe0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	011a      	lsls	r2, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <splitData+0xe4>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3305      	adds	r3, #5
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f007 f963 	bl	8008d94 <strncpy>
			sizeof(data[dataIdx].busRouteno) - 1);

	token = strtok(NULL, ","); // StopID
 8001ace:	4921      	ldr	r1, [pc, #132]	; (8001b54 <splitData+0xdc>)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f007 f973 	bl	8008dbc <strtok>
 8001ad6:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busStopID, token,
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <splitData+0xe0>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	011a      	lsls	r2, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <splitData+0xe4>)
 8001aea:	4413      	add	r3, r2
 8001aec:	3302      	adds	r3, #2
 8001aee:	2207      	movs	r2, #7
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f007 f94e 	bl	8008d94 <strncpy>
			sizeof(data[dataIdx].busStopID) - 1);

	token = strtok(NULL, ","); // lati
 8001af8:	4916      	ldr	r1, [pc, #88]	; (8001b54 <splitData+0xdc>)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f007 f95e 	bl	8008dbc <strtok>
 8001b00:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <splitData+0xe0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	011a      	lsls	r2, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	3310      	adds	r3, #16
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <splitData+0xe4>)
 8001b14:	4413      	add	r3, r2
 8001b16:	3302      	adds	r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f007 f939 	bl	8008d94 <strncpy>

	token = strtok(NULL, "!"); // longi
 8001b22:	490f      	ldr	r1, [pc, #60]	; (8001b60 <splitData+0xe8>)
 8001b24:	2000      	movs	r0, #0
 8001b26:	f007 f949 	bl	8008dbc <strtok>
 8001b2a:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <splitData+0xe0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	011a      	lsls	r2, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	3320      	adds	r3, #32
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <splitData+0xe4>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	3302      	adds	r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 f924 	bl	8008d94 <strncpy>
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	0800b3c0 	.word	0x0800b3c0
 8001b58:	20002404 	.word	0x20002404
 8001b5c:	20000394 	.word	0x20000394
 8001b60:	0800b3c4 	.word	0x0800b3c4

08001b64 <CallData>:

uint32_t CallData(uint32_t address) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b096      	sub	sp, #88	; 0x58
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	char a[70] = { 0, };
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2242      	movs	r2, #66	; 0x42
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f007 f8f1 	bl	8008d60 <memset>
	int i = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		a[i] = (char) Flash_Read(address);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff42 	bl	8001a0c <Flash_Read>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	4413      	add	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
		address += 0x02;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	607b      	str	r3, [r7, #4]
		if (a[i] == 0xFF) {
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d101      	bne.n	8001bb0 <CallData+0x4c>
			return address;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	e01e      	b.n	8001bee <CallData+0x8a>
		}
		if (a[i] == '!') {
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b21      	cmp	r3, #33	; 0x21
 8001bbc:	d113      	bne.n	8001be6 <CallData+0x82>
			splitData(a);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff58 	bl	8001a78 <splitData>
			dataIdx += 1;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <CallData+0x94>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <CallData+0x94>)
 8001bd0:	6013      	str	r3, [r2, #0]
			i = -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	657b      	str	r3, [r7, #84]	; 0x54
			memset(a, 0, 60);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	223c      	movs	r2, #60	; 0x3c
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f007 f8bd 	bl	8008d60 <memset>
		}
		i += 1;
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	3301      	adds	r3, #1
 8001bea:	657b      	str	r3, [r7, #84]	; 0x54
		a[i] = (char) Flash_Read(address);
 8001bec:	e7c9      	b.n	8001b82 <CallData+0x1e>
	}
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3758      	adds	r7, #88	; 0x58
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20002404 	.word	0x20002404

08001bfc <convertToDecimalDegrees>:

// GPS=======================================================
char latitude[16];
char longitude[16];

double convertToDecimalDegrees(const char *coordinate, char type) {
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
	int degrees;
	double minutes;
	double decimalDegrees;

	if (type == 'L') { // Latitude
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	2b4c      	cmp	r3, #76	; 0x4c
 8001c0c:	d116      	bne.n	8001c3c <convertToDecimalDegrees+0x40>
		// 첫 두 자리 (도)
		degrees = (coordinate[0] - '0') * 10 + (coordinate[1] - '0'); // dd
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3b30      	subs	r3, #48	; 0x30
 8001c28:	4413      	add	r3, r2
 8001c2a:	61fb      	str	r3, [r7, #28]
		// 나머지 부분 (분)
		minutes = atof(coordinate + 2); // mm.mmmm
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 f9b9 	bl	8006fa8 <atof>
 8001c36:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c3a:	e025      	b.n	8001c88 <convertToDecimalDegrees+0x8c>
	} else if (type == 'G') { // Longitude
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b47      	cmp	r3, #71	; 0x47
 8001c40:	d11d      	bne.n	8001c7e <convertToDecimalDegrees+0x82>
		// 첫 세 자리 (도)
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3b30      	subs	r3, #48	; 0x30
 8001c48:	2264      	movs	r2, #100	; 0x64
 8001c4a:	fb02 f103 	mul.w	r1, r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3301      	adds	r3, #1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	18ca      	adds	r2, r1, r3
				+ (coordinate[2] - '0'); // ddd
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3302      	adds	r3, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3b30      	subs	r3, #48	; 0x30
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001c6a:	4413      	add	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]
		// 나머지 부분 (분)
		minutes = atof(coordinate + 3); // mm.mmmm
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3303      	adds	r3, #3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 f998 	bl	8006fa8 <atof>
 8001c78:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c7c:	e004      	b.n	8001c88 <convertToDecimalDegrees+0x8c>
	} else {
		printf("Invalid type\n");
 8001c7e:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <convertToDecimalDegrees+0xc8>)
 8001c80:	f006 fee0 	bl	8008a44 <puts>
		return;
 8001c84:	bf00      	nop
 8001c86:	e017      	b.n	8001cb8 <convertToDecimalDegrees+0xbc>
	}

	// 소수점 부분 계산
	decimalDegrees = degrees + (minutes / 60.0);
 8001c88:	69f8      	ldr	r0, [r7, #28]
 8001c8a:	f7fe fbc5 	bl	8000418 <__aeabi_i2d>
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <convertToDecimalDegrees+0xcc>)
 8001c98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c9c:	f7fe fd50 	bl	8000740 <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe fa6a 	bl	8000180 <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decimalDegrees;
 8001cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	0800b3c8 	.word	0x0800b3c8
 8001cc8:	404e0000 	.word	0x404e0000

08001ccc <parseGPSData>:

void parseGPSData(uint8_t *buffer, uint16_t size) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
	char *nmeaGGA = NULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
	double la, lo;
	//xprintf("%s", (char*)buffer);
	// DMA 버퍼?��?�� $GPGGA 문자?��?�� �??��
	nmeaGGA = strstr((char*) buffer, "GLL");
 8001cdc:	4938      	ldr	r1, [pc, #224]	; (8001dc0 <parseGPSData+0xf4>)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f007 f8c8 	bl	8008e74 <strstr>
 8001ce4:	60f8      	str	r0, [r7, #12]
	if (nmeaGGA != NULL) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d064      	beq.n	8001db6 <parseGPSData+0xea>
		char *token;

		// NMEA 메시�? ?��?��?��
		token = strtok(nmeaGGA, ",");
 8001cec:	4935      	ldr	r1, [pc, #212]	; (8001dc4 <parseGPSData+0xf8>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f007 f864 	bl	8008dbc <strtok>
 8001cf4:	60b8      	str	r0, [r7, #8]

//        // UTC ?���? (무시)
//        token = strtok(NULL, ",");

		// ?��?��
		token = strtok(NULL, ",");
 8001cf6:	4933      	ldr	r1, [pc, #204]	; (8001dc4 <parseGPSData+0xf8>)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f007 f85f 	bl	8008dbc <strtok>
 8001cfe:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <parseGPSData+0x56>
			strncpy(latitude, token, sizeof(latitude) - 1);
 8001d06:	220f      	movs	r2, #15
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	482f      	ldr	r0, [pc, #188]	; (8001dc8 <parseGPSData+0xfc>)
 8001d0c:	f007 f842 	bl	8008d94 <strncpy>
			latitude[sizeof(latitude) - 1] = '\0';
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <parseGPSData+0xfc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	73da      	strb	r2, [r3, #15]
			la = convertToDecimalDegrees(latitude, 'L');
 8001d16:	214c      	movs	r1, #76	; 0x4c
 8001d18:	482b      	ldr	r0, [pc, #172]	; (8001dc8 <parseGPSData+0xfc>)
 8001d1a:	f7ff ff6f 	bl	8001bfc <convertToDecimalDegrees>
 8001d1e:	e9c7 0106 	strd	r0, r1, [r7, #24]
		}

		// N/S ?��?��
		token = strtok(NULL, ",");
 8001d22:	4928      	ldr	r1, [pc, #160]	; (8001dc4 <parseGPSData+0xf8>)
 8001d24:	2000      	movs	r0, #0
 8001d26:	f007 f849 	bl	8008dbc <strtok>
 8001d2a:	60b8      	str	r0, [r7, #8]

		// 경도
		token = strtok(NULL, ",");
 8001d2c:	4925      	ldr	r1, [pc, #148]	; (8001dc4 <parseGPSData+0xf8>)
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f007 f844 	bl	8008dbc <strtok>
 8001d34:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <parseGPSData+0x8c>
			strncpy(longitude, token, sizeof(longitude) - 1);
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <parseGPSData+0x100>)
 8001d42:	f007 f827 	bl	8008d94 <strncpy>
			longitude[sizeof(longitude) - 1] = '\0';
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <parseGPSData+0x100>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	73da      	strb	r2, [r3, #15]
			lo = convertToDecimalDegrees(longitude, 'G');
 8001d4c:	2147      	movs	r1, #71	; 0x47
 8001d4e:	481f      	ldr	r0, [pc, #124]	; (8001dcc <parseGPSData+0x100>)
 8001d50:	f7ff ff54 	bl	8001bfc <convertToDecimalDegrees>
 8001d54:	e9c7 0104 	strd	r0, r1, [r7, #16]
		}

		// E/W ?��?��
		token = strtok(NULL, ",");
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <parseGPSData+0xf8>)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f007 f82e 	bl	8008dbc <strtok>
 8001d60:	60b8      	str	r0, [r7, #8]

		// ?��?��?�� 결과�? ?��버그 출력
		printf("\r\nLatitude: %.6f, Longitude: %.6f\r\n", la, lo);
 8001d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d66:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <parseGPSData+0x104>)
 8001d70:	f006 fe02 	bl	8008978 <iprintf>
		if(la >= 200 || lo >= 200){
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <parseGPSData+0x108>)
 8001d7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d7e:	f7fe fe3b 	bl	80009f8 <__aeabi_dcmpge>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <parseGPSData+0xd0>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <parseGPSData+0x108>)
 8001d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d92:	f7fe fe31 	bl	80009f8 <__aeabi_dcmpge>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <parseGPSData+0xd8>
			GPSLEDFlag = 0;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <parseGPSData+0x10c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e002      	b.n	8001daa <parseGPSData+0xde>
		}
		else{
			GPSLEDFlag = 1;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <parseGPSData+0x10c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
		}
		CheckGPS(la, lo);
 8001daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db2:	f000 f815 	bl	8001de0 <CheckGPS>
	}
}
 8001db6:	bf00      	nop
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800b3d8 	.word	0x0800b3d8
 8001dc4:	0800b3c0 	.word	0x0800b3c0
 8001dc8:	20002408 	.word	0x20002408
 8001dcc:	20002418 	.word	0x20002418
 8001dd0:	0800b3dc 	.word	0x0800b3dc
 8001dd4:	40690000 	.word	0x40690000
 8001dd8:	2000217c 	.word	0x2000217c
 8001ddc:	00000000 	.word	0x00000000

08001de0 <CheckGPS>:

int checkGPSCnt = 0;

void CheckGPS(double nowLati, double nowLongi) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001dea:	e9c7 2300 	strd	r2, r3, [r7]
	double busStopLati = atof(data[nowIdx].lati);
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <CheckGPS+0x148>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	011a      	lsls	r2, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3310      	adds	r3, #16
 8001dfe:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <CheckGPS+0x14c>)
 8001e00:	4413      	add	r3, r2
 8001e02:	3302      	adds	r3, #2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 f8cf 	bl	8006fa8 <atof>
 8001e0a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double busStopLongi = atof(data[nowIdx].longi);
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <CheckGPS+0x148>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	011a      	lsls	r2, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3320      	adds	r3, #32
 8001e1e:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <CheckGPS+0x14c>)
 8001e20:	4413      	add	r3, r2
 8001e22:	3302      	adds	r3, #2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 f8bf 	bl	8006fa8 <atof>
 8001e2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	//printf("La : %f, La1 : %f\r\n", busStopLati - 0.00009, busStopLati + 0.00009);
	//printf("NowLa : %f, NowLo : %f\r\n", nowLati, nowLongi);
	//printf("First : %d\r\n", nowLati >= (busStopLati - 0.00009)
	//		&& nowLati <= (busStopLati + 0.00009));
	if (nowLati >= (busStopLati - (0.000009 * GPSRange))
 8001e2e:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <CheckGPS+0x150>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe faf0 	bl	8000418 <__aeabi_i2d>
 8001e38:	a337      	add	r3, pc, #220	; (adr r3, 8001f18 <CheckGPS+0x138>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fb55 	bl	80004ec <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4a:	f7fe f997 	bl	800017c <__aeabi_dsub>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e56:	f7fe fdcf 	bl	80009f8 <__aeabi_dcmpge>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d100      	bne.n	8001e62 <CheckGPS+0x82>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
			checkGPSCnt++;
			//printf("Check!!!!!!!!\r\b");
		}
	}
}
 8001e60:	e056      	b.n	8001f10 <CheckGPS+0x130>
			&& nowLati <= (busStopLati + (0.000009 * GPSRange))) {
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <CheckGPS+0x150>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fad6 	bl	8000418 <__aeabi_i2d>
 8001e6c:	a32a      	add	r3, pc, #168	; (adr r3, 8001f18 <CheckGPS+0x138>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fb3b 	bl	80004ec <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e82:	f7fe f97d 	bl	8000180 <__adddf3>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e8e:	f7fe fda9 	bl	80009e4 <__aeabi_dcmple>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d100      	bne.n	8001e9a <CheckGPS+0xba>
}
 8001e98:	e03a      	b.n	8001f10 <CheckGPS+0x130>
		if (nowLongi >= (busStopLongi - (0.000011 * GPSRange))
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <CheckGPS+0x150>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe faba 	bl	8000418 <__aeabi_i2d>
 8001ea4:	a31e      	add	r3, pc, #120	; (adr r3, 8001f20 <CheckGPS+0x140>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fb1f 	bl	80004ec <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eb6:	f7fe f961 	bl	800017c <__aeabi_dsub>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec2:	f7fe fd99 	bl	80009f8 <__aeabi_dcmpge>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d100      	bne.n	8001ece <CheckGPS+0xee>
}
 8001ecc:	e020      	b.n	8001f10 <CheckGPS+0x130>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <CheckGPS+0x150>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe faa0 	bl	8000418 <__aeabi_i2d>
 8001ed8:	a311      	add	r3, pc, #68	; (adr r3, 8001f20 <CheckGPS+0x140>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fb05 	bl	80004ec <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eee:	f7fe f947 	bl	8000180 <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001efa:	f7fe fd73 	bl	80009e4 <__aeabi_dcmple>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <CheckGPS+0x126>
}
 8001f04:	e004      	b.n	8001f10 <CheckGPS+0x130>
			checkGPSCnt++;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <CheckGPS+0x154>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <CheckGPS+0x154>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	94ccab3f 	.word	0x94ccab3f
 8001f1c:	3ee2dfd6 	.word	0x3ee2dfd6
 8001f20:	7cfa26a2 	.word	0x7cfa26a2
 8001f24:	3ee71194 	.word	0x3ee71194
 8001f28:	20002178 	.word	0x20002178
 8001f2c:	20000394 	.word	0x20000394
 8001f30:	20002400 	.word	0x20002400
 8001f34:	20002428 	.word	0x20002428

08001f38 <SetMode>:
uint8_t LoRaRxBuffer[LoRa_RX_BUFFER_SIZE]; // 수신 데이터를 저장할 버퍼
volatile uint8_t LoRaRxEnd = 0; // 데이터 수신 완료 플래그
uint8_t LoRaRxData[11]; // 수신 데이터를 저장할 버퍼
uint8_t LoRaLen = 0;

void SetMode(uint8_t mode) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d837      	bhi.n	8001fb8 <SetMode+0x80>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <SetMode+0x18>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f77 	.word	0x08001f77
 8001f58:	08001f8d 	.word	0x08001f8d
 8001f5c:	08001fa3 	.word	0x08001fa3
	case 0:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2101      	movs	r1, #1
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <SetMode+0x88>)
 8001f66:	f002 fd6a 	bl	8004a3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <SetMode+0x88>)
 8001f70:	f002 fd65 	bl	8004a3e <HAL_GPIO_WritePin>
		break;
 8001f74:	e020      	b.n	8001fb8 <SetMode+0x80>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <SetMode+0x88>)
 8001f7c:	f002 fd5f 	bl	8004a3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2102      	movs	r1, #2
 8001f84:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <SetMode+0x88>)
 8001f86:	f002 fd5a 	bl	8004a3e <HAL_GPIO_WritePin>
		break;
 8001f8a:	e015      	b.n	8001fb8 <SetMode+0x80>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <SetMode+0x88>)
 8001f92:	f002 fd54 	bl	8004a3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <SetMode+0x88>)
 8001f9c:	f002 fd4f 	bl	8004a3e <HAL_GPIO_WritePin>
		break;
 8001fa0:	e00a      	b.n	8001fb8 <SetMode+0x80>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <SetMode+0x88>)
 8001fa8:	f002 fd49 	bl	8004a3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <SetMode+0x88>)
 8001fb2:	f002 fd44 	bl	8004a3e <HAL_GPIO_WritePin>
		break;
 8001fb6:	bf00      	nop
	}
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010800 	.word	0x40010800

08001fc4 <LoRa_SendData>:

void LoRa_SendData(uint8_t *data, uint16_t length) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
	// AUX 핀이 HIGH 상태인지 확인하여 모듈이 준비되었는지 확인
	while (HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET)
 8001fd0:	bf00      	nop
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <LoRa_SendData+0x34>)
 8001fd6:	f002 fd1b 	bl	8004a10 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f8      	beq.n	8001fd2 <LoRa_SendData+0xe>
		;

	// 데이터 송신
	HAL_UART_Transmit(&huart2, data, length, HAL_MAX_DELAY);
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <LoRa_SendData+0x38>)
 8001fea:	f003 ff9b 	bl	8005f24 <HAL_UART_Transmit>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	200002c0 	.word	0x200002c0

08002000 <parseLora>:
int help = 0;
int routeNo = 0;
int busNM = 0;
int arsID = 0;

void parseLora(uint8_t* loraData){
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

	if(loraData[0] == '0'){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b30      	cmp	r3, #48	; 0x30
 800200e:	d174      	bne.n	80020fa <parseLora+0xfa>
		char *token;

		token = strtok(loraData, "@");
 8002010:	4960      	ldr	r1, [pc, #384]	; (8002194 <parseLora+0x194>)
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f006 fed2 	bl	8008dbc <strtok>
 8002018:	60b8      	str	r0, [r7, #8]
		arsID = atoi(token);
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f004 ffc7 	bl	8006fae <atoi>
 8002020:	4603      	mov	r3, r0
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <parseLora+0x198>)
 8002024:	6013      	str	r3, [r2, #0]
		printf("\r\narsID : %d!!!!!!\r\n\r\n", arsID);
 8002026:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <parseLora+0x198>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4619      	mov	r1, r3
 800202c:	485b      	ldr	r0, [pc, #364]	; (800219c <parseLora+0x19c>)
 800202e:	f006 fca3 	bl	8008978 <iprintf>

		for(int i = 0;i<150;i++){
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e05c      	b.n	80020f2 <parseLora+0xf2>
			if(atoi(data[i].busRouteno) != routeNo){
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	011a      	lsls	r2, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	4a56      	ldr	r2, [pc, #344]	; (80021a0 <parseLora+0x1a0>)
 8002046:	4413      	add	r3, r2
 8002048:	3305      	adds	r3, #5
 800204a:	4618      	mov	r0, r3
 800204c:	f004 ffaf 	bl	8006fae <atoi>
 8002050:	4602      	mov	r2, r0
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <parseLora+0x1a4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d003      	beq.n	8002062 <parseLora+0x62>
				printf("\r\nNOT ROUTENO\r\n\r\n");
 800205a:	4853      	ldr	r0, [pc, #332]	; (80021a8 <parseLora+0x1a8>)
 800205c:	f006 fcf2 	bl	8008a44 <puts>
				break;
 8002060:	e093      	b.n	800218a <parseLora+0x18a>
			}
			if(atoi(data[i].busNM) != busNM){
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	011a      	lsls	r2, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <parseLora+0x1a0>)
 8002070:	4413      	add	r3, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f004 ff9b 	bl	8006fae <atoi>
 8002078:	4602      	mov	r2, r0
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <parseLora+0x1ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d003      	beq.n	800208a <parseLora+0x8a>
				printf("\r\nNOT busNM\r\n\r\n");
 8002082:	484b      	ldr	r0, [pc, #300]	; (80021b0 <parseLora+0x1b0>)
 8002084:	f006 fcde 	bl	8008a44 <puts>
				break;
 8002088:	e07f      	b.n	800218a <parseLora+0x18a>
			}
			if(atoi(data[i].busStopID) == arsID){
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	011a      	lsls	r2, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	3308      	adds	r3, #8
 8002098:	4a41      	ldr	r2, [pc, #260]	; (80021a0 <parseLora+0x1a0>)
 800209a:	4413      	add	r3, r2
 800209c:	3302      	adds	r3, #2
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 ff85 	bl	8006fae <atoi>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <parseLora+0x198>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11e      	bne.n	80020ec <parseLora+0xec>
				data[i].isPeople = 1;
 80020ae:	493c      	ldr	r1, [pc, #240]	; (80021a0 <parseLora+0x1a0>)
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	011a      	lsls	r2, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	440b      	add	r3, r1
 80020be:	3332      	adds	r3, #50	; 0x32
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
				printf("\r\n%d\r\n\r\n", i);
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	483b      	ldr	r0, [pc, #236]	; (80021b4 <parseLora+0x1b4>)
 80020c8:	f006 fc56 	bl	8008978 <iprintf>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d2:	4839      	ldr	r0, [pc, #228]	; (80021b8 <parseLora+0x1b8>)
 80020d4:	f002 fcb3 	bl	8004a3e <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	f001 ff41 	bl	8003f60 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 80020de:	2200      	movs	r2, #0
 80020e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e4:	4834      	ldr	r0, [pc, #208]	; (80021b8 <parseLora+0x1b8>)
 80020e6:	f002 fcaa 	bl	8004a3e <HAL_GPIO_WritePin>
				break;
 80020ea:	e04e      	b.n	800218a <parseLora+0x18a>
		for(int i = 0;i<150;i++){
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b95      	cmp	r3, #149	; 0x95
 80020f6:	dd9f      	ble.n	8002038 <parseLora+0x38>
		busNM = (loraData[6]-'0') * 1000 + (loraData[7]-'0') * 100 + (loraData[8] - '0') * 10 + (loraData[9] - '0');
		printf("\r\nhelp : %d, routeNo : %d, busNM : %d\r\n\r\n",help, routeNo, busNM);
	}


}
 80020f8:	e047      	b.n	800218a <parseLora+0x18a>
		help = loraData[0] - '0';
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	3b30      	subs	r3, #48	; 0x30
 8002100:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <parseLora+0x1bc>)
 8002102:	6013      	str	r3, [r2, #0]
		routeNo = (loraData[2]-'0') * 100 + (loraData[3]-'0') * 10 + (loraData[4] - '0');
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3302      	adds	r3, #2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	3b30      	subs	r3, #48	; 0x30
 800210c:	2264      	movs	r2, #100	; 0x64
 800210e:	fb02 f103 	mul.w	r1, r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3303      	adds	r3, #3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	18ca      	adds	r2, r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3b30      	subs	r3, #48	; 0x30
 800212e:	4413      	add	r3, r2
 8002130:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <parseLora+0x1a4>)
 8002132:	6013      	str	r3, [r2, #0]
		busNM = (loraData[6]-'0') * 1000 + (loraData[7]-'0') * 100 + (loraData[8] - '0') * 10 + (loraData[9] - '0');
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3306      	adds	r3, #6
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b30      	subs	r3, #48	; 0x30
 800213c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002140:	fb03 f202 	mul.w	r2, r3, r2
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3307      	adds	r3, #7
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3b30      	subs	r3, #48	; 0x30
 800214c:	2164      	movs	r1, #100	; 0x64
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	18d1      	adds	r1, r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3308      	adds	r3, #8
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	18ca      	adds	r2, r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3309      	adds	r3, #9
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	3b30      	subs	r3, #48	; 0x30
 8002170:	4413      	add	r3, r2
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <parseLora+0x1ac>)
 8002174:	6013      	str	r3, [r2, #0]
		printf("\r\nhelp : %d, routeNo : %d, busNM : %d\r\n\r\n",help, routeNo, busNM);
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <parseLora+0x1bc>)
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <parseLora+0x1a4>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <parseLora+0x1ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <parseLora+0x1c0>)
 8002184:	f006 fbf8 	bl	8008978 <iprintf>
}
 8002188:	e7ff      	b.n	800218a <parseLora+0x18a>
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	0800b400 	.word	0x0800b400
 8002198:	20002488 	.word	0x20002488
 800219c:	0800b404 	.word	0x0800b404
 80021a0:	20000394 	.word	0x20000394
 80021a4:	20002480 	.word	0x20002480
 80021a8:	0800b41c 	.word	0x0800b41c
 80021ac:	20002484 	.word	0x20002484
 80021b0:	0800b430 	.word	0x0800b430
 80021b4:	0800b440 	.word	0x0800b440
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	2000247c 	.word	0x2000247c
 80021c0:	0800b44c 	.word	0x0800b44c

080021c4 <_write>:
uint8_t nmeaBuffer[RX3_BUFFER_SIZE];
uint8_t dataReceived = 0;

uint8_t modeFlag = 0;

int _write(int file, unsigned char *p, int len) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_write+0x5c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	230a      	movs	r3, #10
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	4810      	ldr	r0, [pc, #64]	; (8002224 <_write+0x60>)
 80021e2:	f003 fe9f 	bl	8005f24 <HAL_UART_Transmit>
 80021e6:	e016      	b.n	8002216 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <_write+0x5c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	230a      	movs	r3, #10
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <_write+0x64>)
 80021fa:	f003 fe93 	bl	8005f24 <HAL_UART_Transmit>
 80021fe:	e00a      	b.n	8002216 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <_write+0x5c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d106      	bne.n	8002216 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	b29a      	uxth	r2, r3
 800220c:	230a      	movs	r3, #10
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <_write+0x68>)
 8002212:	f003 fe87 	bl	8005f24 <HAL_UART_Transmit>
	}
	return len;
 8002216:	687b      	ldr	r3, [r7, #4]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000248c 	.word	0x2000248c
 8002224:	20000278 	.word	0x20000278
 8002228:	200002c0 	.word	0x200002c0
 800222c:	20000308 	.word	0x20000308

08002230 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002234:	b0a3      	sub	sp, #140	; 0x8c
 8002236:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002238:	f001 fe30 	bl	8003e9c <HAL_Init>
	HAL_Delay(500);
 800223c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002240:	f001 fe8e 	bl	8003f60 <HAL_Delay>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002244:	f000 fc12 	bl	8002a6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002248:	f000 fd1a 	bl	8002c80 <MX_GPIO_Init>
	MX_DMA_Init();
 800224c:	f000 fcfa 	bl	8002c44 <MX_DMA_Init>
	MX_I2C1_Init();
 8002250:	f000 fc4c 	bl	8002aec <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002254:	f000 fc78 	bl	8002b48 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002258:	f000 fca0 	bl	8002b9c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800225c:	f000 fcc8 	bl	8002bf0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8002260:	2201      	movs	r2, #1
 8002262:	49a2      	ldr	r1, [pc, #648]	; (80024ec <main+0x2bc>)
 8002264:	48a2      	ldr	r0, [pc, #648]	; (80024f0 <main+0x2c0>)
 8002266:	f003 fee0 	bl	800602a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
 800226a:	220a      	movs	r2, #10
 800226c:	49a1      	ldr	r1, [pc, #644]	; (80024f4 <main+0x2c4>)
 800226e:	48a2      	ldr	r0, [pc, #648]	; (80024f8 <main+0x2c8>)
 8002270:	f003 fedb 	bl	800602a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rxBuffer, 1);
 8002274:	2201      	movs	r2, #1
 8002276:	49a1      	ldr	r1, [pc, #644]	; (80024fc <main+0x2cc>)
 8002278:	48a1      	ldr	r0, [pc, #644]	; (8002500 <main+0x2d0>)
 800227a:	f003 fed6 	bl	800602a <HAL_UART_Receive_IT>
	setvbuf(stdout, NULL, _IONBF, 0);
 800227e:	4ba1      	ldr	r3, [pc, #644]	; (8002504 <main+0x2d4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6898      	ldr	r0, [r3, #8]
 8002284:	2300      	movs	r3, #0
 8002286:	2202      	movs	r2, #2
 8002288:	2100      	movs	r1, #0
 800228a:	f006 fbe3 	bl	8008a54 <setvbuf>
	//	printf("HELL WORLD\r\n");
	LCD_Init(LCD_ADDR);
 800228e:	204e      	movs	r0, #78	; 0x4e
 8002290:	f7ff f874 	bl	800137c <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 8002294:	4a9c      	ldr	r2, [pc, #624]	; (8002508 <main+0x2d8>)
 8002296:	2100      	movs	r1, #0
 8002298:	204e      	movs	r0, #78	; 0x4e
 800229a:	f7ff f8a6 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 800229e:	4a9b      	ldr	r2, [pc, #620]	; (800250c <main+0x2dc>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	204e      	movs	r0, #78	; 0x4e
 80022a4:	f7ff f8a1 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 80022a8:	4a99      	ldr	r2, [pc, #612]	; (8002510 <main+0x2e0>)
 80022aa:	2102      	movs	r1, #2
 80022ac:	204e      	movs	r0, #78	; 0x4e
 80022ae:	f7ff f89c 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 80022b2:	4a98      	ldr	r2, [pc, #608]	; (8002514 <main+0x2e4>)
 80022b4:	2103      	movs	r1, #3
 80022b6:	204e      	movs	r0, #78	; 0x4e
 80022b8:	f7ff f897 	bl	80013ea <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 80022bc:	4a96      	ldr	r2, [pc, #600]	; (8002518 <main+0x2e8>)
 80022be:	2104      	movs	r1, #4
 80022c0:	204e      	movs	r0, #78	; 0x4e
 80022c2:	f7ff f892 	bl	80013ea <LCD_SET_CGRAM>
//		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
//	}
//	LCD_SendData(LCD_ADDR, 1);

	//flash
	uint32_t GPSRangeFlashAddress = 0x0800C400;  // ???��?�� ?��?��?�� 메모�?? 주소
 80022c6:	4b95      	ldr	r3, [pc, #596]	; (800251c <main+0x2ec>)
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t ModeFlashAddress = 0x0800CB00;  // ???��?�� ?��?��?�� 메모�?? 주소
 80022ca:	4b95      	ldr	r3, [pc, #596]	; (8002520 <main+0x2f0>)
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t DataFlashAddress = 0x0800CC00; // ???��?�� ?��?��?�� 메모�?? 주소
 80022ce:	4b95      	ldr	r3, [pc, #596]	; (8002524 <main+0x2f4>)
 80022d0:	657b      	str	r3, [r7, #84]	; 0x54
	uint16_t InfoModeFlag = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	GPSRange = Flash_Read(GPSRangeFlashAddress);
 80022d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022da:	f7ff fb97 	bl	8001a0c <Flash_Read>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b91      	ldr	r3, [pc, #580]	; (8002528 <main+0x2f8>)
 80022e4:	801a      	strh	r2, [r3, #0]
	printf("Range : %d!!!!!!!!!!!!!!!!\r\n", GPSRange);
 80022e6:	4b90      	ldr	r3, [pc, #576]	; (8002528 <main+0x2f8>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	488f      	ldr	r0, [pc, #572]	; (800252c <main+0x2fc>)
 80022ee:	f006 fb43 	bl	8008978 <iprintf>
//	Flash_Erase_Page(0x0800DC00);
//	Flash_Erase_Page(0x0800E000);
//	Flash_Erase_Page(0x0800E400);

	//printf("ModeFlag:%d", InfoModeFlag);
	if (InfoModeFlag >= 1) {
 80022f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d022      	beq.n	8002340 <main+0x110>
		DataFlashAddress = CallData(DataFlashAddress);
 80022fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80022fc:	f7ff fc32 	bl	8001b64 <CallData>
 8002300:	6578      	str	r0, [r7, #84]	; 0x54
		strncpy(data[0].busStopID, "33333", sizeof(data[0].busStopID) - 1);
 8002302:	2207      	movs	r2, #7
 8002304:	498a      	ldr	r1, [pc, #552]	; (8002530 <main+0x300>)
 8002306:	488b      	ldr	r0, [pc, #556]	; (8002534 <main+0x304>)
 8002308:	f006 fd44 	bl	8008d94 <strncpy>
		strncpy(data[0].lati, "36.391251", sizeof(data[0].lati) - 1);
 800230c:	220f      	movs	r2, #15
 800230e:	498a      	ldr	r1, [pc, #552]	; (8002538 <main+0x308>)
 8002310:	488a      	ldr	r0, [pc, #552]	; (800253c <main+0x30c>)
 8002312:	f006 fd3f 	bl	8008d94 <strncpy>
		strncpy(data[0].longi, "127.363235", sizeof(data[0].longi) - 1);
 8002316:	220f      	movs	r2, #15
 8002318:	4989      	ldr	r1, [pc, #548]	; (8002540 <main+0x310>)
 800231a:	488a      	ldr	r0, [pc, #552]	; (8002544 <main+0x314>)
 800231c:	f006 fd3a 	bl	8008d94 <strncpy>

		strncpy(data[1].busStopID, "44444", sizeof(data[1].busStopID) - 1);
 8002320:	2207      	movs	r2, #7
 8002322:	4989      	ldr	r1, [pc, #548]	; (8002548 <main+0x318>)
 8002324:	4889      	ldr	r0, [pc, #548]	; (800254c <main+0x31c>)
 8002326:	f006 fd35 	bl	8008d94 <strncpy>
		strncpy(data[1].lati, "36.391567112", sizeof(data[1].lati) - 1);
 800232a:	220f      	movs	r2, #15
 800232c:	4988      	ldr	r1, [pc, #544]	; (8002550 <main+0x320>)
 800232e:	4889      	ldr	r0, [pc, #548]	; (8002554 <main+0x324>)
 8002330:	f006 fd30 	bl	8008d94 <strncpy>
		strncpy(data[1].longi, "127.362770", sizeof(data[1].longi) - 1);
 8002334:	220f      	movs	r2, #15
 8002336:	4988      	ldr	r1, [pc, #544]	; (8002558 <main+0x328>)
 8002338:	4888      	ldr	r0, [pc, #544]	; (800255c <main+0x32c>)
 800233a:	f006 fd2b 	bl	8008d94 <strncpy>
 800233e:	e023      	b.n	8002388 <main+0x158>

		//LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
	} else if (InfoModeFlag == 0) {
 8002340:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002344:	2b00      	cmp	r3, #0
 8002346:	d114      	bne.n	8002372 <main+0x142>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8002348:	2101      	movs	r1, #1
 800234a:	204e      	movs	r0, #78	; 0x4e
 800234c:	f7fe fff2 	bl	8001334 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	204e      	movs	r0, #78	; 0x4e
 8002354:	f7fe ffee 	bl	8001334 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "DATADOWNLOAD");
 8002358:	4981      	ldr	r1, [pc, #516]	; (8002560 <main+0x330>)
 800235a:	204e      	movs	r0, #78	; 0x4e
 800235c:	f7ff f82b 	bl	80013b6 <LCD_SendString>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8002360:	21c0      	movs	r1, #192	; 0xc0
 8002362:	204e      	movs	r0, #78	; 0x4e
 8002364:	f7fe ffe6 	bl	8001334 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "MODE");
 8002368:	497e      	ldr	r1, [pc, #504]	; (8002564 <main+0x334>)
 800236a:	204e      	movs	r0, #78	; 0x4e
 800236c:	f7ff f823 	bl	80013b6 <LCD_SendString>
 8002370:	e00a      	b.n	8002388 <main+0x158>
	} else {
		InfoModeFlag = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		Flash_Unlock();
 8002378:	f7ff f988 	bl	800168c <Flash_Unlock>
		Flash_Write(ModeFlashAddress, 0);
 800237c:	2100      	movs	r1, #0
 800237e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002380:	f7ff f9a4 	bl	80016cc <Flash_Write>
		Flash_Lock();
 8002384:	f7ff f994 	bl	80016b0 <Flash_Lock>
	}

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	4977      	ldr	r1, [pc, #476]	; (8002568 <main+0x338>)
 800238c:	485c      	ldr	r0, [pc, #368]	; (8002500 <main+0x2d0>)
 800238e:	f003 fe71 	bl	8006074 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <main+0x33c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b74      	ldr	r3, [pc, #464]	; (800256c <main+0x33c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0204 	bic.w	r2, r2, #4
 80023a0:	601a      	str	r2, [r3, #0]
	int Serialcnt = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	64fb      	str	r3, [r7, #76]	; 0x4c

	//LoRa ================================================================
	SetMode(0);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fdc6 	bl	8001f38 <SetMode>



	//FW===================================================================
	modeFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80023ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b0:	486f      	ldr	r0, [pc, #444]	; (8002570 <main+0x340>)
 80023b2:	f002 fb2d 	bl	8004a10 <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b6e      	ldr	r3, [pc, #440]	; (8002574 <main+0x344>)
 80023bc:	701a      	strb	r2, [r3, #0]

	GPSTick = HAL_GetTick();
 80023be:	f001 fdc5 	bl	8003f4c <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a6c      	ldr	r2, [pc, #432]	; (8002578 <main+0x348>)
 80023c6:	6013      	str	r3, [r2, #0]
	LoRaTick = HAL_GetTick();
 80023c8:	f001 fdc0 	bl	8003f4c <HAL_GetTick>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a6b      	ldr	r2, [pc, #428]	; (800257c <main+0x34c>)
 80023d0:	6013      	str	r3, [r2, #0]
	GPSFIXTick = HAL_GetTick();
 80023d2:	f001 fdbb 	bl	8003f4c <HAL_GetTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a69      	ldr	r2, [pc, #420]	; (8002580 <main+0x350>)
 80023da:	6013      	str	r3, [r2, #0]
	ArriveTick = HAL_GetTick();
 80023dc:	f001 fdb6 	bl	8003f4c <HAL_GetTick>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a68      	ldr	r2, [pc, #416]	; (8002584 <main+0x354>)
 80023e4:	6013      	str	r3, [r2, #0]

	uint8_t IOMode = 0; //0 : In, 1 : Out
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t ArriveFlag = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
//
//
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED

		if (!modeFlag) { //Local Mode
 80023f2:	4b60      	ldr	r3, [pc, #384]	; (8002574 <main+0x344>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8278 	bne.w	80028ec <main+0x6bc>
			if (InfoModeFlag >= 1){
 80023fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <main+0x1d8>
				updateLCD();
 8002404:	f7ff f882 	bl	800150c <updateLCD>
			}
			while (1) {
				if (UART1_Rx_End) {
 8002408:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <main+0x358>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80e0 	beq.w	80025d2 <main+0x3a2>
					//printf("Echo\r\n");
					if (!strcmp(UART1_Rx_Buffer, "Input")) {
 8002412:	495e      	ldr	r1, [pc, #376]	; (800258c <main+0x35c>)
 8002414:	485e      	ldr	r0, [pc, #376]	; (8002590 <main+0x360>)
 8002416:	f7fd fe9b 	bl	8000150 <strcmp>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <main+0x208>
						Flash_Erase_Page(ModeFlashAddress);
 8002420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002422:	f7ff faff 	bl	8001a24 <Flash_Erase_Page>
						Flash_Unlock();
 8002426:	f7ff f931 	bl	800168c <Flash_Unlock>
						Flash_Write(ModeFlashAddress, (uint8_t) 0);
 800242a:	2100      	movs	r1, #0
 800242c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800242e:	f7ff f94d 	bl	80016cc <Flash_Write>
						Flash_Lock();
 8002432:	f7ff f93d 	bl	80016b0 <Flash_Lock>
 8002436:	e056      	b.n	80024e6 <main+0x2b6>
					} else if (!strcmp(UART1_Rx_Buffer, "OutPut")) {
 8002438:	4956      	ldr	r1, [pc, #344]	; (8002594 <main+0x364>)
 800243a:	4855      	ldr	r0, [pc, #340]	; (8002590 <main+0x360>)
 800243c:	f7fd fe88 	bl	8000150 <strcmp>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <main+0x22e>
						Flash_Erase_Page(ModeFlashAddress);
 8002446:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002448:	f7ff faec 	bl	8001a24 <Flash_Erase_Page>
						Flash_Unlock();
 800244c:	f7ff f91e 	bl	800168c <Flash_Unlock>
						Flash_Write(ModeFlashAddress, 1);
 8002450:	2101      	movs	r1, #1
 8002452:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002454:	f7ff f93a 	bl	80016cc <Flash_Write>
						Flash_Lock();
 8002458:	f7ff f92a 	bl	80016b0 <Flash_Lock>
 800245c:	e043      	b.n	80024e6 <main+0x2b6>
					} else if ((!strncmp(UART1_Rx_Buffer, "Data", 4)
 800245e:	2204      	movs	r2, #4
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <main+0x368>)
 8002462:	484b      	ldr	r0, [pc, #300]	; (8002590 <main+0x360>)
 8002464:	f006 fc84 	bl	8008d70 <strncmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <main+0x24e>
							|| !strncmp(UART1_Rx_Buffer, "data", 4))
 800246e:	2204      	movs	r2, #4
 8002470:	494a      	ldr	r1, [pc, #296]	; (800259c <main+0x36c>)
 8002472:	4847      	ldr	r0, [pc, #284]	; (8002590 <main+0x360>)
 8002474:	f006 fc7c 	bl	8008d70 <strncmp>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <main+0x268>
							&& InfoModeFlag == 0) {
 800247e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <main+0x268>
						DataFlashAddress = Flash_Write_Data(DataFlashAddress,
 8002486:	4942      	ldr	r1, [pc, #264]	; (8002590 <main+0x360>)
 8002488:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800248a:	f7ff f981 	bl	8001790 <Flash_Write_Data>
 800248e:	6578      	str	r0, [r7, #84]	; 0x54
								UART1_Rx_Buffer);
						//printf("Data\r\n");
						printf("N\r\n");
 8002490:	4843      	ldr	r0, [pc, #268]	; (80025a0 <main+0x370>)
 8002492:	f006 fad7 	bl	8008a44 <puts>
 8002496:	e026      	b.n	80024e6 <main+0x2b6>
					} else if (!strncmp(UART1_Rx_Buffer, "range", 5)){
 8002498:	2205      	movs	r2, #5
 800249a:	4942      	ldr	r1, [pc, #264]	; (80025a4 <main+0x374>)
 800249c:	483c      	ldr	r0, [pc, #240]	; (8002590 <main+0x360>)
 800249e:	f006 fc67 	bl	8008d70 <strncmp>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11e      	bne.n	80024e6 <main+0x2b6>
						char *token;

						token = strtok(UART1_Rx_Buffer, ",");
 80024a8:	493f      	ldr	r1, [pc, #252]	; (80025a8 <main+0x378>)
 80024aa:	4839      	ldr	r0, [pc, #228]	; (8002590 <main+0x360>)
 80024ac:	f006 fc86 	bl	8008dbc <strtok>
 80024b0:	6338      	str	r0, [r7, #48]	; 0x30
						token = strtok(NULL, "!");
 80024b2:	493e      	ldr	r1, [pc, #248]	; (80025ac <main+0x37c>)
 80024b4:	2000      	movs	r0, #0
 80024b6:	f006 fc81 	bl	8008dbc <strtok>
 80024ba:	6338      	str	r0, [r7, #48]	; 0x30
						GPSRange = atoi(token);
 80024bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024be:	f004 fd76 	bl	8006fae <atoi>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <main+0x2f8>)
 80024c8:	801a      	strh	r2, [r3, #0]

						Flash_Erase_Page(GPSRangeFlashAddress);
 80024ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024cc:	f7ff faaa 	bl	8001a24 <Flash_Erase_Page>
						Flash_Unlock();
 80024d0:	f7ff f8dc 	bl	800168c <Flash_Unlock>
						Flash_Write(GPSRangeFlashAddress, (uint8_t) GPSRange);
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <main+0x2f8>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024de:	f7ff f8f5 	bl	80016cc <Flash_Write>
						Flash_Lock();
 80024e2:	f7ff f8e5 	bl	80016b0 <Flash_Lock>
					}
					//HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
					for (int i = 0; i < 50; i++) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	e069      	b.n	80025c0 <main+0x390>
 80024ec:	20002490 	.word	0x20002490
 80024f0:	20000278 	.word	0x20000278
 80024f4:	20002470 	.word	0x20002470
 80024f8:	200002c0 	.word	0x200002c0
 80024fc:	200024c8 	.word	0x200024c8
 8002500:	20000308 	.word	0x20000308
 8002504:	20000200 	.word	0x20000200
 8002508:	20000000 	.word	0x20000000
 800250c:	20000008 	.word	0x20000008
 8002510:	20000010 	.word	0x20000010
 8002514:	20000018 	.word	0x20000018
 8002518:	20000020 	.word	0x20000020
 800251c:	0800c400 	.word	0x0800c400
 8002520:	0800cb00 	.word	0x0800cb00
 8002524:	0800cc00 	.word	0x0800cc00
 8002528:	20002400 	.word	0x20002400
 800252c:	0800b478 	.word	0x0800b478
 8002530:	0800b498 	.word	0x0800b498
 8002534:	2000039e 	.word	0x2000039e
 8002538:	0800b4a0 	.word	0x0800b4a0
 800253c:	200003a6 	.word	0x200003a6
 8002540:	0800b4ac 	.word	0x0800b4ac
 8002544:	200003b6 	.word	0x200003b6
 8002548:	0800b4b8 	.word	0x0800b4b8
 800254c:	200003d1 	.word	0x200003d1
 8002550:	0800b4c0 	.word	0x0800b4c0
 8002554:	200003d9 	.word	0x200003d9
 8002558:	0800b4d0 	.word	0x0800b4d0
 800255c:	200003e9 	.word	0x200003e9
 8002560:	0800b4dc 	.word	0x0800b4dc
 8002564:	0800b4ec 	.word	0x0800b4ec
 8002568:	20002184 	.word	0x20002184
 800256c:	20000350 	.word	0x20000350
 8002570:	40010800 	.word	0x40010800
 8002574:	200025c9 	.word	0x200025c9
 8002578:	200025cc 	.word	0x200025cc
 800257c:	200025d0 	.word	0x200025d0
 8002580:	200025d4 	.word	0x200025d4
 8002584:	200025d8 	.word	0x200025d8
 8002588:	200024c7 	.word	0x200024c7
 800258c:	0800b4f4 	.word	0x0800b4f4
 8002590:	20002494 	.word	0x20002494
 8002594:	0800b4fc 	.word	0x0800b4fc
 8002598:	0800b504 	.word	0x0800b504
 800259c:	0800b50c 	.word	0x0800b50c
 80025a0:	0800b514 	.word	0x0800b514
 80025a4:	0800b518 	.word	0x0800b518
 80025a8:	0800b3c0 	.word	0x0800b3c0
 80025ac:	0800b3c4 	.word	0x0800b3c4
						UART1_Rx_Buffer[i] = '\0';
 80025b0:	4aa7      	ldr	r2, [pc, #668]	; (8002850 <main+0x620>)
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	4413      	add	r3, r2
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	3301      	adds	r3, #1
 80025be:	647b      	str	r3, [r7, #68]	; 0x44
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2b31      	cmp	r3, #49	; 0x31
 80025c4:	ddf4      	ble.n	80025b0 <main+0x380>
					}
					UART1_Len = 0;
 80025c6:	4ba3      	ldr	r3, [pc, #652]	; (8002854 <main+0x624>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 80025cc:	4ba2      	ldr	r3, [pc, #648]	; (8002858 <main+0x628>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
				}

				if (InfoModeFlag) { //사용모드일때
 80025d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f43f af16 	beq.w	8002408 <main+0x1d8>
					if (dataReceived) {
 80025dc:	4b9f      	ldr	r3, [pc, #636]	; (800285c <main+0x62c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <main+0x3c4>
						parseGPSData(rxBuffer, RX3_BUFFER_SIZE);
 80025e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e8:	489d      	ldr	r0, [pc, #628]	; (8002860 <main+0x630>)
 80025ea:	f7ff fb6f 	bl	8001ccc <parseGPSData>
						dataReceived = 0;
 80025ee:	4b9b      	ldr	r3, [pc, #620]	; (800285c <main+0x62c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
					}
					if (LoRaRxEnd) {
 80025f4:	4b9b      	ldr	r3, [pc, #620]	; (8002864 <main+0x634>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01a      	beq.n	8002634 <main+0x404>
						printf("LoRa : %s\r\n", LoRaRxData);
 80025fe:	499a      	ldr	r1, [pc, #616]	; (8002868 <main+0x638>)
 8002600:	489a      	ldr	r0, [pc, #616]	; (800286c <main+0x63c>)
 8002602:	f006 f9b9 	bl	8008978 <iprintf>
						parseLora(LoRaRxData);
 8002606:	4898      	ldr	r0, [pc, #608]	; (8002868 <main+0x638>)
 8002608:	f7ff fcfa 	bl	8002000 <parseLora>
						for (int i = 0; i < 11; i++) {
 800260c:	2300      	movs	r3, #0
 800260e:	643b      	str	r3, [r7, #64]	; 0x40
 8002610:	e007      	b.n	8002622 <main+0x3f2>
							LoRaRxData[i] = '\0';
 8002612:	4a95      	ldr	r2, [pc, #596]	; (8002868 <main+0x638>)
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	4413      	add	r3, r2
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < 11; i++) {
 800261c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261e:	3301      	adds	r3, #1
 8002620:	643b      	str	r3, [r7, #64]	; 0x40
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	2b0a      	cmp	r3, #10
 8002626:	ddf4      	ble.n	8002612 <main+0x3e2>
						}
						LoRaLen = 0;
 8002628:	4b91      	ldr	r3, [pc, #580]	; (8002870 <main+0x640>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
						LoRaRxEnd = 0; // 수신 완료 플래그 리셋
 800262e:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <main+0x634>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]

					}
					if (HAL_GetTick() - GPSTick >= 1000) {
 8002634:	f001 fc8a 	bl	8003f4c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	4b8e      	ldr	r3, [pc, #568]	; (8002874 <main+0x644>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002644:	d377      	bcc.n	8002736 <main+0x506>
						GPSTick = HAL_GetTick();
 8002646:	f001 fc81 	bl	8003f4c <HAL_GetTick>
 800264a:	4603      	mov	r3, r0
 800264c:	4a89      	ldr	r2, [pc, #548]	; (8002874 <main+0x644>)
 800264e:	6013      	str	r3, [r2, #0]
						//printf("CNT : %d\r\n", checkGPSCnt);
						if (checkGPSCnt >= 2) {
 8002650:	4b89      	ldr	r3, [pc, #548]	; (8002878 <main+0x648>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	dd48      	ble.n	80026ea <main+0x4ba>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265e:	4887      	ldr	r0, [pc, #540]	; (800287c <main+0x64c>)
 8002660:	f002 f9ed 	bl	8004a3e <HAL_GPIO_WritePin>
							if(IOMode == 0){
 8002664:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002668:	2b00      	cmp	r3, #0
 800266a:	d135      	bne.n	80026d8 <main+0x4a8>
								LCD_Write_Arrive(data[nowIdx]);
 800266c:	4b84      	ldr	r3, [pc, #528]	; (8002880 <main+0x650>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4984      	ldr	r1, [pc, #528]	; (8002884 <main+0x654>)
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	011a      	lsls	r2, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	440b      	add	r3, r1
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4692      	mov	sl, r2
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4691      	mov	r9, r2
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4690      	mov	r8, r2
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4696      	mov	lr, r2
 800268e:	f103 0410 	add.w	r4, r3, #16
 8002692:	466e      	mov	r6, sp
 8002694:	f104 0c20 	add.w	ip, r4, #32
 8002698:	4635      	mov	r5, r6
 800269a:	4623      	mov	r3, r4
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a6:	3410      	adds	r4, #16
 80026a8:	3610      	adds	r6, #16
 80026aa:	4564      	cmp	r4, ip
 80026ac:	d1f4      	bne.n	8002698 <main+0x468>
 80026ae:	4633      	mov	r3, r6
 80026b0:	4622      	mov	r2, r4
 80026b2:	8811      	ldrh	r1, [r2, #0]
 80026b4:	7892      	ldrb	r2, [r2, #2]
 80026b6:	8019      	strh	r1, [r3, #0]
 80026b8:	709a      	strb	r2, [r3, #2]
 80026ba:	4650      	mov	r0, sl
 80026bc:	4649      	mov	r1, r9
 80026be:	4642      	mov	r2, r8
 80026c0:	4673      	mov	r3, lr
 80026c2:	f7fe ff7d 	bl	80015c0 <LCD_Write_Arrive>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026cc:	486b      	ldr	r0, [pc, #428]	; (800287c <main+0x64c>)
 80026ce:	f002 f9b6 	bl	8004a3e <HAL_GPIO_WritePin>
								ArriveFlag = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
							}

							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 80026d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026dc:	4867      	ldr	r0, [pc, #412]	; (800287c <main+0x64c>)
 80026de:	f002 f9c6 	bl	8004a6e <HAL_GPIO_TogglePin>
							IOMode = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80026e8:	e022      	b.n	8002730 <main+0x500>
						}
						else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f0:	4862      	ldr	r0, [pc, #392]	; (800287c <main+0x64c>)
 80026f2:	f002 f9a4 	bl	8004a3e <HAL_GPIO_WritePin>
							if(IOMode == 1){
 80026f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10f      	bne.n	800271e <main+0x4ee>
								nowIdx++;
 80026fe:	4b60      	ldr	r3, [pc, #384]	; (8002880 <main+0x650>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a5e      	ldr	r2, [pc, #376]	; (8002880 <main+0x650>)
 8002706:	6013      	str	r3, [r2, #0]
								updateLCD();
 8002708:	f7fe ff00 	bl	800150c <updateLCD>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 800270c:	2201      	movs	r2, #1
 800270e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002712:	485a      	ldr	r0, [pc, #360]	; (800287c <main+0x64c>)
 8002714:	f002 f993 	bl	8004a3e <HAL_GPIO_WritePin>
								ArriveFlag = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
							}

							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //Stop LED
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002724:	4855      	ldr	r0, [pc, #340]	; (800287c <main+0x64c>)
 8002726:	f002 f98a 	bl	8004a3e <HAL_GPIO_WritePin>
							IOMode = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
						}
						checkGPSCnt = 0;
 8002730:	4b51      	ldr	r3, [pc, #324]	; (8002878 <main+0x648>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
					}

					if (HAL_GetTick() - GPSFIXTick >= 500) {
 8002736:	f001 fc09 	bl	8003f4c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	4b52      	ldr	r3, [pc, #328]	; (8002888 <main+0x658>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002746:	d358      	bcc.n	80027fa <main+0x5ca>
						printf("%s\r\n", DataBuffer);
 8002748:	4950      	ldr	r1, [pc, #320]	; (800288c <main+0x65c>)
 800274a:	4851      	ldr	r0, [pc, #324]	; (8002890 <main+0x660>)
 800274c:	f006 f914 	bl	8008978 <iprintf>
						nmea_parse(&myData, DataBuffer);
 8002750:	494e      	ldr	r1, [pc, #312]	; (800288c <main+0x65c>)
 8002752:	4850      	ldr	r0, [pc, #320]	; (8002894 <main+0x664>)
 8002754:	f001 f844 	bl	80037e0 <nmea_parse>
						if(myData.fix == 0){
 8002758:	4b4e      	ldr	r3, [pc, #312]	; (8002894 <main+0x664>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <main+0x554>
								GPSFIXTick = HAL_GetTick();
 8002760:	f001 fbf4 	bl	8003f4c <HAL_GetTick>
 8002764:	4603      	mov	r3, r0
 8002766:	4a48      	ldr	r2, [pc, #288]	; (8002888 <main+0x658>)
 8002768:	6013      	str	r3, [r2, #0]
								HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 800276a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276e:	4843      	ldr	r0, [pc, #268]	; (800287c <main+0x64c>)
 8002770:	f002 f97d 	bl	8004a6e <HAL_GPIO_TogglePin>
								printf("%d: No fix\r\n", Serialcnt);
 8002774:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002776:	4848      	ldr	r0, [pc, #288]	; (8002898 <main+0x668>)
 8002778:	f006 f8fe 	bl	8008978 <iprintf>
								Serialcnt++;
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277e:	3301      	adds	r3, #1
 8002780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002782:	e03a      	b.n	80027fa <main+0x5ca>
						}
						else{
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); //GPS LED
 8002784:	2201      	movs	r2, #1
 8002786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800278a:	483c      	ldr	r0, [pc, #240]	; (800287c <main+0x64c>)
 800278c:	f002 f957 	bl	8004a3e <HAL_GPIO_WritePin>
								printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <main+0x664>)
 8002792:	e9d3 8900 	ldrd	r8, r9, [r3]
												Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <main+0x664>)
 8002798:	7a1b      	ldrb	r3, [r3, #8]
								printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <main+0x664>)
 800279e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
												Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 80027a2:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <main+0x664>)
 80027a4:	7e1b      	ldrb	r3, [r3, #24]
								printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80027a6:	603b      	str	r3, [r7, #0]
												Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <main+0x664>)
 80027aa:	69db      	ldr	r3, [r3, #28]
								printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe45 	bl	800043c <__aeabi_f2d>
 80027b2:	4682      	mov	sl, r0
 80027b4:	468b      	mov	fp, r1
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <main+0x664>)
 80027b8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
												Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <main+0x664>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
								printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe3c 	bl	800043c <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80027cc:	9608      	str	r6, [sp, #32]
 80027ce:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	9204      	str	r2, [sp, #16]
 80027d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4642      	mov	r2, r8
 80027e0:	464b      	mov	r3, r9
 80027e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027e4:	482d      	ldr	r0, [pc, #180]	; (800289c <main+0x66c>)
 80027e6:	f006 f8c7 	bl	8008978 <iprintf>
								CheckGPS(myData.latitude, myData.longitude);
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <main+0x664>)
 80027ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <main+0x664>)
 80027f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027f6:	f7ff faf3 	bl	8001de0 <CheckGPS>
						}
					}
					if(HAL_GetTick() - ArriveTick >= 100){
 80027fa:	f001 fba7 	bl	8003f4c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <main+0x670>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b63      	cmp	r3, #99	; 0x63
 8002808:	d954      	bls.n	80028b4 <main+0x684>
						ArriveTick = HAL_GetTick();
 800280a:	f001 fb9f 	bl	8003f4c <HAL_GetTick>
 800280e:	4603      	mov	r3, r0
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <main+0x670>)
 8002812:	6013      	str	r3, [r2, #0]
						if(data[nowIdx].isPeople == 1){
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <main+0x650>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	491a      	ldr	r1, [pc, #104]	; (8002884 <main+0x654>)
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	011a      	lsls	r2, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	440b      	add	r3, r1
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d13c      	bne.n	80028a8 <main+0x678>
							if(ArriveFlag == 1){
 800282e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <main+0x612>
								HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800283a:	481a      	ldr	r0, [pc, #104]	; (80028a4 <main+0x674>)
 800283c:	f002 f917 	bl	8004a6e <HAL_GPIO_TogglePin>
 8002840:	e038      	b.n	80028b4 <main+0x684>
							}
							else{
								HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //LAMP1
 8002842:	2201      	movs	r2, #1
 8002844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002848:	4816      	ldr	r0, [pc, #88]	; (80028a4 <main+0x674>)
 800284a:	f002 f8f8 	bl	8004a3e <HAL_GPIO_WritePin>
 800284e:	e031      	b.n	80028b4 <main+0x684>
 8002850:	20002494 	.word	0x20002494
 8002854:	200024c6 	.word	0x200024c6
 8002858:	200024c7 	.word	0x200024c7
 800285c:	200025c8 	.word	0x200025c8
 8002860:	200024c8 	.word	0x200024c8
 8002864:	2000246c 	.word	0x2000246c
 8002868:	20002470 	.word	0x20002470
 800286c:	0800b520 	.word	0x0800b520
 8002870:	2000247b 	.word	0x2000247b
 8002874:	200025cc 	.word	0x200025cc
 8002878:	20002428 	.word	0x20002428
 800287c:	40010c00 	.word	0x40010c00
 8002880:	20002178 	.word	0x20002178
 8002884:	20000394 	.word	0x20000394
 8002888:	200025d4 	.word	0x200025d4
 800288c:	200021c4 	.word	0x200021c4
 8002890:	0800b52c 	.word	0x0800b52c
 8002894:	200023c8 	.word	0x200023c8
 8002898:	0800b534 	.word	0x0800b534
 800289c:	0800b544 	.word	0x0800b544
 80028a0:	200025d8 	.word	0x200025d8
 80028a4:	40010800 	.word	0x40010800
							}
						}
						else{
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); //LAMP1
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ae:	4861      	ldr	r0, [pc, #388]	; (8002a34 <main+0x804>)
 80028b0:	f002 f8c5 	bl	8004a3e <HAL_GPIO_WritePin>
						}
					}

					if(data[nowIdx+1].isPeople == 1){
 80028b4:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <main+0x808>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	4960      	ldr	r1, [pc, #384]	; (8002a3c <main+0x80c>)
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	011a      	lsls	r2, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <main+0x6ae>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1); //LAMP2
 80028d0:	2201      	movs	r2, #1
 80028d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028d6:	4857      	ldr	r0, [pc, #348]	; (8002a34 <main+0x804>)
 80028d8:	f002 f8b1 	bl	8004a3e <HAL_GPIO_WritePin>
 80028dc:	e594      	b.n	8002408 <main+0x1d8>
					}
					else{
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0); //LAMP2
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e4:	4853      	ldr	r0, [pc, #332]	; (8002a34 <main+0x804>)
 80028e6:	f002 f8aa 	bl	8004a3e <HAL_GPIO_WritePin>
				if (UART1_Rx_End) {
 80028ea:	e58d      	b.n	8002408 <main+0x1d8>
				}
			}
		}

		else{ //Remote Mode
			uint8_t data[] = "1,604,1312";
 80028ec:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <main+0x810>)
 80028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f4:	c303      	stmia	r3!, {r0, r1}
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	3302      	adds	r3, #2
 80028fa:	0c12      	lsrs	r2, r2, #16
 80028fc:	701a      	strb	r2, [r3, #0]
			uint8_t data4[] = "000044444@";
 80028fe:	4a51      	ldr	r2, [pc, #324]	; (8002a44 <main+0x814>)
 8002900:	f107 0318 	add.w	r3, r7, #24
 8002904:	ca07      	ldmia	r2, {r0, r1, r2}
 8002906:	c303      	stmia	r3!, {r0, r1}
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	3302      	adds	r3, #2
 800290c:	0c12      	lsrs	r2, r2, #16
 800290e:	701a      	strb	r2, [r3, #0]
			uint8_t data3[] = "000033333@";
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <main+0x818>)
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	ca07      	ldmia	r2, {r0, r1, r2}
 8002918:	c303      	stmia	r3!, {r0, r1}
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	3302      	adds	r3, #2
 800291e:	0c12      	lsrs	r2, r2, #16
 8002920:	701a      	strb	r2, [r3, #0]

			while(1){
				if (UART1_Rx_End) {
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <main+0x81c>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d025      	beq.n	8002976 <main+0x746>
					printf("Re:%s, %d!!!!\r\n", UART1_Rx_Buffer, strlen(UART1_Rx_Buffer));
 800292a:	4849      	ldr	r0, [pc, #292]	; (8002a50 <main+0x820>)
 800292c:	f7fd fc1a 	bl	8000164 <strlen>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4946      	ldr	r1, [pc, #280]	; (8002a50 <main+0x820>)
 8002936:	4847      	ldr	r0, [pc, #284]	; (8002a54 <main+0x824>)
 8002938:	f006 f81e 	bl	8008978 <iprintf>
					for (int i = 0; i < 50; i++) {
 800293c:	2300      	movs	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	e007      	b.n	8002952 <main+0x722>
						UART1_Rx_Buffer[i] = '\0';
 8002942:	4a43      	ldr	r2, [pc, #268]	; (8002a50 <main+0x820>)
 8002944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002946:	4413      	add	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 800294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294e:	3301      	adds	r3, #1
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002954:	2b31      	cmp	r3, #49	; 0x31
 8002956:	ddf4      	ble.n	8002942 <main+0x712>
					}
					LoRa_SendData(UART1_Rx_Buffer, strlen((char*)UART1_Rx_Buffer));
 8002958:	483d      	ldr	r0, [pc, #244]	; (8002a50 <main+0x820>)
 800295a:	f7fd fc03 	bl	8000164 <strlen>
 800295e:	4603      	mov	r3, r0
 8002960:	b29b      	uxth	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	483a      	ldr	r0, [pc, #232]	; (8002a50 <main+0x820>)
 8002966:	f7ff fb2d 	bl	8001fc4 <LoRa_SendData>
					UART1_Len = 0;
 800296a:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <main+0x828>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8002970:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <main+0x81c>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GetTick() - LoRaTick >= 2000) {
 8002976:	f001 fae9 	bl	8003f4c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <main+0x82c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002986:	d3cc      	bcc.n	8002922 <main+0x6f2>
					LoRaTick = HAL_GetTick();
 8002988:	f001 fae0 	bl	8003f4c <HAL_GetTick>
 800298c:	4603      	mov	r3, r0
 800298e:	4a33      	ldr	r2, [pc, #204]	; (8002a5c <main+0x82c>)
 8002990:	6013      	str	r3, [r2, #0]
					if(asd < 2){
 8002992:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <main+0x830>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	dc23      	bgt.n	80029e2 <main+0x7b2>
						if(asd%2 == 0){
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <main+0x830>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <main+0x790>
							LoRa_SendData(data, sizeof(data)-1);
 80029a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029aa:	210a      	movs	r1, #10
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fb09 	bl	8001fc4 <LoRa_SendData>
							printf("%s\r\n", data);
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	4619      	mov	r1, r3
 80029b8:	482a      	ldr	r0, [pc, #168]	; (8002a64 <main+0x834>)
 80029ba:	f005 ffdd 	bl	8008978 <iprintf>
 80029be:	e00b      	b.n	80029d8 <main+0x7a8>
						}
						else{
							LoRa_SendData(data3, sizeof(data3)-1);
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	210a      	movs	r1, #10
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fafc 	bl	8001fc4 <LoRa_SendData>
							printf("%s\r\n", data3);
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	4824      	ldr	r0, [pc, #144]	; (8002a64 <main+0x834>)
 80029d4:	f005 ffd0 	bl	8008978 <iprintf>
						}
						asd++;
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <main+0x830>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	4a20      	ldr	r2, [pc, #128]	; (8002a60 <main+0x830>)
 80029e0:	6013      	str	r3, [r2, #0]
					}
					if(asd2 < 2){
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <main+0x838>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	dc9b      	bgt.n	8002922 <main+0x6f2>
						if(asd2%2 == 0){
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <main+0x838>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <main+0x7e0>
							LoRa_SendData(data, sizeof(data)-1);
 80029f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fa:	210a      	movs	r1, #10
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fae1 	bl	8001fc4 <LoRa_SendData>
							printf("%s\r\n", data);
 8002a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a06:	4619      	mov	r1, r3
 8002a08:	4816      	ldr	r0, [pc, #88]	; (8002a64 <main+0x834>)
 8002a0a:	f005 ffb5 	bl	8008978 <iprintf>
 8002a0e:	e00b      	b.n	8002a28 <main+0x7f8>
						}
						else{
							LoRa_SendData(data4, sizeof(data4)-1);
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	210a      	movs	r1, #10
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fad4 	bl	8001fc4 <LoRa_SendData>
							printf("%s\r\n", data4);
 8002a1c:	f107 0318 	add.w	r3, r7, #24
 8002a20:	4619      	mov	r1, r3
 8002a22:	4810      	ldr	r0, [pc, #64]	; (8002a64 <main+0x834>)
 8002a24:	f005 ffa8 	bl	8008978 <iprintf>
						}
						asd2++;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <main+0x838>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <main+0x838>)
 8002a30:	6013      	str	r3, [r2, #0]
				if (UART1_Rx_End) {
 8002a32:	e776      	b.n	8002922 <main+0x6f2>
 8002a34:	40010800 	.word	0x40010800
 8002a38:	20002178 	.word	0x20002178
 8002a3c:	20000394 	.word	0x20000394
 8002a40:	0800b598 	.word	0x0800b598
 8002a44:	0800b5a4 	.word	0x0800b5a4
 8002a48:	0800b5b0 	.word	0x0800b5b0
 8002a4c:	200024c7 	.word	0x200024c7
 8002a50:	20002494 	.word	0x20002494
 8002a54:	0800b588 	.word	0x0800b588
 8002a58:	200024c6 	.word	0x200024c6
 8002a5c:	200025d0 	.word	0x200025d0
 8002a60:	20000028 	.word	0x20000028
 8002a64:	0800b52c 	.word	0x0800b52c
 8002a68:	2000002c 	.word	0x2000002c

08002a6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b090      	sub	sp, #64	; 0x40
 8002a70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a72:	f107 0318 	add.w	r3, r7, #24
 8002a76:	2228      	movs	r2, #40	; 0x28
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 f970 	bl	8008d60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a92:	2301      	movs	r3, #1
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a96:	2310      	movs	r3, #16
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002aa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002aa8:	f107 0318 	add.w	r3, r7, #24
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fdd9 	bl	8005664 <HAL_RCC_OscConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <SystemClock_Config+0x50>
		Error_Handler();
 8002ab8:	f000 fa70 	bl	8002f9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002abc:	230f      	movs	r3, #15
 8002abe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 f847 	bl	8005b68 <HAL_RCC_ClockConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <SystemClock_Config+0x78>
		Error_Handler();
 8002ae0:	f000 fa5c 	bl	8002f9c <Error_Handler>
	}
}
 8002ae4:	bf00      	nop
 8002ae6:	3740      	adds	r7, #64	; 0x40
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <MX_I2C1_Init+0x54>)
 8002af4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <MX_I2C1_Init+0x58>)
 8002afa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b0e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b2a:	f001 ffd1 	bl	8004ad0 <HAL_I2C_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002b34:	f000 fa32 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000224 	.word	0x20000224
 8002b40:	40005400 	.word	0x40005400
 8002b44:	000186a0 	.word	0x000186a0

08002b48 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <MX_USART1_UART_Init+0x50>)
 8002b50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_USART1_UART_Init+0x4c>)
 8002b80:	f003 f980 	bl	8005e84 <HAL_UART_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002b8a:	f000 fa07 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000278 	.word	0x20000278
 8002b98:	40013800 	.word	0x40013800

08002b9c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002ba2:	4a12      	ldr	r2, [pc, #72]	; (8002bec <MX_USART2_UART_Init+0x50>)
 8002ba4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_USART2_UART_Init+0x4c>)
 8002bd4:	f003 f956 	bl	8005e84 <HAL_UART_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002bde:	f000 f9dd 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200002c0 	.word	0x200002c0
 8002bec:	40004400 	.word	0x40004400

08002bf0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <MX_USART3_UART_Init+0x50>)
 8002bf8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c00:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c16:	220c      	movs	r2, #12
 8002c18:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_USART3_UART_Init+0x4c>)
 8002c28:	f003 f92c 	bl	8005e84 <HAL_UART_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8002c32:	f000 f9b3 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000308 	.word	0x20000308
 8002c40:	40004800 	.word	0x40004800

08002c44 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <MX_DMA_Init+0x38>)
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <MX_DMA_Init+0x38>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6153      	str	r3, [r2, #20]
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <MX_DMA_Init+0x38>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	200d      	movs	r0, #13
 8002c68:	f001 fa75 	bl	8004156 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c6c:	200d      	movs	r0, #13
 8002c6e:	f001 fa8e 	bl	800418e <HAL_NVIC_EnableIRQ>

}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000

08002c80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <MX_GPIO_Init+0x134>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <MX_GPIO_Init+0x134>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <MX_GPIO_Init+0x134>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cac:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <MX_GPIO_Init+0x134>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a40      	ldr	r2, [pc, #256]	; (8002db4 <MX_GPIO_Init+0x134>)
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <MX_GPIO_Init+0x134>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin,
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f641 0103 	movw	r1, #6147	; 0x1803
 8002cca:	483b      	ldr	r0, [pc, #236]	; (8002db8 <MX_GPIO_Init+0x138>)
 8002ccc:	f001 feb7 	bl	8004a3e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8002cd6:	4839      	ldr	r0, [pc, #228]	; (8002dbc <MX_GPIO_Init+0x13c>)
 8002cd8:	f001 feb1 	bl	8004a3e <HAL_GPIO_WritePin>
	STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
	GPIO_InitStruct.Pin = LORA_M0_Pin | LORA_M1_Pin | LAMP2_Pin | LAMP1_Pin;
 8002cdc:	f641 0303 	movw	r3, #6147	; 0x1803
 8002ce0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2302      	movs	r3, #2
 8002cec:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4830      	ldr	r0, [pc, #192]	; (8002db8 <MX_GPIO_Init+0x138>)
 8002cf6:	f001 fd07 	bl	8004708 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_AUX_Pin */
	GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	482a      	ldr	r0, [pc, #168]	; (8002db8 <MX_GPIO_Init+0x138>)
 8002d0e:	f001 fcfb 	bl	8004708 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8002d12:	23e0      	movs	r3, #224	; 0xe0
 8002d14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <MX_GPIO_Init+0x140>)
 8002d18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	4619      	mov	r1, r3
 8002d24:	4824      	ldr	r0, [pc, #144]	; (8002db8 <MX_GPIO_Init+0x138>)
 8002d26:	f001 fcef 	bl	8004708 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN4_Pin BTN5_Pin */
	GPIO_InitStruct.Pin = BTN4_Pin | BTN5_Pin;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <MX_GPIO_Init+0x140>)
 8002d30:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	481f      	ldr	r0, [pc, #124]	; (8002dbc <MX_GPIO_Init+0x13c>)
 8002d3e:	f001 fce3 	bl	8004708 <HAL_GPIO_Init>

	/*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
	GPIO_InitStruct.Pin = STOP_LED_Pin | GPS_LED_Pin | BUZZER_Pin | DBG_LED_Pin;
 8002d42:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8002d46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2302      	movs	r3, #2
 8002d52:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4818      	ldr	r0, [pc, #96]	; (8002dbc <MX_GPIO_Init+0x13c>)
 8002d5c:	f001 fcd4 	bl	8004708 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_SLCT_Pin */
	GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8002d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	4619      	mov	r1, r3
 8002d74:	4810      	ldr	r0, [pc, #64]	; (8002db8 <MX_GPIO_Init+0x138>)
 8002d76:	f001 fcc7 	bl	8004708 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2006      	movs	r0, #6
 8002d80:	f001 f9e9 	bl	8004156 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d84:	2006      	movs	r0, #6
 8002d86:	f001 fa02 	bl	800418e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2007      	movs	r0, #7
 8002d90:	f001 f9e1 	bl	8004156 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d94:	2007      	movs	r0, #7
 8002d96:	f001 f9fa 	bl	800418e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2017      	movs	r0, #23
 8002da0:	f001 f9d9 	bl	8004156 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002da4:	2017      	movs	r0, #23
 8002da6:	f001 f9f2 	bl	800418e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010800 	.word	0x40010800
 8002dbc:	40010c00 	.word	0x40010c00
 8002dc0:	10110000 	.word	0x10110000

08002dc4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d106      	bne.n	8002de2 <HAL_GPIO_EXTI_Callback+0x1e>
		printf("0x020,10x03\r\n");
 8002dd4:	4814      	ldr	r0, [pc, #80]	; (8002e28 <HAL_GPIO_EXTI_Callback+0x64>)
 8002dd6:	f005 fe35 	bl	8008a44 <puts>
		asd=0;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_GPIO_EXTI_Callback+0x68>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_0) {
		printf("0x023,10x03\r\n");
	} else if (GPIO_Pin == GPIO_PIN_1) {
		printf("0x024,10x03\r\n ");
	}
}
 8002de0:	e01d      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x5a>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d106      	bne.n	8002df6 <HAL_GPIO_EXTI_Callback+0x32>
		printf("0x021,10x03\r\n");
 8002de8:	4811      	ldr	r0, [pc, #68]	; (8002e30 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002dea:	f005 fe2b 	bl	8008a44 <puts>
		asd2=0;
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_GPIO_EXTI_Callback+0x70>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	e013      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x5a>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d103      	bne.n	8002e04 <HAL_GPIO_EXTI_Callback+0x40>
		printf("0x022,10x03\r\n");
 8002dfc:	480e      	ldr	r0, [pc, #56]	; (8002e38 <HAL_GPIO_EXTI_Callback+0x74>)
 8002dfe:	f005 fe21 	bl	8008a44 <puts>
}
 8002e02:	e00c      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x5a>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d103      	bne.n	8002e12 <HAL_GPIO_EXTI_Callback+0x4e>
		printf("0x023,10x03\r\n");
 8002e0a:	480c      	ldr	r0, [pc, #48]	; (8002e3c <HAL_GPIO_EXTI_Callback+0x78>)
 8002e0c:	f005 fe1a 	bl	8008a44 <puts>
}
 8002e10:	e005      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x5a>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d102      	bne.n	8002e1e <HAL_GPIO_EXTI_Callback+0x5a>
		printf("0x024,10x03\r\n ");
 8002e18:	4809      	ldr	r0, [pc, #36]	; (8002e40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002e1a:	f005 fdad 	bl	8008978 <iprintf>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	0800b5bc 	.word	0x0800b5bc
 8002e2c:	20000028 	.word	0x20000028
 8002e30:	0800b5cc 	.word	0x0800b5cc
 8002e34:	2000002c 	.word	0x2000002c
 8002e38:	0800b5dc 	.word	0x0800b5dc
 8002e3c:	0800b5ec 	.word	0x0800b5ec
 8002e40:	0800b5fc 	.word	0x0800b5fc

08002e44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	static uint16_t index = 0;
	static uint8_t LoRaChk = 0;
	static uint16_t LoRaIdx = 0;
	if (huart->Instance == USART1) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a42      	ldr	r2, [pc, #264]	; (8002f5c <HAL_UART_RxCpltCallback+0x118>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d138      	bne.n	8002ec8 <HAL_UART_RxCpltCallback+0x84>
		UART1_Rx_End = 0;
 8002e56:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <HAL_UART_RxCpltCallback+0x11c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
		switch (UART1_Chk) {
 8002e5c:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_UART_RxCpltCallback+0x120>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_UART_RxCpltCallback+0x26>
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d00c      	beq.n	8002e82 <HAL_UART_RxCpltCallback+0x3e>
 8002e68:	e024      	b.n	8002eb4 <HAL_UART_RxCpltCallback+0x70>
		case 0:
			if (UART1_Rx_Data[0] == 0x02) {
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_UART_RxCpltCallback+0x124>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d103      	bne.n	8002e7a <HAL_UART_RxCpltCallback+0x36>
				// Rx_Buffer[USART1_len]=UART1_Rx_Data[0];
				// USART1_len++;
				UART1_Chk = 1;
 8002e72:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <HAL_UART_RxCpltCallback+0x120>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
			} else
				UART1_Chk = 0;
			break;
 8002e78:	e020      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x78>
				UART1_Chk = 0;
 8002e7a:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <HAL_UART_RxCpltCallback+0x120>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
			break;
 8002e80:	e01c      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x78>
		case 1:
			if (UART1_Rx_Data[0] == 0x03) {
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_UART_RxCpltCallback+0x124>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_RxCpltCallback+0x54>
				UART1_Rx_End = 1;
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_UART_RxCpltCallback+0x11c>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
				UART1_Chk = 0;
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_UART_RxCpltCallback+0x120>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
			} else {
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
				UART1_Len++;
			}
			break;
 8002e96:	e011      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x78>
				UART1_Rx_Buffer[UART1_Len] = UART1_Rx_Data[0];
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_UART_RxCpltCallback+0x128>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <HAL_UART_RxCpltCallback+0x124>)
 8002ea0:	7819      	ldrb	r1, [r3, #0]
 8002ea2:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_UART_RxCpltCallback+0x12c>)
 8002ea4:	5499      	strb	r1, [r3, r2]
				UART1_Len++;
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_UART_RxCpltCallback+0x128>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_UART_RxCpltCallback+0x128>)
 8002eb0:	701a      	strb	r2, [r3, #0]
			break;
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x78>
		default:
			UART1_Chk = 0;
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_UART_RxCpltCallback+0x120>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
			break;
 8002eba:	bf00      	nop
		}
		//HAL_UART_Transmit(&huart1, UART1_Rx_Data, 1, 10);
		HAL_UART_Receive_IT(&huart1, UART1_Rx_Data, 1);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	492a      	ldr	r1, [pc, #168]	; (8002f68 <HAL_UART_RxCpltCallback+0x124>)
 8002ec0:	482c      	ldr	r0, [pc, #176]	; (8002f74 <HAL_UART_RxCpltCallback+0x130>)
 8002ec2:	f003 f8b2 	bl	800602a <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
	} else if (huart->Instance == USART3) {
		dataReceived = 1;
	}
}
 8002ec6:	e045      	b.n	8002f54 <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART2) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <HAL_UART_RxCpltCallback+0x134>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d138      	bne.n	8002f44 <HAL_UART_RxCpltCallback+0x100>
		LoRaRxEnd = 1;
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <HAL_UART_RxCpltCallback+0x138>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
		switch (LoRaChk) {
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_UART_RxCpltCallback+0x13c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_UART_RxCpltCallback+0xa2>
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00c      	beq.n	8002efe <HAL_UART_RxCpltCallback+0xba>
 8002ee4:	e024      	b.n	8002f30 <HAL_UART_RxCpltCallback+0xec>
			if (LoRaRxData[0] == 0x02) {
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_UART_RxCpltCallback+0x140>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d103      	bne.n	8002ef6 <HAL_UART_RxCpltCallback+0xb2>
				LoRaChk = 1;
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_UART_RxCpltCallback+0x13c>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
			break;
 8002ef4:	e020      	b.n	8002f38 <HAL_UART_RxCpltCallback+0xf4>
				LoRaChk = 0;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_UART_RxCpltCallback+0x13c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
			break;
 8002efc:	e01c      	b.n	8002f38 <HAL_UART_RxCpltCallback+0xf4>
			if (LoRaRxData[0] == 0x03) {
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_UART_RxCpltCallback+0x140>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d106      	bne.n	8002f14 <HAL_UART_RxCpltCallback+0xd0>
				LoRaRxEnd = 1;
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_UART_RxCpltCallback+0x138>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
				LoRaChk = 0;
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_UART_RxCpltCallback+0x13c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
			break;
 8002f12:	e011      	b.n	8002f38 <HAL_UART_RxCpltCallback+0xf4>
				LoRaRxBuffer[UART1_Len] = LoRaRxData[0];
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_UART_RxCpltCallback+0x128>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_UART_RxCpltCallback+0x140>)
 8002f1c:	7819      	ldrb	r1, [r3, #0]
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_UART_RxCpltCallback+0x144>)
 8002f20:	5499      	strb	r1, [r3, r2]
				LoRaLen++;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_UART_RxCpltCallback+0x148>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_UART_RxCpltCallback+0x148>)
 8002f2c:	701a      	strb	r2, [r3, #0]
			break;
 8002f2e:	e003      	b.n	8002f38 <HAL_UART_RxCpltCallback+0xf4>
			LoRaChk = 0;
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_UART_RxCpltCallback+0x13c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
			break;
 8002f36:	bf00      	nop
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
 8002f38:	220a      	movs	r2, #10
 8002f3a:	4912      	ldr	r1, [pc, #72]	; (8002f84 <HAL_UART_RxCpltCallback+0x140>)
 8002f3c:	4814      	ldr	r0, [pc, #80]	; (8002f90 <HAL_UART_RxCpltCallback+0x14c>)
 8002f3e:	f003 f874 	bl	800602a <HAL_UART_Receive_IT>
}
 8002f42:	e007      	b.n	8002f54 <HAL_UART_RxCpltCallback+0x110>
	} else if (huart->Instance == USART3) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <HAL_UART_RxCpltCallback+0x150>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d102      	bne.n	8002f54 <HAL_UART_RxCpltCallback+0x110>
		dataReceived = 1;
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_UART_RxCpltCallback+0x154>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	200024c7 	.word	0x200024c7
 8002f64:	200025dc 	.word	0x200025dc
 8002f68:	20002490 	.word	0x20002490
 8002f6c:	200024c6 	.word	0x200024c6
 8002f70:	20002494 	.word	0x20002494
 8002f74:	20000278 	.word	0x20000278
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	2000246c 	.word	0x2000246c
 8002f80:	200025dd 	.word	0x200025dd
 8002f84:	20002470 	.word	0x20002470
 8002f88:	2000242c 	.word	0x2000242c
 8002f8c:	2000247b 	.word	0x2000247b
 8002f90:	200002c0 	.word	0x200002c0
 8002f94:	40004800 	.word	0x40004800
 8002f98:	200025c8 	.word	0x200025c8

08002f9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fa4:	e7fe      	b.n	8002fa4 <Error_Handler+0x8>

08002fa6 <gps_checksum>:


char *nmeaData[15];

int gps_checksum(char *nmea_data)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd f8d8 	bl	8000164 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d801      	bhi.n	8002fbe <gps_checksum+0x18>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e038      	b.n	8003030 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd f8d0 	bl	8000164 <strlen>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fd f8c7 	bl	8000164 <strlen>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	3b03      	subs	r3, #3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e00a      	b.n	8003002 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	4053      	eors	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3301      	adds	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd f8ae 	bl	8000164 <strlen>
 8003008:	4603      	mov	r3, r0
 800300a:	1f5a      	subs	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	d8ec      	bhi.n	8002fec <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	2210      	movs	r2, #16
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f004 ff82 	bl	8007f24 <strtol>
 8003020:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	429a      	cmp	r2, r3
 8003028:	d101      	bne.n	800302e <gps_checksum+0x88>
        return 1;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <gps_checksum+0x8a>
    }
    else{
        return 0;
 800302e:	2300      	movs	r3, #0
    }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b0b7      	sub	sp, #220	; 0xdc
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003048:	f107 0320 	add.w	r3, r7, #32
 800304c:	2264      	movs	r2, #100	; 0x64
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f005 fe85 	bl	8008d60 <memset>
    char *marker = strtok(inputString, ",");
 8003056:	49c5      	ldr	r1, [pc, #788]	; (800336c <nmea_GPGGA+0x334>)
 8003058:	6838      	ldr	r0, [r7, #0]
 800305a:	f005 feaf 	bl	8008dbc <strtok>
 800305e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003062:	e027      	b.n	80030b4 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003064:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003068:	f7fd f87c 	bl	8000164 <strlen>
 800306c:	4603      	mov	r3, r0
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003074:	1c63      	adds	r3, r4, #1
 8003076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800307a:	4610      	mov	r0, r2
 800307c:	f003 ff9c 	bl	8006fb8 <malloc>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	00a3      	lsls	r3, r4, #2
 8003086:	33d8      	adds	r3, #216	; 0xd8
 8003088:	443b      	add	r3, r7
 800308a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800308e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003092:	3b01      	subs	r3, #1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	33d8      	adds	r3, #216	; 0xd8
 8003098:	443b      	add	r3, r7
 800309a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800309e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f005 ff83 	bl	8008fae <strcpy>
        marker = strtok(NULL, ",");
 80030a8:	49b0      	ldr	r1, [pc, #704]	; (800336c <nmea_GPGGA+0x334>)
 80030aa:	2000      	movs	r0, #0
 80030ac:	f005 fe86 	bl	8008dbc <strtok>
 80030b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80030b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1d3      	bne.n	8003064 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	332c      	adds	r3, #44	; 0x2c
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 ff6a 	bl	8008fae <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80030da:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80030de:	2b53      	cmp	r3, #83	; 0x53
 80030e0:	d004      	beq.n	80030ec <nmea_GPGGA+0xb4>
 80030e2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80030e6:	2b4e      	cmp	r3, #78	; 0x4e
 80030e8:	f040 815f 	bne.w	80033aa <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030f2:	e010      	b.n	8003116 <nmea_GPGGA+0xde>
 80030f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030fa:	4413      	add	r3, r2
 80030fc:	7819      	ldrb	r1, [r3, #0]
 80030fe:	f107 021c 	add.w	r2, r7, #28
 8003102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003106:	4413      	add	r3, r2
 8003108:	460a      	mov	r2, r1
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003110:	3301      	adds	r3, #1
 8003112:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800311a:	2b01      	cmp	r3, #1
 800311c:	ddea      	ble.n	80030f4 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003124:	e011      	b.n	800314a <nmea_GPGGA+0x112>
 8003126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800312c:	3302      	adds	r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	7819      	ldrb	r1, [r3, #0]
 8003132:	f107 0214 	add.w	r2, r7, #20
 8003136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800313a:	4413      	add	r3, r2
 800313c:	460a      	mov	r2, r1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003144:	3301      	adds	r3, #1
 8003146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800314a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800314e:	2b05      	cmp	r3, #5
 8003150:	dde9      	ble.n	8003126 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003152:	f107 031c 	add.w	r3, r7, #28
 8003156:	220a      	movs	r2, #10
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fee2 	bl	8007f24 <strtol>
 8003160:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fe04 	bl	8007d78 <strtof>
 8003170:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003174:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003178:	f7fd fdba 	bl	8000cf0 <__aeabi_i2f>
 800317c:	4604      	mov	r4, r0
 800317e:	497c      	ldr	r1, [pc, #496]	; (8003370 <nmea_GPGGA+0x338>)
 8003180:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003184:	f7fd febc 	bl	8000f00 <__aeabi_fdiv>
 8003188:	4603      	mov	r3, r0
 800318a:	4619      	mov	r1, r3
 800318c:	4620      	mov	r0, r4
 800318e:	f7fd fcfb 	bl	8000b88 <__addsf3>
 8003192:	4603      	mov	r3, r0
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd f951 	bl	800043c <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031a8:	e010      	b.n	80031cc <nmea_GPGGA+0x194>
 80031aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b0:	4413      	add	r3, r2
 80031b2:	7819      	ldrb	r1, [r3, #0]
 80031b4:	f107 0210 	add.w	r2, r7, #16
 80031b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031bc:	4413      	add	r3, r2
 80031be:	460a      	mov	r2, r1
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c6:	3301      	adds	r3, #1
 80031c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	ddea      	ble.n	80031aa <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031da:	e011      	b.n	8003200 <nmea_GPGGA+0x1c8>
 80031dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031e2:	3303      	adds	r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	7819      	ldrb	r1, [r3, #0]
 80031e8:	f107 0208 	add.w	r2, r7, #8
 80031ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031f0:	4413      	add	r3, r2
 80031f2:	460a      	mov	r2, r1
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031fa:	3301      	adds	r3, #1
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003204:	2b05      	cmp	r3, #5
 8003206:	dde9      	ble.n	80031dc <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	220a      	movs	r2, #10
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f004 fe87 	bl	8007f24 <strtol>
 8003216:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f004 fda9 	bl	8007d78 <strtof>
 8003226:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800322a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800322e:	f7fd fd5f 	bl	8000cf0 <__aeabi_i2f>
 8003232:	4604      	mov	r4, r0
 8003234:	494e      	ldr	r1, [pc, #312]	; (8003370 <nmea_GPGGA+0x338>)
 8003236:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800323a:	f7fd fe61 	bl	8000f00 <__aeabi_fdiv>
 800323e:	4603      	mov	r3, r0
 8003240:	4619      	mov	r1, r3
 8003242:	4620      	mov	r0, r4
 8003244:	f7fd fca0 	bl	8000b88 <__addsf3>
 8003248:	4603      	mov	r3, r0
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f8f6 	bl	800043c <__aeabi_f2d>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003264:	f7fd fbaa 	bl	80009bc <__aeabi_dcmpeq>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d17a      	bne.n	8003364 <nmea_GPGGA+0x32c>
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800327a:	f7fd fb9f 	bl	80009bc <__aeabi_dcmpeq>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d16f      	bne.n	8003364 <nmea_GPGGA+0x32c>
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <nmea_GPGGA+0x33c>)
 800328a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800328e:	f7fd fb9f 	bl	80009d0 <__aeabi_dcmplt>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d065      	beq.n	8003364 <nmea_GPGGA+0x32c>
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <nmea_GPGGA+0x340>)
 800329e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80032a2:	f7fd fb95 	bl	80009d0 <__aeabi_dcmplt>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80032b2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 80032bc:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80032c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80032ce:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80032d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f004 fd4f 	bl	8007d78 <strtof>
 80032da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80032e6:	f7fd feeb 	bl	80010c0 <__aeabi_fcmpeq>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <nmea_GPGGA+0x2be>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	e001      	b.n	80032fa <nmea_GPGGA+0x2c2>
 80032f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80032fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003300:	220a      	movs	r2, #10
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fe0d 	bl	8007f24 <strtol>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	220a      	movs	r2, #10
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f004 fe04 	bl	8007f24 <strtol>
 800331c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003324:	2b00      	cmp	r3, #0
 8003326:	bfcc      	ite	gt
 8003328:	2301      	movgt	r3, #1
 800332a:	2300      	movle	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8003334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fd1d 	bl	8007d78 <strtof>
 800333e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800334a:	f7fd feb9 	bl	80010c0 <__aeabi_fcmpeq>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <nmea_GPGGA+0x322>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	e001      	b.n	800335e <nmea_GPGGA+0x326>
 800335a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003362:	e022      	b.n	80033aa <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800336a:	e016      	b.n	800339a <nmea_GPGGA+0x362>
 800336c:	0800b60c 	.word	0x0800b60c
 8003370:	42700000 	.word	0x42700000
 8003374:	40568000 	.word	0x40568000
 8003378:	40668000 	.word	0x40668000
 800337c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	33d8      	adds	r3, #216	; 0xd8
 8003384:	443b      	add	r3, r7
 8003386:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fe1c 	bl	8006fc8 <free>
 8003390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003394:	3301      	adds	r3, #1
 8003396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800339a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800339e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a2:	429a      	cmp	r2, r3
 80033a4:	dbea      	blt.n	800337c <nmea_GPGGA+0x344>
            return 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e019      	b.n	80033de <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b0:	e00e      	b.n	80033d0 <nmea_GPGGA+0x398>
 80033b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	33d8      	adds	r3, #216	; 0xd8
 80033ba:	443b      	add	r3, r7
 80033bc:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fe01 	bl	8006fc8 <free>
 80033c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033ca:	3301      	adds	r3, #1
 80033cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033d8:	429a      	cmp	r2, r3
 80033da:	dbea      	blt.n	80033b2 <nmea_GPGGA+0x37a>
    return 1;
 80033dc:	2301      	movs	r3, #1
}
 80033de:	4618      	mov	r0, r3
 80033e0:	37dc      	adds	r7, #220	; 0xdc
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	bf00      	nop

080033e8 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b0a3      	sub	sp, #140	; 0x8c
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	2264      	movs	r2, #100	; 0x64
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f005 fcad 	bl	8008d60 <memset>
    char *marker = strtok(inputString, ",");
 8003406:	493b      	ldr	r1, [pc, #236]	; (80034f4 <nmea_GPGSA+0x10c>)
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f005 fcd7 	bl	8008dbc <strtok>
 800340e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003412:	e027      	b.n	8003464 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003414:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003418:	f7fc fea4 	bl	8000164 <strlen>
 800341c:	4603      	mov	r3, r0
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8003424:	1c63      	adds	r3, r4, #1
 8003426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800342a:	4610      	mov	r0, r2
 800342c:	f003 fdc4 	bl	8006fb8 <malloc>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	00a3      	lsls	r3, r4, #2
 8003436:	3388      	adds	r3, #136	; 0x88
 8003438:	443b      	add	r3, r7
 800343a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800343e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003442:	3b01      	subs	r3, #1
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	3388      	adds	r3, #136	; 0x88
 8003448:	443b      	add	r3, r7
 800344a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800344e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003452:	4618      	mov	r0, r3
 8003454:	f005 fdab 	bl	8008fae <strcpy>
        marker = strtok(NULL, ",");
 8003458:	4926      	ldr	r1, [pc, #152]	; (80034f4 <nmea_GPGSA+0x10c>)
 800345a:	2000      	movs	r0, #0
 800345c:	f005 fcae 	bl	8008dbc <strtok>
 8003460:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1d3      	bne.n	8003414 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	220a      	movs	r2, #10
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fd56 	bl	8007f24 <strtol>
 8003478:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800347a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800347c:	2b01      	cmp	r3, #1
 800347e:	bfcc      	ite	gt
 8003480:	2301      	movgt	r3, #1
 8003482:	2300      	movle	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8003490:	2303      	movs	r3, #3
 8003492:	67bb      	str	r3, [r7, #120]	; 0x78
 8003494:	e00e      	b.n	80034b4 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	3388      	adds	r3, #136	; 0x88
 800349c:	443b      	add	r3, r7
 800349e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <nmea_GPGSA+0xc6>
            satelliteCount++;
 80034a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034aa:	3301      	adds	r3, #1
 80034ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80034ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b0:	3301      	adds	r3, #1
 80034b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	2b0e      	cmp	r3, #14
 80034b8:	dded      	ble.n	8003496 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80034c0:	2300      	movs	r3, #0
 80034c2:	677b      	str	r3, [r7, #116]	; 0x74
 80034c4:	e00b      	b.n	80034de <nmea_GPGSA+0xf6>
 80034c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	3388      	adds	r3, #136	; 0x88
 80034cc:	443b      	add	r3, r7
 80034ce:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fd78 	bl	8006fc8 <free>
 80034d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034da:	3301      	adds	r3, #1
 80034dc:	677b      	str	r3, [r7, #116]	; 0x74
 80034de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e4:	429a      	cmp	r2, r3
 80034e6:	dbee      	blt.n	80034c6 <nmea_GPGSA+0xde>
    return 1;
 80034e8:	2301      	movs	r3, #1
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	378c      	adds	r7, #140	; 0x8c
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd90      	pop	{r4, r7, pc}
 80034f2:	bf00      	nop
 80034f4:	0800b60c 	.word	0x0800b60c

080034f8 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b0b7      	sub	sp, #220	; 0xdc
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350c:	2264      	movs	r2, #100	; 0x64
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f005 fc25 	bl	8008d60 <memset>
    char *marker = strtok(inputString, ",");
 8003516:	49b0      	ldr	r1, [pc, #704]	; (80037d8 <nmea_GPGLL+0x2e0>)
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f005 fc4f 	bl	8008dbc <strtok>
 800351e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003522:	e027      	b.n	8003574 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003524:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003528:	f7fc fe1c 	bl	8000164 <strlen>
 800352c:	4603      	mov	r3, r0
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003534:	1c63      	adds	r3, r4, #1
 8003536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800353a:	4610      	mov	r0, r2
 800353c:	f003 fd3c 	bl	8006fb8 <malloc>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	00a3      	lsls	r3, r4, #2
 8003546:	33d8      	adds	r3, #216	; 0xd8
 8003548:	443b      	add	r3, r7
 800354a:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 800354e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003552:	3b01      	subs	r3, #1
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	33d8      	adds	r3, #216	; 0xd8
 8003558:	443b      	add	r3, r7
 800355a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800355e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003562:	4618      	mov	r0, r3
 8003564:	f005 fd23 	bl	8008fae <strcpy>
        marker = strtok(NULL, ",");
 8003568:	499b      	ldr	r1, [pc, #620]	; (80037d8 <nmea_GPGLL+0x2e0>)
 800356a:	2000      	movs	r0, #0
 800356c:	f005 fc26 	bl	8008dbc <strtok>
 8003570:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003574:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1d3      	bne.n	8003524 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8003584:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003588:	2b53      	cmp	r3, #83	; 0x53
 800358a:	d004      	beq.n	8003596 <nmea_GPGLL+0x9e>
 800358c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003590:	2b4e      	cmp	r3, #78	; 0x4e
 8003592:	f040 811c 	bne.w	80037ce <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800359c:	e010      	b.n	80035c0 <nmea_GPGLL+0xc8>
 800359e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035a4:	4413      	add	r3, r2
 80035a6:	7819      	ldrb	r1, [r3, #0]
 80035a8:	f107 0220 	add.w	r2, r7, #32
 80035ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035b0:	4413      	add	r3, r2
 80035b2:	460a      	mov	r2, r1
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035ba:	3301      	adds	r3, #1
 80035bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	ddea      	ble.n	800359e <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ce:	e011      	b.n	80035f4 <nmea_GPGLL+0xfc>
 80035d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035d6:	3302      	adds	r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	7819      	ldrb	r1, [r3, #0]
 80035dc:	f107 0218 	add.w	r2, r7, #24
 80035e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035e4:	4413      	add	r3, r2
 80035e6:	460a      	mov	r2, r1
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035ee:	3301      	adds	r3, #1
 80035f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	dde9      	ble.n	80035d0 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80035fc:	f107 0320 	add.w	r3, r7, #32
 8003600:	220a      	movs	r2, #10
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fc8d 	bl	8007f24 <strtol>
 800360a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800360e:	f107 0318 	add.w	r3, r7, #24
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f004 fbaf 	bl	8007d78 <strtof>
 800361a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800361e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003622:	f7fd fb65 	bl	8000cf0 <__aeabi_i2f>
 8003626:	4604      	mov	r4, r0
 8003628:	496c      	ldr	r1, [pc, #432]	; (80037dc <nmea_GPGLL+0x2e4>)
 800362a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800362e:	f7fd fc67 	bl	8000f00 <__aeabi_fdiv>
 8003632:	4603      	mov	r3, r0
 8003634:	4619      	mov	r1, r3
 8003636:	4620      	mov	r0, r4
 8003638:	f7fd faa6 	bl	8000b88 <__addsf3>
 800363c:	4603      	mov	r3, r0
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc fefc 	bl	800043c <__aeabi_f2d>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800365a:	e010      	b.n	800367e <nmea_GPGLL+0x186>
 800365c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003662:	4413      	add	r3, r2
 8003664:	7819      	ldrb	r1, [r3, #0]
 8003666:	f107 0214 	add.w	r2, r7, #20
 800366a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800366e:	4413      	add	r3, r2
 8003670:	460a      	mov	r2, r1
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003678:	3301      	adds	r3, #1
 800367a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800367e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003682:	2b02      	cmp	r3, #2
 8003684:	ddea      	ble.n	800365c <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800368c:	e011      	b.n	80036b2 <nmea_GPGLL+0x1ba>
 800368e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003694:	3303      	adds	r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	7819      	ldrb	r1, [r3, #0]
 800369a:	f107 020c 	add.w	r2, r7, #12
 800369e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036a2:	4413      	add	r3, r2
 80036a4:	460a      	mov	r2, r1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036ac:	3301      	adds	r3, #1
 80036ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	dde9      	ble.n	800368e <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	220a      	movs	r2, #10
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fc2e 	bl	8007f24 <strtol>
 80036c8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f004 fb50 	bl	8007d78 <strtof>
 80036d8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80036dc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80036e0:	f7fd fb06 	bl	8000cf0 <__aeabi_i2f>
 80036e4:	4604      	mov	r4, r0
 80036e6:	493d      	ldr	r1, [pc, #244]	; (80037dc <nmea_GPGLL+0x2e4>)
 80036e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80036ec:	f7fd fc08 	bl	8000f00 <__aeabi_fdiv>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4619      	mov	r1, r3
 80036f4:	4620      	mov	r0, r4
 80036f6:	f7fd fa47 	bl	8000b88 <__addsf3>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc fe9d 	bl	800043c <__aeabi_f2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 800370a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800370e:	2b00      	cmp	r3, #0
 8003710:	d015      	beq.n	800373e <nmea_GPGLL+0x246>
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800371a:	f7fd fcd1 	bl	80010c0 <__aeabi_fcmpeq>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10c      	bne.n	800373e <nmea_GPGLL+0x246>
 8003724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <nmea_GPGLL+0x246>
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003734:	f7fd fcc4 	bl	80010c0 <__aeabi_fcmpeq>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01a      	beq.n	8003774 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003744:	e00e      	b.n	8003764 <nmea_GPGLL+0x26c>
 8003746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	33d8      	adds	r3, #216	; 0xd8
 800374e:	443b      	add	r3, r7
 8003750:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003754:	4618      	mov	r0, r3
 8003756:	f003 fc37 	bl	8006fc8 <free>
 800375a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800375e:	3301      	adds	r3, #1
 8003760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003764:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800376c:	429a      	cmp	r2, r3
 800376e:	dbea      	blt.n	8003746 <nmea_GPGLL+0x24e>
            return 0;
 8003770:	2300      	movs	r3, #0
 8003772:	e02d      	b.n	80037d0 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800377a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003784:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800378e:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003796:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800379e:	e00e      	b.n	80037be <nmea_GPGLL+0x2c6>
 80037a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	33d8      	adds	r3, #216	; 0xd8
 80037a8:	443b      	add	r3, r7
 80037aa:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 fc0a 	bl	8006fc8 <free>
 80037b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037b8:	3301      	adds	r3, #1
 80037ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c6:	429a      	cmp	r2, r3
 80037c8:	dbea      	blt.n	80037a0 <nmea_GPGLL+0x2a8>
            return 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	37dc      	adds	r7, #220	; 0xdc
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	0800b60c 	.word	0x0800b60c
 80037dc:	42700000 	.word	0x42700000

080037e0 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
    memset(nmeaData, 0, sizeof(nmeaData));
 80037ea:	223c      	movs	r2, #60	; 0x3c
 80037ec:	2100      	movs	r1, #0
 80037ee:	484e      	ldr	r0, [pc, #312]	; (8003928 <nmea_parse+0x148>)
 80037f0:	f005 fab6 	bl	8008d60 <memset>
    char * token = strtok(buffer, "$");
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <nmea_parse+0x14c>)
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f005 fae0 	bl	8008dbc <strtok>
 80037fc:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003802:	e01d      	b.n	8003840 <nmea_parse+0x60>
    	nmeaData[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003804:	6978      	ldr	r0, [r7, #20]
 8003806:	f7fc fcad 	bl	8000164 <strlen>
 800380a:	4603      	mov	r3, r0
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	693c      	ldr	r4, [r7, #16]
 8003810:	1c63      	adds	r3, r4, #1
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	4610      	mov	r0, r2
 8003816:	f003 fbcf 	bl	8006fb8 <malloc>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	4b42      	ldr	r3, [pc, #264]	; (8003928 <nmea_parse+0x148>)
 8003820:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(nmeaData[cnt-1], token);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3b01      	subs	r3, #1
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <nmea_parse+0x148>)
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	4618      	mov	r0, r3
 8003832:	f005 fbbc 	bl	8008fae <strcpy>
        token = strtok(NULL, "$");
 8003836:	493d      	ldr	r1, [pc, #244]	; (800392c <nmea_parse+0x14c>)
 8003838:	2000      	movs	r0, #0
 800383a:	f005 fabf 	bl	8008dbc <strtok>
 800383e:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1de      	bne.n	8003804 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e052      	b.n	80038f2 <nmea_parse+0x112>
       if(strstr(nmeaData[i], "\r\n")!=NULL && gps_checksum(nmeaData[i])){
 800384c:	4a36      	ldr	r2, [pc, #216]	; (8003928 <nmea_parse+0x148>)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	4936      	ldr	r1, [pc, #216]	; (8003930 <nmea_parse+0x150>)
 8003856:	4618      	mov	r0, r3
 8003858:	f005 fb0c 	bl	8008e74 <strstr>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d044      	beq.n	80038ec <nmea_parse+0x10c>
 8003862:	4a31      	ldr	r2, [pc, #196]	; (8003928 <nmea_parse+0x148>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fb9b 	bl	8002fa6 <gps_checksum>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d03a      	beq.n	80038ec <nmea_parse+0x10c>
           if(strstr(nmeaData[i], "GNGLL")!=NULL){
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <nmea_parse+0x148>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	492d      	ldr	r1, [pc, #180]	; (8003934 <nmea_parse+0x154>)
 8003880:	4618      	mov	r0, r3
 8003882:	f005 faf7 	bl	8008e74 <strstr>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, nmeaData[i]);
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <nmea_parse+0x148>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fe2e 	bl	80034f8 <nmea_GPGLL>
 800389c:	e026      	b.n	80038ec <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGSA")!=NULL){
 800389e:	4a22      	ldr	r2, [pc, #136]	; (8003928 <nmea_parse+0x148>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	4924      	ldr	r1, [pc, #144]	; (8003938 <nmea_parse+0x158>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f005 fae3 	bl	8008e74 <strstr>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, nmeaData[i]);
 80038b4:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <nmea_parse+0x148>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fd92 	bl	80033e8 <nmea_GPGSA>
 80038c4:	e012      	b.n	80038ec <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGGA")!=NULL){
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <nmea_parse+0x148>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ce:	491b      	ldr	r1, [pc, #108]	; (800393c <nmea_parse+0x15c>)
 80038d0:	4618      	mov	r0, r3
 80038d2:	f005 facf 	bl	8008e74 <strstr>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, nmeaData[i]);
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <nmea_parse+0x148>)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fba6 	bl	8003038 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dba8      	blt.n	800384c <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(nmeaData[i]);
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	e009      	b.n	8003914 <nmea_parse+0x134>
 8003900:	4a09      	ldr	r2, [pc, #36]	; (8003928 <nmea_parse+0x148>)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	4618      	mov	r0, r3
 800390a:	f003 fb5d 	bl	8006fc8 <free>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3301      	adds	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	dbf1      	blt.n	8003900 <nmea_parse+0x120>


}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd90      	pop	{r4, r7, pc}
 8003926:	bf00      	nop
 8003928:	200025e0 	.word	0x200025e0
 800392c:	0800b610 	.word	0x0800b610
 8003930:	0800b614 	.word	0x0800b614
 8003934:	0800b618 	.word	0x0800b618
 8003938:	0800b620 	.word	0x0800b620
 800393c:	0800b628 	.word	0x0800b628

08003940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_MspInit+0x5c>)
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_MspInit+0x5c>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6193      	str	r3, [r2, #24]
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_MspInit+0x5c>)
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_MspInit+0x5c>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_MspInit+0x5c>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	61d3      	str	r3, [r2, #28]
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <HAL_MspInit+0x5c>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_MspInit+0x60>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_MspInit+0x60>)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000

080039a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <HAL_I2C_MspInit+0x70>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d123      	bne.n	8003a0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <HAL_I2C_MspInit+0x74>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <HAL_I2C_MspInit+0x74>)
 80039ca:	f043 0308 	orr.w	r3, r3, #8
 80039ce:	6193      	str	r3, [r2, #24]
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_I2C_MspInit+0x74>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039dc:	23c0      	movs	r3, #192	; 0xc0
 80039de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039e0:	2312      	movs	r3, #18
 80039e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e8:	f107 0310 	add.w	r3, r7, #16
 80039ec:	4619      	mov	r1, r3
 80039ee:	480b      	ldr	r0, [pc, #44]	; (8003a1c <HAL_I2C_MspInit+0x78>)
 80039f0:	f000 fe8a 	bl	8004708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_I2C_MspInit+0x74>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_I2C_MspInit+0x74>)
 80039fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039fe:	61d3      	str	r3, [r2, #28]
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_I2C_MspInit+0x74>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003a0c:	bf00      	nop
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40005400 	.word	0x40005400
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40010c00 	.word	0x40010c00

08003a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0320 	add.w	r3, r7, #32
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <HAL_UART_MspInit+0x1e4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d13a      	bne.n	8003ab6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a40:	4b71      	ldr	r3, [pc, #452]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4a70      	ldr	r2, [pc, #448]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4a:	6193      	str	r3, [r2, #24]
 8003a4c:	4b6e      	ldr	r3, [pc, #440]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b6b      	ldr	r3, [pc, #428]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4a6a      	ldr	r2, [pc, #424]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6193      	str	r3, [r2, #24]
 8003a64:	4b68      	ldr	r3, [pc, #416]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	4619      	mov	r1, r3
 8003a84:	4861      	ldr	r0, [pc, #388]	; (8003c0c <HAL_UART_MspInit+0x1ec>)
 8003a86:	f000 fe3f 	bl	8004708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	f107 0320 	add.w	r3, r7, #32
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	485b      	ldr	r0, [pc, #364]	; (8003c0c <HAL_UART_MspInit+0x1ec>)
 8003aa0:	f000 fe32 	bl	8004708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2025      	movs	r0, #37	; 0x25
 8003aaa:	f000 fb54 	bl	8004156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aae:	2025      	movs	r0, #37	; 0x25
 8003ab0:	f000 fb6d 	bl	800418e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ab4:	e0a2      	b.n	8003bfc <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a55      	ldr	r2, [pc, #340]	; (8003c10 <HAL_UART_MspInit+0x1f0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d138      	bne.n	8003b32 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ac0:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a50      	ldr	r2, [pc, #320]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aca:	61d3      	str	r3, [r2, #28]
 8003acc:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad8:	4b4b      	ldr	r3, [pc, #300]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	4a4a      	ldr	r2, [pc, #296]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	6193      	str	r3, [r2, #24]
 8003ae4:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003af0:	2304      	movs	r3, #4
 8003af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af8:	2303      	movs	r3, #3
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 0320 	add.w	r3, r7, #32
 8003b00:	4619      	mov	r1, r3
 8003b02:	4842      	ldr	r0, [pc, #264]	; (8003c0c <HAL_UART_MspInit+0x1ec>)
 8003b04:	f000 fe00 	bl	8004708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b08:	2308      	movs	r3, #8
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 0320 	add.w	r3, r7, #32
 8003b18:	4619      	mov	r1, r3
 8003b1a:	483c      	ldr	r0, [pc, #240]	; (8003c0c <HAL_UART_MspInit+0x1ec>)
 8003b1c:	f000 fdf4 	bl	8004708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2100      	movs	r1, #0
 8003b24:	2026      	movs	r0, #38	; 0x26
 8003b26:	f000 fb16 	bl	8004156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b2a:	2026      	movs	r0, #38	; 0x26
 8003b2c:	f000 fb2f 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8003b30:	e064      	b.n	8003bfc <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a37      	ldr	r2, [pc, #220]	; (8003c14 <HAL_UART_MspInit+0x1f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d15f      	bne.n	8003bfc <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4a31      	ldr	r2, [pc, #196]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b46:	61d3      	str	r3, [r2, #28]
 8003b48:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a2b      	ldr	r2, [pc, #172]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <HAL_UART_MspInit+0x1e8>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b76:	2303      	movs	r3, #3
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 0320 	add.w	r3, r7, #32
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4825      	ldr	r0, [pc, #148]	; (8003c18 <HAL_UART_MspInit+0x1f8>)
 8003b82:	f000 fdc1 	bl	8004708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b94:	f107 0320 	add.w	r3, r7, #32
 8003b98:	4619      	mov	r1, r3
 8003b9a:	481f      	ldr	r0, [pc, #124]	; (8003c18 <HAL_UART_MspInit+0x1f8>)
 8003b9c:	f000 fdb4 	bl	8004708 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_UART_MspInit+0x200>)
 8003ba4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bca:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003bd0:	4812      	ldr	r0, [pc, #72]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003bd2:	f000 faf7 	bl	80041c4 <HAL_DMA_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8003bdc:	f7ff f9de 	bl	8002f9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003be6:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <HAL_UART_MspInit+0x1fc>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2027      	movs	r0, #39	; 0x27
 8003bf2:	f000 fab0 	bl	8004156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003bf6:	2027      	movs	r0, #39	; 0x27
 8003bf8:	f000 fac9 	bl	800418e <HAL_NVIC_EnableIRQ>
}
 8003bfc:	bf00      	nop
 8003bfe:	3730      	adds	r7, #48	; 0x30
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40013800 	.word	0x40013800
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40010800 	.word	0x40010800
 8003c10:	40004400 	.word	0x40004400
 8003c14:	40004800 	.word	0x40004800
 8003c18:	40010c00 	.word	0x40010c00
 8003c1c:	20000350 	.word	0x20000350
 8003c20:	40020030 	.word	0x40020030

08003c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c28:	e7fe      	b.n	8003c28 <NMI_Handler+0x4>

08003c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c2e:	e7fe      	b.n	8003c2e <HardFault_Handler+0x4>

08003c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c34:	e7fe      	b.n	8003c34 <MemManage_Handler+0x4>

08003c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c3a:	e7fe      	b.n	8003c3a <BusFault_Handler+0x4>

08003c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c40:	e7fe      	b.n	8003c40 <UsageFault_Handler+0x4>

08003c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6a:	f000 f95d 	bl	8003f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8003c76:	2001      	movs	r0, #1
 8003c78:	f000 ff12 	bl	8004aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8003c84:	2002      	movs	r0, #2
 8003c86:	f000 ff0b 	bl	8004aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <DMA1_Channel3_IRQHandler+0x10>)
 8003c96:	f000 fc03 	bl	80044a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000350 	.word	0x20000350

08003ca4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8003ca8:	2020      	movs	r0, #32
 8003caa:	f000 fef9 	bl	8004aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8003cae:	2040      	movs	r0, #64	; 0x40
 8003cb0:	f000 fef6 	bl	8004aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8003cb4:	2080      	movs	r0, #128	; 0x80
 8003cb6:	f000 fef3 	bl	8004aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <USART1_IRQHandler+0x10>)
 8003cc6:	f002 fa33 	bl	8006130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000278 	.word	0x20000278

08003cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <USART2_IRQHandler+0x10>)
 8003cda:	f002 fa29 	bl	8006130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200002c0 	.word	0x200002c0

08003ce8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <USART3_IRQHandler+0x10>)
 8003cee:	f002 fa1f 	bl	8006130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000308 	.word	0x20000308

08003cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return 1;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <_kill>:

int _kill(int pid, int sig)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d14:	f005 f91e 	bl	8008f54 <__errno>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2216      	movs	r2, #22
 8003d1c:	601a      	str	r2, [r3, #0]
  return -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_exit>:

void _exit (int status)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d32:	f04f 31ff 	mov.w	r1, #4294967295
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ffe7 	bl	8003d0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d3c:	e7fe      	b.n	8003d3c <_exit+0x12>

08003d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e00a      	b.n	8003d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d50:	f3af 8000 	nop.w
 8003d54:	4601      	mov	r1, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	60ba      	str	r2, [r7, #8]
 8003d5c:	b2ca      	uxtb	r2, r1
 8003d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	dbf0      	blt.n	8003d50 <_read+0x12>
  }

  return len;
 8003d6e:	687b      	ldr	r3, [r7, #4]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <_isatty>:

int _isatty(int file)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <_sbrk+0x5c>)
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <_sbrk+0x60>)
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <_sbrk+0x64>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <_sbrk+0x64>)
 8003df6:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <_sbrk+0x68>)
 8003df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <_sbrk+0x64>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d207      	bcs.n	8003e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e08:	f005 f8a4 	bl	8008f54 <__errno>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	220c      	movs	r2, #12
 8003e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	e009      	b.n	8003e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <_sbrk+0x64>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <_sbrk+0x64>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <_sbrk+0x64>)
 8003e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20005000 	.word	0x20005000
 8003e38:	00000400 	.word	0x00000400
 8003e3c:	2000261c 	.word	0x2000261c
 8003e40:	20002770 	.word	0x20002770

08003e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e50:	f7ff fff8 	bl	8003e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e54:	480b      	ldr	r0, [pc, #44]	; (8003e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003e56:	490c      	ldr	r1, [pc, #48]	; (8003e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e5c:	e002      	b.n	8003e64 <LoopCopyDataInit>

08003e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e62:	3304      	adds	r3, #4

08003e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e68:	d3f9      	bcc.n	8003e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003e6c:	4c09      	ldr	r4, [pc, #36]	; (8003e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e70:	e001      	b.n	8003e76 <LoopFillZerobss>

08003e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e74:	3204      	adds	r2, #4

08003e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e78:	d3fb      	bcc.n	8003e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e7a:	f005 f871 	bl	8008f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e7e:	f7fe f9d7 	bl	8002230 <main>
  bx lr
 8003e82:	4770      	bx	lr
  ldr r0, =_sdata
 8003e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e88:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003e8c:	0800bae8 	.word	0x0800bae8
  ldr r2, =_sbss
 8003e90:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003e94:	20002770 	.word	0x20002770

08003e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e98:	e7fe      	b.n	8003e98 <ADC1_2_IRQHandler>
	...

08003e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_Init+0x28>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_Init+0x28>)
 8003ea6:	f043 0310 	orr.w	r3, r3, #16
 8003eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eac:	2003      	movs	r0, #3
 8003eae:	f000 f947 	bl	8004140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	f000 f808 	bl	8003ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb8:	f7ff fd42 	bl	8003940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40022000 	.word	0x40022000

08003ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_InitTick+0x54>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_InitTick+0x58>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f95f 	bl	80041aa <HAL_SYSTICK_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00e      	b.n	8003f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d80a      	bhi.n	8003f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003efc:	2200      	movs	r2, #0
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	f000 f927 	bl	8004156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <HAL_InitTick+0x5c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000030 	.word	0x20000030
 8003f20:	20000038 	.word	0x20000038
 8003f24:	20000034 	.word	0x20000034

08003f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_IncTick+0x1c>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_IncTick+0x20>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	4a03      	ldr	r2, [pc, #12]	; (8003f48 <HAL_IncTick+0x20>)
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	20000038 	.word	0x20000038
 8003f48:	20002620 	.word	0x20002620

08003f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <HAL_GetTick+0x10>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	20002620 	.word	0x20002620

08003f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_GetTick>
 8003f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d005      	beq.n	8003f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_Delay+0x44>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f86:	bf00      	nop
 8003f88:	f7ff ffe0 	bl	8003f4c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d8f7      	bhi.n	8003f88 <HAL_Delay+0x28>
  {
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000038 	.word	0x20000038

08003fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <__NVIC_SetPriorityGrouping+0x44>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fda:	4a04      	ldr	r2, [pc, #16]	; (8003fec <__NVIC_SetPriorityGrouping+0x44>)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	60d3      	str	r3, [r2, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <__NVIC_GetPriorityGrouping+0x18>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	0a1b      	lsrs	r3, r3, #8
 8003ffa:	f003 0307 	and.w	r3, r3, #7
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	2b00      	cmp	r3, #0
 800401c:	db0b      	blt.n	8004036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	4906      	ldr	r1, [pc, #24]	; (8004040 <__NVIC_EnableIRQ+0x34>)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2001      	movs	r0, #1
 800402e:	fa00 f202 	lsl.w	r2, r0, r2
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	e000e100 	.word	0xe000e100

08004044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	6039      	str	r1, [r7, #0]
 800404e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db0a      	blt.n	800406e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	490c      	ldr	r1, [pc, #48]	; (8004090 <__NVIC_SetPriority+0x4c>)
 800405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004062:	0112      	lsls	r2, r2, #4
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	440b      	add	r3, r1
 8004068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800406c:	e00a      	b.n	8004084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4908      	ldr	r1, [pc, #32]	; (8004094 <__NVIC_SetPriority+0x50>)
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	3b04      	subs	r3, #4
 800407c:	0112      	lsls	r2, r2, #4
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	440b      	add	r3, r1
 8004082:	761a      	strb	r2, [r3, #24]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	e000e100 	.word	0xe000e100
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f1c3 0307 	rsb	r3, r3, #7
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf28      	it	cs
 80040b6:	2304      	movcs	r3, #4
 80040b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3304      	adds	r3, #4
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d902      	bls.n	80040c8 <NVIC_EncodePriority+0x30>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3b03      	subs	r3, #3
 80040c6:	e000      	b.n	80040ca <NVIC_EncodePriority+0x32>
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	401a      	ands	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e0:	f04f 31ff 	mov.w	r1, #4294967295
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	43d9      	mvns	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	4313      	orrs	r3, r2
         );
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800410c:	d301      	bcc.n	8004112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800410e:	2301      	movs	r3, #1
 8004110:	e00f      	b.n	8004132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004112:	4a0a      	ldr	r2, [pc, #40]	; (800413c <SysTick_Config+0x40>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800411a:	210f      	movs	r1, #15
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	f7ff ff90 	bl	8004044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <SysTick_Config+0x40>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800412a:	4b04      	ldr	r3, [pc, #16]	; (800413c <SysTick_Config+0x40>)
 800412c:	2207      	movs	r2, #7
 800412e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	e000e010 	.word	0xe000e010

08004140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff2d 	bl	8003fa8 <__NVIC_SetPriorityGrouping>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004168:	f7ff ff42 	bl	8003ff0 <__NVIC_GetPriorityGrouping>
 800416c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7ff ff90 	bl	8004098 <NVIC_EncodePriority>
 8004178:	4602      	mov	r2, r0
 800417a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff5f 	bl	8004044 <__NVIC_SetPriority>
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff35 	bl	800400c <__NVIC_EnableIRQ>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ffa2 	bl	80040fc <SysTick_Config>
 80041b8:	4603      	mov	r3, r0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e043      	b.n	8004262 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_DMA_Init+0xa8>)
 80041e2:	4413      	add	r3, r2
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_DMA_Init+0xac>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	009a      	lsls	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_DMA_Init+0xb0>)
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800420e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004212:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800421c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	bffdfff8 	.word	0xbffdfff8
 8004270:	cccccccd 	.word	0xcccccccd
 8004274:	40020000 	.word	0x40020000

08004278 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_DMA_Start_IT+0x20>
 8004294:	2302      	movs	r3, #2
 8004296:	e04b      	b.n	8004330 <HAL_DMA_Start_IT+0xb8>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d13a      	bne.n	8004322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f9eb 	bl	80046ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 020e 	orr.w	r2, r2, #14
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e00f      	b.n	8004310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0204 	bic.w	r2, r2, #4
 80042fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 020a 	orr.w	r2, r2, #10
 800430e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e005      	b.n	800432e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d008      	beq.n	8004362 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2204      	movs	r2, #4
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e020      	b.n	80043a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 020e 	bic.w	r2, r2, #14
 8004370:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d005      	beq.n	80043d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2204      	movs	r2, #4
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e051      	b.n	8004478 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 020e 	bic.w	r2, r2, #14
 80043e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a22      	ldr	r2, [pc, #136]	; (8004484 <HAL_DMA_Abort_IT+0xd4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d029      	beq.n	8004452 <HAL_DMA_Abort_IT+0xa2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a21      	ldr	r2, [pc, #132]	; (8004488 <HAL_DMA_Abort_IT+0xd8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d022      	beq.n	800444e <HAL_DMA_Abort_IT+0x9e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_DMA_Abort_IT+0xdc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01a      	beq.n	8004448 <HAL_DMA_Abort_IT+0x98>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <HAL_DMA_Abort_IT+0xe0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d012      	beq.n	8004442 <HAL_DMA_Abort_IT+0x92>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_DMA_Abort_IT+0xe4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00a      	beq.n	800443c <HAL_DMA_Abort_IT+0x8c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_DMA_Abort_IT+0xe8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d102      	bne.n	8004436 <HAL_DMA_Abort_IT+0x86>
 8004430:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004434:	e00e      	b.n	8004454 <HAL_DMA_Abort_IT+0xa4>
 8004436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800443a:	e00b      	b.n	8004454 <HAL_DMA_Abort_IT+0xa4>
 800443c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004440:	e008      	b.n	8004454 <HAL_DMA_Abort_IT+0xa4>
 8004442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004446:	e005      	b.n	8004454 <HAL_DMA_Abort_IT+0xa4>
 8004448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800444c:	e002      	b.n	8004454 <HAL_DMA_Abort_IT+0xa4>
 800444e:	2310      	movs	r3, #16
 8004450:	e000      	b.n	8004454 <HAL_DMA_Abort_IT+0xa4>
 8004452:	2301      	movs	r3, #1
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <HAL_DMA_Abort_IT+0xec>)
 8004456:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
    } 
  }
  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40020008 	.word	0x40020008
 8004488:	4002001c 	.word	0x4002001c
 800448c:	40020030 	.word	0x40020030
 8004490:	40020044 	.word	0x40020044
 8004494:	40020058 	.word	0x40020058
 8004498:	4002006c 	.word	0x4002006c
 800449c:	40020000 	.word	0x40020000

080044a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2204      	movs	r2, #4
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d04f      	beq.n	8004568 <HAL_DMA_IRQHandler+0xc8>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04a      	beq.n	8004568 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a66      	ldr	r2, [pc, #408]	; (8004690 <HAL_DMA_IRQHandler+0x1f0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d029      	beq.n	800454e <HAL_DMA_IRQHandler+0xae>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a65      	ldr	r2, [pc, #404]	; (8004694 <HAL_DMA_IRQHandler+0x1f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0xaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a63      	ldr	r2, [pc, #396]	; (8004698 <HAL_DMA_IRQHandler+0x1f8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01a      	beq.n	8004544 <HAL_DMA_IRQHandler+0xa4>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a62      	ldr	r2, [pc, #392]	; (800469c <HAL_DMA_IRQHandler+0x1fc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d012      	beq.n	800453e <HAL_DMA_IRQHandler+0x9e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <HAL_DMA_IRQHandler+0x200>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00a      	beq.n	8004538 <HAL_DMA_IRQHandler+0x98>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a5f      	ldr	r2, [pc, #380]	; (80046a4 <HAL_DMA_IRQHandler+0x204>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d102      	bne.n	8004532 <HAL_DMA_IRQHandler+0x92>
 800452c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004530:	e00e      	b.n	8004550 <HAL_DMA_IRQHandler+0xb0>
 8004532:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004536:	e00b      	b.n	8004550 <HAL_DMA_IRQHandler+0xb0>
 8004538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800453c:	e008      	b.n	8004550 <HAL_DMA_IRQHandler+0xb0>
 800453e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004542:	e005      	b.n	8004550 <HAL_DMA_IRQHandler+0xb0>
 8004544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004548:	e002      	b.n	8004550 <HAL_DMA_IRQHandler+0xb0>
 800454a:	2340      	movs	r3, #64	; 0x40
 800454c:	e000      	b.n	8004550 <HAL_DMA_IRQHandler+0xb0>
 800454e:	2304      	movs	r3, #4
 8004550:	4a55      	ldr	r2, [pc, #340]	; (80046a8 <HAL_DMA_IRQHandler+0x208>)
 8004552:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8094 	beq.w	8004686 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004566:	e08e      	b.n	8004686 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2202      	movs	r2, #2
 800456e:	409a      	lsls	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d056      	beq.n	8004626 <HAL_DMA_IRQHandler+0x186>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d051      	beq.n	8004626 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 020a 	bic.w	r2, r2, #10
 800459e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a38      	ldr	r2, [pc, #224]	; (8004690 <HAL_DMA_IRQHandler+0x1f0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d029      	beq.n	8004606 <HAL_DMA_IRQHandler+0x166>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a37      	ldr	r2, [pc, #220]	; (8004694 <HAL_DMA_IRQHandler+0x1f4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_IRQHandler+0x162>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a35      	ldr	r2, [pc, #212]	; (8004698 <HAL_DMA_IRQHandler+0x1f8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01a      	beq.n	80045fc <HAL_DMA_IRQHandler+0x15c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a34      	ldr	r2, [pc, #208]	; (800469c <HAL_DMA_IRQHandler+0x1fc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d012      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x156>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a32      	ldr	r2, [pc, #200]	; (80046a0 <HAL_DMA_IRQHandler+0x200>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00a      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x150>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a31      	ldr	r2, [pc, #196]	; (80046a4 <HAL_DMA_IRQHandler+0x204>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d102      	bne.n	80045ea <HAL_DMA_IRQHandler+0x14a>
 80045e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045e8:	e00e      	b.n	8004608 <HAL_DMA_IRQHandler+0x168>
 80045ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ee:	e00b      	b.n	8004608 <HAL_DMA_IRQHandler+0x168>
 80045f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045f4:	e008      	b.n	8004608 <HAL_DMA_IRQHandler+0x168>
 80045f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045fa:	e005      	b.n	8004608 <HAL_DMA_IRQHandler+0x168>
 80045fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004600:	e002      	b.n	8004608 <HAL_DMA_IRQHandler+0x168>
 8004602:	2320      	movs	r3, #32
 8004604:	e000      	b.n	8004608 <HAL_DMA_IRQHandler+0x168>
 8004606:	2302      	movs	r3, #2
 8004608:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <HAL_DMA_IRQHandler+0x208>)
 800460a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d034      	beq.n	8004686 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004624:	e02f      	b.n	8004686 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2208      	movs	r2, #8
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d028      	beq.n	8004688 <HAL_DMA_IRQHandler+0x1e8>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d023      	beq.n	8004688 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 020e 	bic.w	r2, r2, #14
 800464e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
    }
  }
  return;
 8004686:	bf00      	nop
 8004688:	bf00      	nop
}
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40020008 	.word	0x40020008
 8004694:	4002001c 	.word	0x4002001c
 8004698:	40020030 	.word	0x40020030
 800469c:	40020044 	.word	0x40020044
 80046a0:	40020058 	.word	0x40020058
 80046a4:	4002006c 	.word	0x4002006c
 80046a8:	40020000 	.word	0x40020000

080046ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	2101      	movs	r1, #1
 80046c4:	fa01 f202 	lsl.w	r2, r1, r2
 80046c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d108      	bne.n	80046ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046ea:	e007      	b.n	80046fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
	...

08004708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004708:	b480      	push	{r7}
 800470a:	b08b      	sub	sp, #44	; 0x2c
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004716:	2300      	movs	r3, #0
 8004718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471a:	e169      	b.n	80049f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800471c:	2201      	movs	r2, #1
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	429a      	cmp	r2, r3
 8004736:	f040 8158 	bne.w	80049ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4a9a      	ldr	r2, [pc, #616]	; (80049a8 <HAL_GPIO_Init+0x2a0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d05e      	beq.n	8004802 <HAL_GPIO_Init+0xfa>
 8004744:	4a98      	ldr	r2, [pc, #608]	; (80049a8 <HAL_GPIO_Init+0x2a0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d875      	bhi.n	8004836 <HAL_GPIO_Init+0x12e>
 800474a:	4a98      	ldr	r2, [pc, #608]	; (80049ac <HAL_GPIO_Init+0x2a4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d058      	beq.n	8004802 <HAL_GPIO_Init+0xfa>
 8004750:	4a96      	ldr	r2, [pc, #600]	; (80049ac <HAL_GPIO_Init+0x2a4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d86f      	bhi.n	8004836 <HAL_GPIO_Init+0x12e>
 8004756:	4a96      	ldr	r2, [pc, #600]	; (80049b0 <HAL_GPIO_Init+0x2a8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d052      	beq.n	8004802 <HAL_GPIO_Init+0xfa>
 800475c:	4a94      	ldr	r2, [pc, #592]	; (80049b0 <HAL_GPIO_Init+0x2a8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d869      	bhi.n	8004836 <HAL_GPIO_Init+0x12e>
 8004762:	4a94      	ldr	r2, [pc, #592]	; (80049b4 <HAL_GPIO_Init+0x2ac>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d04c      	beq.n	8004802 <HAL_GPIO_Init+0xfa>
 8004768:	4a92      	ldr	r2, [pc, #584]	; (80049b4 <HAL_GPIO_Init+0x2ac>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d863      	bhi.n	8004836 <HAL_GPIO_Init+0x12e>
 800476e:	4a92      	ldr	r2, [pc, #584]	; (80049b8 <HAL_GPIO_Init+0x2b0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d046      	beq.n	8004802 <HAL_GPIO_Init+0xfa>
 8004774:	4a90      	ldr	r2, [pc, #576]	; (80049b8 <HAL_GPIO_Init+0x2b0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d85d      	bhi.n	8004836 <HAL_GPIO_Init+0x12e>
 800477a:	2b12      	cmp	r3, #18
 800477c:	d82a      	bhi.n	80047d4 <HAL_GPIO_Init+0xcc>
 800477e:	2b12      	cmp	r3, #18
 8004780:	d859      	bhi.n	8004836 <HAL_GPIO_Init+0x12e>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_GPIO_Init+0x80>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004803 	.word	0x08004803
 800478c:	080047dd 	.word	0x080047dd
 8004790:	080047ef 	.word	0x080047ef
 8004794:	08004831 	.word	0x08004831
 8004798:	08004837 	.word	0x08004837
 800479c:	08004837 	.word	0x08004837
 80047a0:	08004837 	.word	0x08004837
 80047a4:	08004837 	.word	0x08004837
 80047a8:	08004837 	.word	0x08004837
 80047ac:	08004837 	.word	0x08004837
 80047b0:	08004837 	.word	0x08004837
 80047b4:	08004837 	.word	0x08004837
 80047b8:	08004837 	.word	0x08004837
 80047bc:	08004837 	.word	0x08004837
 80047c0:	08004837 	.word	0x08004837
 80047c4:	08004837 	.word	0x08004837
 80047c8:	08004837 	.word	0x08004837
 80047cc:	080047e5 	.word	0x080047e5
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	4a79      	ldr	r2, [pc, #484]	; (80049bc <HAL_GPIO_Init+0x2b4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047da:	e02c      	b.n	8004836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	623b      	str	r3, [r7, #32]
          break;
 80047e2:	e029      	b.n	8004838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	3304      	adds	r3, #4
 80047ea:	623b      	str	r3, [r7, #32]
          break;
 80047ec:	e024      	b.n	8004838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	3308      	adds	r3, #8
 80047f4:	623b      	str	r3, [r7, #32]
          break;
 80047f6:	e01f      	b.n	8004838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	330c      	adds	r3, #12
 80047fe:	623b      	str	r3, [r7, #32]
          break;
 8004800:	e01a      	b.n	8004838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800480a:	2304      	movs	r3, #4
 800480c:	623b      	str	r3, [r7, #32]
          break;
 800480e:	e013      	b.n	8004838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004818:	2308      	movs	r3, #8
 800481a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	611a      	str	r2, [r3, #16]
          break;
 8004822:	e009      	b.n	8004838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004824:	2308      	movs	r3, #8
 8004826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	615a      	str	r2, [r3, #20]
          break;
 800482e:	e003      	b.n	8004838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004830:	2300      	movs	r3, #0
 8004832:	623b      	str	r3, [r7, #32]
          break;
 8004834:	e000      	b.n	8004838 <HAL_GPIO_Init+0x130>
          break;
 8004836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2bff      	cmp	r3, #255	; 0xff
 800483c:	d801      	bhi.n	8004842 <HAL_GPIO_Init+0x13a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	e001      	b.n	8004846 <HAL_GPIO_Init+0x13e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2bff      	cmp	r3, #255	; 0xff
 800484c:	d802      	bhi.n	8004854 <HAL_GPIO_Init+0x14c>
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	e002      	b.n	800485a <HAL_GPIO_Init+0x152>
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	3b08      	subs	r3, #8
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	210f      	movs	r1, #15
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	401a      	ands	r2, r3
 800486c:	6a39      	ldr	r1, [r7, #32]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80b1 	beq.w	80049ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004888:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <HAL_GPIO_Init+0x2b8>)
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	4a4c      	ldr	r2, [pc, #304]	; (80049c0 <HAL_GPIO_Init+0x2b8>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6193      	str	r3, [r2, #24]
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_GPIO_Init+0x2b8>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048a0:	4a48      	ldr	r2, [pc, #288]	; (80049c4 <HAL_GPIO_Init+0x2bc>)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	3302      	adds	r3, #2
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	220f      	movs	r2, #15
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <HAL_GPIO_Init+0x2c0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <HAL_GPIO_Init+0x1ec>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3f      	ldr	r2, [pc, #252]	; (80049cc <HAL_GPIO_Init+0x2c4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00d      	beq.n	80048f0 <HAL_GPIO_Init+0x1e8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <HAL_GPIO_Init+0x2c8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <HAL_GPIO_Init+0x1e4>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3d      	ldr	r2, [pc, #244]	; (80049d4 <HAL_GPIO_Init+0x2cc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_GPIO_Init+0x1e0>
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <HAL_GPIO_Init+0x1ee>
 80048e8:	2304      	movs	r3, #4
 80048ea:	e004      	b.n	80048f6 <HAL_GPIO_Init+0x1ee>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e002      	b.n	80048f6 <HAL_GPIO_Init+0x1ee>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_GPIO_Init+0x1ee>
 80048f4:	2300      	movs	r3, #0
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	f002 0203 	and.w	r2, r2, #3
 80048fc:	0092      	lsls	r2, r2, #2
 80048fe:	4093      	lsls	r3, r2
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004906:	492f      	ldr	r1, [pc, #188]	; (80049c4 <HAL_GPIO_Init+0x2bc>)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	3302      	adds	r3, #2
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	492c      	ldr	r1, [pc, #176]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]
 800492c:	e006      	b.n	800493c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800492e:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	43db      	mvns	r3, r3
 8004936:	4928      	ldr	r1, [pc, #160]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004938:	4013      	ands	r3, r2
 800493a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004948:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	4922      	ldr	r1, [pc, #136]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	60cb      	str	r3, [r1, #12]
 8004954:	e006      	b.n	8004964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	43db      	mvns	r3, r3
 800495e:	491e      	ldr	r1, [pc, #120]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004960:	4013      	ands	r3, r2
 8004962:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	4918      	ldr	r1, [pc, #96]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
 800497c:	e006      	b.n	800498c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	43db      	mvns	r3, r3
 8004986:	4914      	ldr	r1, [pc, #80]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 8004988:	4013      	ands	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d021      	beq.n	80049dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	490e      	ldr	r1, [pc, #56]	; (80049d8 <HAL_GPIO_Init+0x2d0>)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e021      	b.n	80049ea <HAL_GPIO_Init+0x2e2>
 80049a6:	bf00      	nop
 80049a8:	10320000 	.word	0x10320000
 80049ac:	10310000 	.word	0x10310000
 80049b0:	10220000 	.word	0x10220000
 80049b4:	10210000 	.word	0x10210000
 80049b8:	10120000 	.word	0x10120000
 80049bc:	10110000 	.word	0x10110000
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010800 	.word	0x40010800
 80049cc:	40010c00 	.word	0x40010c00
 80049d0:	40011000 	.word	0x40011000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_GPIO_Init+0x304>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	4909      	ldr	r1, [pc, #36]	; (8004a0c <HAL_GPIO_Init+0x304>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	3301      	adds	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f47f ae8e 	bne.w	800471c <HAL_GPIO_Init+0x14>
  }
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	372c      	adds	r7, #44	; 0x2c
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	40010400 	.word	0x40010400

08004a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e001      	b.n	8004a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	807b      	strh	r3, [r7, #2]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a4e:	787b      	ldrb	r3, [r7, #1]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a54:	887a      	ldrh	r2, [r7, #2]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a5a:	e003      	b.n	8004a64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a5c:	887b      	ldrh	r3, [r7, #2]
 8004a5e:	041a      	lsls	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	611a      	str	r2, [r3, #16]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a80:	887a      	ldrh	r2, [r7, #2]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4013      	ands	r3, r2
 8004a86:	041a      	lsls	r2, r3, #16
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43d9      	mvns	r1, r3
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	400b      	ands	r3, r1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe f980 	bl	8002dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40010400 	.word	0x40010400

08004ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e12b      	b.n	8004d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe ff54 	bl	80039a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b34:	f001 f960 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4a81      	ldr	r2, [pc, #516]	; (8004d44 <HAL_I2C_Init+0x274>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d807      	bhi.n	8004b54 <HAL_I2C_Init+0x84>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a80      	ldr	r2, [pc, #512]	; (8004d48 <HAL_I2C_Init+0x278>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bf94      	ite	ls
 8004b4c:	2301      	movls	r3, #1
 8004b4e:	2300      	movhi	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e006      	b.n	8004b62 <HAL_I2C_Init+0x92>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a7d      	ldr	r2, [pc, #500]	; (8004d4c <HAL_I2C_Init+0x27c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bf94      	ite	ls
 8004b5c:	2301      	movls	r3, #1
 8004b5e:	2300      	movhi	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0e7      	b.n	8004d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a78      	ldr	r2, [pc, #480]	; (8004d50 <HAL_I2C_Init+0x280>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0c9b      	lsrs	r3, r3, #18
 8004b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <HAL_I2C_Init+0x274>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d802      	bhi.n	8004ba4 <HAL_I2C_Init+0xd4>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	e009      	b.n	8004bb8 <HAL_I2C_Init+0xe8>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	4a69      	ldr	r2, [pc, #420]	; (8004d54 <HAL_I2C_Init+0x284>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	495c      	ldr	r1, [pc, #368]	; (8004d44 <HAL_I2C_Init+0x274>)
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	d819      	bhi.n	8004c0c <HAL_I2C_Init+0x13c>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e59      	subs	r1, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bec:	400b      	ands	r3, r1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_I2C_Init+0x138>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1e59      	subs	r1, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c00:	3301      	adds	r3, #1
 8004c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c06:	e051      	b.n	8004cac <HAL_I2C_Init+0x1dc>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	e04f      	b.n	8004cac <HAL_I2C_Init+0x1dc>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d111      	bne.n	8004c38 <HAL_I2C_Init+0x168>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	440b      	add	r3, r1
 8004c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e012      	b.n	8004c5e <HAL_I2C_Init+0x18e>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1e58      	subs	r0, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	0099      	lsls	r1, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Init+0x196>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e022      	b.n	8004cac <HAL_I2C_Init+0x1dc>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10e      	bne.n	8004c8c <HAL_I2C_Init+0x1bc>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e58      	subs	r0, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	440b      	add	r3, r1
 8004c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c80:	3301      	adds	r3, #1
 8004c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	e00f      	b.n	8004cac <HAL_I2C_Init+0x1dc>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1e58      	subs	r0, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	0099      	lsls	r1, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	6809      	ldr	r1, [r1, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6911      	ldr	r1, [r2, #16]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68d2      	ldr	r2, [r2, #12]
 8004ce6:	4311      	orrs	r1, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	000186a0 	.word	0x000186a0
 8004d48:	001e847f 	.word	0x001e847f
 8004d4c:	003d08ff 	.word	0x003d08ff
 8004d50:	431bde83 	.word	0x431bde83
 8004d54:	10624dd3 	.word	0x10624dd3

08004d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	461a      	mov	r2, r3
 8004d64:	460b      	mov	r3, r1
 8004d66:	817b      	strh	r3, [r7, #10]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7ff f8ee 	bl	8003f4c <HAL_GetTick>
 8004d70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	f040 80e0 	bne.w	8004f40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	2319      	movs	r3, #25
 8004d86:	2201      	movs	r2, #1
 8004d88:	4970      	ldr	r1, [pc, #448]	; (8004f4c <HAL_I2C_Master_Transmit+0x1f4>)
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fa92 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
 8004d98:	e0d3      	b.n	8004f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_I2C_Master_Transmit+0x50>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0cc      	b.n	8004f42 <HAL_I2C_Master_Transmit+0x1ea>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d007      	beq.n	8004dce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2221      	movs	r2, #33	; 0x21
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2210      	movs	r2, #16
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	893a      	ldrh	r2, [r7, #8]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a50      	ldr	r2, [pc, #320]	; (8004f50 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e10:	8979      	ldrh	r1, [r7, #10]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f9ca 	bl	80051b0 <I2C_MasterRequestWrite>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e08d      	b.n	8004f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e3c:	e066      	b.n	8004f0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	6a39      	ldr	r1, [r7, #32]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fb50 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d107      	bne.n	8004e66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06b      	b.n	8004f42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	781a      	ldrb	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_I2C_Master_Transmit+0x188>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d017      	beq.n	8004ee0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	6a39      	ldr	r1, [r7, #32]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fb47 	bl	8005578 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00d      	beq.n	8004f0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d107      	bne.n	8004f08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e01a      	b.n	8004f42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d194      	bne.n	8004e3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	00100002 	.word	0x00100002
 8004f50:	ffff0000 	.word	0xffff0000

08004f54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	460b      	mov	r3, r1
 8004f62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7fe fff2 	bl	8003f4c <HAL_GetTick>
 8004f68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	f040 8111 	bne.w	800519e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2319      	movs	r3, #25
 8004f82:	2201      	movs	r2, #1
 8004f84:	4988      	ldr	r1, [pc, #544]	; (80051a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f994 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
 8004f94:	e104      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_I2C_IsDeviceReady+0x50>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e0fd      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d007      	beq.n	8004fca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2224      	movs	r2, #36	; 0x24
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a70      	ldr	r2, [pc, #448]	; (80051ac <HAL_I2C_IsDeviceReady+0x258>)
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2200      	movs	r2, #0
 8005006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f952 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005024:	d103      	bne.n	800502e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e0b6      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005032:	897b      	ldrh	r3, [r7, #10]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005040:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005042:	f7fe ff83 	bl	8003f4c <HAL_GetTick>
 8005046:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005076:	e025      	b.n	80050c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005078:	f7fe ff68 	bl	8003f4c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <HAL_I2C_IsDeviceReady+0x13a>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	22a0      	movs	r2, #160	; 0xa0
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2ba0      	cmp	r3, #160	; 0xa0
 80050ce:	d005      	beq.n	80050dc <HAL_I2C_IsDeviceReady+0x188>
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <HAL_I2C_IsDeviceReady+0x188>
 80050d6:	7dbb      	ldrb	r3, [r7, #22]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0cd      	beq.n	8005078 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d129      	bne.n	8005146 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2319      	movs	r3, #25
 800511e:	2201      	movs	r2, #1
 8005120:	4921      	ldr	r1, [pc, #132]	; (80051a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f8c6 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e036      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e02c      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005154:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800515e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2319      	movs	r3, #25
 8005166:	2201      	movs	r2, #1
 8005168:	490f      	ldr	r1, [pc, #60]	; (80051a8 <HAL_I2C_IsDeviceReady+0x254>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f8a2 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e012      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3301      	adds	r3, #1
 800517e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	f4ff af32 	bcc.w	8004fee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	00100002 	.word	0x00100002
 80051ac:	ffff0000 	.word	0xffff0000

080051b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	460b      	mov	r3, r1
 80051be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d006      	beq.n	80051da <I2C_MasterRequestWrite+0x2a>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d003      	beq.n	80051da <I2C_MasterRequestWrite+0x2a>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051d8:	d108      	bne.n	80051ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e00b      	b.n	8005204 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	2b12      	cmp	r3, #18
 80051f2:	d107      	bne.n	8005204 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f84f 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d103      	bne.n	8005234 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e035      	b.n	80052a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005240:	d108      	bne.n	8005254 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005250:	611a      	str	r2, [r3, #16]
 8005252:	e01b      	b.n	800528c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005254:	897b      	ldrh	r3, [r7, #10]
 8005256:	11db      	asrs	r3, r3, #7
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f063 030f 	orn	r3, r3, #15
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	490e      	ldr	r1, [pc, #56]	; (80052ac <I2C_MasterRequestWrite+0xfc>)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f898 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e010      	b.n	80052a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005282:	897b      	ldrh	r3, [r7, #10]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4907      	ldr	r1, [pc, #28]	; (80052b0 <I2C_MasterRequestWrite+0x100>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f888 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	00010008 	.word	0x00010008
 80052b0:	00010002 	.word	0x00010002

080052b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c4:	e048      	b.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d044      	beq.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fe fe3d 	bl	8003f4c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d139      	bne.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10d      	bne.n	800530a <I2C_WaitOnFlagUntilTimeout+0x56>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	43da      	mvns	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	e00c      	b.n	8005324 <I2C_WaitOnFlagUntilTimeout+0x70>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	43da      	mvns	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d116      	bne.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e023      	b.n	80053a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10d      	bne.n	800537e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	43da      	mvns	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	e00c      	b.n	8005398 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	43da      	mvns	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	429a      	cmp	r2, r3
 800539c:	d093      	beq.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b6:	e071      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c6:	d123      	bne.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e067      	b.n	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d041      	beq.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fe fd98 	bl	8003f4c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d136      	bne.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10c      	bne.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	43da      	mvns	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2301      	movne	r3, #1
 800544c:	2300      	moveq	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e00b      	b.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	43da      	mvns	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e021      	b.n	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10c      	bne.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	43da      	mvns	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e00b      	b.n	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f47f af6d 	bne.w	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f4:	e034      	b.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f886 	bl	8005608 <I2C_IsAcknowledgeFailed>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e034      	b.n	8005570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d028      	beq.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fe fd1d 	bl	8003f4c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11d      	bne.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d016      	beq.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e007      	b.n	8005570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d1c3      	bne.n	80054f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005584:	e034      	b.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f83e 	bl	8005608 <I2C_IsAcknowledgeFailed>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e034      	b.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d028      	beq.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fe fcd5 	bl	8003f4c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11d      	bne.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d016      	beq.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e007      	b.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d1c3      	bne.n	8005586 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561e:	d11b      	bne.n	8005658 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005628:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	f043 0204 	orr.w	r2, r3, #4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e272      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 8087 	beq.w	8005792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005684:	4b92      	ldr	r3, [pc, #584]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 030c 	and.w	r3, r3, #12
 800568c:	2b04      	cmp	r3, #4
 800568e:	d00c      	beq.n	80056aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005690:	4b8f      	ldr	r3, [pc, #572]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b08      	cmp	r3, #8
 800569a:	d112      	bne.n	80056c2 <HAL_RCC_OscConfig+0x5e>
 800569c:	4b8c      	ldr	r3, [pc, #560]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a8:	d10b      	bne.n	80056c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056aa:	4b89      	ldr	r3, [pc, #548]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d06c      	beq.n	8005790 <HAL_RCC_OscConfig+0x12c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d168      	bne.n	8005790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e24c      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ca:	d106      	bne.n	80056da <HAL_RCC_OscConfig+0x76>
 80056cc:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a7f      	ldr	r2, [pc, #508]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e02e      	b.n	8005738 <HAL_RCC_OscConfig+0xd4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x98>
 80056e2:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a7a      	ldr	r2, [pc, #488]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	4b78      	ldr	r3, [pc, #480]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a77      	ldr	r2, [pc, #476]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e01d      	b.n	8005738 <HAL_RCC_OscConfig+0xd4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005704:	d10c      	bne.n	8005720 <HAL_RCC_OscConfig+0xbc>
 8005706:	4b72      	ldr	r3, [pc, #456]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a71      	ldr	r2, [pc, #452]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800570c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a6e      	ldr	r2, [pc, #440]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e00b      	b.n	8005738 <HAL_RCC_OscConfig+0xd4>
 8005720:	4b6b      	ldr	r3, [pc, #428]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a6a      	ldr	r2, [pc, #424]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	4b68      	ldr	r3, [pc, #416]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a67      	ldr	r2, [pc, #412]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005736:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d013      	beq.n	8005768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fe fc04 	bl	8003f4c <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005748:	f7fe fc00 	bl	8003f4c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e200      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0xe4>
 8005766:	e014      	b.n	8005792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fe fbf0 	bl	8003f4c <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005770:	f7fe fbec 	bl	8003f4c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e1ec      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	4b53      	ldr	r3, [pc, #332]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0x10c>
 800578e:	e000      	b.n	8005792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d063      	beq.n	8005866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800579e:	4b4c      	ldr	r3, [pc, #304]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057aa:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d11c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x18c>
 80057b6:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d116      	bne.n	80057f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c2:	4b43      	ldr	r3, [pc, #268]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_RCC_OscConfig+0x176>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e1c0      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057da:	4b3d      	ldr	r3, [pc, #244]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4939      	ldr	r1, [pc, #228]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	e03a      	b.n	8005866 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <HAL_RCC_OscConfig+0x270>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fe:	f7fe fba5 	bl	8003f4c <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005806:	f7fe fba1 	bl	8003f4c <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1a1      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	4b2a      	ldr	r3, [pc, #168]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4927      	ldr	r1, [pc, #156]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
 8005838:	e015      	b.n	8005866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <HAL_RCC_OscConfig+0x270>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fe fb84 	bl	8003f4c <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005848:	f7fe fb80 	bl	8003f4c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e180      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d03a      	beq.n	80058e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d019      	beq.n	80058ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587a:	4b17      	ldr	r3, [pc, #92]	; (80058d8 <HAL_RCC_OscConfig+0x274>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005880:	f7fe fb64 	bl	8003f4c <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005888:	f7fe fb60 	bl	8003f4c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e160      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <HAL_RCC_OscConfig+0x26c>)
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058a6:	2001      	movs	r0, #1
 80058a8:	f000 face 	bl	8005e48 <RCC_Delay>
 80058ac:	e01c      	b.n	80058e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_RCC_OscConfig+0x274>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b4:	f7fe fb4a 	bl	8003f4c <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ba:	e00f      	b.n	80058dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058bc:	f7fe fb46 	bl	8003f4c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d908      	bls.n	80058dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e146      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	42420000 	.word	0x42420000
 80058d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	4b92      	ldr	r3, [pc, #584]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e9      	bne.n	80058bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a6 	beq.w	8005a42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f6:	2300      	movs	r3, #0
 80058f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058fa:	4b8b      	ldr	r3, [pc, #556]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10d      	bne.n	8005922 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4a87      	ldr	r2, [pc, #540]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	61d3      	str	r3, [r2, #28]
 8005912:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005922:	4b82      	ldr	r3, [pc, #520]	; (8005b2c <HAL_RCC_OscConfig+0x4c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d118      	bne.n	8005960 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592e:	4b7f      	ldr	r3, [pc, #508]	; (8005b2c <HAL_RCC_OscConfig+0x4c8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7e      	ldr	r2, [pc, #504]	; (8005b2c <HAL_RCC_OscConfig+0x4c8>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593a:	f7fe fb07 	bl	8003f4c <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005942:	f7fe fb03 	bl	8003f4c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b64      	cmp	r3, #100	; 0x64
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e103      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005954:	4b75      	ldr	r3, [pc, #468]	; (8005b2c <HAL_RCC_OscConfig+0x4c8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d106      	bne.n	8005976 <HAL_RCC_OscConfig+0x312>
 8005968:	4b6f      	ldr	r3, [pc, #444]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4a6e      	ldr	r2, [pc, #440]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6213      	str	r3, [r2, #32]
 8005974:	e02d      	b.n	80059d2 <HAL_RCC_OscConfig+0x36e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0x334>
 800597e:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4a69      	ldr	r2, [pc, #420]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6213      	str	r3, [r2, #32]
 800598a:	4b67      	ldr	r3, [pc, #412]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	4a66      	ldr	r2, [pc, #408]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	6213      	str	r3, [r2, #32]
 8005996:	e01c      	b.n	80059d2 <HAL_RCC_OscConfig+0x36e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b05      	cmp	r3, #5
 800599e:	d10c      	bne.n	80059ba <HAL_RCC_OscConfig+0x356>
 80059a0:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	4a60      	ldr	r2, [pc, #384]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059a6:	f043 0304 	orr.w	r3, r3, #4
 80059aa:	6213      	str	r3, [r2, #32]
 80059ac:	4b5e      	ldr	r3, [pc, #376]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4a5d      	ldr	r2, [pc, #372]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6213      	str	r3, [r2, #32]
 80059b8:	e00b      	b.n	80059d2 <HAL_RCC_OscConfig+0x36e>
 80059ba:	4b5b      	ldr	r3, [pc, #364]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	4a5a      	ldr	r2, [pc, #360]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6213      	str	r3, [r2, #32]
 80059c6:	4b58      	ldr	r3, [pc, #352]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	4a57      	ldr	r2, [pc, #348]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059cc:	f023 0304 	bic.w	r3, r3, #4
 80059d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d015      	beq.n	8005a06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059da:	f7fe fab7 	bl	8003f4c <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fe fab3 	bl	8003f4c <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e0b1      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f8:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0ee      	beq.n	80059e2 <HAL_RCC_OscConfig+0x37e>
 8005a04:	e014      	b.n	8005a30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a06:	f7fe faa1 	bl	8003f4c <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0e:	f7fe fa9d 	bl	8003f4c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e09b      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a24:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ee      	bne.n	8005a0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d105      	bne.n	8005a42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a36:	4b3c      	ldr	r3, [pc, #240]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4a3b      	ldr	r2, [pc, #236]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 8087 	beq.w	8005b5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a4c:	4b36      	ldr	r3, [pc, #216]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 030c 	and.w	r3, r3, #12
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d061      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d146      	bne.n	8005aee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a60:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a66:	f7fe fa71 	bl	8003f4c <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fe fa6d 	bl	8003f4c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e06d      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4921      	ldr	r1, [pc, #132]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa8:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a19      	ldr	r1, [r3, #32]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	491b      	ldr	r1, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fe fa41 	bl	8003f4c <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ace:	f7fe fa3d 	bl	8003f4c <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e03d      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x46a>
 8005aec:	e035      	b.n	8005b5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fe fa2a 	bl	8003f4c <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fe fa26 	bl	8003f4c <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e026      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_RCC_OscConfig+0x4c4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x498>
 8005b1a:	e01e      	b.n	8005b5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e019      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RCC_OscConfig+0x500>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d001      	beq.n	8005b5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000

08005b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0d0      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b7c:	4b6a      	ldr	r3, [pc, #424]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d910      	bls.n	8005bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8a:	4b67      	ldr	r3, [pc, #412]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 0207 	bic.w	r2, r3, #7
 8005b92:	4965      	ldr	r1, [pc, #404]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	4b63      	ldr	r3, [pc, #396]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d001      	beq.n	8005bac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0b8      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d020      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bc4:	4b59      	ldr	r3, [pc, #356]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a58      	ldr	r2, [pc, #352]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bdc:	4b53      	ldr	r3, [pc, #332]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a52      	ldr	r2, [pc, #328]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005be6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be8:	4b50      	ldr	r3, [pc, #320]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	494d      	ldr	r1, [pc, #308]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d040      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d115      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e07f      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d107      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c26:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e073      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c36:	4b3d      	ldr	r3, [pc, #244]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e06b      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f023 0203 	bic.w	r2, r3, #3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4936      	ldr	r1, [pc, #216]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c58:	f7fe f978 	bl	8003f4c <HAL_GetTick>
 8005c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c60:	f7fe f974 	bl	8003f4c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e053      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c76:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 020c 	and.w	r2, r3, #12
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d1eb      	bne.n	8005c60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c88:	4b27      	ldr	r3, [pc, #156]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d210      	bcs.n	8005cb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 0207 	bic.w	r2, r3, #7
 8005c9e:	4922      	ldr	r1, [pc, #136]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e032      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cc4:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	4916      	ldr	r1, [pc, #88]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	490e      	ldr	r1, [pc, #56]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cf6:	f000 f821 	bl	8005d3c <HAL_RCC_GetSysClockFreq>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	490a      	ldr	r1, [pc, #40]	; (8005d30 <HAL_RCC_ClockConfig+0x1c8>)
 8005d08:	5ccb      	ldrb	r3, [r1, r3]
 8005d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <HAL_RCC_ClockConfig+0x1cc>)
 8005d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <HAL_RCC_ClockConfig+0x1d0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe f8d6 	bl	8003ec8 <HAL_InitTick>

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40022000 	.word	0x40022000
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	0800b630 	.word	0x0800b630
 8005d34:	20000030 	.word	0x20000030
 8005d38:	20000034 	.word	0x20000034

08005d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d002      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x30>
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_GetSysClockFreq+0x36>
 8005d6a:	e027      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d6e:	613b      	str	r3, [r7, #16]
      break;
 8005d70:	e027      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	0c9b      	lsrs	r3, r3, #18
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d010      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	0c5b      	lsrs	r3, r3, #17
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d96:	5cd3      	ldrb	r3, [r2, r3]
 8005d98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d9e:	fb03 f202 	mul.w	r2, r3, r2
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e004      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	613b      	str	r3, [r7, #16]
      break;
 8005dba:	e002      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dbe:	613b      	str	r3, [r7, #16]
      break;
 8005dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dc2:	693b      	ldr	r3, [r7, #16]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	007a1200 	.word	0x007a1200
 8005dd8:	0800b648 	.word	0x0800b648
 8005ddc:	0800b658 	.word	0x0800b658
 8005de0:	003d0900 	.word	0x003d0900

08005de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de8:	4b02      	ldr	r3, [pc, #8]	; (8005df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dea:	681b      	ldr	r3, [r3, #0]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	20000030 	.word	0x20000030

08005df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dfc:	f7ff fff2 	bl	8005de4 <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4903      	ldr	r1, [pc, #12]	; (8005e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	0800b640 	.word	0x0800b640

08005e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e24:	f7ff ffde 	bl	8005de4 <HAL_RCC_GetHCLKFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	0adb      	lsrs	r3, r3, #11
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	4903      	ldr	r1, [pc, #12]	; (8005e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e36:	5ccb      	ldrb	r3, [r1, r3]
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40021000 	.word	0x40021000
 8005e44:	0800b640 	.word	0x0800b640

08005e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <RCC_Delay+0x34>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <RCC_Delay+0x38>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	0a5b      	lsrs	r3, r3, #9
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e64:	bf00      	nop
  }
  while (Delay --);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1e5a      	subs	r2, r3, #1
 8005e6a:	60fa      	str	r2, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f9      	bne.n	8005e64 <RCC_Delay+0x1c>
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	20000030 	.word	0x20000030
 8005e80:	10624dd3 	.word	0x10624dd3

08005e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e042      	b.n	8005f1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fd fdb8 	bl	8003a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 ffdf 	bl	8006e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695a      	ldr	r2, [r3, #20]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d16d      	bne.n	8006020 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_UART_Transmit+0x2c>
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e066      	b.n	8006022 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2221      	movs	r2, #33	; 0x21
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f62:	f7fd fff3 	bl	8003f4c <HAL_GetTick>
 8005f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d108      	bne.n	8005f90 <HAL_UART_Transmit+0x6c>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	e003      	b.n	8005f98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f98:	e02a      	b.n	8005ff0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fc6e 	bl	8006886 <UART_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e036      	b.n	8006022 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	e007      	b.n	8005fe2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1cf      	bne.n	8005f9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2200      	movs	r2, #0
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fc3e 	bl	8006886 <UART_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	4613      	mov	r3, r2
 8006036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d112      	bne.n	800606a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Receive_IT+0x26>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e00b      	b.n	800606c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	461a      	mov	r2, r3
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fc7e 	bl	8006962 <UART_Start_Receive_IT>
 8006066:	4603      	mov	r3, r0
 8006068:	e000      	b.n	800606c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08c      	sub	sp, #48	; 0x30
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	d14a      	bne.n	8006124 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e043      	b.n	8006126 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fc8f 	bl	80069d4 <UART_Start_Receive_DMA>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80060bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d12c      	bne.n	800611e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d125      	bne.n	8006118 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	617b      	str	r3, [r7, #20]
   return(result);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f043 0310 	orr.w	r3, r3, #16
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006102:	627a      	str	r2, [r7, #36]	; 0x24
 8006104:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6a39      	ldr	r1, [r7, #32]
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006116:	e002      	b.n	800611e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800611e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006122:	e000      	b.n	8006126 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b0ba      	sub	sp, #232	; 0xe8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800616e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10f      	bne.n	8006196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_UART_IRQHandler+0x66>
 8006182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fdbe 	bl	8006d10 <UART_Receive_IT>
      return;
 8006194:	e25b      	b.n	800664e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80de 	beq.w	800635c <HAL_UART_IRQHandler+0x22c>
 80061a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80d1 	beq.w	800635c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <HAL_UART_IRQHandler+0xae>
 80061c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f043 0201 	orr.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <HAL_UART_IRQHandler+0xd2>
 80061ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	f043 0202 	orr.w	r2, r3, #2
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <HAL_UART_IRQHandler+0xf6>
 800620e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f043 0204 	orr.w	r2, r3, #4
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d011      	beq.n	8006256 <HAL_UART_IRQHandler+0x126>
 8006232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d105      	bne.n	800624a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800623e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	f043 0208 	orr.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 81f2 	beq.w	8006644 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_UART_IRQHandler+0x14e>
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fd49 	bl	8006d10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <HAL_UART_IRQHandler+0x17a>
 80062a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d04f      	beq.n	800634a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fc53 	bl	8006b56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d041      	beq.n	8006342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3314      	adds	r3, #20
 80062c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1d9      	bne.n	80062be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d013      	beq.n	800633a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	4a7e      	ldr	r2, [pc, #504]	; (8006510 <HAL_UART_IRQHandler+0x3e0>)
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe f846 	bl	80043b0 <HAL_DMA_Abort_IT>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e00e      	b.n	8006358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f99c 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e00a      	b.n	8006358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f998 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	e006      	b.n	8006358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f994 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006356:	e175      	b.n	8006644 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	bf00      	nop
    return;
 800635a:	e173      	b.n	8006644 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	f040 814f 	bne.w	8006604 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8148 	beq.w	8006604 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8141 	beq.w	8006604 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006382:	2300      	movs	r3, #0
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80b6 	beq.w	8006514 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8145 	beq.w	8006648 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063c6:	429a      	cmp	r2, r3
 80063c8:	f080 813e 	bcs.w	8006648 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b20      	cmp	r3, #32
 80063dc:	f000 8088 	beq.w	80064f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800640c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006418:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1d9      	bne.n	80063e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3314      	adds	r3, #20
 8006432:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800643c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3314      	adds	r3, #20
 800644c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006450:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006454:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006458:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e1      	bne.n	800642c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800648c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800648e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006492:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800649a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e3      	bne.n	8006468 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c0:	f023 0310 	bic.w	r3, r3, #16
 80064c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80064d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e3      	bne.n	80064ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fd ff24 	bl	8004338 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fe:	b29b      	uxth	r3, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fa fe5a 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800650c:	e09c      	b.n	8006648 <HAL_UART_IRQHandler+0x518>
 800650e:	bf00      	nop
 8006510:	08006c1b 	.word	0x08006c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651c:	b29b      	uxth	r3, r3
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 808e 	beq.w	800664c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8089 	beq.w	800664c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800655e:	647a      	str	r2, [r7, #68]	; 0x44
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e3      	bne.n	800653a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	623b      	str	r3, [r7, #32]
   return(result);
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006596:	633a      	str	r2, [r7, #48]	; 0x30
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800659c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e3      	bne.n	8006572 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065dc:	61fa      	str	r2, [r7, #28]
 80065de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e3      	bne.n	80065b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fa fddf 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006602:	e023      	b.n	800664c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <HAL_UART_IRQHandler+0x4f4>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb10 	bl	8006c42 <UART_Transmit_IT>
    return;
 8006622:	e014      	b.n	800664e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00e      	beq.n	800664e <HAL_UART_IRQHandler+0x51e>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb4f 	bl	8006ce0 <UART_EndTransmit_IT>
    return;
 8006642:	e004      	b.n	800664e <HAL_UART_IRQHandler+0x51e>
    return;
 8006644:	bf00      	nop
 8006646:	e002      	b.n	800664e <HAL_UART_IRQHandler+0x51e>
      return;
 8006648:	bf00      	nop
 800664a:	e000      	b.n	800664e <HAL_UART_IRQHandler+0x51e>
      return;
 800664c:	bf00      	nop
  }
}
 800664e:	37e8      	adds	r7, #232	; 0xe8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b09c      	sub	sp, #112	; 0x70
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d172      	bne.n	800678c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	2200      	movs	r2, #0
 80066aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80066ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3314      	adds	r3, #20
 80066e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	667b      	str	r3, [r7, #100]	; 0x64
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006700:	647a      	str	r2, [r7, #68]	; 0x44
 8006702:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	623b      	str	r3, [r7, #32]
   return(result);
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672a:	663b      	str	r3, [r7, #96]	; 0x60
 800672c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3314      	adds	r3, #20
 8006732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006734:	633a      	str	r2, [r7, #48]	; 0x30
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	2b01      	cmp	r3, #1
 8006756:	d119      	bne.n	800678c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	60fb      	str	r3, [r7, #12]
   return(result);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006778:	61fa      	str	r2, [r7, #28]
 800677a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	617b      	str	r3, [r7, #20]
   return(result);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e5      	bne.n	8006758 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678e:	2200      	movs	r2, #0
 8006790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	2b01      	cmp	r3, #1
 8006798:	d106      	bne.n	80067a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800679e:	4619      	mov	r1, r3
 80067a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067a2:	f7fa fd0d 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067a6:	e002      	b.n	80067ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80067a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067aa:	f7fc fb4b 	bl	8002e44 <HAL_UART_RxCpltCallback>
}
 80067ae:	bf00      	nop
 80067b0:	3770      	adds	r7, #112	; 0x70
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d108      	bne.n	80067e4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7fa fcef 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e2:	e002      	b.n	80067ea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff ff3e 	bl	8006666 <HAL_UART_RxHalfCpltCallback>
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b00      	cmp	r3, #0
 8006810:	bf14      	ite	ne
 8006812:	2301      	movne	r3, #1
 8006814:	2300      	moveq	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b21      	cmp	r3, #33	; 0x21
 8006824:	d108      	bne.n	8006838 <UART_DMAError+0x46>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2200      	movs	r2, #0
 8006830:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006832:	68b8      	ldr	r0, [r7, #8]
 8006834:	f000 f968 	bl	8006b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf14      	ite	ne
 8006846:	2301      	movne	r3, #1
 8006848:	2300      	moveq	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b22      	cmp	r3, #34	; 0x22
 8006858:	d108      	bne.n	800686c <UART_DMAError+0x7a>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006866:	68b8      	ldr	r0, [r7, #8]
 8006868:	f000 f975 	bl	8006b56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006870:	f043 0210 	orr.w	r2, r3, #16
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f7ff fefd 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b090      	sub	sp, #64	; 0x40
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006896:	e050      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d04c      	beq.n	800693a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80068a6:	f7fd fb51 	bl	8003f4c <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d241      	bcs.n	800693a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	330c      	adds	r3, #12
 80068d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068d6:	637a      	str	r2, [r7, #52]	; 0x34
 80068d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	613b      	str	r3, [r7, #16]
   return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3314      	adds	r3, #20
 8006908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800690a:	623a      	str	r2, [r7, #32]
 800690c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	69f9      	ldr	r1, [r7, #28]
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	61bb      	str	r3, [r7, #24]
   return(result);
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e00f      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	bf0c      	ite	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	2300      	movne	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	429a      	cmp	r2, r3
 8006956:	d09f      	beq.n	8006898 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3740      	adds	r7, #64	; 0x40
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	4613      	mov	r3, r2
 800696e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	88fa      	ldrh	r2, [r7, #6]
 800697a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2222      	movs	r2, #34	; 0x22
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0220 	orr.w	r2, r2, #32
 80069c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b098      	sub	sp, #96	; 0x60
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2222      	movs	r2, #34	; 0x22
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	4a3e      	ldr	r2, [pc, #248]	; (8006afc <UART_Start_Receive_DMA+0x128>)
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a08:	4a3d      	ldr	r2, [pc, #244]	; (8006b00 <UART_Start_Receive_DMA+0x12c>)
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	4a3c      	ldr	r2, [pc, #240]	; (8006b04 <UART_Start_Receive_DMA+0x130>)
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	2200      	movs	r2, #0
 8006a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	f7fd fc20 	bl	8004278 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d019      	beq.n	8006a8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aaa:	63ba      	str	r2, [r7, #56]	; 0x38
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ade:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6a39      	ldr	r1, [r7, #32]
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3760      	adds	r7, #96	; 0x60
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0800668b 	.word	0x0800668b
 8006b00:	080067b7 	.word	0x080067b7
 8006b04:	080067f3 	.word	0x080067f3

08006b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	61ba      	str	r2, [r7, #24]
 8006b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006b4c:	bf00      	nop
 8006b4e:	3724      	adds	r7, #36	; 0x24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr

08006b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b095      	sub	sp, #84	; 0x54
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b7e:	643a      	str	r2, [r7, #64]	; 0x40
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3314      	adds	r3, #20
 8006bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e5      	bne.n	8006b92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d119      	bne.n	8006c02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f023 0310 	bic.w	r3, r3, #16
 8006be4:	647b      	str	r3, [r7, #68]	; 0x44
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bee:	61ba      	str	r2, [r7, #24]
 8006bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6979      	ldr	r1, [r7, #20]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c10:	bf00      	nop
 8006c12:	3754      	adds	r7, #84	; 0x54
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff fd1f 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b21      	cmp	r3, #33	; 0x21
 8006c54:	d13e      	bne.n	8006cd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	d114      	bne.n	8006c8a <UART_Transmit_IT+0x48>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d110      	bne.n	8006c8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	1c9a      	adds	r2, r3, #2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	621a      	str	r2, [r3, #32]
 8006c88:	e008      	b.n	8006c9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6211      	str	r1, [r2, #32]
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10f      	bne.n	8006cd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fca7 	bl	8006654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08c      	sub	sp, #48	; 0x30
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b22      	cmp	r3, #34	; 0x22
 8006d22:	f040 80ae 	bne.w	8006e82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	d117      	bne.n	8006d60 <UART_Receive_IT+0x50>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d113      	bne.n	8006d60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	1c9a      	adds	r2, r3, #2
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8006d5e:	e026      	b.n	8006dae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	d007      	beq.n	8006d84 <UART_Receive_IT+0x74>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <UART_Receive_IT+0x82>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e008      	b.n	8006da4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d15d      	bne.n	8006e7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0220 	bic.w	r2, r2, #32
 8006dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695a      	ldr	r2, [r3, #20]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d135      	bne.n	8006e74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	623a      	str	r2, [r7, #32]
 8006e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69f9      	ldr	r1, [r7, #28]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d10a      	bne.n	8006e66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fa f9a7 	bl	80011c0 <HAL_UARTEx_RxEventCallback>
 8006e72:	e002      	b.n	8006e7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fb ffe5 	bl	8002e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e002      	b.n	8006e84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e82:	2302      	movs	r3, #2
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3730      	adds	r7, #48	; 0x30
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ec6:	f023 030c 	bic.w	r3, r3, #12
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2c      	ldr	r2, [pc, #176]	; (8006fa0 <UART_SetConfig+0x114>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d103      	bne.n	8006efc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fe ff94 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	e002      	b.n	8006f02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006efc:	f7fe ff7c 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 8006f00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009a      	lsls	r2, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <UART_SetConfig+0x118>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	0119      	lsls	r1, r3, #4
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009a      	lsls	r2, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f38:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <UART_SetConfig+0x118>)
 8006f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	2064      	movs	r0, #100	; 0x64
 8006f42:	fb00 f303 	mul.w	r3, r0, r3
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	3332      	adds	r3, #50	; 0x32
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <UART_SetConfig+0x118>)
 8006f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f58:	4419      	add	r1, r3
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009a      	lsls	r2, r3, #2
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <UART_SetConfig+0x118>)
 8006f72:	fba3 0302 	umull	r0, r3, r3, r2
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	2064      	movs	r0, #100	; 0x64
 8006f7a:	fb00 f303 	mul.w	r3, r0, r3
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	3332      	adds	r3, #50	; 0x32
 8006f84:	4a07      	ldr	r2, [pc, #28]	; (8006fa4 <UART_SetConfig+0x118>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	440a      	add	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40013800 	.word	0x40013800
 8006fa4:	51eb851f 	.word	0x51eb851f

08006fa8 <atof>:
 8006fa8:	2100      	movs	r1, #0
 8006faa:	f000 bed9 	b.w	8007d60 <strtod>

08006fae <atoi>:
 8006fae:	220a      	movs	r2, #10
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f000 bfb7 	b.w	8007f24 <strtol>
	...

08006fb8 <malloc>:
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <malloc+0xc>)
 8006fba:	4601      	mov	r1, r0
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f000 b82b 	b.w	8007018 <_malloc_r>
 8006fc2:	bf00      	nop
 8006fc4:	20000200 	.word	0x20000200

08006fc8 <free>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <free+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f002 beab 	b.w	8009d28 <_free_r>
 8006fd2:	bf00      	nop
 8006fd4:	20000200 	.word	0x20000200

08006fd8 <sbrk_aligned>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4e0e      	ldr	r6, [pc, #56]	; (8007014 <sbrk_aligned+0x3c>)
 8006fdc:	460c      	mov	r4, r1
 8006fde:	6831      	ldr	r1, [r6, #0]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	b911      	cbnz	r1, 8006fea <sbrk_aligned+0x12>
 8006fe4:	f001 ff94 	bl	8008f10 <_sbrk_r>
 8006fe8:	6030      	str	r0, [r6, #0]
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f001 ff8f 	bl	8008f10 <_sbrk_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d00a      	beq.n	800700c <sbrk_aligned+0x34>
 8006ff6:	1cc4      	adds	r4, r0, #3
 8006ff8:	f024 0403 	bic.w	r4, r4, #3
 8006ffc:	42a0      	cmp	r0, r4
 8006ffe:	d007      	beq.n	8007010 <sbrk_aligned+0x38>
 8007000:	1a21      	subs	r1, r4, r0
 8007002:	4628      	mov	r0, r5
 8007004:	f001 ff84 	bl	8008f10 <_sbrk_r>
 8007008:	3001      	adds	r0, #1
 800700a:	d101      	bne.n	8007010 <sbrk_aligned+0x38>
 800700c:	f04f 34ff 	mov.w	r4, #4294967295
 8007010:	4620      	mov	r0, r4
 8007012:	bd70      	pop	{r4, r5, r6, pc}
 8007014:	20002628 	.word	0x20002628

08007018 <_malloc_r>:
 8007018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800701c:	1ccd      	adds	r5, r1, #3
 800701e:	f025 0503 	bic.w	r5, r5, #3
 8007022:	3508      	adds	r5, #8
 8007024:	2d0c      	cmp	r5, #12
 8007026:	bf38      	it	cc
 8007028:	250c      	movcc	r5, #12
 800702a:	2d00      	cmp	r5, #0
 800702c:	4607      	mov	r7, r0
 800702e:	db01      	blt.n	8007034 <_malloc_r+0x1c>
 8007030:	42a9      	cmp	r1, r5
 8007032:	d905      	bls.n	8007040 <_malloc_r+0x28>
 8007034:	230c      	movs	r3, #12
 8007036:	2600      	movs	r6, #0
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	4630      	mov	r0, r6
 800703c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007114 <_malloc_r+0xfc>
 8007044:	f000 f868 	bl	8007118 <__malloc_lock>
 8007048:	f8d8 3000 	ldr.w	r3, [r8]
 800704c:	461c      	mov	r4, r3
 800704e:	bb5c      	cbnz	r4, 80070a8 <_malloc_r+0x90>
 8007050:	4629      	mov	r1, r5
 8007052:	4638      	mov	r0, r7
 8007054:	f7ff ffc0 	bl	8006fd8 <sbrk_aligned>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	4604      	mov	r4, r0
 800705c:	d155      	bne.n	800710a <_malloc_r+0xf2>
 800705e:	f8d8 4000 	ldr.w	r4, [r8]
 8007062:	4626      	mov	r6, r4
 8007064:	2e00      	cmp	r6, #0
 8007066:	d145      	bne.n	80070f4 <_malloc_r+0xdc>
 8007068:	2c00      	cmp	r4, #0
 800706a:	d048      	beq.n	80070fe <_malloc_r+0xe6>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	4631      	mov	r1, r6
 8007070:	4638      	mov	r0, r7
 8007072:	eb04 0903 	add.w	r9, r4, r3
 8007076:	f001 ff4b 	bl	8008f10 <_sbrk_r>
 800707a:	4581      	cmp	r9, r0
 800707c:	d13f      	bne.n	80070fe <_malloc_r+0xe6>
 800707e:	6821      	ldr	r1, [r4, #0]
 8007080:	4638      	mov	r0, r7
 8007082:	1a6d      	subs	r5, r5, r1
 8007084:	4629      	mov	r1, r5
 8007086:	f7ff ffa7 	bl	8006fd8 <sbrk_aligned>
 800708a:	3001      	adds	r0, #1
 800708c:	d037      	beq.n	80070fe <_malloc_r+0xe6>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	442b      	add	r3, r5
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	f8d8 3000 	ldr.w	r3, [r8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d038      	beq.n	800710e <_malloc_r+0xf6>
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	42a2      	cmp	r2, r4
 80070a0:	d12b      	bne.n	80070fa <_malloc_r+0xe2>
 80070a2:	2200      	movs	r2, #0
 80070a4:	605a      	str	r2, [r3, #4]
 80070a6:	e00f      	b.n	80070c8 <_malloc_r+0xb0>
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	1b52      	subs	r2, r2, r5
 80070ac:	d41f      	bmi.n	80070ee <_malloc_r+0xd6>
 80070ae:	2a0b      	cmp	r2, #11
 80070b0:	d917      	bls.n	80070e2 <_malloc_r+0xca>
 80070b2:	1961      	adds	r1, r4, r5
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	6025      	str	r5, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	6059      	strne	r1, [r3, #4]
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	bf08      	it	eq
 80070c0:	f8c8 1000 	streq.w	r1, [r8]
 80070c4:	5162      	str	r2, [r4, r5]
 80070c6:	604b      	str	r3, [r1, #4]
 80070c8:	4638      	mov	r0, r7
 80070ca:	f104 060b 	add.w	r6, r4, #11
 80070ce:	f000 f829 	bl	8007124 <__malloc_unlock>
 80070d2:	f026 0607 	bic.w	r6, r6, #7
 80070d6:	1d23      	adds	r3, r4, #4
 80070d8:	1af2      	subs	r2, r6, r3
 80070da:	d0ae      	beq.n	800703a <_malloc_r+0x22>
 80070dc:	1b9b      	subs	r3, r3, r6
 80070de:	50a3      	str	r3, [r4, r2]
 80070e0:	e7ab      	b.n	800703a <_malloc_r+0x22>
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	6862      	ldr	r2, [r4, #4]
 80070e6:	d1dd      	bne.n	80070a4 <_malloc_r+0x8c>
 80070e8:	f8c8 2000 	str.w	r2, [r8]
 80070ec:	e7ec      	b.n	80070c8 <_malloc_r+0xb0>
 80070ee:	4623      	mov	r3, r4
 80070f0:	6864      	ldr	r4, [r4, #4]
 80070f2:	e7ac      	b.n	800704e <_malloc_r+0x36>
 80070f4:	4634      	mov	r4, r6
 80070f6:	6876      	ldr	r6, [r6, #4]
 80070f8:	e7b4      	b.n	8007064 <_malloc_r+0x4c>
 80070fa:	4613      	mov	r3, r2
 80070fc:	e7cc      	b.n	8007098 <_malloc_r+0x80>
 80070fe:	230c      	movs	r3, #12
 8007100:	4638      	mov	r0, r7
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	f000 f80e 	bl	8007124 <__malloc_unlock>
 8007108:	e797      	b.n	800703a <_malloc_r+0x22>
 800710a:	6025      	str	r5, [r4, #0]
 800710c:	e7dc      	b.n	80070c8 <_malloc_r+0xb0>
 800710e:	605b      	str	r3, [r3, #4]
 8007110:	deff      	udf	#255	; 0xff
 8007112:	bf00      	nop
 8007114:	20002624 	.word	0x20002624

08007118 <__malloc_lock>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__malloc_lock+0x8>)
 800711a:	f001 bf46 	b.w	8008faa <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	2000276c 	.word	0x2000276c

08007124 <__malloc_unlock>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__malloc_unlock+0x8>)
 8007126:	f001 bf41 	b.w	8008fac <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	2000276c 	.word	0x2000276c

08007130 <sulp>:
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007134:	460f      	mov	r7, r1
 8007136:	4690      	mov	r8, r2
 8007138:	f003 fd16 	bl	800ab68 <__ulp>
 800713c:	4604      	mov	r4, r0
 800713e:	460d      	mov	r5, r1
 8007140:	f1b8 0f00 	cmp.w	r8, #0
 8007144:	d011      	beq.n	800716a <sulp+0x3a>
 8007146:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800714a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800714e:	2b00      	cmp	r3, #0
 8007150:	dd0b      	ble.n	800716a <sulp+0x3a>
 8007152:	2400      	movs	r4, #0
 8007154:	051b      	lsls	r3, r3, #20
 8007156:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800715a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	f7f9 f9c3 	bl	80004ec <__aeabi_dmul>
 8007166:	4604      	mov	r4, r0
 8007168:	460d      	mov	r5, r1
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007172:	0000      	movs	r0, r0
 8007174:	0000      	movs	r0, r0
	...

08007178 <_strtod_l>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	b09f      	sub	sp, #124	; 0x7c
 800717e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007180:	2200      	movs	r2, #0
 8007182:	4604      	mov	r4, r0
 8007184:	921a      	str	r2, [sp, #104]	; 0x68
 8007186:	460d      	mov	r5, r1
 8007188:	f04f 0800 	mov.w	r8, #0
 800718c:	f04f 0900 	mov.w	r9, #0
 8007190:	460a      	mov	r2, r1
 8007192:	9219      	str	r2, [sp, #100]	; 0x64
 8007194:	7811      	ldrb	r1, [r2, #0]
 8007196:	292b      	cmp	r1, #43	; 0x2b
 8007198:	d04a      	beq.n	8007230 <_strtod_l+0xb8>
 800719a:	d838      	bhi.n	800720e <_strtod_l+0x96>
 800719c:	290d      	cmp	r1, #13
 800719e:	d832      	bhi.n	8007206 <_strtod_l+0x8e>
 80071a0:	2908      	cmp	r1, #8
 80071a2:	d832      	bhi.n	800720a <_strtod_l+0x92>
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d03b      	beq.n	8007220 <_strtod_l+0xa8>
 80071a8:	2200      	movs	r2, #0
 80071aa:	920e      	str	r2, [sp, #56]	; 0x38
 80071ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80071ae:	7832      	ldrb	r2, [r6, #0]
 80071b0:	2a30      	cmp	r2, #48	; 0x30
 80071b2:	f040 80b2 	bne.w	800731a <_strtod_l+0x1a2>
 80071b6:	7872      	ldrb	r2, [r6, #1]
 80071b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071bc:	2a58      	cmp	r2, #88	; 0x58
 80071be:	d16e      	bne.n	800729e <_strtod_l+0x126>
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c4:	4620      	mov	r0, r4
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	ab1a      	add	r3, sp, #104	; 0x68
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	4a8c      	ldr	r2, [pc, #560]	; (8007400 <_strtod_l+0x288>)
 80071ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80071d0:	a919      	add	r1, sp, #100	; 0x64
 80071d2:	f002 fe59 	bl	8009e88 <__gethex>
 80071d6:	f010 070f 	ands.w	r7, r0, #15
 80071da:	4605      	mov	r5, r0
 80071dc:	d005      	beq.n	80071ea <_strtod_l+0x72>
 80071de:	2f06      	cmp	r7, #6
 80071e0:	d128      	bne.n	8007234 <_strtod_l+0xbc>
 80071e2:	2300      	movs	r3, #0
 80071e4:	3601      	adds	r6, #1
 80071e6:	9619      	str	r6, [sp, #100]	; 0x64
 80071e8:	930e      	str	r3, [sp, #56]	; 0x38
 80071ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 85a0 	bne.w	8007d32 <_strtod_l+0xbba>
 80071f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f4:	b1cb      	cbz	r3, 800722a <_strtod_l+0xb2>
 80071f6:	4642      	mov	r2, r8
 80071f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071fc:	4610      	mov	r0, r2
 80071fe:	4619      	mov	r1, r3
 8007200:	b01f      	add	sp, #124	; 0x7c
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	2920      	cmp	r1, #32
 8007208:	d1ce      	bne.n	80071a8 <_strtod_l+0x30>
 800720a:	3201      	adds	r2, #1
 800720c:	e7c1      	b.n	8007192 <_strtod_l+0x1a>
 800720e:	292d      	cmp	r1, #45	; 0x2d
 8007210:	d1ca      	bne.n	80071a8 <_strtod_l+0x30>
 8007212:	2101      	movs	r1, #1
 8007214:	910e      	str	r1, [sp, #56]	; 0x38
 8007216:	1c51      	adds	r1, r2, #1
 8007218:	9119      	str	r1, [sp, #100]	; 0x64
 800721a:	7852      	ldrb	r2, [r2, #1]
 800721c:	2a00      	cmp	r2, #0
 800721e:	d1c5      	bne.n	80071ac <_strtod_l+0x34>
 8007220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007222:	9519      	str	r5, [sp, #100]	; 0x64
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 8582 	bne.w	8007d2e <_strtod_l+0xbb6>
 800722a:	4642      	mov	r2, r8
 800722c:	464b      	mov	r3, r9
 800722e:	e7e5      	b.n	80071fc <_strtod_l+0x84>
 8007230:	2100      	movs	r1, #0
 8007232:	e7ef      	b.n	8007214 <_strtod_l+0x9c>
 8007234:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007236:	b13a      	cbz	r2, 8007248 <_strtod_l+0xd0>
 8007238:	2135      	movs	r1, #53	; 0x35
 800723a:	a81c      	add	r0, sp, #112	; 0x70
 800723c:	f003 fd80 	bl	800ad40 <__copybits>
 8007240:	4620      	mov	r0, r4
 8007242:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007244:	f003 f964 	bl	800a510 <_Bfree>
 8007248:	3f01      	subs	r7, #1
 800724a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800724c:	2f04      	cmp	r7, #4
 800724e:	d806      	bhi.n	800725e <_strtod_l+0xe6>
 8007250:	e8df f007 	tbb	[pc, r7]
 8007254:	201d0314 	.word	0x201d0314
 8007258:	14          	.byte	0x14
 8007259:	00          	.byte	0x00
 800725a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800725e:	05e9      	lsls	r1, r5, #23
 8007260:	bf48      	it	mi
 8007262:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007266:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800726a:	0d1b      	lsrs	r3, r3, #20
 800726c:	051b      	lsls	r3, r3, #20
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1bb      	bne.n	80071ea <_strtod_l+0x72>
 8007272:	f001 fe6f 	bl	8008f54 <__errno>
 8007276:	2322      	movs	r3, #34	; 0x22
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	e7b6      	b.n	80071ea <_strtod_l+0x72>
 800727c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007280:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007284:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007288:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800728c:	e7e7      	b.n	800725e <_strtod_l+0xe6>
 800728e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007404 <_strtod_l+0x28c>
 8007292:	e7e4      	b.n	800725e <_strtod_l+0xe6>
 8007294:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007298:	f04f 38ff 	mov.w	r8, #4294967295
 800729c:	e7df      	b.n	800725e <_strtod_l+0xe6>
 800729e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	9219      	str	r2, [sp, #100]	; 0x64
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b30      	cmp	r3, #48	; 0x30
 80072a8:	d0f9      	beq.n	800729e <_strtod_l+0x126>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d09d      	beq.n	80071ea <_strtod_l+0x72>
 80072ae:	2301      	movs	r3, #1
 80072b0:	f04f 0a00 	mov.w	sl, #0
 80072b4:	220a      	movs	r2, #10
 80072b6:	46d3      	mov	fp, sl
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80072c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80072c4:	7806      	ldrb	r6, [r0, #0]
 80072c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072ca:	b2d9      	uxtb	r1, r3
 80072cc:	2909      	cmp	r1, #9
 80072ce:	d926      	bls.n	800731e <_strtod_l+0x1a6>
 80072d0:	2201      	movs	r2, #1
 80072d2:	494d      	ldr	r1, [pc, #308]	; (8007408 <_strtod_l+0x290>)
 80072d4:	f001 fd4c 	bl	8008d70 <strncmp>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d030      	beq.n	800733e <_strtod_l+0x1c6>
 80072dc:	2000      	movs	r0, #0
 80072de:	4632      	mov	r2, r6
 80072e0:	4603      	mov	r3, r0
 80072e2:	465e      	mov	r6, fp
 80072e4:	9008      	str	r0, [sp, #32]
 80072e6:	2a65      	cmp	r2, #101	; 0x65
 80072e8:	d001      	beq.n	80072ee <_strtod_l+0x176>
 80072ea:	2a45      	cmp	r2, #69	; 0x45
 80072ec:	d113      	bne.n	8007316 <_strtod_l+0x19e>
 80072ee:	b91e      	cbnz	r6, 80072f8 <_strtod_l+0x180>
 80072f0:	9a05      	ldr	r2, [sp, #20]
 80072f2:	4302      	orrs	r2, r0
 80072f4:	d094      	beq.n	8007220 <_strtod_l+0xa8>
 80072f6:	2600      	movs	r6, #0
 80072f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80072fa:	1c6a      	adds	r2, r5, #1
 80072fc:	9219      	str	r2, [sp, #100]	; 0x64
 80072fe:	786a      	ldrb	r2, [r5, #1]
 8007300:	2a2b      	cmp	r2, #43	; 0x2b
 8007302:	d074      	beq.n	80073ee <_strtod_l+0x276>
 8007304:	2a2d      	cmp	r2, #45	; 0x2d
 8007306:	d078      	beq.n	80073fa <_strtod_l+0x282>
 8007308:	f04f 0c00 	mov.w	ip, #0
 800730c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007310:	2909      	cmp	r1, #9
 8007312:	d97f      	bls.n	8007414 <_strtod_l+0x29c>
 8007314:	9519      	str	r5, [sp, #100]	; 0x64
 8007316:	2700      	movs	r7, #0
 8007318:	e09e      	b.n	8007458 <_strtod_l+0x2e0>
 800731a:	2300      	movs	r3, #0
 800731c:	e7c8      	b.n	80072b0 <_strtod_l+0x138>
 800731e:	f1bb 0f08 	cmp.w	fp, #8
 8007322:	bfd8      	it	le
 8007324:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007326:	f100 0001 	add.w	r0, r0, #1
 800732a:	bfd6      	itet	le
 800732c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007330:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007334:	930a      	strle	r3, [sp, #40]	; 0x28
 8007336:	f10b 0b01 	add.w	fp, fp, #1
 800733a:	9019      	str	r0, [sp, #100]	; 0x64
 800733c:	e7c1      	b.n	80072c2 <_strtod_l+0x14a>
 800733e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	9219      	str	r2, [sp, #100]	; 0x64
 8007344:	785a      	ldrb	r2, [r3, #1]
 8007346:	f1bb 0f00 	cmp.w	fp, #0
 800734a:	d037      	beq.n	80073bc <_strtod_l+0x244>
 800734c:	465e      	mov	r6, fp
 800734e:	9008      	str	r0, [sp, #32]
 8007350:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007354:	2b09      	cmp	r3, #9
 8007356:	d912      	bls.n	800737e <_strtod_l+0x206>
 8007358:	2301      	movs	r3, #1
 800735a:	e7c4      	b.n	80072e6 <_strtod_l+0x16e>
 800735c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800735e:	3001      	adds	r0, #1
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	9219      	str	r2, [sp, #100]	; 0x64
 8007364:	785a      	ldrb	r2, [r3, #1]
 8007366:	2a30      	cmp	r2, #48	; 0x30
 8007368:	d0f8      	beq.n	800735c <_strtod_l+0x1e4>
 800736a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800736e:	2b08      	cmp	r3, #8
 8007370:	f200 84e4 	bhi.w	8007d3c <_strtod_l+0xbc4>
 8007374:	9008      	str	r0, [sp, #32]
 8007376:	2000      	movs	r0, #0
 8007378:	4606      	mov	r6, r0
 800737a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800737c:	930b      	str	r3, [sp, #44]	; 0x2c
 800737e:	3a30      	subs	r2, #48	; 0x30
 8007380:	f100 0301 	add.w	r3, r0, #1
 8007384:	d014      	beq.n	80073b0 <_strtod_l+0x238>
 8007386:	9908      	ldr	r1, [sp, #32]
 8007388:	eb00 0c06 	add.w	ip, r0, r6
 800738c:	4419      	add	r1, r3
 800738e:	9108      	str	r1, [sp, #32]
 8007390:	4633      	mov	r3, r6
 8007392:	210a      	movs	r1, #10
 8007394:	4563      	cmp	r3, ip
 8007396:	d113      	bne.n	80073c0 <_strtod_l+0x248>
 8007398:	1833      	adds	r3, r6, r0
 800739a:	2b08      	cmp	r3, #8
 800739c:	f106 0601 	add.w	r6, r6, #1
 80073a0:	4406      	add	r6, r0
 80073a2:	dc1a      	bgt.n	80073da <_strtod_l+0x262>
 80073a4:	230a      	movs	r3, #10
 80073a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073a8:	fb03 2301 	mla	r3, r3, r1, r2
 80073ac:	930a      	str	r3, [sp, #40]	; 0x28
 80073ae:	2300      	movs	r3, #0
 80073b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073b2:	4618      	mov	r0, r3
 80073b4:	1c51      	adds	r1, r2, #1
 80073b6:	9119      	str	r1, [sp, #100]	; 0x64
 80073b8:	7852      	ldrb	r2, [r2, #1]
 80073ba:	e7c9      	b.n	8007350 <_strtod_l+0x1d8>
 80073bc:	4658      	mov	r0, fp
 80073be:	e7d2      	b.n	8007366 <_strtod_l+0x1ee>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	f103 0301 	add.w	r3, r3, #1
 80073c6:	dc03      	bgt.n	80073d0 <_strtod_l+0x258>
 80073c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80073ca:	434f      	muls	r7, r1
 80073cc:	970a      	str	r7, [sp, #40]	; 0x28
 80073ce:	e7e1      	b.n	8007394 <_strtod_l+0x21c>
 80073d0:	2b10      	cmp	r3, #16
 80073d2:	bfd8      	it	le
 80073d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80073d8:	e7dc      	b.n	8007394 <_strtod_l+0x21c>
 80073da:	2e10      	cmp	r6, #16
 80073dc:	bfdc      	itt	le
 80073de:	230a      	movle	r3, #10
 80073e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073e4:	e7e3      	b.n	80073ae <_strtod_l+0x236>
 80073e6:	2300      	movs	r3, #0
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	2301      	movs	r3, #1
 80073ec:	e780      	b.n	80072f0 <_strtod_l+0x178>
 80073ee:	f04f 0c00 	mov.w	ip, #0
 80073f2:	1caa      	adds	r2, r5, #2
 80073f4:	9219      	str	r2, [sp, #100]	; 0x64
 80073f6:	78aa      	ldrb	r2, [r5, #2]
 80073f8:	e788      	b.n	800730c <_strtod_l+0x194>
 80073fa:	f04f 0c01 	mov.w	ip, #1
 80073fe:	e7f8      	b.n	80073f2 <_strtod_l+0x27a>
 8007400:	0800b65c 	.word	0x0800b65c
 8007404:	7ff00000 	.word	0x7ff00000
 8007408:	0800b65a 	.word	0x0800b65a
 800740c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800740e:	1c51      	adds	r1, r2, #1
 8007410:	9119      	str	r1, [sp, #100]	; 0x64
 8007412:	7852      	ldrb	r2, [r2, #1]
 8007414:	2a30      	cmp	r2, #48	; 0x30
 8007416:	d0f9      	beq.n	800740c <_strtod_l+0x294>
 8007418:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800741c:	2908      	cmp	r1, #8
 800741e:	f63f af7a 	bhi.w	8007316 <_strtod_l+0x19e>
 8007422:	3a30      	subs	r2, #48	; 0x30
 8007424:	9209      	str	r2, [sp, #36]	; 0x24
 8007426:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007428:	920c      	str	r2, [sp, #48]	; 0x30
 800742a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800742c:	1c57      	adds	r7, r2, #1
 800742e:	9719      	str	r7, [sp, #100]	; 0x64
 8007430:	7852      	ldrb	r2, [r2, #1]
 8007432:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007436:	f1be 0f09 	cmp.w	lr, #9
 800743a:	d938      	bls.n	80074ae <_strtod_l+0x336>
 800743c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800743e:	1a7f      	subs	r7, r7, r1
 8007440:	2f08      	cmp	r7, #8
 8007442:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007446:	dc03      	bgt.n	8007450 <_strtod_l+0x2d8>
 8007448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800744a:	428f      	cmp	r7, r1
 800744c:	bfa8      	it	ge
 800744e:	460f      	movge	r7, r1
 8007450:	f1bc 0f00 	cmp.w	ip, #0
 8007454:	d000      	beq.n	8007458 <_strtod_l+0x2e0>
 8007456:	427f      	negs	r7, r7
 8007458:	2e00      	cmp	r6, #0
 800745a:	d14f      	bne.n	80074fc <_strtod_l+0x384>
 800745c:	9905      	ldr	r1, [sp, #20]
 800745e:	4301      	orrs	r1, r0
 8007460:	f47f aec3 	bne.w	80071ea <_strtod_l+0x72>
 8007464:	2b00      	cmp	r3, #0
 8007466:	f47f aedb 	bne.w	8007220 <_strtod_l+0xa8>
 800746a:	2a69      	cmp	r2, #105	; 0x69
 800746c:	d029      	beq.n	80074c2 <_strtod_l+0x34a>
 800746e:	dc26      	bgt.n	80074be <_strtod_l+0x346>
 8007470:	2a49      	cmp	r2, #73	; 0x49
 8007472:	d026      	beq.n	80074c2 <_strtod_l+0x34a>
 8007474:	2a4e      	cmp	r2, #78	; 0x4e
 8007476:	f47f aed3 	bne.w	8007220 <_strtod_l+0xa8>
 800747a:	499a      	ldr	r1, [pc, #616]	; (80076e4 <_strtod_l+0x56c>)
 800747c:	a819      	add	r0, sp, #100	; 0x64
 800747e:	f002 ff45 	bl	800a30c <__match>
 8007482:	2800      	cmp	r0, #0
 8007484:	f43f aecc 	beq.w	8007220 <_strtod_l+0xa8>
 8007488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b28      	cmp	r3, #40	; 0x28
 800748e:	d12f      	bne.n	80074f0 <_strtod_l+0x378>
 8007490:	4995      	ldr	r1, [pc, #596]	; (80076e8 <_strtod_l+0x570>)
 8007492:	aa1c      	add	r2, sp, #112	; 0x70
 8007494:	a819      	add	r0, sp, #100	; 0x64
 8007496:	f002 ff4d 	bl	800a334 <__hexnan>
 800749a:	2805      	cmp	r0, #5
 800749c:	d128      	bne.n	80074f0 <_strtod_l+0x378>
 800749e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80074a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80074a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80074ac:	e69d      	b.n	80071ea <_strtod_l+0x72>
 80074ae:	210a      	movs	r1, #10
 80074b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074b2:	fb01 2107 	mla	r1, r1, r7, r2
 80074b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80074ba:	9209      	str	r2, [sp, #36]	; 0x24
 80074bc:	e7b5      	b.n	800742a <_strtod_l+0x2b2>
 80074be:	2a6e      	cmp	r2, #110	; 0x6e
 80074c0:	e7d9      	b.n	8007476 <_strtod_l+0x2fe>
 80074c2:	498a      	ldr	r1, [pc, #552]	; (80076ec <_strtod_l+0x574>)
 80074c4:	a819      	add	r0, sp, #100	; 0x64
 80074c6:	f002 ff21 	bl	800a30c <__match>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f43f aea8 	beq.w	8007220 <_strtod_l+0xa8>
 80074d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074d2:	4987      	ldr	r1, [pc, #540]	; (80076f0 <_strtod_l+0x578>)
 80074d4:	3b01      	subs	r3, #1
 80074d6:	a819      	add	r0, sp, #100	; 0x64
 80074d8:	9319      	str	r3, [sp, #100]	; 0x64
 80074da:	f002 ff17 	bl	800a30c <__match>
 80074de:	b910      	cbnz	r0, 80074e6 <_strtod_l+0x36e>
 80074e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074e2:	3301      	adds	r3, #1
 80074e4:	9319      	str	r3, [sp, #100]	; 0x64
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80076f4 <_strtod_l+0x57c>
 80074ee:	e67c      	b.n	80071ea <_strtod_l+0x72>
 80074f0:	4881      	ldr	r0, [pc, #516]	; (80076f8 <_strtod_l+0x580>)
 80074f2:	f001 fd81 	bl	8008ff8 <nan>
 80074f6:	4680      	mov	r8, r0
 80074f8:	4689      	mov	r9, r1
 80074fa:	e676      	b.n	80071ea <_strtod_l+0x72>
 80074fc:	9b08      	ldr	r3, [sp, #32]
 80074fe:	f1bb 0f00 	cmp.w	fp, #0
 8007502:	bf08      	it	eq
 8007504:	46b3      	moveq	fp, r6
 8007506:	1afb      	subs	r3, r7, r3
 8007508:	2e10      	cmp	r6, #16
 800750a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800750c:	4635      	mov	r5, r6
 800750e:	9309      	str	r3, [sp, #36]	; 0x24
 8007510:	bfa8      	it	ge
 8007512:	2510      	movge	r5, #16
 8007514:	f7f8 ff70 	bl	80003f8 <__aeabi_ui2d>
 8007518:	2e09      	cmp	r6, #9
 800751a:	4680      	mov	r8, r0
 800751c:	4689      	mov	r9, r1
 800751e:	dd13      	ble.n	8007548 <_strtod_l+0x3d0>
 8007520:	4b76      	ldr	r3, [pc, #472]	; (80076fc <_strtod_l+0x584>)
 8007522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007526:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800752a:	f7f8 ffdf 	bl	80004ec <__aeabi_dmul>
 800752e:	4680      	mov	r8, r0
 8007530:	4650      	mov	r0, sl
 8007532:	4689      	mov	r9, r1
 8007534:	f7f8 ff60 	bl	80003f8 <__aeabi_ui2d>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f8 fe1e 	bl	8000180 <__adddf3>
 8007544:	4680      	mov	r8, r0
 8007546:	4689      	mov	r9, r1
 8007548:	2e0f      	cmp	r6, #15
 800754a:	dc36      	bgt.n	80075ba <_strtod_l+0x442>
 800754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	f43f ae4b 	beq.w	80071ea <_strtod_l+0x72>
 8007554:	dd22      	ble.n	800759c <_strtod_l+0x424>
 8007556:	2b16      	cmp	r3, #22
 8007558:	dc09      	bgt.n	800756e <_strtod_l+0x3f6>
 800755a:	4968      	ldr	r1, [pc, #416]	; (80076fc <_strtod_l+0x584>)
 800755c:	4642      	mov	r2, r8
 800755e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007562:	464b      	mov	r3, r9
 8007564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007568:	f7f8 ffc0 	bl	80004ec <__aeabi_dmul>
 800756c:	e7c3      	b.n	80074f6 <_strtod_l+0x37e>
 800756e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007570:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007574:	4293      	cmp	r3, r2
 8007576:	db20      	blt.n	80075ba <_strtod_l+0x442>
 8007578:	4c60      	ldr	r4, [pc, #384]	; (80076fc <_strtod_l+0x584>)
 800757a:	f1c6 060f 	rsb	r6, r6, #15
 800757e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007582:	4642      	mov	r2, r8
 8007584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007588:	464b      	mov	r3, r9
 800758a:	f7f8 ffaf 	bl	80004ec <__aeabi_dmul>
 800758e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007590:	1b9e      	subs	r6, r3, r6
 8007592:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007596:	e9d4 2300 	ldrd	r2, r3, [r4]
 800759a:	e7e5      	b.n	8007568 <_strtod_l+0x3f0>
 800759c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759e:	3316      	adds	r3, #22
 80075a0:	db0b      	blt.n	80075ba <_strtod_l+0x442>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	4640      	mov	r0, r8
 80075a6:	1bdf      	subs	r7, r3, r7
 80075a8:	4b54      	ldr	r3, [pc, #336]	; (80076fc <_strtod_l+0x584>)
 80075aa:	4649      	mov	r1, r9
 80075ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80075b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b4:	f7f9 f8c4 	bl	8000740 <__aeabi_ddiv>
 80075b8:	e79d      	b.n	80074f6 <_strtod_l+0x37e>
 80075ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075bc:	1b75      	subs	r5, r6, r5
 80075be:	441d      	add	r5, r3
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	dd70      	ble.n	80076a6 <_strtod_l+0x52e>
 80075c4:	f015 030f 	ands.w	r3, r5, #15
 80075c8:	d00a      	beq.n	80075e0 <_strtod_l+0x468>
 80075ca:	494c      	ldr	r1, [pc, #304]	; (80076fc <_strtod_l+0x584>)
 80075cc:	4642      	mov	r2, r8
 80075ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d6:	464b      	mov	r3, r9
 80075d8:	f7f8 ff88 	bl	80004ec <__aeabi_dmul>
 80075dc:	4680      	mov	r8, r0
 80075de:	4689      	mov	r9, r1
 80075e0:	f035 050f 	bics.w	r5, r5, #15
 80075e4:	d04d      	beq.n	8007682 <_strtod_l+0x50a>
 80075e6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075ea:	dd22      	ble.n	8007632 <_strtod_l+0x4ba>
 80075ec:	2600      	movs	r6, #0
 80075ee:	46b3      	mov	fp, r6
 80075f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80075f2:	9608      	str	r6, [sp, #32]
 80075f4:	2322      	movs	r3, #34	; 0x22
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80076f4 <_strtod_l+0x57c>
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007602:	2b00      	cmp	r3, #0
 8007604:	f43f adf1 	beq.w	80071ea <_strtod_l+0x72>
 8007608:	4620      	mov	r0, r4
 800760a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800760c:	f002 ff80 	bl	800a510 <_Bfree>
 8007610:	4620      	mov	r0, r4
 8007612:	9908      	ldr	r1, [sp, #32]
 8007614:	f002 ff7c 	bl	800a510 <_Bfree>
 8007618:	4659      	mov	r1, fp
 800761a:	4620      	mov	r0, r4
 800761c:	f002 ff78 	bl	800a510 <_Bfree>
 8007620:	4620      	mov	r0, r4
 8007622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007624:	f002 ff74 	bl	800a510 <_Bfree>
 8007628:	4631      	mov	r1, r6
 800762a:	4620      	mov	r0, r4
 800762c:	f002 ff70 	bl	800a510 <_Bfree>
 8007630:	e5db      	b.n	80071ea <_strtod_l+0x72>
 8007632:	4b33      	ldr	r3, [pc, #204]	; (8007700 <_strtod_l+0x588>)
 8007634:	4640      	mov	r0, r8
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	2300      	movs	r3, #0
 800763a:	4649      	mov	r1, r9
 800763c:	469a      	mov	sl, r3
 800763e:	112d      	asrs	r5, r5, #4
 8007640:	2d01      	cmp	r5, #1
 8007642:	dc21      	bgt.n	8007688 <_strtod_l+0x510>
 8007644:	b10b      	cbz	r3, 800764a <_strtod_l+0x4d2>
 8007646:	4680      	mov	r8, r0
 8007648:	4689      	mov	r9, r1
 800764a:	492d      	ldr	r1, [pc, #180]	; (8007700 <_strtod_l+0x588>)
 800764c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007650:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007654:	4642      	mov	r2, r8
 8007656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800765a:	464b      	mov	r3, r9
 800765c:	f7f8 ff46 	bl	80004ec <__aeabi_dmul>
 8007660:	4b24      	ldr	r3, [pc, #144]	; (80076f4 <_strtod_l+0x57c>)
 8007662:	460a      	mov	r2, r1
 8007664:	400b      	ands	r3, r1
 8007666:	4927      	ldr	r1, [pc, #156]	; (8007704 <_strtod_l+0x58c>)
 8007668:	4680      	mov	r8, r0
 800766a:	428b      	cmp	r3, r1
 800766c:	d8be      	bhi.n	80075ec <_strtod_l+0x474>
 800766e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007672:	428b      	cmp	r3, r1
 8007674:	bf86      	itte	hi
 8007676:	f04f 38ff 	movhi.w	r8, #4294967295
 800767a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007708 <_strtod_l+0x590>
 800767e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007682:	2300      	movs	r3, #0
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	e07b      	b.n	8007780 <_strtod_l+0x608>
 8007688:	07ea      	lsls	r2, r5, #31
 800768a:	d505      	bpl.n	8007698 <_strtod_l+0x520>
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f8 ff2b 	bl	80004ec <__aeabi_dmul>
 8007696:	2301      	movs	r3, #1
 8007698:	9a05      	ldr	r2, [sp, #20]
 800769a:	f10a 0a01 	add.w	sl, sl, #1
 800769e:	3208      	adds	r2, #8
 80076a0:	106d      	asrs	r5, r5, #1
 80076a2:	9205      	str	r2, [sp, #20]
 80076a4:	e7cc      	b.n	8007640 <_strtod_l+0x4c8>
 80076a6:	d0ec      	beq.n	8007682 <_strtod_l+0x50a>
 80076a8:	426d      	negs	r5, r5
 80076aa:	f015 020f 	ands.w	r2, r5, #15
 80076ae:	d00a      	beq.n	80076c6 <_strtod_l+0x54e>
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <_strtod_l+0x584>)
 80076b2:	4640      	mov	r0, r8
 80076b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b8:	4649      	mov	r1, r9
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f7f9 f83f 	bl	8000740 <__aeabi_ddiv>
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	112d      	asrs	r5, r5, #4
 80076c8:	d0db      	beq.n	8007682 <_strtod_l+0x50a>
 80076ca:	2d1f      	cmp	r5, #31
 80076cc:	dd1e      	ble.n	800770c <_strtod_l+0x594>
 80076ce:	2600      	movs	r6, #0
 80076d0:	46b3      	mov	fp, r6
 80076d2:	960b      	str	r6, [sp, #44]	; 0x2c
 80076d4:	9608      	str	r6, [sp, #32]
 80076d6:	2322      	movs	r3, #34	; 0x22
 80076d8:	f04f 0800 	mov.w	r8, #0
 80076dc:	f04f 0900 	mov.w	r9, #0
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	e78d      	b.n	8007600 <_strtod_l+0x488>
 80076e4:	0800b7be 	.word	0x0800b7be
 80076e8:	0800b670 	.word	0x0800b670
 80076ec:	0800b7b6 	.word	0x0800b7b6
 80076f0:	0800b89d 	.word	0x0800b89d
 80076f4:	7ff00000 	.word	0x7ff00000
 80076f8:	0800b899 	.word	0x0800b899
 80076fc:	0800b9f8 	.word	0x0800b9f8
 8007700:	0800b9d0 	.word	0x0800b9d0
 8007704:	7ca00000 	.word	0x7ca00000
 8007708:	7fefffff 	.word	0x7fefffff
 800770c:	f015 0310 	ands.w	r3, r5, #16
 8007710:	bf18      	it	ne
 8007712:	236a      	movne	r3, #106	; 0x6a
 8007714:	4640      	mov	r0, r8
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	4649      	mov	r1, r9
 800771a:	2300      	movs	r3, #0
 800771c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80079e8 <_strtod_l+0x870>
 8007720:	07ea      	lsls	r2, r5, #31
 8007722:	d504      	bpl.n	800772e <_strtod_l+0x5b6>
 8007724:	e9da 2300 	ldrd	r2, r3, [sl]
 8007728:	f7f8 fee0 	bl	80004ec <__aeabi_dmul>
 800772c:	2301      	movs	r3, #1
 800772e:	106d      	asrs	r5, r5, #1
 8007730:	f10a 0a08 	add.w	sl, sl, #8
 8007734:	d1f4      	bne.n	8007720 <_strtod_l+0x5a8>
 8007736:	b10b      	cbz	r3, 800773c <_strtod_l+0x5c4>
 8007738:	4680      	mov	r8, r0
 800773a:	4689      	mov	r9, r1
 800773c:	9b05      	ldr	r3, [sp, #20]
 800773e:	b1bb      	cbz	r3, 8007770 <_strtod_l+0x5f8>
 8007740:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007744:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007748:	2b00      	cmp	r3, #0
 800774a:	4649      	mov	r1, r9
 800774c:	dd10      	ble.n	8007770 <_strtod_l+0x5f8>
 800774e:	2b1f      	cmp	r3, #31
 8007750:	f340 8128 	ble.w	80079a4 <_strtod_l+0x82c>
 8007754:	2b34      	cmp	r3, #52	; 0x34
 8007756:	bfd8      	it	le
 8007758:	f04f 33ff 	movle.w	r3, #4294967295
 800775c:	f04f 0800 	mov.w	r8, #0
 8007760:	bfcf      	iteee	gt
 8007762:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007766:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800776a:	4093      	lslle	r3, r2
 800776c:	ea03 0901 	andle.w	r9, r3, r1
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	4640      	mov	r0, r8
 8007776:	4649      	mov	r1, r9
 8007778:	f7f9 f920 	bl	80009bc <__aeabi_dcmpeq>
 800777c:	2800      	cmp	r0, #0
 800777e:	d1a6      	bne.n	80076ce <_strtod_l+0x556>
 8007780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007782:	465a      	mov	r2, fp
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	4620      	mov	r0, r4
 8007788:	4633      	mov	r3, r6
 800778a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800778c:	f002 ff28 	bl	800a5e0 <__s2b>
 8007790:	900b      	str	r0, [sp, #44]	; 0x2c
 8007792:	2800      	cmp	r0, #0
 8007794:	f43f af2a 	beq.w	80075ec <_strtod_l+0x474>
 8007798:	2600      	movs	r6, #0
 800779a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779c:	9b08      	ldr	r3, [sp, #32]
 800779e:	2a00      	cmp	r2, #0
 80077a0:	eba3 0307 	sub.w	r3, r3, r7
 80077a4:	bfa8      	it	ge
 80077a6:	2300      	movge	r3, #0
 80077a8:	46b3      	mov	fp, r6
 80077aa:	9312      	str	r3, [sp, #72]	; 0x48
 80077ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077b0:	9316      	str	r3, [sp, #88]	; 0x58
 80077b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b4:	4620      	mov	r0, r4
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	f002 fe6a 	bl	800a490 <_Balloc>
 80077bc:	9008      	str	r0, [sp, #32]
 80077be:	2800      	cmp	r0, #0
 80077c0:	f43f af18 	beq.w	80075f4 <_strtod_l+0x47c>
 80077c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c6:	300c      	adds	r0, #12
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	f103 010c 	add.w	r1, r3, #12
 80077ce:	3202      	adds	r2, #2
 80077d0:	0092      	lsls	r2, r2, #2
 80077d2:	f001 fc02 	bl	8008fda <memcpy>
 80077d6:	ab1c      	add	r3, sp, #112	; 0x70
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	ab1b      	add	r3, sp, #108	; 0x6c
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	4620      	mov	r0, r4
 80077e4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80077e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80077ec:	f003 fa24 	bl	800ac38 <__d2b>
 80077f0:	901a      	str	r0, [sp, #104]	; 0x68
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f aefe 	beq.w	80075f4 <_strtod_l+0x47c>
 80077f8:	2101      	movs	r1, #1
 80077fa:	4620      	mov	r0, r4
 80077fc:	f002 ff88 	bl	800a710 <__i2b>
 8007800:	4683      	mov	fp, r0
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f aef6 	beq.w	80075f4 <_strtod_l+0x47c>
 8007808:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800780a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800780c:	2f00      	cmp	r7, #0
 800780e:	bfab      	itete	ge
 8007810:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007812:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007814:	eb07 0a03 	addge.w	sl, r7, r3
 8007818:	1bdd      	sublt	r5, r3, r7
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	bfa8      	it	ge
 800781e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007820:	eba7 0703 	sub.w	r7, r7, r3
 8007824:	4417      	add	r7, r2
 8007826:	4b71      	ldr	r3, [pc, #452]	; (80079ec <_strtod_l+0x874>)
 8007828:	f107 37ff 	add.w	r7, r7, #4294967295
 800782c:	bfb8      	it	lt
 800782e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007832:	429f      	cmp	r7, r3
 8007834:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007838:	f280 80c7 	bge.w	80079ca <_strtod_l+0x852>
 800783c:	1bdb      	subs	r3, r3, r7
 800783e:	2b1f      	cmp	r3, #31
 8007840:	f04f 0101 	mov.w	r1, #1
 8007844:	eba2 0203 	sub.w	r2, r2, r3
 8007848:	f300 80b3 	bgt.w	80079b2 <_strtod_l+0x83a>
 800784c:	fa01 f303 	lsl.w	r3, r1, r3
 8007850:	9313      	str	r3, [sp, #76]	; 0x4c
 8007852:	2300      	movs	r3, #0
 8007854:	9310      	str	r3, [sp, #64]	; 0x40
 8007856:	eb0a 0702 	add.w	r7, sl, r2
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	45ba      	cmp	sl, r7
 800785e:	4415      	add	r5, r2
 8007860:	441d      	add	r5, r3
 8007862:	4653      	mov	r3, sl
 8007864:	bfa8      	it	ge
 8007866:	463b      	movge	r3, r7
 8007868:	42ab      	cmp	r3, r5
 800786a:	bfa8      	it	ge
 800786c:	462b      	movge	r3, r5
 800786e:	2b00      	cmp	r3, #0
 8007870:	bfc2      	ittt	gt
 8007872:	1aff      	subgt	r7, r7, r3
 8007874:	1aed      	subgt	r5, r5, r3
 8007876:	ebaa 0a03 	subgt.w	sl, sl, r3
 800787a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800787c:	2b00      	cmp	r3, #0
 800787e:	dd17      	ble.n	80078b0 <_strtod_l+0x738>
 8007880:	4659      	mov	r1, fp
 8007882:	461a      	mov	r2, r3
 8007884:	4620      	mov	r0, r4
 8007886:	f003 f801 	bl	800a88c <__pow5mult>
 800788a:	4683      	mov	fp, r0
 800788c:	2800      	cmp	r0, #0
 800788e:	f43f aeb1 	beq.w	80075f4 <_strtod_l+0x47c>
 8007892:	4601      	mov	r1, r0
 8007894:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007896:	4620      	mov	r0, r4
 8007898:	f002 ff50 	bl	800a73c <__multiply>
 800789c:	900a      	str	r0, [sp, #40]	; 0x28
 800789e:	2800      	cmp	r0, #0
 80078a0:	f43f aea8 	beq.w	80075f4 <_strtod_l+0x47c>
 80078a4:	4620      	mov	r0, r4
 80078a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078a8:	f002 fe32 	bl	800a510 <_Bfree>
 80078ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ae:	931a      	str	r3, [sp, #104]	; 0x68
 80078b0:	2f00      	cmp	r7, #0
 80078b2:	f300 808f 	bgt.w	80079d4 <_strtod_l+0x85c>
 80078b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dd08      	ble.n	80078ce <_strtod_l+0x756>
 80078bc:	4620      	mov	r0, r4
 80078be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078c0:	9908      	ldr	r1, [sp, #32]
 80078c2:	f002 ffe3 	bl	800a88c <__pow5mult>
 80078c6:	9008      	str	r0, [sp, #32]
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f43f ae93 	beq.w	80075f4 <_strtod_l+0x47c>
 80078ce:	2d00      	cmp	r5, #0
 80078d0:	dd08      	ble.n	80078e4 <_strtod_l+0x76c>
 80078d2:	462a      	mov	r2, r5
 80078d4:	4620      	mov	r0, r4
 80078d6:	9908      	ldr	r1, [sp, #32]
 80078d8:	f003 f832 	bl	800a940 <__lshift>
 80078dc:	9008      	str	r0, [sp, #32]
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f ae88 	beq.w	80075f4 <_strtod_l+0x47c>
 80078e4:	f1ba 0f00 	cmp.w	sl, #0
 80078e8:	dd08      	ble.n	80078fc <_strtod_l+0x784>
 80078ea:	4659      	mov	r1, fp
 80078ec:	4652      	mov	r2, sl
 80078ee:	4620      	mov	r0, r4
 80078f0:	f003 f826 	bl	800a940 <__lshift>
 80078f4:	4683      	mov	fp, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f ae7c 	beq.w	80075f4 <_strtod_l+0x47c>
 80078fc:	4620      	mov	r0, r4
 80078fe:	9a08      	ldr	r2, [sp, #32]
 8007900:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007902:	f003 f8a5 	bl	800aa50 <__mdiff>
 8007906:	4606      	mov	r6, r0
 8007908:	2800      	cmp	r0, #0
 800790a:	f43f ae73 	beq.w	80075f4 <_strtod_l+0x47c>
 800790e:	2500      	movs	r5, #0
 8007910:	68c3      	ldr	r3, [r0, #12]
 8007912:	4659      	mov	r1, fp
 8007914:	60c5      	str	r5, [r0, #12]
 8007916:	930a      	str	r3, [sp, #40]	; 0x28
 8007918:	f003 f87e 	bl	800aa18 <__mcmp>
 800791c:	42a8      	cmp	r0, r5
 800791e:	da6b      	bge.n	80079f8 <_strtod_l+0x880>
 8007920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007922:	ea53 0308 	orrs.w	r3, r3, r8
 8007926:	f040 808f 	bne.w	8007a48 <_strtod_l+0x8d0>
 800792a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800792e:	2b00      	cmp	r3, #0
 8007930:	f040 808a 	bne.w	8007a48 <_strtod_l+0x8d0>
 8007934:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007938:	0d1b      	lsrs	r3, r3, #20
 800793a:	051b      	lsls	r3, r3, #20
 800793c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007940:	f240 8082 	bls.w	8007a48 <_strtod_l+0x8d0>
 8007944:	6973      	ldr	r3, [r6, #20]
 8007946:	b913      	cbnz	r3, 800794e <_strtod_l+0x7d6>
 8007948:	6933      	ldr	r3, [r6, #16]
 800794a:	2b01      	cmp	r3, #1
 800794c:	dd7c      	ble.n	8007a48 <_strtod_l+0x8d0>
 800794e:	4631      	mov	r1, r6
 8007950:	2201      	movs	r2, #1
 8007952:	4620      	mov	r0, r4
 8007954:	f002 fff4 	bl	800a940 <__lshift>
 8007958:	4659      	mov	r1, fp
 800795a:	4606      	mov	r6, r0
 800795c:	f003 f85c 	bl	800aa18 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	dd71      	ble.n	8007a48 <_strtod_l+0x8d0>
 8007964:	9905      	ldr	r1, [sp, #20]
 8007966:	464b      	mov	r3, r9
 8007968:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <_strtod_l+0x878>)
 800796a:	2900      	cmp	r1, #0
 800796c:	f000 808d 	beq.w	8007a8a <_strtod_l+0x912>
 8007970:	ea02 0109 	and.w	r1, r2, r9
 8007974:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007978:	f300 8087 	bgt.w	8007a8a <_strtod_l+0x912>
 800797c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007980:	f77f aea9 	ble.w	80076d6 <_strtod_l+0x55e>
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <_strtod_l+0x87c>)
 800798a:	2200      	movs	r2, #0
 800798c:	f7f8 fdae 	bl	80004ec <__aeabi_dmul>
 8007990:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <_strtod_l+0x878>)
 8007992:	4680      	mov	r8, r0
 8007994:	400b      	ands	r3, r1
 8007996:	4689      	mov	r9, r1
 8007998:	2b00      	cmp	r3, #0
 800799a:	f47f ae35 	bne.w	8007608 <_strtod_l+0x490>
 800799e:	2322      	movs	r3, #34	; 0x22
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	e631      	b.n	8007608 <_strtod_l+0x490>
 80079a4:	f04f 32ff 	mov.w	r2, #4294967295
 80079a8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ac:	ea03 0808 	and.w	r8, r3, r8
 80079b0:	e6de      	b.n	8007770 <_strtod_l+0x5f8>
 80079b2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80079b6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80079ba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80079be:	37e2      	adds	r7, #226	; 0xe2
 80079c0:	fa01 f307 	lsl.w	r3, r1, r7
 80079c4:	9310      	str	r3, [sp, #64]	; 0x40
 80079c6:	9113      	str	r1, [sp, #76]	; 0x4c
 80079c8:	e745      	b.n	8007856 <_strtod_l+0x6de>
 80079ca:	2300      	movs	r3, #0
 80079cc:	9310      	str	r3, [sp, #64]	; 0x40
 80079ce:	2301      	movs	r3, #1
 80079d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80079d2:	e740      	b.n	8007856 <_strtod_l+0x6de>
 80079d4:	463a      	mov	r2, r7
 80079d6:	4620      	mov	r0, r4
 80079d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079da:	f002 ffb1 	bl	800a940 <__lshift>
 80079de:	901a      	str	r0, [sp, #104]	; 0x68
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f47f af68 	bne.w	80078b6 <_strtod_l+0x73e>
 80079e6:	e605      	b.n	80075f4 <_strtod_l+0x47c>
 80079e8:	0800b688 	.word	0x0800b688
 80079ec:	fffffc02 	.word	0xfffffc02
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	39500000 	.word	0x39500000
 80079f8:	46ca      	mov	sl, r9
 80079fa:	d165      	bne.n	8007ac8 <_strtod_l+0x950>
 80079fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a02:	b352      	cbz	r2, 8007a5a <_strtod_l+0x8e2>
 8007a04:	4a9e      	ldr	r2, [pc, #632]	; (8007c80 <_strtod_l+0xb08>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d12a      	bne.n	8007a60 <_strtod_l+0x8e8>
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	b1fb      	cbz	r3, 8007a50 <_strtod_l+0x8d8>
 8007a10:	4b9c      	ldr	r3, [pc, #624]	; (8007c84 <_strtod_l+0xb0c>)
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	ea09 0303 	and.w	r3, r9, r3
 8007a1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a1e:	d81a      	bhi.n	8007a56 <_strtod_l+0x8de>
 8007a20:	0d1b      	lsrs	r3, r3, #20
 8007a22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	4299      	cmp	r1, r3
 8007a2c:	d118      	bne.n	8007a60 <_strtod_l+0x8e8>
 8007a2e:	4b96      	ldr	r3, [pc, #600]	; (8007c88 <_strtod_l+0xb10>)
 8007a30:	459a      	cmp	sl, r3
 8007a32:	d102      	bne.n	8007a3a <_strtod_l+0x8c2>
 8007a34:	3101      	adds	r1, #1
 8007a36:	f43f addd 	beq.w	80075f4 <_strtod_l+0x47c>
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	4b91      	ldr	r3, [pc, #580]	; (8007c84 <_strtod_l+0xb0c>)
 8007a40:	ea0a 0303 	and.w	r3, sl, r3
 8007a44:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a48:	9b05      	ldr	r3, [sp, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d19a      	bne.n	8007984 <_strtod_l+0x80c>
 8007a4e:	e5db      	b.n	8007608 <_strtod_l+0x490>
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	e7e9      	b.n	8007a2a <_strtod_l+0x8b2>
 8007a56:	4613      	mov	r3, r2
 8007a58:	e7e7      	b.n	8007a2a <_strtod_l+0x8b2>
 8007a5a:	ea53 0308 	orrs.w	r3, r3, r8
 8007a5e:	d081      	beq.n	8007964 <_strtod_l+0x7ec>
 8007a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a62:	b1e3      	cbz	r3, 8007a9e <_strtod_l+0x926>
 8007a64:	ea13 0f0a 	tst.w	r3, sl
 8007a68:	d0ee      	beq.n	8007a48 <_strtod_l+0x8d0>
 8007a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	9a05      	ldr	r2, [sp, #20]
 8007a72:	b1c3      	cbz	r3, 8007aa6 <_strtod_l+0x92e>
 8007a74:	f7ff fb5c 	bl	8007130 <sulp>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a80:	f7f8 fb7e 	bl	8000180 <__adddf3>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	e7de      	b.n	8007a48 <_strtod_l+0x8d0>
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a94:	f04f 38ff 	mov.w	r8, #4294967295
 8007a98:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a9c:	e7d4      	b.n	8007a48 <_strtod_l+0x8d0>
 8007a9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aa0:	ea13 0f08 	tst.w	r3, r8
 8007aa4:	e7e0      	b.n	8007a68 <_strtod_l+0x8f0>
 8007aa6:	f7ff fb43 	bl	8007130 <sulp>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ab2:	f7f8 fb63 	bl	800017c <__aeabi_dsub>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4680      	mov	r8, r0
 8007abc:	4689      	mov	r9, r1
 8007abe:	f7f8 ff7d 	bl	80009bc <__aeabi_dcmpeq>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d0c0      	beq.n	8007a48 <_strtod_l+0x8d0>
 8007ac6:	e606      	b.n	80076d6 <_strtod_l+0x55e>
 8007ac8:	4659      	mov	r1, fp
 8007aca:	4630      	mov	r0, r6
 8007acc:	f003 f90a 	bl	800ace4 <__ratio>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ade:	f7f8 ff81 	bl	80009e4 <__aeabi_dcmple>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d06f      	beq.n	8007bc6 <_strtod_l+0xa4e>
 8007ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d17c      	bne.n	8007be6 <_strtod_l+0xa6e>
 8007aec:	f1b8 0f00 	cmp.w	r8, #0
 8007af0:	d159      	bne.n	8007ba6 <_strtod_l+0xa2e>
 8007af2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d17b      	bne.n	8007bf2 <_strtod_l+0xa7a>
 8007afa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007afe:	2200      	movs	r2, #0
 8007b00:	4b62      	ldr	r3, [pc, #392]	; (8007c8c <_strtod_l+0xb14>)
 8007b02:	f7f8 ff65 	bl	80009d0 <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d15a      	bne.n	8007bc0 <_strtod_l+0xa48>
 8007b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <_strtod_l+0xb18>)
 8007b12:	f7f8 fceb 	bl	80004ec <__aeabi_dmul>
 8007b16:	4605      	mov	r5, r0
 8007b18:	460f      	mov	r7, r1
 8007b1a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b1e:	9506      	str	r5, [sp, #24]
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b2a:	4b56      	ldr	r3, [pc, #344]	; (8007c84 <_strtod_l+0xb0c>)
 8007b2c:	4a55      	ldr	r2, [pc, #340]	; (8007c84 <_strtod_l+0xb0c>)
 8007b2e:	ea0a 0303 	and.w	r3, sl, r3
 8007b32:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b34:	4b57      	ldr	r3, [pc, #348]	; (8007c94 <_strtod_l+0xb1c>)
 8007b36:	ea0a 0202 	and.w	r2, sl, r2
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	f040 80b0 	bne.w	8007ca0 <_strtod_l+0xb28>
 8007b40:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b44:	4640      	mov	r0, r8
 8007b46:	4649      	mov	r1, r9
 8007b48:	f003 f80e 	bl	800ab68 <__ulp>
 8007b4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b50:	f7f8 fccc 	bl	80004ec <__aeabi_dmul>
 8007b54:	4642      	mov	r2, r8
 8007b56:	464b      	mov	r3, r9
 8007b58:	f7f8 fb12 	bl	8000180 <__adddf3>
 8007b5c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007c84 <_strtod_l+0xb0c>
 8007b60:	4a4d      	ldr	r2, [pc, #308]	; (8007c98 <_strtod_l+0xb20>)
 8007b62:	ea01 0a0a 	and.w	sl, r1, sl
 8007b66:	4592      	cmp	sl, r2
 8007b68:	4680      	mov	r8, r0
 8007b6a:	d948      	bls.n	8007bfe <_strtod_l+0xa86>
 8007b6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b6e:	4b46      	ldr	r3, [pc, #280]	; (8007c88 <_strtod_l+0xb10>)
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d103      	bne.n	8007b7c <_strtod_l+0xa04>
 8007b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b76:	3301      	adds	r3, #1
 8007b78:	f43f ad3c 	beq.w	80075f4 <_strtod_l+0x47c>
 8007b7c:	f04f 38ff 	mov.w	r8, #4294967295
 8007b80:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007c88 <_strtod_l+0xb10>
 8007b84:	4620      	mov	r0, r4
 8007b86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b88:	f002 fcc2 	bl	800a510 <_Bfree>
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	9908      	ldr	r1, [sp, #32]
 8007b90:	f002 fcbe 	bl	800a510 <_Bfree>
 8007b94:	4659      	mov	r1, fp
 8007b96:	4620      	mov	r0, r4
 8007b98:	f002 fcba 	bl	800a510 <_Bfree>
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f002 fcb6 	bl	800a510 <_Bfree>
 8007ba4:	e605      	b.n	80077b2 <_strtod_l+0x63a>
 8007ba6:	f1b8 0f01 	cmp.w	r8, #1
 8007baa:	d103      	bne.n	8007bb4 <_strtod_l+0xa3c>
 8007bac:	f1b9 0f00 	cmp.w	r9, #0
 8007bb0:	f43f ad91 	beq.w	80076d6 <_strtod_l+0x55e>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4b39      	ldr	r3, [pc, #228]	; (8007c9c <_strtod_l+0xb24>)
 8007bb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007bba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bbe:	e016      	b.n	8007bee <_strtod_l+0xa76>
 8007bc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007bc2:	4f33      	ldr	r7, [pc, #204]	; (8007c90 <_strtod_l+0xb18>)
 8007bc4:	e7a9      	b.n	8007b1a <_strtod_l+0x9a2>
 8007bc6:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <_strtod_l+0xb18>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bce:	f7f8 fc8d 	bl	80004ec <__aeabi_dmul>
 8007bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d09e      	beq.n	8007b1a <_strtod_l+0x9a2>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007be4:	e79d      	b.n	8007b22 <_strtod_l+0x9aa>
 8007be6:	2200      	movs	r2, #0
 8007be8:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <_strtod_l+0xb14>)
 8007bea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bee:	4f27      	ldr	r7, [pc, #156]	; (8007c8c <_strtod_l+0xb14>)
 8007bf0:	e797      	b.n	8007b22 <_strtod_l+0x9aa>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <_strtod_l+0xb24>)
 8007bf6:	4645      	mov	r5, r8
 8007bf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bfc:	e7f7      	b.n	8007bee <_strtod_l+0xa76>
 8007bfe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	46ca      	mov	sl, r9
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1bc      	bne.n	8007b84 <_strtod_l+0xa0c>
 8007c0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c10:	0d1b      	lsrs	r3, r3, #20
 8007c12:	051b      	lsls	r3, r3, #20
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d1b5      	bne.n	8007b84 <_strtod_l+0xa0c>
 8007c18:	4628      	mov	r0, r5
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7f9 fa98 	bl	8001150 <__aeabi_d2lz>
 8007c20:	f7f8 fc36 	bl	8000490 <__aeabi_l2d>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4628      	mov	r0, r5
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 faa6 	bl	800017c <__aeabi_dsub>
 8007c30:	460b      	mov	r3, r1
 8007c32:	4602      	mov	r2, r0
 8007c34:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007c38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007c42:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007c46:	d06c      	beq.n	8007d22 <_strtod_l+0xbaa>
 8007c48:	a309      	add	r3, pc, #36	; (adr r3, 8007c70 <_strtod_l+0xaf8>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 febf 	bl	80009d0 <__aeabi_dcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f47f acd8 	bne.w	8007608 <_strtod_l+0x490>
 8007c58:	a307      	add	r3, pc, #28	; (adr r3, 8007c78 <_strtod_l+0xb00>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c62:	f7f8 fed3 	bl	8000a0c <__aeabi_dcmpgt>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d08c      	beq.n	8007b84 <_strtod_l+0xa0c>
 8007c6a:	e4cd      	b.n	8007608 <_strtod_l+0x490>
 8007c6c:	f3af 8000 	nop.w
 8007c70:	94a03595 	.word	0x94a03595
 8007c74:	3fdfffff 	.word	0x3fdfffff
 8007c78:	35afe535 	.word	0x35afe535
 8007c7c:	3fe00000 	.word	0x3fe00000
 8007c80:	000fffff 	.word	0x000fffff
 8007c84:	7ff00000 	.word	0x7ff00000
 8007c88:	7fefffff 	.word	0x7fefffff
 8007c8c:	3ff00000 	.word	0x3ff00000
 8007c90:	3fe00000 	.word	0x3fe00000
 8007c94:	7fe00000 	.word	0x7fe00000
 8007c98:	7c9fffff 	.word	0x7c9fffff
 8007c9c:	bff00000 	.word	0xbff00000
 8007ca0:	9b05      	ldr	r3, [sp, #20]
 8007ca2:	b333      	cbz	r3, 8007cf2 <_strtod_l+0xb7a>
 8007ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ca6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007caa:	d822      	bhi.n	8007cf2 <_strtod_l+0xb7a>
 8007cac:	a328      	add	r3, pc, #160	; (adr r3, 8007d50 <_strtod_l+0xbd8>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 fe95 	bl	80009e4 <__aeabi_dcmple>
 8007cba:	b1a0      	cbz	r0, 8007ce6 <_strtod_l+0xb6e>
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f7f8 feec 	bl	8000a9c <__aeabi_d2uiz>
 8007cc4:	2801      	cmp	r0, #1
 8007cc6:	bf38      	it	cc
 8007cc8:	2001      	movcc	r0, #1
 8007cca:	f7f8 fb95 	bl	80003f8 <__aeabi_ui2d>
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	bb03      	cbnz	r3, 8007d18 <_strtod_l+0xba0>
 8007cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cda:	9014      	str	r0, [sp, #80]	; 0x50
 8007cdc:	9315      	str	r3, [sp, #84]	; 0x54
 8007cde:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ce2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	9311      	str	r3, [sp, #68]	; 0x44
 8007cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cf6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007cfa:	f002 ff35 	bl	800ab68 <__ulp>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fbf1 	bl	80004ec <__aeabi_dmul>
 8007d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d0e:	f7f8 fa37 	bl	8000180 <__adddf3>
 8007d12:	4680      	mov	r8, r0
 8007d14:	4689      	mov	r9, r1
 8007d16:	e774      	b.n	8007c02 <_strtod_l+0xa8a>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d20:	e7dd      	b.n	8007cde <_strtod_l+0xb66>
 8007d22:	a30d      	add	r3, pc, #52	; (adr r3, 8007d58 <_strtod_l+0xbe0>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fe52 	bl	80009d0 <__aeabi_dcmplt>
 8007d2c:	e79b      	b.n	8007c66 <_strtod_l+0xaee>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	930e      	str	r3, [sp, #56]	; 0x38
 8007d32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	f7ff ba5b 	b.w	80071f2 <_strtod_l+0x7a>
 8007d3c:	2a65      	cmp	r2, #101	; 0x65
 8007d3e:	f43f ab52 	beq.w	80073e6 <_strtod_l+0x26e>
 8007d42:	2a45      	cmp	r2, #69	; 0x45
 8007d44:	f43f ab4f 	beq.w	80073e6 <_strtod_l+0x26e>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f7ff bb87 	b.w	800745c <_strtod_l+0x2e4>
 8007d4e:	bf00      	nop
 8007d50:	ffc00000 	.word	0xffc00000
 8007d54:	41dfffff 	.word	0x41dfffff
 8007d58:	94a03595 	.word	0x94a03595
 8007d5c:	3fcfffff 	.word	0x3fcfffff

08007d60 <strtod>:
 8007d60:	460a      	mov	r2, r1
 8007d62:	4601      	mov	r1, r0
 8007d64:	4802      	ldr	r0, [pc, #8]	; (8007d70 <strtod+0x10>)
 8007d66:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <strtod+0x14>)
 8007d68:	6800      	ldr	r0, [r0, #0]
 8007d6a:	f7ff ba05 	b.w	8007178 <_strtod_l>
 8007d6e:	bf00      	nop
 8007d70:	20000200 	.word	0x20000200
 8007d74:	20000048 	.word	0x20000048

08007d78 <strtof>:
 8007d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7c:	4f24      	ldr	r7, [pc, #144]	; (8007e10 <strtof+0x98>)
 8007d7e:	460a      	mov	r2, r1
 8007d80:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <strtof+0x9c>)
 8007d82:	4601      	mov	r1, r0
 8007d84:	6838      	ldr	r0, [r7, #0]
 8007d86:	f7ff f9f7 	bl	8007178 <_strtod_l>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	f7f8 fe45 	bl	8000a20 <__aeabi_dcmpun>
 8007d96:	b168      	cbz	r0, 8007db4 <strtof+0x3c>
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	481f      	ldr	r0, [pc, #124]	; (8007e18 <strtof+0xa0>)
 8007d9c:	da06      	bge.n	8007dac <strtof+0x34>
 8007d9e:	f001 f931 	bl	8009004 <nanf>
 8007da2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8007da6:	4628      	mov	r0, r5
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db0:	f001 b928 	b.w	8009004 <nanf>
 8007db4:	4621      	mov	r1, r4
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7f8 fe90 	bl	8000adc <__aeabi_d2f>
 8007dbc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	4916      	ldr	r1, [pc, #88]	; (8007e1c <strtof+0xa4>)
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f7f9 f9ad 	bl	8001124 <__aeabi_fcmpun>
 8007dca:	b9b0      	cbnz	r0, 8007dfa <strtof+0x82>
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4913      	ldr	r1, [pc, #76]	; (8007e1c <strtof+0xa4>)
 8007dd0:	f7f9 f98a 	bl	80010e8 <__aeabi_fcmple>
 8007dd4:	b988      	cbnz	r0, 8007dfa <strtof+0x82>
 8007dd6:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	4630      	mov	r0, r6
 8007de0:	4641      	mov	r1, r8
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <strtof+0xa8>)
 8007de4:	f7f8 fe1c 	bl	8000a20 <__aeabi_dcmpun>
 8007de8:	b970      	cbnz	r0, 8007e08 <strtof+0x90>
 8007dea:	f04f 32ff 	mov.w	r2, #4294967295
 8007dee:	4630      	mov	r0, r6
 8007df0:	4641      	mov	r1, r8
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <strtof+0xa8>)
 8007df4:	f7f8 fdf6 	bl	80009e4 <__aeabi_dcmple>
 8007df8:	b930      	cbnz	r0, 8007e08 <strtof+0x90>
 8007dfa:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8007dfe:	d1d2      	bne.n	8007da6 <strtof+0x2e>
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <strtof+0xac>)
 8007e02:	4023      	ands	r3, r4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0ce      	beq.n	8007da6 <strtof+0x2e>
 8007e08:	2222      	movs	r2, #34	; 0x22
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e7ca      	b.n	8007da6 <strtof+0x2e>
 8007e10:	20000200 	.word	0x20000200
 8007e14:	20000048 	.word	0x20000048
 8007e18:	0800b899 	.word	0x0800b899
 8007e1c:	7f7fffff 	.word	0x7f7fffff
 8007e20:	7fefffff 	.word	0x7fefffff
 8007e24:	7ff00000 	.word	0x7ff00000

08007e28 <_strtol_l.constprop.0>:
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2e:	4686      	mov	lr, r0
 8007e30:	4690      	mov	r8, r2
 8007e32:	d001      	beq.n	8007e38 <_strtol_l.constprop.0+0x10>
 8007e34:	2b24      	cmp	r3, #36	; 0x24
 8007e36:	d906      	bls.n	8007e46 <_strtol_l.constprop.0+0x1e>
 8007e38:	f001 f88c 	bl	8008f54 <__errno>
 8007e3c:	2316      	movs	r3, #22
 8007e3e:	6003      	str	r3, [r0, #0]
 8007e40:	2000      	movs	r0, #0
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	460d      	mov	r5, r1
 8007e48:	4835      	ldr	r0, [pc, #212]	; (8007f20 <_strtol_l.constprop.0+0xf8>)
 8007e4a:	462a      	mov	r2, r5
 8007e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e50:	5d06      	ldrb	r6, [r0, r4]
 8007e52:	f016 0608 	ands.w	r6, r6, #8
 8007e56:	d1f8      	bne.n	8007e4a <_strtol_l.constprop.0+0x22>
 8007e58:	2c2d      	cmp	r4, #45	; 0x2d
 8007e5a:	d12e      	bne.n	8007eba <_strtol_l.constprop.0+0x92>
 8007e5c:	2601      	movs	r6, #1
 8007e5e:	782c      	ldrb	r4, [r5, #0]
 8007e60:	1c95      	adds	r5, r2, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d057      	beq.n	8007f16 <_strtol_l.constprop.0+0xee>
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d109      	bne.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007e6a:	2c30      	cmp	r4, #48	; 0x30
 8007e6c:	d107      	bne.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007e6e:	782a      	ldrb	r2, [r5, #0]
 8007e70:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e74:	2a58      	cmp	r2, #88	; 0x58
 8007e76:	d149      	bne.n	8007f0c <_strtol_l.constprop.0+0xe4>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	786c      	ldrb	r4, [r5, #1]
 8007e7c:	3502      	adds	r5, #2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007e84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e88:	fbbc f9f3 	udiv	r9, ip, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007e96:	2f09      	cmp	r7, #9
 8007e98:	d814      	bhi.n	8007ec4 <_strtol_l.constprop.0+0x9c>
 8007e9a:	463c      	mov	r4, r7
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	dd20      	ble.n	8007ee2 <_strtol_l.constprop.0+0xba>
 8007ea0:	1c57      	adds	r7, r2, #1
 8007ea2:	d007      	beq.n	8007eb4 <_strtol_l.constprop.0+0x8c>
 8007ea4:	4581      	cmp	r9, r0
 8007ea6:	d319      	bcc.n	8007edc <_strtol_l.constprop.0+0xb4>
 8007ea8:	d101      	bne.n	8007eae <_strtol_l.constprop.0+0x86>
 8007eaa:	45a2      	cmp	sl, r4
 8007eac:	db16      	blt.n	8007edc <_strtol_l.constprop.0+0xb4>
 8007eae:	2201      	movs	r2, #1
 8007eb0:	fb00 4003 	mla	r0, r0, r3, r4
 8007eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eb8:	e7eb      	b.n	8007e92 <_strtol_l.constprop.0+0x6a>
 8007eba:	2c2b      	cmp	r4, #43	; 0x2b
 8007ebc:	bf04      	itt	eq
 8007ebe:	782c      	ldrbeq	r4, [r5, #0]
 8007ec0:	1c95      	addeq	r5, r2, #2
 8007ec2:	e7ce      	b.n	8007e62 <_strtol_l.constprop.0+0x3a>
 8007ec4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007ec8:	2f19      	cmp	r7, #25
 8007eca:	d801      	bhi.n	8007ed0 <_strtol_l.constprop.0+0xa8>
 8007ecc:	3c37      	subs	r4, #55	; 0x37
 8007ece:	e7e5      	b.n	8007e9c <_strtol_l.constprop.0+0x74>
 8007ed0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007ed4:	2f19      	cmp	r7, #25
 8007ed6:	d804      	bhi.n	8007ee2 <_strtol_l.constprop.0+0xba>
 8007ed8:	3c57      	subs	r4, #87	; 0x57
 8007eda:	e7df      	b.n	8007e9c <_strtol_l.constprop.0+0x74>
 8007edc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee0:	e7e8      	b.n	8007eb4 <_strtol_l.constprop.0+0x8c>
 8007ee2:	1c53      	adds	r3, r2, #1
 8007ee4:	d108      	bne.n	8007ef8 <_strtol_l.constprop.0+0xd0>
 8007ee6:	2322      	movs	r3, #34	; 0x22
 8007ee8:	4660      	mov	r0, ip
 8007eea:	f8ce 3000 	str.w	r3, [lr]
 8007eee:	f1b8 0f00 	cmp.w	r8, #0
 8007ef2:	d0a6      	beq.n	8007e42 <_strtol_l.constprop.0+0x1a>
 8007ef4:	1e69      	subs	r1, r5, #1
 8007ef6:	e006      	b.n	8007f06 <_strtol_l.constprop.0+0xde>
 8007ef8:	b106      	cbz	r6, 8007efc <_strtol_l.constprop.0+0xd4>
 8007efa:	4240      	negs	r0, r0
 8007efc:	f1b8 0f00 	cmp.w	r8, #0
 8007f00:	d09f      	beq.n	8007e42 <_strtol_l.constprop.0+0x1a>
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	d1f6      	bne.n	8007ef4 <_strtol_l.constprop.0+0xcc>
 8007f06:	f8c8 1000 	str.w	r1, [r8]
 8007f0a:	e79a      	b.n	8007e42 <_strtol_l.constprop.0+0x1a>
 8007f0c:	2430      	movs	r4, #48	; 0x30
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1b5      	bne.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007f12:	2308      	movs	r3, #8
 8007f14:	e7b3      	b.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007f16:	2c30      	cmp	r4, #48	; 0x30
 8007f18:	d0a9      	beq.n	8007e6e <_strtol_l.constprop.0+0x46>
 8007f1a:	230a      	movs	r3, #10
 8007f1c:	e7af      	b.n	8007e7e <_strtol_l.constprop.0+0x56>
 8007f1e:	bf00      	nop
 8007f20:	0800b6b1 	.word	0x0800b6b1

08007f24 <strtol>:
 8007f24:	4613      	mov	r3, r2
 8007f26:	460a      	mov	r2, r1
 8007f28:	4601      	mov	r1, r0
 8007f2a:	4802      	ldr	r0, [pc, #8]	; (8007f34 <strtol+0x10>)
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f7ff bf7b 	b.w	8007e28 <_strtol_l.constprop.0>
 8007f32:	bf00      	nop
 8007f34:	20000200 	.word	0x20000200

08007f38 <__cvt>:
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3e:	461f      	mov	r7, r3
 8007f40:	bfbb      	ittet	lt
 8007f42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f46:	461f      	movlt	r7, r3
 8007f48:	2300      	movge	r3, #0
 8007f4a:	232d      	movlt	r3, #45	; 0x2d
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	4614      	mov	r4, r2
 8007f50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f54:	7013      	strb	r3, [r2, #0]
 8007f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f5c:	f023 0820 	bic.w	r8, r3, #32
 8007f60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f64:	d005      	beq.n	8007f72 <__cvt+0x3a>
 8007f66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f6a:	d100      	bne.n	8007f6e <__cvt+0x36>
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e000      	b.n	8007f74 <__cvt+0x3c>
 8007f72:	2303      	movs	r3, #3
 8007f74:	aa07      	add	r2, sp, #28
 8007f76:	9204      	str	r2, [sp, #16]
 8007f78:	aa06      	add	r2, sp, #24
 8007f7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007f7e:	e9cd 3500 	strd	r3, r5, [sp]
 8007f82:	4622      	mov	r2, r4
 8007f84:	463b      	mov	r3, r7
 8007f86:	f001 f8eb 	bl	8009160 <_dtoa_r>
 8007f8a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f8e:	4606      	mov	r6, r0
 8007f90:	d102      	bne.n	8007f98 <__cvt+0x60>
 8007f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f94:	07db      	lsls	r3, r3, #31
 8007f96:	d522      	bpl.n	8007fde <__cvt+0xa6>
 8007f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f9c:	eb06 0905 	add.w	r9, r6, r5
 8007fa0:	d110      	bne.n	8007fc4 <__cvt+0x8c>
 8007fa2:	7833      	ldrb	r3, [r6, #0]
 8007fa4:	2b30      	cmp	r3, #48	; 0x30
 8007fa6:	d10a      	bne.n	8007fbe <__cvt+0x86>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2300      	movs	r3, #0
 8007fac:	4620      	mov	r0, r4
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fd04 	bl	80009bc <__aeabi_dcmpeq>
 8007fb4:	b918      	cbnz	r0, 8007fbe <__cvt+0x86>
 8007fb6:	f1c5 0501 	rsb	r5, r5, #1
 8007fba:	f8ca 5000 	str.w	r5, [sl]
 8007fbe:	f8da 3000 	ldr.w	r3, [sl]
 8007fc2:	4499      	add	r9, r3
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 fcf6 	bl	80009bc <__aeabi_dcmpeq>
 8007fd0:	b108      	cbz	r0, 8007fd6 <__cvt+0x9e>
 8007fd2:	f8cd 901c 	str.w	r9, [sp, #28]
 8007fd6:	2230      	movs	r2, #48	; 0x30
 8007fd8:	9b07      	ldr	r3, [sp, #28]
 8007fda:	454b      	cmp	r3, r9
 8007fdc:	d307      	bcc.n	8007fee <__cvt+0xb6>
 8007fde:	4630      	mov	r0, r6
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fe4:	1b9b      	subs	r3, r3, r6
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	b008      	add	sp, #32
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fee:	1c59      	adds	r1, r3, #1
 8007ff0:	9107      	str	r1, [sp, #28]
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e7f0      	b.n	8007fd8 <__cvt+0xa0>

08007ff6 <__exponent>:
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	f803 2b02 	strb.w	r2, [r3], #2
 8008000:	bfb6      	itet	lt
 8008002:	222d      	movlt	r2, #45	; 0x2d
 8008004:	222b      	movge	r2, #43	; 0x2b
 8008006:	4249      	neglt	r1, r1
 8008008:	2909      	cmp	r1, #9
 800800a:	7042      	strb	r2, [r0, #1]
 800800c:	dd2a      	ble.n	8008064 <__exponent+0x6e>
 800800e:	f10d 0207 	add.w	r2, sp, #7
 8008012:	4617      	mov	r7, r2
 8008014:	260a      	movs	r6, #10
 8008016:	fb91 f5f6 	sdiv	r5, r1, r6
 800801a:	4694      	mov	ip, r2
 800801c:	fb06 1415 	mls	r4, r6, r5, r1
 8008020:	3430      	adds	r4, #48	; 0x30
 8008022:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008026:	460c      	mov	r4, r1
 8008028:	2c63      	cmp	r4, #99	; 0x63
 800802a:	4629      	mov	r1, r5
 800802c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008030:	dcf1      	bgt.n	8008016 <__exponent+0x20>
 8008032:	3130      	adds	r1, #48	; 0x30
 8008034:	f1ac 0402 	sub.w	r4, ip, #2
 8008038:	f802 1c01 	strb.w	r1, [r2, #-1]
 800803c:	4622      	mov	r2, r4
 800803e:	1c41      	adds	r1, r0, #1
 8008040:	42ba      	cmp	r2, r7
 8008042:	d30a      	bcc.n	800805a <__exponent+0x64>
 8008044:	f10d 0209 	add.w	r2, sp, #9
 8008048:	eba2 020c 	sub.w	r2, r2, ip
 800804c:	42bc      	cmp	r4, r7
 800804e:	bf88      	it	hi
 8008050:	2200      	movhi	r2, #0
 8008052:	4413      	add	r3, r2
 8008054:	1a18      	subs	r0, r3, r0
 8008056:	b003      	add	sp, #12
 8008058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800805e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008062:	e7ed      	b.n	8008040 <__exponent+0x4a>
 8008064:	2330      	movs	r3, #48	; 0x30
 8008066:	3130      	adds	r1, #48	; 0x30
 8008068:	7083      	strb	r3, [r0, #2]
 800806a:	70c1      	strb	r1, [r0, #3]
 800806c:	1d03      	adds	r3, r0, #4
 800806e:	e7f1      	b.n	8008054 <__exponent+0x5e>

08008070 <_printf_float>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	b091      	sub	sp, #68	; 0x44
 8008076:	460c      	mov	r4, r1
 8008078:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800807c:	4616      	mov	r6, r2
 800807e:	461f      	mov	r7, r3
 8008080:	4605      	mov	r5, r0
 8008082:	f000 ff0d 	bl	8008ea0 <_localeconv_r>
 8008086:	6803      	ldr	r3, [r0, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	9309      	str	r3, [sp, #36]	; 0x24
 800808c:	f7f8 f86a 	bl	8000164 <strlen>
 8008090:	2300      	movs	r3, #0
 8008092:	930e      	str	r3, [sp, #56]	; 0x38
 8008094:	f8d8 3000 	ldr.w	r3, [r8]
 8008098:	900a      	str	r0, [sp, #40]	; 0x28
 800809a:	3307      	adds	r3, #7
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	f103 0208 	add.w	r2, r3, #8
 80080a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80080a8:	f8d4 b000 	ldr.w	fp, [r4]
 80080ac:	f8c8 2000 	str.w	r2, [r8]
 80080b0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80080b4:	4652      	mov	r2, sl
 80080b6:	4643      	mov	r3, r8
 80080b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080bc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80080c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	4650      	mov	r0, sl
 80080c8:	4b9c      	ldr	r3, [pc, #624]	; (800833c <_printf_float+0x2cc>)
 80080ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080cc:	f7f8 fca8 	bl	8000a20 <__aeabi_dcmpun>
 80080d0:	bb70      	cbnz	r0, 8008130 <_printf_float+0xc0>
 80080d2:	f04f 32ff 	mov.w	r2, #4294967295
 80080d6:	4650      	mov	r0, sl
 80080d8:	4b98      	ldr	r3, [pc, #608]	; (800833c <_printf_float+0x2cc>)
 80080da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080dc:	f7f8 fc82 	bl	80009e4 <__aeabi_dcmple>
 80080e0:	bb30      	cbnz	r0, 8008130 <_printf_float+0xc0>
 80080e2:	2200      	movs	r2, #0
 80080e4:	2300      	movs	r3, #0
 80080e6:	4650      	mov	r0, sl
 80080e8:	4641      	mov	r1, r8
 80080ea:	f7f8 fc71 	bl	80009d0 <__aeabi_dcmplt>
 80080ee:	b110      	cbz	r0, 80080f6 <_printf_float+0x86>
 80080f0:	232d      	movs	r3, #45	; 0x2d
 80080f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f6:	4a92      	ldr	r2, [pc, #584]	; (8008340 <_printf_float+0x2d0>)
 80080f8:	4b92      	ldr	r3, [pc, #584]	; (8008344 <_printf_float+0x2d4>)
 80080fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80080fe:	bf94      	ite	ls
 8008100:	4690      	movls	r8, r2
 8008102:	4698      	movhi	r8, r3
 8008104:	2303      	movs	r3, #3
 8008106:	f04f 0a00 	mov.w	sl, #0
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	f02b 0304 	bic.w	r3, fp, #4
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	4633      	mov	r3, r6
 8008114:	4621      	mov	r1, r4
 8008116:	4628      	mov	r0, r5
 8008118:	9700      	str	r7, [sp, #0]
 800811a:	aa0f      	add	r2, sp, #60	; 0x3c
 800811c:	f000 f9d6 	bl	80084cc <_printf_common>
 8008120:	3001      	adds	r0, #1
 8008122:	f040 8090 	bne.w	8008246 <_printf_float+0x1d6>
 8008126:	f04f 30ff 	mov.w	r0, #4294967295
 800812a:	b011      	add	sp, #68	; 0x44
 800812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008130:	4652      	mov	r2, sl
 8008132:	4643      	mov	r3, r8
 8008134:	4650      	mov	r0, sl
 8008136:	4641      	mov	r1, r8
 8008138:	f7f8 fc72 	bl	8000a20 <__aeabi_dcmpun>
 800813c:	b148      	cbz	r0, 8008152 <_printf_float+0xe2>
 800813e:	f1b8 0f00 	cmp.w	r8, #0
 8008142:	bfb8      	it	lt
 8008144:	232d      	movlt	r3, #45	; 0x2d
 8008146:	4a80      	ldr	r2, [pc, #512]	; (8008348 <_printf_float+0x2d8>)
 8008148:	bfb8      	it	lt
 800814a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800814e:	4b7f      	ldr	r3, [pc, #508]	; (800834c <_printf_float+0x2dc>)
 8008150:	e7d3      	b.n	80080fa <_printf_float+0x8a>
 8008152:	6863      	ldr	r3, [r4, #4]
 8008154:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	d142      	bne.n	80081e2 <_printf_float+0x172>
 800815c:	2306      	movs	r3, #6
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	9206      	str	r2, [sp, #24]
 8008164:	aa0e      	add	r2, sp, #56	; 0x38
 8008166:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800816a:	aa0d      	add	r2, sp, #52	; 0x34
 800816c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008170:	9203      	str	r2, [sp, #12]
 8008172:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008176:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	4652      	mov	r2, sl
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4628      	mov	r0, r5
 8008184:	4643      	mov	r3, r8
 8008186:	910b      	str	r1, [sp, #44]	; 0x2c
 8008188:	f7ff fed6 	bl	8007f38 <__cvt>
 800818c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800818e:	4680      	mov	r8, r0
 8008190:	2947      	cmp	r1, #71	; 0x47
 8008192:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008194:	d108      	bne.n	80081a8 <_printf_float+0x138>
 8008196:	1cc8      	adds	r0, r1, #3
 8008198:	db02      	blt.n	80081a0 <_printf_float+0x130>
 800819a:	6863      	ldr	r3, [r4, #4]
 800819c:	4299      	cmp	r1, r3
 800819e:	dd40      	ble.n	8008222 <_printf_float+0x1b2>
 80081a0:	f1a9 0902 	sub.w	r9, r9, #2
 80081a4:	fa5f f989 	uxtb.w	r9, r9
 80081a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081ac:	d81f      	bhi.n	80081ee <_printf_float+0x17e>
 80081ae:	464a      	mov	r2, r9
 80081b0:	3901      	subs	r1, #1
 80081b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081b6:	910d      	str	r1, [sp, #52]	; 0x34
 80081b8:	f7ff ff1d 	bl	8007ff6 <__exponent>
 80081bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081be:	4682      	mov	sl, r0
 80081c0:	1813      	adds	r3, r2, r0
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	dc02      	bgt.n	80081ce <_printf_float+0x15e>
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	07d2      	lsls	r2, r2, #31
 80081cc:	d501      	bpl.n	80081d2 <_printf_float+0x162>
 80081ce:	3301      	adds	r3, #1
 80081d0:	6123      	str	r3, [r4, #16]
 80081d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d09b      	beq.n	8008112 <_printf_float+0xa2>
 80081da:	232d      	movs	r3, #45	; 0x2d
 80081dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e0:	e797      	b.n	8008112 <_printf_float+0xa2>
 80081e2:	2947      	cmp	r1, #71	; 0x47
 80081e4:	d1bc      	bne.n	8008160 <_printf_float+0xf0>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1ba      	bne.n	8008160 <_printf_float+0xf0>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7b7      	b.n	800815e <_printf_float+0xee>
 80081ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80081f2:	d118      	bne.n	8008226 <_printf_float+0x1b6>
 80081f4:	2900      	cmp	r1, #0
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	dd0b      	ble.n	8008212 <_printf_float+0x1a2>
 80081fa:	6121      	str	r1, [r4, #16]
 80081fc:	b913      	cbnz	r3, 8008204 <_printf_float+0x194>
 80081fe:	6822      	ldr	r2, [r4, #0]
 8008200:	07d0      	lsls	r0, r2, #31
 8008202:	d502      	bpl.n	800820a <_printf_float+0x19a>
 8008204:	3301      	adds	r3, #1
 8008206:	440b      	add	r3, r1
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	f04f 0a00 	mov.w	sl, #0
 800820e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008210:	e7df      	b.n	80081d2 <_printf_float+0x162>
 8008212:	b913      	cbnz	r3, 800821a <_printf_float+0x1aa>
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	07d2      	lsls	r2, r2, #31
 8008218:	d501      	bpl.n	800821e <_printf_float+0x1ae>
 800821a:	3302      	adds	r3, #2
 800821c:	e7f4      	b.n	8008208 <_printf_float+0x198>
 800821e:	2301      	movs	r3, #1
 8008220:	e7f2      	b.n	8008208 <_printf_float+0x198>
 8008222:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008228:	4299      	cmp	r1, r3
 800822a:	db05      	blt.n	8008238 <_printf_float+0x1c8>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	6121      	str	r1, [r4, #16]
 8008230:	07d8      	lsls	r0, r3, #31
 8008232:	d5ea      	bpl.n	800820a <_printf_float+0x19a>
 8008234:	1c4b      	adds	r3, r1, #1
 8008236:	e7e7      	b.n	8008208 <_printf_float+0x198>
 8008238:	2900      	cmp	r1, #0
 800823a:	bfcc      	ite	gt
 800823c:	2201      	movgt	r2, #1
 800823e:	f1c1 0202 	rsble	r2, r1, #2
 8008242:	4413      	add	r3, r2
 8008244:	e7e0      	b.n	8008208 <_printf_float+0x198>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	055a      	lsls	r2, r3, #21
 800824a:	d407      	bmi.n	800825c <_printf_float+0x1ec>
 800824c:	6923      	ldr	r3, [r4, #16]
 800824e:	4642      	mov	r2, r8
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	d12b      	bne.n	80082b2 <_printf_float+0x242>
 800825a:	e764      	b.n	8008126 <_printf_float+0xb6>
 800825c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008260:	f240 80dd 	bls.w	800841e <_printf_float+0x3ae>
 8008264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008268:	2200      	movs	r2, #0
 800826a:	2300      	movs	r3, #0
 800826c:	f7f8 fba6 	bl	80009bc <__aeabi_dcmpeq>
 8008270:	2800      	cmp	r0, #0
 8008272:	d033      	beq.n	80082dc <_printf_float+0x26c>
 8008274:	2301      	movs	r3, #1
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	4a35      	ldr	r2, [pc, #212]	; (8008350 <_printf_float+0x2e0>)
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	f43f af51 	beq.w	8008126 <_printf_float+0xb6>
 8008284:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008288:	429a      	cmp	r2, r3
 800828a:	db02      	blt.n	8008292 <_printf_float+0x222>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	07d8      	lsls	r0, r3, #31
 8008290:	d50f      	bpl.n	80082b2 <_printf_float+0x242>
 8008292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008296:	4631      	mov	r1, r6
 8008298:	4628      	mov	r0, r5
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f af42 	beq.w	8008126 <_printf_float+0xb6>
 80082a2:	f04f 0800 	mov.w	r8, #0
 80082a6:	f104 091a 	add.w	r9, r4, #26
 80082aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4543      	cmp	r3, r8
 80082b0:	dc09      	bgt.n	80082c6 <_printf_float+0x256>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	079b      	lsls	r3, r3, #30
 80082b6:	f100 8104 	bmi.w	80084c2 <_printf_float+0x452>
 80082ba:	68e0      	ldr	r0, [r4, #12]
 80082bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082be:	4298      	cmp	r0, r3
 80082c0:	bfb8      	it	lt
 80082c2:	4618      	movlt	r0, r3
 80082c4:	e731      	b.n	800812a <_printf_float+0xba>
 80082c6:	2301      	movs	r3, #1
 80082c8:	464a      	mov	r2, r9
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f af28 	beq.w	8008126 <_printf_float+0xb6>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	e7e6      	b.n	80082aa <_printf_float+0x23a>
 80082dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dc38      	bgt.n	8008354 <_printf_float+0x2e4>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	4a19      	ldr	r2, [pc, #100]	; (8008350 <_printf_float+0x2e0>)
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f af1a 	beq.w	8008126 <_printf_float+0xb6>
 80082f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80082f6:	4313      	orrs	r3, r2
 80082f8:	d102      	bne.n	8008300 <_printf_float+0x290>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	07d9      	lsls	r1, r3, #31
 80082fe:	d5d8      	bpl.n	80082b2 <_printf_float+0x242>
 8008300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	f43f af0b 	beq.w	8008126 <_printf_float+0xb6>
 8008310:	f04f 0900 	mov.w	r9, #0
 8008314:	f104 0a1a 	add.w	sl, r4, #26
 8008318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831a:	425b      	negs	r3, r3
 800831c:	454b      	cmp	r3, r9
 800831e:	dc01      	bgt.n	8008324 <_printf_float+0x2b4>
 8008320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008322:	e794      	b.n	800824e <_printf_float+0x1de>
 8008324:	2301      	movs	r3, #1
 8008326:	4652      	mov	r2, sl
 8008328:	4631      	mov	r1, r6
 800832a:	4628      	mov	r0, r5
 800832c:	47b8      	blx	r7
 800832e:	3001      	adds	r0, #1
 8008330:	f43f aef9 	beq.w	8008126 <_printf_float+0xb6>
 8008334:	f109 0901 	add.w	r9, r9, #1
 8008338:	e7ee      	b.n	8008318 <_printf_float+0x2a8>
 800833a:	bf00      	nop
 800833c:	7fefffff 	.word	0x7fefffff
 8008340:	0800b7b1 	.word	0x0800b7b1
 8008344:	0800b7b5 	.word	0x0800b7b5
 8008348:	0800b7b9 	.word	0x0800b7b9
 800834c:	0800b7bd 	.word	0x0800b7bd
 8008350:	0800b7c1 	.word	0x0800b7c1
 8008354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008358:	429a      	cmp	r2, r3
 800835a:	bfa8      	it	ge
 800835c:	461a      	movge	r2, r3
 800835e:	2a00      	cmp	r2, #0
 8008360:	4691      	mov	r9, r2
 8008362:	dc37      	bgt.n	80083d4 <_printf_float+0x364>
 8008364:	f04f 0b00 	mov.w	fp, #0
 8008368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800836c:	f104 021a 	add.w	r2, r4, #26
 8008370:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008374:	ebaa 0309 	sub.w	r3, sl, r9
 8008378:	455b      	cmp	r3, fp
 800837a:	dc33      	bgt.n	80083e4 <_printf_float+0x374>
 800837c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008380:	429a      	cmp	r2, r3
 8008382:	db3b      	blt.n	80083fc <_printf_float+0x38c>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	07da      	lsls	r2, r3, #31
 8008388:	d438      	bmi.n	80083fc <_printf_float+0x38c>
 800838a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800838e:	eba2 0903 	sub.w	r9, r2, r3
 8008392:	eba2 020a 	sub.w	r2, r2, sl
 8008396:	4591      	cmp	r9, r2
 8008398:	bfa8      	it	ge
 800839a:	4691      	movge	r9, r2
 800839c:	f1b9 0f00 	cmp.w	r9, #0
 80083a0:	dc34      	bgt.n	800840c <_printf_float+0x39c>
 80083a2:	f04f 0800 	mov.w	r8, #0
 80083a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083aa:	f104 0a1a 	add.w	sl, r4, #26
 80083ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	eba3 0309 	sub.w	r3, r3, r9
 80083b8:	4543      	cmp	r3, r8
 80083ba:	f77f af7a 	ble.w	80082b2 <_printf_float+0x242>
 80083be:	2301      	movs	r3, #1
 80083c0:	4652      	mov	r2, sl
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	f43f aeac 	beq.w	8008126 <_printf_float+0xb6>
 80083ce:	f108 0801 	add.w	r8, r8, #1
 80083d2:	e7ec      	b.n	80083ae <_printf_float+0x33e>
 80083d4:	4613      	mov	r3, r2
 80083d6:	4631      	mov	r1, r6
 80083d8:	4642      	mov	r2, r8
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	d1c0      	bne.n	8008364 <_printf_float+0x2f4>
 80083e2:	e6a0      	b.n	8008126 <_printf_float+0xb6>
 80083e4:	2301      	movs	r3, #1
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	f43f ae99 	beq.w	8008126 <_printf_float+0xb6>
 80083f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083f6:	f10b 0b01 	add.w	fp, fp, #1
 80083fa:	e7b9      	b.n	8008370 <_printf_float+0x300>
 80083fc:	4631      	mov	r1, r6
 80083fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	d1bf      	bne.n	800838a <_printf_float+0x31a>
 800840a:	e68c      	b.n	8008126 <_printf_float+0xb6>
 800840c:	464b      	mov	r3, r9
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	eb08 020a 	add.w	r2, r8, sl
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	d1c2      	bne.n	80083a2 <_printf_float+0x332>
 800841c:	e683      	b.n	8008126 <_printf_float+0xb6>
 800841e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008420:	2a01      	cmp	r2, #1
 8008422:	dc01      	bgt.n	8008428 <_printf_float+0x3b8>
 8008424:	07db      	lsls	r3, r3, #31
 8008426:	d539      	bpl.n	800849c <_printf_float+0x42c>
 8008428:	2301      	movs	r3, #1
 800842a:	4642      	mov	r2, r8
 800842c:	4631      	mov	r1, r6
 800842e:	4628      	mov	r0, r5
 8008430:	47b8      	blx	r7
 8008432:	3001      	adds	r0, #1
 8008434:	f43f ae77 	beq.w	8008126 <_printf_float+0xb6>
 8008438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f ae6f 	beq.w	8008126 <_printf_float+0xb6>
 8008448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008454:	f7f8 fab2 	bl	80009bc <__aeabi_dcmpeq>
 8008458:	b9d8      	cbnz	r0, 8008492 <_printf_float+0x422>
 800845a:	f109 33ff 	add.w	r3, r9, #4294967295
 800845e:	f108 0201 	add.w	r2, r8, #1
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	d10e      	bne.n	800848a <_printf_float+0x41a>
 800846c:	e65b      	b.n	8008126 <_printf_float+0xb6>
 800846e:	2301      	movs	r3, #1
 8008470:	464a      	mov	r2, r9
 8008472:	4631      	mov	r1, r6
 8008474:	4628      	mov	r0, r5
 8008476:	47b8      	blx	r7
 8008478:	3001      	adds	r0, #1
 800847a:	f43f ae54 	beq.w	8008126 <_printf_float+0xb6>
 800847e:	f108 0801 	add.w	r8, r8, #1
 8008482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008484:	3b01      	subs	r3, #1
 8008486:	4543      	cmp	r3, r8
 8008488:	dcf1      	bgt.n	800846e <_printf_float+0x3fe>
 800848a:	4653      	mov	r3, sl
 800848c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008490:	e6de      	b.n	8008250 <_printf_float+0x1e0>
 8008492:	f04f 0800 	mov.w	r8, #0
 8008496:	f104 091a 	add.w	r9, r4, #26
 800849a:	e7f2      	b.n	8008482 <_printf_float+0x412>
 800849c:	2301      	movs	r3, #1
 800849e:	4642      	mov	r2, r8
 80084a0:	e7df      	b.n	8008462 <_printf_float+0x3f2>
 80084a2:	2301      	movs	r3, #1
 80084a4:	464a      	mov	r2, r9
 80084a6:	4631      	mov	r1, r6
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b8      	blx	r7
 80084ac:	3001      	adds	r0, #1
 80084ae:	f43f ae3a 	beq.w	8008126 <_printf_float+0xb6>
 80084b2:	f108 0801 	add.w	r8, r8, #1
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	4543      	cmp	r3, r8
 80084be:	dcf0      	bgt.n	80084a2 <_printf_float+0x432>
 80084c0:	e6fb      	b.n	80082ba <_printf_float+0x24a>
 80084c2:	f04f 0800 	mov.w	r8, #0
 80084c6:	f104 0919 	add.w	r9, r4, #25
 80084ca:	e7f4      	b.n	80084b6 <_printf_float+0x446>

080084cc <_printf_common>:
 80084cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	4616      	mov	r6, r2
 80084d2:	4699      	mov	r9, r3
 80084d4:	688a      	ldr	r2, [r1, #8]
 80084d6:	690b      	ldr	r3, [r1, #16]
 80084d8:	4607      	mov	r7, r0
 80084da:	4293      	cmp	r3, r2
 80084dc:	bfb8      	it	lt
 80084de:	4613      	movlt	r3, r2
 80084e0:	6033      	str	r3, [r6, #0]
 80084e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084e6:	460c      	mov	r4, r1
 80084e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084ec:	b10a      	cbz	r2, 80084f2 <_printf_common+0x26>
 80084ee:	3301      	adds	r3, #1
 80084f0:	6033      	str	r3, [r6, #0]
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	0699      	lsls	r1, r3, #26
 80084f6:	bf42      	ittt	mi
 80084f8:	6833      	ldrmi	r3, [r6, #0]
 80084fa:	3302      	addmi	r3, #2
 80084fc:	6033      	strmi	r3, [r6, #0]
 80084fe:	6825      	ldr	r5, [r4, #0]
 8008500:	f015 0506 	ands.w	r5, r5, #6
 8008504:	d106      	bne.n	8008514 <_printf_common+0x48>
 8008506:	f104 0a19 	add.w	sl, r4, #25
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	6832      	ldr	r2, [r6, #0]
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	42ab      	cmp	r3, r5
 8008512:	dc2b      	bgt.n	800856c <_printf_common+0xa0>
 8008514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008518:	1e13      	subs	r3, r2, #0
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	bf18      	it	ne
 800851e:	2301      	movne	r3, #1
 8008520:	0692      	lsls	r2, r2, #26
 8008522:	d430      	bmi.n	8008586 <_printf_common+0xba>
 8008524:	4649      	mov	r1, r9
 8008526:	4638      	mov	r0, r7
 8008528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800852c:	47c0      	blx	r8
 800852e:	3001      	adds	r0, #1
 8008530:	d023      	beq.n	800857a <_printf_common+0xae>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	f003 0306 	and.w	r3, r3, #6
 800853a:	2b04      	cmp	r3, #4
 800853c:	bf14      	ite	ne
 800853e:	2500      	movne	r5, #0
 8008540:	6833      	ldreq	r3, [r6, #0]
 8008542:	f04f 0600 	mov.w	r6, #0
 8008546:	bf08      	it	eq
 8008548:	68e5      	ldreq	r5, [r4, #12]
 800854a:	f104 041a 	add.w	r4, r4, #26
 800854e:	bf08      	it	eq
 8008550:	1aed      	subeq	r5, r5, r3
 8008552:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008556:	bf08      	it	eq
 8008558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800855c:	4293      	cmp	r3, r2
 800855e:	bfc4      	itt	gt
 8008560:	1a9b      	subgt	r3, r3, r2
 8008562:	18ed      	addgt	r5, r5, r3
 8008564:	42b5      	cmp	r5, r6
 8008566:	d11a      	bne.n	800859e <_printf_common+0xd2>
 8008568:	2000      	movs	r0, #0
 800856a:	e008      	b.n	800857e <_printf_common+0xb2>
 800856c:	2301      	movs	r3, #1
 800856e:	4652      	mov	r2, sl
 8008570:	4649      	mov	r1, r9
 8008572:	4638      	mov	r0, r7
 8008574:	47c0      	blx	r8
 8008576:	3001      	adds	r0, #1
 8008578:	d103      	bne.n	8008582 <_printf_common+0xb6>
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008582:	3501      	adds	r5, #1
 8008584:	e7c1      	b.n	800850a <_printf_common+0x3e>
 8008586:	2030      	movs	r0, #48	; 0x30
 8008588:	18e1      	adds	r1, r4, r3
 800858a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008594:	4422      	add	r2, r4
 8008596:	3302      	adds	r3, #2
 8008598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800859c:	e7c2      	b.n	8008524 <_printf_common+0x58>
 800859e:	2301      	movs	r3, #1
 80085a0:	4622      	mov	r2, r4
 80085a2:	4649      	mov	r1, r9
 80085a4:	4638      	mov	r0, r7
 80085a6:	47c0      	blx	r8
 80085a8:	3001      	adds	r0, #1
 80085aa:	d0e6      	beq.n	800857a <_printf_common+0xae>
 80085ac:	3601      	adds	r6, #1
 80085ae:	e7d9      	b.n	8008564 <_printf_common+0x98>

080085b0 <_printf_i>:
 80085b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b4:	7e0f      	ldrb	r7, [r1, #24]
 80085b6:	4691      	mov	r9, r2
 80085b8:	2f78      	cmp	r7, #120	; 0x78
 80085ba:	4680      	mov	r8, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	469a      	mov	sl, r3
 80085c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085c6:	d807      	bhi.n	80085d8 <_printf_i+0x28>
 80085c8:	2f62      	cmp	r7, #98	; 0x62
 80085ca:	d80a      	bhi.n	80085e2 <_printf_i+0x32>
 80085cc:	2f00      	cmp	r7, #0
 80085ce:	f000 80d5 	beq.w	800877c <_printf_i+0x1cc>
 80085d2:	2f58      	cmp	r7, #88	; 0x58
 80085d4:	f000 80c1 	beq.w	800875a <_printf_i+0x1aa>
 80085d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085e0:	e03a      	b.n	8008658 <_printf_i+0xa8>
 80085e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085e6:	2b15      	cmp	r3, #21
 80085e8:	d8f6      	bhi.n	80085d8 <_printf_i+0x28>
 80085ea:	a101      	add	r1, pc, #4	; (adr r1, 80085f0 <_printf_i+0x40>)
 80085ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085f0:	08008649 	.word	0x08008649
 80085f4:	0800865d 	.word	0x0800865d
 80085f8:	080085d9 	.word	0x080085d9
 80085fc:	080085d9 	.word	0x080085d9
 8008600:	080085d9 	.word	0x080085d9
 8008604:	080085d9 	.word	0x080085d9
 8008608:	0800865d 	.word	0x0800865d
 800860c:	080085d9 	.word	0x080085d9
 8008610:	080085d9 	.word	0x080085d9
 8008614:	080085d9 	.word	0x080085d9
 8008618:	080085d9 	.word	0x080085d9
 800861c:	08008763 	.word	0x08008763
 8008620:	08008689 	.word	0x08008689
 8008624:	0800871d 	.word	0x0800871d
 8008628:	080085d9 	.word	0x080085d9
 800862c:	080085d9 	.word	0x080085d9
 8008630:	08008785 	.word	0x08008785
 8008634:	080085d9 	.word	0x080085d9
 8008638:	08008689 	.word	0x08008689
 800863c:	080085d9 	.word	0x080085d9
 8008640:	080085d9 	.word	0x080085d9
 8008644:	08008725 	.word	0x08008725
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	1d1a      	adds	r2, r3, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	602a      	str	r2, [r5, #0]
 8008650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008658:	2301      	movs	r3, #1
 800865a:	e0a0      	b.n	800879e <_printf_i+0x1ee>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	0607      	lsls	r7, r0, #24
 8008662:	f103 0104 	add.w	r1, r3, #4
 8008666:	6029      	str	r1, [r5, #0]
 8008668:	d501      	bpl.n	800866e <_printf_i+0xbe>
 800866a:	681e      	ldr	r6, [r3, #0]
 800866c:	e003      	b.n	8008676 <_printf_i+0xc6>
 800866e:	0646      	lsls	r6, r0, #25
 8008670:	d5fb      	bpl.n	800866a <_printf_i+0xba>
 8008672:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008676:	2e00      	cmp	r6, #0
 8008678:	da03      	bge.n	8008682 <_printf_i+0xd2>
 800867a:	232d      	movs	r3, #45	; 0x2d
 800867c:	4276      	negs	r6, r6
 800867e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008682:	230a      	movs	r3, #10
 8008684:	4859      	ldr	r0, [pc, #356]	; (80087ec <_printf_i+0x23c>)
 8008686:	e012      	b.n	80086ae <_printf_i+0xfe>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	1d19      	adds	r1, r3, #4
 800868e:	6029      	str	r1, [r5, #0]
 8008690:	0605      	lsls	r5, r0, #24
 8008692:	d501      	bpl.n	8008698 <_printf_i+0xe8>
 8008694:	681e      	ldr	r6, [r3, #0]
 8008696:	e002      	b.n	800869e <_printf_i+0xee>
 8008698:	0641      	lsls	r1, r0, #25
 800869a:	d5fb      	bpl.n	8008694 <_printf_i+0xe4>
 800869c:	881e      	ldrh	r6, [r3, #0]
 800869e:	2f6f      	cmp	r7, #111	; 0x6f
 80086a0:	bf0c      	ite	eq
 80086a2:	2308      	moveq	r3, #8
 80086a4:	230a      	movne	r3, #10
 80086a6:	4851      	ldr	r0, [pc, #324]	; (80087ec <_printf_i+0x23c>)
 80086a8:	2100      	movs	r1, #0
 80086aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086ae:	6865      	ldr	r5, [r4, #4]
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	bfa8      	it	ge
 80086b4:	6821      	ldrge	r1, [r4, #0]
 80086b6:	60a5      	str	r5, [r4, #8]
 80086b8:	bfa4      	itt	ge
 80086ba:	f021 0104 	bicge.w	r1, r1, #4
 80086be:	6021      	strge	r1, [r4, #0]
 80086c0:	b90e      	cbnz	r6, 80086c6 <_printf_i+0x116>
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	d04b      	beq.n	800875e <_printf_i+0x1ae>
 80086c6:	4615      	mov	r5, r2
 80086c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80086cc:	fb03 6711 	mls	r7, r3, r1, r6
 80086d0:	5dc7      	ldrb	r7, [r0, r7]
 80086d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086d6:	4637      	mov	r7, r6
 80086d8:	42bb      	cmp	r3, r7
 80086da:	460e      	mov	r6, r1
 80086dc:	d9f4      	bls.n	80086c8 <_printf_i+0x118>
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d10b      	bne.n	80086fa <_printf_i+0x14a>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	07de      	lsls	r6, r3, #31
 80086e6:	d508      	bpl.n	80086fa <_printf_i+0x14a>
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	6861      	ldr	r1, [r4, #4]
 80086ec:	4299      	cmp	r1, r3
 80086ee:	bfde      	ittt	le
 80086f0:	2330      	movle	r3, #48	; 0x30
 80086f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086fa:	1b52      	subs	r2, r2, r5
 80086fc:	6122      	str	r2, [r4, #16]
 80086fe:	464b      	mov	r3, r9
 8008700:	4621      	mov	r1, r4
 8008702:	4640      	mov	r0, r8
 8008704:	f8cd a000 	str.w	sl, [sp]
 8008708:	aa03      	add	r2, sp, #12
 800870a:	f7ff fedf 	bl	80084cc <_printf_common>
 800870e:	3001      	adds	r0, #1
 8008710:	d14a      	bne.n	80087a8 <_printf_i+0x1f8>
 8008712:	f04f 30ff 	mov.w	r0, #4294967295
 8008716:	b004      	add	sp, #16
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	f043 0320 	orr.w	r3, r3, #32
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	2778      	movs	r7, #120	; 0x78
 8008726:	4832      	ldr	r0, [pc, #200]	; (80087f0 <_printf_i+0x240>)
 8008728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	6829      	ldr	r1, [r5, #0]
 8008730:	061f      	lsls	r7, r3, #24
 8008732:	f851 6b04 	ldr.w	r6, [r1], #4
 8008736:	d402      	bmi.n	800873e <_printf_i+0x18e>
 8008738:	065f      	lsls	r7, r3, #25
 800873a:	bf48      	it	mi
 800873c:	b2b6      	uxthmi	r6, r6
 800873e:	07df      	lsls	r7, r3, #31
 8008740:	bf48      	it	mi
 8008742:	f043 0320 	orrmi.w	r3, r3, #32
 8008746:	6029      	str	r1, [r5, #0]
 8008748:	bf48      	it	mi
 800874a:	6023      	strmi	r3, [r4, #0]
 800874c:	b91e      	cbnz	r6, 8008756 <_printf_i+0x1a6>
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	f023 0320 	bic.w	r3, r3, #32
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	2310      	movs	r3, #16
 8008758:	e7a6      	b.n	80086a8 <_printf_i+0xf8>
 800875a:	4824      	ldr	r0, [pc, #144]	; (80087ec <_printf_i+0x23c>)
 800875c:	e7e4      	b.n	8008728 <_printf_i+0x178>
 800875e:	4615      	mov	r5, r2
 8008760:	e7bd      	b.n	80086de <_printf_i+0x12e>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	6826      	ldr	r6, [r4, #0]
 8008766:	1d18      	adds	r0, r3, #4
 8008768:	6961      	ldr	r1, [r4, #20]
 800876a:	6028      	str	r0, [r5, #0]
 800876c:	0635      	lsls	r5, r6, #24
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	d501      	bpl.n	8008776 <_printf_i+0x1c6>
 8008772:	6019      	str	r1, [r3, #0]
 8008774:	e002      	b.n	800877c <_printf_i+0x1cc>
 8008776:	0670      	lsls	r0, r6, #25
 8008778:	d5fb      	bpl.n	8008772 <_printf_i+0x1c2>
 800877a:	8019      	strh	r1, [r3, #0]
 800877c:	2300      	movs	r3, #0
 800877e:	4615      	mov	r5, r2
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	e7bc      	b.n	80086fe <_printf_i+0x14e>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	2100      	movs	r1, #0
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	602a      	str	r2, [r5, #0]
 800878c:	681d      	ldr	r5, [r3, #0]
 800878e:	6862      	ldr	r2, [r4, #4]
 8008790:	4628      	mov	r0, r5
 8008792:	f000 fc14 	bl	8008fbe <memchr>
 8008796:	b108      	cbz	r0, 800879c <_printf_i+0x1ec>
 8008798:	1b40      	subs	r0, r0, r5
 800879a:	6060      	str	r0, [r4, #4]
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	2300      	movs	r3, #0
 80087a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a6:	e7aa      	b.n	80086fe <_printf_i+0x14e>
 80087a8:	462a      	mov	r2, r5
 80087aa:	4649      	mov	r1, r9
 80087ac:	4640      	mov	r0, r8
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	47d0      	blx	sl
 80087b2:	3001      	adds	r0, #1
 80087b4:	d0ad      	beq.n	8008712 <_printf_i+0x162>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	079b      	lsls	r3, r3, #30
 80087ba:	d413      	bmi.n	80087e4 <_printf_i+0x234>
 80087bc:	68e0      	ldr	r0, [r4, #12]
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	4298      	cmp	r0, r3
 80087c2:	bfb8      	it	lt
 80087c4:	4618      	movlt	r0, r3
 80087c6:	e7a6      	b.n	8008716 <_printf_i+0x166>
 80087c8:	2301      	movs	r3, #1
 80087ca:	4632      	mov	r2, r6
 80087cc:	4649      	mov	r1, r9
 80087ce:	4640      	mov	r0, r8
 80087d0:	47d0      	blx	sl
 80087d2:	3001      	adds	r0, #1
 80087d4:	d09d      	beq.n	8008712 <_printf_i+0x162>
 80087d6:	3501      	adds	r5, #1
 80087d8:	68e3      	ldr	r3, [r4, #12]
 80087da:	9903      	ldr	r1, [sp, #12]
 80087dc:	1a5b      	subs	r3, r3, r1
 80087de:	42ab      	cmp	r3, r5
 80087e0:	dcf2      	bgt.n	80087c8 <_printf_i+0x218>
 80087e2:	e7eb      	b.n	80087bc <_printf_i+0x20c>
 80087e4:	2500      	movs	r5, #0
 80087e6:	f104 0619 	add.w	r6, r4, #25
 80087ea:	e7f5      	b.n	80087d8 <_printf_i+0x228>
 80087ec:	0800b7c3 	.word	0x0800b7c3
 80087f0:	0800b7d4 	.word	0x0800b7d4

080087f4 <std>:
 80087f4:	2300      	movs	r3, #0
 80087f6:	b510      	push	{r4, lr}
 80087f8:	4604      	mov	r4, r0
 80087fa:	e9c0 3300 	strd	r3, r3, [r0]
 80087fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008802:	6083      	str	r3, [r0, #8]
 8008804:	8181      	strh	r1, [r0, #12]
 8008806:	6643      	str	r3, [r0, #100]	; 0x64
 8008808:	81c2      	strh	r2, [r0, #14]
 800880a:	6183      	str	r3, [r0, #24]
 800880c:	4619      	mov	r1, r3
 800880e:	2208      	movs	r2, #8
 8008810:	305c      	adds	r0, #92	; 0x5c
 8008812:	f000 faa5 	bl	8008d60 <memset>
 8008816:	4b0d      	ldr	r3, [pc, #52]	; (800884c <std+0x58>)
 8008818:	6224      	str	r4, [r4, #32]
 800881a:	6263      	str	r3, [r4, #36]	; 0x24
 800881c:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <std+0x5c>)
 800881e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <std+0x60>)
 8008822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <std+0x64>)
 8008826:	6323      	str	r3, [r4, #48]	; 0x30
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <std+0x68>)
 800882a:	429c      	cmp	r4, r3
 800882c:	d006      	beq.n	800883c <std+0x48>
 800882e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008832:	4294      	cmp	r4, r2
 8008834:	d002      	beq.n	800883c <std+0x48>
 8008836:	33d0      	adds	r3, #208	; 0xd0
 8008838:	429c      	cmp	r4, r3
 800883a:	d105      	bne.n	8008848 <std+0x54>
 800883c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	f000 bbb0 	b.w	8008fa8 <__retarget_lock_init_recursive>
 8008848:	bd10      	pop	{r4, pc}
 800884a:	bf00      	nop
 800884c:	08008bb1 	.word	0x08008bb1
 8008850:	08008bd3 	.word	0x08008bd3
 8008854:	08008c0b 	.word	0x08008c0b
 8008858:	08008c2f 	.word	0x08008c2f
 800885c:	2000262c 	.word	0x2000262c

08008860 <stdio_exit_handler>:
 8008860:	4a02      	ldr	r2, [pc, #8]	; (800886c <stdio_exit_handler+0xc>)
 8008862:	4903      	ldr	r1, [pc, #12]	; (8008870 <stdio_exit_handler+0x10>)
 8008864:	4803      	ldr	r0, [pc, #12]	; (8008874 <stdio_exit_handler+0x14>)
 8008866:	f000 b869 	b.w	800893c <_fwalk_sglue>
 800886a:	bf00      	nop
 800886c:	2000003c 	.word	0x2000003c
 8008870:	0800b169 	.word	0x0800b169
 8008874:	200001b4 	.word	0x200001b4

08008878 <cleanup_stdio>:
 8008878:	6841      	ldr	r1, [r0, #4]
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <cleanup_stdio+0x34>)
 800887c:	b510      	push	{r4, lr}
 800887e:	4299      	cmp	r1, r3
 8008880:	4604      	mov	r4, r0
 8008882:	d001      	beq.n	8008888 <cleanup_stdio+0x10>
 8008884:	f002 fc70 	bl	800b168 <_fflush_r>
 8008888:	68a1      	ldr	r1, [r4, #8]
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <cleanup_stdio+0x38>)
 800888c:	4299      	cmp	r1, r3
 800888e:	d002      	beq.n	8008896 <cleanup_stdio+0x1e>
 8008890:	4620      	mov	r0, r4
 8008892:	f002 fc69 	bl	800b168 <_fflush_r>
 8008896:	68e1      	ldr	r1, [r4, #12]
 8008898:	4b06      	ldr	r3, [pc, #24]	; (80088b4 <cleanup_stdio+0x3c>)
 800889a:	4299      	cmp	r1, r3
 800889c:	d004      	beq.n	80088a8 <cleanup_stdio+0x30>
 800889e:	4620      	mov	r0, r4
 80088a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a4:	f002 bc60 	b.w	800b168 <_fflush_r>
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	bf00      	nop
 80088ac:	2000262c 	.word	0x2000262c
 80088b0:	20002694 	.word	0x20002694
 80088b4:	200026fc 	.word	0x200026fc

080088b8 <global_stdio_init.part.0>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <global_stdio_init.part.0+0x30>)
 80088bc:	4c0b      	ldr	r4, [pc, #44]	; (80088ec <global_stdio_init.part.0+0x34>)
 80088be:	4a0c      	ldr	r2, [pc, #48]	; (80088f0 <global_stdio_init.part.0+0x38>)
 80088c0:	4620      	mov	r0, r4
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	2104      	movs	r1, #4
 80088c6:	2200      	movs	r2, #0
 80088c8:	f7ff ff94 	bl	80087f4 <std>
 80088cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088d0:	2201      	movs	r2, #1
 80088d2:	2109      	movs	r1, #9
 80088d4:	f7ff ff8e 	bl	80087f4 <std>
 80088d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088dc:	2202      	movs	r2, #2
 80088de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e2:	2112      	movs	r1, #18
 80088e4:	f7ff bf86 	b.w	80087f4 <std>
 80088e8:	20002764 	.word	0x20002764
 80088ec:	2000262c 	.word	0x2000262c
 80088f0:	08008861 	.word	0x08008861

080088f4 <__sfp_lock_acquire>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__sfp_lock_acquire+0x8>)
 80088f6:	f000 bb58 	b.w	8008faa <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	2000276d 	.word	0x2000276d

08008900 <__sfp_lock_release>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__sfp_lock_release+0x8>)
 8008902:	f000 bb53 	b.w	8008fac <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	2000276d 	.word	0x2000276d

0800890c <__sinit>:
 800890c:	b510      	push	{r4, lr}
 800890e:	4604      	mov	r4, r0
 8008910:	f7ff fff0 	bl	80088f4 <__sfp_lock_acquire>
 8008914:	6a23      	ldr	r3, [r4, #32]
 8008916:	b11b      	cbz	r3, 8008920 <__sinit+0x14>
 8008918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891c:	f7ff bff0 	b.w	8008900 <__sfp_lock_release>
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <__sinit+0x28>)
 8008922:	6223      	str	r3, [r4, #32]
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <__sinit+0x2c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1f5      	bne.n	8008918 <__sinit+0xc>
 800892c:	f7ff ffc4 	bl	80088b8 <global_stdio_init.part.0>
 8008930:	e7f2      	b.n	8008918 <__sinit+0xc>
 8008932:	bf00      	nop
 8008934:	08008879 	.word	0x08008879
 8008938:	20002764 	.word	0x20002764

0800893c <_fwalk_sglue>:
 800893c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008940:	4607      	mov	r7, r0
 8008942:	4688      	mov	r8, r1
 8008944:	4614      	mov	r4, r2
 8008946:	2600      	movs	r6, #0
 8008948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800894c:	f1b9 0901 	subs.w	r9, r9, #1
 8008950:	d505      	bpl.n	800895e <_fwalk_sglue+0x22>
 8008952:	6824      	ldr	r4, [r4, #0]
 8008954:	2c00      	cmp	r4, #0
 8008956:	d1f7      	bne.n	8008948 <_fwalk_sglue+0xc>
 8008958:	4630      	mov	r0, r6
 800895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d907      	bls.n	8008974 <_fwalk_sglue+0x38>
 8008964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008968:	3301      	adds	r3, #1
 800896a:	d003      	beq.n	8008974 <_fwalk_sglue+0x38>
 800896c:	4629      	mov	r1, r5
 800896e:	4638      	mov	r0, r7
 8008970:	47c0      	blx	r8
 8008972:	4306      	orrs	r6, r0
 8008974:	3568      	adds	r5, #104	; 0x68
 8008976:	e7e9      	b.n	800894c <_fwalk_sglue+0x10>

08008978 <iprintf>:
 8008978:	b40f      	push	{r0, r1, r2, r3}
 800897a:	b507      	push	{r0, r1, r2, lr}
 800897c:	4906      	ldr	r1, [pc, #24]	; (8008998 <iprintf+0x20>)
 800897e:	ab04      	add	r3, sp, #16
 8008980:	6808      	ldr	r0, [r1, #0]
 8008982:	f853 2b04 	ldr.w	r2, [r3], #4
 8008986:	6881      	ldr	r1, [r0, #8]
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f002 fa51 	bl	800ae30 <_vfiprintf_r>
 800898e:	b003      	add	sp, #12
 8008990:	f85d eb04 	ldr.w	lr, [sp], #4
 8008994:	b004      	add	sp, #16
 8008996:	4770      	bx	lr
 8008998:	20000200 	.word	0x20000200

0800899c <_puts_r>:
 800899c:	6a03      	ldr	r3, [r0, #32]
 800899e:	b570      	push	{r4, r5, r6, lr}
 80089a0:	4605      	mov	r5, r0
 80089a2:	460e      	mov	r6, r1
 80089a4:	6884      	ldr	r4, [r0, #8]
 80089a6:	b90b      	cbnz	r3, 80089ac <_puts_r+0x10>
 80089a8:	f7ff ffb0 	bl	800890c <__sinit>
 80089ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ae:	07db      	lsls	r3, r3, #31
 80089b0:	d405      	bmi.n	80089be <_puts_r+0x22>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	0598      	lsls	r0, r3, #22
 80089b6:	d402      	bmi.n	80089be <_puts_r+0x22>
 80089b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ba:	f000 faf6 	bl	8008faa <__retarget_lock_acquire_recursive>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	0719      	lsls	r1, r3, #28
 80089c2:	d513      	bpl.n	80089ec <_puts_r+0x50>
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	b18b      	cbz	r3, 80089ec <_puts_r+0x50>
 80089c8:	3e01      	subs	r6, #1
 80089ca:	68a3      	ldr	r3, [r4, #8]
 80089cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089d0:	3b01      	subs	r3, #1
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	b9e9      	cbnz	r1, 8008a12 <_puts_r+0x76>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da2e      	bge.n	8008a38 <_puts_r+0x9c>
 80089da:	4622      	mov	r2, r4
 80089dc:	210a      	movs	r1, #10
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f929 	bl	8008c36 <__swbuf_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d007      	beq.n	80089f8 <_puts_r+0x5c>
 80089e8:	250a      	movs	r5, #10
 80089ea:	e007      	b.n	80089fc <_puts_r+0x60>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f95e 	bl	8008cb0 <__swsetup_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d0e7      	beq.n	80089c8 <_puts_r+0x2c>
 80089f8:	f04f 35ff 	mov.w	r5, #4294967295
 80089fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089fe:	07da      	lsls	r2, r3, #31
 8008a00:	d405      	bmi.n	8008a0e <_puts_r+0x72>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	059b      	lsls	r3, r3, #22
 8008a06:	d402      	bmi.n	8008a0e <_puts_r+0x72>
 8008a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0a:	f000 facf 	bl	8008fac <__retarget_lock_release_recursive>
 8008a0e:	4628      	mov	r0, r5
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da04      	bge.n	8008a20 <_puts_r+0x84>
 8008a16:	69a2      	ldr	r2, [r4, #24]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	dc06      	bgt.n	8008a2a <_puts_r+0x8e>
 8008a1c:	290a      	cmp	r1, #10
 8008a1e:	d004      	beq.n	8008a2a <_puts_r+0x8e>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	6022      	str	r2, [r4, #0]
 8008a26:	7019      	strb	r1, [r3, #0]
 8008a28:	e7cf      	b.n	80089ca <_puts_r+0x2e>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f902 	bl	8008c36 <__swbuf_r>
 8008a32:	3001      	adds	r0, #1
 8008a34:	d1c9      	bne.n	80089ca <_puts_r+0x2e>
 8008a36:	e7df      	b.n	80089f8 <_puts_r+0x5c>
 8008a38:	250a      	movs	r5, #10
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	701d      	strb	r5, [r3, #0]
 8008a42:	e7db      	b.n	80089fc <_puts_r+0x60>

08008a44 <puts>:
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <puts+0xc>)
 8008a46:	4601      	mov	r1, r0
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	f7ff bfa7 	b.w	800899c <_puts_r>
 8008a4e:	bf00      	nop
 8008a50:	20000200 	.word	0x20000200

08008a54 <setvbuf>:
 8008a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	461d      	mov	r5, r3
 8008a5a:	4b54      	ldr	r3, [pc, #336]	; (8008bac <setvbuf+0x158>)
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	681f      	ldr	r7, [r3, #0]
 8008a60:	460e      	mov	r6, r1
 8008a62:	4690      	mov	r8, r2
 8008a64:	b127      	cbz	r7, 8008a70 <setvbuf+0x1c>
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	b913      	cbnz	r3, 8008a70 <setvbuf+0x1c>
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff ff4e 	bl	800890c <__sinit>
 8008a70:	f1b8 0f02 	cmp.w	r8, #2
 8008a74:	d006      	beq.n	8008a84 <setvbuf+0x30>
 8008a76:	f1b8 0f01 	cmp.w	r8, #1
 8008a7a:	f200 8094 	bhi.w	8008ba6 <setvbuf+0x152>
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	f2c0 8091 	blt.w	8008ba6 <setvbuf+0x152>
 8008a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a86:	07da      	lsls	r2, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <setvbuf+0x42>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	059b      	lsls	r3, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <setvbuf+0x42>
 8008a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a92:	f000 fa8a 	bl	8008faa <__retarget_lock_acquire_recursive>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f002 fb65 	bl	800b168 <_fflush_r>
 8008a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aa0:	b141      	cbz	r1, 8008ab4 <setvbuf+0x60>
 8008aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	d002      	beq.n	8008ab0 <setvbuf+0x5c>
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f001 f93c 	bl	8009d28 <_free_r>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6363      	str	r3, [r4, #52]	; 0x34
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61a3      	str	r3, [r4, #24]
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	0618      	lsls	r0, r3, #24
 8008abe:	d503      	bpl.n	8008ac8 <setvbuf+0x74>
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	6921      	ldr	r1, [r4, #16]
 8008ac4:	f001 f930 	bl	8009d28 <_free_r>
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	f1b8 0f02 	cmp.w	r8, #2
 8008ace:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	d05f      	beq.n	8008b9a <setvbuf+0x146>
 8008ada:	ab01      	add	r3, sp, #4
 8008adc:	466a      	mov	r2, sp
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f002 fb7b 	bl	800b1dc <__swhatbuf_r>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	4318      	orrs	r0, r3
 8008aea:	81a0      	strh	r0, [r4, #12]
 8008aec:	bb2d      	cbnz	r5, 8008b3a <setvbuf+0xe6>
 8008aee:	9d00      	ldr	r5, [sp, #0]
 8008af0:	4628      	mov	r0, r5
 8008af2:	f7fe fa61 	bl	8006fb8 <malloc>
 8008af6:	4606      	mov	r6, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d150      	bne.n	8008b9e <setvbuf+0x14a>
 8008afc:	f8dd 9000 	ldr.w	r9, [sp]
 8008b00:	45a9      	cmp	r9, r5
 8008b02:	d13e      	bne.n	8008b82 <setvbuf+0x12e>
 8008b04:	f04f 35ff 	mov.w	r5, #4294967295
 8008b08:	2200      	movs	r2, #0
 8008b0a:	60a2      	str	r2, [r4, #8]
 8008b0c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008b10:	6022      	str	r2, [r4, #0]
 8008b12:	6122      	str	r2, [r4, #16]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1a:	6162      	str	r2, [r4, #20]
 8008b1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b1e:	f043 0302 	orr.w	r3, r3, #2
 8008b22:	07d1      	lsls	r1, r2, #31
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	d404      	bmi.n	8008b32 <setvbuf+0xde>
 8008b28:	059b      	lsls	r3, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <setvbuf+0xde>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2e:	f000 fa3d 	bl	8008fac <__retarget_lock_release_recursive>
 8008b32:	4628      	mov	r0, r5
 8008b34:	b003      	add	sp, #12
 8008b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	d0d8      	beq.n	8008af0 <setvbuf+0x9c>
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	b913      	cbnz	r3, 8008b48 <setvbuf+0xf4>
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff fee2 	bl	800890c <__sinit>
 8008b48:	f1b8 0f01 	cmp.w	r8, #1
 8008b4c:	bf08      	it	eq
 8008b4e:	89a3      	ldrheq	r3, [r4, #12]
 8008b50:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008b54:	bf04      	itt	eq
 8008b56:	f043 0301 	orreq.w	r3, r3, #1
 8008b5a:	81a3      	strheq	r3, [r4, #12]
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	6026      	str	r6, [r4, #0]
 8008b60:	f013 0208 	ands.w	r2, r3, #8
 8008b64:	d01d      	beq.n	8008ba2 <setvbuf+0x14e>
 8008b66:	07da      	lsls	r2, r3, #31
 8008b68:	bf41      	itttt	mi
 8008b6a:	2200      	movmi	r2, #0
 8008b6c:	426d      	negmi	r5, r5
 8008b6e:	60a2      	strmi	r2, [r4, #8]
 8008b70:	61a5      	strmi	r5, [r4, #24]
 8008b72:	bf58      	it	pl
 8008b74:	60a5      	strpl	r5, [r4, #8]
 8008b76:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008b78:	f015 0501 	ands.w	r5, r5, #1
 8008b7c:	d0d4      	beq.n	8008b28 <setvbuf+0xd4>
 8008b7e:	2500      	movs	r5, #0
 8008b80:	e7d7      	b.n	8008b32 <setvbuf+0xde>
 8008b82:	4648      	mov	r0, r9
 8008b84:	f7fe fa18 	bl	8006fb8 <malloc>
 8008b88:	4606      	mov	r6, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0ba      	beq.n	8008b04 <setvbuf+0xb0>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	464d      	mov	r5, r9
 8008b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	e7d1      	b.n	8008b3e <setvbuf+0xea>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	e7b4      	b.n	8008b08 <setvbuf+0xb4>
 8008b9e:	46a9      	mov	r9, r5
 8008ba0:	e7f5      	b.n	8008b8e <setvbuf+0x13a>
 8008ba2:	60a2      	str	r2, [r4, #8]
 8008ba4:	e7e7      	b.n	8008b76 <setvbuf+0x122>
 8008ba6:	f04f 35ff 	mov.w	r5, #4294967295
 8008baa:	e7c2      	b.n	8008b32 <setvbuf+0xde>
 8008bac:	20000200 	.word	0x20000200

08008bb0 <__sread>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb8:	f000 f998 	bl	8008eec <_read_r>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	bfab      	itete	ge
 8008bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8008bc4:	181b      	addge	r3, r3, r0
 8008bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bca:	bfac      	ite	ge
 8008bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bce:	81a3      	strhlt	r3, [r4, #12]
 8008bd0:	bd10      	pop	{r4, pc}

08008bd2 <__swrite>:
 8008bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd6:	461f      	mov	r7, r3
 8008bd8:	898b      	ldrh	r3, [r1, #12]
 8008bda:	4605      	mov	r5, r0
 8008bdc:	05db      	lsls	r3, r3, #23
 8008bde:	460c      	mov	r4, r1
 8008be0:	4616      	mov	r6, r2
 8008be2:	d505      	bpl.n	8008bf0 <__swrite+0x1e>
 8008be4:	2302      	movs	r3, #2
 8008be6:	2200      	movs	r2, #0
 8008be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bec:	f000 f96c 	bl	8008ec8 <_lseek_r>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	463b      	mov	r3, r7
 8008bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	f000 b993 	b.w	8008f30 <_write_r>

08008c0a <__sseek>:
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c12:	f000 f959 	bl	8008ec8 <_lseek_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	bf15      	itete	ne
 8008c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c26:	81a3      	strheq	r3, [r4, #12]
 8008c28:	bf18      	it	ne
 8008c2a:	81a3      	strhne	r3, [r4, #12]
 8008c2c:	bd10      	pop	{r4, pc}

08008c2e <__sclose>:
 8008c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c32:	f000 b939 	b.w	8008ea8 <_close_r>

08008c36 <__swbuf_r>:
 8008c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c38:	460e      	mov	r6, r1
 8008c3a:	4614      	mov	r4, r2
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	b118      	cbz	r0, 8008c48 <__swbuf_r+0x12>
 8008c40:	6a03      	ldr	r3, [r0, #32]
 8008c42:	b90b      	cbnz	r3, 8008c48 <__swbuf_r+0x12>
 8008c44:	f7ff fe62 	bl	800890c <__sinit>
 8008c48:	69a3      	ldr	r3, [r4, #24]
 8008c4a:	60a3      	str	r3, [r4, #8]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	071a      	lsls	r2, r3, #28
 8008c50:	d525      	bpl.n	8008c9e <__swbuf_r+0x68>
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	b31b      	cbz	r3, 8008c9e <__swbuf_r+0x68>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	6922      	ldr	r2, [r4, #16]
 8008c5a:	b2f6      	uxtb	r6, r6
 8008c5c:	1a98      	subs	r0, r3, r2
 8008c5e:	6963      	ldr	r3, [r4, #20]
 8008c60:	4637      	mov	r7, r6
 8008c62:	4283      	cmp	r3, r0
 8008c64:	dc04      	bgt.n	8008c70 <__swbuf_r+0x3a>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f002 fa7d 	bl	800b168 <_fflush_r>
 8008c6e:	b9e0      	cbnz	r0, 8008caa <__swbuf_r+0x74>
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	60a3      	str	r3, [r4, #8]
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	6022      	str	r2, [r4, #0]
 8008c7c:	701e      	strb	r6, [r3, #0]
 8008c7e:	6962      	ldr	r2, [r4, #20]
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d004      	beq.n	8008c90 <__swbuf_r+0x5a>
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	07db      	lsls	r3, r3, #31
 8008c8a:	d506      	bpl.n	8008c9a <__swbuf_r+0x64>
 8008c8c:	2e0a      	cmp	r6, #10
 8008c8e:	d104      	bne.n	8008c9a <__swbuf_r+0x64>
 8008c90:	4621      	mov	r1, r4
 8008c92:	4628      	mov	r0, r5
 8008c94:	f002 fa68 	bl	800b168 <_fflush_r>
 8008c98:	b938      	cbnz	r0, 8008caa <__swbuf_r+0x74>
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 f805 	bl	8008cb0 <__swsetup_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0d5      	beq.n	8008c56 <__swbuf_r+0x20>
 8008caa:	f04f 37ff 	mov.w	r7, #4294967295
 8008cae:	e7f4      	b.n	8008c9a <__swbuf_r+0x64>

08008cb0 <__swsetup_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4b2a      	ldr	r3, [pc, #168]	; (8008d5c <__swsetup_r+0xac>)
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	460c      	mov	r4, r1
 8008cba:	b118      	cbz	r0, 8008cc4 <__swsetup_r+0x14>
 8008cbc:	6a03      	ldr	r3, [r0, #32]
 8008cbe:	b90b      	cbnz	r3, 8008cc4 <__swsetup_r+0x14>
 8008cc0:	f7ff fe24 	bl	800890c <__sinit>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cca:	0718      	lsls	r0, r3, #28
 8008ccc:	d422      	bmi.n	8008d14 <__swsetup_r+0x64>
 8008cce:	06d9      	lsls	r1, r3, #27
 8008cd0:	d407      	bmi.n	8008ce2 <__swsetup_r+0x32>
 8008cd2:	2309      	movs	r3, #9
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cda:	f04f 30ff 	mov.w	r0, #4294967295
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	e034      	b.n	8008d4c <__swsetup_r+0x9c>
 8008ce2:	0758      	lsls	r0, r3, #29
 8008ce4:	d512      	bpl.n	8008d0c <__swsetup_r+0x5c>
 8008ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ce8:	b141      	cbz	r1, 8008cfc <__swsetup_r+0x4c>
 8008cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	d002      	beq.n	8008cf8 <__swsetup_r+0x48>
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f001 f818 	bl	8009d28 <_free_r>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	6363      	str	r3, [r4, #52]	; 0x34
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	2300      	movs	r3, #0
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	f043 0308 	orr.w	r3, r3, #8
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	b94b      	cbnz	r3, 8008d2c <__swsetup_r+0x7c>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d22:	d003      	beq.n	8008d2c <__swsetup_r+0x7c>
 8008d24:	4621      	mov	r1, r4
 8008d26:	4628      	mov	r0, r5
 8008d28:	f002 fa7d 	bl	800b226 <__smakebuf_r>
 8008d2c:	89a0      	ldrh	r0, [r4, #12]
 8008d2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d32:	f010 0301 	ands.w	r3, r0, #1
 8008d36:	d00a      	beq.n	8008d4e <__swsetup_r+0x9e>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60a3      	str	r3, [r4, #8]
 8008d3c:	6963      	ldr	r3, [r4, #20]
 8008d3e:	425b      	negs	r3, r3
 8008d40:	61a3      	str	r3, [r4, #24]
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	b943      	cbnz	r3, 8008d58 <__swsetup_r+0xa8>
 8008d46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d4a:	d1c4      	bne.n	8008cd6 <__swsetup_r+0x26>
 8008d4c:	bd38      	pop	{r3, r4, r5, pc}
 8008d4e:	0781      	lsls	r1, r0, #30
 8008d50:	bf58      	it	pl
 8008d52:	6963      	ldrpl	r3, [r4, #20]
 8008d54:	60a3      	str	r3, [r4, #8]
 8008d56:	e7f4      	b.n	8008d42 <__swsetup_r+0x92>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e7f7      	b.n	8008d4c <__swsetup_r+0x9c>
 8008d5c:	20000200 	.word	0x20000200

08008d60 <memset>:
 8008d60:	4603      	mov	r3, r0
 8008d62:	4402      	add	r2, r0
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d100      	bne.n	8008d6a <memset+0xa>
 8008d68:	4770      	bx	lr
 8008d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6e:	e7f9      	b.n	8008d64 <memset+0x4>

08008d70 <strncmp>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	b16a      	cbz	r2, 8008d90 <strncmp+0x20>
 8008d74:	3901      	subs	r1, #1
 8008d76:	1884      	adds	r4, r0, r2
 8008d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d103      	bne.n	8008d8c <strncmp+0x1c>
 8008d84:	42a0      	cmp	r0, r4
 8008d86:	d001      	beq.n	8008d8c <strncmp+0x1c>
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	d1f5      	bne.n	8008d78 <strncmp+0x8>
 8008d8c:	1ad0      	subs	r0, r2, r3
 8008d8e:	bd10      	pop	{r4, pc}
 8008d90:	4610      	mov	r0, r2
 8008d92:	e7fc      	b.n	8008d8e <strncmp+0x1e>

08008d94 <strncpy>:
 8008d94:	4603      	mov	r3, r0
 8008d96:	b510      	push	{r4, lr}
 8008d98:	3901      	subs	r1, #1
 8008d9a:	b132      	cbz	r2, 8008daa <strncpy+0x16>
 8008d9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008da0:	3a01      	subs	r2, #1
 8008da2:	f803 4b01 	strb.w	r4, [r3], #1
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	d1f7      	bne.n	8008d9a <strncpy+0x6>
 8008daa:	2100      	movs	r1, #0
 8008dac:	441a      	add	r2, r3
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d100      	bne.n	8008db4 <strncpy+0x20>
 8008db2:	bd10      	pop	{r4, pc}
 8008db4:	f803 1b01 	strb.w	r1, [r3], #1
 8008db8:	e7f9      	b.n	8008dae <strncpy+0x1a>
	...

08008dbc <strtok>:
 8008dbc:	4b16      	ldr	r3, [pc, #88]	; (8008e18 <strtok+0x5c>)
 8008dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	681f      	ldr	r7, [r3, #0]
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008dc8:	460e      	mov	r6, r1
 8008dca:	b9ec      	cbnz	r4, 8008e08 <strtok+0x4c>
 8008dcc:	2050      	movs	r0, #80	; 0x50
 8008dce:	f7fe f8f3 	bl	8006fb8 <malloc>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	6478      	str	r0, [r7, #68]	; 0x44
 8008dd6:	b920      	cbnz	r0, 8008de2 <strtok+0x26>
 8008dd8:	215b      	movs	r1, #91	; 0x5b
 8008dda:	4b10      	ldr	r3, [pc, #64]	; (8008e1c <strtok+0x60>)
 8008ddc:	4810      	ldr	r0, [pc, #64]	; (8008e20 <strtok+0x64>)
 8008dde:	f000 f915 	bl	800900c <__assert_func>
 8008de2:	e9c0 4400 	strd	r4, r4, [r0]
 8008de6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008dea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008dee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008df2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008df6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008dfa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008dfe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008e02:	6184      	str	r4, [r0, #24]
 8008e04:	7704      	strb	r4, [r0, #28]
 8008e06:	6244      	str	r4, [r0, #36]	; 0x24
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	f000 b806 	b.w	8008e24 <__strtok_r>
 8008e18:	20000200 	.word	0x20000200
 8008e1c:	0800b7e5 	.word	0x0800b7e5
 8008e20:	0800b7fc 	.word	0x0800b7fc

08008e24 <__strtok_r>:
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	b908      	cbnz	r0, 8008e2c <__strtok_r+0x8>
 8008e28:	6810      	ldr	r0, [r2, #0]
 8008e2a:	b188      	cbz	r0, 8008e50 <__strtok_r+0x2c>
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	4620      	mov	r0, r4
 8008e32:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e3a:	b91e      	cbnz	r6, 8008e44 <__strtok_r+0x20>
 8008e3c:	b965      	cbnz	r5, 8008e58 <__strtok_r+0x34>
 8008e3e:	4628      	mov	r0, r5
 8008e40:	6015      	str	r5, [r2, #0]
 8008e42:	e005      	b.n	8008e50 <__strtok_r+0x2c>
 8008e44:	42b5      	cmp	r5, r6
 8008e46:	d1f6      	bne.n	8008e36 <__strtok_r+0x12>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f0      	bne.n	8008e2e <__strtok_r+0xa>
 8008e4c:	6014      	str	r4, [r2, #0]
 8008e4e:	7003      	strb	r3, [r0, #0]
 8008e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e52:	461c      	mov	r4, r3
 8008e54:	e00c      	b.n	8008e70 <__strtok_r+0x4c>
 8008e56:	b915      	cbnz	r5, 8008e5e <__strtok_r+0x3a>
 8008e58:	460e      	mov	r6, r1
 8008e5a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008e62:	42ab      	cmp	r3, r5
 8008e64:	d1f7      	bne.n	8008e56 <__strtok_r+0x32>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0f3      	beq.n	8008e52 <__strtok_r+0x2e>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008e70:	6014      	str	r4, [r2, #0]
 8008e72:	e7ed      	b.n	8008e50 <__strtok_r+0x2c>

08008e74 <strstr>:
 8008e74:	780a      	ldrb	r2, [r1, #0]
 8008e76:	b570      	push	{r4, r5, r6, lr}
 8008e78:	b96a      	cbnz	r2, 8008e96 <strstr+0x22>
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d109      	bne.n	8008e94 <strstr+0x20>
 8008e80:	460c      	mov	r4, r1
 8008e82:	4605      	mov	r5, r0
 8008e84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0f6      	beq.n	8008e7a <strstr+0x6>
 8008e8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008e90:	429e      	cmp	r6, r3
 8008e92:	d0f7      	beq.n	8008e84 <strstr+0x10>
 8008e94:	3001      	adds	r0, #1
 8008e96:	7803      	ldrb	r3, [r0, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1ef      	bne.n	8008e7c <strstr+0x8>
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	e7ec      	b.n	8008e7a <strstr+0x6>

08008ea0 <_localeconv_r>:
 8008ea0:	4800      	ldr	r0, [pc, #0]	; (8008ea4 <_localeconv_r+0x4>)
 8008ea2:	4770      	bx	lr
 8008ea4:	20000138 	.word	0x20000138

08008ea8 <_close_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4d05      	ldr	r5, [pc, #20]	; (8008ec4 <_close_r+0x1c>)
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	f7fa ff60 	bl	8003d78 <_close>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_close_r+0x1a>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_close_r+0x1a>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20002768 	.word	0x20002768

08008ec8 <_lseek_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4d05      	ldr	r5, [pc, #20]	; (8008ee8 <_lseek_r+0x20>)
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f7fa ff72 	bl	8003dc0 <_lseek>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_lseek_r+0x1e>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_lseek_r+0x1e>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	20002768 	.word	0x20002768

08008eec <_read_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4d05      	ldr	r5, [pc, #20]	; (8008f0c <_read_r+0x20>)
 8008ef8:	602a      	str	r2, [r5, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f7fa ff1f 	bl	8003d3e <_read>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d102      	bne.n	8008f0a <_read_r+0x1e>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	b103      	cbz	r3, 8008f0a <_read_r+0x1e>
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	bd38      	pop	{r3, r4, r5, pc}
 8008f0c:	20002768 	.word	0x20002768

08008f10 <_sbrk_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	2300      	movs	r3, #0
 8008f14:	4d05      	ldr	r5, [pc, #20]	; (8008f2c <_sbrk_r+0x1c>)
 8008f16:	4604      	mov	r4, r0
 8008f18:	4608      	mov	r0, r1
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	f7fa ff5c 	bl	8003dd8 <_sbrk>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_sbrk_r+0x1a>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_sbrk_r+0x1a>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	20002768 	.word	0x20002768

08008f30 <_write_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4d05      	ldr	r5, [pc, #20]	; (8008f50 <_write_r+0x20>)
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f9 f940 	bl	80021c4 <_write>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_write_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_write_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20002768 	.word	0x20002768

08008f54 <__errno>:
 8008f54:	4b01      	ldr	r3, [pc, #4]	; (8008f5c <__errno+0x8>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000200 	.word	0x20000200

08008f60 <__libc_init_array>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	2600      	movs	r6, #0
 8008f64:	4d0c      	ldr	r5, [pc, #48]	; (8008f98 <__libc_init_array+0x38>)
 8008f66:	4c0d      	ldr	r4, [pc, #52]	; (8008f9c <__libc_init_array+0x3c>)
 8008f68:	1b64      	subs	r4, r4, r5
 8008f6a:	10a4      	asrs	r4, r4, #2
 8008f6c:	42a6      	cmp	r6, r4
 8008f6e:	d109      	bne.n	8008f84 <__libc_init_array+0x24>
 8008f70:	f002 fa18 	bl	800b3a4 <_init>
 8008f74:	2600      	movs	r6, #0
 8008f76:	4d0a      	ldr	r5, [pc, #40]	; (8008fa0 <__libc_init_array+0x40>)
 8008f78:	4c0a      	ldr	r4, [pc, #40]	; (8008fa4 <__libc_init_array+0x44>)
 8008f7a:	1b64      	subs	r4, r4, r5
 8008f7c:	10a4      	asrs	r4, r4, #2
 8008f7e:	42a6      	cmp	r6, r4
 8008f80:	d105      	bne.n	8008f8e <__libc_init_array+0x2e>
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f88:	4798      	blx	r3
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	e7ee      	b.n	8008f6c <__libc_init_array+0xc>
 8008f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f92:	4798      	blx	r3
 8008f94:	3601      	adds	r6, #1
 8008f96:	e7f2      	b.n	8008f7e <__libc_init_array+0x1e>
 8008f98:	0800bae0 	.word	0x0800bae0
 8008f9c:	0800bae0 	.word	0x0800bae0
 8008fa0:	0800bae0 	.word	0x0800bae0
 8008fa4:	0800bae4 	.word	0x0800bae4

08008fa8 <__retarget_lock_init_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_acquire_recursive>:
 8008faa:	4770      	bx	lr

08008fac <__retarget_lock_release_recursive>:
 8008fac:	4770      	bx	lr

08008fae <strcpy>:
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fb4:	f803 2b01 	strb.w	r2, [r3], #1
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	d1f9      	bne.n	8008fb0 <strcpy+0x2>
 8008fbc:	4770      	bx	lr

08008fbe <memchr>:
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	b2c9      	uxtb	r1, r1
 8008fc4:	4402      	add	r2, r0
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	d101      	bne.n	8008fd0 <memchr+0x12>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e003      	b.n	8008fd8 <memchr+0x1a>
 8008fd0:	7804      	ldrb	r4, [r0, #0]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	428c      	cmp	r4, r1
 8008fd6:	d1f6      	bne.n	8008fc6 <memchr+0x8>
 8008fd8:	bd10      	pop	{r4, pc}

08008fda <memcpy>:
 8008fda:	440a      	add	r2, r1
 8008fdc:	4291      	cmp	r1, r2
 8008fde:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fe2:	d100      	bne.n	8008fe6 <memcpy+0xc>
 8008fe4:	4770      	bx	lr
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fec:	4291      	cmp	r1, r2
 8008fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff2:	d1f9      	bne.n	8008fe8 <memcpy+0xe>
 8008ff4:	bd10      	pop	{r4, pc}
	...

08008ff8 <nan>:
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4901      	ldr	r1, [pc, #4]	; (8009000 <nan+0x8>)
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	7ff80000 	.word	0x7ff80000

08009004 <nanf>:
 8009004:	4800      	ldr	r0, [pc, #0]	; (8009008 <nanf+0x4>)
 8009006:	4770      	bx	lr
 8009008:	7fc00000 	.word	0x7fc00000

0800900c <__assert_func>:
 800900c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800900e:	4614      	mov	r4, r2
 8009010:	461a      	mov	r2, r3
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <__assert_func+0x2c>)
 8009014:	4605      	mov	r5, r0
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68d8      	ldr	r0, [r3, #12]
 800901a:	b14c      	cbz	r4, 8009030 <__assert_func+0x24>
 800901c:	4b07      	ldr	r3, [pc, #28]	; (800903c <__assert_func+0x30>)
 800901e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009022:	9100      	str	r1, [sp, #0]
 8009024:	462b      	mov	r3, r5
 8009026:	4906      	ldr	r1, [pc, #24]	; (8009040 <__assert_func+0x34>)
 8009028:	f002 f8c6 	bl	800b1b8 <fiprintf>
 800902c:	f002 f95a 	bl	800b2e4 <abort>
 8009030:	4b04      	ldr	r3, [pc, #16]	; (8009044 <__assert_func+0x38>)
 8009032:	461c      	mov	r4, r3
 8009034:	e7f3      	b.n	800901e <__assert_func+0x12>
 8009036:	bf00      	nop
 8009038:	20000200 	.word	0x20000200
 800903c:	0800b85e 	.word	0x0800b85e
 8009040:	0800b86b 	.word	0x0800b86b
 8009044:	0800b899 	.word	0x0800b899

08009048 <quorem>:
 8009048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	6903      	ldr	r3, [r0, #16]
 800904e:	690c      	ldr	r4, [r1, #16]
 8009050:	4607      	mov	r7, r0
 8009052:	42a3      	cmp	r3, r4
 8009054:	db7f      	blt.n	8009156 <quorem+0x10e>
 8009056:	3c01      	subs	r4, #1
 8009058:	f100 0514 	add.w	r5, r0, #20
 800905c:	f101 0814 	add.w	r8, r1, #20
 8009060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800906a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800906e:	3301      	adds	r3, #1
 8009070:	429a      	cmp	r2, r3
 8009072:	fbb2 f6f3 	udiv	r6, r2, r3
 8009076:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800907a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800907e:	d331      	bcc.n	80090e4 <quorem+0x9c>
 8009080:	f04f 0e00 	mov.w	lr, #0
 8009084:	4640      	mov	r0, r8
 8009086:	46ac      	mov	ip, r5
 8009088:	46f2      	mov	sl, lr
 800908a:	f850 2b04 	ldr.w	r2, [r0], #4
 800908e:	b293      	uxth	r3, r2
 8009090:	fb06 e303 	mla	r3, r6, r3, lr
 8009094:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009098:	0c1a      	lsrs	r2, r3, #16
 800909a:	b29b      	uxth	r3, r3
 800909c:	fb06 220e 	mla	r2, r6, lr, r2
 80090a0:	ebaa 0303 	sub.w	r3, sl, r3
 80090a4:	f8dc a000 	ldr.w	sl, [ip]
 80090a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090ac:	fa1f fa8a 	uxth.w	sl, sl
 80090b0:	4453      	add	r3, sl
 80090b2:	f8dc a000 	ldr.w	sl, [ip]
 80090b6:	b292      	uxth	r2, r2
 80090b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090c6:	4581      	cmp	r9, r0
 80090c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090cc:	f84c 3b04 	str.w	r3, [ip], #4
 80090d0:	d2db      	bcs.n	800908a <quorem+0x42>
 80090d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80090d6:	b92b      	cbnz	r3, 80090e4 <quorem+0x9c>
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	3b04      	subs	r3, #4
 80090dc:	429d      	cmp	r5, r3
 80090de:	461a      	mov	r2, r3
 80090e0:	d32d      	bcc.n	800913e <quorem+0xf6>
 80090e2:	613c      	str	r4, [r7, #16]
 80090e4:	4638      	mov	r0, r7
 80090e6:	f001 fc97 	bl	800aa18 <__mcmp>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	db23      	blt.n	8009136 <quorem+0xee>
 80090ee:	4629      	mov	r1, r5
 80090f0:	2000      	movs	r0, #0
 80090f2:	3601      	adds	r6, #1
 80090f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80090f8:	f8d1 c000 	ldr.w	ip, [r1]
 80090fc:	b293      	uxth	r3, r2
 80090fe:	1ac3      	subs	r3, r0, r3
 8009100:	0c12      	lsrs	r2, r2, #16
 8009102:	fa1f f08c 	uxth.w	r0, ip
 8009106:	4403      	add	r3, r0
 8009108:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800910c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009110:	b29b      	uxth	r3, r3
 8009112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009116:	45c1      	cmp	r9, r8
 8009118:	ea4f 4022 	mov.w	r0, r2, asr #16
 800911c:	f841 3b04 	str.w	r3, [r1], #4
 8009120:	d2e8      	bcs.n	80090f4 <quorem+0xac>
 8009122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800912a:	b922      	cbnz	r2, 8009136 <quorem+0xee>
 800912c:	3b04      	subs	r3, #4
 800912e:	429d      	cmp	r5, r3
 8009130:	461a      	mov	r2, r3
 8009132:	d30a      	bcc.n	800914a <quorem+0x102>
 8009134:	613c      	str	r4, [r7, #16]
 8009136:	4630      	mov	r0, r6
 8009138:	b003      	add	sp, #12
 800913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	6812      	ldr	r2, [r2, #0]
 8009140:	3b04      	subs	r3, #4
 8009142:	2a00      	cmp	r2, #0
 8009144:	d1cd      	bne.n	80090e2 <quorem+0x9a>
 8009146:	3c01      	subs	r4, #1
 8009148:	e7c8      	b.n	80090dc <quorem+0x94>
 800914a:	6812      	ldr	r2, [r2, #0]
 800914c:	3b04      	subs	r3, #4
 800914e:	2a00      	cmp	r2, #0
 8009150:	d1f0      	bne.n	8009134 <quorem+0xec>
 8009152:	3c01      	subs	r4, #1
 8009154:	e7eb      	b.n	800912e <quorem+0xe6>
 8009156:	2000      	movs	r0, #0
 8009158:	e7ee      	b.n	8009138 <quorem+0xf0>
 800915a:	0000      	movs	r0, r0
 800915c:	0000      	movs	r0, r0
	...

08009160 <_dtoa_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	4616      	mov	r6, r2
 8009166:	461f      	mov	r7, r3
 8009168:	69c4      	ldr	r4, [r0, #28]
 800916a:	b099      	sub	sp, #100	; 0x64
 800916c:	4605      	mov	r5, r0
 800916e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009172:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009176:	b974      	cbnz	r4, 8009196 <_dtoa_r+0x36>
 8009178:	2010      	movs	r0, #16
 800917a:	f7fd ff1d 	bl	8006fb8 <malloc>
 800917e:	4602      	mov	r2, r0
 8009180:	61e8      	str	r0, [r5, #28]
 8009182:	b920      	cbnz	r0, 800918e <_dtoa_r+0x2e>
 8009184:	21ef      	movs	r1, #239	; 0xef
 8009186:	4bac      	ldr	r3, [pc, #688]	; (8009438 <_dtoa_r+0x2d8>)
 8009188:	48ac      	ldr	r0, [pc, #688]	; (800943c <_dtoa_r+0x2dc>)
 800918a:	f7ff ff3f 	bl	800900c <__assert_func>
 800918e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009192:	6004      	str	r4, [r0, #0]
 8009194:	60c4      	str	r4, [r0, #12]
 8009196:	69eb      	ldr	r3, [r5, #28]
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	b151      	cbz	r1, 80091b2 <_dtoa_r+0x52>
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	2301      	movs	r3, #1
 80091a0:	4093      	lsls	r3, r2
 80091a2:	604a      	str	r2, [r1, #4]
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	4628      	mov	r0, r5
 80091a8:	f001 f9b2 	bl	800a510 <_Bfree>
 80091ac:	2200      	movs	r2, #0
 80091ae:	69eb      	ldr	r3, [r5, #28]
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	1e3b      	subs	r3, r7, #0
 80091b4:	bfaf      	iteee	ge
 80091b6:	2300      	movge	r3, #0
 80091b8:	2201      	movlt	r2, #1
 80091ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091be:	9305      	strlt	r3, [sp, #20]
 80091c0:	bfa8      	it	ge
 80091c2:	f8c8 3000 	strge.w	r3, [r8]
 80091c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80091ca:	4b9d      	ldr	r3, [pc, #628]	; (8009440 <_dtoa_r+0x2e0>)
 80091cc:	bfb8      	it	lt
 80091ce:	f8c8 2000 	strlt.w	r2, [r8]
 80091d2:	ea33 0309 	bics.w	r3, r3, r9
 80091d6:	d119      	bne.n	800920c <_dtoa_r+0xac>
 80091d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80091dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091e4:	4333      	orrs	r3, r6
 80091e6:	f000 8589 	beq.w	8009cfc <_dtoa_r+0xb9c>
 80091ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091ec:	b953      	cbnz	r3, 8009204 <_dtoa_r+0xa4>
 80091ee:	4b95      	ldr	r3, [pc, #596]	; (8009444 <_dtoa_r+0x2e4>)
 80091f0:	e023      	b.n	800923a <_dtoa_r+0xda>
 80091f2:	4b95      	ldr	r3, [pc, #596]	; (8009448 <_dtoa_r+0x2e8>)
 80091f4:	9303      	str	r3, [sp, #12]
 80091f6:	3308      	adds	r3, #8
 80091f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	9803      	ldr	r0, [sp, #12]
 80091fe:	b019      	add	sp, #100	; 0x64
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	4b8f      	ldr	r3, [pc, #572]	; (8009444 <_dtoa_r+0x2e4>)
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	3303      	adds	r3, #3
 800920a:	e7f5      	b.n	80091f8 <_dtoa_r+0x98>
 800920c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009210:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009218:	2200      	movs	r2, #0
 800921a:	2300      	movs	r3, #0
 800921c:	f7f7 fbce 	bl	80009bc <__aeabi_dcmpeq>
 8009220:	4680      	mov	r8, r0
 8009222:	b160      	cbz	r0, 800923e <_dtoa_r+0xde>
 8009224:	2301      	movs	r3, #1
 8009226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8562 	beq.w	8009cf6 <_dtoa_r+0xb96>
 8009232:	4b86      	ldr	r3, [pc, #536]	; (800944c <_dtoa_r+0x2ec>)
 8009234:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	3b01      	subs	r3, #1
 800923a:	9303      	str	r3, [sp, #12]
 800923c:	e7de      	b.n	80091fc <_dtoa_r+0x9c>
 800923e:	ab16      	add	r3, sp, #88	; 0x58
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	ab17      	add	r3, sp, #92	; 0x5c
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4628      	mov	r0, r5
 8009248:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800924c:	f001 fcf4 	bl	800ac38 <__d2b>
 8009250:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009254:	4682      	mov	sl, r0
 8009256:	2c00      	cmp	r4, #0
 8009258:	d07e      	beq.n	8009358 <_dtoa_r+0x1f8>
 800925a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800925e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009260:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009268:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800926c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009270:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009274:	4619      	mov	r1, r3
 8009276:	2200      	movs	r2, #0
 8009278:	4b75      	ldr	r3, [pc, #468]	; (8009450 <_dtoa_r+0x2f0>)
 800927a:	f7f6 ff7f 	bl	800017c <__aeabi_dsub>
 800927e:	a368      	add	r3, pc, #416	; (adr r3, 8009420 <_dtoa_r+0x2c0>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f7f7 f932 	bl	80004ec <__aeabi_dmul>
 8009288:	a367      	add	r3, pc, #412	; (adr r3, 8009428 <_dtoa_r+0x2c8>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f6 ff77 	bl	8000180 <__adddf3>
 8009292:	4606      	mov	r6, r0
 8009294:	4620      	mov	r0, r4
 8009296:	460f      	mov	r7, r1
 8009298:	f7f7 f8be 	bl	8000418 <__aeabi_i2d>
 800929c:	a364      	add	r3, pc, #400	; (adr r3, 8009430 <_dtoa_r+0x2d0>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f7 f923 	bl	80004ec <__aeabi_dmul>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4630      	mov	r0, r6
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f6 ff67 	bl	8000180 <__adddf3>
 80092b2:	4606      	mov	r6, r0
 80092b4:	460f      	mov	r7, r1
 80092b6:	f7f7 fbc9 	bl	8000a4c <__aeabi_d2iz>
 80092ba:	2200      	movs	r2, #0
 80092bc:	4683      	mov	fp, r0
 80092be:	2300      	movs	r3, #0
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fb84 	bl	80009d0 <__aeabi_dcmplt>
 80092c8:	b148      	cbz	r0, 80092de <_dtoa_r+0x17e>
 80092ca:	4658      	mov	r0, fp
 80092cc:	f7f7 f8a4 	bl	8000418 <__aeabi_i2d>
 80092d0:	4632      	mov	r2, r6
 80092d2:	463b      	mov	r3, r7
 80092d4:	f7f7 fb72 	bl	80009bc <__aeabi_dcmpeq>
 80092d8:	b908      	cbnz	r0, 80092de <_dtoa_r+0x17e>
 80092da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092de:	f1bb 0f16 	cmp.w	fp, #22
 80092e2:	d857      	bhi.n	8009394 <_dtoa_r+0x234>
 80092e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092e8:	4b5a      	ldr	r3, [pc, #360]	; (8009454 <_dtoa_r+0x2f4>)
 80092ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f7f7 fb6d 	bl	80009d0 <__aeabi_dcmplt>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d04e      	beq.n	8009398 <_dtoa_r+0x238>
 80092fa:	2300      	movs	r3, #0
 80092fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009300:	930f      	str	r3, [sp, #60]	; 0x3c
 8009302:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009304:	1b1b      	subs	r3, r3, r4
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	bf46      	itte	mi
 800930a:	f1c3 0901 	rsbmi	r9, r3, #1
 800930e:	2300      	movmi	r3, #0
 8009310:	f04f 0900 	movpl.w	r9, #0
 8009314:	9209      	str	r2, [sp, #36]	; 0x24
 8009316:	bf48      	it	mi
 8009318:	9309      	strmi	r3, [sp, #36]	; 0x24
 800931a:	f1bb 0f00 	cmp.w	fp, #0
 800931e:	db3d      	blt.n	800939c <_dtoa_r+0x23c>
 8009320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009322:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009326:	445b      	add	r3, fp
 8009328:	9309      	str	r3, [sp, #36]	; 0x24
 800932a:	2300      	movs	r3, #0
 800932c:	930a      	str	r3, [sp, #40]	; 0x28
 800932e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009330:	2b09      	cmp	r3, #9
 8009332:	d867      	bhi.n	8009404 <_dtoa_r+0x2a4>
 8009334:	2b05      	cmp	r3, #5
 8009336:	bfc4      	itt	gt
 8009338:	3b04      	subgt	r3, #4
 800933a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800933c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800933e:	bfc8      	it	gt
 8009340:	2400      	movgt	r4, #0
 8009342:	f1a3 0302 	sub.w	r3, r3, #2
 8009346:	bfd8      	it	le
 8009348:	2401      	movle	r4, #1
 800934a:	2b03      	cmp	r3, #3
 800934c:	f200 8086 	bhi.w	800945c <_dtoa_r+0x2fc>
 8009350:	e8df f003 	tbb	[pc, r3]
 8009354:	5637392c 	.word	0x5637392c
 8009358:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800935c:	441c      	add	r4, r3
 800935e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009362:	2b20      	cmp	r3, #32
 8009364:	bfc1      	itttt	gt
 8009366:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800936a:	fa09 f903 	lslgt.w	r9, r9, r3
 800936e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009372:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009376:	bfd6      	itet	le
 8009378:	f1c3 0320 	rsble	r3, r3, #32
 800937c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009380:	fa06 f003 	lslle.w	r0, r6, r3
 8009384:	f7f7 f838 	bl	80003f8 <__aeabi_ui2d>
 8009388:	2201      	movs	r2, #1
 800938a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800938e:	3c01      	subs	r4, #1
 8009390:	9213      	str	r2, [sp, #76]	; 0x4c
 8009392:	e76f      	b.n	8009274 <_dtoa_r+0x114>
 8009394:	2301      	movs	r3, #1
 8009396:	e7b3      	b.n	8009300 <_dtoa_r+0x1a0>
 8009398:	900f      	str	r0, [sp, #60]	; 0x3c
 800939a:	e7b2      	b.n	8009302 <_dtoa_r+0x1a2>
 800939c:	f1cb 0300 	rsb	r3, fp, #0
 80093a0:	930a      	str	r3, [sp, #40]	; 0x28
 80093a2:	2300      	movs	r3, #0
 80093a4:	eba9 090b 	sub.w	r9, r9, fp
 80093a8:	930e      	str	r3, [sp, #56]	; 0x38
 80093aa:	e7c0      	b.n	800932e <_dtoa_r+0x1ce>
 80093ac:	2300      	movs	r3, #0
 80093ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80093b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dc55      	bgt.n	8009462 <_dtoa_r+0x302>
 80093b6:	2301      	movs	r3, #1
 80093b8:	461a      	mov	r2, r3
 80093ba:	9306      	str	r3, [sp, #24]
 80093bc:	9308      	str	r3, [sp, #32]
 80093be:	9223      	str	r2, [sp, #140]	; 0x8c
 80093c0:	e00b      	b.n	80093da <_dtoa_r+0x27a>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e7f3      	b.n	80093ae <_dtoa_r+0x24e>
 80093c6:	2300      	movs	r3, #0
 80093c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093cc:	445b      	add	r3, fp
 80093ce:	9306      	str	r3, [sp, #24]
 80093d0:	3301      	adds	r3, #1
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	9308      	str	r3, [sp, #32]
 80093d6:	bfb8      	it	lt
 80093d8:	2301      	movlt	r3, #1
 80093da:	2100      	movs	r1, #0
 80093dc:	2204      	movs	r2, #4
 80093de:	69e8      	ldr	r0, [r5, #28]
 80093e0:	f102 0614 	add.w	r6, r2, #20
 80093e4:	429e      	cmp	r6, r3
 80093e6:	d940      	bls.n	800946a <_dtoa_r+0x30a>
 80093e8:	6041      	str	r1, [r0, #4]
 80093ea:	4628      	mov	r0, r5
 80093ec:	f001 f850 	bl	800a490 <_Balloc>
 80093f0:	9003      	str	r0, [sp, #12]
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d13c      	bne.n	8009470 <_dtoa_r+0x310>
 80093f6:	4602      	mov	r2, r0
 80093f8:	f240 11af 	movw	r1, #431	; 0x1af
 80093fc:	4b16      	ldr	r3, [pc, #88]	; (8009458 <_dtoa_r+0x2f8>)
 80093fe:	e6c3      	b.n	8009188 <_dtoa_r+0x28>
 8009400:	2301      	movs	r3, #1
 8009402:	e7e1      	b.n	80093c8 <_dtoa_r+0x268>
 8009404:	2401      	movs	r4, #1
 8009406:	2300      	movs	r3, #0
 8009408:	940b      	str	r4, [sp, #44]	; 0x2c
 800940a:	9322      	str	r3, [sp, #136]	; 0x88
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	2200      	movs	r2, #0
 8009412:	9306      	str	r3, [sp, #24]
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	2312      	movs	r3, #18
 8009418:	e7d1      	b.n	80093be <_dtoa_r+0x25e>
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w
 8009420:	636f4361 	.word	0x636f4361
 8009424:	3fd287a7 	.word	0x3fd287a7
 8009428:	8b60c8b3 	.word	0x8b60c8b3
 800942c:	3fc68a28 	.word	0x3fc68a28
 8009430:	509f79fb 	.word	0x509f79fb
 8009434:	3fd34413 	.word	0x3fd34413
 8009438:	0800b7e5 	.word	0x0800b7e5
 800943c:	0800b8a7 	.word	0x0800b8a7
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	0800b8a3 	.word	0x0800b8a3
 8009448:	0800b89a 	.word	0x0800b89a
 800944c:	0800b7c2 	.word	0x0800b7c2
 8009450:	3ff80000 	.word	0x3ff80000
 8009454:	0800b9f8 	.word	0x0800b9f8
 8009458:	0800b8ff 	.word	0x0800b8ff
 800945c:	2301      	movs	r3, #1
 800945e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009460:	e7d4      	b.n	800940c <_dtoa_r+0x2ac>
 8009462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009464:	9306      	str	r3, [sp, #24]
 8009466:	9308      	str	r3, [sp, #32]
 8009468:	e7b7      	b.n	80093da <_dtoa_r+0x27a>
 800946a:	3101      	adds	r1, #1
 800946c:	0052      	lsls	r2, r2, #1
 800946e:	e7b7      	b.n	80093e0 <_dtoa_r+0x280>
 8009470:	69eb      	ldr	r3, [r5, #28]
 8009472:	9a03      	ldr	r2, [sp, #12]
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	9b08      	ldr	r3, [sp, #32]
 8009478:	2b0e      	cmp	r3, #14
 800947a:	f200 80a8 	bhi.w	80095ce <_dtoa_r+0x46e>
 800947e:	2c00      	cmp	r4, #0
 8009480:	f000 80a5 	beq.w	80095ce <_dtoa_r+0x46e>
 8009484:	f1bb 0f00 	cmp.w	fp, #0
 8009488:	dd34      	ble.n	80094f4 <_dtoa_r+0x394>
 800948a:	4b9a      	ldr	r3, [pc, #616]	; (80096f4 <_dtoa_r+0x594>)
 800948c:	f00b 020f 	and.w	r2, fp, #15
 8009490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009494:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009498:	e9d3 3400 	ldrd	r3, r4, [r3]
 800949c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80094a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80094a4:	d016      	beq.n	80094d4 <_dtoa_r+0x374>
 80094a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094aa:	4b93      	ldr	r3, [pc, #588]	; (80096f8 <_dtoa_r+0x598>)
 80094ac:	2703      	movs	r7, #3
 80094ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094b2:	f7f7 f945 	bl	8000740 <__aeabi_ddiv>
 80094b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ba:	f004 040f 	and.w	r4, r4, #15
 80094be:	4e8e      	ldr	r6, [pc, #568]	; (80096f8 <_dtoa_r+0x598>)
 80094c0:	b954      	cbnz	r4, 80094d8 <_dtoa_r+0x378>
 80094c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ca:	f7f7 f939 	bl	8000740 <__aeabi_ddiv>
 80094ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094d2:	e029      	b.n	8009528 <_dtoa_r+0x3c8>
 80094d4:	2702      	movs	r7, #2
 80094d6:	e7f2      	b.n	80094be <_dtoa_r+0x35e>
 80094d8:	07e1      	lsls	r1, r4, #31
 80094da:	d508      	bpl.n	80094ee <_dtoa_r+0x38e>
 80094dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094e4:	f7f7 f802 	bl	80004ec <__aeabi_dmul>
 80094e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80094ec:	3701      	adds	r7, #1
 80094ee:	1064      	asrs	r4, r4, #1
 80094f0:	3608      	adds	r6, #8
 80094f2:	e7e5      	b.n	80094c0 <_dtoa_r+0x360>
 80094f4:	f000 80a5 	beq.w	8009642 <_dtoa_r+0x4e2>
 80094f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094fc:	f1cb 0400 	rsb	r4, fp, #0
 8009500:	4b7c      	ldr	r3, [pc, #496]	; (80096f4 <_dtoa_r+0x594>)
 8009502:	f004 020f 	and.w	r2, r4, #15
 8009506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f6 ffed 	bl	80004ec <__aeabi_dmul>
 8009512:	2702      	movs	r7, #2
 8009514:	2300      	movs	r3, #0
 8009516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800951a:	4e77      	ldr	r6, [pc, #476]	; (80096f8 <_dtoa_r+0x598>)
 800951c:	1124      	asrs	r4, r4, #4
 800951e:	2c00      	cmp	r4, #0
 8009520:	f040 8084 	bne.w	800962c <_dtoa_r+0x4cc>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1d2      	bne.n	80094ce <_dtoa_r+0x36e>
 8009528:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800952c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 8087 	beq.w	8009646 <_dtoa_r+0x4e6>
 8009538:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800953c:	2200      	movs	r2, #0
 800953e:	4b6f      	ldr	r3, [pc, #444]	; (80096fc <_dtoa_r+0x59c>)
 8009540:	f7f7 fa46 	bl	80009d0 <__aeabi_dcmplt>
 8009544:	2800      	cmp	r0, #0
 8009546:	d07e      	beq.n	8009646 <_dtoa_r+0x4e6>
 8009548:	9b08      	ldr	r3, [sp, #32]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d07b      	beq.n	8009646 <_dtoa_r+0x4e6>
 800954e:	9b06      	ldr	r3, [sp, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	dd38      	ble.n	80095c6 <_dtoa_r+0x466>
 8009554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009558:	2200      	movs	r2, #0
 800955a:	4b69      	ldr	r3, [pc, #420]	; (8009700 <_dtoa_r+0x5a0>)
 800955c:	f7f6 ffc6 	bl	80004ec <__aeabi_dmul>
 8009560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009564:	9c06      	ldr	r4, [sp, #24]
 8009566:	f10b 38ff 	add.w	r8, fp, #4294967295
 800956a:	3701      	adds	r7, #1
 800956c:	4638      	mov	r0, r7
 800956e:	f7f6 ff53 	bl	8000418 <__aeabi_i2d>
 8009572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009576:	f7f6 ffb9 	bl	80004ec <__aeabi_dmul>
 800957a:	2200      	movs	r2, #0
 800957c:	4b61      	ldr	r3, [pc, #388]	; (8009704 <_dtoa_r+0x5a4>)
 800957e:	f7f6 fdff 	bl	8000180 <__adddf3>
 8009582:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009586:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800958a:	9611      	str	r6, [sp, #68]	; 0x44
 800958c:	2c00      	cmp	r4, #0
 800958e:	d15d      	bne.n	800964c <_dtoa_r+0x4ec>
 8009590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009594:	2200      	movs	r2, #0
 8009596:	4b5c      	ldr	r3, [pc, #368]	; (8009708 <_dtoa_r+0x5a8>)
 8009598:	f7f6 fdf0 	bl	800017c <__aeabi_dsub>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095a4:	4633      	mov	r3, r6
 80095a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095a8:	f7f7 fa30 	bl	8000a0c <__aeabi_dcmpgt>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f040 8295 	bne.w	8009adc <_dtoa_r+0x97c>
 80095b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80095bc:	f7f7 fa08 	bl	80009d0 <__aeabi_dcmplt>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f040 8289 	bne.w	8009ad8 <_dtoa_r+0x978>
 80095c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80095ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f2c0 8151 	blt.w	8009878 <_dtoa_r+0x718>
 80095d6:	f1bb 0f0e 	cmp.w	fp, #14
 80095da:	f300 814d 	bgt.w	8009878 <_dtoa_r+0x718>
 80095de:	4b45      	ldr	r3, [pc, #276]	; (80096f4 <_dtoa_r+0x594>)
 80095e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80095ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f280 80da 	bge.w	80097a8 <_dtoa_r+0x648>
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f300 80d6 	bgt.w	80097a8 <_dtoa_r+0x648>
 80095fc:	f040 826b 	bne.w	8009ad6 <_dtoa_r+0x976>
 8009600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009604:	2200      	movs	r2, #0
 8009606:	4b40      	ldr	r3, [pc, #256]	; (8009708 <_dtoa_r+0x5a8>)
 8009608:	f7f6 ff70 	bl	80004ec <__aeabi_dmul>
 800960c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009610:	f7f7 f9f2 	bl	80009f8 <__aeabi_dcmpge>
 8009614:	9c08      	ldr	r4, [sp, #32]
 8009616:	4626      	mov	r6, r4
 8009618:	2800      	cmp	r0, #0
 800961a:	f040 8241 	bne.w	8009aa0 <_dtoa_r+0x940>
 800961e:	2331      	movs	r3, #49	; 0x31
 8009620:	9f03      	ldr	r7, [sp, #12]
 8009622:	f10b 0b01 	add.w	fp, fp, #1
 8009626:	f807 3b01 	strb.w	r3, [r7], #1
 800962a:	e23d      	b.n	8009aa8 <_dtoa_r+0x948>
 800962c:	07e2      	lsls	r2, r4, #31
 800962e:	d505      	bpl.n	800963c <_dtoa_r+0x4dc>
 8009630:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009634:	f7f6 ff5a 	bl	80004ec <__aeabi_dmul>
 8009638:	2301      	movs	r3, #1
 800963a:	3701      	adds	r7, #1
 800963c:	1064      	asrs	r4, r4, #1
 800963e:	3608      	adds	r6, #8
 8009640:	e76d      	b.n	800951e <_dtoa_r+0x3be>
 8009642:	2702      	movs	r7, #2
 8009644:	e770      	b.n	8009528 <_dtoa_r+0x3c8>
 8009646:	46d8      	mov	r8, fp
 8009648:	9c08      	ldr	r4, [sp, #32]
 800964a:	e78f      	b.n	800956c <_dtoa_r+0x40c>
 800964c:	9903      	ldr	r1, [sp, #12]
 800964e:	4b29      	ldr	r3, [pc, #164]	; (80096f4 <_dtoa_r+0x594>)
 8009650:	4421      	add	r1, r4
 8009652:	9112      	str	r1, [sp, #72]	; 0x48
 8009654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009656:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800965a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800965e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009662:	2900      	cmp	r1, #0
 8009664:	d054      	beq.n	8009710 <_dtoa_r+0x5b0>
 8009666:	2000      	movs	r0, #0
 8009668:	4928      	ldr	r1, [pc, #160]	; (800970c <_dtoa_r+0x5ac>)
 800966a:	f7f7 f869 	bl	8000740 <__aeabi_ddiv>
 800966e:	463b      	mov	r3, r7
 8009670:	4632      	mov	r2, r6
 8009672:	f7f6 fd83 	bl	800017c <__aeabi_dsub>
 8009676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800967a:	9f03      	ldr	r7, [sp, #12]
 800967c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009680:	f7f7 f9e4 	bl	8000a4c <__aeabi_d2iz>
 8009684:	4604      	mov	r4, r0
 8009686:	f7f6 fec7 	bl	8000418 <__aeabi_i2d>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009692:	f7f6 fd73 	bl	800017c <__aeabi_dsub>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	3430      	adds	r4, #48	; 0x30
 800969c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096a4:	f807 4b01 	strb.w	r4, [r7], #1
 80096a8:	f7f7 f992 	bl	80009d0 <__aeabi_dcmplt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d173      	bne.n	8009798 <_dtoa_r+0x638>
 80096b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096b4:	2000      	movs	r0, #0
 80096b6:	4911      	ldr	r1, [pc, #68]	; (80096fc <_dtoa_r+0x59c>)
 80096b8:	f7f6 fd60 	bl	800017c <__aeabi_dsub>
 80096bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096c0:	f7f7 f986 	bl	80009d0 <__aeabi_dcmplt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f040 80b6 	bne.w	8009836 <_dtoa_r+0x6d6>
 80096ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096cc:	429f      	cmp	r7, r3
 80096ce:	f43f af7a 	beq.w	80095c6 <_dtoa_r+0x466>
 80096d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096d6:	2200      	movs	r2, #0
 80096d8:	4b09      	ldr	r3, [pc, #36]	; (8009700 <_dtoa_r+0x5a0>)
 80096da:	f7f6 ff07 	bl	80004ec <__aeabi_dmul>
 80096de:	2200      	movs	r2, #0
 80096e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <_dtoa_r+0x5a0>)
 80096ea:	f7f6 feff 	bl	80004ec <__aeabi_dmul>
 80096ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096f2:	e7c3      	b.n	800967c <_dtoa_r+0x51c>
 80096f4:	0800b9f8 	.word	0x0800b9f8
 80096f8:	0800b9d0 	.word	0x0800b9d0
 80096fc:	3ff00000 	.word	0x3ff00000
 8009700:	40240000 	.word	0x40240000
 8009704:	401c0000 	.word	0x401c0000
 8009708:	40140000 	.word	0x40140000
 800970c:	3fe00000 	.word	0x3fe00000
 8009710:	4630      	mov	r0, r6
 8009712:	4639      	mov	r1, r7
 8009714:	f7f6 feea 	bl	80004ec <__aeabi_dmul>
 8009718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800971a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800971e:	9c03      	ldr	r4, [sp, #12]
 8009720:	9314      	str	r3, [sp, #80]	; 0x50
 8009722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009726:	f7f7 f991 	bl	8000a4c <__aeabi_d2iz>
 800972a:	9015      	str	r0, [sp, #84]	; 0x54
 800972c:	f7f6 fe74 	bl	8000418 <__aeabi_i2d>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009738:	f7f6 fd20 	bl	800017c <__aeabi_dsub>
 800973c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800973e:	4606      	mov	r6, r0
 8009740:	3330      	adds	r3, #48	; 0x30
 8009742:	f804 3b01 	strb.w	r3, [r4], #1
 8009746:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009748:	460f      	mov	r7, r1
 800974a:	429c      	cmp	r4, r3
 800974c:	f04f 0200 	mov.w	r2, #0
 8009750:	d124      	bne.n	800979c <_dtoa_r+0x63c>
 8009752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009756:	4baf      	ldr	r3, [pc, #700]	; (8009a14 <_dtoa_r+0x8b4>)
 8009758:	f7f6 fd12 	bl	8000180 <__adddf3>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f7 f952 	bl	8000a0c <__aeabi_dcmpgt>
 8009768:	2800      	cmp	r0, #0
 800976a:	d163      	bne.n	8009834 <_dtoa_r+0x6d4>
 800976c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009770:	2000      	movs	r0, #0
 8009772:	49a8      	ldr	r1, [pc, #672]	; (8009a14 <_dtoa_r+0x8b4>)
 8009774:	f7f6 fd02 	bl	800017c <__aeabi_dsub>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	4630      	mov	r0, r6
 800977e:	4639      	mov	r1, r7
 8009780:	f7f7 f926 	bl	80009d0 <__aeabi_dcmplt>
 8009784:	2800      	cmp	r0, #0
 8009786:	f43f af1e 	beq.w	80095c6 <_dtoa_r+0x466>
 800978a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800978c:	1e7b      	subs	r3, r7, #1
 800978e:	9314      	str	r3, [sp, #80]	; 0x50
 8009790:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009794:	2b30      	cmp	r3, #48	; 0x30
 8009796:	d0f8      	beq.n	800978a <_dtoa_r+0x62a>
 8009798:	46c3      	mov	fp, r8
 800979a:	e03b      	b.n	8009814 <_dtoa_r+0x6b4>
 800979c:	4b9e      	ldr	r3, [pc, #632]	; (8009a18 <_dtoa_r+0x8b8>)
 800979e:	f7f6 fea5 	bl	80004ec <__aeabi_dmul>
 80097a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a6:	e7bc      	b.n	8009722 <_dtoa_r+0x5c2>
 80097a8:	9f03      	ldr	r7, [sp, #12]
 80097aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80097ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097b2:	4640      	mov	r0, r8
 80097b4:	4649      	mov	r1, r9
 80097b6:	f7f6 ffc3 	bl	8000740 <__aeabi_ddiv>
 80097ba:	f7f7 f947 	bl	8000a4c <__aeabi_d2iz>
 80097be:	4604      	mov	r4, r0
 80097c0:	f7f6 fe2a 	bl	8000418 <__aeabi_i2d>
 80097c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097c8:	f7f6 fe90 	bl	80004ec <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4640      	mov	r0, r8
 80097d2:	4649      	mov	r1, r9
 80097d4:	f7f6 fcd2 	bl	800017c <__aeabi_dsub>
 80097d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80097dc:	f807 6b01 	strb.w	r6, [r7], #1
 80097e0:	9e03      	ldr	r6, [sp, #12]
 80097e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80097e6:	1bbe      	subs	r6, r7, r6
 80097e8:	45b4      	cmp	ip, r6
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	d136      	bne.n	800985e <_dtoa_r+0x6fe>
 80097f0:	f7f6 fcc6 	bl	8000180 <__adddf3>
 80097f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097f8:	4680      	mov	r8, r0
 80097fa:	4689      	mov	r9, r1
 80097fc:	f7f7 f906 	bl	8000a0c <__aeabi_dcmpgt>
 8009800:	bb58      	cbnz	r0, 800985a <_dtoa_r+0x6fa>
 8009802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009806:	4640      	mov	r0, r8
 8009808:	4649      	mov	r1, r9
 800980a:	f7f7 f8d7 	bl	80009bc <__aeabi_dcmpeq>
 800980e:	b108      	cbz	r0, 8009814 <_dtoa_r+0x6b4>
 8009810:	07e3      	lsls	r3, r4, #31
 8009812:	d422      	bmi.n	800985a <_dtoa_r+0x6fa>
 8009814:	4651      	mov	r1, sl
 8009816:	4628      	mov	r0, r5
 8009818:	f000 fe7a 	bl	800a510 <_Bfree>
 800981c:	2300      	movs	r3, #0
 800981e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009820:	703b      	strb	r3, [r7, #0]
 8009822:	f10b 0301 	add.w	r3, fp, #1
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800982a:	2b00      	cmp	r3, #0
 800982c:	f43f ace6 	beq.w	80091fc <_dtoa_r+0x9c>
 8009830:	601f      	str	r7, [r3, #0]
 8009832:	e4e3      	b.n	80091fc <_dtoa_r+0x9c>
 8009834:	4627      	mov	r7, r4
 8009836:	463b      	mov	r3, r7
 8009838:	461f      	mov	r7, r3
 800983a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800983e:	2a39      	cmp	r2, #57	; 0x39
 8009840:	d107      	bne.n	8009852 <_dtoa_r+0x6f2>
 8009842:	9a03      	ldr	r2, [sp, #12]
 8009844:	429a      	cmp	r2, r3
 8009846:	d1f7      	bne.n	8009838 <_dtoa_r+0x6d8>
 8009848:	2230      	movs	r2, #48	; 0x30
 800984a:	9903      	ldr	r1, [sp, #12]
 800984c:	f108 0801 	add.w	r8, r8, #1
 8009850:	700a      	strb	r2, [r1, #0]
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	3201      	adds	r2, #1
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	e79e      	b.n	8009798 <_dtoa_r+0x638>
 800985a:	46d8      	mov	r8, fp
 800985c:	e7eb      	b.n	8009836 <_dtoa_r+0x6d6>
 800985e:	2200      	movs	r2, #0
 8009860:	4b6d      	ldr	r3, [pc, #436]	; (8009a18 <_dtoa_r+0x8b8>)
 8009862:	f7f6 fe43 	bl	80004ec <__aeabi_dmul>
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	4680      	mov	r8, r0
 800986c:	4689      	mov	r9, r1
 800986e:	f7f7 f8a5 	bl	80009bc <__aeabi_dcmpeq>
 8009872:	2800      	cmp	r0, #0
 8009874:	d09b      	beq.n	80097ae <_dtoa_r+0x64e>
 8009876:	e7cd      	b.n	8009814 <_dtoa_r+0x6b4>
 8009878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800987a:	2a00      	cmp	r2, #0
 800987c:	f000 80c4 	beq.w	8009a08 <_dtoa_r+0x8a8>
 8009880:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009882:	2a01      	cmp	r2, #1
 8009884:	f300 80a8 	bgt.w	80099d8 <_dtoa_r+0x878>
 8009888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800988a:	2a00      	cmp	r2, #0
 800988c:	f000 80a0 	beq.w	80099d0 <_dtoa_r+0x870>
 8009890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009894:	464f      	mov	r7, r9
 8009896:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800989a:	2101      	movs	r1, #1
 800989c:	441a      	add	r2, r3
 800989e:	4628      	mov	r0, r5
 80098a0:	4499      	add	r9, r3
 80098a2:	9209      	str	r2, [sp, #36]	; 0x24
 80098a4:	f000 ff34 	bl	800a710 <__i2b>
 80098a8:	4606      	mov	r6, r0
 80098aa:	b15f      	cbz	r7, 80098c4 <_dtoa_r+0x764>
 80098ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dd08      	ble.n	80098c4 <_dtoa_r+0x764>
 80098b2:	42bb      	cmp	r3, r7
 80098b4:	bfa8      	it	ge
 80098b6:	463b      	movge	r3, r7
 80098b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ba:	eba9 0903 	sub.w	r9, r9, r3
 80098be:	1aff      	subs	r7, r7, r3
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	9309      	str	r3, [sp, #36]	; 0x24
 80098c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c6:	b1f3      	cbz	r3, 8009906 <_dtoa_r+0x7a6>
 80098c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80a0 	beq.w	8009a10 <_dtoa_r+0x8b0>
 80098d0:	2c00      	cmp	r4, #0
 80098d2:	dd10      	ble.n	80098f6 <_dtoa_r+0x796>
 80098d4:	4631      	mov	r1, r6
 80098d6:	4622      	mov	r2, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	f000 ffd7 	bl	800a88c <__pow5mult>
 80098de:	4652      	mov	r2, sl
 80098e0:	4601      	mov	r1, r0
 80098e2:	4606      	mov	r6, r0
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 ff29 	bl	800a73c <__multiply>
 80098ea:	4680      	mov	r8, r0
 80098ec:	4651      	mov	r1, sl
 80098ee:	4628      	mov	r0, r5
 80098f0:	f000 fe0e 	bl	800a510 <_Bfree>
 80098f4:	46c2      	mov	sl, r8
 80098f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f8:	1b1a      	subs	r2, r3, r4
 80098fa:	d004      	beq.n	8009906 <_dtoa_r+0x7a6>
 80098fc:	4651      	mov	r1, sl
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 ffc4 	bl	800a88c <__pow5mult>
 8009904:	4682      	mov	sl, r0
 8009906:	2101      	movs	r1, #1
 8009908:	4628      	mov	r0, r5
 800990a:	f000 ff01 	bl	800a710 <__i2b>
 800990e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009910:	4604      	mov	r4, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	f340 8082 	ble.w	8009a1c <_dtoa_r+0x8bc>
 8009918:	461a      	mov	r2, r3
 800991a:	4601      	mov	r1, r0
 800991c:	4628      	mov	r0, r5
 800991e:	f000 ffb5 	bl	800a88c <__pow5mult>
 8009922:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009924:	4604      	mov	r4, r0
 8009926:	2b01      	cmp	r3, #1
 8009928:	dd7b      	ble.n	8009a22 <_dtoa_r+0x8c2>
 800992a:	f04f 0800 	mov.w	r8, #0
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009934:	6918      	ldr	r0, [r3, #16]
 8009936:	f000 fe9d 	bl	800a674 <__hi0bits>
 800993a:	f1c0 0020 	rsb	r0, r0, #32
 800993e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009940:	4418      	add	r0, r3
 8009942:	f010 001f 	ands.w	r0, r0, #31
 8009946:	f000 8092 	beq.w	8009a6e <_dtoa_r+0x90e>
 800994a:	f1c0 0320 	rsb	r3, r0, #32
 800994e:	2b04      	cmp	r3, #4
 8009950:	f340 8085 	ble.w	8009a5e <_dtoa_r+0x8fe>
 8009954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009956:	f1c0 001c 	rsb	r0, r0, #28
 800995a:	4403      	add	r3, r0
 800995c:	4481      	add	r9, r0
 800995e:	4407      	add	r7, r0
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	f1b9 0f00 	cmp.w	r9, #0
 8009966:	dd05      	ble.n	8009974 <_dtoa_r+0x814>
 8009968:	4651      	mov	r1, sl
 800996a:	464a      	mov	r2, r9
 800996c:	4628      	mov	r0, r5
 800996e:	f000 ffe7 	bl	800a940 <__lshift>
 8009972:	4682      	mov	sl, r0
 8009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	dd05      	ble.n	8009986 <_dtoa_r+0x826>
 800997a:	4621      	mov	r1, r4
 800997c:	461a      	mov	r2, r3
 800997e:	4628      	mov	r0, r5
 8009980:	f000 ffde 	bl	800a940 <__lshift>
 8009984:	4604      	mov	r4, r0
 8009986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d072      	beq.n	8009a72 <_dtoa_r+0x912>
 800998c:	4621      	mov	r1, r4
 800998e:	4650      	mov	r0, sl
 8009990:	f001 f842 	bl	800aa18 <__mcmp>
 8009994:	2800      	cmp	r0, #0
 8009996:	da6c      	bge.n	8009a72 <_dtoa_r+0x912>
 8009998:	2300      	movs	r3, #0
 800999a:	4651      	mov	r1, sl
 800999c:	220a      	movs	r2, #10
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 fdd8 	bl	800a554 <__multadd>
 80099a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a6:	4682      	mov	sl, r0
 80099a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 81ac 	beq.w	8009d0a <_dtoa_r+0xbaa>
 80099b2:	2300      	movs	r3, #0
 80099b4:	4631      	mov	r1, r6
 80099b6:	220a      	movs	r2, #10
 80099b8:	4628      	mov	r0, r5
 80099ba:	f000 fdcb 	bl	800a554 <__multadd>
 80099be:	9b06      	ldr	r3, [sp, #24]
 80099c0:	4606      	mov	r6, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f300 8093 	bgt.w	8009aee <_dtoa_r+0x98e>
 80099c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	dc59      	bgt.n	8009a82 <_dtoa_r+0x922>
 80099ce:	e08e      	b.n	8009aee <_dtoa_r+0x98e>
 80099d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099d6:	e75d      	b.n	8009894 <_dtoa_r+0x734>
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	1e5c      	subs	r4, r3, #1
 80099dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099de:	42a3      	cmp	r3, r4
 80099e0:	bfbf      	itttt	lt
 80099e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80099e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80099e6:	1ae3      	sublt	r3, r4, r3
 80099e8:	18d2      	addlt	r2, r2, r3
 80099ea:	bfa8      	it	ge
 80099ec:	1b1c      	subge	r4, r3, r4
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	bfbe      	ittt	lt
 80099f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80099f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80099f6:	2400      	movlt	r4, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfb5      	itete	lt
 80099fc:	eba9 0703 	sublt.w	r7, r9, r3
 8009a00:	464f      	movge	r7, r9
 8009a02:	2300      	movlt	r3, #0
 8009a04:	9b08      	ldrge	r3, [sp, #32]
 8009a06:	e747      	b.n	8009898 <_dtoa_r+0x738>
 8009a08:	464f      	mov	r7, r9
 8009a0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009a0e:	e74c      	b.n	80098aa <_dtoa_r+0x74a>
 8009a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a12:	e773      	b.n	80098fc <_dtoa_r+0x79c>
 8009a14:	3fe00000 	.word	0x3fe00000
 8009a18:	40240000 	.word	0x40240000
 8009a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	dc18      	bgt.n	8009a54 <_dtoa_r+0x8f4>
 8009a22:	9b04      	ldr	r3, [sp, #16]
 8009a24:	b9b3      	cbnz	r3, 8009a54 <_dtoa_r+0x8f4>
 8009a26:	9b05      	ldr	r3, [sp, #20]
 8009a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a2c:	b993      	cbnz	r3, 8009a54 <_dtoa_r+0x8f4>
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a34:	0d1b      	lsrs	r3, r3, #20
 8009a36:	051b      	lsls	r3, r3, #20
 8009a38:	b17b      	cbz	r3, 8009a5a <_dtoa_r+0x8fa>
 8009a3a:	f04f 0801 	mov.w	r8, #1
 8009a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a40:	f109 0901 	add.w	r9, r9, #1
 8009a44:	3301      	adds	r3, #1
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f47f af6f 	bne.w	800992e <_dtoa_r+0x7ce>
 8009a50:	2001      	movs	r0, #1
 8009a52:	e774      	b.n	800993e <_dtoa_r+0x7de>
 8009a54:	f04f 0800 	mov.w	r8, #0
 8009a58:	e7f6      	b.n	8009a48 <_dtoa_r+0x8e8>
 8009a5a:	4698      	mov	r8, r3
 8009a5c:	e7f4      	b.n	8009a48 <_dtoa_r+0x8e8>
 8009a5e:	d080      	beq.n	8009962 <_dtoa_r+0x802>
 8009a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a62:	331c      	adds	r3, #28
 8009a64:	441a      	add	r2, r3
 8009a66:	4499      	add	r9, r3
 8009a68:	441f      	add	r7, r3
 8009a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a6c:	e779      	b.n	8009962 <_dtoa_r+0x802>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	e7f6      	b.n	8009a60 <_dtoa_r+0x900>
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc34      	bgt.n	8009ae2 <_dtoa_r+0x982>
 8009a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	dd31      	ble.n	8009ae2 <_dtoa_r+0x982>
 8009a7e:	9b08      	ldr	r3, [sp, #32]
 8009a80:	9306      	str	r3, [sp, #24]
 8009a82:	9b06      	ldr	r3, [sp, #24]
 8009a84:	b963      	cbnz	r3, 8009aa0 <_dtoa_r+0x940>
 8009a86:	4621      	mov	r1, r4
 8009a88:	2205      	movs	r2, #5
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 fd62 	bl	800a554 <__multadd>
 8009a90:	4601      	mov	r1, r0
 8009a92:	4604      	mov	r4, r0
 8009a94:	4650      	mov	r0, sl
 8009a96:	f000 ffbf 	bl	800aa18 <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f73f adbf 	bgt.w	800961e <_dtoa_r+0x4be>
 8009aa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009aa2:	9f03      	ldr	r7, [sp, #12]
 8009aa4:	ea6f 0b03 	mvn.w	fp, r3
 8009aa8:	f04f 0800 	mov.w	r8, #0
 8009aac:	4621      	mov	r1, r4
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 fd2e 	bl	800a510 <_Bfree>
 8009ab4:	2e00      	cmp	r6, #0
 8009ab6:	f43f aead 	beq.w	8009814 <_dtoa_r+0x6b4>
 8009aba:	f1b8 0f00 	cmp.w	r8, #0
 8009abe:	d005      	beq.n	8009acc <_dtoa_r+0x96c>
 8009ac0:	45b0      	cmp	r8, r6
 8009ac2:	d003      	beq.n	8009acc <_dtoa_r+0x96c>
 8009ac4:	4641      	mov	r1, r8
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 fd22 	bl	800a510 <_Bfree>
 8009acc:	4631      	mov	r1, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 fd1e 	bl	800a510 <_Bfree>
 8009ad4:	e69e      	b.n	8009814 <_dtoa_r+0x6b4>
 8009ad6:	2400      	movs	r4, #0
 8009ad8:	4626      	mov	r6, r4
 8009ada:	e7e1      	b.n	8009aa0 <_dtoa_r+0x940>
 8009adc:	46c3      	mov	fp, r8
 8009ade:	4626      	mov	r6, r4
 8009ae0:	e59d      	b.n	800961e <_dtoa_r+0x4be>
 8009ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80c8 	beq.w	8009c7a <_dtoa_r+0xb1a>
 8009aea:	9b08      	ldr	r3, [sp, #32]
 8009aec:	9306      	str	r3, [sp, #24]
 8009aee:	2f00      	cmp	r7, #0
 8009af0:	dd05      	ble.n	8009afe <_dtoa_r+0x99e>
 8009af2:	4631      	mov	r1, r6
 8009af4:	463a      	mov	r2, r7
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 ff22 	bl	800a940 <__lshift>
 8009afc:	4606      	mov	r6, r0
 8009afe:	f1b8 0f00 	cmp.w	r8, #0
 8009b02:	d05b      	beq.n	8009bbc <_dtoa_r+0xa5c>
 8009b04:	4628      	mov	r0, r5
 8009b06:	6871      	ldr	r1, [r6, #4]
 8009b08:	f000 fcc2 	bl	800a490 <_Balloc>
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	b928      	cbnz	r0, 8009b1c <_dtoa_r+0x9bc>
 8009b10:	4602      	mov	r2, r0
 8009b12:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009b16:	4b81      	ldr	r3, [pc, #516]	; (8009d1c <_dtoa_r+0xbbc>)
 8009b18:	f7ff bb36 	b.w	8009188 <_dtoa_r+0x28>
 8009b1c:	6932      	ldr	r2, [r6, #16]
 8009b1e:	f106 010c 	add.w	r1, r6, #12
 8009b22:	3202      	adds	r2, #2
 8009b24:	0092      	lsls	r2, r2, #2
 8009b26:	300c      	adds	r0, #12
 8009b28:	f7ff fa57 	bl	8008fda <memcpy>
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4639      	mov	r1, r7
 8009b30:	4628      	mov	r0, r5
 8009b32:	f000 ff05 	bl	800a940 <__lshift>
 8009b36:	46b0      	mov	r8, r6
 8009b38:	4606      	mov	r6, r0
 8009b3a:	9b03      	ldr	r3, [sp, #12]
 8009b3c:	9a03      	ldr	r2, [sp, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	4413      	add	r3, r2
 8009b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b50:	9b08      	ldr	r3, [sp, #32]
 8009b52:	4621      	mov	r1, r4
 8009b54:	3b01      	subs	r3, #1
 8009b56:	4650      	mov	r0, sl
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	f7ff fa75 	bl	8009048 <quorem>
 8009b5e:	4641      	mov	r1, r8
 8009b60:	9006      	str	r0, [sp, #24]
 8009b62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b66:	4650      	mov	r0, sl
 8009b68:	f000 ff56 	bl	800aa18 <__mcmp>
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	9009      	str	r0, [sp, #36]	; 0x24
 8009b70:	4621      	mov	r1, r4
 8009b72:	4628      	mov	r0, r5
 8009b74:	f000 ff6c 	bl	800aa50 <__mdiff>
 8009b78:	68c2      	ldr	r2, [r0, #12]
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	bb02      	cbnz	r2, 8009bc0 <_dtoa_r+0xa60>
 8009b7e:	4601      	mov	r1, r0
 8009b80:	4650      	mov	r0, sl
 8009b82:	f000 ff49 	bl	800aa18 <__mcmp>
 8009b86:	4602      	mov	r2, r0
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	920c      	str	r2, [sp, #48]	; 0x30
 8009b8e:	f000 fcbf 	bl	800a510 <_Bfree>
 8009b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b96:	9f08      	ldr	r7, [sp, #32]
 8009b98:	ea43 0102 	orr.w	r1, r3, r2
 8009b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9e:	4319      	orrs	r1, r3
 8009ba0:	d110      	bne.n	8009bc4 <_dtoa_r+0xa64>
 8009ba2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ba6:	d029      	beq.n	8009bfc <_dtoa_r+0xa9c>
 8009ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dd02      	ble.n	8009bb4 <_dtoa_r+0xa54>
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	f883 9000 	strb.w	r9, [r3]
 8009bba:	e777      	b.n	8009aac <_dtoa_r+0x94c>
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	e7ba      	b.n	8009b36 <_dtoa_r+0x9d6>
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	e7e1      	b.n	8009b88 <_dtoa_r+0xa28>
 8009bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	db04      	blt.n	8009bd4 <_dtoa_r+0xa74>
 8009bca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	d120      	bne.n	8009c16 <_dtoa_r+0xab6>
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	dded      	ble.n	8009bb4 <_dtoa_r+0xa54>
 8009bd8:	4651      	mov	r1, sl
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4628      	mov	r0, r5
 8009bde:	f000 feaf 	bl	800a940 <__lshift>
 8009be2:	4621      	mov	r1, r4
 8009be4:	4682      	mov	sl, r0
 8009be6:	f000 ff17 	bl	800aa18 <__mcmp>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	dc03      	bgt.n	8009bf6 <_dtoa_r+0xa96>
 8009bee:	d1e1      	bne.n	8009bb4 <_dtoa_r+0xa54>
 8009bf0:	f019 0f01 	tst.w	r9, #1
 8009bf4:	d0de      	beq.n	8009bb4 <_dtoa_r+0xa54>
 8009bf6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bfa:	d1d8      	bne.n	8009bae <_dtoa_r+0xa4e>
 8009bfc:	2339      	movs	r3, #57	; 0x39
 8009bfe:	9a04      	ldr	r2, [sp, #16]
 8009c00:	7013      	strb	r3, [r2, #0]
 8009c02:	463b      	mov	r3, r7
 8009c04:	461f      	mov	r7, r3
 8009c06:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2a39      	cmp	r2, #57	; 0x39
 8009c0e:	d06b      	beq.n	8009ce8 <_dtoa_r+0xb88>
 8009c10:	3201      	adds	r2, #1
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	e74a      	b.n	8009aac <_dtoa_r+0x94c>
 8009c16:	2a00      	cmp	r2, #0
 8009c18:	dd07      	ble.n	8009c2a <_dtoa_r+0xaca>
 8009c1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c1e:	d0ed      	beq.n	8009bfc <_dtoa_r+0xa9c>
 8009c20:	9a04      	ldr	r2, [sp, #16]
 8009c22:	f109 0301 	add.w	r3, r9, #1
 8009c26:	7013      	strb	r3, [r2, #0]
 8009c28:	e740      	b.n	8009aac <_dtoa_r+0x94c>
 8009c2a:	9b08      	ldr	r3, [sp, #32]
 8009c2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c2e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d042      	beq.n	8009cbc <_dtoa_r+0xb5c>
 8009c36:	4651      	mov	r1, sl
 8009c38:	2300      	movs	r3, #0
 8009c3a:	220a      	movs	r2, #10
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 fc89 	bl	800a554 <__multadd>
 8009c42:	45b0      	cmp	r8, r6
 8009c44:	4682      	mov	sl, r0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	f04f 020a 	mov.w	r2, #10
 8009c4e:	4641      	mov	r1, r8
 8009c50:	4628      	mov	r0, r5
 8009c52:	d107      	bne.n	8009c64 <_dtoa_r+0xb04>
 8009c54:	f000 fc7e 	bl	800a554 <__multadd>
 8009c58:	4680      	mov	r8, r0
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	9308      	str	r3, [sp, #32]
 8009c62:	e775      	b.n	8009b50 <_dtoa_r+0x9f0>
 8009c64:	f000 fc76 	bl	800a554 <__multadd>
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	220a      	movs	r2, #10
 8009c70:	4628      	mov	r0, r5
 8009c72:	f000 fc6f 	bl	800a554 <__multadd>
 8009c76:	4606      	mov	r6, r0
 8009c78:	e7f0      	b.n	8009c5c <_dtoa_r+0xafc>
 8009c7a:	9b08      	ldr	r3, [sp, #32]
 8009c7c:	9306      	str	r3, [sp, #24]
 8009c7e:	9f03      	ldr	r7, [sp, #12]
 8009c80:	4621      	mov	r1, r4
 8009c82:	4650      	mov	r0, sl
 8009c84:	f7ff f9e0 	bl	8009048 <quorem>
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c8e:	f807 9b01 	strb.w	r9, [r7], #1
 8009c92:	1afa      	subs	r2, r7, r3
 8009c94:	9b06      	ldr	r3, [sp, #24]
 8009c96:	4293      	cmp	r3, r2
 8009c98:	dd07      	ble.n	8009caa <_dtoa_r+0xb4a>
 8009c9a:	4651      	mov	r1, sl
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 fc57 	bl	800a554 <__multadd>
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	e7ea      	b.n	8009c80 <_dtoa_r+0xb20>
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	f04f 0800 	mov.w	r8, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfcc      	ite	gt
 8009cb4:	461f      	movgt	r7, r3
 8009cb6:	2701      	movle	r7, #1
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	441f      	add	r7, r3
 8009cbc:	4651      	mov	r1, sl
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f000 fe3d 	bl	800a940 <__lshift>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4682      	mov	sl, r0
 8009cca:	f000 fea5 	bl	800aa18 <__mcmp>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	dc97      	bgt.n	8009c02 <_dtoa_r+0xaa2>
 8009cd2:	d102      	bne.n	8009cda <_dtoa_r+0xb7a>
 8009cd4:	f019 0f01 	tst.w	r9, #1
 8009cd8:	d193      	bne.n	8009c02 <_dtoa_r+0xaa2>
 8009cda:	463b      	mov	r3, r7
 8009cdc:	461f      	mov	r7, r3
 8009cde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ce2:	2a30      	cmp	r2, #48	; 0x30
 8009ce4:	d0fa      	beq.n	8009cdc <_dtoa_r+0xb7c>
 8009ce6:	e6e1      	b.n	8009aac <_dtoa_r+0x94c>
 8009ce8:	9a03      	ldr	r2, [sp, #12]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d18a      	bne.n	8009c04 <_dtoa_r+0xaa4>
 8009cee:	2331      	movs	r3, #49	; 0x31
 8009cf0:	f10b 0b01 	add.w	fp, fp, #1
 8009cf4:	e797      	b.n	8009c26 <_dtoa_r+0xac6>
 8009cf6:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <_dtoa_r+0xbc0>)
 8009cf8:	f7ff ba9f 	b.w	800923a <_dtoa_r+0xda>
 8009cfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f47f aa77 	bne.w	80091f2 <_dtoa_r+0x92>
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <_dtoa_r+0xbc4>)
 8009d06:	f7ff ba98 	b.w	800923a <_dtoa_r+0xda>
 8009d0a:	9b06      	ldr	r3, [sp, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dcb6      	bgt.n	8009c7e <_dtoa_r+0xb1e>
 8009d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	f73f aeb5 	bgt.w	8009a82 <_dtoa_r+0x922>
 8009d18:	e7b1      	b.n	8009c7e <_dtoa_r+0xb1e>
 8009d1a:	bf00      	nop
 8009d1c:	0800b8ff 	.word	0x0800b8ff
 8009d20:	0800b7c1 	.word	0x0800b7c1
 8009d24:	0800b89a 	.word	0x0800b89a

08009d28 <_free_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d040      	beq.n	8009db2 <_free_r+0x8a>
 8009d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d34:	1f0c      	subs	r4, r1, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfb8      	it	lt
 8009d3a:	18e4      	addlt	r4, r4, r3
 8009d3c:	f7fd f9ec 	bl	8007118 <__malloc_lock>
 8009d40:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <_free_r+0x8c>)
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	b933      	cbnz	r3, 8009d54 <_free_r+0x2c>
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	6014      	str	r4, [r2, #0]
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d50:	f7fd b9e8 	b.w	8007124 <__malloc_unlock>
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d908      	bls.n	8009d6a <_free_r+0x42>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	1821      	adds	r1, r4, r0
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf01      	itttt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	1809      	addeq	r1, r1, r0
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	e7ed      	b.n	8009d46 <_free_r+0x1e>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	b10b      	cbz	r3, 8009d74 <_free_r+0x4c>
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d9fa      	bls.n	8009d6a <_free_r+0x42>
 8009d74:	6811      	ldr	r1, [r2, #0]
 8009d76:	1850      	adds	r0, r2, r1
 8009d78:	42a0      	cmp	r0, r4
 8009d7a:	d10b      	bne.n	8009d94 <_free_r+0x6c>
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	4401      	add	r1, r0
 8009d80:	1850      	adds	r0, r2, r1
 8009d82:	4283      	cmp	r3, r0
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	d1e0      	bne.n	8009d4a <_free_r+0x22>
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4408      	add	r0, r1
 8009d8e:	6010      	str	r0, [r2, #0]
 8009d90:	6053      	str	r3, [r2, #4]
 8009d92:	e7da      	b.n	8009d4a <_free_r+0x22>
 8009d94:	d902      	bls.n	8009d9c <_free_r+0x74>
 8009d96:	230c      	movs	r3, #12
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	e7d6      	b.n	8009d4a <_free_r+0x22>
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	1821      	adds	r1, r4, r0
 8009da0:	428b      	cmp	r3, r1
 8009da2:	bf01      	itttt	eq
 8009da4:	6819      	ldreq	r1, [r3, #0]
 8009da6:	685b      	ldreq	r3, [r3, #4]
 8009da8:	1809      	addeq	r1, r1, r0
 8009daa:	6021      	streq	r1, [r4, #0]
 8009dac:	6063      	str	r3, [r4, #4]
 8009dae:	6054      	str	r4, [r2, #4]
 8009db0:	e7cb      	b.n	8009d4a <_free_r+0x22>
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20002624 	.word	0x20002624

08009db8 <rshift>:
 8009db8:	6903      	ldr	r3, [r0, #16]
 8009dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009dc2:	f100 0414 	add.w	r4, r0, #20
 8009dc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dca:	dd46      	ble.n	8009e5a <rshift+0xa2>
 8009dcc:	f011 011f 	ands.w	r1, r1, #31
 8009dd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009dd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009dd8:	d10c      	bne.n	8009df4 <rshift+0x3c>
 8009dda:	4629      	mov	r1, r5
 8009ddc:	f100 0710 	add.w	r7, r0, #16
 8009de0:	42b1      	cmp	r1, r6
 8009de2:	d335      	bcc.n	8009e50 <rshift+0x98>
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	1eea      	subs	r2, r5, #3
 8009dea:	4296      	cmp	r6, r2
 8009dec:	bf38      	it	cc
 8009dee:	2300      	movcc	r3, #0
 8009df0:	4423      	add	r3, r4
 8009df2:	e015      	b.n	8009e20 <rshift+0x68>
 8009df4:	46a1      	mov	r9, r4
 8009df6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009dfa:	f1c1 0820 	rsb	r8, r1, #32
 8009dfe:	40cf      	lsrs	r7, r1
 8009e00:	f105 0e04 	add.w	lr, r5, #4
 8009e04:	4576      	cmp	r6, lr
 8009e06:	46f4      	mov	ip, lr
 8009e08:	d816      	bhi.n	8009e38 <rshift+0x80>
 8009e0a:	1a9a      	subs	r2, r3, r2
 8009e0c:	0092      	lsls	r2, r2, #2
 8009e0e:	3a04      	subs	r2, #4
 8009e10:	3501      	adds	r5, #1
 8009e12:	42ae      	cmp	r6, r5
 8009e14:	bf38      	it	cc
 8009e16:	2200      	movcc	r2, #0
 8009e18:	18a3      	adds	r3, r4, r2
 8009e1a:	50a7      	str	r7, [r4, r2]
 8009e1c:	b107      	cbz	r7, 8009e20 <rshift+0x68>
 8009e1e:	3304      	adds	r3, #4
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	eba3 0204 	sub.w	r2, r3, r4
 8009e26:	bf08      	it	eq
 8009e28:	2300      	moveq	r3, #0
 8009e2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e2e:	6102      	str	r2, [r0, #16]
 8009e30:	bf08      	it	eq
 8009e32:	6143      	streq	r3, [r0, #20]
 8009e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e38:	f8dc c000 	ldr.w	ip, [ip]
 8009e3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e40:	ea4c 0707 	orr.w	r7, ip, r7
 8009e44:	f849 7b04 	str.w	r7, [r9], #4
 8009e48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e4c:	40cf      	lsrs	r7, r1
 8009e4e:	e7d9      	b.n	8009e04 <rshift+0x4c>
 8009e50:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e54:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e58:	e7c2      	b.n	8009de0 <rshift+0x28>
 8009e5a:	4623      	mov	r3, r4
 8009e5c:	e7e0      	b.n	8009e20 <rshift+0x68>

08009e5e <__hexdig_fun>:
 8009e5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e62:	2b09      	cmp	r3, #9
 8009e64:	d802      	bhi.n	8009e6c <__hexdig_fun+0xe>
 8009e66:	3820      	subs	r0, #32
 8009e68:	b2c0      	uxtb	r0, r0
 8009e6a:	4770      	bx	lr
 8009e6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e70:	2b05      	cmp	r3, #5
 8009e72:	d801      	bhi.n	8009e78 <__hexdig_fun+0x1a>
 8009e74:	3847      	subs	r0, #71	; 0x47
 8009e76:	e7f7      	b.n	8009e68 <__hexdig_fun+0xa>
 8009e78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e7c:	2b05      	cmp	r3, #5
 8009e7e:	d801      	bhi.n	8009e84 <__hexdig_fun+0x26>
 8009e80:	3827      	subs	r0, #39	; 0x27
 8009e82:	e7f1      	b.n	8009e68 <__hexdig_fun+0xa>
 8009e84:	2000      	movs	r0, #0
 8009e86:	4770      	bx	lr

08009e88 <__gethex>:
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	4681      	mov	r9, r0
 8009e8e:	468a      	mov	sl, r1
 8009e90:	4617      	mov	r7, r2
 8009e92:	680a      	ldr	r2, [r1, #0]
 8009e94:	b085      	sub	sp, #20
 8009e96:	f102 0b02 	add.w	fp, r2, #2
 8009e9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ea2:	9302      	str	r3, [sp, #8]
 8009ea4:	32fe      	adds	r2, #254	; 0xfe
 8009ea6:	eb02 030b 	add.w	r3, r2, fp
 8009eaa:	46d8      	mov	r8, fp
 8009eac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	2830      	cmp	r0, #48	; 0x30
 8009eb4:	d0f7      	beq.n	8009ea6 <__gethex+0x1e>
 8009eb6:	f7ff ffd2 	bl	8009e5e <__hexdig_fun>
 8009eba:	4604      	mov	r4, r0
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d138      	bne.n	8009f32 <__gethex+0xaa>
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	49a7      	ldr	r1, [pc, #668]	; (800a164 <__gethex+0x2dc>)
 8009ec6:	f7fe ff53 	bl	8008d70 <strncmp>
 8009eca:	4606      	mov	r6, r0
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d169      	bne.n	8009fa4 <__gethex+0x11c>
 8009ed0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009ed4:	465d      	mov	r5, fp
 8009ed6:	f7ff ffc2 	bl	8009e5e <__hexdig_fun>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d064      	beq.n	8009fa8 <__gethex+0x120>
 8009ede:	465a      	mov	r2, fp
 8009ee0:	7810      	ldrb	r0, [r2, #0]
 8009ee2:	4690      	mov	r8, r2
 8009ee4:	2830      	cmp	r0, #48	; 0x30
 8009ee6:	f102 0201 	add.w	r2, r2, #1
 8009eea:	d0f9      	beq.n	8009ee0 <__gethex+0x58>
 8009eec:	f7ff ffb7 	bl	8009e5e <__hexdig_fun>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	fab0 f480 	clz	r4, r0
 8009ef6:	465e      	mov	r6, fp
 8009ef8:	0964      	lsrs	r4, r4, #5
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	4642      	mov	r2, r8
 8009efe:	4615      	mov	r5, r2
 8009f00:	7828      	ldrb	r0, [r5, #0]
 8009f02:	3201      	adds	r2, #1
 8009f04:	f7ff ffab 	bl	8009e5e <__hexdig_fun>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d1f8      	bne.n	8009efe <__gethex+0x76>
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	4628      	mov	r0, r5
 8009f10:	4994      	ldr	r1, [pc, #592]	; (800a164 <__gethex+0x2dc>)
 8009f12:	f7fe ff2d 	bl	8008d70 <strncmp>
 8009f16:	b978      	cbnz	r0, 8009f38 <__gethex+0xb0>
 8009f18:	b946      	cbnz	r6, 8009f2c <__gethex+0xa4>
 8009f1a:	1c6e      	adds	r6, r5, #1
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	4615      	mov	r5, r2
 8009f20:	7828      	ldrb	r0, [r5, #0]
 8009f22:	3201      	adds	r2, #1
 8009f24:	f7ff ff9b 	bl	8009e5e <__hexdig_fun>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d1f8      	bne.n	8009f1e <__gethex+0x96>
 8009f2c:	1b73      	subs	r3, r6, r5
 8009f2e:	009e      	lsls	r6, r3, #2
 8009f30:	e004      	b.n	8009f3c <__gethex+0xb4>
 8009f32:	2400      	movs	r4, #0
 8009f34:	4626      	mov	r6, r4
 8009f36:	e7e1      	b.n	8009efc <__gethex+0x74>
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	d1f7      	bne.n	8009f2c <__gethex+0xa4>
 8009f3c:	782b      	ldrb	r3, [r5, #0]
 8009f3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f42:	2b50      	cmp	r3, #80	; 0x50
 8009f44:	d13d      	bne.n	8009fc2 <__gethex+0x13a>
 8009f46:	786b      	ldrb	r3, [r5, #1]
 8009f48:	2b2b      	cmp	r3, #43	; 0x2b
 8009f4a:	d02f      	beq.n	8009fac <__gethex+0x124>
 8009f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8009f4e:	d031      	beq.n	8009fb4 <__gethex+0x12c>
 8009f50:	f04f 0b00 	mov.w	fp, #0
 8009f54:	1c69      	adds	r1, r5, #1
 8009f56:	7808      	ldrb	r0, [r1, #0]
 8009f58:	f7ff ff81 	bl	8009e5e <__hexdig_fun>
 8009f5c:	1e42      	subs	r2, r0, #1
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	2a18      	cmp	r2, #24
 8009f62:	d82e      	bhi.n	8009fc2 <__gethex+0x13a>
 8009f64:	f1a0 0210 	sub.w	r2, r0, #16
 8009f68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f6c:	f7ff ff77 	bl	8009e5e <__hexdig_fun>
 8009f70:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f74:	fa5f fc8c 	uxtb.w	ip, ip
 8009f78:	f1bc 0f18 	cmp.w	ip, #24
 8009f7c:	d91d      	bls.n	8009fba <__gethex+0x132>
 8009f7e:	f1bb 0f00 	cmp.w	fp, #0
 8009f82:	d000      	beq.n	8009f86 <__gethex+0xfe>
 8009f84:	4252      	negs	r2, r2
 8009f86:	4416      	add	r6, r2
 8009f88:	f8ca 1000 	str.w	r1, [sl]
 8009f8c:	b1dc      	cbz	r4, 8009fc6 <__gethex+0x13e>
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bf14      	ite	ne
 8009f94:	f04f 0800 	movne.w	r8, #0
 8009f98:	f04f 0806 	moveq.w	r8, #6
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	b005      	add	sp, #20
 8009fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa4:	4645      	mov	r5, r8
 8009fa6:	4626      	mov	r6, r4
 8009fa8:	2401      	movs	r4, #1
 8009faa:	e7c7      	b.n	8009f3c <__gethex+0xb4>
 8009fac:	f04f 0b00 	mov.w	fp, #0
 8009fb0:	1ca9      	adds	r1, r5, #2
 8009fb2:	e7d0      	b.n	8009f56 <__gethex+0xce>
 8009fb4:	f04f 0b01 	mov.w	fp, #1
 8009fb8:	e7fa      	b.n	8009fb0 <__gethex+0x128>
 8009fba:	230a      	movs	r3, #10
 8009fbc:	fb03 0002 	mla	r0, r3, r2, r0
 8009fc0:	e7d0      	b.n	8009f64 <__gethex+0xdc>
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	e7e0      	b.n	8009f88 <__gethex+0x100>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	eba5 0308 	sub.w	r3, r5, r8
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	2b07      	cmp	r3, #7
 8009fd0:	dc0a      	bgt.n	8009fe8 <__gethex+0x160>
 8009fd2:	4648      	mov	r0, r9
 8009fd4:	f000 fa5c 	bl	800a490 <_Balloc>
 8009fd8:	4604      	mov	r4, r0
 8009fda:	b940      	cbnz	r0, 8009fee <__gethex+0x166>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	21e4      	movs	r1, #228	; 0xe4
 8009fe0:	4b61      	ldr	r3, [pc, #388]	; (800a168 <__gethex+0x2e0>)
 8009fe2:	4862      	ldr	r0, [pc, #392]	; (800a16c <__gethex+0x2e4>)
 8009fe4:	f7ff f812 	bl	800900c <__assert_func>
 8009fe8:	3101      	adds	r1, #1
 8009fea:	105b      	asrs	r3, r3, #1
 8009fec:	e7ef      	b.n	8009fce <__gethex+0x146>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	469b      	mov	fp, r3
 8009ff2:	f100 0a14 	add.w	sl, r0, #20
 8009ff6:	f8cd a004 	str.w	sl, [sp, #4]
 8009ffa:	45a8      	cmp	r8, r5
 8009ffc:	d344      	bcc.n	800a088 <__gethex+0x200>
 8009ffe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a002:	4658      	mov	r0, fp
 800a004:	f848 bb04 	str.w	fp, [r8], #4
 800a008:	eba8 080a 	sub.w	r8, r8, sl
 800a00c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a010:	6122      	str	r2, [r4, #16]
 800a012:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a016:	f000 fb2d 	bl	800a674 <__hi0bits>
 800a01a:	683d      	ldr	r5, [r7, #0]
 800a01c:	eba8 0800 	sub.w	r8, r8, r0
 800a020:	45a8      	cmp	r8, r5
 800a022:	dd59      	ble.n	800a0d8 <__gethex+0x250>
 800a024:	eba8 0805 	sub.w	r8, r8, r5
 800a028:	4641      	mov	r1, r8
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 feab 	bl	800ad86 <__any_on>
 800a030:	4683      	mov	fp, r0
 800a032:	b1b8      	cbz	r0, 800a064 <__gethex+0x1dc>
 800a034:	f04f 0b01 	mov.w	fp, #1
 800a038:	f108 33ff 	add.w	r3, r8, #4294967295
 800a03c:	1159      	asrs	r1, r3, #5
 800a03e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a042:	f003 021f 	and.w	r2, r3, #31
 800a046:	fa0b f202 	lsl.w	r2, fp, r2
 800a04a:	420a      	tst	r2, r1
 800a04c:	d00a      	beq.n	800a064 <__gethex+0x1dc>
 800a04e:	455b      	cmp	r3, fp
 800a050:	dd06      	ble.n	800a060 <__gethex+0x1d8>
 800a052:	4620      	mov	r0, r4
 800a054:	f1a8 0102 	sub.w	r1, r8, #2
 800a058:	f000 fe95 	bl	800ad86 <__any_on>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d138      	bne.n	800a0d2 <__gethex+0x24a>
 800a060:	f04f 0b02 	mov.w	fp, #2
 800a064:	4641      	mov	r1, r8
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff fea6 	bl	8009db8 <rshift>
 800a06c:	4446      	add	r6, r8
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	42b3      	cmp	r3, r6
 800a072:	da41      	bge.n	800a0f8 <__gethex+0x270>
 800a074:	4621      	mov	r1, r4
 800a076:	4648      	mov	r0, r9
 800a078:	f000 fa4a 	bl	800a510 <_Bfree>
 800a07c:	2300      	movs	r3, #0
 800a07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a080:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	e789      	b.n	8009f9c <__gethex+0x114>
 800a088:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a08c:	2a2e      	cmp	r2, #46	; 0x2e
 800a08e:	d014      	beq.n	800a0ba <__gethex+0x232>
 800a090:	2b20      	cmp	r3, #32
 800a092:	d106      	bne.n	800a0a2 <__gethex+0x21a>
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	f843 bb04 	str.w	fp, [r3], #4
 800a09a:	f04f 0b00 	mov.w	fp, #0
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	465b      	mov	r3, fp
 800a0a2:	7828      	ldrb	r0, [r5, #0]
 800a0a4:	9303      	str	r3, [sp, #12]
 800a0a6:	f7ff feda 	bl	8009e5e <__hexdig_fun>
 800a0aa:	9b03      	ldr	r3, [sp, #12]
 800a0ac:	f000 000f 	and.w	r0, r0, #15
 800a0b0:	4098      	lsls	r0, r3
 800a0b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	e79f      	b.n	8009ffa <__gethex+0x172>
 800a0ba:	45a8      	cmp	r8, r5
 800a0bc:	d8e8      	bhi.n	800a090 <__gethex+0x208>
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	4928      	ldr	r1, [pc, #160]	; (800a164 <__gethex+0x2dc>)
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	f7fe fe53 	bl	8008d70 <strncmp>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d1df      	bne.n	800a090 <__gethex+0x208>
 800a0d0:	e793      	b.n	8009ffa <__gethex+0x172>
 800a0d2:	f04f 0b03 	mov.w	fp, #3
 800a0d6:	e7c5      	b.n	800a064 <__gethex+0x1dc>
 800a0d8:	da0b      	bge.n	800a0f2 <__gethex+0x26a>
 800a0da:	eba5 0808 	sub.w	r8, r5, r8
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4642      	mov	r2, r8
 800a0e2:	4648      	mov	r0, r9
 800a0e4:	f000 fc2c 	bl	800a940 <__lshift>
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	eba6 0608 	sub.w	r6, r6, r8
 800a0ee:	f100 0a14 	add.w	sl, r0, #20
 800a0f2:	f04f 0b00 	mov.w	fp, #0
 800a0f6:	e7ba      	b.n	800a06e <__gethex+0x1e6>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	42b3      	cmp	r3, r6
 800a0fc:	dd74      	ble.n	800a1e8 <__gethex+0x360>
 800a0fe:	1b9e      	subs	r6, r3, r6
 800a100:	42b5      	cmp	r5, r6
 800a102:	dc35      	bgt.n	800a170 <__gethex+0x2e8>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b02      	cmp	r3, #2
 800a108:	d023      	beq.n	800a152 <__gethex+0x2ca>
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d025      	beq.n	800a15a <__gethex+0x2d2>
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d115      	bne.n	800a13e <__gethex+0x2b6>
 800a112:	42b5      	cmp	r5, r6
 800a114:	d113      	bne.n	800a13e <__gethex+0x2b6>
 800a116:	2d01      	cmp	r5, #1
 800a118:	d10b      	bne.n	800a132 <__gethex+0x2aa>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	9a02      	ldr	r2, [sp, #8]
 800a11e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	2301      	movs	r3, #1
 800a126:	6123      	str	r3, [r4, #16]
 800a128:	f8ca 3000 	str.w	r3, [sl]
 800a12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a12e:	601c      	str	r4, [r3, #0]
 800a130:	e734      	b.n	8009f9c <__gethex+0x114>
 800a132:	4620      	mov	r0, r4
 800a134:	1e69      	subs	r1, r5, #1
 800a136:	f000 fe26 	bl	800ad86 <__any_on>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d1ed      	bne.n	800a11a <__gethex+0x292>
 800a13e:	4621      	mov	r1, r4
 800a140:	4648      	mov	r0, r9
 800a142:	f000 f9e5 	bl	800a510 <_Bfree>
 800a146:	2300      	movs	r3, #0
 800a148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a14a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e724      	b.n	8009f9c <__gethex+0x114>
 800a152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1f2      	bne.n	800a13e <__gethex+0x2b6>
 800a158:	e7df      	b.n	800a11a <__gethex+0x292>
 800a15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1dc      	bne.n	800a11a <__gethex+0x292>
 800a160:	e7ed      	b.n	800a13e <__gethex+0x2b6>
 800a162:	bf00      	nop
 800a164:	0800b65a 	.word	0x0800b65a
 800a168:	0800b8ff 	.word	0x0800b8ff
 800a16c:	0800b910 	.word	0x0800b910
 800a170:	f106 38ff 	add.w	r8, r6, #4294967295
 800a174:	f1bb 0f00 	cmp.w	fp, #0
 800a178:	d133      	bne.n	800a1e2 <__gethex+0x35a>
 800a17a:	f1b8 0f00 	cmp.w	r8, #0
 800a17e:	d004      	beq.n	800a18a <__gethex+0x302>
 800a180:	4641      	mov	r1, r8
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fdff 	bl	800ad86 <__any_on>
 800a188:	4683      	mov	fp, r0
 800a18a:	2301      	movs	r3, #1
 800a18c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a190:	f008 081f 	and.w	r8, r8, #31
 800a194:	fa03 f308 	lsl.w	r3, r3, r8
 800a198:	f04f 0802 	mov.w	r8, #2
 800a19c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4213      	tst	r3, r2
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	bf18      	it	ne
 800a1a8:	f04b 0b02 	orrne.w	fp, fp, #2
 800a1ac:	1bad      	subs	r5, r5, r6
 800a1ae:	f7ff fe03 	bl	8009db8 <rshift>
 800a1b2:	687e      	ldr	r6, [r7, #4]
 800a1b4:	f1bb 0f00 	cmp.w	fp, #0
 800a1b8:	d04a      	beq.n	800a250 <__gethex+0x3c8>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d016      	beq.n	800a1ee <__gethex+0x366>
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d018      	beq.n	800a1f6 <__gethex+0x36e>
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d109      	bne.n	800a1dc <__gethex+0x354>
 800a1c8:	f01b 0f02 	tst.w	fp, #2
 800a1cc:	d006      	beq.n	800a1dc <__gethex+0x354>
 800a1ce:	f8da 3000 	ldr.w	r3, [sl]
 800a1d2:	ea4b 0b03 	orr.w	fp, fp, r3
 800a1d6:	f01b 0f01 	tst.w	fp, #1
 800a1da:	d10f      	bne.n	800a1fc <__gethex+0x374>
 800a1dc:	f048 0810 	orr.w	r8, r8, #16
 800a1e0:	e036      	b.n	800a250 <__gethex+0x3c8>
 800a1e2:	f04f 0b01 	mov.w	fp, #1
 800a1e6:	e7d0      	b.n	800a18a <__gethex+0x302>
 800a1e8:	f04f 0801 	mov.w	r8, #1
 800a1ec:	e7e2      	b.n	800a1b4 <__gethex+0x32c>
 800a1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f0:	f1c3 0301 	rsb	r3, r3, #1
 800a1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0ef      	beq.n	800a1dc <__gethex+0x354>
 800a1fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a200:	f104 0214 	add.w	r2, r4, #20
 800a204:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	2300      	movs	r3, #0
 800a20c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a210:	4694      	mov	ip, r2
 800a212:	f852 1b04 	ldr.w	r1, [r2], #4
 800a216:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a21a:	d01e      	beq.n	800a25a <__gethex+0x3d2>
 800a21c:	3101      	adds	r1, #1
 800a21e:	f8cc 1000 	str.w	r1, [ip]
 800a222:	f1b8 0f02 	cmp.w	r8, #2
 800a226:	f104 0214 	add.w	r2, r4, #20
 800a22a:	d13d      	bne.n	800a2a8 <__gethex+0x420>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	3b01      	subs	r3, #1
 800a230:	42ab      	cmp	r3, r5
 800a232:	d10b      	bne.n	800a24c <__gethex+0x3c4>
 800a234:	2301      	movs	r3, #1
 800a236:	1169      	asrs	r1, r5, #5
 800a238:	f005 051f 	and.w	r5, r5, #31
 800a23c:	fa03 f505 	lsl.w	r5, r3, r5
 800a240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a244:	421d      	tst	r5, r3
 800a246:	bf18      	it	ne
 800a248:	f04f 0801 	movne.w	r8, #1
 800a24c:	f048 0820 	orr.w	r8, r8, #32
 800a250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a252:	601c      	str	r4, [r3, #0]
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	601e      	str	r6, [r3, #0]
 800a258:	e6a0      	b.n	8009f9c <__gethex+0x114>
 800a25a:	4290      	cmp	r0, r2
 800a25c:	f842 3c04 	str.w	r3, [r2, #-4]
 800a260:	d8d6      	bhi.n	800a210 <__gethex+0x388>
 800a262:	68a2      	ldr	r2, [r4, #8]
 800a264:	4593      	cmp	fp, r2
 800a266:	db17      	blt.n	800a298 <__gethex+0x410>
 800a268:	6861      	ldr	r1, [r4, #4]
 800a26a:	4648      	mov	r0, r9
 800a26c:	3101      	adds	r1, #1
 800a26e:	f000 f90f 	bl	800a490 <_Balloc>
 800a272:	4682      	mov	sl, r0
 800a274:	b918      	cbnz	r0, 800a27e <__gethex+0x3f6>
 800a276:	4602      	mov	r2, r0
 800a278:	2184      	movs	r1, #132	; 0x84
 800a27a:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <__gethex+0x45c>)
 800a27c:	e6b1      	b.n	8009fe2 <__gethex+0x15a>
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	f104 010c 	add.w	r1, r4, #12
 800a284:	3202      	adds	r2, #2
 800a286:	0092      	lsls	r2, r2, #2
 800a288:	300c      	adds	r0, #12
 800a28a:	f7fe fea6 	bl	8008fda <memcpy>
 800a28e:	4621      	mov	r1, r4
 800a290:	4648      	mov	r0, r9
 800a292:	f000 f93d 	bl	800a510 <_Bfree>
 800a296:	4654      	mov	r4, sl
 800a298:	6922      	ldr	r2, [r4, #16]
 800a29a:	1c51      	adds	r1, r2, #1
 800a29c:	6121      	str	r1, [r4, #16]
 800a29e:	2101      	movs	r1, #1
 800a2a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a2a4:	6151      	str	r1, [r2, #20]
 800a2a6:	e7bc      	b.n	800a222 <__gethex+0x39a>
 800a2a8:	6921      	ldr	r1, [r4, #16]
 800a2aa:	4559      	cmp	r1, fp
 800a2ac:	dd0b      	ble.n	800a2c6 <__gethex+0x43e>
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7ff fd81 	bl	8009db8 <rshift>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3601      	adds	r6, #1
 800a2ba:	42b3      	cmp	r3, r6
 800a2bc:	f6ff aeda 	blt.w	800a074 <__gethex+0x1ec>
 800a2c0:	f04f 0801 	mov.w	r8, #1
 800a2c4:	e7c2      	b.n	800a24c <__gethex+0x3c4>
 800a2c6:	f015 051f 	ands.w	r5, r5, #31
 800a2ca:	d0f9      	beq.n	800a2c0 <__gethex+0x438>
 800a2cc:	9b01      	ldr	r3, [sp, #4]
 800a2ce:	f1c5 0520 	rsb	r5, r5, #32
 800a2d2:	441a      	add	r2, r3
 800a2d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a2d8:	f000 f9cc 	bl	800a674 <__hi0bits>
 800a2dc:	42a8      	cmp	r0, r5
 800a2de:	dbe6      	blt.n	800a2ae <__gethex+0x426>
 800a2e0:	e7ee      	b.n	800a2c0 <__gethex+0x438>
 800a2e2:	bf00      	nop
 800a2e4:	0800b8ff 	.word	0x0800b8ff

0800a2e8 <L_shift>:
 800a2e8:	f1c2 0208 	rsb	r2, r2, #8
 800a2ec:	0092      	lsls	r2, r2, #2
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	f1c2 0620 	rsb	r6, r2, #32
 800a2f4:	6843      	ldr	r3, [r0, #4]
 800a2f6:	6804      	ldr	r4, [r0, #0]
 800a2f8:	fa03 f506 	lsl.w	r5, r3, r6
 800a2fc:	432c      	orrs	r4, r5
 800a2fe:	40d3      	lsrs	r3, r2
 800a300:	6004      	str	r4, [r0, #0]
 800a302:	f840 3f04 	str.w	r3, [r0, #4]!
 800a306:	4288      	cmp	r0, r1
 800a308:	d3f4      	bcc.n	800a2f4 <L_shift+0xc>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}

0800a30c <__match>:
 800a30c:	b530      	push	{r4, r5, lr}
 800a30e:	6803      	ldr	r3, [r0, #0]
 800a310:	3301      	adds	r3, #1
 800a312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a316:	b914      	cbnz	r4, 800a31e <__match+0x12>
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	2001      	movs	r0, #1
 800a31c:	bd30      	pop	{r4, r5, pc}
 800a31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a326:	2d19      	cmp	r5, #25
 800a328:	bf98      	it	ls
 800a32a:	3220      	addls	r2, #32
 800a32c:	42a2      	cmp	r2, r4
 800a32e:	d0f0      	beq.n	800a312 <__match+0x6>
 800a330:	2000      	movs	r0, #0
 800a332:	e7f3      	b.n	800a31c <__match+0x10>

0800a334 <__hexnan>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	2500      	movs	r5, #0
 800a33a:	680b      	ldr	r3, [r1, #0]
 800a33c:	4682      	mov	sl, r0
 800a33e:	115e      	asrs	r6, r3, #5
 800a340:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a344:	f013 031f 	ands.w	r3, r3, #31
 800a348:	bf18      	it	ne
 800a34a:	3604      	addne	r6, #4
 800a34c:	1f37      	subs	r7, r6, #4
 800a34e:	4690      	mov	r8, r2
 800a350:	46b9      	mov	r9, r7
 800a352:	463c      	mov	r4, r7
 800a354:	46ab      	mov	fp, r5
 800a356:	b087      	sub	sp, #28
 800a358:	6801      	ldr	r1, [r0, #0]
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a360:	9502      	str	r5, [sp, #8]
 800a362:	784a      	ldrb	r2, [r1, #1]
 800a364:	1c4b      	adds	r3, r1, #1
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	b342      	cbz	r2, 800a3bc <__hexnan+0x88>
 800a36a:	4610      	mov	r0, r2
 800a36c:	9105      	str	r1, [sp, #20]
 800a36e:	9204      	str	r2, [sp, #16]
 800a370:	f7ff fd75 	bl	8009e5e <__hexdig_fun>
 800a374:	2800      	cmp	r0, #0
 800a376:	d14f      	bne.n	800a418 <__hexnan+0xe4>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	9905      	ldr	r1, [sp, #20]
 800a37c:	2a20      	cmp	r2, #32
 800a37e:	d818      	bhi.n	800a3b2 <__hexnan+0x7e>
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	459b      	cmp	fp, r3
 800a384:	dd13      	ble.n	800a3ae <__hexnan+0x7a>
 800a386:	454c      	cmp	r4, r9
 800a388:	d206      	bcs.n	800a398 <__hexnan+0x64>
 800a38a:	2d07      	cmp	r5, #7
 800a38c:	dc04      	bgt.n	800a398 <__hexnan+0x64>
 800a38e:	462a      	mov	r2, r5
 800a390:	4649      	mov	r1, r9
 800a392:	4620      	mov	r0, r4
 800a394:	f7ff ffa8 	bl	800a2e8 <L_shift>
 800a398:	4544      	cmp	r4, r8
 800a39a:	d950      	bls.n	800a43e <__hexnan+0x10a>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f1a4 0904 	sub.w	r9, r4, #4
 800a3a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3a6:	461d      	mov	r5, r3
 800a3a8:	464c      	mov	r4, r9
 800a3aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a3ae:	9903      	ldr	r1, [sp, #12]
 800a3b0:	e7d7      	b.n	800a362 <__hexnan+0x2e>
 800a3b2:	2a29      	cmp	r2, #41	; 0x29
 800a3b4:	d155      	bne.n	800a462 <__hexnan+0x12e>
 800a3b6:	3102      	adds	r1, #2
 800a3b8:	f8ca 1000 	str.w	r1, [sl]
 800a3bc:	f1bb 0f00 	cmp.w	fp, #0
 800a3c0:	d04f      	beq.n	800a462 <__hexnan+0x12e>
 800a3c2:	454c      	cmp	r4, r9
 800a3c4:	d206      	bcs.n	800a3d4 <__hexnan+0xa0>
 800a3c6:	2d07      	cmp	r5, #7
 800a3c8:	dc04      	bgt.n	800a3d4 <__hexnan+0xa0>
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7ff ff8a 	bl	800a2e8 <L_shift>
 800a3d4:	4544      	cmp	r4, r8
 800a3d6:	d934      	bls.n	800a442 <__hexnan+0x10e>
 800a3d8:	4623      	mov	r3, r4
 800a3da:	f1a8 0204 	sub.w	r2, r8, #4
 800a3de:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3e2:	429f      	cmp	r7, r3
 800a3e4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3e8:	d2f9      	bcs.n	800a3de <__hexnan+0xaa>
 800a3ea:	1b3b      	subs	r3, r7, r4
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	3e03      	subs	r6, #3
 800a3f4:	3401      	adds	r4, #1
 800a3f6:	42a6      	cmp	r6, r4
 800a3f8:	bf38      	it	cc
 800a3fa:	2304      	movcc	r3, #4
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4443      	add	r3, r8
 800a400:	f843 2b04 	str.w	r2, [r3], #4
 800a404:	429f      	cmp	r7, r3
 800a406:	d2fb      	bcs.n	800a400 <__hexnan+0xcc>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	b91b      	cbnz	r3, 800a414 <__hexnan+0xe0>
 800a40c:	4547      	cmp	r7, r8
 800a40e:	d126      	bne.n	800a45e <__hexnan+0x12a>
 800a410:	2301      	movs	r3, #1
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	2005      	movs	r0, #5
 800a416:	e025      	b.n	800a464 <__hexnan+0x130>
 800a418:	3501      	adds	r5, #1
 800a41a:	2d08      	cmp	r5, #8
 800a41c:	f10b 0b01 	add.w	fp, fp, #1
 800a420:	dd06      	ble.n	800a430 <__hexnan+0xfc>
 800a422:	4544      	cmp	r4, r8
 800a424:	d9c3      	bls.n	800a3ae <__hexnan+0x7a>
 800a426:	2300      	movs	r3, #0
 800a428:	2501      	movs	r5, #1
 800a42a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a42e:	3c04      	subs	r4, #4
 800a430:	6822      	ldr	r2, [r4, #0]
 800a432:	f000 000f 	and.w	r0, r0, #15
 800a436:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	e7b7      	b.n	800a3ae <__hexnan+0x7a>
 800a43e:	2508      	movs	r5, #8
 800a440:	e7b5      	b.n	800a3ae <__hexnan+0x7a>
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0df      	beq.n	800a408 <__hexnan+0xd4>
 800a448:	f04f 32ff 	mov.w	r2, #4294967295
 800a44c:	f1c3 0320 	rsb	r3, r3, #32
 800a450:	40da      	lsrs	r2, r3
 800a452:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a456:	4013      	ands	r3, r2
 800a458:	f846 3c04 	str.w	r3, [r6, #-4]
 800a45c:	e7d4      	b.n	800a408 <__hexnan+0xd4>
 800a45e:	3f04      	subs	r7, #4
 800a460:	e7d2      	b.n	800a408 <__hexnan+0xd4>
 800a462:	2004      	movs	r0, #4
 800a464:	b007      	add	sp, #28
 800a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a46a <__ascii_mbtowc>:
 800a46a:	b082      	sub	sp, #8
 800a46c:	b901      	cbnz	r1, 800a470 <__ascii_mbtowc+0x6>
 800a46e:	a901      	add	r1, sp, #4
 800a470:	b142      	cbz	r2, 800a484 <__ascii_mbtowc+0x1a>
 800a472:	b14b      	cbz	r3, 800a488 <__ascii_mbtowc+0x1e>
 800a474:	7813      	ldrb	r3, [r2, #0]
 800a476:	600b      	str	r3, [r1, #0]
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	1e10      	subs	r0, r2, #0
 800a47c:	bf18      	it	ne
 800a47e:	2001      	movne	r0, #1
 800a480:	b002      	add	sp, #8
 800a482:	4770      	bx	lr
 800a484:	4610      	mov	r0, r2
 800a486:	e7fb      	b.n	800a480 <__ascii_mbtowc+0x16>
 800a488:	f06f 0001 	mvn.w	r0, #1
 800a48c:	e7f8      	b.n	800a480 <__ascii_mbtowc+0x16>
	...

0800a490 <_Balloc>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	69c6      	ldr	r6, [r0, #28]
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	b976      	cbnz	r6, 800a4b8 <_Balloc+0x28>
 800a49a:	2010      	movs	r0, #16
 800a49c:	f7fc fd8c 	bl	8006fb8 <malloc>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	61e0      	str	r0, [r4, #28]
 800a4a4:	b920      	cbnz	r0, 800a4b0 <_Balloc+0x20>
 800a4a6:	216b      	movs	r1, #107	; 0x6b
 800a4a8:	4b17      	ldr	r3, [pc, #92]	; (800a508 <_Balloc+0x78>)
 800a4aa:	4818      	ldr	r0, [pc, #96]	; (800a50c <_Balloc+0x7c>)
 800a4ac:	f7fe fdae 	bl	800900c <__assert_func>
 800a4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b4:	6006      	str	r6, [r0, #0]
 800a4b6:	60c6      	str	r6, [r0, #12]
 800a4b8:	69e6      	ldr	r6, [r4, #28]
 800a4ba:	68f3      	ldr	r3, [r6, #12]
 800a4bc:	b183      	cbz	r3, 800a4e0 <_Balloc+0x50>
 800a4be:	69e3      	ldr	r3, [r4, #28]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4c6:	b9b8      	cbnz	r0, 800a4f8 <_Balloc+0x68>
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a4ce:	1d72      	adds	r2, r6, #5
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	0092      	lsls	r2, r2, #2
 800a4d4:	f000 ff0d 	bl	800b2f2 <_calloc_r>
 800a4d8:	b160      	cbz	r0, 800a4f4 <_Balloc+0x64>
 800a4da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4de:	e00e      	b.n	800a4fe <_Balloc+0x6e>
 800a4e0:	2221      	movs	r2, #33	; 0x21
 800a4e2:	2104      	movs	r1, #4
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 ff04 	bl	800b2f2 <_calloc_r>
 800a4ea:	69e3      	ldr	r3, [r4, #28]
 800a4ec:	60f0      	str	r0, [r6, #12]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e4      	bne.n	800a4be <_Balloc+0x2e>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	6802      	ldr	r2, [r0, #0]
 800a4fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4fe:	2300      	movs	r3, #0
 800a500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a504:	e7f7      	b.n	800a4f6 <_Balloc+0x66>
 800a506:	bf00      	nop
 800a508:	0800b7e5 	.word	0x0800b7e5
 800a50c:	0800b970 	.word	0x0800b970

0800a510 <_Bfree>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	69c6      	ldr	r6, [r0, #28]
 800a514:	4605      	mov	r5, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b976      	cbnz	r6, 800a538 <_Bfree+0x28>
 800a51a:	2010      	movs	r0, #16
 800a51c:	f7fc fd4c 	bl	8006fb8 <malloc>
 800a520:	4602      	mov	r2, r0
 800a522:	61e8      	str	r0, [r5, #28]
 800a524:	b920      	cbnz	r0, 800a530 <_Bfree+0x20>
 800a526:	218f      	movs	r1, #143	; 0x8f
 800a528:	4b08      	ldr	r3, [pc, #32]	; (800a54c <_Bfree+0x3c>)
 800a52a:	4809      	ldr	r0, [pc, #36]	; (800a550 <_Bfree+0x40>)
 800a52c:	f7fe fd6e 	bl	800900c <__assert_func>
 800a530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a534:	6006      	str	r6, [r0, #0]
 800a536:	60c6      	str	r6, [r0, #12]
 800a538:	b13c      	cbz	r4, 800a54a <_Bfree+0x3a>
 800a53a:	69eb      	ldr	r3, [r5, #28]
 800a53c:	6862      	ldr	r2, [r4, #4]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a544:	6021      	str	r1, [r4, #0]
 800a546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	0800b7e5 	.word	0x0800b7e5
 800a550:	0800b970 	.word	0x0800b970

0800a554 <__multadd>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	4607      	mov	r7, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	461e      	mov	r6, r3
 800a55e:	2000      	movs	r0, #0
 800a560:	690d      	ldr	r5, [r1, #16]
 800a562:	f101 0c14 	add.w	ip, r1, #20
 800a566:	f8dc 3000 	ldr.w	r3, [ip]
 800a56a:	3001      	adds	r0, #1
 800a56c:	b299      	uxth	r1, r3
 800a56e:	fb02 6101 	mla	r1, r2, r1, r6
 800a572:	0c1e      	lsrs	r6, r3, #16
 800a574:	0c0b      	lsrs	r3, r1, #16
 800a576:	fb02 3306 	mla	r3, r2, r6, r3
 800a57a:	b289      	uxth	r1, r1
 800a57c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a580:	4285      	cmp	r5, r0
 800a582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a586:	f84c 1b04 	str.w	r1, [ip], #4
 800a58a:	dcec      	bgt.n	800a566 <__multadd+0x12>
 800a58c:	b30e      	cbz	r6, 800a5d2 <__multadd+0x7e>
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	42ab      	cmp	r3, r5
 800a592:	dc19      	bgt.n	800a5c8 <__multadd+0x74>
 800a594:	6861      	ldr	r1, [r4, #4]
 800a596:	4638      	mov	r0, r7
 800a598:	3101      	adds	r1, #1
 800a59a:	f7ff ff79 	bl	800a490 <_Balloc>
 800a59e:	4680      	mov	r8, r0
 800a5a0:	b928      	cbnz	r0, 800a5ae <__multadd+0x5a>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	21ba      	movs	r1, #186	; 0xba
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <__multadd+0x84>)
 800a5a8:	480c      	ldr	r0, [pc, #48]	; (800a5dc <__multadd+0x88>)
 800a5aa:	f7fe fd2f 	bl	800900c <__assert_func>
 800a5ae:	6922      	ldr	r2, [r4, #16]
 800a5b0:	f104 010c 	add.w	r1, r4, #12
 800a5b4:	3202      	adds	r2, #2
 800a5b6:	0092      	lsls	r2, r2, #2
 800a5b8:	300c      	adds	r0, #12
 800a5ba:	f7fe fd0e 	bl	8008fda <memcpy>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f7ff ffa5 	bl	800a510 <_Bfree>
 800a5c6:	4644      	mov	r4, r8
 800a5c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	615e      	str	r6, [r3, #20]
 800a5d0:	6125      	str	r5, [r4, #16]
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d8:	0800b8ff 	.word	0x0800b8ff
 800a5dc:	0800b970 	.word	0x0800b970

0800a5e0 <__s2b>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	4615      	mov	r5, r2
 800a5e6:	2209      	movs	r2, #9
 800a5e8:	461f      	mov	r7, r3
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	db09      	blt.n	800a610 <__s2b+0x30>
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f7ff ff47 	bl	800a490 <_Balloc>
 800a602:	b940      	cbnz	r0, 800a616 <__s2b+0x36>
 800a604:	4602      	mov	r2, r0
 800a606:	21d3      	movs	r1, #211	; 0xd3
 800a608:	4b18      	ldr	r3, [pc, #96]	; (800a66c <__s2b+0x8c>)
 800a60a:	4819      	ldr	r0, [pc, #100]	; (800a670 <__s2b+0x90>)
 800a60c:	f7fe fcfe 	bl	800900c <__assert_func>
 800a610:	0052      	lsls	r2, r2, #1
 800a612:	3101      	adds	r1, #1
 800a614:	e7f0      	b.n	800a5f8 <__s2b+0x18>
 800a616:	9b08      	ldr	r3, [sp, #32]
 800a618:	2d09      	cmp	r5, #9
 800a61a:	6143      	str	r3, [r0, #20]
 800a61c:	f04f 0301 	mov.w	r3, #1
 800a620:	6103      	str	r3, [r0, #16]
 800a622:	dd16      	ble.n	800a652 <__s2b+0x72>
 800a624:	f104 0909 	add.w	r9, r4, #9
 800a628:	46c8      	mov	r8, r9
 800a62a:	442c      	add	r4, r5
 800a62c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a630:	4601      	mov	r1, r0
 800a632:	220a      	movs	r2, #10
 800a634:	4630      	mov	r0, r6
 800a636:	3b30      	subs	r3, #48	; 0x30
 800a638:	f7ff ff8c 	bl	800a554 <__multadd>
 800a63c:	45a0      	cmp	r8, r4
 800a63e:	d1f5      	bne.n	800a62c <__s2b+0x4c>
 800a640:	f1a5 0408 	sub.w	r4, r5, #8
 800a644:	444c      	add	r4, r9
 800a646:	1b2d      	subs	r5, r5, r4
 800a648:	1963      	adds	r3, r4, r5
 800a64a:	42bb      	cmp	r3, r7
 800a64c:	db04      	blt.n	800a658 <__s2b+0x78>
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a652:	2509      	movs	r5, #9
 800a654:	340a      	adds	r4, #10
 800a656:	e7f6      	b.n	800a646 <__s2b+0x66>
 800a658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a65c:	4601      	mov	r1, r0
 800a65e:	220a      	movs	r2, #10
 800a660:	4630      	mov	r0, r6
 800a662:	3b30      	subs	r3, #48	; 0x30
 800a664:	f7ff ff76 	bl	800a554 <__multadd>
 800a668:	e7ee      	b.n	800a648 <__s2b+0x68>
 800a66a:	bf00      	nop
 800a66c:	0800b8ff 	.word	0x0800b8ff
 800a670:	0800b970 	.word	0x0800b970

0800a674 <__hi0bits>:
 800a674:	0c02      	lsrs	r2, r0, #16
 800a676:	0412      	lsls	r2, r2, #16
 800a678:	4603      	mov	r3, r0
 800a67a:	b9ca      	cbnz	r2, 800a6b0 <__hi0bits+0x3c>
 800a67c:	0403      	lsls	r3, r0, #16
 800a67e:	2010      	movs	r0, #16
 800a680:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a684:	bf04      	itt	eq
 800a686:	021b      	lsleq	r3, r3, #8
 800a688:	3008      	addeq	r0, #8
 800a68a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a68e:	bf04      	itt	eq
 800a690:	011b      	lsleq	r3, r3, #4
 800a692:	3004      	addeq	r0, #4
 800a694:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a698:	bf04      	itt	eq
 800a69a:	009b      	lsleq	r3, r3, #2
 800a69c:	3002      	addeq	r0, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	db05      	blt.n	800a6ae <__hi0bits+0x3a>
 800a6a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a6a6:	f100 0001 	add.w	r0, r0, #1
 800a6aa:	bf08      	it	eq
 800a6ac:	2020      	moveq	r0, #32
 800a6ae:	4770      	bx	lr
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e7e5      	b.n	800a680 <__hi0bits+0xc>

0800a6b4 <__lo0bits>:
 800a6b4:	6803      	ldr	r3, [r0, #0]
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	f013 0007 	ands.w	r0, r3, #7
 800a6bc:	d00b      	beq.n	800a6d6 <__lo0bits+0x22>
 800a6be:	07d9      	lsls	r1, r3, #31
 800a6c0:	d421      	bmi.n	800a706 <__lo0bits+0x52>
 800a6c2:	0798      	lsls	r0, r3, #30
 800a6c4:	bf49      	itett	mi
 800a6c6:	085b      	lsrmi	r3, r3, #1
 800a6c8:	089b      	lsrpl	r3, r3, #2
 800a6ca:	2001      	movmi	r0, #1
 800a6cc:	6013      	strmi	r3, [r2, #0]
 800a6ce:	bf5c      	itt	pl
 800a6d0:	2002      	movpl	r0, #2
 800a6d2:	6013      	strpl	r3, [r2, #0]
 800a6d4:	4770      	bx	lr
 800a6d6:	b299      	uxth	r1, r3
 800a6d8:	b909      	cbnz	r1, 800a6de <__lo0bits+0x2a>
 800a6da:	2010      	movs	r0, #16
 800a6dc:	0c1b      	lsrs	r3, r3, #16
 800a6de:	b2d9      	uxtb	r1, r3
 800a6e0:	b909      	cbnz	r1, 800a6e6 <__lo0bits+0x32>
 800a6e2:	3008      	adds	r0, #8
 800a6e4:	0a1b      	lsrs	r3, r3, #8
 800a6e6:	0719      	lsls	r1, r3, #28
 800a6e8:	bf04      	itt	eq
 800a6ea:	091b      	lsreq	r3, r3, #4
 800a6ec:	3004      	addeq	r0, #4
 800a6ee:	0799      	lsls	r1, r3, #30
 800a6f0:	bf04      	itt	eq
 800a6f2:	089b      	lsreq	r3, r3, #2
 800a6f4:	3002      	addeq	r0, #2
 800a6f6:	07d9      	lsls	r1, r3, #31
 800a6f8:	d403      	bmi.n	800a702 <__lo0bits+0x4e>
 800a6fa:	085b      	lsrs	r3, r3, #1
 800a6fc:	f100 0001 	add.w	r0, r0, #1
 800a700:	d003      	beq.n	800a70a <__lo0bits+0x56>
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	4770      	bx	lr
 800a706:	2000      	movs	r0, #0
 800a708:	4770      	bx	lr
 800a70a:	2020      	movs	r0, #32
 800a70c:	4770      	bx	lr
	...

0800a710 <__i2b>:
 800a710:	b510      	push	{r4, lr}
 800a712:	460c      	mov	r4, r1
 800a714:	2101      	movs	r1, #1
 800a716:	f7ff febb 	bl	800a490 <_Balloc>
 800a71a:	4602      	mov	r2, r0
 800a71c:	b928      	cbnz	r0, 800a72a <__i2b+0x1a>
 800a71e:	f240 1145 	movw	r1, #325	; 0x145
 800a722:	4b04      	ldr	r3, [pc, #16]	; (800a734 <__i2b+0x24>)
 800a724:	4804      	ldr	r0, [pc, #16]	; (800a738 <__i2b+0x28>)
 800a726:	f7fe fc71 	bl	800900c <__assert_func>
 800a72a:	2301      	movs	r3, #1
 800a72c:	6144      	str	r4, [r0, #20]
 800a72e:	6103      	str	r3, [r0, #16]
 800a730:	bd10      	pop	{r4, pc}
 800a732:	bf00      	nop
 800a734:	0800b8ff 	.word	0x0800b8ff
 800a738:	0800b970 	.word	0x0800b970

0800a73c <__multiply>:
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	4691      	mov	r9, r2
 800a742:	690a      	ldr	r2, [r1, #16]
 800a744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a748:	460c      	mov	r4, r1
 800a74a:	429a      	cmp	r2, r3
 800a74c:	bfbe      	ittt	lt
 800a74e:	460b      	movlt	r3, r1
 800a750:	464c      	movlt	r4, r9
 800a752:	4699      	movlt	r9, r3
 800a754:	6927      	ldr	r7, [r4, #16]
 800a756:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	6861      	ldr	r1, [r4, #4]
 800a75e:	eb07 060a 	add.w	r6, r7, sl
 800a762:	42b3      	cmp	r3, r6
 800a764:	b085      	sub	sp, #20
 800a766:	bfb8      	it	lt
 800a768:	3101      	addlt	r1, #1
 800a76a:	f7ff fe91 	bl	800a490 <_Balloc>
 800a76e:	b930      	cbnz	r0, 800a77e <__multiply+0x42>
 800a770:	4602      	mov	r2, r0
 800a772:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a776:	4b43      	ldr	r3, [pc, #268]	; (800a884 <__multiply+0x148>)
 800a778:	4843      	ldr	r0, [pc, #268]	; (800a888 <__multiply+0x14c>)
 800a77a:	f7fe fc47 	bl	800900c <__assert_func>
 800a77e:	f100 0514 	add.w	r5, r0, #20
 800a782:	462b      	mov	r3, r5
 800a784:	2200      	movs	r2, #0
 800a786:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a78a:	4543      	cmp	r3, r8
 800a78c:	d321      	bcc.n	800a7d2 <__multiply+0x96>
 800a78e:	f104 0314 	add.w	r3, r4, #20
 800a792:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a796:	f109 0314 	add.w	r3, r9, #20
 800a79a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a79e:	9202      	str	r2, [sp, #8]
 800a7a0:	1b3a      	subs	r2, r7, r4
 800a7a2:	3a15      	subs	r2, #21
 800a7a4:	f022 0203 	bic.w	r2, r2, #3
 800a7a8:	3204      	adds	r2, #4
 800a7aa:	f104 0115 	add.w	r1, r4, #21
 800a7ae:	428f      	cmp	r7, r1
 800a7b0:	bf38      	it	cc
 800a7b2:	2204      	movcc	r2, #4
 800a7b4:	9201      	str	r2, [sp, #4]
 800a7b6:	9a02      	ldr	r2, [sp, #8]
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d80c      	bhi.n	800a7d8 <__multiply+0x9c>
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	dd03      	ble.n	800a7ca <__multiply+0x8e>
 800a7c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d05a      	beq.n	800a880 <__multiply+0x144>
 800a7ca:	6106      	str	r6, [r0, #16]
 800a7cc:	b005      	add	sp, #20
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d2:	f843 2b04 	str.w	r2, [r3], #4
 800a7d6:	e7d8      	b.n	800a78a <__multiply+0x4e>
 800a7d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7dc:	f1ba 0f00 	cmp.w	sl, #0
 800a7e0:	d023      	beq.n	800a82a <__multiply+0xee>
 800a7e2:	46a9      	mov	r9, r5
 800a7e4:	f04f 0c00 	mov.w	ip, #0
 800a7e8:	f104 0e14 	add.w	lr, r4, #20
 800a7ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a7f0:	f8d9 1000 	ldr.w	r1, [r9]
 800a7f4:	fa1f fb82 	uxth.w	fp, r2
 800a7f8:	b289      	uxth	r1, r1
 800a7fa:	fb0a 110b 	mla	r1, sl, fp, r1
 800a7fe:	4461      	add	r1, ip
 800a800:	f8d9 c000 	ldr.w	ip, [r9]
 800a804:	0c12      	lsrs	r2, r2, #16
 800a806:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a80a:	fb0a c202 	mla	r2, sl, r2, ip
 800a80e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a812:	b289      	uxth	r1, r1
 800a814:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a818:	4577      	cmp	r7, lr
 800a81a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a81e:	f849 1b04 	str.w	r1, [r9], #4
 800a822:	d8e3      	bhi.n	800a7ec <__multiply+0xb0>
 800a824:	9a01      	ldr	r2, [sp, #4]
 800a826:	f845 c002 	str.w	ip, [r5, r2]
 800a82a:	9a03      	ldr	r2, [sp, #12]
 800a82c:	3304      	adds	r3, #4
 800a82e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a832:	f1b9 0f00 	cmp.w	r9, #0
 800a836:	d021      	beq.n	800a87c <__multiply+0x140>
 800a838:	46ae      	mov	lr, r5
 800a83a:	f04f 0a00 	mov.w	sl, #0
 800a83e:	6829      	ldr	r1, [r5, #0]
 800a840:	f104 0c14 	add.w	ip, r4, #20
 800a844:	f8bc b000 	ldrh.w	fp, [ip]
 800a848:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a84c:	b289      	uxth	r1, r1
 800a84e:	fb09 220b 	mla	r2, r9, fp, r2
 800a852:	4452      	add	r2, sl
 800a854:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a858:	f84e 1b04 	str.w	r1, [lr], #4
 800a85c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a860:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a864:	f8be 1000 	ldrh.w	r1, [lr]
 800a868:	4567      	cmp	r7, ip
 800a86a:	fb09 110a 	mla	r1, r9, sl, r1
 800a86e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a872:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a876:	d8e5      	bhi.n	800a844 <__multiply+0x108>
 800a878:	9a01      	ldr	r2, [sp, #4]
 800a87a:	50a9      	str	r1, [r5, r2]
 800a87c:	3504      	adds	r5, #4
 800a87e:	e79a      	b.n	800a7b6 <__multiply+0x7a>
 800a880:	3e01      	subs	r6, #1
 800a882:	e79c      	b.n	800a7be <__multiply+0x82>
 800a884:	0800b8ff 	.word	0x0800b8ff
 800a888:	0800b970 	.word	0x0800b970

0800a88c <__pow5mult>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4615      	mov	r5, r2
 800a892:	f012 0203 	ands.w	r2, r2, #3
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	d007      	beq.n	800a8ac <__pow5mult+0x20>
 800a89c:	4c25      	ldr	r4, [pc, #148]	; (800a934 <__pow5mult+0xa8>)
 800a89e:	3a01      	subs	r2, #1
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8a6:	f7ff fe55 	bl	800a554 <__multadd>
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	10ad      	asrs	r5, r5, #2
 800a8ae:	d03d      	beq.n	800a92c <__pow5mult+0xa0>
 800a8b0:	69f4      	ldr	r4, [r6, #28]
 800a8b2:	b97c      	cbnz	r4, 800a8d4 <__pow5mult+0x48>
 800a8b4:	2010      	movs	r0, #16
 800a8b6:	f7fc fb7f 	bl	8006fb8 <malloc>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	61f0      	str	r0, [r6, #28]
 800a8be:	b928      	cbnz	r0, 800a8cc <__pow5mult+0x40>
 800a8c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a8c4:	4b1c      	ldr	r3, [pc, #112]	; (800a938 <__pow5mult+0xac>)
 800a8c6:	481d      	ldr	r0, [pc, #116]	; (800a93c <__pow5mult+0xb0>)
 800a8c8:	f7fe fba0 	bl	800900c <__assert_func>
 800a8cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8d0:	6004      	str	r4, [r0, #0]
 800a8d2:	60c4      	str	r4, [r0, #12]
 800a8d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a8d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8dc:	b94c      	cbnz	r4, 800a8f2 <__pow5mult+0x66>
 800a8de:	f240 2171 	movw	r1, #625	; 0x271
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7ff ff14 	bl	800a710 <__i2b>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8f0:	6003      	str	r3, [r0, #0]
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	07eb      	lsls	r3, r5, #31
 800a8f8:	d50a      	bpl.n	800a910 <__pow5mult+0x84>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4630      	mov	r0, r6
 800a900:	f7ff ff1c 	bl	800a73c <__multiply>
 800a904:	4680      	mov	r8, r0
 800a906:	4639      	mov	r1, r7
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff fe01 	bl	800a510 <_Bfree>
 800a90e:	4647      	mov	r7, r8
 800a910:	106d      	asrs	r5, r5, #1
 800a912:	d00b      	beq.n	800a92c <__pow5mult+0xa0>
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	b938      	cbnz	r0, 800a928 <__pow5mult+0x9c>
 800a918:	4622      	mov	r2, r4
 800a91a:	4621      	mov	r1, r4
 800a91c:	4630      	mov	r0, r6
 800a91e:	f7ff ff0d 	bl	800a73c <__multiply>
 800a922:	6020      	str	r0, [r4, #0]
 800a924:	f8c0 9000 	str.w	r9, [r0]
 800a928:	4604      	mov	r4, r0
 800a92a:	e7e4      	b.n	800a8f6 <__pow5mult+0x6a>
 800a92c:	4638      	mov	r0, r7
 800a92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a932:	bf00      	nop
 800a934:	0800bac0 	.word	0x0800bac0
 800a938:	0800b7e5 	.word	0x0800b7e5
 800a93c:	0800b970 	.word	0x0800b970

0800a940 <__lshift>:
 800a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	460c      	mov	r4, r1
 800a946:	4607      	mov	r7, r0
 800a948:	4691      	mov	r9, r2
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6849      	ldr	r1, [r1, #4]
 800a94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a958:	f108 0601 	add.w	r6, r8, #1
 800a95c:	42b3      	cmp	r3, r6
 800a95e:	db0b      	blt.n	800a978 <__lshift+0x38>
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff fd95 	bl	800a490 <_Balloc>
 800a966:	4605      	mov	r5, r0
 800a968:	b948      	cbnz	r0, 800a97e <__lshift+0x3e>
 800a96a:	4602      	mov	r2, r0
 800a96c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a970:	4b27      	ldr	r3, [pc, #156]	; (800aa10 <__lshift+0xd0>)
 800a972:	4828      	ldr	r0, [pc, #160]	; (800aa14 <__lshift+0xd4>)
 800a974:	f7fe fb4a 	bl	800900c <__assert_func>
 800a978:	3101      	adds	r1, #1
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	e7ee      	b.n	800a95c <__lshift+0x1c>
 800a97e:	2300      	movs	r3, #0
 800a980:	f100 0114 	add.w	r1, r0, #20
 800a984:	f100 0210 	add.w	r2, r0, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	4553      	cmp	r3, sl
 800a98c:	db33      	blt.n	800a9f6 <__lshift+0xb6>
 800a98e:	6920      	ldr	r0, [r4, #16]
 800a990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a994:	f104 0314 	add.w	r3, r4, #20
 800a998:	f019 091f 	ands.w	r9, r9, #31
 800a99c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9a4:	d02b      	beq.n	800a9fe <__lshift+0xbe>
 800a9a6:	468a      	mov	sl, r1
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a9ae:	6818      	ldr	r0, [r3, #0]
 800a9b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9b4:	4310      	orrs	r0, r2
 800a9b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9be:	459c      	cmp	ip, r3
 800a9c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9c4:	d8f3      	bhi.n	800a9ae <__lshift+0x6e>
 800a9c6:	ebac 0304 	sub.w	r3, ip, r4
 800a9ca:	3b15      	subs	r3, #21
 800a9cc:	f023 0303 	bic.w	r3, r3, #3
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	f104 0015 	add.w	r0, r4, #21
 800a9d6:	4584      	cmp	ip, r0
 800a9d8:	bf38      	it	cc
 800a9da:	2304      	movcc	r3, #4
 800a9dc:	50ca      	str	r2, [r1, r3]
 800a9de:	b10a      	cbz	r2, 800a9e4 <__lshift+0xa4>
 800a9e0:	f108 0602 	add.w	r6, r8, #2
 800a9e4:	3e01      	subs	r6, #1
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	612e      	str	r6, [r5, #16]
 800a9ec:	f7ff fd90 	bl	800a510 <_Bfree>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	e7c5      	b.n	800a98a <__lshift+0x4a>
 800a9fe:	3904      	subs	r1, #4
 800aa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa04:	459c      	cmp	ip, r3
 800aa06:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa0a:	d8f9      	bhi.n	800aa00 <__lshift+0xc0>
 800aa0c:	e7ea      	b.n	800a9e4 <__lshift+0xa4>
 800aa0e:	bf00      	nop
 800aa10:	0800b8ff 	.word	0x0800b8ff
 800aa14:	0800b970 	.word	0x0800b970

0800aa18 <__mcmp>:
 800aa18:	4603      	mov	r3, r0
 800aa1a:	690a      	ldr	r2, [r1, #16]
 800aa1c:	6900      	ldr	r0, [r0, #16]
 800aa1e:	b530      	push	{r4, r5, lr}
 800aa20:	1a80      	subs	r0, r0, r2
 800aa22:	d10d      	bne.n	800aa40 <__mcmp+0x28>
 800aa24:	3314      	adds	r3, #20
 800aa26:	3114      	adds	r1, #20
 800aa28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa38:	4295      	cmp	r5, r2
 800aa3a:	d002      	beq.n	800aa42 <__mcmp+0x2a>
 800aa3c:	d304      	bcc.n	800aa48 <__mcmp+0x30>
 800aa3e:	2001      	movs	r0, #1
 800aa40:	bd30      	pop	{r4, r5, pc}
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	d3f4      	bcc.n	800aa30 <__mcmp+0x18>
 800aa46:	e7fb      	b.n	800aa40 <__mcmp+0x28>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4c:	e7f8      	b.n	800aa40 <__mcmp+0x28>
	...

0800aa50 <__mdiff>:
 800aa50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	460d      	mov	r5, r1
 800aa56:	4607      	mov	r7, r0
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	f7ff ffdb 	bl	800aa18 <__mcmp>
 800aa62:	1e06      	subs	r6, r0, #0
 800aa64:	d111      	bne.n	800aa8a <__mdiff+0x3a>
 800aa66:	4631      	mov	r1, r6
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff fd11 	bl	800a490 <_Balloc>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	b928      	cbnz	r0, 800aa7e <__mdiff+0x2e>
 800aa72:	f240 2137 	movw	r1, #567	; 0x237
 800aa76:	4b3a      	ldr	r3, [pc, #232]	; (800ab60 <__mdiff+0x110>)
 800aa78:	483a      	ldr	r0, [pc, #232]	; (800ab64 <__mdiff+0x114>)
 800aa7a:	f7fe fac7 	bl	800900c <__assert_func>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aa84:	4610      	mov	r0, r2
 800aa86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8a:	bfa4      	itt	ge
 800aa8c:	4623      	movge	r3, r4
 800aa8e:	462c      	movge	r4, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	6861      	ldr	r1, [r4, #4]
 800aa94:	bfa6      	itte	ge
 800aa96:	461d      	movge	r5, r3
 800aa98:	2600      	movge	r6, #0
 800aa9a:	2601      	movlt	r6, #1
 800aa9c:	f7ff fcf8 	bl	800a490 <_Balloc>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	b918      	cbnz	r0, 800aaac <__mdiff+0x5c>
 800aaa4:	f240 2145 	movw	r1, #581	; 0x245
 800aaa8:	4b2d      	ldr	r3, [pc, #180]	; (800ab60 <__mdiff+0x110>)
 800aaaa:	e7e5      	b.n	800aa78 <__mdiff+0x28>
 800aaac:	f102 0814 	add.w	r8, r2, #20
 800aab0:	46c2      	mov	sl, r8
 800aab2:	f04f 0c00 	mov.w	ip, #0
 800aab6:	6927      	ldr	r7, [r4, #16]
 800aab8:	60c6      	str	r6, [r0, #12]
 800aaba:	692e      	ldr	r6, [r5, #16]
 800aabc:	f104 0014 	add.w	r0, r4, #20
 800aac0:	f105 0914 	add.w	r9, r5, #20
 800aac4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800aac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aacc:	3410      	adds	r4, #16
 800aace:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800aad2:	f859 3b04 	ldr.w	r3, [r9], #4
 800aad6:	fa1f f18b 	uxth.w	r1, fp
 800aada:	4461      	add	r1, ip
 800aadc:	fa1f fc83 	uxth.w	ip, r3
 800aae0:	0c1b      	lsrs	r3, r3, #16
 800aae2:	eba1 010c 	sub.w	r1, r1, ip
 800aae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aaea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aaee:	b289      	uxth	r1, r1
 800aaf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800aaf4:	454e      	cmp	r6, r9
 800aaf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aafa:	f84a 1b04 	str.w	r1, [sl], #4
 800aafe:	d8e6      	bhi.n	800aace <__mdiff+0x7e>
 800ab00:	1b73      	subs	r3, r6, r5
 800ab02:	3b15      	subs	r3, #21
 800ab04:	f023 0303 	bic.w	r3, r3, #3
 800ab08:	3515      	adds	r5, #21
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	42ae      	cmp	r6, r5
 800ab0e:	bf38      	it	cc
 800ab10:	2304      	movcc	r3, #4
 800ab12:	4418      	add	r0, r3
 800ab14:	4443      	add	r3, r8
 800ab16:	461e      	mov	r6, r3
 800ab18:	4605      	mov	r5, r0
 800ab1a:	4575      	cmp	r5, lr
 800ab1c:	d30e      	bcc.n	800ab3c <__mdiff+0xec>
 800ab1e:	f10e 0103 	add.w	r1, lr, #3
 800ab22:	1a09      	subs	r1, r1, r0
 800ab24:	f021 0103 	bic.w	r1, r1, #3
 800ab28:	3803      	subs	r0, #3
 800ab2a:	4586      	cmp	lr, r0
 800ab2c:	bf38      	it	cc
 800ab2e:	2100      	movcc	r1, #0
 800ab30:	440b      	add	r3, r1
 800ab32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab36:	b189      	cbz	r1, 800ab5c <__mdiff+0x10c>
 800ab38:	6117      	str	r7, [r2, #16]
 800ab3a:	e7a3      	b.n	800aa84 <__mdiff+0x34>
 800ab3c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ab40:	fa1f f188 	uxth.w	r1, r8
 800ab44:	4461      	add	r1, ip
 800ab46:	140c      	asrs	r4, r1, #16
 800ab48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab4c:	b289      	uxth	r1, r1
 800ab4e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab52:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ab56:	f846 1b04 	str.w	r1, [r6], #4
 800ab5a:	e7de      	b.n	800ab1a <__mdiff+0xca>
 800ab5c:	3f01      	subs	r7, #1
 800ab5e:	e7e8      	b.n	800ab32 <__mdiff+0xe2>
 800ab60:	0800b8ff 	.word	0x0800b8ff
 800ab64:	0800b970 	.word	0x0800b970

0800ab68 <__ulp>:
 800ab68:	4b0e      	ldr	r3, [pc, #56]	; (800aba4 <__ulp+0x3c>)
 800ab6a:	400b      	ands	r3, r1
 800ab6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dc08      	bgt.n	800ab86 <__ulp+0x1e>
 800ab74:	425b      	negs	r3, r3
 800ab76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ab7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab7e:	da04      	bge.n	800ab8a <__ulp+0x22>
 800ab80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab84:	4113      	asrs	r3, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	e008      	b.n	800ab9c <__ulp+0x34>
 800ab8a:	f1a2 0314 	sub.w	r3, r2, #20
 800ab8e:	2b1e      	cmp	r3, #30
 800ab90:	bfd6      	itet	le
 800ab92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ab96:	2201      	movgt	r2, #1
 800ab98:	40da      	lsrle	r2, r3
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	7ff00000 	.word	0x7ff00000

0800aba8 <__b2d>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	6905      	ldr	r5, [r0, #16]
 800abac:	f100 0714 	add.w	r7, r0, #20
 800abb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800abb4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800abb8:	1f2e      	subs	r6, r5, #4
 800abba:	4620      	mov	r0, r4
 800abbc:	f7ff fd5a 	bl	800a674 <__hi0bits>
 800abc0:	f1c0 0220 	rsb	r2, r0, #32
 800abc4:	280a      	cmp	r0, #10
 800abc6:	4603      	mov	r3, r0
 800abc8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800ac34 <__b2d+0x8c>
 800abcc:	600a      	str	r2, [r1, #0]
 800abce:	dc12      	bgt.n	800abf6 <__b2d+0x4e>
 800abd0:	f1c0 0e0b 	rsb	lr, r0, #11
 800abd4:	fa24 f20e 	lsr.w	r2, r4, lr
 800abd8:	42b7      	cmp	r7, r6
 800abda:	ea42 010c 	orr.w	r1, r2, ip
 800abde:	bf2c      	ite	cs
 800abe0:	2200      	movcs	r2, #0
 800abe2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800abe6:	3315      	adds	r3, #21
 800abe8:	fa04 f303 	lsl.w	r3, r4, r3
 800abec:	fa22 f20e 	lsr.w	r2, r2, lr
 800abf0:	431a      	orrs	r2, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf6:	42b7      	cmp	r7, r6
 800abf8:	bf2e      	itee	cs
 800abfa:	2200      	movcs	r2, #0
 800abfc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800ac00:	f1a5 0608 	subcc.w	r6, r5, #8
 800ac04:	3b0b      	subs	r3, #11
 800ac06:	d012      	beq.n	800ac2e <__b2d+0x86>
 800ac08:	f1c3 0520 	rsb	r5, r3, #32
 800ac0c:	fa22 f105 	lsr.w	r1, r2, r5
 800ac10:	409c      	lsls	r4, r3
 800ac12:	430c      	orrs	r4, r1
 800ac14:	42be      	cmp	r6, r7
 800ac16:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800ac1a:	bf94      	ite	ls
 800ac1c:	2400      	movls	r4, #0
 800ac1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ac22:	409a      	lsls	r2, r3
 800ac24:	40ec      	lsrs	r4, r5
 800ac26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ac2a:	4322      	orrs	r2, r4
 800ac2c:	e7e1      	b.n	800abf2 <__b2d+0x4a>
 800ac2e:	ea44 010c 	orr.w	r1, r4, ip
 800ac32:	e7de      	b.n	800abf2 <__b2d+0x4a>
 800ac34:	3ff00000 	.word	0x3ff00000

0800ac38 <__d2b>:
 800ac38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	4617      	mov	r7, r2
 800ac3e:	461c      	mov	r4, r3
 800ac40:	9e08      	ldr	r6, [sp, #32]
 800ac42:	f7ff fc25 	bl	800a490 <_Balloc>
 800ac46:	4605      	mov	r5, r0
 800ac48:	b930      	cbnz	r0, 800ac58 <__d2b+0x20>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	f240 310f 	movw	r1, #783	; 0x30f
 800ac50:	4b22      	ldr	r3, [pc, #136]	; (800acdc <__d2b+0xa4>)
 800ac52:	4823      	ldr	r0, [pc, #140]	; (800ace0 <__d2b+0xa8>)
 800ac54:	f7fe f9da 	bl	800900c <__assert_func>
 800ac58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ac5c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ac60:	bb24      	cbnz	r4, 800acac <__d2b+0x74>
 800ac62:	2f00      	cmp	r7, #0
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	d026      	beq.n	800acb6 <__d2b+0x7e>
 800ac68:	4668      	mov	r0, sp
 800ac6a:	9700      	str	r7, [sp, #0]
 800ac6c:	f7ff fd22 	bl	800a6b4 <__lo0bits>
 800ac70:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac74:	b1e8      	cbz	r0, 800acb2 <__d2b+0x7a>
 800ac76:	f1c0 0320 	rsb	r3, r0, #32
 800ac7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	40c2      	lsrs	r2, r0
 800ac82:	616b      	str	r3, [r5, #20]
 800ac84:	9201      	str	r2, [sp, #4]
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bf14      	ite	ne
 800ac8c:	2102      	movne	r1, #2
 800ac8e:	2101      	moveq	r1, #1
 800ac90:	61ab      	str	r3, [r5, #24]
 800ac92:	6129      	str	r1, [r5, #16]
 800ac94:	b1bc      	cbz	r4, 800acc6 <__d2b+0x8e>
 800ac96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac9a:	4404      	add	r4, r0
 800ac9c:	6034      	str	r4, [r6, #0]
 800ac9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca4:	6018      	str	r0, [r3, #0]
 800aca6:	4628      	mov	r0, r5
 800aca8:	b003      	add	sp, #12
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acb0:	e7d7      	b.n	800ac62 <__d2b+0x2a>
 800acb2:	6169      	str	r1, [r5, #20]
 800acb4:	e7e7      	b.n	800ac86 <__d2b+0x4e>
 800acb6:	a801      	add	r0, sp, #4
 800acb8:	f7ff fcfc 	bl	800a6b4 <__lo0bits>
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	2101      	movs	r1, #1
 800acc0:	616b      	str	r3, [r5, #20]
 800acc2:	3020      	adds	r0, #32
 800acc4:	e7e5      	b.n	800ac92 <__d2b+0x5a>
 800acc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800acce:	6030      	str	r0, [r6, #0]
 800acd0:	6918      	ldr	r0, [r3, #16]
 800acd2:	f7ff fccf 	bl	800a674 <__hi0bits>
 800acd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800acda:	e7e2      	b.n	800aca2 <__d2b+0x6a>
 800acdc:	0800b8ff 	.word	0x0800b8ff
 800ace0:	0800b970 	.word	0x0800b970

0800ace4 <__ratio>:
 800ace4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	4688      	mov	r8, r1
 800acea:	4669      	mov	r1, sp
 800acec:	4681      	mov	r9, r0
 800acee:	f7ff ff5b 	bl	800aba8 <__b2d>
 800acf2:	460f      	mov	r7, r1
 800acf4:	4604      	mov	r4, r0
 800acf6:	460d      	mov	r5, r1
 800acf8:	4640      	mov	r0, r8
 800acfa:	a901      	add	r1, sp, #4
 800acfc:	f7ff ff54 	bl	800aba8 <__b2d>
 800ad00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad08:	468b      	mov	fp, r1
 800ad0a:	eba3 0c02 	sub.w	ip, r3, r2
 800ad0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfd5      	itete	le
 800ad1c:	460a      	movle	r2, r1
 800ad1e:	462a      	movgt	r2, r5
 800ad20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad24:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad28:	bfd8      	it	le
 800ad2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad2e:	465b      	mov	r3, fp
 800ad30:	4602      	mov	r2, r0
 800ad32:	4639      	mov	r1, r7
 800ad34:	4620      	mov	r0, r4
 800ad36:	f7f5 fd03 	bl	8000740 <__aeabi_ddiv>
 800ad3a:	b003      	add	sp, #12
 800ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad40 <__copybits>:
 800ad40:	3901      	subs	r1, #1
 800ad42:	b570      	push	{r4, r5, r6, lr}
 800ad44:	1149      	asrs	r1, r1, #5
 800ad46:	6914      	ldr	r4, [r2, #16]
 800ad48:	3101      	adds	r1, #1
 800ad4a:	f102 0314 	add.w	r3, r2, #20
 800ad4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad56:	1f05      	subs	r5, r0, #4
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	d30c      	bcc.n	800ad76 <__copybits+0x36>
 800ad5c:	1aa3      	subs	r3, r4, r2
 800ad5e:	3b11      	subs	r3, #17
 800ad60:	f023 0303 	bic.w	r3, r3, #3
 800ad64:	3211      	adds	r2, #17
 800ad66:	42a2      	cmp	r2, r4
 800ad68:	bf88      	it	hi
 800ad6a:	2300      	movhi	r3, #0
 800ad6c:	4418      	add	r0, r3
 800ad6e:	2300      	movs	r3, #0
 800ad70:	4288      	cmp	r0, r1
 800ad72:	d305      	bcc.n	800ad80 <__copybits+0x40>
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
 800ad76:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad7a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad7e:	e7eb      	b.n	800ad58 <__copybits+0x18>
 800ad80:	f840 3b04 	str.w	r3, [r0], #4
 800ad84:	e7f4      	b.n	800ad70 <__copybits+0x30>

0800ad86 <__any_on>:
 800ad86:	f100 0214 	add.w	r2, r0, #20
 800ad8a:	6900      	ldr	r0, [r0, #16]
 800ad8c:	114b      	asrs	r3, r1, #5
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	b510      	push	{r4, lr}
 800ad92:	db11      	blt.n	800adb8 <__any_on+0x32>
 800ad94:	dd0a      	ble.n	800adac <__any_on+0x26>
 800ad96:	f011 011f 	ands.w	r1, r1, #31
 800ad9a:	d007      	beq.n	800adac <__any_on+0x26>
 800ad9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ada0:	fa24 f001 	lsr.w	r0, r4, r1
 800ada4:	fa00 f101 	lsl.w	r1, r0, r1
 800ada8:	428c      	cmp	r4, r1
 800adaa:	d10b      	bne.n	800adc4 <__any_on+0x3e>
 800adac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d803      	bhi.n	800adbc <__any_on+0x36>
 800adb4:	2000      	movs	r0, #0
 800adb6:	bd10      	pop	{r4, pc}
 800adb8:	4603      	mov	r3, r0
 800adba:	e7f7      	b.n	800adac <__any_on+0x26>
 800adbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adc0:	2900      	cmp	r1, #0
 800adc2:	d0f5      	beq.n	800adb0 <__any_on+0x2a>
 800adc4:	2001      	movs	r0, #1
 800adc6:	e7f6      	b.n	800adb6 <__any_on+0x30>

0800adc8 <__ascii_wctomb>:
 800adc8:	4603      	mov	r3, r0
 800adca:	4608      	mov	r0, r1
 800adcc:	b141      	cbz	r1, 800ade0 <__ascii_wctomb+0x18>
 800adce:	2aff      	cmp	r2, #255	; 0xff
 800add0:	d904      	bls.n	800addc <__ascii_wctomb+0x14>
 800add2:	228a      	movs	r2, #138	; 0x8a
 800add4:	f04f 30ff 	mov.w	r0, #4294967295
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	4770      	bx	lr
 800addc:	2001      	movs	r0, #1
 800adde:	700a      	strb	r2, [r1, #0]
 800ade0:	4770      	bx	lr

0800ade2 <__sfputc_r>:
 800ade2:	6893      	ldr	r3, [r2, #8]
 800ade4:	b410      	push	{r4}
 800ade6:	3b01      	subs	r3, #1
 800ade8:	2b00      	cmp	r3, #0
 800adea:	6093      	str	r3, [r2, #8]
 800adec:	da07      	bge.n	800adfe <__sfputc_r+0x1c>
 800adee:	6994      	ldr	r4, [r2, #24]
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	db01      	blt.n	800adf8 <__sfputc_r+0x16>
 800adf4:	290a      	cmp	r1, #10
 800adf6:	d102      	bne.n	800adfe <__sfputc_r+0x1c>
 800adf8:	bc10      	pop	{r4}
 800adfa:	f7fd bf1c 	b.w	8008c36 <__swbuf_r>
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	1c58      	adds	r0, r3, #1
 800ae02:	6010      	str	r0, [r2, #0]
 800ae04:	7019      	strb	r1, [r3, #0]
 800ae06:	4608      	mov	r0, r1
 800ae08:	bc10      	pop	{r4}
 800ae0a:	4770      	bx	lr

0800ae0c <__sfputs_r>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	4606      	mov	r6, r0
 800ae10:	460f      	mov	r7, r1
 800ae12:	4614      	mov	r4, r2
 800ae14:	18d5      	adds	r5, r2, r3
 800ae16:	42ac      	cmp	r4, r5
 800ae18:	d101      	bne.n	800ae1e <__sfputs_r+0x12>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	e007      	b.n	800ae2e <__sfputs_r+0x22>
 800ae1e:	463a      	mov	r2, r7
 800ae20:	4630      	mov	r0, r6
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	f7ff ffdc 	bl	800ade2 <__sfputc_r>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	d1f3      	bne.n	800ae16 <__sfputs_r+0xa>
 800ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae30 <_vfiprintf_r>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	460d      	mov	r5, r1
 800ae36:	4614      	mov	r4, r2
 800ae38:	4698      	mov	r8, r3
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	b09d      	sub	sp, #116	; 0x74
 800ae3e:	b118      	cbz	r0, 800ae48 <_vfiprintf_r+0x18>
 800ae40:	6a03      	ldr	r3, [r0, #32]
 800ae42:	b90b      	cbnz	r3, 800ae48 <_vfiprintf_r+0x18>
 800ae44:	f7fd fd62 	bl	800890c <__sinit>
 800ae48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae4a:	07d9      	lsls	r1, r3, #31
 800ae4c:	d405      	bmi.n	800ae5a <_vfiprintf_r+0x2a>
 800ae4e:	89ab      	ldrh	r3, [r5, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_vfiprintf_r+0x2a>
 800ae54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae56:	f7fe f8a8 	bl	8008faa <__retarget_lock_acquire_recursive>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	071b      	lsls	r3, r3, #28
 800ae5e:	d501      	bpl.n	800ae64 <_vfiprintf_r+0x34>
 800ae60:	692b      	ldr	r3, [r5, #16]
 800ae62:	b99b      	cbnz	r3, 800ae8c <_vfiprintf_r+0x5c>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7fd ff22 	bl	8008cb0 <__swsetup_r>
 800ae6c:	b170      	cbz	r0, 800ae8c <_vfiprintf_r+0x5c>
 800ae6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae70:	07dc      	lsls	r4, r3, #31
 800ae72:	d504      	bpl.n	800ae7e <_vfiprintf_r+0x4e>
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	b01d      	add	sp, #116	; 0x74
 800ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	0598      	lsls	r0, r3, #22
 800ae82:	d4f7      	bmi.n	800ae74 <_vfiprintf_r+0x44>
 800ae84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae86:	f7fe f891 	bl	8008fac <__retarget_lock_release_recursive>
 800ae8a:	e7f3      	b.n	800ae74 <_vfiprintf_r+0x44>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae90:	2320      	movs	r3, #32
 800ae92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae96:	2330      	movs	r3, #48	; 0x30
 800ae98:	f04f 0901 	mov.w	r9, #1
 800ae9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b050 <_vfiprintf_r+0x220>
 800aea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea8:	4623      	mov	r3, r4
 800aeaa:	469a      	mov	sl, r3
 800aeac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb0:	b10a      	cbz	r2, 800aeb6 <_vfiprintf_r+0x86>
 800aeb2:	2a25      	cmp	r2, #37	; 0x25
 800aeb4:	d1f9      	bne.n	800aeaa <_vfiprintf_r+0x7a>
 800aeb6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeba:	d00b      	beq.n	800aed4 <_vfiprintf_r+0xa4>
 800aebc:	465b      	mov	r3, fp
 800aebe:	4622      	mov	r2, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7ff ffa2 	bl	800ae0c <__sfputs_r>
 800aec8:	3001      	adds	r0, #1
 800aeca:	f000 80a9 	beq.w	800b020 <_vfiprintf_r+0x1f0>
 800aece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed0:	445a      	add	r2, fp
 800aed2:	9209      	str	r2, [sp, #36]	; 0x24
 800aed4:	f89a 3000 	ldrb.w	r3, [sl]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 80a1 	beq.w	800b020 <_vfiprintf_r+0x1f0>
 800aede:	2300      	movs	r3, #0
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee8:	f10a 0a01 	add.w	sl, sl, #1
 800aeec:	9304      	str	r3, [sp, #16]
 800aeee:	9307      	str	r3, [sp, #28]
 800aef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef4:	931a      	str	r3, [sp, #104]	; 0x68
 800aef6:	4654      	mov	r4, sl
 800aef8:	2205      	movs	r2, #5
 800aefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefe:	4854      	ldr	r0, [pc, #336]	; (800b050 <_vfiprintf_r+0x220>)
 800af00:	f7fe f85d 	bl	8008fbe <memchr>
 800af04:	9a04      	ldr	r2, [sp, #16]
 800af06:	b9d8      	cbnz	r0, 800af40 <_vfiprintf_r+0x110>
 800af08:	06d1      	lsls	r1, r2, #27
 800af0a:	bf44      	itt	mi
 800af0c:	2320      	movmi	r3, #32
 800af0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af12:	0713      	lsls	r3, r2, #28
 800af14:	bf44      	itt	mi
 800af16:	232b      	movmi	r3, #43	; 0x2b
 800af18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af1c:	f89a 3000 	ldrb.w	r3, [sl]
 800af20:	2b2a      	cmp	r3, #42	; 0x2a
 800af22:	d015      	beq.n	800af50 <_vfiprintf_r+0x120>
 800af24:	4654      	mov	r4, sl
 800af26:	2000      	movs	r0, #0
 800af28:	f04f 0c0a 	mov.w	ip, #10
 800af2c:	9a07      	ldr	r2, [sp, #28]
 800af2e:	4621      	mov	r1, r4
 800af30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af34:	3b30      	subs	r3, #48	; 0x30
 800af36:	2b09      	cmp	r3, #9
 800af38:	d94d      	bls.n	800afd6 <_vfiprintf_r+0x1a6>
 800af3a:	b1b0      	cbz	r0, 800af6a <_vfiprintf_r+0x13a>
 800af3c:	9207      	str	r2, [sp, #28]
 800af3e:	e014      	b.n	800af6a <_vfiprintf_r+0x13a>
 800af40:	eba0 0308 	sub.w	r3, r0, r8
 800af44:	fa09 f303 	lsl.w	r3, r9, r3
 800af48:	4313      	orrs	r3, r2
 800af4a:	46a2      	mov	sl, r4
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	e7d2      	b.n	800aef6 <_vfiprintf_r+0xc6>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	1d19      	adds	r1, r3, #4
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	9103      	str	r1, [sp, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfbb      	ittet	lt
 800af5c:	425b      	neglt	r3, r3
 800af5e:	f042 0202 	orrlt.w	r2, r2, #2
 800af62:	9307      	strge	r3, [sp, #28]
 800af64:	9307      	strlt	r3, [sp, #28]
 800af66:	bfb8      	it	lt
 800af68:	9204      	strlt	r2, [sp, #16]
 800af6a:	7823      	ldrb	r3, [r4, #0]
 800af6c:	2b2e      	cmp	r3, #46	; 0x2e
 800af6e:	d10c      	bne.n	800af8a <_vfiprintf_r+0x15a>
 800af70:	7863      	ldrb	r3, [r4, #1]
 800af72:	2b2a      	cmp	r3, #42	; 0x2a
 800af74:	d134      	bne.n	800afe0 <_vfiprintf_r+0x1b0>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	3402      	adds	r4, #2
 800af7a:	1d1a      	adds	r2, r3, #4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	9203      	str	r2, [sp, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfb8      	it	lt
 800af84:	f04f 33ff 	movlt.w	r3, #4294967295
 800af88:	9305      	str	r3, [sp, #20]
 800af8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b054 <_vfiprintf_r+0x224>
 800af8e:	2203      	movs	r2, #3
 800af90:	4650      	mov	r0, sl
 800af92:	7821      	ldrb	r1, [r4, #0]
 800af94:	f7fe f813 	bl	8008fbe <memchr>
 800af98:	b138      	cbz	r0, 800afaa <_vfiprintf_r+0x17a>
 800af9a:	2240      	movs	r2, #64	; 0x40
 800af9c:	9b04      	ldr	r3, [sp, #16]
 800af9e:	eba0 000a 	sub.w	r0, r0, sl
 800afa2:	4082      	lsls	r2, r0
 800afa4:	4313      	orrs	r3, r2
 800afa6:	3401      	adds	r4, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afae:	2206      	movs	r2, #6
 800afb0:	4829      	ldr	r0, [pc, #164]	; (800b058 <_vfiprintf_r+0x228>)
 800afb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afb6:	f7fe f802 	bl	8008fbe <memchr>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d03f      	beq.n	800b03e <_vfiprintf_r+0x20e>
 800afbe:	4b27      	ldr	r3, [pc, #156]	; (800b05c <_vfiprintf_r+0x22c>)
 800afc0:	bb1b      	cbnz	r3, 800b00a <_vfiprintf_r+0x1da>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	3307      	adds	r3, #7
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	3308      	adds	r3, #8
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd0:	443b      	add	r3, r7
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	e768      	b.n	800aea8 <_vfiprintf_r+0x78>
 800afd6:	460c      	mov	r4, r1
 800afd8:	2001      	movs	r0, #1
 800afda:	fb0c 3202 	mla	r2, ip, r2, r3
 800afde:	e7a6      	b.n	800af2e <_vfiprintf_r+0xfe>
 800afe0:	2300      	movs	r3, #0
 800afe2:	f04f 0c0a 	mov.w	ip, #10
 800afe6:	4619      	mov	r1, r3
 800afe8:	3401      	adds	r4, #1
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	4620      	mov	r0, r4
 800afee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff2:	3a30      	subs	r2, #48	; 0x30
 800aff4:	2a09      	cmp	r2, #9
 800aff6:	d903      	bls.n	800b000 <_vfiprintf_r+0x1d0>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0c6      	beq.n	800af8a <_vfiprintf_r+0x15a>
 800affc:	9105      	str	r1, [sp, #20]
 800affe:	e7c4      	b.n	800af8a <_vfiprintf_r+0x15a>
 800b000:	4604      	mov	r4, r0
 800b002:	2301      	movs	r3, #1
 800b004:	fb0c 2101 	mla	r1, ip, r1, r2
 800b008:	e7f0      	b.n	800afec <_vfiprintf_r+0x1bc>
 800b00a:	ab03      	add	r3, sp, #12
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	462a      	mov	r2, r5
 800b010:	4630      	mov	r0, r6
 800b012:	4b13      	ldr	r3, [pc, #76]	; (800b060 <_vfiprintf_r+0x230>)
 800b014:	a904      	add	r1, sp, #16
 800b016:	f7fd f82b 	bl	8008070 <_printf_float>
 800b01a:	4607      	mov	r7, r0
 800b01c:	1c78      	adds	r0, r7, #1
 800b01e:	d1d6      	bne.n	800afce <_vfiprintf_r+0x19e>
 800b020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b022:	07d9      	lsls	r1, r3, #31
 800b024:	d405      	bmi.n	800b032 <_vfiprintf_r+0x202>
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	059a      	lsls	r2, r3, #22
 800b02a:	d402      	bmi.n	800b032 <_vfiprintf_r+0x202>
 800b02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b02e:	f7fd ffbd 	bl	8008fac <__retarget_lock_release_recursive>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	065b      	lsls	r3, r3, #25
 800b036:	f53f af1d 	bmi.w	800ae74 <_vfiprintf_r+0x44>
 800b03a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b03c:	e71c      	b.n	800ae78 <_vfiprintf_r+0x48>
 800b03e:	ab03      	add	r3, sp, #12
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	462a      	mov	r2, r5
 800b044:	4630      	mov	r0, r6
 800b046:	4b06      	ldr	r3, [pc, #24]	; (800b060 <_vfiprintf_r+0x230>)
 800b048:	a904      	add	r1, sp, #16
 800b04a:	f7fd fab1 	bl	80085b0 <_printf_i>
 800b04e:	e7e4      	b.n	800b01a <_vfiprintf_r+0x1ea>
 800b050:	0800bacc 	.word	0x0800bacc
 800b054:	0800bad2 	.word	0x0800bad2
 800b058:	0800bad6 	.word	0x0800bad6
 800b05c:	08008071 	.word	0x08008071
 800b060:	0800ae0d 	.word	0x0800ae0d

0800b064 <__sflush_r>:
 800b064:	898a      	ldrh	r2, [r1, #12]
 800b066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b068:	4605      	mov	r5, r0
 800b06a:	0710      	lsls	r0, r2, #28
 800b06c:	460c      	mov	r4, r1
 800b06e:	d457      	bmi.n	800b120 <__sflush_r+0xbc>
 800b070:	684b      	ldr	r3, [r1, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	dc04      	bgt.n	800b080 <__sflush_r+0x1c>
 800b076:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dc01      	bgt.n	800b080 <__sflush_r+0x1c>
 800b07c:	2000      	movs	r0, #0
 800b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b082:	2e00      	cmp	r6, #0
 800b084:	d0fa      	beq.n	800b07c <__sflush_r+0x18>
 800b086:	2300      	movs	r3, #0
 800b088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b08c:	682f      	ldr	r7, [r5, #0]
 800b08e:	6a21      	ldr	r1, [r4, #32]
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	d032      	beq.n	800b0fa <__sflush_r+0x96>
 800b094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	075a      	lsls	r2, r3, #29
 800b09a:	d505      	bpl.n	800b0a8 <__sflush_r+0x44>
 800b09c:	6863      	ldr	r3, [r4, #4]
 800b09e:	1ac0      	subs	r0, r0, r3
 800b0a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0a2:	b10b      	cbz	r3, 800b0a8 <__sflush_r+0x44>
 800b0a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0a6:	1ac0      	subs	r0, r0, r3
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	6a21      	ldr	r1, [r4, #32]
 800b0b2:	47b0      	blx	r6
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	d106      	bne.n	800b0c8 <__sflush_r+0x64>
 800b0ba:	6829      	ldr	r1, [r5, #0]
 800b0bc:	291d      	cmp	r1, #29
 800b0be:	d82b      	bhi.n	800b118 <__sflush_r+0xb4>
 800b0c0:	4a28      	ldr	r2, [pc, #160]	; (800b164 <__sflush_r+0x100>)
 800b0c2:	410a      	asrs	r2, r1
 800b0c4:	07d6      	lsls	r6, r2, #31
 800b0c6:	d427      	bmi.n	800b118 <__sflush_r+0xb4>
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	6062      	str	r2, [r4, #4]
 800b0cc:	6922      	ldr	r2, [r4, #16]
 800b0ce:	04d9      	lsls	r1, r3, #19
 800b0d0:	6022      	str	r2, [r4, #0]
 800b0d2:	d504      	bpl.n	800b0de <__sflush_r+0x7a>
 800b0d4:	1c42      	adds	r2, r0, #1
 800b0d6:	d101      	bne.n	800b0dc <__sflush_r+0x78>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b903      	cbnz	r3, 800b0de <__sflush_r+0x7a>
 800b0dc:	6560      	str	r0, [r4, #84]	; 0x54
 800b0de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0e0:	602f      	str	r7, [r5, #0]
 800b0e2:	2900      	cmp	r1, #0
 800b0e4:	d0ca      	beq.n	800b07c <__sflush_r+0x18>
 800b0e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	d002      	beq.n	800b0f4 <__sflush_r+0x90>
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f7fe fe1a 	bl	8009d28 <_free_r>
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	6360      	str	r0, [r4, #52]	; 0x34
 800b0f8:	e7c1      	b.n	800b07e <__sflush_r+0x1a>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	47b0      	blx	r6
 800b100:	1c41      	adds	r1, r0, #1
 800b102:	d1c8      	bne.n	800b096 <__sflush_r+0x32>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0c5      	beq.n	800b096 <__sflush_r+0x32>
 800b10a:	2b1d      	cmp	r3, #29
 800b10c:	d001      	beq.n	800b112 <__sflush_r+0xae>
 800b10e:	2b16      	cmp	r3, #22
 800b110:	d101      	bne.n	800b116 <__sflush_r+0xb2>
 800b112:	602f      	str	r7, [r5, #0]
 800b114:	e7b2      	b.n	800b07c <__sflush_r+0x18>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	e7ae      	b.n	800b07e <__sflush_r+0x1a>
 800b120:	690f      	ldr	r7, [r1, #16]
 800b122:	2f00      	cmp	r7, #0
 800b124:	d0aa      	beq.n	800b07c <__sflush_r+0x18>
 800b126:	0793      	lsls	r3, r2, #30
 800b128:	bf18      	it	ne
 800b12a:	2300      	movne	r3, #0
 800b12c:	680e      	ldr	r6, [r1, #0]
 800b12e:	bf08      	it	eq
 800b130:	694b      	ldreq	r3, [r1, #20]
 800b132:	1bf6      	subs	r6, r6, r7
 800b134:	600f      	str	r7, [r1, #0]
 800b136:	608b      	str	r3, [r1, #8]
 800b138:	2e00      	cmp	r6, #0
 800b13a:	dd9f      	ble.n	800b07c <__sflush_r+0x18>
 800b13c:	4633      	mov	r3, r6
 800b13e:	463a      	mov	r2, r7
 800b140:	4628      	mov	r0, r5
 800b142:	6a21      	ldr	r1, [r4, #32]
 800b144:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b148:	47e0      	blx	ip
 800b14a:	2800      	cmp	r0, #0
 800b14c:	dc06      	bgt.n	800b15c <__sflush_r+0xf8>
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f04f 30ff 	mov.w	r0, #4294967295
 800b154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	e790      	b.n	800b07e <__sflush_r+0x1a>
 800b15c:	4407      	add	r7, r0
 800b15e:	1a36      	subs	r6, r6, r0
 800b160:	e7ea      	b.n	800b138 <__sflush_r+0xd4>
 800b162:	bf00      	nop
 800b164:	dfbffffe 	.word	0xdfbffffe

0800b168 <_fflush_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	690b      	ldr	r3, [r1, #16]
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	b913      	cbnz	r3, 800b178 <_fflush_r+0x10>
 800b172:	2500      	movs	r5, #0
 800b174:	4628      	mov	r0, r5
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	b118      	cbz	r0, 800b182 <_fflush_r+0x1a>
 800b17a:	6a03      	ldr	r3, [r0, #32]
 800b17c:	b90b      	cbnz	r3, 800b182 <_fflush_r+0x1a>
 800b17e:	f7fd fbc5 	bl	800890c <__sinit>
 800b182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0f3      	beq.n	800b172 <_fflush_r+0xa>
 800b18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b18c:	07d0      	lsls	r0, r2, #31
 800b18e:	d404      	bmi.n	800b19a <_fflush_r+0x32>
 800b190:	0599      	lsls	r1, r3, #22
 800b192:	d402      	bmi.n	800b19a <_fflush_r+0x32>
 800b194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b196:	f7fd ff08 	bl	8008faa <__retarget_lock_acquire_recursive>
 800b19a:	4628      	mov	r0, r5
 800b19c:	4621      	mov	r1, r4
 800b19e:	f7ff ff61 	bl	800b064 <__sflush_r>
 800b1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	07da      	lsls	r2, r3, #31
 800b1a8:	d4e4      	bmi.n	800b174 <_fflush_r+0xc>
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	059b      	lsls	r3, r3, #22
 800b1ae:	d4e1      	bmi.n	800b174 <_fflush_r+0xc>
 800b1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1b2:	f7fd fefb 	bl	8008fac <__retarget_lock_release_recursive>
 800b1b6:	e7dd      	b.n	800b174 <_fflush_r+0xc>

0800b1b8 <fiprintf>:
 800b1b8:	b40e      	push	{r1, r2, r3}
 800b1ba:	b503      	push	{r0, r1, lr}
 800b1bc:	4601      	mov	r1, r0
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	4805      	ldr	r0, [pc, #20]	; (800b1d8 <fiprintf+0x20>)
 800b1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c6:	6800      	ldr	r0, [r0, #0]
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	f7ff fe31 	bl	800ae30 <_vfiprintf_r>
 800b1ce:	b002      	add	sp, #8
 800b1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1d4:	b003      	add	sp, #12
 800b1d6:	4770      	bx	lr
 800b1d8:	20000200 	.word	0x20000200

0800b1dc <__swhatbuf_r>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e4:	4615      	mov	r5, r2
 800b1e6:	2900      	cmp	r1, #0
 800b1e8:	461e      	mov	r6, r3
 800b1ea:	b096      	sub	sp, #88	; 0x58
 800b1ec:	da0c      	bge.n	800b208 <__swhatbuf_r+0x2c>
 800b1ee:	89a3      	ldrh	r3, [r4, #12]
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1f6:	bf0c      	ite	eq
 800b1f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1fc:	2340      	movne	r3, #64	; 0x40
 800b1fe:	2000      	movs	r0, #0
 800b200:	6031      	str	r1, [r6, #0]
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	b016      	add	sp, #88	; 0x58
 800b206:	bd70      	pop	{r4, r5, r6, pc}
 800b208:	466a      	mov	r2, sp
 800b20a:	f000 f849 	bl	800b2a0 <_fstat_r>
 800b20e:	2800      	cmp	r0, #0
 800b210:	dbed      	blt.n	800b1ee <__swhatbuf_r+0x12>
 800b212:	9901      	ldr	r1, [sp, #4]
 800b214:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b218:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b21c:	4259      	negs	r1, r3
 800b21e:	4159      	adcs	r1, r3
 800b220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b224:	e7eb      	b.n	800b1fe <__swhatbuf_r+0x22>

0800b226 <__smakebuf_r>:
 800b226:	898b      	ldrh	r3, [r1, #12]
 800b228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b22a:	079d      	lsls	r5, r3, #30
 800b22c:	4606      	mov	r6, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	d507      	bpl.n	800b242 <__smakebuf_r+0x1c>
 800b232:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	2301      	movs	r3, #1
 800b23c:	6163      	str	r3, [r4, #20]
 800b23e:	b002      	add	sp, #8
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	466a      	mov	r2, sp
 800b244:	ab01      	add	r3, sp, #4
 800b246:	f7ff ffc9 	bl	800b1dc <__swhatbuf_r>
 800b24a:	9900      	ldr	r1, [sp, #0]
 800b24c:	4605      	mov	r5, r0
 800b24e:	4630      	mov	r0, r6
 800b250:	f7fb fee2 	bl	8007018 <_malloc_r>
 800b254:	b948      	cbnz	r0, 800b26a <__smakebuf_r+0x44>
 800b256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25a:	059a      	lsls	r2, r3, #22
 800b25c:	d4ef      	bmi.n	800b23e <__smakebuf_r+0x18>
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	f043 0302 	orr.w	r3, r3, #2
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	e7e3      	b.n	800b232 <__smakebuf_r+0xc>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	6020      	str	r0, [r4, #0]
 800b26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	9b00      	ldr	r3, [sp, #0]
 800b276:	6120      	str	r0, [r4, #16]
 800b278:	6163      	str	r3, [r4, #20]
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	b15b      	cbz	r3, 800b296 <__smakebuf_r+0x70>
 800b27e:	4630      	mov	r0, r6
 800b280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b284:	f000 f81e 	bl	800b2c4 <_isatty_r>
 800b288:	b128      	cbz	r0, 800b296 <__smakebuf_r+0x70>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	f043 0301 	orr.w	r3, r3, #1
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	431d      	orrs	r5, r3
 800b29a:	81a5      	strh	r5, [r4, #12]
 800b29c:	e7cf      	b.n	800b23e <__smakebuf_r+0x18>
	...

0800b2a0 <_fstat_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4d06      	ldr	r5, [pc, #24]	; (800b2c0 <_fstat_r+0x20>)
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	f7f8 fd6e 	bl	8003d8e <_fstat>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	d102      	bne.n	800b2bc <_fstat_r+0x1c>
 800b2b6:	682b      	ldr	r3, [r5, #0]
 800b2b8:	b103      	cbz	r3, 800b2bc <_fstat_r+0x1c>
 800b2ba:	6023      	str	r3, [r4, #0]
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	bf00      	nop
 800b2c0:	20002768 	.word	0x20002768

0800b2c4 <_isatty_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	4d05      	ldr	r5, [pc, #20]	; (800b2e0 <_isatty_r+0x1c>)
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f8 fd6c 	bl	8003dac <_isatty>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_isatty_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_isatty_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	20002768 	.word	0x20002768

0800b2e4 <abort>:
 800b2e4:	2006      	movs	r0, #6
 800b2e6:	b508      	push	{r3, lr}
 800b2e8:	f000 f840 	bl	800b36c <raise>
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f7f8 fd1c 	bl	8003d2a <_exit>

0800b2f2 <_calloc_r>:
 800b2f2:	b570      	push	{r4, r5, r6, lr}
 800b2f4:	fba1 5402 	umull	r5, r4, r1, r2
 800b2f8:	b934      	cbnz	r4, 800b308 <_calloc_r+0x16>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7fb fe8c 	bl	8007018 <_malloc_r>
 800b300:	4606      	mov	r6, r0
 800b302:	b928      	cbnz	r0, 800b310 <_calloc_r+0x1e>
 800b304:	4630      	mov	r0, r6
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	220c      	movs	r2, #12
 800b30a:	2600      	movs	r6, #0
 800b30c:	6002      	str	r2, [r0, #0]
 800b30e:	e7f9      	b.n	800b304 <_calloc_r+0x12>
 800b310:	462a      	mov	r2, r5
 800b312:	4621      	mov	r1, r4
 800b314:	f7fd fd24 	bl	8008d60 <memset>
 800b318:	e7f4      	b.n	800b304 <_calloc_r+0x12>

0800b31a <_raise_r>:
 800b31a:	291f      	cmp	r1, #31
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	d904      	bls.n	800b32e <_raise_r+0x14>
 800b324:	2316      	movs	r3, #22
 800b326:	6003      	str	r3, [r0, #0]
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	bd38      	pop	{r3, r4, r5, pc}
 800b32e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b330:	b112      	cbz	r2, 800b338 <_raise_r+0x1e>
 800b332:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b336:	b94b      	cbnz	r3, 800b34c <_raise_r+0x32>
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 f831 	bl	800b3a0 <_getpid_r>
 800b33e:	462a      	mov	r2, r5
 800b340:	4601      	mov	r1, r0
 800b342:	4620      	mov	r0, r4
 800b344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b348:	f000 b818 	b.w	800b37c <_kill_r>
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d00a      	beq.n	800b366 <_raise_r+0x4c>
 800b350:	1c59      	adds	r1, r3, #1
 800b352:	d103      	bne.n	800b35c <_raise_r+0x42>
 800b354:	2316      	movs	r3, #22
 800b356:	6003      	str	r3, [r0, #0]
 800b358:	2001      	movs	r0, #1
 800b35a:	e7e7      	b.n	800b32c <_raise_r+0x12>
 800b35c:	2400      	movs	r4, #0
 800b35e:	4628      	mov	r0, r5
 800b360:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b364:	4798      	blx	r3
 800b366:	2000      	movs	r0, #0
 800b368:	e7e0      	b.n	800b32c <_raise_r+0x12>
	...

0800b36c <raise>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <raise+0xc>)
 800b36e:	4601      	mov	r1, r0
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	f7ff bfd2 	b.w	800b31a <_raise_r>
 800b376:	bf00      	nop
 800b378:	20000200 	.word	0x20000200

0800b37c <_kill_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	2300      	movs	r3, #0
 800b380:	4d06      	ldr	r5, [pc, #24]	; (800b39c <_kill_r+0x20>)
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	4611      	mov	r1, r2
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	f7f8 fcbe 	bl	8003d0a <_kill>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	d102      	bne.n	800b398 <_kill_r+0x1c>
 800b392:	682b      	ldr	r3, [r5, #0]
 800b394:	b103      	cbz	r3, 800b398 <_kill_r+0x1c>
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	bd38      	pop	{r3, r4, r5, pc}
 800b39a:	bf00      	nop
 800b39c:	20002768 	.word	0x20002768

0800b3a0 <_getpid_r>:
 800b3a0:	f7f8 bcac 	b.w	8003cfc <_getpid>

0800b3a4 <_init>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	bf00      	nop
 800b3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3aa:	bc08      	pop	{r3}
 800b3ac:	469e      	mov	lr, r3
 800b3ae:	4770      	bx	lr

0800b3b0 <_fini>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	bf00      	nop
 800b3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b6:	bc08      	pop	{r3}
 800b3b8:	469e      	mov	lr, r3
 800b3ba:	4770      	bx	lr
