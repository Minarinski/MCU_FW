
MCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800ba78  0800ba78  0001ba78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f0  0800c1f0  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1f0  0800c1f0  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1f0  0800c1f0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1f4  0800c1f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800c1f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002728  20000210  0800c404  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002938  0800c404  00022938  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c899  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed9  00000000  00000000  0002cb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000917  00000000  00000000  0002f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001844d  00000000  00000000  0002fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eabc  00000000  00000000  000482f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a00  00000000  00000000  00056db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000469c  00000000  00000000  000de7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e2e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba5c 	.word	0x0800ba5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800ba5c 	.word	0x0800ba5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
	oldPos = newPos; //keep track of the last position in the buffer
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <HAL_UARTEx_RxEventCallback+0xb0>)
 80011ba:	881a      	ldrh	r2, [r3, #0]
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011be:	801a      	strh	r2, [r3, #0]
	if (oldPos + Size > DataBuffer_SIZE) { //if the buffer is full, parse it, then reset the buffer
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	4413      	add	r3, r2
 80011ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ce:	dd22      	ble.n	8001216 <HAL_UARTEx_RxEventCallback+0x6a>

		uint16_t datatocopy = DataBuffer_SIZE - oldPos; // find out how much space is left in the main buffer
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011d8:	81fb      	strh	r3, [r7, #14]
		memcpy((uint8_t*) DataBuffer + oldPos, RxBuffer, datatocopy); // copy data in that remaining space
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_UARTEx_RxEventCallback+0xb8>)
 80011e2:	4413      	add	r3, r2
 80011e4:	89fa      	ldrh	r2, [r7, #14]
 80011e6:	4920      	ldr	r1, [pc, #128]	; (8001268 <HAL_UARTEx_RxEventCallback+0xbc>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 fa52 	bl	8009692 <memcpy>

		oldPos = 0;  // point to the start of the buffer
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	801a      	strh	r2, [r3, #0]
		memcpy((uint8_t*) DataBuffer, (uint8_t*) RxBuffer + datatocopy,
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_UARTEx_RxEventCallback+0xbc>)
 80011f8:	1899      	adds	r1, r3, r2
				(Size - datatocopy));  // copy the remaining data
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	1ad3      	subs	r3, r2, r3
		memcpy((uint8_t*) DataBuffer, (uint8_t*) RxBuffer + datatocopy,
 8001200:	461a      	mov	r2, r3
 8001202:	4818      	ldr	r0, [pc, #96]	; (8001264 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001204:	f008 fa45 	bl	8009692 <memcpy>
		newPos = (Size - datatocopy);  // update the position
 8001208:	887a      	ldrh	r2, [r7, #2]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001212:	801a      	strh	r2, [r3, #0]
 8001214:	e010      	b.n	8001238 <HAL_UARTEx_RxEventCallback+0x8c>
	} else {
		memcpy((uint8_t*) DataBuffer + oldPos, RxBuffer, Size); //copy received data to the buffer
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UARTEx_RxEventCallback+0xb8>)
 800121e:	4413      	add	r3, r2
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	4911      	ldr	r1, [pc, #68]	; (8001268 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001224:	4618      	mov	r0, r3
 8001226:	f008 fa34 	bl	8009692 <memcpy>
		newPos = Size + oldPos; //update buffer position
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_UARTEx_RxEventCallback+0xb4>)
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	4413      	add	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001236:	801a      	strh	r2, [r3, #0]

	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 8001238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <HAL_UARTEx_RxEventCallback+0xbc>)
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <HAL_UARTEx_RxEventCallback+0xc0>)
 8001240:	f005 fa75 	bl	800672e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT); //disable the half transfer interrupt
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_UARTEx_RxEventCallback+0xc4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0204 	bic.w	r2, r2, #4
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200021ce 	.word	0x200021ce
 8001260:	200021cc 	.word	0x200021cc
 8001264:	200023d0 	.word	0x200023d0
 8001268:	200021d0 	.word	0x200021d0
 800126c:	20000310 	.word	0x20000310
 8001270:	2000039c 	.word	0x2000039c

08001274 <LCD_SendInternal>:

//LCD ============================================
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	460b      	mov	r3, r1
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	4613      	mov	r3, r2
 8001284:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	b299      	uxth	r1, r3
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	2201      	movs	r2, #1
 8001290:	4822      	ldr	r0, [pc, #136]	; (800131c <LCD_SendInternal+0xa8>)
 8001292:	f004 f997 	bl	80055c4 <HAL_I2C_IsDeviceReady>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK)
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d000      	beq.n	80012a2 <LCD_SendInternal+0x2e>
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80012a0:	e7f1      	b.n	8001286 <LCD_SendInternal+0x12>
			break;
 80012a2:	bf00      	nop
	}

	uint8_t up = data & 0xF0;
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	f023 030f 	bic.w	r3, r3, #15
 80012aa:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	737b      	strb	r3, [r7, #13]

	uint8_t data_arr[4];
	data_arr[0] = up | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012b2:	7bba      	ldrb	r2, [r7, #14]
 80012b4:	797b      	ldrb	r3, [r7, #5]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f043 030c 	orr.w	r3, r3, #12
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up | flags | LCD_BACKLIGHT;
 80012c2:	7bba      	ldrb	r2, [r7, #14]
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo | flags | LCD_BACKLIGHT | LCD_PIN_EN;
 80012d2:	7b7a      	ldrb	r2, [r7, #13]
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 030c 	orr.w	r3, r3, #12
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo | flags | LCD_BACKLIGHT;
 80012e2:	7b7a      	ldrb	r2, [r7, #13]
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	72fb      	strb	r3, [r7, #11]

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	b299      	uxth	r1, r3
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2304      	movs	r3, #4
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <LCD_SendInternal+0xa8>)
 8001304:	f004 f860 	bl	80053c8 <HAL_I2C_Master_Transmit>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 800130c:	2005      	movs	r0, #5
 800130e:	f003 f95f 	bl	80045d0 <HAL_Delay>
	return res;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000022c 	.word	0x2000022c

08001320 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	460a      	mov	r2, r1
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	4613      	mov	r3, r2
 800132e:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001330:	79b9      	ldrb	r1, [r7, #6]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2200      	movs	r2, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff9c 	bl	8001274 <LCD_SendInternal>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
	LCD_SendInternal(lcd_addr, data, LCD_PIN_RS);
 8001354:	79b9      	ldrb	r1, [r7, #6]
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2201      	movs	r2, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff8a 	bl	8001274 <LCD_SendInternal>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0x30);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2130      	movs	r1, #48	; 0x30
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffd2 	bl	8001320 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0x02);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2102      	movs	r1, #2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffcd 	bl	8001320 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, CMD_LCD_ON);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	210c      	movs	r1, #12
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffc8 	bl	8001320 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, CMD_LCD_CLEAR);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2101      	movs	r1, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffc3 	bl	8001320 <LCD_SendCommand>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	6039      	str	r1, [r7, #0]
 80013ac:	71fb      	strb	r3, [r7, #7]
	while (*str) {
 80013ae:	e009      	b.n	80013c4 <LCD_SendString+0x22>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ffc3 	bl	8001344 <LCD_SendData>
		str++;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	603b      	str	r3, [r7, #0]
	while (*str) {
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f1      	bne.n	80013b0 <LCD_SendString+0xe>
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <LCD_SET_CGRAM>:

void LCD_SET_CGRAM(uint8_t lcd_addr, uint8_t addr, uint8_t *data) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	603a      	str	r2, [r7, #0]
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	460b      	mov	r3, r1
 80013e4:	71bb      	strb	r3, [r7, #6]
	uint8_t start_addr = LCD_CGRAM_BASE_ADDR | (addr << 3);
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	72fb      	strb	r3, [r7, #11]
	LCD_SendCommand(lcd_addr, start_addr);
 80013f4:	7afa      	ldrb	r2, [r7, #11]
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff90 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e00b      	b.n	800141e <LCD_SET_CGRAM+0x48>
		LCD_SendData(lcd_addr, data[i]);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff96 	bl	8001344 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3301      	adds	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b07      	cmp	r3, #7
 8001422:	ddf0      	ble.n	8001406 <LCD_SET_CGRAM+0x30>
	}
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <LCD_Write_Info>:

void LCD_Write_Info(struct DataFlash nowData, struct DataFlash nextData) {
 8001430:	b084      	sub	sp, #16
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	f107 0c10 	add.w	ip, r7, #16
 800143c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8001440:	2101      	movs	r1, #1
 8001442:	204e      	movs	r0, #78	; 0x4e
 8001444:	f7ff ff6c 	bl	8001320 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	204e      	movs	r0, #78	; 0x4e
 800144c:	f7ff ff68 	bl	8001320 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 8001450:	f107 0315 	add.w	r3, r7, #21
 8001454:	4619      	mov	r1, r3
 8001456:	204e      	movs	r0, #78	; 0x4e
 8001458:	f7ff ffa3 	bl	80013a2 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 800145c:	2100      	movs	r1, #0
 800145e:	204e      	movs	r0, #78	; 0x4e
 8001460:	f7ff ff70 	bl	8001344 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	e006      	b.n	8001478 <LCD_Write_Info+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800146a:	2114      	movs	r1, #20
 800146c:	204e      	movs	r0, #78	; 0x4e
 800146e:	f7ff ff57 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b0a      	cmp	r3, #10
 800147c:	ddf5      	ble.n	800146a <LCD_Write_Info+0x3a>
	}
	//printf("flag = %d\r\n", upDownFlag);
	if (!upDownFlag)
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <LCD_Write_Info+0xec>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <LCD_Write_Info+0x60>
		LCD_SendData(LCD_ADDR, 1);
 8001486:	2101      	movs	r1, #1
 8001488:	204e      	movs	r0, #78	; 0x4e
 800148a:	f7ff ff5b 	bl	8001344 <LCD_SendData>
 800148e:	e003      	b.n	8001498 <LCD_Write_Info+0x68>
	else
		LCD_SendData(LCD_ADDR, 2);
 8001490:	2102      	movs	r1, #2
 8001492:	204e      	movs	r0, #78	; 0x4e
 8001494:	f7ff ff56 	bl	8001344 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 8001498:	21c0      	movs	r1, #192	; 0xc0
 800149a:	204e      	movs	r0, #78	; 0x4e
 800149c:	f7ff ff40 	bl	8001320 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 80014a0:	2103      	movs	r1, #3
 80014a2:	204e      	movs	r0, #78	; 0x4e
 80014a4:	f7ff ff4e 	bl	8001344 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 80014a8:	f107 031a 	add.w	r3, r7, #26
 80014ac:	4619      	mov	r1, r3
 80014ae:	204e      	movs	r0, #78	; 0x4e
 80014b0:	f7ff ff77 	bl	80013a2 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 80014b4:	2103      	movs	r1, #3
 80014b6:	204e      	movs	r0, #78	; 0x4e
 80014b8:	f7ff ff44 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014bc:	2103      	movs	r1, #3
 80014be:	204e      	movs	r0, #78	; 0x4e
 80014c0:	f7ff ff40 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80014c4:	2103      	movs	r1, #3
 80014c6:	204e      	movs	r0, #78	; 0x4e
 80014c8:	f7ff ff3c 	bl	8001344 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nextData.busStopID);
 80014cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014d0:	330a      	adds	r3, #10
 80014d2:	4619      	mov	r1, r3
 80014d4:	204e      	movs	r0, #78	; 0x4e
 80014d6:	f7ff ff64 	bl	80013a2 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	e006      	b.n	80014ee <LCD_Write_Info+0xbe>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80014e0:	2114      	movs	r1, #20
 80014e2:	204e      	movs	r0, #78	; 0x4e
 80014e4:	f7ff ff1c 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	ddf5      	ble.n	80014e0 <LCD_Write_Info+0xb0>
	}
	if (!upDownFlag)
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <LCD_Write_Info+0xec>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d104      	bne.n	8001506 <LCD_Write_Info+0xd6>
		LCD_SendData(LCD_ADDR, 1);
 80014fc:	2101      	movs	r1, #1
 80014fe:	204e      	movs	r0, #78	; 0x4e
 8001500:	f7ff ff20 	bl	8001344 <LCD_SendData>
	else
		LCD_SendData(LCD_ADDR, 2);
}
 8001504:	e003      	b.n	800150e <LCD_Write_Info+0xde>
		LCD_SendData(LCD_ADDR, 2);
 8001506:	2102      	movs	r1, #2
 8001508:	204e      	movs	r0, #78	; 0x4e
 800150a:	f7ff ff1b 	bl	8001344 <LCD_SendData>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001518:	b004      	add	sp, #16
 800151a:	4770      	bx	lr
 800151c:	200021ca 	.word	0x200021ca

08001520 <updateLCD>:

void updateLCD() {
 8001520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001524:	b096      	sub	sp, #88	; 0x58
 8001526:	af16      	add	r7, sp, #88	; 0x58
	LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <updateLCD+0xac>)
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <updateLCD+0xac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	4827      	ldr	r0, [pc, #156]	; (80015d0 <updateLCD+0xb0>)
 8001534:	460b      	mov	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	0119      	lsls	r1, r3, #4
 800153c:	440b      	add	r3, r1
 800153e:	18c4      	adds	r4, r0, r3
 8001540:	4923      	ldr	r1, [pc, #140]	; (80015d0 <updateLCD+0xb0>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	011a      	lsls	r2, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	440b      	add	r3, r1
 800154e:	461d      	mov	r5, r3
 8001550:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8001554:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001558:	4666      	mov	r6, ip
 800155a:	462b      	mov	r3, r5
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001566:	3510      	adds	r5, #16
 8001568:	f10c 0c10 	add.w	ip, ip, #16
 800156c:	4575      	cmp	r5, lr
 800156e:	d1f3      	bne.n	8001558 <updateLCD+0x38>
 8001570:	4663      	mov	r3, ip
 8001572:	462a      	mov	r2, r5
 8001574:	8811      	ldrh	r1, [r2, #0]
 8001576:	7892      	ldrb	r2, [r2, #2]
 8001578:	8019      	strh	r1, [r3, #0]
 800157a:	709a      	strb	r2, [r3, #2]
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	469a      	mov	sl, r3
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	4699      	mov	r9, r3
 8001584:	68a3      	ldr	r3, [r4, #8]
 8001586:	4698      	mov	r8, r3
 8001588:	68e3      	ldr	r3, [r4, #12]
 800158a:	469e      	mov	lr, r3
 800158c:	3410      	adds	r4, #16
 800158e:	466e      	mov	r6, sp
 8001590:	f104 0c20 	add.w	ip, r4, #32
 8001594:	4635      	mov	r5, r6
 8001596:	4623      	mov	r3, r4
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	3410      	adds	r4, #16
 80015a4:	3610      	adds	r6, #16
 80015a6:	4564      	cmp	r4, ip
 80015a8:	d1f4      	bne.n	8001594 <updateLCD+0x74>
 80015aa:	4633      	mov	r3, r6
 80015ac:	4622      	mov	r2, r4
 80015ae:	8811      	ldrh	r1, [r2, #0]
 80015b0:	7892      	ldrb	r2, [r2, #2]
 80015b2:	8019      	strh	r1, [r3, #0]
 80015b4:	709a      	strb	r2, [r3, #2]
 80015b6:	4650      	mov	r0, sl
 80015b8:	4649      	mov	r1, r9
 80015ba:	4642      	mov	r2, r8
 80015bc:	4673      	mov	r3, lr
 80015be:	f7ff ff37 	bl	8001430 <LCD_Write_Info>
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ca:	bf00      	nop
 80015cc:	200021c4 	.word	0x200021c4
 80015d0:	200003e0 	.word	0x200003e0

080015d4 <notGPSLCD>:

void notGPSLCD() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 80015da:	2101      	movs	r1, #1
 80015dc:	204e      	movs	r0, #78	; 0x4e
 80015de:	f7ff fe9f 	bl	8001320 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	204e      	movs	r0, #78	; 0x4e
 80015e6:	f7ff fe9b 	bl	8001320 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, data[0].busRouteno);
 80015ea:	4925      	ldr	r1, [pc, #148]	; (8001680 <notGPSLCD+0xac>)
 80015ec:	204e      	movs	r0, #78	; 0x4e
 80015ee:	f7ff fed8 	bl	80013a2 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 80015f2:	2100      	movs	r1, #0
 80015f4:	204e      	movs	r0, #78	; 0x4e
 80015f6:	f7ff fea5 	bl	8001344 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	e006      	b.n	800160e <notGPSLCD+0x3a>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8001600:	2114      	movs	r1, #20
 8001602:	204e      	movs	r0, #78	; 0x4e
 8001604:	f7ff fe8c 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0a      	cmp	r3, #10
 8001612:	ddf5      	ble.n	8001600 <notGPSLCD+0x2c>
	}
	LCD_SendData(LCD_ADDR, 1);
 8001614:	2101      	movs	r1, #1
 8001616:	204e      	movs	r0, #78	; 0x4e
 8001618:	f7ff fe94 	bl	8001344 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 800161c:	21c0      	movs	r1, #192	; 0xc0
 800161e:	204e      	movs	r0, #78	; 0x4e
 8001620:	f7ff fe7e 	bl	8001320 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 8001624:	2103      	movs	r1, #3
 8001626:	204e      	movs	r0, #78	; 0x4e
 8001628:	f7ff fe8c 	bl	8001344 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "-----");
 800162c:	4915      	ldr	r1, [pc, #84]	; (8001684 <notGPSLCD+0xb0>)
 800162e:	204e      	movs	r0, #78	; 0x4e
 8001630:	f7ff feb7 	bl	80013a2 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 3);
 8001634:	2103      	movs	r1, #3
 8001636:	204e      	movs	r0, #78	; 0x4e
 8001638:	f7ff fe84 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 800163c:	2103      	movs	r1, #3
 800163e:	204e      	movs	r0, #78	; 0x4e
 8001640:	f7ff fe80 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 8001644:	2103      	movs	r1, #3
 8001646:	204e      	movs	r0, #78	; 0x4e
 8001648:	f7ff fe7c 	bl	8001344 <LCD_SendData>
	LCD_SendString(LCD_ADDR, "-----");
 800164c:	490d      	ldr	r1, [pc, #52]	; (8001684 <notGPSLCD+0xb0>)
 800164e:	204e      	movs	r0, #78	; 0x4e
 8001650:	f7ff fea7 	bl	80013a2 <LCD_SendString>
	for (int i = 0; i < 1; i++) {
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	e006      	b.n	8001668 <notGPSLCD+0x94>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 800165a:	2114      	movs	r1, #20
 800165c:	204e      	movs	r0, #78	; 0x4e
 800165e:	f7ff fe5f 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 1; i++) {
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	ddf5      	ble.n	800165a <notGPSLCD+0x86>
	}
	LCD_SendData(LCD_ADDR, 1);
 800166e:	2101      	movs	r1, #1
 8001670:	204e      	movs	r0, #78	; 0x4e
 8001672:	f7ff fe67 	bl	8001344 <LCD_SendData>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200003e5 	.word	0x200003e5
 8001684:	0800ba78 	.word	0x0800ba78

08001688 <LCD_Write_Arrive>:

void LCD_Write_Arrive(struct DataFlash nowData) {
 8001688:	b084      	sub	sp, #16
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	f107 0c10 	add.w	ip, r7, #16
 8001694:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8001698:	2101      	movs	r1, #1
 800169a:	204e      	movs	r0, #78	; 0x4e
 800169c:	f7ff fe40 	bl	8001320 <LCD_SendCommand>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	204e      	movs	r0, #78	; 0x4e
 80016a4:	f7ff fe3c 	bl	8001320 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, nowData.busRouteno);
 80016a8:	f107 0315 	add.w	r3, r7, #21
 80016ac:	4619      	mov	r1, r3
 80016ae:	204e      	movs	r0, #78	; 0x4e
 80016b0:	f7ff fe77 	bl	80013a2 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 0);
 80016b4:	2100      	movs	r1, #0
 80016b6:	204e      	movs	r0, #78	; 0x4e
 80016b8:	f7ff fe44 	bl	8001344 <LCD_SendData>
	for (int i = 0; i < 11; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	e006      	b.n	80016d0 <LCD_Write_Arrive+0x48>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 80016c2:	2114      	movs	r1, #20
 80016c4:	204e      	movs	r0, #78	; 0x4e
 80016c6:	f7ff fe2b 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 11; i++) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	ddf5      	ble.n	80016c2 <LCD_Write_Arrive+0x3a>
	}
	LCD_SendData(LCD_ADDR, 1);
 80016d6:	2101      	movs	r1, #1
 80016d8:	204e      	movs	r0, #78	; 0x4e
 80016da:	f7ff fe33 	bl	8001344 <LCD_SendData>
	LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 80016de:	21c0      	movs	r1, #192	; 0xc0
 80016e0:	204e      	movs	r0, #78	; 0x4e
 80016e2:	f7ff fe1d 	bl	8001320 <LCD_SendCommand>
	LCD_SendData(LCD_ADDR, 3);
 80016e6:	2103      	movs	r1, #3
 80016e8:	204e      	movs	r0, #78	; 0x4e
 80016ea:	f7ff fe2b 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80016ee:	2103      	movs	r1, #3
 80016f0:	204e      	movs	r0, #78	; 0x4e
 80016f2:	f7ff fe27 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 3);
 80016f6:	2103      	movs	r1, #3
 80016f8:	204e      	movs	r0, #78	; 0x4e
 80016fa:	f7ff fe23 	bl	8001344 <LCD_SendData>
	LCD_SendString(LCD_ADDR, nowData.busStopID);
 80016fe:	f107 031a 	add.w	r3, r7, #26
 8001702:	4619      	mov	r1, r3
 8001704:	204e      	movs	r0, #78	; 0x4e
 8001706:	f7ff fe4c 	bl	80013a2 <LCD_SendString>
	LCD_SendData(LCD_ADDR, 4);
 800170a:	2104      	movs	r1, #4
 800170c:	204e      	movs	r0, #78	; 0x4e
 800170e:	f7ff fe19 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 8001712:	2104      	movs	r1, #4
 8001714:	204e      	movs	r0, #78	; 0x4e
 8001716:	f7ff fe15 	bl	8001344 <LCD_SendData>
	LCD_SendData(LCD_ADDR, 4);
 800171a:	2104      	movs	r1, #4
 800171c:	204e      	movs	r0, #78	; 0x4e
 800171e:	f7ff fe11 	bl	8001344 <LCD_SendData>
	for (int i = 0; i < 4; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	e006      	b.n	8001736 <LCD_Write_Arrive+0xae>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
 8001728:	2114      	movs	r1, #20
 800172a:	204e      	movs	r0, #78	; 0x4e
 800172c:	f7ff fdf8 	bl	8001320 <LCD_SendCommand>
	for (int i = 0; i < 4; i++) {
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b03      	cmp	r3, #3
 800173a:	ddf5      	ble.n	8001728 <LCD_Write_Arrive+0xa0>
	}
	LCD_SendData(LCD_ADDR, 1);
 800173c:	2101      	movs	r1, #1
 800173e:	204e      	movs	r0, #78	; 0x4e
 8001740:	f7ff fe00 	bl	8001344 <LCD_SendData>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800174e:	b004      	add	sp, #16
 8001750:	4770      	bx	lr
	...

08001754 <Flash_Unlock>:

//Flash===========================================================

int dataIdx = 0;

void Flash_Unlock(void) {
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;  // Key1
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <Flash_Unlock+0x18>)
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <Flash_Unlock+0x1c>)
 800175c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;  // Key2
 800175e:	4b03      	ldr	r3, [pc, #12]	; (800176c <Flash_Unlock+0x18>)
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <Flash_Unlock+0x20>)
 8001762:	605a      	str	r2, [r3, #4]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40022000 	.word	0x40022000
 8001770:	45670123 	.word	0x45670123
 8001774:	cdef89ab 	.word	0xcdef89ab

08001778 <Flash_Lock>:

void Flash_Lock(void) {
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <Flash_Lock+0x18>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <Flash_Lock+0x18>)
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	6113      	str	r3, [r2, #16]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40022000 	.word	0x40022000

08001794 <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t data) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
	while (FLASH->SR & FLASH_SR_BSY)
 80017a0:	bf00      	nop
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <Flash_Write+0x54>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <Flash_Write+0xe>
		;  // Busy flag 체크

	FLASH->CR |= FLASH_CR_PG;  // Programming mode ?��?��
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <Flash_Write+0x54>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <Flash_Write+0x54>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*) address = data;  // ?��?��?�� 기록
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	b292      	uxth	r2, r2
 80017c0:	801a      	strh	r2, [r3, #0]

	while (FLASH->SR & FLASH_SR_BSY)
 80017c2:	bf00      	nop
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <Flash_Write+0x54>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <Flash_Write+0x30>
		;  // Busy flag 체크

	FLASH->CR &= ~FLASH_CR_PG;  // Programming mode ?��?��
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <Flash_Write+0x54>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <Flash_Write+0x54>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6113      	str	r3, [r2, #16]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000

080017ec <Flash_Write_Char>:
	uint16_t value = (uint16_t) strtol((const char*) StrData, NULL, 10);
	Flash_Write(address, value);  // ?��?�� 값을 ?��?��?�� 메모리에 ???��
	Flash_Lock();  // ?��?��?�� 메모�????? ?���?????
}

uint32_t Flash_Write_Char(uint32_t address, uint8_t CharData) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
	Flash_Unlock();
 80017f8:	f7ff ffac 	bl	8001754 <Flash_Unlock>
	Flash_Write(address, CharData);
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	4619      	mov	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ffc7 	bl	8001794 <Flash_Write>
	Flash_Lock();
 8001806:	f7ff ffb7 	bl	8001778 <Flash_Lock>
	return address + 0x02;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3302      	adds	r3, #2
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <Flash_Write_Str>:

uint32_t Flash_Write_Str(uint32_t address, uint8_t *StrData) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e00b      	b.n	800183e <Flash_Write_Str+0x28>
		address = Flash_Write_Char(address, StrData[i]);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffdb 	bl	80017ec <Flash_Write_Char>
 8001836:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen((char*) StrData); i++) {
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f7fe fc86 	bl	8000150 <strlen>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8ec      	bhi.n	8001826 <Flash_Write_Str+0x10>
	}
	//printf("%x\r\n", address);
	return address;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t address, uint8_t *StrData) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	char *token;

	token = strtok(StrData, ",");
 8001862:	4996      	ldr	r1, [pc, #600]	; (8001abc <Flash_Write_Data+0x264>)
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f007 fe05 	bl	8009474 <strtok>
 800186a:	60f8      	str	r0, [r7, #12]
	if (token[0] == 'D') {
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b44      	cmp	r3, #68	; 0x44
 8001872:	f040 80a7 	bne.w	80019c4 <Flash_Write_Data+0x16c>
		token = strtok(NULL, ",");
 8001876:	4991      	ldr	r1, [pc, #580]	; (8001abc <Flash_Write_Data+0x264>)
 8001878:	2000      	movs	r0, #0
 800187a:	f007 fdfb 	bl	8009474 <strtok>
 800187e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d02c      	beq.n	80018e0 <Flash_Write_Data+0x88>
			strncpy(data[dataIdx].busNM, token,
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	011a      	lsls	r2, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	4a8b      	ldr	r2, [pc, #556]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001896:	4413      	add	r3, r2
 8001898:	2204      	movs	r2, #4
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	4618      	mov	r0, r3
 800189e:	f007 fdd5 	bl	800944c <strncpy>
					sizeof(data[dataIdx].busNM) - 1);
			data[dataIdx].busNM[sizeof(data[dataIdx].busNM) - 1] = '\0';
 80018a2:	4b87      	ldr	r3, [pc, #540]	; (8001ac0 <Flash_Write_Data+0x268>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4987      	ldr	r1, [pc, #540]	; (8001ac4 <Flash_Write_Data+0x26c>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	011a      	lsls	r2, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	3304      	adds	r3, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busNM);
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <Flash_Write_Data+0x268>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	011a      	lsls	r2, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	4a7e      	ldr	r2, [pc, #504]	; (8001ac4 <Flash_Write_Data+0x26c>)
 80018ca:	4413      	add	r3, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa1 	bl	8001816 <Flash_Write_Str>
 80018d4:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff87 	bl	80017ec <Flash_Write_Char>
 80018de:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 80018e0:	4976      	ldr	r1, [pc, #472]	; (8001abc <Flash_Write_Data+0x264>)
 80018e2:	2000      	movs	r0, #0
 80018e4:	f007 fdc6 	bl	8009474 <strtok>
 80018e8:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d02e      	beq.n	800194e <Flash_Write_Data+0xf6>
			strncpy(data[dataIdx].busRouteno, token,
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <Flash_Write_Data+0x268>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	011a      	lsls	r2, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001900:	4413      	add	r3, r2
 8001902:	3305      	adds	r3, #5
 8001904:	2204      	movs	r2, #4
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	f007 fd9f 	bl	800944c <strncpy>
					sizeof(data[dataIdx].busRouteno) - 1);
			data[dataIdx].busRouteno[sizeof(data[dataIdx].busRouteno) - 1] =
 800190e:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	496c      	ldr	r1, [pc, #432]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	011a      	lsls	r2, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	440b      	add	r3, r1
 8001920:	3309      	adds	r3, #9
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
					'\0';
			address = Flash_Write_Str(address, data[dataIdx].busRouteno);
 8001926:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	011a      	lsls	r2, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	4a63      	ldr	r2, [pc, #396]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001936:	4413      	add	r3, r2
 8001938:	3305      	adds	r3, #5
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff6a 	bl	8001816 <Flash_Write_Str>
 8001942:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff50 	bl	80017ec <Flash_Write_Char>
 800194c:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 800194e:	495b      	ldr	r1, [pc, #364]	; (8001abc <Flash_Write_Data+0x264>)
 8001950:	2000      	movs	r0, #0
 8001952:	f007 fd8f 	bl	8009474 <strtok>
 8001956:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80a9 	beq.w	8001ab2 <Flash_Write_Data+0x25a>
			strncpy(data[dataIdx].busStopID, token,
 8001960:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	011a      	lsls	r2, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	3308      	adds	r3, #8
 8001970:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001972:	4413      	add	r3, r2
 8001974:	3302      	adds	r3, #2
 8001976:	2207      	movs	r2, #7
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f007 fd66 	bl	800944c <strncpy>
					sizeof(data[dataIdx].busStopID) - 1);
			data[dataIdx].busStopID[sizeof(data[dataIdx].busStopID) - 1] = '\0';
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	494f      	ldr	r1, [pc, #316]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	011a      	lsls	r2, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	440b      	add	r3, r1
 8001992:	3311      	adds	r3, #17
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].busStopID);
 8001998:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <Flash_Write_Data+0x268>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	011a      	lsls	r2, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	3308      	adds	r3, #8
 80019a8:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <Flash_Write_Data+0x26c>)
 80019aa:	4413      	add	r3, r2
 80019ac:	3302      	adds	r3, #2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff30 	bl	8001816 <Flash_Write_Str>
 80019b6:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff16 	bl	80017ec <Flash_Write_Char>
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	e076      	b.n	8001ab2 <Flash_Write_Data+0x25a>
		}
	} else {
		token = strtok(NULL, ",");
 80019c4:	493d      	ldr	r1, [pc, #244]	; (8001abc <Flash_Write_Data+0x264>)
 80019c6:	2000      	movs	r0, #0
 80019c8:	f007 fd54 	bl	8009474 <strtok>
 80019cc:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d030      	beq.n	8001a36 <Flash_Write_Data+0x1de>
			strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 80019d4:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <Flash_Write_Data+0x268>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	011a      	lsls	r2, r3, #4
 80019e0:	4413      	add	r3, r2
 80019e2:	3310      	adds	r3, #16
 80019e4:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <Flash_Write_Data+0x26c>)
 80019e6:	4413      	add	r3, r2
 80019e8:	3302      	adds	r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 fd2c 	bl	800944c <strncpy>
			data[dataIdx].lati[sizeof(data[dataIdx].lati) - 1] = '\0';
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <Flash_Write_Data+0x268>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4932      	ldr	r1, [pc, #200]	; (8001ac4 <Flash_Write_Data+0x26c>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	011a      	lsls	r2, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	3321      	adds	r3, #33	; 0x21
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].lati);
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	011a      	lsls	r2, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	3302      	adds	r3, #2
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fef6 	bl	8001816 <Flash_Write_Str>
 8001a2a:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, ',');
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fedc 	bl	80017ec <Flash_Write_Char>
 8001a34:	6078      	str	r0, [r7, #4]
		}

		token = strtok(NULL, ",");
 8001a36:	4921      	ldr	r1, [pc, #132]	; (8001abc <Flash_Write_Data+0x264>)
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f007 fd1b 	bl	8009474 <strtok>
 8001a3e:	60f8      	str	r0, [r7, #12]
		if (token != NULL) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d030      	beq.n	8001aa8 <Flash_Write_Data+0x250>
			strncpy(data[dataIdx].longi, token,
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	011a      	lsls	r2, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3320      	adds	r3, #32
 8001a56:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001a58:	4413      	add	r3, r2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	68f9      	ldr	r1, [r7, #12]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 fcf3 	bl	800944c <strncpy>
					sizeof(data[dataIdx].longi) - 1);
			data[dataIdx].longi[sizeof(data[dataIdx].longi) - 1] = '\0';
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	011a      	lsls	r2, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	3331      	adds	r3, #49	; 0x31
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
			address = Flash_Write_Str(address, data[dataIdx].longi);
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	011a      	lsls	r2, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3320      	adds	r3, #32
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <Flash_Write_Data+0x26c>)
 8001a90:	4413      	add	r3, r2
 8001a92:	3302      	adds	r3, #2
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff febd 	bl	8001816 <Flash_Write_Str>
 8001a9c:	6078      	str	r0, [r7, #4]
			address = Flash_Write_Char(address, '!');
 8001a9e:	2121      	movs	r1, #33	; 0x21
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fea3 	bl	80017ec <Flash_Write_Char>
 8001aa6:	6078      	str	r0, [r7, #4]
		}
		dataIdx += 1;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <Flash_Write_Data+0x268>)
 8001ab0:	6013      	str	r3, [r2, #0]
//			LCD_SendString(LCD_ADDR, "SUCCESS");
		}
	}
//	printf("busNM:%s, busRouteNo:%s, BusStopID:%s, lati:%s, longi:%s\r\n",
//			data.busNM, data.busRouteno, data.busStopID, data.lati, data.longi);
	return address;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	0800ba80 	.word	0x0800ba80
 8001ac0:	2000260c 	.word	0x2000260c
 8001ac4:	200003e0 	.word	0x200003e0

08001ac8 <Flash_Read>:

uint16_t Flash_Read(uint32_t address) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t*) address; // �??????��?�� ?��?��?�� 메모�????? 주소?��?�� ?��?��?�� ?���?????
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <Flash_Erase_Page>:

void Flash_Erase_Page(uint32_t address) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	Flash_Unlock();  // ?��?��?�� 메모�????? ?��?��
 8001ae8:	f7ff fe34 	bl	8001754 <Flash_Unlock>

	FLASH->CR |= FLASH_CR_PER;   // Page Erase 비트 ?��?��
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6113      	str	r3, [r2, #16]
	FLASH->AR = address;         // �??????�� ?��?���??????�� 주소 ?��?��
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;  // Erase ?��?��
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b08:	6113      	str	r3, [r2, #16]

	while (FLASH->SR & FLASH_SR_BSY)
 8001b0a:	bf00      	nop
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f9      	bne.n	8001b0c <Flash_Erase_Page+0x2c>
		;  // ?��?��?�� ?��료될 ?��까�? ??�?????

	FLASH->CR &= ~FLASH_CR_PER;  // Page Erase 비트 ?��?��
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <Flash_Erase_Page+0x50>)
 8001b1e:	f023 0302 	bic.w	r3, r3, #2
 8001b22:	6113      	str	r3, [r2, #16]

	Flash_Lock();  // ?��?��?�� 메모�????? ?���?????
 8001b24:	f7ff fe28 	bl	8001778 <Flash_Lock>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000

08001b34 <splitData>:

void splitData(char *strData) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	char *token;

	token = strtok(strData, ","); // CarNM
 8001b3c:	4934      	ldr	r1, [pc, #208]	; (8001c10 <splitData+0xdc>)
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f007 fc98 	bl	8009474 <strtok>
 8001b44:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busNM, token, sizeof(data[dataIdx].busNM) - 1);
 8001b46:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <splitData+0xe0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	011a      	lsls	r2, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	4a30      	ldr	r2, [pc, #192]	; (8001c18 <splitData+0xe4>)
 8001b56:	4413      	add	r3, r2
 8001b58:	2204      	movs	r2, #4
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f007 fc75 	bl	800944c <strncpy>

	token = strtok(NULL, ","); // RouteNo
 8001b62:	492b      	ldr	r1, [pc, #172]	; (8001c10 <splitData+0xdc>)
 8001b64:	2000      	movs	r0, #0
 8001b66:	f007 fc85 	bl	8009474 <strtok>
 8001b6a:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busRouteno, token,
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <splitData+0xe0>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	011a      	lsls	r2, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <splitData+0xe4>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3305      	adds	r3, #5
 8001b80:	2204      	movs	r2, #4
 8001b82:	68f9      	ldr	r1, [r7, #12]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f007 fc61 	bl	800944c <strncpy>
			sizeof(data[dataIdx].busRouteno) - 1);

	token = strtok(NULL, ","); // StopID
 8001b8a:	4921      	ldr	r1, [pc, #132]	; (8001c10 <splitData+0xdc>)
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f007 fc71 	bl	8009474 <strtok>
 8001b92:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].busStopID, token,
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <splitData+0xe0>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	011a      	lsls	r2, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <splitData+0xe4>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	2205      	movs	r2, #5
 8001bac:	68f9      	ldr	r1, [r7, #12]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 fc4c 	bl	800944c <strncpy>
			5);

	token = strtok(NULL, ","); // lati
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <splitData+0xdc>)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f007 fc5c 	bl	8009474 <strtok>
 8001bbc:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].lati, token, sizeof(data[dataIdx].lati) - 1);
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <splitData+0xe0>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	011a      	lsls	r2, r3, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	3310      	adds	r3, #16
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <splitData+0xe4>)
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	68f9      	ldr	r1, [r7, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 fc37 	bl	800944c <strncpy>

	token = strtok(NULL, "!"); // longi
 8001bde:	490f      	ldr	r1, [pc, #60]	; (8001c1c <splitData+0xe8>)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f007 fc47 	bl	8009474 <strtok>
 8001be6:	60f8      	str	r0, [r7, #12]
	strncpy(data[dataIdx].longi, token, sizeof(data[dataIdx].longi) - 1);
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <splitData+0xe0>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	011a      	lsls	r2, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3320      	adds	r3, #32
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <splitData+0xe4>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f007 fc22 	bl	800944c <strncpy>
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	0800ba80 	.word	0x0800ba80
 8001c14:	2000260c 	.word	0x2000260c
 8001c18:	200003e0 	.word	0x200003e0
 8001c1c:	0800ba84 	.word	0x0800ba84

08001c20 <CallData>:

uint32_t CallData(uint32_t address) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b096      	sub	sp, #88	; 0x58
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	char a[70] = { 0, };
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	2242      	movs	r2, #66	; 0x42
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f007 fbef 	bl	8009418 <memset>
	int i = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		a[i] = (char) Flash_Read(address);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff42 	bl	8001ac8 <Flash_Read>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b2d9      	uxtb	r1, r3
 8001c48:	f107 020c 	add.w	r2, r7, #12
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	4413      	add	r3, r2
 8001c50:	460a      	mov	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
		address += 0x02;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3302      	adds	r3, #2
 8001c58:	607b      	str	r3, [r7, #4]
		if (a[i] == 0xFF) {
 8001c5a:	f107 020c 	add.w	r2, r7, #12
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2bff      	cmp	r3, #255	; 0xff
 8001c66:	d101      	bne.n	8001c6c <CallData+0x4c>
			return address;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	e01e      	b.n	8001caa <CallData+0x8a>
		}
		if (a[i] == '!') {
 8001c6c:	f107 020c 	add.w	r2, r7, #12
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b21      	cmp	r3, #33	; 0x21
 8001c78:	d113      	bne.n	8001ca2 <CallData+0x82>
			splitData(a);
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff58 	bl	8001b34 <splitData>
			dataIdx += 1;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <CallData+0x94>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <CallData+0x94>)
 8001c8c:	6013      	str	r3, [r2, #0]
			i = -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	657b      	str	r3, [r7, #84]	; 0x54
			memset(a, 0, 60);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	223c      	movs	r2, #60	; 0x3c
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f007 fbbb 	bl	8009418 <memset>
		}
		i += 1;
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
		a[i] = (char) Flash_Read(address);
 8001ca8:	e7c9      	b.n	8001c3e <CallData+0x1e>
	}
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3758      	adds	r7, #88	; 0x58
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000260c 	.word	0x2000260c

08001cb8 <Flash_Clear>:

void Flash_Clear() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	Flash_Erase_Page(0x0800CC00);
 8001cbc:	4814      	ldr	r0, [pc, #80]	; (8001d10 <Flash_Clear+0x58>)
 8001cbe:	f7ff ff0f 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800D000);
 8001cc2:	4814      	ldr	r0, [pc, #80]	; (8001d14 <Flash_Clear+0x5c>)
 8001cc4:	f7ff ff0c 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800D400);
 8001cc8:	4813      	ldr	r0, [pc, #76]	; (8001d18 <Flash_Clear+0x60>)
 8001cca:	f7ff ff09 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800D800);
 8001cce:	4813      	ldr	r0, [pc, #76]	; (8001d1c <Flash_Clear+0x64>)
 8001cd0:	f7ff ff06 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800DC00);
 8001cd4:	4812      	ldr	r0, [pc, #72]	; (8001d20 <Flash_Clear+0x68>)
 8001cd6:	f7ff ff03 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800E000);
 8001cda:	4812      	ldr	r0, [pc, #72]	; (8001d24 <Flash_Clear+0x6c>)
 8001cdc:	f7ff ff00 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800E400);
 8001ce0:	4811      	ldr	r0, [pc, #68]	; (8001d28 <Flash_Clear+0x70>)
 8001ce2:	f7ff fefd 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800E800);
 8001ce6:	4811      	ldr	r0, [pc, #68]	; (8001d2c <Flash_Clear+0x74>)
 8001ce8:	f7ff fefa 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800EC00);
 8001cec:	4810      	ldr	r0, [pc, #64]	; (8001d30 <Flash_Clear+0x78>)
 8001cee:	f7ff fef7 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800F000);
 8001cf2:	4810      	ldr	r0, [pc, #64]	; (8001d34 <Flash_Clear+0x7c>)
 8001cf4:	f7ff fef4 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800F400);
 8001cf8:	480f      	ldr	r0, [pc, #60]	; (8001d38 <Flash_Clear+0x80>)
 8001cfa:	f7ff fef1 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800F800);
 8001cfe:	480f      	ldr	r0, [pc, #60]	; (8001d3c <Flash_Clear+0x84>)
 8001d00:	f7ff feee 	bl	8001ae0 <Flash_Erase_Page>
	Flash_Erase_Page(0x0800FC00);
 8001d04:	480e      	ldr	r0, [pc, #56]	; (8001d40 <Flash_Clear+0x88>)
 8001d06:	f7ff feeb 	bl	8001ae0 <Flash_Erase_Page>

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800cc00 	.word	0x0800cc00
 8001d14:	0800d000 	.word	0x0800d000
 8001d18:	0800d400 	.word	0x0800d400
 8001d1c:	0800d800 	.word	0x0800d800
 8001d20:	0800dc00 	.word	0x0800dc00
 8001d24:	0800e000 	.word	0x0800e000
 8001d28:	0800e400 	.word	0x0800e400
 8001d2c:	0800e800 	.word	0x0800e800
 8001d30:	0800ec00 	.word	0x0800ec00
 8001d34:	0800f000 	.word	0x0800f000
 8001d38:	0800f400 	.word	0x0800f400
 8001d3c:	0800f800 	.word	0x0800f800
 8001d40:	0800fc00 	.word	0x0800fc00

08001d44 <convertToDecimalDegrees>:

// GPS=======================================================
char latitude[16];
char longitude[16];

double convertToDecimalDegrees(const char *coordinate, char type) {
 8001d44:	b5b0      	push	{r4, r5, r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
	int degrees;
	double minutes;
	double decimalDegrees;

	if (type == 'L') { // Latitude
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	2b4c      	cmp	r3, #76	; 0x4c
 8001d54:	d116      	bne.n	8001d84 <convertToDecimalDegrees+0x40>
		// �??? ?�� ?���??? (?��)
		degrees = (coordinate[0] - '0') * 10 + (coordinate[1] - '0'); // dd
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b30      	subs	r3, #48	; 0x30
 8001d70:	4413      	add	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]
		// ?��머�? �???�??? (�???)
		minutes = atof(coordinate + 2); // mm.mmmm
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3302      	adds	r3, #2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fc71 	bl	8007660 <atof>
 8001d7e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d82:	e027      	b.n	8001dd4 <convertToDecimalDegrees+0x90>
	} else if (type == 'G') { // Longitude
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	2b47      	cmp	r3, #71	; 0x47
 8001d88:	d11d      	bne.n	8001dc6 <convertToDecimalDegrees+0x82>
		// �??? ?�� ?���??? (?��)
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	3b30      	subs	r3, #48	; 0x30
 8001d90:	2264      	movs	r2, #100	; 0x64
 8001d92:	fb02 f103 	mul.w	r1, r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	18ca      	adds	r2, r1, r3
				+ (coordinate[2] - '0'); // ddd
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3302      	adds	r3, #2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3b30      	subs	r3, #48	; 0x30
		degrees = (coordinate[0] - '0') * 100 + (coordinate[1] - '0') * 10
 8001db2:	4413      	add	r3, r2
 8001db4:	61fb      	str	r3, [r7, #28]
		// ?��머�? �???�??? (�???)
		minutes = atof(coordinate + 3); // mm.mmmm
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3303      	adds	r3, #3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fc50 	bl	8007660 <atof>
 8001dc0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001dc4:	e006      	b.n	8001dd4 <convertToDecimalDegrees+0x90>
	} else {
		printf("Invalid type\n");
 8001dc6:	4812      	ldr	r0, [pc, #72]	; (8001e10 <convertToDecimalDegrees+0xcc>)
 8001dc8:	f007 f998 	bl	80090fc <puts>
		return -1;
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <convertToDecimalDegrees+0xd0>)
 8001dd2:	e017      	b.n	8001e04 <convertToDecimalDegrees+0xc0>
	}

	// ?��?��?�� �???�??? 계산
	decimalDegrees = degrees + (minutes / 60.0);
 8001dd4:	69f8      	ldr	r0, [r7, #28]
 8001dd6:	f7fe fb15 	bl	8000404 <__aeabi_i2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <convertToDecimalDegrees+0xd4>)
 8001de4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001de8:	f7fe fca0 	bl	800072c <__aeabi_ddiv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4620      	mov	r0, r4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7fe f9ba 	bl	800016c <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decimalDegrees;
 8001e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800ba88 	.word	0x0800ba88
 8001e14:	bff00000 	.word	0xbff00000
 8001e18:	404e0000 	.word	0x404e0000

08001e1c <parseGPSData>:

void parseGPSData(uint8_t *buffer, uint16_t size) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
	char *nmeaGGA = NULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
	double la, lo;
	//xprintf("%s", (char*)buffer);
	// DMA 버퍼?��?�� $GPGGA 문자?��?�� �?????��
	nmeaGGA = strstr((char*) buffer, "GLL");
 8001e2c:	4938      	ldr	r1, [pc, #224]	; (8001f10 <parseGPSData+0xf4>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f007 fb7c 	bl	800952c <strstr>
 8001e34:	60f8      	str	r0, [r7, #12]
	if (nmeaGGA != NULL) {
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d064      	beq.n	8001f06 <parseGPSData+0xea>
		char *token;

		// NMEA 메시�???? ?��?��?��
		token = strtok(nmeaGGA, ",");
 8001e3c:	4935      	ldr	r1, [pc, #212]	; (8001f14 <parseGPSData+0xf8>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f007 fb18 	bl	8009474 <strtok>
 8001e44:	60b8      	str	r0, [r7, #8]

//        // UTC ?���???? (무시)
//        token = strtok(NULL, ",");

		// ?��?��
		token = strtok(NULL, ",");
 8001e46:	4933      	ldr	r1, [pc, #204]	; (8001f14 <parseGPSData+0xf8>)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f007 fb13 	bl	8009474 <strtok>
 8001e4e:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <parseGPSData+0x56>
			strncpy(latitude, token, sizeof(latitude) - 1);
 8001e56:	220f      	movs	r2, #15
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	482f      	ldr	r0, [pc, #188]	; (8001f18 <parseGPSData+0xfc>)
 8001e5c:	f007 faf6 	bl	800944c <strncpy>
			latitude[sizeof(latitude) - 1] = '\0';
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <parseGPSData+0xfc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	73da      	strb	r2, [r3, #15]
			la = convertToDecimalDegrees(latitude, 'L');
 8001e66:	214c      	movs	r1, #76	; 0x4c
 8001e68:	482b      	ldr	r0, [pc, #172]	; (8001f18 <parseGPSData+0xfc>)
 8001e6a:	f7ff ff6b 	bl	8001d44 <convertToDecimalDegrees>
 8001e6e:	e9c7 0106 	strd	r0, r1, [r7, #24]
		}

		// N/S ?��?��
		token = strtok(NULL, ",");
 8001e72:	4928      	ldr	r1, [pc, #160]	; (8001f14 <parseGPSData+0xf8>)
 8001e74:	2000      	movs	r0, #0
 8001e76:	f007 fafd 	bl	8009474 <strtok>
 8001e7a:	60b8      	str	r0, [r7, #8]

		// 경도
		token = strtok(NULL, ",");
 8001e7c:	4925      	ldr	r1, [pc, #148]	; (8001f14 <parseGPSData+0xf8>)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f007 faf8 	bl	8009474 <strtok>
 8001e84:	60b8      	str	r0, [r7, #8]
		if (token != NULL) {
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <parseGPSData+0x8c>
			strncpy(longitude, token, sizeof(longitude) - 1);
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	4822      	ldr	r0, [pc, #136]	; (8001f1c <parseGPSData+0x100>)
 8001e92:	f007 fadb 	bl	800944c <strncpy>
			longitude[sizeof(longitude) - 1] = '\0';
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <parseGPSData+0x100>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	73da      	strb	r2, [r3, #15]
			lo = convertToDecimalDegrees(longitude, 'G');
 8001e9c:	2147      	movs	r1, #71	; 0x47
 8001e9e:	481f      	ldr	r0, [pc, #124]	; (8001f1c <parseGPSData+0x100>)
 8001ea0:	f7ff ff50 	bl	8001d44 <convertToDecimalDegrees>
 8001ea4:	e9c7 0104 	strd	r0, r1, [r7, #16]
		}

		// E/W ?��?��
		token = strtok(NULL, ",");
 8001ea8:	491a      	ldr	r1, [pc, #104]	; (8001f14 <parseGPSData+0xf8>)
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f007 fae2 	bl	8009474 <strtok>
 8001eb0:	60b8      	str	r0, [r7, #8]

		// ?��?��?�� 결과�???? ?��버그 출력
		printf("\r\nLatitude: %.6f, Longitude: %.6f\r\n", la, lo);
 8001eb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb6:	e9cd 2300 	strd	r2, r3, [sp]
 8001eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <parseGPSData+0x104>)
 8001ec0:	f007 f8b6 	bl	8009030 <iprintf>
		if (la >= 200 || lo >= 200) {
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <parseGPSData+0x108>)
 8001eca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ece:	f7fe fd89 	bl	80009e4 <__aeabi_dcmpge>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <parseGPSData+0xd0>
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <parseGPSData+0x108>)
 8001ede:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee2:	f7fe fd7f 	bl	80009e4 <__aeabi_dcmpge>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <parseGPSData+0xd8>
			GPSLEDFlag = 0;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <parseGPSData+0x10c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e002      	b.n	8001efa <parseGPSData+0xde>
		} else {
			GPSLEDFlag = 1;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <parseGPSData+0x10c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
		}
		CheckGPS(la, lo);
 8001efa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001efe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f02:	f000 f815 	bl	8001f30 <CheckGPS>
	}
}
 8001f06:	bf00      	nop
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0800ba98 	.word	0x0800ba98
 8001f14:	0800ba80 	.word	0x0800ba80
 8001f18:	20002610 	.word	0x20002610
 8001f1c:	20002620 	.word	0x20002620
 8001f20:	0800ba9c 	.word	0x0800ba9c
 8001f24:	40690000 	.word	0x40690000
 8001f28:	200021c8 	.word	0x200021c8
 8001f2c:	00000000 	.word	0x00000000

08001f30 <CheckGPS>:

int checkGPSCnt = 0;

void CheckGPS(double nowLati, double nowLongi) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f3a:	e9c7 2300 	strd	r2, r3, [r7]
	double busStopLati = atof(data[nowIdx].lati);
 8001f3e:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <CheckGPS+0x148>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	011a      	lsls	r2, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	4a4b      	ldr	r2, [pc, #300]	; (800207c <CheckGPS+0x14c>)
 8001f50:	4413      	add	r3, r2
 8001f52:	3302      	adds	r3, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 fb83 	bl	8007660 <atof>
 8001f5a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double busStopLongi = atof(data[nowIdx].longi);
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <CheckGPS+0x148>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	011a      	lsls	r2, r3, #4
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3320      	adds	r3, #32
 8001f6e:	4a43      	ldr	r2, [pc, #268]	; (800207c <CheckGPS+0x14c>)
 8001f70:	4413      	add	r3, r2
 8001f72:	3302      	adds	r3, #2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f005 fb73 	bl	8007660 <atof>
 8001f7a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	//printf("La : %f, La1 : %f\r\n", busStopLati - 0.00009, busStopLati + 0.00009);
	//printf("NowLa : %f, NowLo : %f\r\n", nowLati, nowLongi);
	//printf("First : %d\r\n", nowLati >= (busStopLati - 0.00009)
	//		&& nowLati <= (busStopLati + 0.00009));
	if (nowLati >= (busStopLati - (0.000009 * GPSRange))
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <CheckGPS+0x150>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa3e 	bl	8000404 <__aeabi_i2d>
 8001f88:	a337      	add	r3, pc, #220	; (adr r3, 8002068 <CheckGPS+0x138>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe faa3 	bl	80004d8 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f9a:	f7fe f8e5 	bl	8000168 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa6:	f7fe fd1d 	bl	80009e4 <__aeabi_dcmpge>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d100      	bne.n	8001fb2 <CheckGPS+0x82>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
			checkGPSCnt++;
			//printf("Check!!!!!!!!\r\b");
		}
	}
}
 8001fb0:	e056      	b.n	8002060 <CheckGPS+0x130>
			&& nowLati <= (busStopLati + (0.000009 * GPSRange))) {
 8001fb2:	4b33      	ldr	r3, [pc, #204]	; (8002080 <CheckGPS+0x150>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa24 	bl	8000404 <__aeabi_i2d>
 8001fbc:	a32a      	add	r3, pc, #168	; (adr r3, 8002068 <CheckGPS+0x138>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fa89 	bl	80004d8 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd2:	f7fe f8cb 	bl	800016c <__adddf3>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fde:	f7fe fcf7 	bl	80009d0 <__aeabi_dcmple>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d100      	bne.n	8001fea <CheckGPS+0xba>
}
 8001fe8:	e03a      	b.n	8002060 <CheckGPS+0x130>
		if (nowLongi >= (busStopLongi - (0.000011 * GPSRange))
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <CheckGPS+0x150>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa08 	bl	8000404 <__aeabi_i2d>
 8001ff4:	a31e      	add	r3, pc, #120	; (adr r3, 8002070 <CheckGPS+0x140>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe fa6d 	bl	80004d8 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002006:	f7fe f8af 	bl	8000168 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002012:	f7fe fce7 	bl	80009e4 <__aeabi_dcmpge>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d100      	bne.n	800201e <CheckGPS+0xee>
}
 800201c:	e020      	b.n	8002060 <CheckGPS+0x130>
				&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <CheckGPS+0x150>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe f9ee 	bl	8000404 <__aeabi_i2d>
 8002028:	a311      	add	r3, pc, #68	; (adr r3, 8002070 <CheckGPS+0x140>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fa53 	bl	80004d8 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800203e:	f7fe f895 	bl	800016c <__adddf3>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800204a:	f7fe fcc1 	bl	80009d0 <__aeabi_dcmple>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d100      	bne.n	8002056 <CheckGPS+0x126>
}
 8002054:	e004      	b.n	8002060 <CheckGPS+0x130>
			checkGPSCnt++;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <CheckGPS+0x154>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a09      	ldr	r2, [pc, #36]	; (8002084 <CheckGPS+0x154>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	94ccab3f 	.word	0x94ccab3f
 800206c:	3ee2dfd6 	.word	0x3ee2dfd6
 8002070:	7cfa26a2 	.word	0x7cfa26a2
 8002074:	3ee71194 	.word	0x3ee71194
 8002078:	200021c4 	.word	0x200021c4
 800207c:	200003e0 	.word	0x200003e0
 8002080:	20002608 	.word	0x20002608
 8002084:	20002630 	.word	0x20002630

08002088 <NowBusStop>:
double nowSum = 999;
int idxMin = -1;
void NowBusStop(double nowLati, double nowLongi) {
 8002088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800208c:	b08c      	sub	sp, #48	; 0x30
 800208e:	af00      	add	r7, sp, #0
 8002090:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002094:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double busStopLati = 0;
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double busStopLongi = 0;
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < 150; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b4:	e0dd      	b.n	8002272 <NowBusStop+0x1ea>
		busStopLati = atof(data[i].lati);
 80020b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	011a      	lsls	r2, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	3310      	adds	r3, #16
 80020c4:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <NowBusStop+0x228>)
 80020c6:	4413      	add	r3, r2
 80020c8:	3302      	adds	r3, #2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 fac8 	bl	8007660 <atof>
 80020d0:	e9c7 0108 	strd	r0, r1, [r7, #32]
		busStopLongi = atof(data[i].longi);
 80020d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	011a      	lsls	r2, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	3320      	adds	r3, #32
 80020e2:	4a73      	ldr	r2, [pc, #460]	; (80022b0 <NowBusStop+0x228>)
 80020e4:	4413      	add	r3, r2
 80020e6:	3302      	adds	r3, #2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f005 fab9 	bl	8007660 <atof>
 80020ee:	e9c7 0106 	strd	r0, r1, [r7, #24]
		if (nowLati >= (busStopLati - (0.000009 * GPSRange))
 80020f2:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <NowBusStop+0x22c>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f984 	bl	8000404 <__aeabi_i2d>
 80020fc:	a368      	add	r3, pc, #416	; (adr r3, 80022a0 <NowBusStop+0x218>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe f9e9 	bl	80004d8 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800210e:	f7fe f82b 	bl	8000168 <__aeabi_dsub>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800211a:	f7fe fc63 	bl	80009e4 <__aeabi_dcmpge>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a3 	beq.w	800226c <NowBusStop+0x1e4>
				&& nowLati <= (busStopLati + (0.000009 * GPSRange))) {
 8002126:	4b63      	ldr	r3, [pc, #396]	; (80022b4 <NowBusStop+0x22c>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f96a 	bl	8000404 <__aeabi_i2d>
 8002130:	a35b      	add	r3, pc, #364	; (adr r3, 80022a0 <NowBusStop+0x218>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe f9cf 	bl	80004d8 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002146:	f7fe f811 	bl	800016c <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002152:	f7fe fc3d 	bl	80009d0 <__aeabi_dcmple>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8087 	beq.w	800226c <NowBusStop+0x1e4>
			if (nowLongi >= (busStopLongi - (0.000011 * GPSRange))
 800215e:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <NowBusStop+0x22c>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f94e 	bl	8000404 <__aeabi_i2d>
 8002168:	a34f      	add	r3, pc, #316	; (adr r3, 80022a8 <NowBusStop+0x220>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe f9b3 	bl	80004d8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800217a:	f7fd fff5 	bl	8000168 <__aeabi_dsub>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002186:	f7fe fc2d 	bl	80009e4 <__aeabi_dcmpge>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d06d      	beq.n	800226c <NowBusStop+0x1e4>
					&& nowLongi <= (busStopLongi + (0.000011 * GPSRange))) {
 8002190:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <NowBusStop+0x22c>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f935 	bl	8000404 <__aeabi_i2d>
 800219a:	a343      	add	r3, pc, #268	; (adr r3, 80022a8 <NowBusStop+0x220>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe f99a 	bl	80004d8 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b0:	f7fd ffdc 	bl	800016c <__adddf3>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021bc:	f7fe fc08 	bl	80009d0 <__aeabi_dcmple>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d052      	beq.n	800226c <NowBusStop+0x1e4>
				printf("\r\n%d!!!!!!!!\r\n\r\n", i);
 80021c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021c8:	483b      	ldr	r0, [pc, #236]	; (80022b8 <NowBusStop+0x230>)
 80021ca:	f006 ff31 	bl	8009030 <iprintf>
				if (nowSum
						> fabs(nowLati - busStopLati)
 80021ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d6:	f7fd ffc7 	bl	8000168 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4614      	mov	r4, r2
 80021e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
								+ fabs(nowLongi - busStopLongi)) {
 80021e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ec:	f7fd ffbc 	bl	8000168 <__aeabi_dsub>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4690      	mov	r8, r2
 80021f6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80021fa:	4642      	mov	r2, r8
 80021fc:	464b      	mov	r3, r9
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fd ffb3 	bl	800016c <__adddf3>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
						> fabs(nowLati - busStopLati)
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <NowBusStop+0x234>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (nowSum
 8002214:	f7fe fbd2 	bl	80009bc <__aeabi_dcmplt>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d100      	bne.n	8002220 <NowBusStop+0x198>
					nowSum = fabs(nowLati - busStopLati)
							+ fabs(nowLongi - busStopLongi);
					idxMin = i;
				}

				break;
 800221e:	e02c      	b.n	800227a <NowBusStop+0x1f2>
					nowSum = fabs(nowLati - busStopLati)
 8002220:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002224:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002228:	f7fd ff9e 	bl	8000168 <__aeabi_dsub>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4692      	mov	sl, r2
 8002232:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
							+ fabs(nowLongi - busStopLongi);
 8002236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800223a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223e:	f7fd ff93 	bl	8000168 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	603a      	str	r2, [r7, #0]
 8002248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002252:	4650      	mov	r0, sl
 8002254:	4659      	mov	r1, fp
 8002256:	f7fd ff89 	bl	800016c <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
					nowSum = fabs(nowLati - busStopLati)
 800225e:	4917      	ldr	r1, [pc, #92]	; (80022bc <NowBusStop+0x234>)
 8002260:	e9c1 2300 	strd	r2, r3, [r1]
					idxMin = i;
 8002264:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <NowBusStop+0x238>)
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	6013      	str	r3, [r2, #0]
				break;
 800226a:	e006      	b.n	800227a <NowBusStop+0x1f2>
	for (int i = 0; i < 150; i++) {
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	3301      	adds	r3, #1
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	2b95      	cmp	r3, #149	; 0x95
 8002276:	f77f af1e 	ble.w	80020b6 <NowBusStop+0x2e>
			}
		}
	}
	if (idxMin != -1) {
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <NowBusStop+0x238>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d006      	beq.n	8002292 <NowBusStop+0x20a>
		nowIdx = idxMin;
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <NowBusStop+0x238>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <NowBusStop+0x23c>)
 800228a:	6013      	str	r3, [r2, #0]
		NowBusStopFlag = 1;
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <NowBusStop+0x240>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
	}
}
 8002292:	bf00      	nop
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229c:	f3af 8000 	nop.w
 80022a0:	94ccab3f 	.word	0x94ccab3f
 80022a4:	3ee2dfd6 	.word	0x3ee2dfd6
 80022a8:	7cfa26a2 	.word	0x7cfa26a2
 80022ac:	3ee71194 	.word	0x3ee71194
 80022b0:	200003e0 	.word	0x200003e0
 80022b4:	20002608 	.word	0x20002608
 80022b8:	0800bac0 	.word	0x0800bac0
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000008 	.word	0x20000008
 80022c4:	200021c4 	.word	0x200021c4
 80022c8:	200021c9 	.word	0x200021c9

080022cc <SetMode>:
uint8_t LoRaRxBuffer[LoRa_RX_BUFFER_SIZE]; // ?��?�� ?��?��?���??? ???��?�� 버퍼
volatile uint8_t LoRaRxEnd = 0; // ?��?��?�� ?��?�� ?���??? ?��?���???
uint8_t LoRaRxData[11]; // ?��?�� ?��?��?���??? ???��?�� 버퍼
uint8_t LoRaLen = 0;

void SetMode(uint8_t mode) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d837      	bhi.n	800234c <SetMode+0x80>
 80022dc:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <SetMode+0x18>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	0800230b 	.word	0x0800230b
 80022ec:	08002321 	.word	0x08002321
 80022f0:	08002337 	.word	0x08002337
	case 0:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2101      	movs	r1, #1
 80022f8:	4816      	ldr	r0, [pc, #88]	; (8002354 <SetMode+0x88>)
 80022fa:	f002 fed8 	bl	80050ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	2102      	movs	r1, #2
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <SetMode+0x88>)
 8002304:	f002 fed3 	bl	80050ae <HAL_GPIO_WritePin>
		break;
 8002308:	e020      	b.n	800234c <SetMode+0x80>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2101      	movs	r1, #1
 800230e:	4811      	ldr	r0, [pc, #68]	; (8002354 <SetMode+0x88>)
 8002310:	f002 fecd 	bl	80050ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2102      	movs	r1, #2
 8002318:	480e      	ldr	r0, [pc, #56]	; (8002354 <SetMode+0x88>)
 800231a:	f002 fec8 	bl	80050ae <HAL_GPIO_WritePin>
		break;
 800231e:	e015      	b.n	800234c <SetMode+0x80>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	480b      	ldr	r0, [pc, #44]	; (8002354 <SetMode+0x88>)
 8002326:	f002 fec2 	bl	80050ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 800232a:	2201      	movs	r2, #1
 800232c:	2102      	movs	r1, #2
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <SetMode+0x88>)
 8002330:	f002 febd 	bl	80050ae <HAL_GPIO_WritePin>
		break;
 8002334:	e00a      	b.n	800234c <SetMode+0x80>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2101      	movs	r1, #1
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <SetMode+0x88>)
 800233c:	f002 feb7 	bl	80050ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LORA_M1_Pin, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	2102      	movs	r1, #2
 8002344:	4803      	ldr	r0, [pc, #12]	; (8002354 <SetMode+0x88>)
 8002346:	f002 feb2 	bl	80050ae <HAL_GPIO_WritePin>
		break;
 800234a:	bf00      	nop
	}
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010800 	.word	0x40010800

08002358 <LoRa_SendData>:

void LoRa_SendData(uint8_t *data, uint16_t length) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
	// AUX ???�� HIGH ?��?��?���??? ?��?��?��?�� 모듈?�� �???비되?��?���??? ?��?��
	while (HAL_GPIO_ReadPin(LORA_AUX_GPIO_Port, LORA_AUX_Pin) == GPIO_PIN_RESET)
 8002364:	bf00      	nop
 8002366:	2110      	movs	r1, #16
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <LoRa_SendData+0x34>)
 800236a:	f002 fe89 	bl	8005080 <HAL_GPIO_ReadPin>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f8      	beq.n	8002366 <LoRa_SendData+0xe>
		;

	// ?��?��?�� ?��?��
	HAL_UART_Transmit(&huart2, data, length, HAL_MAX_DELAY);
 8002374:	887a      	ldrh	r2, [r7, #2]
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <LoRa_SendData+0x38>)
 800237e:	f004 f909 	bl	8006594 <HAL_UART_Transmit>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010800 	.word	0x40010800
 8002390:	200002c8 	.word	0x200002c8

08002394 <parseLora>:
int help = 0;
int routeNo = 0;
int busNM = 0;
int arsID = 0;

void parseLora(uint8_t *loraData) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

	if (loraData[1] == '0') {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3301      	adds	r3, #1
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b30      	cmp	r3, #48	; 0x30
 80023a4:	d169      	bne.n	800247a <parseLora+0xe6>
		char *token;

		token = strtok(loraData, "@");
 80023a6:	495b      	ldr	r1, [pc, #364]	; (8002514 <parseLora+0x180>)
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f007 f863 	bl	8009474 <strtok>
 80023ae:	60b8      	str	r0, [r7, #8]
		arsID = atoi(token);
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f005 f958 	bl	8007666 <atoi>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a57      	ldr	r2, [pc, #348]	; (8002518 <parseLora+0x184>)
 80023ba:	6013      	str	r3, [r2, #0]
		printf("\r\narsID : %d!!!!!!\r\n\r\n", arsID);
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <parseLora+0x184>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4856      	ldr	r0, [pc, #344]	; (800251c <parseLora+0x188>)
 80023c4:	f006 fe34 	bl	8009030 <iprintf>

		for (int i = 0; i < 150; i++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e051      	b.n	8002472 <parseLora+0xde>
			if (atoi(data[i].busRouteno) != routeNo) {
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	011a      	lsls	r2, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	4a51      	ldr	r2, [pc, #324]	; (8002520 <parseLora+0x18c>)
 80023dc:	4413      	add	r3, r2
 80023de:	3305      	adds	r3, #5
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 f940 	bl	8007666 <atoi>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <parseLora+0x190>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d004      	beq.n	80023fa <parseLora+0x66>
				printf("\r\nNOT ROUTENO, %d\r\n\r\n",i);
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	484d      	ldr	r0, [pc, #308]	; (8002528 <parseLora+0x194>)
 80023f4:	f006 fe1c 	bl	8009030 <iprintf>
				break;
 80023f8:	e087      	b.n	800250a <parseLora+0x176>
			}
			if (atoi(data[i].busNM) != busNM) {
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	011a      	lsls	r2, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	4a46      	ldr	r2, [pc, #280]	; (8002520 <parseLora+0x18c>)
 8002408:	4413      	add	r3, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f005 f92b 	bl	8007666 <atoi>
 8002410:	4602      	mov	r2, r0
 8002412:	4b46      	ldr	r3, [pc, #280]	; (800252c <parseLora+0x198>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d003      	beq.n	8002422 <parseLora+0x8e>
				printf("\r\nNOT busNM\r\n\r\n");
 800241a:	4845      	ldr	r0, [pc, #276]	; (8002530 <parseLora+0x19c>)
 800241c:	f006 fe6e 	bl	80090fc <puts>
				break;
 8002420:	e073      	b.n	800250a <parseLora+0x176>
			}
			if (atoi(data[i].busStopID) == arsID) {
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	011a      	lsls	r2, r3, #4
 800242c:	4413      	add	r3, r2
 800242e:	3308      	adds	r3, #8
 8002430:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <parseLora+0x18c>)
 8002432:	4413      	add	r3, r2
 8002434:	3302      	adds	r3, #2
 8002436:	4618      	mov	r0, r3
 8002438:	f005 f915 	bl	8007666 <atoi>
 800243c:	4602      	mov	r2, r0
 800243e:	4b36      	ldr	r3, [pc, #216]	; (8002518 <parseLora+0x184>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d112      	bne.n	800246c <parseLora+0xd8>
				data[i].isPeople = help;
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <parseLora+0x1a0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b2d8      	uxtb	r0, r3
 800244c:	4934      	ldr	r1, [pc, #208]	; (8002520 <parseLora+0x18c>)
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	011a      	lsls	r2, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	440b      	add	r3, r1
 800245c:	3332      	adds	r3, #50	; 0x32
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
				printf("\r\n%d\r\n\r\n", i);
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	4834      	ldr	r0, [pc, #208]	; (8002538 <parseLora+0x1a4>)
 8002466:	f006 fde3 	bl	8009030 <iprintf>
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
//				HAL_Delay(100);
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
				break;
 800246a:	e04e      	b.n	800250a <parseLora+0x176>
		for (int i = 0; i < 150; i++) {
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b95      	cmp	r3, #149	; 0x95
 8002476:	ddaa      	ble.n	80023ce <parseLora+0x3a>
				+ (loraData[8] - '0') * 10 + (loraData[9] - '0');
		printf("\r\nhelp : %d, routeNo : %d, busNM : %d\r\n\r\n", help, routeNo,
				busNM);
	}

}
 8002478:	e047      	b.n	800250a <parseLora+0x176>
		help = loraData[0] - '0';
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	3b30      	subs	r3, #48	; 0x30
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <parseLora+0x1a0>)
 8002482:	6013      	str	r3, [r2, #0]
		routeNo = (loraData[2] - '0') * 100 + (loraData[3] - '0') * 10
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3302      	adds	r3, #2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3b30      	subs	r3, #48	; 0x30
 800248c:	2264      	movs	r2, #100	; 0x64
 800248e:	fb02 f103 	mul.w	r1, r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3303      	adds	r3, #3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	18ca      	adds	r2, r1, r3
				+ (loraData[4] - '0');
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3b30      	subs	r3, #48	; 0x30
 80024ae:	4413      	add	r3, r2
		routeNo = (loraData[2] - '0') * 100 + (loraData[3] - '0') * 10
 80024b0:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <parseLora+0x190>)
 80024b2:	6013      	str	r3, [r2, #0]
		busNM = (loraData[6] - '0') * 1000 + (loraData[7] - '0') * 100
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3306      	adds	r3, #6
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3b30      	subs	r3, #48	; 0x30
 80024bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c0:	fb03 f202 	mul.w	r2, r3, r2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3307      	adds	r3, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	3b30      	subs	r3, #48	; 0x30
 80024cc:	2164      	movs	r1, #100	; 0x64
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	18d1      	adds	r1, r2, r3
				+ (loraData[8] - '0') * 10 + (loraData[9] - '0');
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3308      	adds	r3, #8
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	18ca      	adds	r2, r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3309      	adds	r3, #9
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	3b30      	subs	r3, #48	; 0x30
 80024f0:	4413      	add	r3, r2
		busNM = (loraData[6] - '0') * 1000 + (loraData[7] - '0') * 100
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <parseLora+0x198>)
 80024f4:	6013      	str	r3, [r2, #0]
		printf("\r\nhelp : %d, routeNo : %d, busNM : %d\r\n\r\n", help, routeNo,
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <parseLora+0x1a0>)
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <parseLora+0x190>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <parseLora+0x198>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	480e      	ldr	r0, [pc, #56]	; (800253c <parseLora+0x1a8>)
 8002504:	f006 fd94 	bl	8009030 <iprintf>
}
 8002508:	e7ff      	b.n	800250a <parseLora+0x176>
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	0800bad4 	.word	0x0800bad4
 8002518:	20002650 	.word	0x20002650
 800251c:	0800bad8 	.word	0x0800bad8
 8002520:	200003e0 	.word	0x200003e0
 8002524:	20002648 	.word	0x20002648
 8002528:	0800baf0 	.word	0x0800baf0
 800252c:	2000264c 	.word	0x2000264c
 8002530:	0800bb08 	.word	0x0800bb08
 8002534:	20002644 	.word	0x20002644
 8002538:	0800bb18 	.word	0x0800bb18
 800253c:	0800bb24 	.word	0x0800bb24

08002540 <_write>:
uint8_t dataReceived = 0;

uint8_t modeFlag = 0;
uint8_t pushingFlag = 0;

int _write(int file, unsigned char *p, int len) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
	if (UART_Print_Port == 0) {
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <_write+0x5c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <_write+0x24>
		HAL_UART_Transmit(&huart1, p, len, 10);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	b29a      	uxth	r2, r3
 8002558:	230a      	movs	r3, #10
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	4810      	ldr	r0, [pc, #64]	; (80025a0 <_write+0x60>)
 800255e:	f004 f819 	bl	8006594 <HAL_UART_Transmit>
 8002562:	e016      	b.n	8002592 <_write+0x52>
	} else if (UART_Print_Port == 1) {
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <_write+0x5c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <_write+0x3c>
		HAL_UART_Transmit(&huart2, p, len, 10);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	b29a      	uxth	r2, r3
 8002570:	230a      	movs	r3, #10
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	480b      	ldr	r0, [pc, #44]	; (80025a4 <_write+0x64>)
 8002576:	f004 f80d 	bl	8006594 <HAL_UART_Transmit>
 800257a:	e00a      	b.n	8002592 <_write+0x52>
	} else if (UART_Print_Port == 2) {
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <_write+0x5c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d106      	bne.n	8002592 <_write+0x52>
		HAL_UART_Transmit(&huart3, p, len, 10);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	b29a      	uxth	r2, r3
 8002588:	230a      	movs	r3, #10
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	4806      	ldr	r0, [pc, #24]	; (80025a8 <_write+0x68>)
 800258e:	f004 f801 	bl	8006594 <HAL_UART_Transmit>
	}
	return len;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20002654 	.word	0x20002654
 80025a0:	20000280 	.word	0x20000280
 80025a4:	200002c8 	.word	0x200002c8
 80025a8:	20000310 	.word	0x20000310

080025ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b0:	b09e      	sub	sp, #120	; 0x78
 80025b2:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 ffaa 	bl	800450c <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_Delay(1000);
 80025b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025bc:	f002 f808 	bl	80045d0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c0:	f000 fcd0 	bl	8002f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c4:	f000 fde0 	bl	8003188 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c8:	f000 fdb8 	bl	800313c <MX_DMA_Init>
  MX_I2C1_Init();
 80025cc:	f000 fd0a 	bl	8002fe4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025d0:	f000 fd36 	bl	8003040 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d4:	f000 fd5e 	bl	8003094 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d8:	f000 fd86 	bl	80030e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart1, UART1_Rx_Buffer, 20);
 80025dc:	2214      	movs	r2, #20
 80025de:	49b1      	ldr	r1, [pc, #708]	; (80028a4 <main+0x2f8>)
 80025e0:	48b1      	ldr	r0, [pc, #708]	; (80028a8 <main+0x2fc>)
 80025e2:	f004 f87f 	bl	80066e4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
 80025e6:	220a      	movs	r2, #10
 80025e8:	49b0      	ldr	r1, [pc, #704]	; (80028ac <main+0x300>)
 80025ea:	48b1      	ldr	r0, [pc, #708]	; (80028b0 <main+0x304>)
 80025ec:	f004 f855 	bl	800669a <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&huart3, DataBuffer, RxBuffer_SIZE);
 80025f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f4:	49af      	ldr	r1, [pc, #700]	; (80028b4 <main+0x308>)
 80025f6:	48b0      	ldr	r0, [pc, #704]	; (80028b8 <main+0x30c>)
 80025f8:	f004 f874 	bl	80066e4 <HAL_UART_Receive_DMA>
	setvbuf(stdout, NULL, _IONBF, 0);
 80025fc:	4baf      	ldr	r3, [pc, #700]	; (80028bc <main+0x310>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6898      	ldr	r0, [r3, #8]
 8002602:	2300      	movs	r3, #0
 8002604:	2202      	movs	r2, #2
 8002606:	2100      	movs	r1, #0
 8002608:	f006 fd80 	bl	800910c <setvbuf>
	//	printf("HELL WORLD\r\n");
	LCD_Init(LCD_ADDR);
 800260c:	204e      	movs	r0, #78	; 0x4e
 800260e:	f7fe feab 	bl	8001368 <LCD_Init>
	LCD_SET_CGRAM(LCD_ADDR, 0x00, BNumber);
 8002612:	4aab      	ldr	r2, [pc, #684]	; (80028c0 <main+0x314>)
 8002614:	2100      	movs	r1, #0
 8002616:	204e      	movs	r0, #78	; 0x4e
 8002618:	f7fe fedd 	bl	80013d6 <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x01, BUp);
 800261c:	4aa9      	ldr	r2, [pc, #676]	; (80028c4 <main+0x318>)
 800261e:	2101      	movs	r1, #1
 8002620:	204e      	movs	r0, #78	; 0x4e
 8002622:	f7fe fed8 	bl	80013d6 <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x02, BDown);
 8002626:	4aa8      	ldr	r2, [pc, #672]	; (80028c8 <main+0x31c>)
 8002628:	2102      	movs	r1, #2
 800262a:	204e      	movs	r0, #78	; 0x4e
 800262c:	f7fe fed3 	bl	80013d6 <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x03, BRight);
 8002630:	4aa6      	ldr	r2, [pc, #664]	; (80028cc <main+0x320>)
 8002632:	2103      	movs	r1, #3
 8002634:	204e      	movs	r0, #78	; 0x4e
 8002636:	f7fe fece 	bl	80013d6 <LCD_SET_CGRAM>
	LCD_SET_CGRAM(LCD_ADDR, 0x04, BLeft);
 800263a:	4aa5      	ldr	r2, [pc, #660]	; (80028d0 <main+0x324>)
 800263c:	2104      	movs	r1, #4
 800263e:	204e      	movs	r0, #78	; 0x4e
 8002640:	f7fe fec9 	bl	80013d6 <LCD_SET_CGRAM>
//		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_RIGHT);
//	}
//	LCD_SendData(LCD_ADDR, 1);

	//flash
	uint32_t GPSRangeFlashAddress = 0x0800C400; // ???��?�� ?��?��?�� 메모�????? 주소
 8002644:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <main+0x328>)
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ModeFlashAddress = 0x0800CB00;  // ???��?�� ?��?��?�� 메모�????? 주소
 8002648:	4ba3      	ldr	r3, [pc, #652]	; (80028d8 <main+0x32c>)
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t DataFlashAddress = 0x0800CC00; // ???��?�� ?��?��?�� 메모�????? 주소
 800264c:	4ba3      	ldr	r3, [pc, #652]	; (80028dc <main+0x330>)
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t InfoModeFlag = Flash_Read(ModeFlashAddress) & 0x0000FFFF;
 8002650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002652:	f7ff fa39 	bl	8001ac8 <Flash_Read>
 8002656:	4603      	mov	r3, r0
 8002658:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	GPSRange = Flash_Read(GPSRangeFlashAddress) & 0x0000FFFF;
 800265c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800265e:	f7ff fa33 	bl	8001ac8 <Flash_Read>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <main+0x334>)
 8002668:	801a      	strh	r2, [r3, #0]
	printf("Range : %d!!!!!!!!!!!!!!!!\r\n", GPSRange);
 800266a:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <main+0x334>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	489c      	ldr	r0, [pc, #624]	; (80028e4 <main+0x338>)
 8002672:	f006 fcdd 	bl	8009030 <iprintf>

	printf("ModeFlag:%d", InfoModeFlag);
 8002676:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800267a:	4619      	mov	r1, r3
 800267c:	489a      	ldr	r0, [pc, #616]	; (80028e8 <main+0x33c>)
 800267e:	f006 fcd7 	bl	8009030 <iprintf>
	if (InfoModeFlag >= 1) {
 8002682:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <main+0xe8>
		DataFlashAddress = CallData(DataFlashAddress);
 800268a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800268c:	f7ff fac8 	bl	8001c20 <CallData>
 8002690:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002692:	e023      	b.n	80026dc <main+0x130>
//		strncpy(data[1].busStopID, "44444", sizeof(data[1].busStopID) - 1);
//		strncpy(data[1].lati, "36.391567112", sizeof(data[1].lati) - 1);
//		strncpy(data[1].longi, "127.362770", sizeof(data[1].longi) - 1);

		//LCD_Write_Info(data[nowIdx], data[nowIdx + 1]);
	} else if (InfoModeFlag == 0) {
 8002694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002698:	2b00      	cmp	r3, #0
 800269a:	d114      	bne.n	80026c6 <main+0x11a>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 800269c:	2101      	movs	r1, #1
 800269e:	204e      	movs	r0, #78	; 0x4e
 80026a0:	f7fe fe3e 	bl	8001320 <LCD_SendCommand>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	204e      	movs	r0, #78	; 0x4e
 80026a8:	f7fe fe3a 	bl	8001320 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "DATA DOWNLOAD");
 80026ac:	498f      	ldr	r1, [pc, #572]	; (80028ec <main+0x340>)
 80026ae:	204e      	movs	r0, #78	; 0x4e
 80026b0:	f7fe fe77 	bl	80013a2 <LCD_SendString>
		LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 80026b4:	21c0      	movs	r1, #192	; 0xc0
 80026b6:	204e      	movs	r0, #78	; 0x4e
 80026b8:	f7fe fe32 	bl	8001320 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "MODE");
 80026bc:	498c      	ldr	r1, [pc, #560]	; (80028f0 <main+0x344>)
 80026be:	204e      	movs	r0, #78	; 0x4e
 80026c0:	f7fe fe6f 	bl	80013a2 <LCD_SendString>
 80026c4:	e00a      	b.n	80026dc <main+0x130>
	} else {
		InfoModeFlag = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		Flash_Unlock();
 80026cc:	f7ff f842 	bl	8001754 <Flash_Unlock>
		Flash_Write(ModeFlashAddress, 0);
 80026d0:	2100      	movs	r1, #0
 80026d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026d4:	f7ff f85e 	bl	8001794 <Flash_Write>
		Flash_Lock();
 80026d8:	f7ff f84e 	bl	8001778 <Flash_Lock>
	}

//	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) RxBuffer, RxBuffer_SIZE);
//	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
	int Serialcnt = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	647b      	str	r3, [r7, #68]	; 0x44

	//LoRa ================================================================
	SetMode(0);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff fdf3 	bl	80022cc <SetMode>

	//FW===================================================================
	modeFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80026e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ea:	4882      	ldr	r0, [pc, #520]	; (80028f4 <main+0x348>)
 80026ec:	f002 fcc8 	bl	8005080 <HAL_GPIO_ReadPin>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b80      	ldr	r3, [pc, #512]	; (80028f8 <main+0x34c>)
 80026f6:	701a      	strb	r2, [r3, #0]

	GPSTick = HAL_GetTick();
 80026f8:	f001 ff60 	bl	80045bc <HAL_GetTick>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a7f      	ldr	r2, [pc, #508]	; (80028fc <main+0x350>)
 8002700:	6013      	str	r3, [r2, #0]
	LoRaTick = HAL_GetTick();
 8002702:	f001 ff5b 	bl	80045bc <HAL_GetTick>
 8002706:	4603      	mov	r3, r0
 8002708:	4a7d      	ldr	r2, [pc, #500]	; (8002900 <main+0x354>)
 800270a:	6013      	str	r3, [r2, #0]
	GPSFIXTick = HAL_GetTick();
 800270c:	f001 ff56 	bl	80045bc <HAL_GetTick>
 8002710:	4603      	mov	r3, r0
 8002712:	4a7c      	ldr	r2, [pc, #496]	; (8002904 <main+0x358>)
 8002714:	6013      	str	r3, [r2, #0]
	ArriveTick = HAL_GetTick();
 8002716:	f001 ff51 	bl	80045bc <HAL_GetTick>
 800271a:	4603      	mov	r3, r0
 800271c:	4a7a      	ldr	r2, [pc, #488]	; (8002908 <main+0x35c>)
 800271e:	6013      	str	r3, [r2, #0]

	uint8_t IOMode = 0; //0 : In, 1 : Out
 8002720:	2300      	movs	r3, #0
 8002722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ArriveFlag = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
//
//
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9); //Debug LED
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED

		if (!modeFlag) { //Local Mode
 800272c:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <main+0x34c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 8323 	bne.w	8002d7c <main+0x7d0>
			if (InfoModeFlag >= 1) {
 8002736:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <main+0x196>
				notGPSLCD();
 800273e:	f7fe ff49 	bl	80015d4 <notGPSLCD>
			}
			while (1) {
				if (UART1_Rx_End) {
 8002742:	4b72      	ldr	r3, [pc, #456]	; (800290c <main+0x360>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8109 	beq.w	800295e <main+0x3b2>
					//printf("Echo: %s\r\n", UART1_Rx_Buffer);
					if (!strncmp(UART1_Rx_Buffer, "Input", 5)) {
 800274c:	2205      	movs	r2, #5
 800274e:	4970      	ldr	r1, [pc, #448]	; (8002910 <main+0x364>)
 8002750:	4854      	ldr	r0, [pc, #336]	; (80028a4 <main+0x2f8>)
 8002752:	f006 fe69 	bl	8009428 <strncmp>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d129      	bne.n	80027b0 <main+0x204>
						dataIdx = 0;
 800275c:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <main+0x368>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
						DataFlashAddress = 0x0800CC00;
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <main+0x330>)
 8002764:	64fb      	str	r3, [r7, #76]	; 0x4c
						Flash_Erase_Page(ModeFlashAddress);
 8002766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002768:	f7ff f9ba 	bl	8001ae0 <Flash_Erase_Page>
						Flash_Unlock();
 800276c:	f7fe fff2 	bl	8001754 <Flash_Unlock>
						Flash_Write(ModeFlashAddress, (uint8_t) 0);
 8002770:	2100      	movs	r1, #0
 8002772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002774:	f7ff f80e 	bl	8001794 <Flash_Write>
						Flash_Lock();
 8002778:	f7fe fffe 	bl	8001778 <Flash_Lock>
						Flash_Clear();
 800277c:	f7ff fa9c 	bl	8001cb8 <Flash_Clear>
						InfoModeFlag = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
						LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 8002786:	2101      	movs	r1, #1
 8002788:	204e      	movs	r0, #78	; 0x4e
 800278a:	f7fe fdc9 	bl	8001320 <LCD_SendCommand>
						LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	204e      	movs	r0, #78	; 0x4e
 8002792:	f7fe fdc5 	bl	8001320 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "DATA DOWNLOAD");
 8002796:	4955      	ldr	r1, [pc, #340]	; (80028ec <main+0x340>)
 8002798:	204e      	movs	r0, #78	; 0x4e
 800279a:	f7fe fe02 	bl	80013a2 <LCD_SendString>
						LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 800279e:	21c0      	movs	r1, #192	; 0xc0
 80027a0:	204e      	movs	r0, #78	; 0x4e
 80027a2:	f7fe fdbd 	bl	8001320 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "MODE");
 80027a6:	4952      	ldr	r1, [pc, #328]	; (80028f0 <main+0x344>)
 80027a8:	204e      	movs	r0, #78	; 0x4e
 80027aa:	f7fe fdfa 	bl	80013a2 <LCD_SendString>
 80027ae:	e06d      	b.n	800288c <main+0x2e0>
					} else if (!strncmp(UART1_Rx_Buffer, "OutPut", 6)) {
 80027b0:	2206      	movs	r2, #6
 80027b2:	4959      	ldr	r1, [pc, #356]	; (8002918 <main+0x36c>)
 80027b4:	483b      	ldr	r0, [pc, #236]	; (80028a4 <main+0x2f8>)
 80027b6:	f006 fe37 	bl	8009428 <strncmp>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d122      	bne.n	8002806 <main+0x25a>
						Flash_Erase_Page(ModeFlashAddress);
 80027c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c2:	f7ff f98d 	bl	8001ae0 <Flash_Erase_Page>
						Flash_Unlock();
 80027c6:	f7fe ffc5 	bl	8001754 <Flash_Unlock>
						Flash_Write(ModeFlashAddress, 1);
 80027ca:	2101      	movs	r1, #1
 80027cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ce:	f7fe ffe1 	bl	8001794 <Flash_Write>
						Flash_Lock();
 80027d2:	f7fe ffd1 	bl	8001778 <Flash_Lock>
						InfoModeFlag = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
						LCD_SendCommand(LCD_ADDR, CMD_LCD_CLEAR); //Clear
 80027dc:	2101      	movs	r1, #1
 80027de:	204e      	movs	r0, #78	; 0x4e
 80027e0:	f7fe fd9e 	bl	8001320 <LCD_SendCommand>
						LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_1);
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	204e      	movs	r0, #78	; 0x4e
 80027e8:	f7fe fd9a 	bl	8001320 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "DATA DOWNLOAD");
 80027ec:	493f      	ldr	r1, [pc, #252]	; (80028ec <main+0x340>)
 80027ee:	204e      	movs	r0, #78	; 0x4e
 80027f0:	f7fe fdd7 	bl	80013a2 <LCD_SendString>
						LCD_SendCommand(LCD_ADDR, CMD_LCD_CURSOR_LINE_2);
 80027f4:	21c0      	movs	r1, #192	; 0xc0
 80027f6:	204e      	movs	r0, #78	; 0x4e
 80027f8:	f7fe fd92 	bl	8001320 <LCD_SendCommand>
						LCD_SendString(LCD_ADDR, "SUCCESS");
 80027fc:	4947      	ldr	r1, [pc, #284]	; (800291c <main+0x370>)
 80027fe:	204e      	movs	r0, #78	; 0x4e
 8002800:	f7fe fdcf 	bl	80013a2 <LCD_SendString>
 8002804:	e042      	b.n	800288c <main+0x2e0>
					} else if ((!strncmp(UART1_Rx_Buffer, "Data", 4)
 8002806:	2204      	movs	r2, #4
 8002808:	4945      	ldr	r1, [pc, #276]	; (8002920 <main+0x374>)
 800280a:	4826      	ldr	r0, [pc, #152]	; (80028a4 <main+0x2f8>)
 800280c:	f006 fe0c 	bl	8009428 <strncmp>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <main+0x278>
							|| !strncmp(UART1_Rx_Buffer, "d", 1))
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <main+0x2f8>)
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <main+0x378>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10c      	bne.n	800283e <main+0x292>
							&& InfoModeFlag == 0) {
 8002824:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <main+0x292>
						DataFlashAddress = Flash_Write_Data(DataFlashAddress,
 800282c:	491d      	ldr	r1, [pc, #116]	; (80028a4 <main+0x2f8>)
 800282e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002830:	f7ff f812 	bl	8001858 <Flash_Write_Data>
 8002834:	64f8      	str	r0, [r7, #76]	; 0x4c
								UART1_Rx_Buffer);
						//printf("Data\r\n");
						printf("N\r\n");
 8002836:	483c      	ldr	r0, [pc, #240]	; (8002928 <main+0x37c>)
 8002838:	f006 fc60 	bl	80090fc <puts>
 800283c:	e026      	b.n	800288c <main+0x2e0>
					} else if (!strncmp(UART1_Rx_Buffer, "range", 5)) {
 800283e:	2205      	movs	r2, #5
 8002840:	493a      	ldr	r1, [pc, #232]	; (800292c <main+0x380>)
 8002842:	4818      	ldr	r0, [pc, #96]	; (80028a4 <main+0x2f8>)
 8002844:	f006 fdf0 	bl	8009428 <strncmp>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11e      	bne.n	800288c <main+0x2e0>
						char *token;

						token = strtok(UART1_Rx_Buffer, ",");
 800284e:	4938      	ldr	r1, [pc, #224]	; (8002930 <main+0x384>)
 8002850:	4814      	ldr	r0, [pc, #80]	; (80028a4 <main+0x2f8>)
 8002852:	f006 fe0f 	bl	8009474 <strtok>
 8002856:	61f8      	str	r0, [r7, #28]
						token = strtok(NULL, "!");
 8002858:	4936      	ldr	r1, [pc, #216]	; (8002934 <main+0x388>)
 800285a:	2000      	movs	r0, #0
 800285c:	f006 fe0a 	bl	8009474 <strtok>
 8002860:	61f8      	str	r0, [r7, #28]
						GPSRange = atoi(token);
 8002862:	69f8      	ldr	r0, [r7, #28]
 8002864:	f004 feff 	bl	8007666 <atoi>
 8002868:	4603      	mov	r3, r0
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <main+0x334>)
 800286e:	801a      	strh	r2, [r3, #0]

						Flash_Erase_Page(GPSRangeFlashAddress);
 8002870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002872:	f7ff f935 	bl	8001ae0 <Flash_Erase_Page>
						Flash_Unlock();
 8002876:	f7fe ff6d 	bl	8001754 <Flash_Unlock>
						Flash_Write(GPSRangeFlashAddress, (uint8_t) GPSRange);
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <main+0x334>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002884:	f7fe ff86 	bl	8001794 <Flash_Write>
						Flash_Lock();
 8002888:	f7fe ff76 	bl	8001778 <Flash_Lock>
					}
					HAL_UART_Transmit(&huart1, UART1_Rx_Buffer, UART1_Len, 2);
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <main+0x38c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b29a      	uxth	r2, r3
 8002892:	2302      	movs	r3, #2
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <main+0x2f8>)
 8002896:	4804      	ldr	r0, [pc, #16]	; (80028a8 <main+0x2fc>)
 8002898:	f003 fe7c 	bl	8006594 <HAL_UART_Transmit>
					for (int i = 0; i < 50; i++) {
 800289c:	2300      	movs	r3, #0
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a0:	e054      	b.n	800294c <main+0x3a0>
 80028a2:	bf00      	nop
 80028a4:	20002658 	.word	0x20002658
 80028a8:	20000280 	.word	0x20000280
 80028ac:	20002638 	.word	0x20002638
 80028b0:	200002c8 	.word	0x200002c8
 80028b4:	200023d0 	.word	0x200023d0
 80028b8:	20000310 	.word	0x20000310
 80028bc:	20000208 	.word	0x20000208
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	20000014 	.word	0x20000014
 80028c8:	2000001c 	.word	0x2000001c
 80028cc:	20000024 	.word	0x20000024
 80028d0:	2000002c 	.word	0x2000002c
 80028d4:	0800c400 	.word	0x0800c400
 80028d8:	0800cb00 	.word	0x0800cb00
 80028dc:	0800cc00 	.word	0x0800cc00
 80028e0:	20002608 	.word	0x20002608
 80028e4:	0800bb50 	.word	0x0800bb50
 80028e8:	0800bb70 	.word	0x0800bb70
 80028ec:	0800bb7c 	.word	0x0800bb7c
 80028f0:	0800bb8c 	.word	0x0800bb8c
 80028f4:	40010800 	.word	0x40010800
 80028f8:	2000278d 	.word	0x2000278d
 80028fc:	20002790 	.word	0x20002790
 8002900:	20002794 	.word	0x20002794
 8002904:	20002798 	.word	0x20002798
 8002908:	2000279c 	.word	0x2000279c
 800290c:	2000268b 	.word	0x2000268b
 8002910:	0800bb94 	.word	0x0800bb94
 8002914:	2000260c 	.word	0x2000260c
 8002918:	0800bb9c 	.word	0x0800bb9c
 800291c:	0800bba4 	.word	0x0800bba4
 8002920:	0800bbac 	.word	0x0800bbac
 8002924:	0800bbb4 	.word	0x0800bbb4
 8002928:	0800bbb8 	.word	0x0800bbb8
 800292c:	0800bbbc 	.word	0x0800bbbc
 8002930:	0800ba80 	.word	0x0800ba80
 8002934:	0800ba84 	.word	0x0800ba84
 8002938:	2000268a 	.word	0x2000268a
						UART1_Rx_Buffer[i] = '\0';
 800293c:	4a76      	ldr	r2, [pc, #472]	; (8002b18 <main+0x56c>)
 800293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002940:	4413      	add	r3, r2
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 8002946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002948:	3301      	adds	r3, #1
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294e:	2b31      	cmp	r3, #49	; 0x31
 8002950:	ddf4      	ble.n	800293c <main+0x390>
					}
					UART1_Len = 0;
 8002952:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <main+0x570>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8002958:	4b71      	ldr	r3, [pc, #452]	; (8002b20 <main+0x574>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
				}

				if (LoRaRxEnd) {
 800295e:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <main+0x578>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d023      	beq.n	80029b0 <main+0x404>
					printf("LoRa : %s, %d\r\n", LoRaRxData,
 8002968:	486f      	ldr	r0, [pc, #444]	; (8002b28 <main+0x57c>)
 800296a:	f7fd fbf1 	bl	8000150 <strlen>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	496d      	ldr	r1, [pc, #436]	; (8002b28 <main+0x57c>)
 8002974:	486d      	ldr	r0, [pc, #436]	; (8002b2c <main+0x580>)
 8002976:	f006 fb5b 	bl	8009030 <iprintf>
							strlen(LoRaRxData));
					parseLora(LoRaRxData);
 800297a:	486b      	ldr	r0, [pc, #428]	; (8002b28 <main+0x57c>)
 800297c:	f7ff fd0a 	bl	8002394 <parseLora>
					LoRa_SendData(LoRaRxData, sizeof(LoRaRxData) - 1);
 8002980:	210a      	movs	r1, #10
 8002982:	4869      	ldr	r0, [pc, #420]	; (8002b28 <main+0x57c>)
 8002984:	f7ff fce8 	bl	8002358 <LoRa_SendData>
					for (int i = 0; i < 11; i++) {
 8002988:	2300      	movs	r3, #0
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
 800298c:	e007      	b.n	800299e <main+0x3f2>
						LoRaRxData[i] = '\0';
 800298e:	4a66      	ldr	r2, [pc, #408]	; (8002b28 <main+0x57c>)
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	4413      	add	r3, r2
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 11; i++) {
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	3301      	adds	r3, #1
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	2b0a      	cmp	r3, #10
 80029a2:	ddf4      	ble.n	800298e <main+0x3e2>
					}
					LoRaLen = 0;
 80029a4:	4b62      	ldr	r3, [pc, #392]	; (8002b30 <main+0x584>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
					LoRaRxEnd = 0; // ?��?�� ?���??? ?��?���??? 리셋
 80029aa:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <main+0x578>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
				}

				if (InfoModeFlag) { //?��?��모드?��?��
 80029b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f43f aec4 	beq.w	8002742 <main+0x196>
					if (dataReceived) {
 80029ba:	4b5e      	ldr	r3, [pc, #376]	; (8002b34 <main+0x588>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <main+0x426>
						parseGPSData(rxBuffer, RX3_BUFFER_SIZE);
 80029c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029c6:	485c      	ldr	r0, [pc, #368]	; (8002b38 <main+0x58c>)
 80029c8:	f7ff fa28 	bl	8001e1c <parseGPSData>
						dataReceived = 0;
 80029cc:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <main+0x588>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
					}
					if (HAL_GetTick() - GPSTick >= 1000) {
 80029d2:	f001 fdf3 	bl	80045bc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <main+0x590>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e2:	d37a      	bcc.n	8002ada <main+0x52e>
						GPSTick = HAL_GetTick();
 80029e4:	f001 fdea 	bl	80045bc <HAL_GetTick>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <main+0x590>)
 80029ec:	6013      	str	r3, [r2, #0]
						//printf("CNT : %d\r\n", checkGPSCnt);
						if (checkGPSCnt >= 2) {
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <main+0x594>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	dd4b      	ble.n	8002a8e <main+0x4e2>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 80029f6:	2200      	movs	r2, #0
 80029f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029fc:	4851      	ldr	r0, [pc, #324]	; (8002b44 <main+0x598>)
 80029fe:	f002 fb56 	bl	80050ae <HAL_GPIO_WritePin>
							if (IOMode == 0) {
 8002a02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d138      	bne.n	8002a7c <main+0x4d0>
								LCD_Write_Arrive(data[nowIdx]);
 8002a0a:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <main+0x59c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	494f      	ldr	r1, [pc, #316]	; (8002b4c <main+0x5a0>)
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	011a      	lsls	r2, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4692      	mov	sl, r2
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4691      	mov	r9, r2
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	4690      	mov	r8, r2
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	4696      	mov	lr, r2
 8002a2c:	f103 0410 	add.w	r4, r3, #16
 8002a30:	466e      	mov	r6, sp
 8002a32:	f104 0c20 	add.w	ip, r4, #32
 8002a36:	4635      	mov	r5, r6
 8002a38:	4623      	mov	r3, r4
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a44:	3410      	adds	r4, #16
 8002a46:	3610      	adds	r6, #16
 8002a48:	4564      	cmp	r4, ip
 8002a4a:	d1f4      	bne.n	8002a36 <main+0x48a>
 8002a4c:	4633      	mov	r3, r6
 8002a4e:	4622      	mov	r2, r4
 8002a50:	8811      	ldrh	r1, [r2, #0]
 8002a52:	7892      	ldrb	r2, [r2, #2]
 8002a54:	8019      	strh	r1, [r3, #0]
 8002a56:	709a      	strb	r2, [r3, #2]
 8002a58:	4650      	mov	r0, sl
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	4673      	mov	r3, lr
 8002a60:	f7fe fe12 	bl	8001688 <LCD_Write_Arrive>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 8002a64:	2201      	movs	r2, #1
 8002a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a6a:	4836      	ldr	r0, [pc, #216]	; (8002b44 <main+0x598>)
 8002a6c:	f002 fb1f 	bl	80050ae <HAL_GPIO_WritePin>
								ArriveFlag = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
								helpBuzzer = 0;
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <main+0x5a4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
							}

							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //Stop LED
 8002a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a80:	4830      	ldr	r0, [pc, #192]	; (8002b44 <main+0x598>)
 8002a82:	f002 fb2c 	bl	80050de <HAL_GPIO_TogglePin>
							IOMode = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002a8c:	e022      	b.n	8002ad4 <main+0x528>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0); //BUZZER
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a94:	482b      	ldr	r0, [pc, #172]	; (8002b44 <main+0x598>)
 8002a96:	f002 fb0a 	bl	80050ae <HAL_GPIO_WritePin>
							if (IOMode == 1) {
 8002a9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10f      	bne.n	8002ac2 <main+0x516>
								nowIdx++;
 8002aa2:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <main+0x59c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <main+0x59c>)
 8002aaa:	6013      	str	r3, [r2, #0]
								updateLCD();
 8002aac:	f7fe fd38 	bl	8001520 <updateLCD>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1); //BUZZER
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ab6:	4823      	ldr	r0, [pc, #140]	; (8002b44 <main+0x598>)
 8002ab8:	f002 faf9 	bl	80050ae <HAL_GPIO_WritePin>
								ArriveFlag = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
							}

							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //Stop LED
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac8:	481e      	ldr	r0, [pc, #120]	; (8002b44 <main+0x598>)
 8002aca:	f002 faf0 	bl	80050ae <HAL_GPIO_WritePin>
							IOMode = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						}
						checkGPSCnt = 0;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <main+0x594>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
					}

					if (HAL_GetTick() - GPSFIXTick >= 100) {
 8002ada:	f001 fd6f 	bl	80045bc <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <main+0x5a8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b63      	cmp	r3, #99	; 0x63
 8002ae8:	d96e      	bls.n	8002bc8 <main+0x61c>
						//printf("%s\r\n", DataBuffer);
						nmea_parse(&myData, DataBuffer);
 8002aea:	491b      	ldr	r1, [pc, #108]	; (8002b58 <main+0x5ac>)
 8002aec:	481b      	ldr	r0, [pc, #108]	; (8002b5c <main+0x5b0>)
 8002aee:	f001 f97b 	bl	8003de8 <nmea_parse>
						if (myData.fix == 0) {
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <main+0x5b0>)
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d132      	bne.n	8002b60 <main+0x5b4>
							GPSFIXTick = HAL_GetTick();
 8002afa:	f001 fd5f 	bl	80045bc <HAL_GetTick>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <main+0x5a8>)
 8002b02:	6013      	str	r3, [r2, #0]
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //GPS LED
 8002b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b08:	480e      	ldr	r0, [pc, #56]	; (8002b44 <main+0x598>)
 8002b0a:	f002 fae8 	bl	80050de <HAL_GPIO_TogglePin>
							//printf("%d: No fix\r\n", Serialcnt);
							Serialcnt++;
 8002b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b10:	3301      	adds	r3, #1
 8002b12:	647b      	str	r3, [r7, #68]	; 0x44
 8002b14:	e058      	b.n	8002bc8 <main+0x61c>
 8002b16:	bf00      	nop
 8002b18:	20002658 	.word	0x20002658
 8002b1c:	2000268a 	.word	0x2000268a
 8002b20:	2000268b 	.word	0x2000268b
 8002b24:	20002634 	.word	0x20002634
 8002b28:	20002638 	.word	0x20002638
 8002b2c:	0800bbc4 	.word	0x0800bbc4
 8002b30:	20002643 	.word	0x20002643
 8002b34:	2000278c 	.word	0x2000278c
 8002b38:	2000268c 	.word	0x2000268c
 8002b3c:	20002790 	.word	0x20002790
 8002b40:	20002630 	.word	0x20002630
 8002b44:	40010c00 	.word	0x40010c00
 8002b48:	200021c4 	.word	0x200021c4
 8002b4c:	200003e0 	.word	0x200003e0
 8002b50:	200027a4 	.word	0x200027a4
 8002b54:	20002798 	.word	0x20002798
 8002b58:	200023d0 	.word	0x200023d0
 8002b5c:	200025d0 	.word	0x200025d0
						} else {
							if (NowBusStopFlag == 0) {
 8002b60:	4ba5      	ldr	r3, [pc, #660]	; (8002df8 <main+0x84c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d121      	bne.n	8002bac <main+0x600>
								if (myData.latitude > 0
 8002b68:	4ba4      	ldr	r3, [pc, #656]	; (8002dfc <main+0x850>)
 8002b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	f7fd ff3f 	bl	80009f8 <__aeabi_dcmpgt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <main+0x600>
										&& myData.longitude > 0) {
 8002b80:	4b9e      	ldr	r3, [pc, #632]	; (8002dfc <main+0x850>)
 8002b82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f7fd ff33 	bl	80009f8 <__aeabi_dcmpgt>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <main+0x600>

									//printf("%f, %f\r\n", myData.latitude, myData.longitude);
									NowBusStop(myData.latitude,
 8002b98:	4b98      	ldr	r3, [pc, #608]	; (8002dfc <main+0x850>)
 8002b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9e:	4b97      	ldr	r3, [pc, #604]	; (8002dfc <main+0x850>)
 8002ba0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ba4:	f7ff fa70 	bl	8002088 <NowBusStop>
											myData.longitude);
									updateLCD();
 8002ba8:	f7fe fcba 	bl	8001520 <updateLCD>
								}
							}
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); //GPS LED
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bb2:	4893      	ldr	r0, [pc, #588]	; (8002e00 <main+0x854>)
 8002bb4:	f002 fa7b 	bl	80050ae <HAL_GPIO_WritePin>
//							printf("\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
//											Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
							CheckGPS(myData.latitude, myData.longitude);
 8002bb8:	4b90      	ldr	r3, [pc, #576]	; (8002dfc <main+0x850>)
 8002bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bbe:	4b8f      	ldr	r3, [pc, #572]	; (8002dfc <main+0x850>)
 8002bc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002bc4:	f7ff f9b4 	bl	8001f30 <CheckGPS>
						}
					}
					if (HAL_GetTick() - BtnTick >= 2000 && pushingFlag) {
 8002bc8:	f001 fcf8 	bl	80045bc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b8d      	ldr	r3, [pc, #564]	; (8002e04 <main+0x858>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bd8:	d322      	bcc.n	8002c20 <main+0x674>
 8002bda:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <main+0x85c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01e      	beq.n	8002c20 <main+0x674>
						pushingFlag = 0;
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <main+0x85c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
						upDownFlag = (upDownFlag + 1) % 2;
 8002be8:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <main+0x860>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	bfb8      	it	lt
 8002bf6:	425b      	neglt	r3, r3
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <main+0x860>)
 8002bfc:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c04:	487e      	ldr	r0, [pc, #504]	; (8002e00 <main+0x854>)
 8002c06:	f002 fa52 	bl	80050ae <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8002c0a:	2064      	movs	r0, #100	; 0x64
 8002c0c:	f001 fce0 	bl	80045d0 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c16:	487a      	ldr	r0, [pc, #488]	; (8002e00 <main+0x854>)
 8002c18:	f002 fa49 	bl	80050ae <HAL_GPIO_WritePin>
						updateLCD();
 8002c1c:	f7fe fc80 	bl	8001520 <updateLCD>
					}
					if (NowBusStopFlag) {
 8002c20:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <main+0x84c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f43f ad8c 	beq.w	8002742 <main+0x196>
						if (HAL_GetTick() - ArriveTick >= 100) {
 8002c2a:	f001 fcc7 	bl	80045bc <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b77      	ldr	r3, [pc, #476]	; (8002e10 <main+0x864>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b63      	cmp	r3, #99	; 0x63
 8002c38:	f240 8084 	bls.w	8002d44 <main+0x798>
							ArriveTick = HAL_GetTick();
 8002c3c:	f001 fcbe 	bl	80045bc <HAL_GetTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a73      	ldr	r2, [pc, #460]	; (8002e10 <main+0x864>)
 8002c44:	6013      	str	r3, [r2, #0]
							printf("isPeople : %d\r\n", data[nowIdx].isPeople);
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <main+0x868>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4973      	ldr	r1, [pc, #460]	; (8002e18 <main+0x86c>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	011a      	lsls	r2, r3, #4
 8002c54:	4413      	add	r3, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	3332      	adds	r3, #50	; 0x32
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	486f      	ldr	r0, [pc, #444]	; (8002e1c <main+0x870>)
 8002c60:	f006 f9e6 	bl	8009030 <iprintf>
							if (data[nowIdx].isPeople == 1) {
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <main+0x868>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	496b      	ldr	r1, [pc, #428]	; (8002e18 <main+0x86c>)
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	3332      	adds	r3, #50	; 0x32
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10f      	bne.n	8002c9e <main+0x6f2>
								if (ArriveFlag == 1) {
 8002c7e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <main+0x6e6>
									HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c8a:	4865      	ldr	r0, [pc, #404]	; (8002e20 <main+0x874>)
 8002c8c:	f002 fa27 	bl	80050de <HAL_GPIO_TogglePin>
 8002c90:	e005      	b.n	8002c9e <main+0x6f2>
								} else {
									HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //LAMP1
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c98:	4861      	ldr	r0, [pc, #388]	; (8002e20 <main+0x874>)
 8002c9a:	f002 fa08 	bl	80050ae <HAL_GPIO_WritePin>
								}
							}
							if (data[nowIdx].isPeople == 2) {
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <main+0x868>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	495d      	ldr	r1, [pc, #372]	; (8002e18 <main+0x86c>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	011a      	lsls	r2, r3, #4
 8002cac:	4413      	add	r3, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3332      	adds	r3, #50	; 0x32
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d132      	bne.n	8002d1e <main+0x772>
								if (ArriveFlag == 1) {
 8002cb8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d128      	bne.n	8002d12 <main+0x766>
									HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cc4:	4856      	ldr	r0, [pc, #344]	; (8002e20 <main+0x874>)
 8002cc6:	f002 fa0a 	bl	80050de <HAL_GPIO_TogglePin>
									if (helpBuzzer % 2 == 0
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <main+0x878>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d117      	bne.n	8002d06 <main+0x75a>
											&& (helpBuzzer + 1) % 5
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <main+0x878>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	4b52      	ldr	r3, [pc, #328]	; (8002e28 <main+0x87c>)
 8002cde:	fb83 2301 	smull	r2, r3, r3, r1
 8002ce2:	105a      	asrs	r2, r3, #1
 8002ce4:	17cb      	asrs	r3, r1, #31
 8002ce6:	1ad2      	subs	r2, r2, r3
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	1aca      	subs	r2, r1, r3
 8002cf0:	2a00      	cmp	r2, #0
 8002cf2:	d008      	beq.n	8002d06 <main+0x75a>
											&& helpBuzzer < 11) {
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <main+0x878>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b0a      	cmp	r3, #10
 8002cfa:	dc04      	bgt.n	8002d06 <main+0x75a>

										HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d00:	483f      	ldr	r0, [pc, #252]	; (8002e00 <main+0x854>)
 8002d02:	f002 f9ec 	bl	80050de <HAL_GPIO_TogglePin>
									}
									helpBuzzer++;
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <main+0x878>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <main+0x878>)
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	e005      	b.n	8002d1e <main+0x772>
								} else {
									HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //LAMP1
 8002d12:	2201      	movs	r2, #1
 8002d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d18:	4841      	ldr	r0, [pc, #260]	; (8002e20 <main+0x874>)
 8002d1a:	f002 f9c8 	bl	80050ae <HAL_GPIO_WritePin>
								}
							}
							if (data[nowIdx].isPeople == 0){
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <main+0x868>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	493d      	ldr	r1, [pc, #244]	; (8002e18 <main+0x86c>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	011a      	lsls	r2, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3332      	adds	r3, #50	; 0x32
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <main+0x798>
								HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); //LAMP1
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d3e:	4838      	ldr	r0, [pc, #224]	; (8002e20 <main+0x874>)
 8002d40:	f002 f9b5 	bl	80050ae <HAL_GPIO_WritePin>
							}
						}

						if (data[nowIdx + 1].isPeople >= 1) {
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <main+0x868>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	4933      	ldr	r1, [pc, #204]	; (8002e18 <main+0x86c>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	011a      	lsls	r2, r3, #4
 8002d54:	4413      	add	r3, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	3332      	adds	r3, #50	; 0x32
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <main+0x7c2>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1); //LAMP2
 8002d60:	2201      	movs	r2, #1
 8002d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d66:	482e      	ldr	r0, [pc, #184]	; (8002e20 <main+0x874>)
 8002d68:	f002 f9a1 	bl	80050ae <HAL_GPIO_WritePin>
 8002d6c:	e4e9      	b.n	8002742 <main+0x196>
						} else {
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0); //LAMP2
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d74:	482a      	ldr	r0, [pc, #168]	; (8002e20 <main+0x874>)
 8002d76:	f002 f99a 	bl	80050ae <HAL_GPIO_WritePin>
				if (UART1_Rx_End) {
 8002d7a:	e4e2      	b.n	8002742 <main+0x196>
				}
			}
		}

		else { //Remote Mode
			uint8_t data[] = "1,604,1315";
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <main+0x880>)
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d84:	c303      	stmia	r3!, {r0, r1}
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	3302      	adds	r3, #2
 8002d8a:	0c12      	lsrs	r2, r2, #16
 8002d8c:	701a      	strb	r2, [r3, #0]
			uint8_t data3[] = "000033333@";
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <main+0x884>)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d94:	c303      	stmia	r3!, {r0, r1}
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	0c12      	lsrs	r2, r2, #16
 8002d9c:	701a      	strb	r2, [r3, #0]
			uint8_t uartLoraFlag = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			while (1) {
				if (UART1_Rx_End) {
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <main+0x888>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d062      	beq.n	8002e72 <main+0x8c6>

					//printf("Re:%s, %d!!!!\r\n", UART1_Rx_Buffer, strlen(UART1_Rx_Buffer));
					char *token;

					token = strtok(UART1_Rx_Buffer, "!");
 8002dac:	4922      	ldr	r1, [pc, #136]	; (8002e38 <main+0x88c>)
 8002dae:	4823      	ldr	r0, [pc, #140]	; (8002e3c <main+0x890>)
 8002db0:	f006 fb60 	bl	8009474 <strtok>
 8002db4:	6238      	str	r0, [r7, #32]
					strncpy(data, token, 10);
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	220a      	movs	r2, #10
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 fb44 	bl	800944c <strncpy>
					printf("\r\nRe:%s!!!!!\r\n\r\n", data);
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4619      	mov	r1, r3
 8002dca:	481d      	ldr	r0, [pc, #116]	; (8002e40 <main+0x894>)
 8002dcc:	f006 f930 	bl	8009030 <iprintf>

					token = strtok(NULL, "!");
 8002dd0:	4919      	ldr	r1, [pc, #100]	; (8002e38 <main+0x88c>)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f006 fb4e 	bl	8009474 <strtok>
 8002dd8:	6238      	str	r0, [r7, #32]
					strncpy(data3, token, 10);
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	220a      	movs	r2, #10
 8002dde:	6a39      	ldr	r1, [r7, #32]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f006 fb33 	bl	800944c <strncpy>
					printf("\r\nRe:%s!!!!!\r\n\r\n", data3);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4815      	ldr	r0, [pc, #84]	; (8002e40 <main+0x894>)
 8002dec:	f006 f920 	bl	8009030 <iprintf>

					for (int i = 0; i < 50; i++) {
 8002df0:	2300      	movs	r3, #0
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
 8002df4:	e02e      	b.n	8002e54 <main+0x8a8>
 8002df6:	bf00      	nop
 8002df8:	200021c9 	.word	0x200021c9
 8002dfc:	200025d0 	.word	0x200025d0
 8002e00:	40010c00 	.word	0x40010c00
 8002e04:	200027a0 	.word	0x200027a0
 8002e08:	2000278e 	.word	0x2000278e
 8002e0c:	200021ca 	.word	0x200021ca
 8002e10:	2000279c 	.word	0x2000279c
 8002e14:	200021c4 	.word	0x200021c4
 8002e18:	200003e0 	.word	0x200003e0
 8002e1c:	0800bbd4 	.word	0x0800bbd4
 8002e20:	40010800 	.word	0x40010800
 8002e24:	200027a4 	.word	0x200027a4
 8002e28:	66666667 	.word	0x66666667
 8002e2c:	0800bc14 	.word	0x0800bc14
 8002e30:	0800bc20 	.word	0x0800bc20
 8002e34:	2000268b 	.word	0x2000268b
 8002e38:	0800ba84 	.word	0x0800ba84
 8002e3c:	20002658 	.word	0x20002658
 8002e40:	0800bbe4 	.word	0x0800bbe4
						UART1_Rx_Buffer[i] = '\0';
 8002e44:	4a3c      	ldr	r2, [pc, #240]	; (8002f38 <main+0x98c>)
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	4413      	add	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 50; i++) {
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	3301      	adds	r3, #1
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2b31      	cmp	r3, #49	; 0x31
 8002e58:	ddf4      	ble.n	8002e44 <main+0x898>
					}
					//LoRa_SendData(UART1_Rx_Buffer, strlen((char*)UART1_Rx_Buffer));
					UART1_Len = 0;
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <main+0x990>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
					UART1_Rx_End = 0;
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <main+0x994>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
					uartLoraFlag = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					asd = 0;
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <main+0x998>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
				}
				if (LoRaRxEnd) {
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <main+0x99c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d021      	beq.n	8002ec0 <main+0x914>
					printf("LoRa : %s, %d\r\n", LoRaRxData, strlen(LoRaRxData));
 8002e7c:	4833      	ldr	r0, [pc, #204]	; (8002f4c <main+0x9a0>)
 8002e7e:	f7fd f967 	bl	8000150 <strlen>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	4931      	ldr	r1, [pc, #196]	; (8002f4c <main+0x9a0>)
 8002e88:	4831      	ldr	r0, [pc, #196]	; (8002f50 <main+0x9a4>)
 8002e8a:	f006 f8d1 	bl	8009030 <iprintf>
					asd++;
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <main+0x998>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a2b      	ldr	r2, [pc, #172]	; (8002f44 <main+0x998>)
 8002e96:	6013      	str	r3, [r2, #0]
					for (int i = 0; i < 11; i++) {
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	e007      	b.n	8002eae <main+0x902>
						LoRaRxData[i] = '\0';
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <main+0x9a0>)
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	4413      	add	r3, r2
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 11; i++) {
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	3301      	adds	r3, #1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	2b0a      	cmp	r3, #10
 8002eb2:	ddf4      	ble.n	8002e9e <main+0x8f2>
					}
					LoRaLen = 0;
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <main+0x9a8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
					LoRaRxEnd = 0; // ?��?�� ?���??? ?��?���??? 리셋
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <main+0x99c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GetTick() - LoRaTick >= 3000 && uartLoraFlag == 1) {
 8002ec0:	f001 fb7c 	bl	80045bc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <main+0x9ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	f67f af67 	bls.w	8002da4 <main+0x7f8>
 8002ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f47f af62 	bne.w	8002da4 <main+0x7f8>
					LoRaTick = HAL_GetTick();
 8002ee0:	f001 fb6c 	bl	80045bc <HAL_GetTick>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <main+0x9ac>)
 8002ee8:	6013      	str	r3, [r2, #0]
					if (asd < 2) {
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <main+0x998>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	dc1d      	bgt.n	8002f2e <main+0x982>
						if (asd % 2 == 0) {
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <main+0x998>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <main+0x96c>
							printf("data : %s\r\n", data);
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	4619      	mov	r1, r3
 8002f04:	4815      	ldr	r0, [pc, #84]	; (8002f5c <main+0x9b0>)
 8002f06:	f006 f893 	bl	8009030 <iprintf>
							LoRa_SendData(data, sizeof(data) - 1);
 8002f0a:	f107 0310 	add.w	r3, r7, #16
 8002f0e:	210a      	movs	r1, #10
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fa21 	bl	8002358 <LoRa_SendData>
 8002f16:	e745      	b.n	8002da4 <main+0x7f8>
							//printf("%s\r\n", data);
						} else {
							printf("data3 : %s\r\n", data3);
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4810      	ldr	r0, [pc, #64]	; (8002f60 <main+0x9b4>)
 8002f1e:	f006 f887 	bl	8009030 <iprintf>
							LoRa_SendData(data3, sizeof(data3) - 1);
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	210a      	movs	r1, #10
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fa16 	bl	8002358 <LoRa_SendData>
 8002f2c:	e73a      	b.n	8002da4 <main+0x7f8>
							//printf("%s\r\n", data3);
						}
					} else {
						uartLoraFlag = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if (UART1_Rx_End) {
 8002f34:	e736      	b.n	8002da4 <main+0x7f8>
 8002f36:	bf00      	nop
 8002f38:	20002658 	.word	0x20002658
 8002f3c:	2000268a 	.word	0x2000268a
 8002f40:	2000268b 	.word	0x2000268b
 8002f44:	20000034 	.word	0x20000034
 8002f48:	20002634 	.word	0x20002634
 8002f4c:	20002638 	.word	0x20002638
 8002f50:	0800bbc4 	.word	0x0800bbc4
 8002f54:	20002643 	.word	0x20002643
 8002f58:	20002794 	.word	0x20002794
 8002f5c:	0800bbf8 	.word	0x0800bbf8
 8002f60:	0800bc04 	.word	0x0800bc04

08002f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b090      	sub	sp, #64	; 0x40
 8002f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f6a:	f107 0318 	add.w	r3, r7, #24
 8002f6e:	2228      	movs	r2, #40	; 0x28
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f006 fa50 	bl	8009418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f86:	2302      	movs	r3, #2
 8002f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f92:	2302      	movs	r3, #2
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002f96:	2300      	movs	r3, #0
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002f9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa0:	f107 0318 	add.w	r3, r7, #24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fe95 	bl	8005cd4 <HAL_RCC_OscConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002fb0:	f000 faf8 	bl	80035a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f903 	bl	80061d8 <HAL_RCC_ClockConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002fd8:	f000 fae4 	bl	80035a4 <Error_Handler>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3740      	adds	r7, #64	; 0x40
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <MX_I2C1_Init+0x50>)
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <MX_I2C1_Init+0x54>)
 8002fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_I2C1_Init+0x50>)
 8002ff0:	4a12      	ldr	r2, [pc, #72]	; (800303c <MX_I2C1_Init+0x58>)
 8002ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <MX_I2C1_Init+0x50>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_I2C1_Init+0x50>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_I2C1_Init+0x50>)
 8003002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <MX_I2C1_Init+0x50>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_I2C1_Init+0x50>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <MX_I2C1_Init+0x50>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_I2C1_Init+0x50>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_I2C1_Init+0x50>)
 8003022:	f002 f88d 	bl	8005140 <HAL_I2C_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800302c:	f000 faba 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2000022c 	.word	0x2000022c
 8003038:	40005400 	.word	0x40005400
 800303c:	000186a0 	.word	0x000186a0

08003040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_USART1_UART_Init+0x4c>)
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <MX_USART1_UART_Init+0x50>)
 8003048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_USART1_UART_Init+0x4c>)
 800304c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <MX_USART1_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <MX_USART1_UART_Init+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <MX_USART1_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_USART1_UART_Init+0x4c>)
 8003066:	220c      	movs	r2, #12
 8003068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <MX_USART1_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_USART1_UART_Init+0x4c>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <MX_USART1_UART_Init+0x4c>)
 8003078:	f003 fa3c 	bl	80064f4 <HAL_UART_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003082:	f000 fa8f 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000280 	.word	0x20000280
 8003090:	40013800 	.word	0x40013800

08003094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <MX_USART2_UART_Init+0x50>)
 800309c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030cc:	f003 fa12 	bl	80064f4 <HAL_UART_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030d6:	f000 fa65 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200002c8 	.word	0x200002c8
 80030e4:	40004400 	.word	0x40004400

080030e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <MX_USART3_UART_Init+0x50>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 80030f4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80030f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_USART3_UART_Init+0x4c>)
 8003120:	f003 f9e8 	bl	80064f4 <HAL_UART_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800312a:	f000 fa3b 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000310 	.word	0x20000310
 8003138:	40004800 	.word	0x40004800

0800313c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <MX_DMA_Init+0x48>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <MX_DMA_Init+0x48>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6153      	str	r3, [r2, #20]
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <MX_DMA_Init+0x48>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	200d      	movs	r0, #13
 8003160:	f001 fb31 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003164:	200d      	movs	r0, #13
 8003166:	f001 fb4a 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	200f      	movs	r0, #15
 8003170:	f001 fb29 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003174:	200f      	movs	r0, #15
 8003176:	f001 fb42 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000

08003188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800319c:	4b47      	ldr	r3, [pc, #284]	; (80032bc <MX_GPIO_Init+0x134>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4a46      	ldr	r2, [pc, #280]	; (80032bc <MX_GPIO_Init+0x134>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6193      	str	r3, [r2, #24]
 80031a8:	4b44      	ldr	r3, [pc, #272]	; (80032bc <MX_GPIO_Init+0x134>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b4:	4b41      	ldr	r3, [pc, #260]	; (80032bc <MX_GPIO_Init+0x134>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	4a40      	ldr	r2, [pc, #256]	; (80032bc <MX_GPIO_Init+0x134>)
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	6193      	str	r3, [r2, #24]
 80031c0:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <MX_GPIO_Init+0x134>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin, GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	f641 0103 	movw	r1, #6147	; 0x1803
 80031d2:	483b      	ldr	r0, [pc, #236]	; (80032c0 <MX_GPIO_Init+0x138>)
 80031d4:	f001 ff6b 	bl	80050ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin, GPIO_PIN_RESET);
 80031d8:	2200      	movs	r2, #0
 80031da:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80031de:	4839      	ldr	r0, [pc, #228]	; (80032c4 <MX_GPIO_Init+0x13c>)
 80031e0:	f001 ff65 	bl	80050ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin LAMP2_Pin LAMP1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin|LAMP2_Pin|LAMP1_Pin;
 80031e4:	f641 0303 	movw	r3, #6147	; 0x1803
 80031e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ea:	2301      	movs	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2302      	movs	r3, #2
 80031f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	4619      	mov	r1, r3
 80031fc:	4830      	ldr	r0, [pc, #192]	; (80032c0 <MX_GPIO_Init+0x138>)
 80031fe:	f001 fdbb 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8003202:	2310      	movs	r3, #16
 8003204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	4619      	mov	r1, r3
 8003214:	482a      	ldr	r0, [pc, #168]	; (80032c0 <MX_GPIO_Init+0x138>)
 8003216:	f001 fdaf 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800321a:	23e0      	movs	r3, #224	; 0xe0
 800321c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800321e:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <MX_GPIO_Init+0x140>)
 8003220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	4619      	mov	r1, r3
 800322c:	4824      	ldr	r0, [pc, #144]	; (80032c0 <MX_GPIO_Init+0x138>)
 800322e:	f001 fda3 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN5_Pin;
 8003232:	2303      	movs	r3, #3
 8003234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <MX_GPIO_Init+0x140>)
 8003238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0308 	add.w	r3, r7, #8
 8003242:	4619      	mov	r1, r3
 8003244:	481f      	ldr	r0, [pc, #124]	; (80032c4 <MX_GPIO_Init+0x13c>)
 8003246:	f001 fd97 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_LED_Pin GPS_LED_Pin BUZZER_Pin DBG_LED_Pin */
  GPIO_InitStruct.Pin = STOP_LED_Pin|GPS_LED_Pin|BUZZER_Pin|DBG_LED_Pin;
 800324a:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 800324e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003250:	2301      	movs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2302      	movs	r3, #2
 800325a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	4619      	mov	r1, r3
 8003262:	4818      	ldr	r0, [pc, #96]	; (80032c4 <MX_GPIO_Init+0x13c>)
 8003264:	f001 fd88 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SLCT_Pin */
  GPIO_InitStruct.Pin = MODE_SLCT_Pin;
 8003268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003272:	2301      	movs	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MODE_SLCT_GPIO_Port, &GPIO_InitStruct);
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	4619      	mov	r1, r3
 800327c:	4810      	ldr	r0, [pc, #64]	; (80032c0 <MX_GPIO_Init+0x138>)
 800327e:	f001 fd7b 	bl	8004d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2006      	movs	r0, #6
 8003288:	f001 fa9d 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800328c:	2006      	movs	r0, #6
 800328e:	f001 fab6 	bl	80047fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	2007      	movs	r0, #7
 8003298:	f001 fa95 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800329c:	2007      	movs	r0, #7
 800329e:	f001 faae 	bl	80047fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	2017      	movs	r0, #23
 80032a8:	f001 fa8d 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032ac:	2017      	movs	r0, #23
 80032ae:	f001 faa6 	bl	80047fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40010800 	.word	0x40010800
 80032c4:	40010c00 	.word	0x40010c00
 80032c8:	10310000 	.word	0x10310000

080032cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d143      	bne.n	8003364 <HAL_GPIO_EXTI_Callback+0x98>
		if (!modeFlag) { //LOCAL
 80032dc:	4b81      	ldr	r3, [pc, #516]	; (80034e4 <HAL_GPIO_EXTI_Callback+0x218>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d113      	bne.n	800330c <HAL_GPIO_EXTI_Callback+0x40>
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 80032e4:	2120      	movs	r1, #32
 80032e6:	4880      	ldr	r0, [pc, #512]	; (80034e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80032e8:	f001 feca 	bl	8005080 <HAL_GPIO_ReadPin>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d108      	bne.n	8003304 <HAL_GPIO_EXTI_Callback+0x38>
				BtnTick = HAL_GetTick();
 80032f2:	f001 f963 	bl	80045bc <HAL_GetTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 80032fa:	6013      	str	r3, [r2, #0]
				pushingFlag = 1;
 80032fc:	4b7c      	ldr	r3, [pc, #496]	; (80034f0 <HAL_GPIO_EXTI_Callback+0x224>)
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
			} else {
				printf("0x024,30x03\r\n");
			}
		}
	}
}
 8003302:	e0ea      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				pushingFlag = 0;
 8003304:	4b7a      	ldr	r3, [pc, #488]	; (80034f0 <HAL_GPIO_EXTI_Callback+0x224>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
}
 800330a:	e0e6      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) {
 800330c:	2120      	movs	r1, #32
 800330e:	4876      	ldr	r0, [pc, #472]	; (80034e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8003310:	f001 feb6 	bl	8005080 <HAL_GPIO_ReadPin>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_GPIO_EXTI_Callback+0x5a>
				BtnTick = HAL_GetTick();
 800331a:	f001 f94f 	bl	80045bc <HAL_GetTick>
 800331e:	4603      	mov	r3, r0
 8003320:	4a72      	ldr	r2, [pc, #456]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	e0d9      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				if (HAL_GetTick() - BtnTick < 2000) {
 8003326:	f001 f949 	bl	80045bc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	4b6f      	ldr	r3, [pc, #444]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003336:	d203      	bcs.n	8003340 <HAL_GPIO_EXTI_Callback+0x74>
					printf("0x020,10x03\r\n");
 8003338:	486e      	ldr	r0, [pc, #440]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x228>)
 800333a:	f005 fedf 	bl	80090fc <puts>
}
 800333e:	e0cc      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				} else if (HAL_GetTick() - BtnTick < 5000) {
 8003340:	f001 f93c 	bl	80045bc <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	4b69      	ldr	r3, [pc, #420]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003350:	4293      	cmp	r3, r2
 8003352:	d803      	bhi.n	800335c <HAL_GPIO_EXTI_Callback+0x90>
					printf("0x020,20x03\r\n");
 8003354:	4868      	ldr	r0, [pc, #416]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003356:	f005 fed1 	bl	80090fc <puts>
}
 800335a:	e0be      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
					printf("0x020,30x03\r\n");
 800335c:	4867      	ldr	r0, [pc, #412]	; (80034fc <HAL_GPIO_EXTI_Callback+0x230>)
 800335e:	f005 fecd 	bl	80090fc <puts>
}
 8003362:	e0ba      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d12b      	bne.n	80033c2 <HAL_GPIO_EXTI_Callback+0xf6>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	485e      	ldr	r0, [pc, #376]	; (80034e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 800336e:	f001 fe87 	bl	8005080 <HAL_GPIO_ReadPin>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_GPIO_EXTI_Callback+0xb8>
			BtnTick = HAL_GetTick();
 8003378:	f001 f920 	bl	80045bc <HAL_GetTick>
 800337c:	4603      	mov	r3, r0
 800337e:	4a5b      	ldr	r2, [pc, #364]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	e0aa      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			if (HAL_GetTick() - BtnTick < 2000) {
 8003384:	f001 f91a 	bl	80045bc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	4b58      	ldr	r3, [pc, #352]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003394:	d203      	bcs.n	800339e <HAL_GPIO_EXTI_Callback+0xd2>
				printf("0x021,10x03\r\n");
 8003396:	485a      	ldr	r0, [pc, #360]	; (8003500 <HAL_GPIO_EXTI_Callback+0x234>)
 8003398:	f005 feb0 	bl	80090fc <puts>
}
 800339c:	e09d      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			} else if (HAL_GetTick() - BtnTick < 5000) {
 800339e:	f001 f90d 	bl	80045bc <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d803      	bhi.n	80033ba <HAL_GPIO_EXTI_Callback+0xee>
				printf("0x021,20x03\r\n");
 80033b2:	4854      	ldr	r0, [pc, #336]	; (8003504 <HAL_GPIO_EXTI_Callback+0x238>)
 80033b4:	f005 fea2 	bl	80090fc <puts>
}
 80033b8:	e08f      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x021,30x03\r\n");
 80033ba:	4853      	ldr	r0, [pc, #332]	; (8003508 <HAL_GPIO_EXTI_Callback+0x23c>)
 80033bc:	f005 fe9e 	bl	80090fc <puts>
}
 80033c0:	e08b      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d12b      	bne.n	8003420 <HAL_GPIO_EXTI_Callback+0x154>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	4847      	ldr	r0, [pc, #284]	; (80034e8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80033cc:	f001 fe58 	bl	8005080 <HAL_GPIO_ReadPin>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_GPIO_EXTI_Callback+0x116>
			BtnTick = HAL_GetTick();
 80033d6:	f001 f8f1 	bl	80045bc <HAL_GetTick>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a43      	ldr	r2, [pc, #268]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	e07b      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			if (HAL_GetTick() - BtnTick < 2000) {
 80033e2:	f001 f8eb 	bl	80045bc <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b40      	ldr	r3, [pc, #256]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033f2:	d203      	bcs.n	80033fc <HAL_GPIO_EXTI_Callback+0x130>
				printf("0x022,10x03\r\n");
 80033f4:	4845      	ldr	r0, [pc, #276]	; (800350c <HAL_GPIO_EXTI_Callback+0x240>)
 80033f6:	f005 fe81 	bl	80090fc <puts>
}
 80033fa:	e06e      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			} else if (HAL_GetTick() - BtnTick < 5000) {
 80033fc:	f001 f8de 	bl	80045bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3287 	movw	r2, #4999	; 0x1387
 800340c:	4293      	cmp	r3, r2
 800340e:	d803      	bhi.n	8003418 <HAL_GPIO_EXTI_Callback+0x14c>
				printf("0x022,20x03\r\n");
 8003410:	483f      	ldr	r0, [pc, #252]	; (8003510 <HAL_GPIO_EXTI_Callback+0x244>)
 8003412:	f005 fe73 	bl	80090fc <puts>
}
 8003416:	e060      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x022,30x03\r\n");
 8003418:	483e      	ldr	r0, [pc, #248]	; (8003514 <HAL_GPIO_EXTI_Callback+0x248>)
 800341a:	f005 fe6f 	bl	80090fc <puts>
}
 800341e:	e05c      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d12b      	bne.n	800347e <HAL_GPIO_EXTI_Callback+0x1b2>
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 8003426:	2101      	movs	r1, #1
 8003428:	483b      	ldr	r0, [pc, #236]	; (8003518 <HAL_GPIO_EXTI_Callback+0x24c>)
 800342a:	f001 fe29 	bl	8005080 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_GPIO_EXTI_Callback+0x174>
			BtnTick = HAL_GetTick();
 8003434:	f001 f8c2 	bl	80045bc <HAL_GetTick>
 8003438:	4603      	mov	r3, r0
 800343a:	4a2c      	ldr	r2, [pc, #176]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 800343c:	6013      	str	r3, [r2, #0]
}
 800343e:	e04c      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			if (HAL_GetTick() - BtnTick < 2000) {
 8003440:	f001 f8bc 	bl	80045bc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003450:	d203      	bcs.n	800345a <HAL_GPIO_EXTI_Callback+0x18e>
				printf("0x023,10x03\r\n");
 8003452:	4832      	ldr	r0, [pc, #200]	; (800351c <HAL_GPIO_EXTI_Callback+0x250>)
 8003454:	f005 fe52 	bl	80090fc <puts>
}
 8003458:	e03f      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			} else if (HAL_GetTick() - BtnTick < 5000) {
 800345a:	f001 f8af 	bl	80045bc <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3287 	movw	r2, #4999	; 0x1387
 800346a:	4293      	cmp	r3, r2
 800346c:	d803      	bhi.n	8003476 <HAL_GPIO_EXTI_Callback+0x1aa>
				printf("0x023,20x03\r\n");
 800346e:	482c      	ldr	r0, [pc, #176]	; (8003520 <HAL_GPIO_EXTI_Callback+0x254>)
 8003470:	f005 fe44 	bl	80090fc <puts>
}
 8003474:	e031      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x023,30x03\r\n");
 8003476:	482b      	ldr	r0, [pc, #172]	; (8003524 <HAL_GPIO_EXTI_Callback+0x258>)
 8003478:	f005 fe40 	bl	80090fc <puts>
}
 800347c:	e02d      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d12a      	bne.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)) {
 8003484:	2102      	movs	r1, #2
 8003486:	4824      	ldr	r0, [pc, #144]	; (8003518 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003488:	f001 fdfa 	bl	8005080 <HAL_GPIO_ReadPin>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_GPIO_EXTI_Callback+0x1d2>
			BtnTick = HAL_GetTick();
 8003492:	f001 f893 	bl	80045bc <HAL_GetTick>
 8003496:	4603      	mov	r3, r0
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	e01d      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			if (HAL_GetTick() - BtnTick < 2000) {
 800349e:	f001 f88d 	bl	80045bc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034ae:	d203      	bcs.n	80034b8 <HAL_GPIO_EXTI_Callback+0x1ec>
				printf("0x024,10x03\r\n");
 80034b0:	481d      	ldr	r0, [pc, #116]	; (8003528 <HAL_GPIO_EXTI_Callback+0x25c>)
 80034b2:	f005 fe23 	bl	80090fc <puts>
}
 80034b6:	e010      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
			} else if (HAL_GetTick() - BtnTick < 5000) {
 80034b8:	f001 f880 	bl	80045bc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_GPIO_EXTI_Callback+0x220>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d803      	bhi.n	80034d4 <HAL_GPIO_EXTI_Callback+0x208>
				printf("0x024,20x03\r\n");
 80034cc:	4817      	ldr	r0, [pc, #92]	; (800352c <HAL_GPIO_EXTI_Callback+0x260>)
 80034ce:	f005 fe15 	bl	80090fc <puts>
}
 80034d2:	e002      	b.n	80034da <HAL_GPIO_EXTI_Callback+0x20e>
				printf("0x024,30x03\r\n");
 80034d4:	4816      	ldr	r0, [pc, #88]	; (8003530 <HAL_GPIO_EXTI_Callback+0x264>)
 80034d6:	f005 fe11 	bl	80090fc <puts>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	2000278d 	.word	0x2000278d
 80034e8:	40010800 	.word	0x40010800
 80034ec:	200027a0 	.word	0x200027a0
 80034f0:	2000278e 	.word	0x2000278e
 80034f4:	0800bc2c 	.word	0x0800bc2c
 80034f8:	0800bc3c 	.word	0x0800bc3c
 80034fc:	0800bc4c 	.word	0x0800bc4c
 8003500:	0800bc5c 	.word	0x0800bc5c
 8003504:	0800bc6c 	.word	0x0800bc6c
 8003508:	0800bc7c 	.word	0x0800bc7c
 800350c:	0800bc8c 	.word	0x0800bc8c
 8003510:	0800bc9c 	.word	0x0800bc9c
 8003514:	0800bcac 	.word	0x0800bcac
 8003518:	40010c00 	.word	0x40010c00
 800351c:	0800bcbc 	.word	0x0800bcbc
 8003520:	0800bccc 	.word	0x0800bccc
 8003524:	0800bcdc 	.word	0x0800bcdc
 8003528:	0800bcec 	.word	0x0800bcec
 800352c:	0800bcfc 	.word	0x0800bcfc
 8003530:	0800bd0c 	.word	0x0800bd0c

08003534 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	static uint8_t UART1_Chk = 0;
	static uint16_t index = 0;
	static uint8_t LoRaChk = 0;
	static uint16_t LoRaIdx = 0;
	if (huart->Instance == USART1) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_UART_RxCpltCallback+0x50>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d103      	bne.n	800354e <HAL_UART_RxCpltCallback+0x1a>
		UART1_Rx_End = 1;
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_UART_RxCpltCallback+0x54>)
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);

	} else if (huart->Instance == USART3) {
		dataReceived = 1;
	}
}
 800354c:	e015      	b.n	800357a <HAL_UART_RxCpltCallback+0x46>
	} else if (huart->Instance == USART2) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_UART_RxCpltCallback+0x58>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d108      	bne.n	800356a <HAL_UART_RxCpltCallback+0x36>
		LoRaRxEnd = 1;
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_UART_RxCpltCallback+0x5c>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, LoRaRxData, 10);
 800355e:	220a      	movs	r2, #10
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <HAL_UART_RxCpltCallback+0x60>)
 8003562:	480d      	ldr	r0, [pc, #52]	; (8003598 <HAL_UART_RxCpltCallback+0x64>)
 8003564:	f003 f899 	bl	800669a <HAL_UART_Receive_IT>
}
 8003568:	e007      	b.n	800357a <HAL_UART_RxCpltCallback+0x46>
	} else if (huart->Instance == USART3) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <HAL_UART_RxCpltCallback+0x68>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <HAL_UART_RxCpltCallback+0x46>
		dataReceived = 1;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_UART_RxCpltCallback+0x6c>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40013800 	.word	0x40013800
 8003588:	2000268b 	.word	0x2000268b
 800358c:	40004400 	.word	0x40004400
 8003590:	20002634 	.word	0x20002634
 8003594:	20002638 	.word	0x20002638
 8003598:	200002c8 	.word	0x200002c8
 800359c:	40004800 	.word	0x40004800
 80035a0:	2000278c 	.word	0x2000278c

080035a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a8:	b672      	cpsid	i
}
 80035aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035ac:	e7fe      	b.n	80035ac <Error_Handler+0x8>

080035ae <gps_checksum>:


char *nmeaData[15];

int gps_checksum(char *nmea_data)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fc fdca 	bl	8000150 <strlen>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d801      	bhi.n	80035c6 <gps_checksum+0x18>
 80035c2:	2300      	movs	r3, #0
 80035c4:	e038      	b.n	8003638 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fc fdc2 	bl	8000150 <strlen>
 80035cc:	4603      	mov	r3, r0
 80035ce:	3b04      	subs	r3, #4
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fc fdb9 	bl	8000150 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	3b03      	subs	r3, #3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e00a      	b.n	800360a <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	4053      	eors	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	3301      	adds	r3, #1
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fc fda0 	bl	8000150 <strlen>
 8003610:	4603      	mov	r3, r0
 8003612:	1f5a      	subs	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d8ec      	bhi.n	80035f4 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	2210      	movs	r2, #16
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f004 ffda 	bl	80085dc <strtol>
 8003628:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	429a      	cmp	r2, r3
 8003630:	d101      	bne.n	8003636 <gps_checksum+0x88>
        return 1;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003636:	2300      	movs	r3, #0
    }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b0b7      	sub	sp, #220	; 0xdc
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003650:	f107 0320 	add.w	r3, r7, #32
 8003654:	2264      	movs	r2, #100	; 0x64
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f005 fedd 	bl	8009418 <memset>
    char *marker = strtok(inputString, ",");
 800365e:	49c5      	ldr	r1, [pc, #788]	; (8003974 <nmea_GPGGA+0x334>)
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	f005 ff07 	bl	8009474 <strtok>
 8003666:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800366a:	e027      	b.n	80036bc <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800366c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003670:	f7fc fd6e 	bl	8000150 <strlen>
 8003674:	4603      	mov	r3, r0
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800367c:	1c63      	adds	r3, r4, #1
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003682:	4610      	mov	r0, r2
 8003684:	f003 fff4 	bl	8007670 <malloc>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	00a3      	lsls	r3, r4, #2
 800368e:	33d8      	adds	r3, #216	; 0xd8
 8003690:	443b      	add	r3, r7
 8003692:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8003696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800369a:	3b01      	subs	r3, #1
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	33d8      	adds	r3, #216	; 0xd8
 80036a0:	443b      	add	r3, r7
 80036a2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80036a6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 ffdb 	bl	8009666 <strcpy>
        marker = strtok(NULL, ",");
 80036b0:	49b0      	ldr	r1, [pc, #704]	; (8003974 <nmea_GPGGA+0x334>)
 80036b2:	2000      	movs	r0, #0
 80036b4:	f005 fede 	bl	8009474 <strtok>
 80036b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80036bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1d3      	bne.n	800366c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	332c      	adds	r3, #44	; 0x2c
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f005 ffc2 	bl	8009666 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80036e2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80036e6:	2b53      	cmp	r3, #83	; 0x53
 80036e8:	d004      	beq.n	80036f4 <nmea_GPGGA+0xb4>
 80036ea:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80036ee:	2b4e      	cmp	r3, #78	; 0x4e
 80036f0:	f040 815f 	bne.w	80039b2 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036fa:	e010      	b.n	800371e <nmea_GPGGA+0xde>
 80036fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003702:	4413      	add	r3, r2
 8003704:	7819      	ldrb	r1, [r3, #0]
 8003706:	f107 021c 	add.w	r2, r7, #28
 800370a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800370e:	4413      	add	r3, r2
 8003710:	460a      	mov	r2, r1
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003718:	3301      	adds	r3, #1
 800371a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800371e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003722:	2b01      	cmp	r3, #1
 8003724:	ddea      	ble.n	80036fc <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800372c:	e011      	b.n	8003752 <nmea_GPGGA+0x112>
 800372e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003734:	3302      	adds	r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	7819      	ldrb	r1, [r3, #0]
 800373a:	f107 0214 	add.w	r2, r7, #20
 800373e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003742:	4413      	add	r3, r2
 8003744:	460a      	mov	r2, r1
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800374c:	3301      	adds	r3, #1
 800374e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003756:	2b05      	cmp	r3, #5
 8003758:	dde9      	ble.n	800372e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800375a:	f107 031c 	add.w	r3, r7, #28
 800375e:	220a      	movs	r2, #10
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f004 ff3a 	bl	80085dc <strtol>
 8003768:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f004 fe5c 	bl	8008430 <strtof>
 8003778:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800377c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003780:	f7fd faac 	bl	8000cdc <__aeabi_i2f>
 8003784:	4604      	mov	r4, r0
 8003786:	497c      	ldr	r1, [pc, #496]	; (8003978 <nmea_GPGGA+0x338>)
 8003788:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800378c:	f7fd fbae 	bl	8000eec <__aeabi_fdiv>
 8003790:	4603      	mov	r3, r0
 8003792:	4619      	mov	r1, r3
 8003794:	4620      	mov	r0, r4
 8003796:	f7fd f9ed 	bl	8000b74 <__addsf3>
 800379a:	4603      	mov	r3, r0
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc fe43 	bl	8000428 <__aeabi_f2d>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037b0:	e010      	b.n	80037d4 <nmea_GPGGA+0x194>
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b8:	4413      	add	r3, r2
 80037ba:	7819      	ldrb	r1, [r3, #0]
 80037bc:	f107 0210 	add.w	r2, r7, #16
 80037c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c4:	4413      	add	r3, r2
 80037c6:	460a      	mov	r2, r1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ce:	3301      	adds	r3, #1
 80037d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d8:	2b02      	cmp	r3, #2
 80037da:	ddea      	ble.n	80037b2 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037e2:	e011      	b.n	8003808 <nmea_GPGGA+0x1c8>
 80037e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037ea:	3303      	adds	r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	7819      	ldrb	r1, [r3, #0]
 80037f0:	f107 0208 	add.w	r2, r7, #8
 80037f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037f8:	4413      	add	r3, r2
 80037fa:	460a      	mov	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003802:	3301      	adds	r3, #1
 8003804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800380c:	2b05      	cmp	r3, #5
 800380e:	dde9      	ble.n	80037e4 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	220a      	movs	r2, #10
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f004 fedf 	bl	80085dc <strtol>
 800381e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f004 fe01 	bl	8008430 <strtof>
 800382e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003832:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003836:	f7fd fa51 	bl	8000cdc <__aeabi_i2f>
 800383a:	4604      	mov	r4, r0
 800383c:	494e      	ldr	r1, [pc, #312]	; (8003978 <nmea_GPGGA+0x338>)
 800383e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003842:	f7fd fb53 	bl	8000eec <__aeabi_fdiv>
 8003846:	4603      	mov	r3, r0
 8003848:	4619      	mov	r1, r3
 800384a:	4620      	mov	r0, r4
 800384c:	f7fd f992 	bl	8000b74 <__addsf3>
 8003850:	4603      	mov	r3, r0
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fde8 	bl	8000428 <__aeabi_f2d>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800386c:	f7fd f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d17a      	bne.n	800396c <nmea_GPGGA+0x32c>
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003882:	f7fd f891 	bl	80009a8 <__aeabi_dcmpeq>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d16f      	bne.n	800396c <nmea_GPGGA+0x32c>
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <nmea_GPGGA+0x33c>)
 8003892:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003896:	f7fd f891 	bl	80009bc <__aeabi_dcmplt>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d065      	beq.n	800396c <nmea_GPGGA+0x32c>
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <nmea_GPGGA+0x340>)
 80038a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80038aa:	f7fd f887 	bl	80009bc <__aeabi_dcmplt>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05b      	beq.n	800396c <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 80038c4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80038cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80038d6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80038d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 fda7 	bl	8008430 <strtof>
 80038e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80038ee:	f7fd fbdd 	bl	80010ac <__aeabi_fcmpeq>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <nmea_GPGGA+0x2be>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	e001      	b.n	8003902 <nmea_GPGGA+0x2c2>
 80038fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003908:	220a      	movs	r2, #10
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fe65 	bl	80085dc <strtol>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	220a      	movs	r2, #10
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f004 fe5c 	bl	80085dc <strtol>
 8003924:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800392c:	2b00      	cmp	r3, #0
 800392e:	bfcc      	ite	gt
 8003930:	2301      	movgt	r3, #1
 8003932:	2300      	movle	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 800393c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fd75 	bl	8008430 <strtof>
 8003946:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003952:	f7fd fbab 	bl	80010ac <__aeabi_fcmpeq>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <nmea_GPGGA+0x322>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	e001      	b.n	8003966 <nmea_GPGGA+0x326>
 8003962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800396a:	e022      	b.n	80039b2 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003972:	e016      	b.n	80039a2 <nmea_GPGGA+0x362>
 8003974:	0800bd1c 	.word	0x0800bd1c
 8003978:	42700000 	.word	0x42700000
 800397c:	40568000 	.word	0x40568000
 8003980:	40668000 	.word	0x40668000
 8003984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	33d8      	adds	r3, #216	; 0xd8
 800398c:	443b      	add	r3, r7
 800398e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fe74 	bl	8007680 <free>
 8003998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800399c:	3301      	adds	r3, #1
 800399e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039aa:	429a      	cmp	r2, r3
 80039ac:	dbea      	blt.n	8003984 <nmea_GPGGA+0x344>
            return 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e019      	b.n	80039e6 <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b8:	e00e      	b.n	80039d8 <nmea_GPGGA+0x398>
 80039ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	33d8      	adds	r3, #216	; 0xd8
 80039c2:	443b      	add	r3, r7
 80039c4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 fe59 	bl	8007680 <free>
 80039ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039d2:	3301      	adds	r3, #1
 80039d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbea      	blt.n	80039ba <nmea_GPGGA+0x37a>
    return 1;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	37dc      	adds	r7, #220	; 0xdc
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}
 80039ee:	bf00      	nop

080039f0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b0a3      	sub	sp, #140	; 0x8c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	2264      	movs	r2, #100	; 0x64
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f005 fd05 	bl	8009418 <memset>
    char *marker = strtok(inputString, ",");
 8003a0e:	493b      	ldr	r1, [pc, #236]	; (8003afc <nmea_GPGSA+0x10c>)
 8003a10:	6838      	ldr	r0, [r7, #0]
 8003a12:	f005 fd2f 	bl	8009474 <strtok>
 8003a16:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003a1a:	e027      	b.n	8003a6c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003a1c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003a20:	f7fc fb96 	bl	8000150 <strlen>
 8003a24:	4603      	mov	r3, r0
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8003a2c:	1c63      	adds	r3, r4, #1
 8003a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a32:	4610      	mov	r0, r2
 8003a34:	f003 fe1c 	bl	8007670 <malloc>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	00a3      	lsls	r3, r4, #2
 8003a3e:	3388      	adds	r3, #136	; 0x88
 8003a40:	443b      	add	r3, r7
 8003a42:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3388      	adds	r3, #136	; 0x88
 8003a50:	443b      	add	r3, r7
 8003a52:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003a56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f005 fe03 	bl	8009666 <strcpy>
        marker = strtok(NULL, ",");
 8003a60:	4926      	ldr	r1, [pc, #152]	; (8003afc <nmea_GPGSA+0x10c>)
 8003a62:	2000      	movs	r0, #0
 8003a64:	f005 fd06 	bl	8009474 <strtok>
 8003a68:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8003a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1d3      	bne.n	8003a1c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	220a      	movs	r2, #10
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 fdae 	bl	80085dc <strtol>
 8003a80:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bfcc      	ite	gt
 8003a88:	2301      	movgt	r3, #1
 8003a8a:	2300      	movle	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8003a98:	2303      	movs	r3, #3
 8003a9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a9c:	e00e      	b.n	8003abc <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	3388      	adds	r3, #136	; 0x88
 8003aa4:	443b      	add	r3, r7
 8003aa6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8003ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab8:	3301      	adds	r3, #1
 8003aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8003abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003abe:	2b0e      	cmp	r3, #14
 8003ac0:	dded      	ble.n	8003a9e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	677b      	str	r3, [r7, #116]	; 0x74
 8003acc:	e00b      	b.n	8003ae6 <nmea_GPGSA+0xf6>
 8003ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	3388      	adds	r3, #136	; 0x88
 8003ad4:	443b      	add	r3, r7
 8003ad6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fdd0 	bl	8007680 <free>
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ae6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbee      	blt.n	8003ace <nmea_GPGSA+0xde>
    return 1;
 8003af0:	2301      	movs	r3, #1
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	378c      	adds	r7, #140	; 0x8c
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd90      	pop	{r4, r7, pc}
 8003afa:	bf00      	nop
 8003afc:	0800bd1c 	.word	0x0800bd1c

08003b00 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b0b7      	sub	sp, #220	; 0xdc
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b14:	2264      	movs	r2, #100	; 0x64
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f005 fc7d 	bl	8009418 <memset>
    char *marker = strtok(inputString, ",");
 8003b1e:	49b0      	ldr	r1, [pc, #704]	; (8003de0 <nmea_GPGLL+0x2e0>)
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f005 fca7 	bl	8009474 <strtok>
 8003b26:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003b2a:	e027      	b.n	8003b7c <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003b2c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003b30:	f7fc fb0e 	bl	8000150 <strlen>
 8003b34:	4603      	mov	r3, r0
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003b3c:	1c63      	adds	r3, r4, #1
 8003b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b42:	4610      	mov	r0, r2
 8003b44:	f003 fd94 	bl	8007670 <malloc>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	00a3      	lsls	r3, r4, #2
 8003b4e:	33d8      	adds	r3, #216	; 0xd8
 8003b50:	443b      	add	r3, r7
 8003b52:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8003b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	33d8      	adds	r3, #216	; 0xd8
 8003b60:	443b      	add	r3, r7
 8003b62:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003b66:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f005 fd7b 	bl	8009666 <strcpy>
        marker = strtok(NULL, ",");
 8003b70:	499b      	ldr	r1, [pc, #620]	; (8003de0 <nmea_GPGLL+0x2e0>)
 8003b72:	2000      	movs	r0, #0
 8003b74:	f005 fc7e 	bl	8009474 <strtok>
 8003b78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8003b7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1d3      	bne.n	8003b2c <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8003b8c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003b90:	2b53      	cmp	r3, #83	; 0x53
 8003b92:	d004      	beq.n	8003b9e <nmea_GPGLL+0x9e>
 8003b94:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003b98:	2b4e      	cmp	r3, #78	; 0x4e
 8003b9a:	f040 811c 	bne.w	8003dd6 <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ba4:	e010      	b.n	8003bc8 <nmea_GPGLL+0xc8>
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bac:	4413      	add	r3, r2
 8003bae:	7819      	ldrb	r1, [r3, #0]
 8003bb0:	f107 0220 	add.w	r2, r7, #32
 8003bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bb8:	4413      	add	r3, r2
 8003bba:	460a      	mov	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	ddea      	ble.n	8003ba6 <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd6:	e011      	b.n	8003bfc <nmea_GPGLL+0xfc>
 8003bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bde:	3302      	adds	r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	7819      	ldrb	r1, [r3, #0]
 8003be4:	f107 0218 	add.w	r2, r7, #24
 8003be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bec:	4413      	add	r3, r2
 8003bee:	460a      	mov	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	dde9      	ble.n	8003bd8 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003c04:	f107 0320 	add.w	r3, r7, #32
 8003c08:	220a      	movs	r2, #10
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f004 fce5 	bl	80085dc <strtol>
 8003c12:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003c16:	f107 0318 	add.w	r3, r7, #24
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 fc07 	bl	8008430 <strtof>
 8003c22:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003c26:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003c2a:	f7fd f857 	bl	8000cdc <__aeabi_i2f>
 8003c2e:	4604      	mov	r4, r0
 8003c30:	496c      	ldr	r1, [pc, #432]	; (8003de4 <nmea_GPGLL+0x2e4>)
 8003c32:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003c36:	f7fd f959 	bl	8000eec <__aeabi_fdiv>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7fc ff98 	bl	8000b74 <__addsf3>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc fbee 	bl	8000428 <__aeabi_f2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c62:	e010      	b.n	8003c86 <nmea_GPGLL+0x186>
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	7819      	ldrb	r1, [r3, #0]
 8003c6e:	f107 0214 	add.w	r2, r7, #20
 8003c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c76:	4413      	add	r3, r2
 8003c78:	460a      	mov	r2, r1
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c80:	3301      	adds	r3, #1
 8003c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	ddea      	ble.n	8003c64 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c94:	e011      	b.n	8003cba <nmea_GPGLL+0x1ba>
 8003c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c9c:	3303      	adds	r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	7819      	ldrb	r1, [r3, #0]
 8003ca2:	f107 020c 	add.w	r2, r7, #12
 8003ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003caa:	4413      	add	r3, r2
 8003cac:	460a      	mov	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	dde9      	ble.n	8003c96 <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	220a      	movs	r2, #10
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f004 fc86 	bl	80085dc <strtol>
 8003cd0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f004 fba8 	bl	8008430 <strtof>
 8003ce0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003ce4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003ce8:	f7fc fff8 	bl	8000cdc <__aeabi_i2f>
 8003cec:	4604      	mov	r4, r0
 8003cee:	493d      	ldr	r1, [pc, #244]	; (8003de4 <nmea_GPGLL+0x2e4>)
 8003cf0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003cf4:	f7fd f8fa 	bl	8000eec <__aeabi_fdiv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fc ff39 	bl	8000b74 <__addsf3>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fb8f 	bl	8000428 <__aeabi_f2d>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8003d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <nmea_GPGLL+0x246>
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003d22:	f7fd f9c3 	bl	80010ac <__aeabi_fcmpeq>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10c      	bne.n	8003d46 <nmea_GPGLL+0x246>
 8003d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <nmea_GPGLL+0x246>
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003d3c:	f7fd f9b6 	bl	80010ac <__aeabi_fcmpeq>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d4c:	e00e      	b.n	8003d6c <nmea_GPGLL+0x26c>
 8003d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	33d8      	adds	r3, #216	; 0xd8
 8003d56:	443b      	add	r3, r7
 8003d58:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fc8f 	bl	8007680 <free>
 8003d62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d66:	3301      	adds	r3, #1
 8003d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d74:	429a      	cmp	r2, r3
 8003d76:	dbea      	blt.n	8003d4e <nmea_GPGLL+0x24e>
            return 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e02d      	b.n	8003dd8 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003d82:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8003d96:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003d9e:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003da6:	e00e      	b.n	8003dc6 <nmea_GPGLL+0x2c6>
 8003da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	33d8      	adds	r3, #216	; 0xd8
 8003db0:	443b      	add	r3, r7
 8003db2:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fc62 	bl	8007680 <free>
 8003dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	dbea      	blt.n	8003da8 <nmea_GPGLL+0x2a8>
            return 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	37dc      	adds	r7, #220	; 0xdc
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	0800bd1c 	.word	0x0800bd1c
 8003de4:	42700000 	.word	0x42700000

08003de8 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
    memset(nmeaData, 0, sizeof(nmeaData));
 8003df2:	223c      	movs	r2, #60	; 0x3c
 8003df4:	2100      	movs	r1, #0
 8003df6:	484e      	ldr	r0, [pc, #312]	; (8003f30 <nmea_parse+0x148>)
 8003df8:	f005 fb0e 	bl	8009418 <memset>
    char * token = strtok(buffer, "$");
 8003dfc:	494d      	ldr	r1, [pc, #308]	; (8003f34 <nmea_parse+0x14c>)
 8003dfe:	6838      	ldr	r0, [r7, #0]
 8003e00:	f005 fb38 	bl	8009474 <strtok>
 8003e04:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003e0a:	e01d      	b.n	8003e48 <nmea_parse+0x60>
    	nmeaData[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003e0c:	6978      	ldr	r0, [r7, #20]
 8003e0e:	f7fc f99f 	bl	8000150 <strlen>
 8003e12:	4603      	mov	r3, r0
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	693c      	ldr	r4, [r7, #16]
 8003e18:	1c63      	adds	r3, r4, #1
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f003 fc27 	bl	8007670 <malloc>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <nmea_parse+0x148>)
 8003e28:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(nmeaData[cnt-1], token);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	4a3f      	ldr	r2, [pc, #252]	; (8003f30 <nmea_parse+0x148>)
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	6979      	ldr	r1, [r7, #20]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f005 fc14 	bl	8009666 <strcpy>
        token = strtok(NULL, "$");
 8003e3e:	493d      	ldr	r1, [pc, #244]	; (8003f34 <nmea_parse+0x14c>)
 8003e40:	2000      	movs	r0, #0
 8003e42:	f005 fb17 	bl	8009474 <strtok>
 8003e46:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1de      	bne.n	8003e0c <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e052      	b.n	8003efa <nmea_parse+0x112>
       if(strstr(nmeaData[i], "\r\n")!=NULL && gps_checksum(nmeaData[i])){
 8003e54:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <nmea_parse+0x148>)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	4936      	ldr	r1, [pc, #216]	; (8003f38 <nmea_parse+0x150>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f005 fb64 	bl	800952c <strstr>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d044      	beq.n	8003ef4 <nmea_parse+0x10c>
 8003e6a:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <nmea_parse+0x148>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fb9b 	bl	80035ae <gps_checksum>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03a      	beq.n	8003ef4 <nmea_parse+0x10c>
           if(strstr(nmeaData[i], "GNGLL")!=NULL){
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <nmea_parse+0x148>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e86:	492d      	ldr	r1, [pc, #180]	; (8003f3c <nmea_parse+0x154>)
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 fb4f 	bl	800952c <strstr>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, nmeaData[i]);
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <nmea_parse+0x148>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fe2e 	bl	8003b00 <nmea_GPGLL>
 8003ea4:	e026      	b.n	8003ef4 <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGSA")!=NULL){
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <nmea_parse+0x148>)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	4924      	ldr	r1, [pc, #144]	; (8003f40 <nmea_parse+0x158>)
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f005 fb3b 	bl	800952c <strstr>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, nmeaData[i]);
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <nmea_parse+0x148>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fd92 	bl	80039f0 <nmea_GPGSA>
 8003ecc:	e012      	b.n	8003ef4 <nmea_parse+0x10c>
           }
           else if(strstr(nmeaData[i], "GNGGA")!=NULL){
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <nmea_parse+0x148>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	491b      	ldr	r1, [pc, #108]	; (8003f44 <nmea_parse+0x15c>)
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f005 fb27 	bl	800952c <strstr>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, nmeaData[i]);
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <nmea_parse+0x148>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fba6 	bl	8003640 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	dba8      	blt.n	8003e54 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(nmeaData[i]);
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	e009      	b.n	8003f1c <nmea_parse+0x134>
 8003f08:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <nmea_parse+0x148>)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 fbb5 	bl	8007680 <free>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	dbf1      	blt.n	8003f08 <nmea_parse+0x120>


}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200027a8 	.word	0x200027a8
 8003f34:	0800bd20 	.word	0x0800bd20
 8003f38:	0800bd24 	.word	0x0800bd24
 8003f3c:	0800bd28 	.word	0x0800bd28
 8003f40:	0800bd30 	.word	0x0800bd30
 8003f44:	0800bd38 	.word	0x0800bd38

08003f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_MspInit+0x5c>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <HAL_MspInit+0x5c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6193      	str	r3, [r2, #24]
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_MspInit+0x5c>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_MspInit+0x5c>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_MspInit+0x5c>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	61d3      	str	r3, [r2, #28]
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_MspInit+0x5c>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_MspInit+0x60>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <HAL_MspInit+0x60>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40010000 	.word	0x40010000

08003fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a15      	ldr	r2, [pc, #84]	; (800401c <HAL_I2C_MspInit+0x70>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d123      	bne.n	8004014 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_I2C_MspInit+0x74>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	; (8004020 <HAL_I2C_MspInit+0x74>)
 8003fd2:	f043 0308 	orr.w	r3, r3, #8
 8003fd6:	6193      	str	r3, [r2, #24]
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_I2C_MspInit+0x74>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fe4:	23c0      	movs	r3, #192	; 0xc0
 8003fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe8:	2312      	movs	r3, #18
 8003fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fec:	2303      	movs	r3, #3
 8003fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	480b      	ldr	r0, [pc, #44]	; (8004024 <HAL_I2C_MspInit+0x78>)
 8003ff8:	f000 febe 	bl	8004d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_I2C_MspInit+0x74>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_I2C_MspInit+0x74>)
 8004002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004006:	61d3      	str	r3, [r2, #28]
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_I2C_MspInit+0x74>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004014:	bf00      	nop
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40005400 	.word	0x40005400
 8004020:	40021000 	.word	0x40021000
 8004024:	40010c00 	.word	0x40010c00

08004028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	; 0x30
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 0320 	add.w	r3, r7, #32
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a85      	ldr	r2, [pc, #532]	; (8004258 <HAL_UART_MspInit+0x230>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d160      	bne.n	800410a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004048:	4b84      	ldr	r3, [pc, #528]	; (800425c <HAL_UART_MspInit+0x234>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4a83      	ldr	r2, [pc, #524]	; (800425c <HAL_UART_MspInit+0x234>)
 800404e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004052:	6193      	str	r3, [r2, #24]
 8004054:	4b81      	ldr	r3, [pc, #516]	; (800425c <HAL_UART_MspInit+0x234>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004060:	4b7e      	ldr	r3, [pc, #504]	; (800425c <HAL_UART_MspInit+0x234>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a7d      	ldr	r2, [pc, #500]	; (800425c <HAL_UART_MspInit+0x234>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	4b7b      	ldr	r3, [pc, #492]	; (800425c <HAL_UART_MspInit+0x234>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004082:	2303      	movs	r3, #3
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0320 	add.w	r3, r7, #32
 800408a:	4619      	mov	r1, r3
 800408c:	4874      	ldr	r0, [pc, #464]	; (8004260 <HAL_UART_MspInit+0x238>)
 800408e:	f000 fe73 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004098:	2300      	movs	r3, #0
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a0:	f107 0320 	add.w	r3, r7, #32
 80040a4:	4619      	mov	r1, r3
 80040a6:	486e      	ldr	r0, [pc, #440]	; (8004260 <HAL_UART_MspInit+0x238>)
 80040a8:	f000 fe66 	bl	8004d78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80040ac:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040ae:	4a6e      	ldr	r2, [pc, #440]	; (8004268 <HAL_UART_MspInit+0x240>)
 80040b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040b2:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040be:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040c4:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ca:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040d2:	2220      	movs	r2, #32
 80040d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040d8:	2200      	movs	r2, #0
 80040da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040dc:	4861      	ldr	r0, [pc, #388]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040de:	f000 fba9 	bl	8004834 <HAL_DMA_Init>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80040e8:	f7ff fa5c 	bl	80035a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80040f2:	4a5c      	ldr	r2, [pc, #368]	; (8004264 <HAL_UART_MspInit+0x23c>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	2025      	movs	r0, #37	; 0x25
 80040fe:	f000 fb62 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004102:	2025      	movs	r0, #37	; 0x25
 8004104:	f000 fb7b 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004108:	e0a2      	b.n	8004250 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a57      	ldr	r2, [pc, #348]	; (800426c <HAL_UART_MspInit+0x244>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d138      	bne.n	8004186 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004114:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_UART_MspInit+0x234>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_UART_MspInit+0x234>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	61d3      	str	r3, [r2, #28]
 8004120:	4b4e      	ldr	r3, [pc, #312]	; (800425c <HAL_UART_MspInit+0x234>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412c:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_UART_MspInit+0x234>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_UART_MspInit+0x234>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	6193      	str	r3, [r2, #24]
 8004138:	4b48      	ldr	r3, [pc, #288]	; (800425c <HAL_UART_MspInit+0x234>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004144:	2304      	movs	r3, #4
 8004146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004148:	2302      	movs	r3, #2
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414c:	2303      	movs	r3, #3
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 0320 	add.w	r3, r7, #32
 8004154:	4619      	mov	r1, r3
 8004156:	4842      	ldr	r0, [pc, #264]	; (8004260 <HAL_UART_MspInit+0x238>)
 8004158:	f000 fe0e 	bl	8004d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800415c:	2308      	movs	r3, #8
 800415e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004160:	2300      	movs	r3, #0
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004168:	f107 0320 	add.w	r3, r7, #32
 800416c:	4619      	mov	r1, r3
 800416e:	483c      	ldr	r0, [pc, #240]	; (8004260 <HAL_UART_MspInit+0x238>)
 8004170:	f000 fe02 	bl	8004d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004174:	2200      	movs	r2, #0
 8004176:	2100      	movs	r1, #0
 8004178:	2026      	movs	r0, #38	; 0x26
 800417a:	f000 fb24 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800417e:	2026      	movs	r0, #38	; 0x26
 8004180:	f000 fb3d 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8004184:	e064      	b.n	8004250 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a39      	ldr	r2, [pc, #228]	; (8004270 <HAL_UART_MspInit+0x248>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d15f      	bne.n	8004250 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_UART_MspInit+0x234>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4a31      	ldr	r2, [pc, #196]	; (800425c <HAL_UART_MspInit+0x234>)
 8004196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419a:	61d3      	str	r3, [r2, #28]
 800419c:	4b2f      	ldr	r3, [pc, #188]	; (800425c <HAL_UART_MspInit+0x234>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a8:	4b2c      	ldr	r3, [pc, #176]	; (800425c <HAL_UART_MspInit+0x234>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	4a2b      	ldr	r2, [pc, #172]	; (800425c <HAL_UART_MspInit+0x234>)
 80041ae:	f043 0308 	orr.w	r3, r3, #8
 80041b2:	6193      	str	r3, [r2, #24]
 80041b4:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_UART_MspInit+0x234>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c6:	2302      	movs	r3, #2
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ca:	2303      	movs	r3, #3
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ce:	f107 0320 	add.w	r3, r7, #32
 80041d2:	4619      	mov	r1, r3
 80041d4:	4827      	ldr	r0, [pc, #156]	; (8004274 <HAL_UART_MspInit+0x24c>)
 80041d6:	f000 fdcf 	bl	8004d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e8:	f107 0320 	add.w	r3, r7, #32
 80041ec:	4619      	mov	r1, r3
 80041ee:	4821      	ldr	r0, [pc, #132]	; (8004274 <HAL_UART_MspInit+0x24c>)
 80041f0:	f000 fdc2 	bl	8004d78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80041f4:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_UART_MspInit+0x250>)
 80041f6:	4a21      	ldr	r2, [pc, #132]	; (800427c <HAL_UART_MspInit+0x254>)
 80041f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041fa:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_UART_MspInit+0x250>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_UART_MspInit+0x250>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_UART_MspInit+0x250>)
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_UART_MspInit+0x250>)
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_UART_MspInit+0x250>)
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_UART_MspInit+0x250>)
 800421a:	2220      	movs	r2, #32
 800421c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_UART_MspInit+0x250>)
 8004220:	2200      	movs	r2, #0
 8004222:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004224:	4814      	ldr	r0, [pc, #80]	; (8004278 <HAL_UART_MspInit+0x250>)
 8004226:	f000 fb05 	bl	8004834 <HAL_DMA_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8004230:	f7ff f9b8 	bl	80035a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_UART_MspInit+0x250>)
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c
 800423a:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <HAL_UART_MspInit+0x250>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	2027      	movs	r0, #39	; 0x27
 8004246:	f000 fabe 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800424a:	2027      	movs	r0, #39	; 0x27
 800424c:	f000 fad7 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8004250:	bf00      	nop
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	40010800 	.word	0x40010800
 8004264:	20000358 	.word	0x20000358
 8004268:	40020058 	.word	0x40020058
 800426c:	40004400 	.word	0x40004400
 8004270:	40004800 	.word	0x40004800
 8004274:	40010c00 	.word	0x40010c00
 8004278:	2000039c 	.word	0x2000039c
 800427c:	40020030 	.word	0x40020030

08004280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004284:	e7fe      	b.n	8004284 <NMI_Handler+0x4>

08004286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428a:	e7fe      	b.n	800428a <HardFault_Handler+0x4>

0800428c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <MemManage_Handler+0x4>

08004292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004296:	e7fe      	b.n	8004296 <BusFault_Handler+0x4>

08004298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800429c:	e7fe      	b.n	800429c <UsageFault_Handler+0x4>

0800429e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c6:	f000 f967 	bl	8004598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}

080042ce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 80042d2:	2001      	movs	r0, #1
 80042d4:	f000 ff1c 	bl	8005110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}

080042dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 80042e0:	2002      	movs	r0, #2
 80042e2:	f000 ff15 	bl	8005110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <DMA1_Channel3_IRQHandler+0x10>)
 80042f2:	f000 fc0d 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000039c 	.word	0x2000039c

08004300 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <DMA1_Channel5_IRQHandler+0x10>)
 8004306:	f000 fc03 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000358 	.word	0x20000358

08004314 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8004318:	2020      	movs	r0, #32
 800431a:	f000 fef9 	bl	8005110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 800431e:	2040      	movs	r0, #64	; 0x40
 8004320:	f000 fef6 	bl	8005110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8004324:	2080      	movs	r0, #128	; 0x80
 8004326:	f000 fef3 	bl	8005110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <USART1_IRQHandler+0x10>)
 8004336:	f002 fa57 	bl	80067e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000280 	.word	0x20000280

08004344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <USART2_IRQHandler+0x10>)
 800434a:	f002 fa4d 	bl	80067e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200002c8 	.word	0x200002c8

08004358 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <USART3_IRQHandler+0x10>)
 800435e:	f002 fa43 	bl	80067e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000310 	.word	0x20000310

0800436c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return 1;
 8004370:	2301      	movs	r3, #1
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <_kill>:

int _kill(int pid, int sig)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004384:	f005 f942 	bl	800960c <__errno>
 8004388:	4603      	mov	r3, r0
 800438a:	2216      	movs	r2, #22
 800438c:	601a      	str	r2, [r3, #0]
  return -1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_exit>:

void _exit (int status)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043a2:	f04f 31ff 	mov.w	r1, #4294967295
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ffe7 	bl	800437a <_kill>
  while (1) {}    /* Make sure we hang here */
 80043ac:	e7fe      	b.n	80043ac <_exit+0x12>

080043ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e00a      	b.n	80043d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043c0:	f3af 8000 	nop.w
 80043c4:	4601      	mov	r1, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	60ba      	str	r2, [r7, #8]
 80043cc:	b2ca      	uxtb	r2, r1
 80043ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3301      	adds	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	dbf0      	blt.n	80043c0 <_read+0x12>
  }

  return len;
 80043de:	687b      	ldr	r3, [r7, #4]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800440e:	605a      	str	r2, [r3, #4]
  return 0;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <_isatty>:

int _isatty(int file)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <_sbrk+0x5c>)
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <_sbrk+0x60>)
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <_sbrk+0x64>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <_sbrk+0x64>)
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <_sbrk+0x68>)
 8004468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <_sbrk+0x64>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d207      	bcs.n	8004488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004478:	f005 f8c8 	bl	800960c <__errno>
 800447c:	4603      	mov	r3, r0
 800447e:	220c      	movs	r2, #12
 8004480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	e009      	b.n	800449c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <_sbrk+0x64>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <_sbrk+0x64>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	4a05      	ldr	r2, [pc, #20]	; (80044ac <_sbrk+0x64>)
 8004498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20005000 	.word	0x20005000
 80044a8:	00000400 	.word	0x00000400
 80044ac:	200027e4 	.word	0x200027e4
 80044b0:	20002938 	.word	0x20002938

080044b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044c0:	f7ff fff8 	bl	80044b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044c4:	480b      	ldr	r0, [pc, #44]	; (80044f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80044c6:	490c      	ldr	r1, [pc, #48]	; (80044f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80044c8:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044cc:	e002      	b.n	80044d4 <LoopCopyDataInit>

080044ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d2:	3304      	adds	r3, #4

080044d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044d8:	d3f9      	bcc.n	80044ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80044dc:	4c09      	ldr	r4, [pc, #36]	; (8004504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e0:	e001      	b.n	80044e6 <LoopFillZerobss>

080044e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e4:	3204      	adds	r2, #4

080044e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044e8:	d3fb      	bcc.n	80044e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ea:	f005 f895 	bl	8009618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044ee:	f7fe f85d 	bl	80025ac <main>
  bx lr
 80044f2:	4770      	bx	lr
  ldr r0, =_sdata
 80044f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044f8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80044fc:	0800c1f8 	.word	0x0800c1f8
  ldr r2, =_sbss
 8004500:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004504:	20002938 	.word	0x20002938

08004508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004508:	e7fe      	b.n	8004508 <ADC1_2_IRQHandler>
	...

0800450c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_Init+0x28>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_Init+0x28>)
 8004516:	f043 0310 	orr.w	r3, r3, #16
 800451a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800451c:	2003      	movs	r0, #3
 800451e:	f000 f947 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004522:	200f      	movs	r0, #15
 8004524:	f000 f808 	bl	8004538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004528:	f7ff fd0e 	bl	8003f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40022000 	.word	0x40022000

08004538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_InitTick+0x54>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_InitTick+0x58>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4619      	mov	r1, r3
 800454a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800454e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004552:	fbb2 f3f3 	udiv	r3, r2, r3
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f95f 	bl	800481a <HAL_SYSTICK_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e00e      	b.n	8004584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b0f      	cmp	r3, #15
 800456a:	d80a      	bhi.n	8004582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800456c:	2200      	movs	r2, #0
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	f000 f927 	bl	80047c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004578:	4a06      	ldr	r2, [pc, #24]	; (8004594 <HAL_InitTick+0x5c>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000038 	.word	0x20000038
 8004590:	20000040 	.word	0x20000040
 8004594:	2000003c 	.word	0x2000003c

08004598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_IncTick+0x1c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_IncTick+0x20>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_IncTick+0x20>)
 80045aa:	6013      	str	r3, [r2, #0]
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	20000040 	.word	0x20000040
 80045b8:	200027e8 	.word	0x200027e8

080045bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return uwTick;
 80045c0:	4b02      	ldr	r3, [pc, #8]	; (80045cc <HAL_GetTick+0x10>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	200027e8 	.word	0x200027e8

080045d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff fff0 	bl	80045bc <HAL_GetTick>
 80045dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d005      	beq.n	80045f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_Delay+0x44>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045f6:	bf00      	nop
 80045f8:	f7ff ffe0 	bl	80045bc <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d8f7      	bhi.n	80045f8 <HAL_Delay+0x28>
  {
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000040 	.word	0x20000040

08004618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004634:	4013      	ands	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <__NVIC_GetPriorityGrouping+0x18>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 0307 	and.w	r3, r3, #7
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db0b      	blt.n	80046a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4906      	ldr	r1, [pc, #24]	; (80046b0 <__NVIC_EnableIRQ+0x34>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2001      	movs	r0, #1
 800469e:	fa00 f202 	lsl.w	r2, r0, r2
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	f7ff ff90 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff2d 	bl	8004618 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff42 	bl	8004660 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff90 	bl	8004708 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5f 	bl	80046b4 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff35 	bl	800467c <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e043      	b.n	80048d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_DMA_Init+0xa8>)
 8004852:	4413      	add	r3, r2
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_DMA_Init+0xac>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	009a      	lsls	r2, r3, #2
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_DMA_Init+0xb0>)
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800487e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800488c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	bffdfff8 	.word	0xbffdfff8
 80048e0:	cccccccd 	.word	0xcccccccd
 80048e4:	40020000 	.word	0x40020000

080048e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_DMA_Start_IT+0x20>
 8004904:	2302      	movs	r3, #2
 8004906:	e04b      	b.n	80049a0 <HAL_DMA_Start_IT+0xb8>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d13a      	bne.n	8004992 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f9eb 	bl	8004d1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 020e 	orr.w	r2, r2, #14
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e00f      	b.n	8004980 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0204 	bic.w	r2, r2, #4
 800496e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 020a 	orr.w	r2, r2, #10
 800497e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e005      	b.n	800499e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d008      	beq.n	80049d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2204      	movs	r2, #4
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e020      	b.n	8004a14 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 020e 	bic.w	r2, r2, #14
 80049e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
	...

08004a20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d005      	beq.n	8004a44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	e051      	b.n	8004ae8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 020e 	bic.w	r2, r2, #14
 8004a52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_DMA_Abort_IT+0xd4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d029      	beq.n	8004ac2 <HAL_DMA_Abort_IT+0xa2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_DMA_Abort_IT+0xd8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_Abort_IT+0x9e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_DMA_Abort_IT+0xdc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01a      	beq.n	8004ab8 <HAL_DMA_Abort_IT+0x98>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_DMA_Abort_IT+0xe0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d012      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x92>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_DMA_Abort_IT+0xe4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00a      	beq.n	8004aac <HAL_DMA_Abort_IT+0x8c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_DMA_Abort_IT+0xe8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d102      	bne.n	8004aa6 <HAL_DMA_Abort_IT+0x86>
 8004aa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004aa4:	e00e      	b.n	8004ac4 <HAL_DMA_Abort_IT+0xa4>
 8004aa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aaa:	e00b      	b.n	8004ac4 <HAL_DMA_Abort_IT+0xa4>
 8004aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab0:	e008      	b.n	8004ac4 <HAL_DMA_Abort_IT+0xa4>
 8004ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab6:	e005      	b.n	8004ac4 <HAL_DMA_Abort_IT+0xa4>
 8004ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004abc:	e002      	b.n	8004ac4 <HAL_DMA_Abort_IT+0xa4>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	e000      	b.n	8004ac4 <HAL_DMA_Abort_IT+0xa4>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <HAL_DMA_Abort_IT+0xec>)
 8004ac6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
    } 
  }
  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40020008 	.word	0x40020008
 8004af8:	4002001c 	.word	0x4002001c
 8004afc:	40020030 	.word	0x40020030
 8004b00:	40020044 	.word	0x40020044
 8004b04:	40020058 	.word	0x40020058
 8004b08:	4002006c 	.word	0x4002006c
 8004b0c:	40020000 	.word	0x40020000

08004b10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d04f      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0xc8>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a66      	ldr	r2, [pc, #408]	; (8004d00 <HAL_DMA_IRQHandler+0x1f0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d029      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xae>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a65      	ldr	r2, [pc, #404]	; (8004d04 <HAL_DMA_IRQHandler+0x1f4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <HAL_DMA_IRQHandler+0xaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a63      	ldr	r2, [pc, #396]	; (8004d08 <HAL_DMA_IRQHandler+0x1f8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01a      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xa4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a62      	ldr	r2, [pc, #392]	; (8004d0c <HAL_DMA_IRQHandler+0x1fc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d012      	beq.n	8004bae <HAL_DMA_IRQHandler+0x9e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a60      	ldr	r2, [pc, #384]	; (8004d10 <HAL_DMA_IRQHandler+0x200>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x98>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5f      	ldr	r2, [pc, #380]	; (8004d14 <HAL_DMA_IRQHandler+0x204>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d102      	bne.n	8004ba2 <HAL_DMA_IRQHandler+0x92>
 8004b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ba0:	e00e      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xb0>
 8004ba2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ba6:	e00b      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xb0>
 8004ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bac:	e008      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xb0>
 8004bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bb2:	e005      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xb0>
 8004bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb8:	e002      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xb0>
 8004bba:	2340      	movs	r3, #64	; 0x40
 8004bbc:	e000      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xb0>
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	4a55      	ldr	r2, [pc, #340]	; (8004d18 <HAL_DMA_IRQHandler+0x208>)
 8004bc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8094 	beq.w	8004cf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004bd6:	e08e      	b.n	8004cf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2202      	movs	r2, #2
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d056      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x186>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d051      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 020a 	bic.w	r2, r2, #10
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <HAL_DMA_IRQHandler+0x1f0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d029      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x166>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <HAL_DMA_IRQHandler+0x1f4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x162>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a35      	ldr	r2, [pc, #212]	; (8004d08 <HAL_DMA_IRQHandler+0x1f8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01a      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x15c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a34      	ldr	r2, [pc, #208]	; (8004d0c <HAL_DMA_IRQHandler+0x1fc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d012      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x156>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a32      	ldr	r2, [pc, #200]	; (8004d10 <HAL_DMA_IRQHandler+0x200>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00a      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x150>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <HAL_DMA_IRQHandler+0x204>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d102      	bne.n	8004c5a <HAL_DMA_IRQHandler+0x14a>
 8004c54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c58:	e00e      	b.n	8004c78 <HAL_DMA_IRQHandler+0x168>
 8004c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c5e:	e00b      	b.n	8004c78 <HAL_DMA_IRQHandler+0x168>
 8004c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c64:	e008      	b.n	8004c78 <HAL_DMA_IRQHandler+0x168>
 8004c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c6a:	e005      	b.n	8004c78 <HAL_DMA_IRQHandler+0x168>
 8004c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c70:	e002      	b.n	8004c78 <HAL_DMA_IRQHandler+0x168>
 8004c72:	2320      	movs	r3, #32
 8004c74:	e000      	b.n	8004c78 <HAL_DMA_IRQHandler+0x168>
 8004c76:	2302      	movs	r3, #2
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <HAL_DMA_IRQHandler+0x208>)
 8004c7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d034      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c94:	e02f      	b.n	8004cf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d028      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x1e8>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d023      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 020e 	bic.w	r2, r2, #14
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f202 	lsl.w	r2, r1, r2
 8004cce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
    }
  }
  return;
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
}
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40020008 	.word	0x40020008
 8004d04:	4002001c 	.word	0x4002001c
 8004d08:	40020030 	.word	0x40020030
 8004d0c:	40020044 	.word	0x40020044
 8004d10:	40020058 	.word	0x40020058
 8004d14:	4002006c 	.word	0x4002006c
 8004d18:	40020000 	.word	0x40020000

08004d1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f202 	lsl.w	r2, r1, r2
 8004d38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d108      	bne.n	8004d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d5a:	e007      	b.n	8004d6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b08b      	sub	sp, #44	; 0x2c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d82:	2300      	movs	r3, #0
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8a:	e169      	b.n	8005060 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	f040 8158 	bne.w	800505a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4a9a      	ldr	r2, [pc, #616]	; (8005018 <HAL_GPIO_Init+0x2a0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d05e      	beq.n	8004e72 <HAL_GPIO_Init+0xfa>
 8004db4:	4a98      	ldr	r2, [pc, #608]	; (8005018 <HAL_GPIO_Init+0x2a0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d875      	bhi.n	8004ea6 <HAL_GPIO_Init+0x12e>
 8004dba:	4a98      	ldr	r2, [pc, #608]	; (800501c <HAL_GPIO_Init+0x2a4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d058      	beq.n	8004e72 <HAL_GPIO_Init+0xfa>
 8004dc0:	4a96      	ldr	r2, [pc, #600]	; (800501c <HAL_GPIO_Init+0x2a4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d86f      	bhi.n	8004ea6 <HAL_GPIO_Init+0x12e>
 8004dc6:	4a96      	ldr	r2, [pc, #600]	; (8005020 <HAL_GPIO_Init+0x2a8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d052      	beq.n	8004e72 <HAL_GPIO_Init+0xfa>
 8004dcc:	4a94      	ldr	r2, [pc, #592]	; (8005020 <HAL_GPIO_Init+0x2a8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d869      	bhi.n	8004ea6 <HAL_GPIO_Init+0x12e>
 8004dd2:	4a94      	ldr	r2, [pc, #592]	; (8005024 <HAL_GPIO_Init+0x2ac>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d04c      	beq.n	8004e72 <HAL_GPIO_Init+0xfa>
 8004dd8:	4a92      	ldr	r2, [pc, #584]	; (8005024 <HAL_GPIO_Init+0x2ac>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d863      	bhi.n	8004ea6 <HAL_GPIO_Init+0x12e>
 8004dde:	4a92      	ldr	r2, [pc, #584]	; (8005028 <HAL_GPIO_Init+0x2b0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d046      	beq.n	8004e72 <HAL_GPIO_Init+0xfa>
 8004de4:	4a90      	ldr	r2, [pc, #576]	; (8005028 <HAL_GPIO_Init+0x2b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d85d      	bhi.n	8004ea6 <HAL_GPIO_Init+0x12e>
 8004dea:	2b12      	cmp	r3, #18
 8004dec:	d82a      	bhi.n	8004e44 <HAL_GPIO_Init+0xcc>
 8004dee:	2b12      	cmp	r3, #18
 8004df0:	d859      	bhi.n	8004ea6 <HAL_GPIO_Init+0x12e>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <HAL_GPIO_Init+0x80>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e73 	.word	0x08004e73
 8004dfc:	08004e4d 	.word	0x08004e4d
 8004e00:	08004e5f 	.word	0x08004e5f
 8004e04:	08004ea1 	.word	0x08004ea1
 8004e08:	08004ea7 	.word	0x08004ea7
 8004e0c:	08004ea7 	.word	0x08004ea7
 8004e10:	08004ea7 	.word	0x08004ea7
 8004e14:	08004ea7 	.word	0x08004ea7
 8004e18:	08004ea7 	.word	0x08004ea7
 8004e1c:	08004ea7 	.word	0x08004ea7
 8004e20:	08004ea7 	.word	0x08004ea7
 8004e24:	08004ea7 	.word	0x08004ea7
 8004e28:	08004ea7 	.word	0x08004ea7
 8004e2c:	08004ea7 	.word	0x08004ea7
 8004e30:	08004ea7 	.word	0x08004ea7
 8004e34:	08004ea7 	.word	0x08004ea7
 8004e38:	08004ea7 	.word	0x08004ea7
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e69 	.word	0x08004e69
 8004e44:	4a79      	ldr	r2, [pc, #484]	; (800502c <HAL_GPIO_Init+0x2b4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e4a:	e02c      	b.n	8004ea6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	623b      	str	r3, [r7, #32]
          break;
 8004e52:	e029      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	623b      	str	r3, [r7, #32]
          break;
 8004e5c:	e024      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	3308      	adds	r3, #8
 8004e64:	623b      	str	r3, [r7, #32]
          break;
 8004e66:	e01f      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	623b      	str	r3, [r7, #32]
          break;
 8004e70:	e01a      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	623b      	str	r3, [r7, #32]
          break;
 8004e7e:	e013      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e88:	2308      	movs	r3, #8
 8004e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	611a      	str	r2, [r3, #16]
          break;
 8004e92:	e009      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e94:	2308      	movs	r3, #8
 8004e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	615a      	str	r2, [r3, #20]
          break;
 8004e9e:	e003      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	623b      	str	r3, [r7, #32]
          break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_GPIO_Init+0x130>
          break;
 8004ea6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2bff      	cmp	r3, #255	; 0xff
 8004eac:	d801      	bhi.n	8004eb2 <HAL_GPIO_Init+0x13a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	e001      	b.n	8004eb6 <HAL_GPIO_Init+0x13e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2bff      	cmp	r3, #255	; 0xff
 8004ebc:	d802      	bhi.n	8004ec4 <HAL_GPIO_Init+0x14c>
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	e002      	b.n	8004eca <HAL_GPIO_Init+0x152>
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	3b08      	subs	r3, #8
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	210f      	movs	r1, #15
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	401a      	ands	r2, r3
 8004edc:	6a39      	ldr	r1, [r7, #32]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80b1 	beq.w	800505a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <HAL_GPIO_Init+0x2b8>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	4a4c      	ldr	r2, [pc, #304]	; (8005030 <HAL_GPIO_Init+0x2b8>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6193      	str	r3, [r2, #24]
 8004f04:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <HAL_GPIO_Init+0x2b8>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f10:	4a48      	ldr	r2, [pc, #288]	; (8005034 <HAL_GPIO_Init+0x2bc>)
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	220f      	movs	r2, #15
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4013      	ands	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <HAL_GPIO_Init+0x2c0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <HAL_GPIO_Init+0x1ec>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_GPIO_Init+0x2c4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00d      	beq.n	8004f60 <HAL_GPIO_Init+0x1e8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3e      	ldr	r2, [pc, #248]	; (8005040 <HAL_GPIO_Init+0x2c8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <HAL_GPIO_Init+0x1e4>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3d      	ldr	r2, [pc, #244]	; (8005044 <HAL_GPIO_Init+0x2cc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_GPIO_Init+0x1e0>
 8004f54:	2303      	movs	r3, #3
 8004f56:	e006      	b.n	8004f66 <HAL_GPIO_Init+0x1ee>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	e004      	b.n	8004f66 <HAL_GPIO_Init+0x1ee>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e002      	b.n	8004f66 <HAL_GPIO_Init+0x1ee>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <HAL_GPIO_Init+0x1ee>
 8004f64:	2300      	movs	r3, #0
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	f002 0203 	and.w	r2, r2, #3
 8004f6c:	0092      	lsls	r2, r2, #2
 8004f6e:	4093      	lsls	r3, r2
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f76:	492f      	ldr	r1, [pc, #188]	; (8005034 <HAL_GPIO_Init+0x2bc>)
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f90:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	492c      	ldr	r1, [pc, #176]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	608b      	str	r3, [r1, #8]
 8004f9c:	e006      	b.n	8004fac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f9e:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	4928      	ldr	r1, [pc, #160]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d006      	beq.n	8004fc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	4922      	ldr	r1, [pc, #136]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
 8004fc4:	e006      	b.n	8004fd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	491e      	ldr	r1, [pc, #120]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4918      	ldr	r1, [pc, #96]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	e006      	b.n	8004ffc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fee:	4b16      	ldr	r3, [pc, #88]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	4914      	ldr	r1, [pc, #80]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d021      	beq.n	800504c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	490e      	ldr	r1, [pc, #56]	; (8005048 <HAL_GPIO_Init+0x2d0>)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
 8005014:	e021      	b.n	800505a <HAL_GPIO_Init+0x2e2>
 8005016:	bf00      	nop
 8005018:	10320000 	.word	0x10320000
 800501c:	10310000 	.word	0x10310000
 8005020:	10220000 	.word	0x10220000
 8005024:	10210000 	.word	0x10210000
 8005028:	10120000 	.word	0x10120000
 800502c:	10110000 	.word	0x10110000
 8005030:	40021000 	.word	0x40021000
 8005034:	40010000 	.word	0x40010000
 8005038:	40010800 	.word	0x40010800
 800503c:	40010c00 	.word	0x40010c00
 8005040:	40011000 	.word	0x40011000
 8005044:	40011400 	.word	0x40011400
 8005048:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_GPIO_Init+0x304>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	43db      	mvns	r3, r3
 8005054:	4909      	ldr	r1, [pc, #36]	; (800507c <HAL_GPIO_Init+0x304>)
 8005056:	4013      	ands	r3, r2
 8005058:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	3301      	adds	r3, #1
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	f47f ae8e 	bne.w	8004d8c <HAL_GPIO_Init+0x14>
  }
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	372c      	adds	r7, #44	; 0x2c
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	40010400 	.word	0x40010400

08005080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e001      	b.n	80050a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
 80050ba:	4613      	mov	r3, r2
 80050bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050be:	787b      	ldrb	r3, [r7, #1]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050c4:	887a      	ldrh	r2, [r7, #2]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050ca:	e003      	b.n	80050d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050cc:	887b      	ldrh	r3, [r7, #2]
 80050ce:	041a      	lsls	r2, r3, #16
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050f0:	887a      	ldrh	r2, [r7, #2]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4013      	ands	r3, r2
 80050f6:	041a      	lsls	r2, r3, #16
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	43d9      	mvns	r1, r3
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	400b      	ands	r3, r1
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005126:	4a05      	ldr	r2, [pc, #20]	; (800513c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe f8cc 	bl	80032cc <HAL_GPIO_EXTI_Callback>
  }
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40010400 	.word	0x40010400

08005140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e12b      	b.n	80053aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe ff20 	bl	8003fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051a4:	f001 f960 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 80051a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4a81      	ldr	r2, [pc, #516]	; (80053b4 <HAL_I2C_Init+0x274>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d807      	bhi.n	80051c4 <HAL_I2C_Init+0x84>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a80      	ldr	r2, [pc, #512]	; (80053b8 <HAL_I2C_Init+0x278>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	bf94      	ite	ls
 80051bc:	2301      	movls	r3, #1
 80051be:	2300      	movhi	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e006      	b.n	80051d2 <HAL_I2C_Init+0x92>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a7d      	ldr	r2, [pc, #500]	; (80053bc <HAL_I2C_Init+0x27c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bf94      	ite	ls
 80051cc:	2301      	movls	r3, #1
 80051ce:	2300      	movhi	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0e7      	b.n	80053aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a78      	ldr	r2, [pc, #480]	; (80053c0 <HAL_I2C_Init+0x280>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0c9b      	lsrs	r3, r3, #18
 80051e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a6a      	ldr	r2, [pc, #424]	; (80053b4 <HAL_I2C_Init+0x274>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <HAL_I2C_Init+0xd4>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	3301      	adds	r3, #1
 8005212:	e009      	b.n	8005228 <HAL_I2C_Init+0xe8>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	4a69      	ldr	r2, [pc, #420]	; (80053c4 <HAL_I2C_Init+0x284>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	099b      	lsrs	r3, r3, #6
 8005226:	3301      	adds	r3, #1
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	430b      	orrs	r3, r1
 800522e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800523a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	495c      	ldr	r1, [pc, #368]	; (80053b4 <HAL_I2C_Init+0x274>)
 8005244:	428b      	cmp	r3, r1
 8005246:	d819      	bhi.n	800527c <HAL_I2C_Init+0x13c>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e59      	subs	r1, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	fbb1 f3f3 	udiv	r3, r1, r3
 8005256:	1c59      	adds	r1, r3, #1
 8005258:	f640 73fc 	movw	r3, #4092	; 0xffc
 800525c:	400b      	ands	r3, r1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_I2C_Init+0x138>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1e59      	subs	r1, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005270:	3301      	adds	r3, #1
 8005272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005276:	e051      	b.n	800531c <HAL_I2C_Init+0x1dc>
 8005278:	2304      	movs	r3, #4
 800527a:	e04f      	b.n	800531c <HAL_I2C_Init+0x1dc>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d111      	bne.n	80052a8 <HAL_I2C_Init+0x168>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1e58      	subs	r0, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6859      	ldr	r1, [r3, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	440b      	add	r3, r1
 8005292:	fbb0 f3f3 	udiv	r3, r0, r3
 8005296:	3301      	adds	r3, #1
 8005298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e012      	b.n	80052ce <HAL_I2C_Init+0x18e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1e58      	subs	r0, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	0099      	lsls	r1, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80052be:	3301      	adds	r3, #1
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_I2C_Init+0x196>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e022      	b.n	800531c <HAL_I2C_Init+0x1dc>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10e      	bne.n	80052fc <HAL_I2C_Init+0x1bc>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1e58      	subs	r0, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	440b      	add	r3, r1
 80052ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80052f0:	3301      	adds	r3, #1
 80052f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fa:	e00f      	b.n	800531c <HAL_I2C_Init+0x1dc>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1e58      	subs	r0, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	0099      	lsls	r1, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005312:	3301      	adds	r3, #1
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	6809      	ldr	r1, [r1, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800534a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6911      	ldr	r1, [r2, #16]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68d2      	ldr	r2, [r2, #12]
 8005356:	4311      	orrs	r1, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	430b      	orrs	r3, r1
 800535e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	000186a0 	.word	0x000186a0
 80053b8:	001e847f 	.word	0x001e847f
 80053bc:	003d08ff 	.word	0x003d08ff
 80053c0:	431bde83 	.word	0x431bde83
 80053c4:	10624dd3 	.word	0x10624dd3

080053c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	461a      	mov	r2, r3
 80053d4:	460b      	mov	r3, r1
 80053d6:	817b      	strh	r3, [r7, #10]
 80053d8:	4613      	mov	r3, r2
 80053da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7ff f8ee 	bl	80045bc <HAL_GetTick>
 80053e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	f040 80e0 	bne.w	80055b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	2319      	movs	r3, #25
 80053f6:	2201      	movs	r2, #1
 80053f8:	4970      	ldr	r1, [pc, #448]	; (80055bc <HAL_I2C_Master_Transmit+0x1f4>)
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fa92 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
 8005408:	e0d3      	b.n	80055b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_I2C_Master_Transmit+0x50>
 8005414:	2302      	movs	r3, #2
 8005416:	e0cc      	b.n	80055b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d007      	beq.n	800543e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800544c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2221      	movs	r2, #33	; 0x21
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2210      	movs	r2, #16
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	893a      	ldrh	r2, [r7, #8]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a50      	ldr	r2, [pc, #320]	; (80055c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005480:	8979      	ldrh	r1, [r7, #10]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f9ca 	bl	8005820 <I2C_MasterRequestWrite>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e08d      	b.n	80055b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054ac:	e066      	b.n	800557c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	6a39      	ldr	r1, [r7, #32]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fb50 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d107      	bne.n	80054d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e06b      	b.n	80055b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	781a      	ldrb	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d11b      	bne.n	8005550 <HAL_I2C_Master_Transmit+0x188>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d017      	beq.n	8005550 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	6a39      	ldr	r1, [r7, #32]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fb47 	bl	8005be8 <I2C_WaitOnBTFFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	2b04      	cmp	r3, #4
 8005566:	d107      	bne.n	8005578 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005576:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e01a      	b.n	80055b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	d194      	bne.n	80054ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e000      	b.n	80055b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
  }
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	00100002 	.word	0x00100002
 80055c0:	ffff0000 	.word	0xffff0000

080055c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	460b      	mov	r3, r1
 80055d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055d4:	f7fe fff2 	bl	80045bc <HAL_GetTick>
 80055d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	f040 8111 	bne.w	800580e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	2319      	movs	r3, #25
 80055f2:	2201      	movs	r2, #1
 80055f4:	4988      	ldr	r1, [pc, #544]	; (8005818 <HAL_I2C_IsDeviceReady+0x254>)
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f994 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
 8005604:	e104      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_I2C_IsDeviceReady+0x50>
 8005610:	2302      	movs	r3, #2
 8005612:	e0fd      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d007      	beq.n	800563a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2224      	movs	r2, #36	; 0x24
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a70      	ldr	r2, [pc, #448]	; (800581c <HAL_I2C_IsDeviceReady+0x258>)
 800565c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f952 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005694:	d103      	bne.n	800569e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e0b6      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056a2:	897b      	ldrh	r3, [r7, #10]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fe ff83 	bl	80045bc <HAL_GetTick>
 80056b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	bf0c      	ite	eq
 80056de:	2301      	moveq	r3, #1
 80056e0:	2300      	movne	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056e6:	e025      	b.n	8005734 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056e8:	f7fe ff68 	bl	80045bc <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <HAL_I2C_IsDeviceReady+0x13a>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	22a0      	movs	r2, #160	; 0xa0
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2ba0      	cmp	r3, #160	; 0xa0
 800573e:	d005      	beq.n	800574c <HAL_I2C_IsDeviceReady+0x188>
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_I2C_IsDeviceReady+0x188>
 8005746:	7dbb      	ldrb	r3, [r7, #22]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0cd      	beq.n	80056e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b02      	cmp	r3, #2
 8005760:	d129      	bne.n	80057b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2319      	movs	r3, #25
 800578e:	2201      	movs	r2, #1
 8005790:	4921      	ldr	r1, [pc, #132]	; (8005818 <HAL_I2C_IsDeviceReady+0x254>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f8c6 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e036      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e02c      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2319      	movs	r3, #25
 80057d6:	2201      	movs	r2, #1
 80057d8:	490f      	ldr	r1, [pc, #60]	; (8005818 <HAL_I2C_IsDeviceReady+0x254>)
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f8a2 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e012      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	f4ff af32 	bcc.w	800565e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	00100002 	.word	0x00100002
 800581c:	ffff0000 	.word	0xffff0000

08005820 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	460b      	mov	r3, r1
 800582e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d006      	beq.n	800584a <I2C_MasterRequestWrite+0x2a>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d003      	beq.n	800584a <I2C_MasterRequestWrite+0x2a>
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005848:	d108      	bne.n	800585c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e00b      	b.n	8005874 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	2b12      	cmp	r3, #18
 8005862:	d107      	bne.n	8005874 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005872:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f84f 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589a:	d103      	bne.n	80058a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e035      	b.n	8005914 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058b0:	d108      	bne.n	80058c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058b2:	897b      	ldrh	r3, [r7, #10]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	e01b      	b.n	80058fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058c4:	897b      	ldrh	r3, [r7, #10]
 80058c6:	11db      	asrs	r3, r3, #7
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f003 0306 	and.w	r3, r3, #6
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f063 030f 	orn	r3, r3, #15
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <I2C_MasterRequestWrite+0xfc>)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f898 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e010      	b.n	8005914 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4907      	ldr	r1, [pc, #28]	; (8005920 <I2C_MasterRequestWrite+0x100>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f888 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	00010008 	.word	0x00010008
 8005920:	00010002 	.word	0x00010002

08005924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	e048      	b.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d044      	beq.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fe fe3d 	bl	80045bc <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d139      	bne.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d10d      	bne.n	800597a <I2C_WaitOnFlagUntilTimeout+0x56>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	43da      	mvns	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	e00c      	b.n	8005994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	43da      	mvns	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	d116      	bne.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e023      	b.n	8005a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0c1b      	lsrs	r3, r3, #16
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10d      	bne.n	80059ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	43da      	mvns	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	e00c      	b.n	8005a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	43da      	mvns	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d093      	beq.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a26:	e071      	b.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a36:	d123      	bne.n	8005a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e067      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d041      	beq.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fe fd98 	bl	80045bc <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d136      	bne.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10c      	bne.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	e00b      	b.n	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	43da      	mvns	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e021      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10c      	bne.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	43da      	mvns	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	4013      	ands	r3, r2
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e00b      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f af6d 	bne.w	8005a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b64:	e034      	b.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f886 	bl	8005c78 <I2C_IsAcknowledgeFailed>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e034      	b.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d028      	beq.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7e:	f7fe fd1d 	bl	80045bc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d302      	bcc.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11d      	bne.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d016      	beq.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d1c3      	bne.n	8005b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf4:	e034      	b.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f83e 	bl	8005c78 <I2C_IsAcknowledgeFailed>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e034      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d028      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fe fcd5 	bl	80045bc <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11d      	bne.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d016      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d1c3      	bne.n	8005bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d11b      	bne.n	8005cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	f043 0204 	orr.w	r2, r3, #4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e272      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8087 	beq.w	8005e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cf4:	4b92      	ldr	r3, [pc, #584]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d00c      	beq.n	8005d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d00:	4b8f      	ldr	r3, [pc, #572]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d112      	bne.n	8005d32 <HAL_RCC_OscConfig+0x5e>
 8005d0c:	4b8c      	ldr	r3, [pc, #560]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d18:	d10b      	bne.n	8005d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1a:	4b89      	ldr	r3, [pc, #548]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d06c      	beq.n	8005e00 <HAL_RCC_OscConfig+0x12c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d168      	bne.n	8005e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e24c      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCC_OscConfig+0x76>
 8005d3c:	4b80      	ldr	r3, [pc, #512]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a7f      	ldr	r2, [pc, #508]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e02e      	b.n	8005da8 <HAL_RCC_OscConfig+0xd4>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x98>
 8005d52:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a7a      	ldr	r2, [pc, #488]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	4b78      	ldr	r3, [pc, #480]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a77      	ldr	r2, [pc, #476]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e01d      	b.n	8005da8 <HAL_RCC_OscConfig+0xd4>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCC_OscConfig+0xbc>
 8005d76:	4b72      	ldr	r3, [pc, #456]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a71      	ldr	r2, [pc, #452]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b6f      	ldr	r3, [pc, #444]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a6e      	ldr	r2, [pc, #440]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e00b      	b.n	8005da8 <HAL_RCC_OscConfig+0xd4>
 8005d90:	4b6b      	ldr	r3, [pc, #428]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6a      	ldr	r2, [pc, #424]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a67      	ldr	r2, [pc, #412]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fe fc04 	bl	80045bc <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fe fc00 	bl	80045bc <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e200      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b5d      	ldr	r3, [pc, #372]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0xe4>
 8005dd6:	e014      	b.n	8005e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fe fbf0 	bl	80045bc <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fe fbec 	bl	80045bc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e1ec      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df2:	4b53      	ldr	r3, [pc, #332]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x10c>
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d063      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e0e:	4b4c      	ldr	r3, [pc, #304]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e1a:	4b49      	ldr	r3, [pc, #292]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d11c      	bne.n	8005e60 <HAL_RCC_OscConfig+0x18c>
 8005e26:	4b46      	ldr	r3, [pc, #280]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d116      	bne.n	8005e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e32:	4b43      	ldr	r3, [pc, #268]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_RCC_OscConfig+0x176>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d001      	beq.n	8005e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e1c0      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4a:	4b3d      	ldr	r3, [pc, #244]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4939      	ldr	r1, [pc, #228]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5e:	e03a      	b.n	8005ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d020      	beq.n	8005eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e68:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <HAL_RCC_OscConfig+0x270>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6e:	f7fe fba5 	bl	80045bc <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e76:	f7fe fba1 	bl	80045bc <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e1a1      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e88:	4b2d      	ldr	r3, [pc, #180]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e94:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4927      	ldr	r1, [pc, #156]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]
 8005ea8:	e015      	b.n	8005ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <HAL_RCC_OscConfig+0x270>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fe fb84 	bl	80045bc <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb8:	f7fe fb80 	bl	80045bc <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e180      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eca:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d03a      	beq.n	8005f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d019      	beq.n	8005f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <HAL_RCC_OscConfig+0x274>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef0:	f7fe fb64 	bl	80045bc <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef8:	f7fe fb60 	bl	80045bc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e160      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f16:	2001      	movs	r0, #1
 8005f18:	f000 face 	bl	80064b8 <RCC_Delay>
 8005f1c:	e01c      	b.n	8005f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCC_OscConfig+0x274>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f24:	f7fe fb4a 	bl	80045bc <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f2a:	e00f      	b.n	8005f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2c:	f7fe fb46 	bl	80045bc <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d908      	bls.n	8005f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e146      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000
 8005f44:	42420000 	.word	0x42420000
 8005f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4c:	4b92      	ldr	r3, [pc, #584]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e9      	bne.n	8005f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80a6 	beq.w	80060b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6a:	4b8b      	ldr	r3, [pc, #556]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10d      	bne.n	8005f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	4b88      	ldr	r3, [pc, #544]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4a87      	ldr	r2, [pc, #540]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f80:	61d3      	str	r3, [r2, #28]
 8005f82:	4b85      	ldr	r3, [pc, #532]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f92:	4b82      	ldr	r3, [pc, #520]	; (800619c <HAL_RCC_OscConfig+0x4c8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d118      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f9e:	4b7f      	ldr	r3, [pc, #508]	; (800619c <HAL_RCC_OscConfig+0x4c8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a7e      	ldr	r2, [pc, #504]	; (800619c <HAL_RCC_OscConfig+0x4c8>)
 8005fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005faa:	f7fe fb07 	bl	80045bc <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb2:	f7fe fb03 	bl	80045bc <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b64      	cmp	r3, #100	; 0x64
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e103      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc4:	4b75      	ldr	r3, [pc, #468]	; (800619c <HAL_RCC_OscConfig+0x4c8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f0      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d106      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x312>
 8005fd8:	4b6f      	ldr	r3, [pc, #444]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4a6e      	ldr	r2, [pc, #440]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	6213      	str	r3, [r2, #32]
 8005fe4:	e02d      	b.n	8006042 <HAL_RCC_OscConfig+0x36e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10c      	bne.n	8006008 <HAL_RCC_OscConfig+0x334>
 8005fee:	4b6a      	ldr	r3, [pc, #424]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4a69      	ldr	r2, [pc, #420]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	6213      	str	r3, [r2, #32]
 8005ffa:	4b67      	ldr	r3, [pc, #412]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	4a66      	ldr	r2, [pc, #408]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006000:	f023 0304 	bic.w	r3, r3, #4
 8006004:	6213      	str	r3, [r2, #32]
 8006006:	e01c      	b.n	8006042 <HAL_RCC_OscConfig+0x36e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b05      	cmp	r3, #5
 800600e:	d10c      	bne.n	800602a <HAL_RCC_OscConfig+0x356>
 8006010:	4b61      	ldr	r3, [pc, #388]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	4a60      	ldr	r2, [pc, #384]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006016:	f043 0304 	orr.w	r3, r3, #4
 800601a:	6213      	str	r3, [r2, #32]
 800601c:	4b5e      	ldr	r3, [pc, #376]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	4a5d      	ldr	r2, [pc, #372]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	6213      	str	r3, [r2, #32]
 8006028:	e00b      	b.n	8006042 <HAL_RCC_OscConfig+0x36e>
 800602a:	4b5b      	ldr	r3, [pc, #364]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	4a5a      	ldr	r2, [pc, #360]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	6213      	str	r3, [r2, #32]
 8006036:	4b58      	ldr	r3, [pc, #352]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4a57      	ldr	r2, [pc, #348]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d015      	beq.n	8006076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604a:	f7fe fab7 	bl	80045bc <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006050:	e00a      	b.n	8006068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006052:	f7fe fab3 	bl	80045bc <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e0b1      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006068:	4b4b      	ldr	r3, [pc, #300]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ee      	beq.n	8006052 <HAL_RCC_OscConfig+0x37e>
 8006074:	e014      	b.n	80060a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006076:	f7fe faa1 	bl	80045bc <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607c:	e00a      	b.n	8006094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fe fa9d 	bl	80045bc <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	; 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e09b      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006094:	4b40      	ldr	r3, [pc, #256]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ee      	bne.n	800607e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a6:	4b3c      	ldr	r3, [pc, #240]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8087 	beq.w	80061ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060bc:	4b36      	ldr	r3, [pc, #216]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 030c 	and.w	r3, r3, #12
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d061      	beq.n	800618c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d146      	bne.n	800615e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d0:	4b33      	ldr	r3, [pc, #204]	; (80061a0 <HAL_RCC_OscConfig+0x4cc>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d6:	f7fe fa71 	bl	80045bc <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060de:	f7fe fa6d 	bl	80045bc <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e06d      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f0:	4b29      	ldr	r3, [pc, #164]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f0      	bne.n	80060de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006104:	d108      	bne.n	8006118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	4921      	ldr	r1, [pc, #132]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006114:	4313      	orrs	r3, r2
 8006116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006118:	4b1f      	ldr	r3, [pc, #124]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a19      	ldr	r1, [r3, #32]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	430b      	orrs	r3, r1
 800612a:	491b      	ldr	r1, [pc, #108]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <HAL_RCC_OscConfig+0x4cc>)
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006136:	f7fe fa41 	bl	80045bc <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613e:	f7fe fa3d 	bl	80045bc <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e03d      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCC_OscConfig+0x46a>
 800615c:	e035      	b.n	80061ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615e:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <HAL_RCC_OscConfig+0x4cc>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fe fa2a 	bl	80045bc <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616c:	f7fe fa26 	bl	80045bc <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e026      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <HAL_RCC_OscConfig+0x4c4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0x498>
 800618a:	e01e      	b.n	80061ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e019      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
 8006198:	40021000 	.word	0x40021000
 800619c:	40007000 	.word	0x40007000
 80061a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <HAL_RCC_OscConfig+0x500>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d106      	bne.n	80061c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d001      	beq.n	80061ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40021000 	.word	0x40021000

080061d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0d0      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061ec:	4b6a      	ldr	r3, [pc, #424]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d910      	bls.n	800621c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fa:	4b67      	ldr	r3, [pc, #412]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 0207 	bic.w	r2, r3, #7
 8006202:	4965      	ldr	r1, [pc, #404]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b63      	ldr	r3, [pc, #396]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0b8      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006234:	4b59      	ldr	r3, [pc, #356]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a58      	ldr	r2, [pc, #352]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 800623a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800623e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800624c:	4b53      	ldr	r3, [pc, #332]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4a52      	ldr	r2, [pc, #328]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b50      	ldr	r3, [pc, #320]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	494d      	ldr	r1, [pc, #308]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006266:	4313      	orrs	r3, r2
 8006268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d040      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b47      	ldr	r3, [pc, #284]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d115      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07f      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006296:	4b41      	ldr	r3, [pc, #260]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e073      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a6:	4b3d      	ldr	r3, [pc, #244]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e06b      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062b6:	4b39      	ldr	r3, [pc, #228]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f023 0203 	bic.w	r2, r3, #3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4936      	ldr	r1, [pc, #216]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062c8:	f7fe f978 	bl	80045bc <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d0:	f7fe f974 	bl	80045bc <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e053      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	4b2d      	ldr	r3, [pc, #180]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f003 020c 	and.w	r2, r3, #12
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d1eb      	bne.n	80062d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062f8:	4b27      	ldr	r3, [pc, #156]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d210      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b24      	ldr	r3, [pc, #144]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	4922      	ldr	r1, [pc, #136]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b20      	ldr	r3, [pc, #128]	; (8006398 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e032      	b.n	800638e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006334:	4b19      	ldr	r3, [pc, #100]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4916      	ldr	r1, [pc, #88]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	490e      	ldr	r1, [pc, #56]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 8006362:	4313      	orrs	r3, r2
 8006364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006366:	f000 f821 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_RCC_ClockConfig+0x1c4>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	490a      	ldr	r1, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x1c8>)
 8006378:	5ccb      	ldrb	r3, [r1, r3]
 800637a:	fa22 f303 	lsr.w	r3, r2, r3
 800637e:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <HAL_RCC_ClockConfig+0x1cc>)
 8006380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <HAL_RCC_ClockConfig+0x1d0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe f8d6 	bl	8004538 <HAL_InitTick>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40022000 	.word	0x40022000
 800639c:	40021000 	.word	0x40021000
 80063a0:	0800bd40 	.word	0x0800bd40
 80063a4:	20000038 	.word	0x20000038
 80063a8:	2000003c 	.word	0x2000003c

080063ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	2300      	movs	r3, #0
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	2300      	movs	r3, #0
 80063c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063c6:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <HAL_RCC_GetSysClockFreq+0x94>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 030c 	and.w	r3, r3, #12
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d002      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x30>
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d003      	beq.n	80063e2 <HAL_RCC_GetSysClockFreq+0x36>
 80063da:	e027      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCC_GetSysClockFreq+0x98>)
 80063de:	613b      	str	r3, [r7, #16]
      break;
 80063e0:	e027      	b.n	8006432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	0c9b      	lsrs	r3, r3, #18
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80063ec:	5cd3      	ldrb	r3, [r2, r3]
 80063ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d010      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063fa:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_RCC_GetSysClockFreq+0x94>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	0c5b      	lsrs	r3, r3, #17
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	4a11      	ldr	r2, [pc, #68]	; (800644c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006406:	5cd3      	ldrb	r3, [r2, r3]
 8006408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <HAL_RCC_GetSysClockFreq+0x98>)
 800640e:	fb03 f202 	mul.w	r2, r3, r2
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	e004      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a0c      	ldr	r2, [pc, #48]	; (8006450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	613b      	str	r3, [r7, #16]
      break;
 800642a:	e002      	b.n	8006432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <HAL_RCC_GetSysClockFreq+0x98>)
 800642e:	613b      	str	r3, [r7, #16]
      break;
 8006430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006432:	693b      	ldr	r3, [r7, #16]
}
 8006434:	4618      	mov	r0, r3
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40021000 	.word	0x40021000
 8006444:	007a1200 	.word	0x007a1200
 8006448:	0800bd58 	.word	0x0800bd58
 800644c:	0800bd68 	.word	0x0800bd68
 8006450:	003d0900 	.word	0x003d0900

08006454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006458:	4b02      	ldr	r3, [pc, #8]	; (8006464 <HAL_RCC_GetHCLKFreq+0x10>)
 800645a:	681b      	ldr	r3, [r3, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	20000038 	.word	0x20000038

08006468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800646c:	f7ff fff2 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4903      	ldr	r1, [pc, #12]	; (800648c <HAL_RCC_GetPCLK1Freq+0x24>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40021000 	.word	0x40021000
 800648c:	0800bd50 	.word	0x0800bd50

08006490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006494:	f7ff ffde 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 8006498:	4602      	mov	r2, r0
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	0adb      	lsrs	r3, r3, #11
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4903      	ldr	r1, [pc, #12]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064a6:	5ccb      	ldrb	r3, [r1, r3]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800bd50 	.word	0x0800bd50

080064b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <RCC_Delay+0x34>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <RCC_Delay+0x38>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0a5b      	lsrs	r3, r3, #9
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064d4:	bf00      	nop
  }
  while (Delay --);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1e5a      	subs	r2, r3, #1
 80064da:	60fa      	str	r2, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f9      	bne.n	80064d4 <RCC_Delay+0x1c>
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	20000038 	.word	0x20000038
 80064f0:	10624dd3 	.word	0x10624dd3

080064f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e042      	b.n	800658c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fd fd84 	bl	8004028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2224      	movs	r2, #36	; 0x24
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f803 	bl	8007544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800654c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800655c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800656c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d16d      	bne.n	8006690 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_UART_Transmit+0x2c>
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e066      	b.n	8006692 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2221      	movs	r2, #33	; 0x21
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065d2:	f7fd fff3 	bl	80045bc <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d108      	bne.n	8006600 <HAL_UART_Transmit+0x6c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	e003      	b.n	8006608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006608:	e02a      	b.n	8006660 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fc92 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e036      	b.n	8006692 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	3302      	adds	r3, #2
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e007      	b.n	8006652 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	3301      	adds	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1cf      	bne.n	800660a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fc62 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e006      	b.n	8006692 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	4613      	mov	r3, r2
 80066a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d112      	bne.n	80066da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_UART_Receive_IT+0x26>
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e00b      	b.n	80066dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fca2 	bl	800701a <UART_Start_Receive_IT>
 80066d6:	4603      	mov	r3, r0
 80066d8:	e000      	b.n	80066dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d112      	bne.n	8006724 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_UART_Receive_DMA+0x26>
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e00b      	b.n	8006726 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	461a      	mov	r2, r3
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fcb6 	bl	800708c <UART_Start_Receive_DMA>
 8006720:	4603      	mov	r3, r0
 8006722:	e000      	b.n	8006726 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b08c      	sub	sp, #48	; 0x30
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4613      	mov	r3, r2
 800673a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b20      	cmp	r3, #32
 8006746:	d14a      	bne.n	80067de <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e043      	b.n	80067e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	461a      	mov	r2, r3
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fc8e 	bl	800708c <UART_Start_Receive_DMA>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800677a:	2b00      	cmp	r3, #0
 800677c:	d12c      	bne.n	80067d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	2b01      	cmp	r3, #1
 8006784:	d125      	bne.n	80067d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	617b      	str	r3, [r7, #20]
   return(result);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f043 0310 	orr.w	r3, r3, #16
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067bc:	627a      	str	r2, [r7, #36]	; 0x24
 80067be:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6a39      	ldr	r1, [r7, #32]
 80067c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80067d0:	e002      	b.n	80067d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80067d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067dc:	e000      	b.n	80067e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80067de:	2302      	movs	r3, #2
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3730      	adds	r7, #48	; 0x30
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b0ba      	sub	sp, #232	; 0xe8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10f      	bne.n	800684e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <HAL_UART_IRQHandler+0x66>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fdbe 	bl	80073c8 <UART_Receive_IT>
      return;
 800684c:	e25b      	b.n	8006d06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800684e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80de 	beq.w	8006a14 <HAL_UART_IRQHandler+0x22c>
 8006858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d106      	bne.n	8006872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006868:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80d1 	beq.w	8006a14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_UART_IRQHandler+0xae>
 800687e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_UART_IRQHandler+0xd2>
 80068a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	f043 0202 	orr.w	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00b      	beq.n	80068de <HAL_UART_IRQHandler+0xf6>
 80068c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	f043 0204 	orr.w	r2, r3, #4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <HAL_UART_IRQHandler+0x126>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 81f2 	beq.w	8006cfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_UART_IRQHandler+0x14e>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fd49 	bl	80073c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <HAL_UART_IRQHandler+0x17a>
 800695a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04f      	beq.n	8006a02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fc53 	bl	800720e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d041      	beq.n	80069fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800698c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1d9      	bne.n	8006976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d013      	beq.n	80069f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	4a7e      	ldr	r2, [pc, #504]	; (8006bc8 <HAL_UART_IRQHandler+0x3e0>)
 80069d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe f822 	bl	8004a20 <HAL_DMA_Abort_IT>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d016      	beq.n	8006a10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e00e      	b.n	8006a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f99c 	bl	8006d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	e00a      	b.n	8006a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f998 	bl	8006d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a00:	e006      	b.n	8006a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f994 	bl	8006d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a0e:	e175      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	bf00      	nop
    return;
 8006a12:	e173      	b.n	8006cfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	f040 814f 	bne.w	8006cbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8148 	beq.w	8006cbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8141 	beq.w	8006cbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	60bb      	str	r3, [r7, #8]
 8006a4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80b6 	beq.w	8006bcc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8145 	beq.w	8006d00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	f080 813e 	bcs.w	8006d00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	f000 8088 	beq.w	8006ba8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ac4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ac8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ad0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1d9      	bne.n	8006a98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e1      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3314      	adds	r3, #20
 8006b26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e3      	bne.n	8006b20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b78:	f023 0310 	bic.w	r3, r3, #16
 8006b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e3      	bne.n	8006b66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fd ff00 	bl	80049a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fa faf4 	bl	80011ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bc4:	e09c      	b.n	8006d00 <HAL_UART_IRQHandler+0x518>
 8006bc6:	bf00      	nop
 8006bc8:	080072d3 	.word	0x080072d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 808e 	beq.w	8006d04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 8089 	beq.w	8006d04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	330c      	adds	r3, #12
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c16:	647a      	str	r2, [r7, #68]	; 0x44
 8006c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e3      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3314      	adds	r3, #20
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	623b      	str	r3, [r7, #32]
   return(result);
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3314      	adds	r3, #20
 8006c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e3      	bne.n	8006c2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0310 	bic.w	r3, r3, #16
 8006c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c94:	61fa      	str	r2, [r7, #28]
 8006c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	69b9      	ldr	r1, [r7, #24]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e3      	bne.n	8006c70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7fa fa79 	bl	80011ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cba:	e023      	b.n	8006d04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_UART_IRQHandler+0x4f4>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb10 	bl	80072fa <UART_Transmit_IT>
    return;
 8006cda:	e014      	b.n	8006d06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <HAL_UART_IRQHandler+0x51e>
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fb4f 	bl	8007398 <UART_EndTransmit_IT>
    return;
 8006cfa:	e004      	b.n	8006d06 <HAL_UART_IRQHandler+0x51e>
    return;
 8006cfc:	bf00      	nop
 8006cfe:	e002      	b.n	8006d06 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d04:	bf00      	nop
  }
}
 8006d06:	37e8      	adds	r7, #232	; 0xe8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr

08006d1e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b09c      	sub	sp, #112	; 0x70
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d172      	bne.n	8006e44 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d60:	2200      	movs	r2, #0
 8006d62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	667b      	str	r3, [r7, #100]	; 0x64
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3314      	adds	r3, #20
 8006db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006db8:	647a      	str	r2, [r7, #68]	; 0x44
 8006dba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3314      	adds	r3, #20
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	623b      	str	r3, [r7, #32]
   return(result);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de2:	663b      	str	r3, [r7, #96]	; 0x60
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3314      	adds	r3, #20
 8006dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dec:	633a      	str	r2, [r7, #48]	; 0x30
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e5      	bne.n	8006dcc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d119      	bne.n	8006e44 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e30:	61fa      	str	r2, [r7, #28]
 8006e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	2200      	movs	r2, #0
 8006e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d106      	bne.n	8006e60 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e56:	4619      	mov	r1, r3
 8006e58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e5a:	f7fa f9a7 	bl	80011ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e5e:	e002      	b.n	8006e66 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e62:	f7fc fb67 	bl	8003534 <HAL_UART_RxCpltCallback>
}
 8006e66:	bf00      	nop
 8006e68:	3770      	adds	r7, #112	; 0x70
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d108      	bne.n	8006e9c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7fa f989 	bl	80011ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e9a:	e002      	b.n	8006ea2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff ff3e 	bl	8006d1e <HAL_UART_RxHalfCpltCallback>
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b21      	cmp	r3, #33	; 0x21
 8006edc:	d108      	bne.n	8006ef0 <UART_DMAError+0x46>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006eea:	68b8      	ldr	r0, [r7, #8]
 8006eec:	f000 f968 	bl	80071c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf14      	ite	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	2300      	moveq	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b22      	cmp	r3, #34	; 0x22
 8006f10:	d108      	bne.n	8006f24 <UART_DMAError+0x7a>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f1e:	68b8      	ldr	r0, [r7, #8]
 8006f20:	f000 f975 	bl	800720e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f28:	f043 0210 	orr.w	r2, r3, #16
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f30:	68b8      	ldr	r0, [r7, #8]
 8006f32:	f7ff fefd 	bl	8006d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b090      	sub	sp, #64	; 0x40
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4e:	e050      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d04c      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f5e:	f7fd fb2d 	bl	80045bc <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d241      	bcs.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f8e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3314      	adds	r3, #20
 8006fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc2:	623a      	str	r2, [r7, #32]
 8006fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	69f9      	ldr	r1, [r7, #28]
 8006fc8:	6a3a      	ldr	r2, [r7, #32]
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d09f      	beq.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3740      	adds	r7, #64	; 0x40
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	4613      	mov	r3, r2
 8007026:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	88fa      	ldrh	r2, [r7, #6]
 8007032:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2222      	movs	r2, #34	; 0x22
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800705e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695a      	ldr	r2, [r3, #20]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0220 	orr.w	r2, r2, #32
 800707e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b098      	sub	sp, #96	; 0x60
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2222      	movs	r2, #34	; 0x22
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	4a3e      	ldr	r2, [pc, #248]	; (80071b4 <UART_Start_Receive_DMA+0x128>)
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	4a3d      	ldr	r2, [pc, #244]	; (80071b8 <UART_Start_Receive_DMA+0x12c>)
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	4a3c      	ldr	r2, [pc, #240]	; (80071bc <UART_Start_Receive_DMA+0x130>)
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	2200      	movs	r2, #0
 80070d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	f7fd fbfc 	bl	80048e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80070f0:	2300      	movs	r3, #0
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d019      	beq.n	8007142 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007124:	65bb      	str	r3, [r7, #88]	; 0x58
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800712e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007130:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800713c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3314      	adds	r3, #20
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	657b      	str	r3, [r7, #84]	; 0x54
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3314      	adds	r3, #20
 8007160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007162:	63ba      	str	r2, [r7, #56]	; 0x38
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	617b      	str	r3, [r7, #20]
   return(result);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718c:	653b      	str	r3, [r7, #80]	; 0x50
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007196:	627a      	str	r2, [r7, #36]	; 0x24
 8007198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6a39      	ldr	r1, [r7, #32]
 800719c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e5      	bne.n	8007176 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3760      	adds	r7, #96	; 0x60
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	08006d43 	.word	0x08006d43
 80071b8:	08006e6f 	.word	0x08006e6f
 80071bc:	08006eab 	.word	0x08006eab

080071c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b089      	sub	sp, #36	; 0x24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	330c      	adds	r3, #12
 80071ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	61ba      	str	r2, [r7, #24]
 80071ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	613b      	str	r3, [r7, #16]
   return(result);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e5      	bne.n	80071c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007204:	bf00      	nop
 8007206:	3724      	adds	r7, #36	; 0x24
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800720e:	b480      	push	{r7}
 8007210:	b095      	sub	sp, #84	; 0x54
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	330c      	adds	r3, #12
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800722c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	330c      	adds	r3, #12
 8007234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007236:	643a      	str	r2, [r7, #64]	; 0x40
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800723c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e5      	bne.n	8007216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	61fb      	str	r3, [r7, #28]
   return(result);
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3314      	adds	r3, #20
 8007268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800726a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e5      	bne.n	800724a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	2b01      	cmp	r3, #1
 8007284:	d119      	bne.n	80072ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	60bb      	str	r3, [r7, #8]
   return(result);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f023 0310 	bic.w	r3, r3, #16
 800729c:	647b      	str	r3, [r7, #68]	; 0x44
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072a6:	61ba      	str	r2, [r7, #24]
 80072a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6979      	ldr	r1, [r7, #20]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	613b      	str	r3, [r7, #16]
   return(result);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e5      	bne.n	8007286 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072c8:	bf00      	nop
 80072ca:	3754      	adds	r7, #84	; 0x54
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff fd1f 	bl	8006d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b21      	cmp	r3, #33	; 0x21
 800730c:	d13e      	bne.n	800738c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007316:	d114      	bne.n	8007342 <UART_Transmit_IT+0x48>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d110      	bne.n	8007342 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007334:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	1c9a      	adds	r2, r3, #2
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	621a      	str	r2, [r3, #32]
 8007340:	e008      	b.n	8007354 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	1c59      	adds	r1, r3, #1
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6211      	str	r1, [r2, #32]
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29b      	uxth	r3, r3
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4619      	mov	r1, r3
 8007362:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10f      	bne.n	8007388 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007376:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007386:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr

08007398 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fca7 	bl	8006d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	; 0x30
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b22      	cmp	r3, #34	; 0x22
 80073da:	f040 80ae 	bne.w	800753a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e6:	d117      	bne.n	8007418 <UART_Receive_IT+0x50>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d113      	bne.n	8007418 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	b29a      	uxth	r2, r3
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	1c9a      	adds	r2, r3, #2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
 8007416:	e026      	b.n	8007466 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742a:	d007      	beq.n	800743c <UART_Receive_IT+0x74>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <UART_Receive_IT+0x82>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b2da      	uxtb	r2, r3
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	e008      	b.n	800745c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007456:	b2da      	uxtb	r2, r3
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29b      	uxth	r3, r3
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007476:	2b00      	cmp	r3, #0
 8007478:	d15d      	bne.n	8007536 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0220 	bic.w	r2, r2, #32
 8007488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007498:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d135      	bne.n	800752c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	613b      	str	r3, [r7, #16]
   return(result);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f023 0310 	bic.w	r3, r3, #16
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e6:	623a      	str	r2, [r7, #32]
 80074e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	69f9      	ldr	r1, [r7, #28]
 80074ec:	6a3a      	ldr	r2, [r7, #32]
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e5      	bne.n	80074c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b10      	cmp	r3, #16
 8007506:	d10a      	bne.n	800751e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7f9 fe41 	bl	80011ac <HAL_UARTEx_RxEventCallback>
 800752a:	e002      	b.n	8007532 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7fc f801 	bl	8003534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	e002      	b.n	800753c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3730      	adds	r7, #48	; 0x30
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800757e:	f023 030c 	bic.w	r3, r3, #12
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	430b      	orrs	r3, r1
 800758a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a2c      	ldr	r2, [pc, #176]	; (8007658 <UART_SetConfig+0x114>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d103      	bne.n	80075b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075ac:	f7fe ff70 	bl	8006490 <HAL_RCC_GetPCLK2Freq>
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	e002      	b.n	80075ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075b4:	f7fe ff58 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 80075b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009a      	lsls	r2, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	4a22      	ldr	r2, [pc, #136]	; (800765c <UART_SetConfig+0x118>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	0119      	lsls	r1, r3, #4
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009a      	lsls	r2, r3, #2
 80075e4:	441a      	add	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <UART_SetConfig+0x118>)
 80075f2:	fba3 0302 	umull	r0, r3, r3, r2
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	2064      	movs	r0, #100	; 0x64
 80075fa:	fb00 f303 	mul.w	r3, r0, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	3332      	adds	r3, #50	; 0x32
 8007604:	4a15      	ldr	r2, [pc, #84]	; (800765c <UART_SetConfig+0x118>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007610:	4419      	add	r1, r3
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009a      	lsls	r2, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	fbb2 f2f3 	udiv	r2, r2, r3
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <UART_SetConfig+0x118>)
 800762a:	fba3 0302 	umull	r0, r3, r3, r2
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2064      	movs	r0, #100	; 0x64
 8007632:	fb00 f303 	mul.w	r3, r0, r3
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	3332      	adds	r3, #50	; 0x32
 800763c:	4a07      	ldr	r2, [pc, #28]	; (800765c <UART_SetConfig+0x118>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f003 020f 	and.w	r2, r3, #15
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	440a      	add	r2, r1
 800764e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40013800 	.word	0x40013800
 800765c:	51eb851f 	.word	0x51eb851f

08007660 <atof>:
 8007660:	2100      	movs	r1, #0
 8007662:	f000 bed9 	b.w	8008418 <strtod>

08007666 <atoi>:
 8007666:	220a      	movs	r2, #10
 8007668:	2100      	movs	r1, #0
 800766a:	f000 bfb7 	b.w	80085dc <strtol>
	...

08007670 <malloc>:
 8007670:	4b02      	ldr	r3, [pc, #8]	; (800767c <malloc+0xc>)
 8007672:	4601      	mov	r1, r0
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	f000 b82b 	b.w	80076d0 <_malloc_r>
 800767a:	bf00      	nop
 800767c:	20000208 	.word	0x20000208

08007680 <free>:
 8007680:	4b02      	ldr	r3, [pc, #8]	; (800768c <free+0xc>)
 8007682:	4601      	mov	r1, r0
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	f002 beab 	b.w	800a3e0 <_free_r>
 800768a:	bf00      	nop
 800768c:	20000208 	.word	0x20000208

08007690 <sbrk_aligned>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4e0e      	ldr	r6, [pc, #56]	; (80076cc <sbrk_aligned+0x3c>)
 8007694:	460c      	mov	r4, r1
 8007696:	6831      	ldr	r1, [r6, #0]
 8007698:	4605      	mov	r5, r0
 800769a:	b911      	cbnz	r1, 80076a2 <sbrk_aligned+0x12>
 800769c:	f001 ff94 	bl	80095c8 <_sbrk_r>
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f001 ff8f 	bl	80095c8 <_sbrk_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d00a      	beq.n	80076c4 <sbrk_aligned+0x34>
 80076ae:	1cc4      	adds	r4, r0, #3
 80076b0:	f024 0403 	bic.w	r4, r4, #3
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d007      	beq.n	80076c8 <sbrk_aligned+0x38>
 80076b8:	1a21      	subs	r1, r4, r0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f001 ff84 	bl	80095c8 <_sbrk_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d101      	bne.n	80076c8 <sbrk_aligned+0x38>
 80076c4:	f04f 34ff 	mov.w	r4, #4294967295
 80076c8:	4620      	mov	r0, r4
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	200027f0 	.word	0x200027f0

080076d0 <_malloc_r>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4607      	mov	r7, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d905      	bls.n	80076f8 <_malloc_r+0x28>
 80076ec:	230c      	movs	r3, #12
 80076ee:	2600      	movs	r6, #0
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4630      	mov	r0, r6
 80076f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077cc <_malloc_r+0xfc>
 80076fc:	f000 f868 	bl	80077d0 <__malloc_lock>
 8007700:	f8d8 3000 	ldr.w	r3, [r8]
 8007704:	461c      	mov	r4, r3
 8007706:	bb5c      	cbnz	r4, 8007760 <_malloc_r+0x90>
 8007708:	4629      	mov	r1, r5
 800770a:	4638      	mov	r0, r7
 800770c:	f7ff ffc0 	bl	8007690 <sbrk_aligned>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	4604      	mov	r4, r0
 8007714:	d155      	bne.n	80077c2 <_malloc_r+0xf2>
 8007716:	f8d8 4000 	ldr.w	r4, [r8]
 800771a:	4626      	mov	r6, r4
 800771c:	2e00      	cmp	r6, #0
 800771e:	d145      	bne.n	80077ac <_malloc_r+0xdc>
 8007720:	2c00      	cmp	r4, #0
 8007722:	d048      	beq.n	80077b6 <_malloc_r+0xe6>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	4631      	mov	r1, r6
 8007728:	4638      	mov	r0, r7
 800772a:	eb04 0903 	add.w	r9, r4, r3
 800772e:	f001 ff4b 	bl	80095c8 <_sbrk_r>
 8007732:	4581      	cmp	r9, r0
 8007734:	d13f      	bne.n	80077b6 <_malloc_r+0xe6>
 8007736:	6821      	ldr	r1, [r4, #0]
 8007738:	4638      	mov	r0, r7
 800773a:	1a6d      	subs	r5, r5, r1
 800773c:	4629      	mov	r1, r5
 800773e:	f7ff ffa7 	bl	8007690 <sbrk_aligned>
 8007742:	3001      	adds	r0, #1
 8007744:	d037      	beq.n	80077b6 <_malloc_r+0xe6>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	442b      	add	r3, r5
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	f8d8 3000 	ldr.w	r3, [r8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d038      	beq.n	80077c6 <_malloc_r+0xf6>
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	42a2      	cmp	r2, r4
 8007758:	d12b      	bne.n	80077b2 <_malloc_r+0xe2>
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	e00f      	b.n	8007780 <_malloc_r+0xb0>
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	1b52      	subs	r2, r2, r5
 8007764:	d41f      	bmi.n	80077a6 <_malloc_r+0xd6>
 8007766:	2a0b      	cmp	r2, #11
 8007768:	d917      	bls.n	800779a <_malloc_r+0xca>
 800776a:	1961      	adds	r1, r4, r5
 800776c:	42a3      	cmp	r3, r4
 800776e:	6025      	str	r5, [r4, #0]
 8007770:	bf18      	it	ne
 8007772:	6059      	strne	r1, [r3, #4]
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	bf08      	it	eq
 8007778:	f8c8 1000 	streq.w	r1, [r8]
 800777c:	5162      	str	r2, [r4, r5]
 800777e:	604b      	str	r3, [r1, #4]
 8007780:	4638      	mov	r0, r7
 8007782:	f104 060b 	add.w	r6, r4, #11
 8007786:	f000 f829 	bl	80077dc <__malloc_unlock>
 800778a:	f026 0607 	bic.w	r6, r6, #7
 800778e:	1d23      	adds	r3, r4, #4
 8007790:	1af2      	subs	r2, r6, r3
 8007792:	d0ae      	beq.n	80076f2 <_malloc_r+0x22>
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	50a3      	str	r3, [r4, r2]
 8007798:	e7ab      	b.n	80076f2 <_malloc_r+0x22>
 800779a:	42a3      	cmp	r3, r4
 800779c:	6862      	ldr	r2, [r4, #4]
 800779e:	d1dd      	bne.n	800775c <_malloc_r+0x8c>
 80077a0:	f8c8 2000 	str.w	r2, [r8]
 80077a4:	e7ec      	b.n	8007780 <_malloc_r+0xb0>
 80077a6:	4623      	mov	r3, r4
 80077a8:	6864      	ldr	r4, [r4, #4]
 80077aa:	e7ac      	b.n	8007706 <_malloc_r+0x36>
 80077ac:	4634      	mov	r4, r6
 80077ae:	6876      	ldr	r6, [r6, #4]
 80077b0:	e7b4      	b.n	800771c <_malloc_r+0x4c>
 80077b2:	4613      	mov	r3, r2
 80077b4:	e7cc      	b.n	8007750 <_malloc_r+0x80>
 80077b6:	230c      	movs	r3, #12
 80077b8:	4638      	mov	r0, r7
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	f000 f80e 	bl	80077dc <__malloc_unlock>
 80077c0:	e797      	b.n	80076f2 <_malloc_r+0x22>
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	e7dc      	b.n	8007780 <_malloc_r+0xb0>
 80077c6:	605b      	str	r3, [r3, #4]
 80077c8:	deff      	udf	#255	; 0xff
 80077ca:	bf00      	nop
 80077cc:	200027ec 	.word	0x200027ec

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__malloc_lock+0x8>)
 80077d2:	f001 bf46 	b.w	8009662 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20002934 	.word	0x20002934

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_unlock+0x8>)
 80077de:	f001 bf41 	b.w	8009664 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20002934 	.word	0x20002934

080077e8 <sulp>:
 80077e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ec:	460f      	mov	r7, r1
 80077ee:	4690      	mov	r8, r2
 80077f0:	f003 fd16 	bl	800b220 <__ulp>
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	f1b8 0f00 	cmp.w	r8, #0
 80077fc:	d011      	beq.n	8007822 <sulp+0x3a>
 80077fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd0b      	ble.n	8007822 <sulp+0x3a>
 800780a:	2400      	movs	r4, #0
 800780c:	051b      	lsls	r3, r3, #20
 800780e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007812:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007816:	4622      	mov	r2, r4
 8007818:	462b      	mov	r3, r5
 800781a:	f7f8 fe5d 	bl	80004d8 <__aeabi_dmul>
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
 8007822:	4620      	mov	r0, r4
 8007824:	4629      	mov	r1, r5
 8007826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782a:	0000      	movs	r0, r0
 800782c:	0000      	movs	r0, r0
	...

08007830 <_strtod_l>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	b09f      	sub	sp, #124	; 0x7c
 8007836:	9217      	str	r2, [sp, #92]	; 0x5c
 8007838:	2200      	movs	r2, #0
 800783a:	4604      	mov	r4, r0
 800783c:	921a      	str	r2, [sp, #104]	; 0x68
 800783e:	460d      	mov	r5, r1
 8007840:	f04f 0800 	mov.w	r8, #0
 8007844:	f04f 0900 	mov.w	r9, #0
 8007848:	460a      	mov	r2, r1
 800784a:	9219      	str	r2, [sp, #100]	; 0x64
 800784c:	7811      	ldrb	r1, [r2, #0]
 800784e:	292b      	cmp	r1, #43	; 0x2b
 8007850:	d04a      	beq.n	80078e8 <_strtod_l+0xb8>
 8007852:	d838      	bhi.n	80078c6 <_strtod_l+0x96>
 8007854:	290d      	cmp	r1, #13
 8007856:	d832      	bhi.n	80078be <_strtod_l+0x8e>
 8007858:	2908      	cmp	r1, #8
 800785a:	d832      	bhi.n	80078c2 <_strtod_l+0x92>
 800785c:	2900      	cmp	r1, #0
 800785e:	d03b      	beq.n	80078d8 <_strtod_l+0xa8>
 8007860:	2200      	movs	r2, #0
 8007862:	920e      	str	r2, [sp, #56]	; 0x38
 8007864:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007866:	7832      	ldrb	r2, [r6, #0]
 8007868:	2a30      	cmp	r2, #48	; 0x30
 800786a:	f040 80b2 	bne.w	80079d2 <_strtod_l+0x1a2>
 800786e:	7872      	ldrb	r2, [r6, #1]
 8007870:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007874:	2a58      	cmp	r2, #88	; 0x58
 8007876:	d16e      	bne.n	8007956 <_strtod_l+0x126>
 8007878:	9302      	str	r3, [sp, #8]
 800787a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800787c:	4620      	mov	r0, r4
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	ab1a      	add	r3, sp, #104	; 0x68
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	4a8c      	ldr	r2, [pc, #560]	; (8007ab8 <_strtod_l+0x288>)
 8007886:	ab1b      	add	r3, sp, #108	; 0x6c
 8007888:	a919      	add	r1, sp, #100	; 0x64
 800788a:	f002 fe59 	bl	800a540 <__gethex>
 800788e:	f010 070f 	ands.w	r7, r0, #15
 8007892:	4605      	mov	r5, r0
 8007894:	d005      	beq.n	80078a2 <_strtod_l+0x72>
 8007896:	2f06      	cmp	r7, #6
 8007898:	d128      	bne.n	80078ec <_strtod_l+0xbc>
 800789a:	2300      	movs	r3, #0
 800789c:	3601      	adds	r6, #1
 800789e:	9619      	str	r6, [sp, #100]	; 0x64
 80078a0:	930e      	str	r3, [sp, #56]	; 0x38
 80078a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f040 85a0 	bne.w	80083ea <_strtod_l+0xbba>
 80078aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ac:	b1cb      	cbz	r3, 80078e2 <_strtod_l+0xb2>
 80078ae:	4642      	mov	r2, r8
 80078b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078b4:	4610      	mov	r0, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	b01f      	add	sp, #124	; 0x7c
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	2920      	cmp	r1, #32
 80078c0:	d1ce      	bne.n	8007860 <_strtod_l+0x30>
 80078c2:	3201      	adds	r2, #1
 80078c4:	e7c1      	b.n	800784a <_strtod_l+0x1a>
 80078c6:	292d      	cmp	r1, #45	; 0x2d
 80078c8:	d1ca      	bne.n	8007860 <_strtod_l+0x30>
 80078ca:	2101      	movs	r1, #1
 80078cc:	910e      	str	r1, [sp, #56]	; 0x38
 80078ce:	1c51      	adds	r1, r2, #1
 80078d0:	9119      	str	r1, [sp, #100]	; 0x64
 80078d2:	7852      	ldrb	r2, [r2, #1]
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d1c5      	bne.n	8007864 <_strtod_l+0x34>
 80078d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078da:	9519      	str	r5, [sp, #100]	; 0x64
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8582 	bne.w	80083e6 <_strtod_l+0xbb6>
 80078e2:	4642      	mov	r2, r8
 80078e4:	464b      	mov	r3, r9
 80078e6:	e7e5      	b.n	80078b4 <_strtod_l+0x84>
 80078e8:	2100      	movs	r1, #0
 80078ea:	e7ef      	b.n	80078cc <_strtod_l+0x9c>
 80078ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078ee:	b13a      	cbz	r2, 8007900 <_strtod_l+0xd0>
 80078f0:	2135      	movs	r1, #53	; 0x35
 80078f2:	a81c      	add	r0, sp, #112	; 0x70
 80078f4:	f003 fd80 	bl	800b3f8 <__copybits>
 80078f8:	4620      	mov	r0, r4
 80078fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078fc:	f003 f964 	bl	800abc8 <_Bfree>
 8007900:	3f01      	subs	r7, #1
 8007902:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007904:	2f04      	cmp	r7, #4
 8007906:	d806      	bhi.n	8007916 <_strtod_l+0xe6>
 8007908:	e8df f007 	tbb	[pc, r7]
 800790c:	201d0314 	.word	0x201d0314
 8007910:	14          	.byte	0x14
 8007911:	00          	.byte	0x00
 8007912:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007916:	05e9      	lsls	r1, r5, #23
 8007918:	bf48      	it	mi
 800791a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800791e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007922:	0d1b      	lsrs	r3, r3, #20
 8007924:	051b      	lsls	r3, r3, #20
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1bb      	bne.n	80078a2 <_strtod_l+0x72>
 800792a:	f001 fe6f 	bl	800960c <__errno>
 800792e:	2322      	movs	r3, #34	; 0x22
 8007930:	6003      	str	r3, [r0, #0]
 8007932:	e7b6      	b.n	80078a2 <_strtod_l+0x72>
 8007934:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007938:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800793c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007940:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007944:	e7e7      	b.n	8007916 <_strtod_l+0xe6>
 8007946:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007abc <_strtod_l+0x28c>
 800794a:	e7e4      	b.n	8007916 <_strtod_l+0xe6>
 800794c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007950:	f04f 38ff 	mov.w	r8, #4294967295
 8007954:	e7df      	b.n	8007916 <_strtod_l+0xe6>
 8007956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	9219      	str	r2, [sp, #100]	; 0x64
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b30      	cmp	r3, #48	; 0x30
 8007960:	d0f9      	beq.n	8007956 <_strtod_l+0x126>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d09d      	beq.n	80078a2 <_strtod_l+0x72>
 8007966:	2301      	movs	r3, #1
 8007968:	f04f 0a00 	mov.w	sl, #0
 800796c:	220a      	movs	r2, #10
 800796e:	46d3      	mov	fp, sl
 8007970:	9305      	str	r3, [sp, #20]
 8007972:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007974:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007978:	930b      	str	r3, [sp, #44]	; 0x2c
 800797a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800797c:	7806      	ldrb	r6, [r0, #0]
 800797e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007982:	b2d9      	uxtb	r1, r3
 8007984:	2909      	cmp	r1, #9
 8007986:	d926      	bls.n	80079d6 <_strtod_l+0x1a6>
 8007988:	2201      	movs	r2, #1
 800798a:	494d      	ldr	r1, [pc, #308]	; (8007ac0 <_strtod_l+0x290>)
 800798c:	f001 fd4c 	bl	8009428 <strncmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	d030      	beq.n	80079f6 <_strtod_l+0x1c6>
 8007994:	2000      	movs	r0, #0
 8007996:	4632      	mov	r2, r6
 8007998:	4603      	mov	r3, r0
 800799a:	465e      	mov	r6, fp
 800799c:	9008      	str	r0, [sp, #32]
 800799e:	2a65      	cmp	r2, #101	; 0x65
 80079a0:	d001      	beq.n	80079a6 <_strtod_l+0x176>
 80079a2:	2a45      	cmp	r2, #69	; 0x45
 80079a4:	d113      	bne.n	80079ce <_strtod_l+0x19e>
 80079a6:	b91e      	cbnz	r6, 80079b0 <_strtod_l+0x180>
 80079a8:	9a05      	ldr	r2, [sp, #20]
 80079aa:	4302      	orrs	r2, r0
 80079ac:	d094      	beq.n	80078d8 <_strtod_l+0xa8>
 80079ae:	2600      	movs	r6, #0
 80079b0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80079b2:	1c6a      	adds	r2, r5, #1
 80079b4:	9219      	str	r2, [sp, #100]	; 0x64
 80079b6:	786a      	ldrb	r2, [r5, #1]
 80079b8:	2a2b      	cmp	r2, #43	; 0x2b
 80079ba:	d074      	beq.n	8007aa6 <_strtod_l+0x276>
 80079bc:	2a2d      	cmp	r2, #45	; 0x2d
 80079be:	d078      	beq.n	8007ab2 <_strtod_l+0x282>
 80079c0:	f04f 0c00 	mov.w	ip, #0
 80079c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079c8:	2909      	cmp	r1, #9
 80079ca:	d97f      	bls.n	8007acc <_strtod_l+0x29c>
 80079cc:	9519      	str	r5, [sp, #100]	; 0x64
 80079ce:	2700      	movs	r7, #0
 80079d0:	e09e      	b.n	8007b10 <_strtod_l+0x2e0>
 80079d2:	2300      	movs	r3, #0
 80079d4:	e7c8      	b.n	8007968 <_strtod_l+0x138>
 80079d6:	f1bb 0f08 	cmp.w	fp, #8
 80079da:	bfd8      	it	le
 80079dc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80079de:	f100 0001 	add.w	r0, r0, #1
 80079e2:	bfd6      	itet	le
 80079e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80079e8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80079ec:	930a      	strle	r3, [sp, #40]	; 0x28
 80079ee:	f10b 0b01 	add.w	fp, fp, #1
 80079f2:	9019      	str	r0, [sp, #100]	; 0x64
 80079f4:	e7c1      	b.n	800797a <_strtod_l+0x14a>
 80079f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	9219      	str	r2, [sp, #100]	; 0x64
 80079fc:	785a      	ldrb	r2, [r3, #1]
 80079fe:	f1bb 0f00 	cmp.w	fp, #0
 8007a02:	d037      	beq.n	8007a74 <_strtod_l+0x244>
 8007a04:	465e      	mov	r6, fp
 8007a06:	9008      	str	r0, [sp, #32]
 8007a08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a0c:	2b09      	cmp	r3, #9
 8007a0e:	d912      	bls.n	8007a36 <_strtod_l+0x206>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e7c4      	b.n	800799e <_strtod_l+0x16e>
 8007a14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a16:	3001      	adds	r0, #1
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	9219      	str	r2, [sp, #100]	; 0x64
 8007a1c:	785a      	ldrb	r2, [r3, #1]
 8007a1e:	2a30      	cmp	r2, #48	; 0x30
 8007a20:	d0f8      	beq.n	8007a14 <_strtod_l+0x1e4>
 8007a22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	f200 84e4 	bhi.w	80083f4 <_strtod_l+0xbc4>
 8007a2c:	9008      	str	r0, [sp, #32]
 8007a2e:	2000      	movs	r0, #0
 8007a30:	4606      	mov	r6, r0
 8007a32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a36:	3a30      	subs	r2, #48	; 0x30
 8007a38:	f100 0301 	add.w	r3, r0, #1
 8007a3c:	d014      	beq.n	8007a68 <_strtod_l+0x238>
 8007a3e:	9908      	ldr	r1, [sp, #32]
 8007a40:	eb00 0c06 	add.w	ip, r0, r6
 8007a44:	4419      	add	r1, r3
 8007a46:	9108      	str	r1, [sp, #32]
 8007a48:	4633      	mov	r3, r6
 8007a4a:	210a      	movs	r1, #10
 8007a4c:	4563      	cmp	r3, ip
 8007a4e:	d113      	bne.n	8007a78 <_strtod_l+0x248>
 8007a50:	1833      	adds	r3, r6, r0
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	f106 0601 	add.w	r6, r6, #1
 8007a58:	4406      	add	r6, r0
 8007a5a:	dc1a      	bgt.n	8007a92 <_strtod_l+0x262>
 8007a5c:	230a      	movs	r3, #10
 8007a5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a60:	fb03 2301 	mla	r3, r3, r1, r2
 8007a64:	930a      	str	r3, [sp, #40]	; 0x28
 8007a66:	2300      	movs	r3, #0
 8007a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	1c51      	adds	r1, r2, #1
 8007a6e:	9119      	str	r1, [sp, #100]	; 0x64
 8007a70:	7852      	ldrb	r2, [r2, #1]
 8007a72:	e7c9      	b.n	8007a08 <_strtod_l+0x1d8>
 8007a74:	4658      	mov	r0, fp
 8007a76:	e7d2      	b.n	8007a1e <_strtod_l+0x1ee>
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	f103 0301 	add.w	r3, r3, #1
 8007a7e:	dc03      	bgt.n	8007a88 <_strtod_l+0x258>
 8007a80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007a82:	434f      	muls	r7, r1
 8007a84:	970a      	str	r7, [sp, #40]	; 0x28
 8007a86:	e7e1      	b.n	8007a4c <_strtod_l+0x21c>
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	bfd8      	it	le
 8007a8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007a90:	e7dc      	b.n	8007a4c <_strtod_l+0x21c>
 8007a92:	2e10      	cmp	r6, #16
 8007a94:	bfdc      	itt	le
 8007a96:	230a      	movle	r3, #10
 8007a98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007a9c:	e7e3      	b.n	8007a66 <_strtod_l+0x236>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e780      	b.n	80079a8 <_strtod_l+0x178>
 8007aa6:	f04f 0c00 	mov.w	ip, #0
 8007aaa:	1caa      	adds	r2, r5, #2
 8007aac:	9219      	str	r2, [sp, #100]	; 0x64
 8007aae:	78aa      	ldrb	r2, [r5, #2]
 8007ab0:	e788      	b.n	80079c4 <_strtod_l+0x194>
 8007ab2:	f04f 0c01 	mov.w	ip, #1
 8007ab6:	e7f8      	b.n	8007aaa <_strtod_l+0x27a>
 8007ab8:	0800bd6c 	.word	0x0800bd6c
 8007abc:	7ff00000 	.word	0x7ff00000
 8007ac0:	0800bd6a 	.word	0x0800bd6a
 8007ac4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ac6:	1c51      	adds	r1, r2, #1
 8007ac8:	9119      	str	r1, [sp, #100]	; 0x64
 8007aca:	7852      	ldrb	r2, [r2, #1]
 8007acc:	2a30      	cmp	r2, #48	; 0x30
 8007ace:	d0f9      	beq.n	8007ac4 <_strtod_l+0x294>
 8007ad0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007ad4:	2908      	cmp	r1, #8
 8007ad6:	f63f af7a 	bhi.w	80079ce <_strtod_l+0x19e>
 8007ada:	3a30      	subs	r2, #48	; 0x30
 8007adc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ade:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ae0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ae2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ae4:	1c57      	adds	r7, r2, #1
 8007ae6:	9719      	str	r7, [sp, #100]	; 0x64
 8007ae8:	7852      	ldrb	r2, [r2, #1]
 8007aea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007aee:	f1be 0f09 	cmp.w	lr, #9
 8007af2:	d938      	bls.n	8007b66 <_strtod_l+0x336>
 8007af4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007af6:	1a7f      	subs	r7, r7, r1
 8007af8:	2f08      	cmp	r7, #8
 8007afa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007afe:	dc03      	bgt.n	8007b08 <_strtod_l+0x2d8>
 8007b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b02:	428f      	cmp	r7, r1
 8007b04:	bfa8      	it	ge
 8007b06:	460f      	movge	r7, r1
 8007b08:	f1bc 0f00 	cmp.w	ip, #0
 8007b0c:	d000      	beq.n	8007b10 <_strtod_l+0x2e0>
 8007b0e:	427f      	negs	r7, r7
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	d14f      	bne.n	8007bb4 <_strtod_l+0x384>
 8007b14:	9905      	ldr	r1, [sp, #20]
 8007b16:	4301      	orrs	r1, r0
 8007b18:	f47f aec3 	bne.w	80078a2 <_strtod_l+0x72>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f47f aedb 	bne.w	80078d8 <_strtod_l+0xa8>
 8007b22:	2a69      	cmp	r2, #105	; 0x69
 8007b24:	d029      	beq.n	8007b7a <_strtod_l+0x34a>
 8007b26:	dc26      	bgt.n	8007b76 <_strtod_l+0x346>
 8007b28:	2a49      	cmp	r2, #73	; 0x49
 8007b2a:	d026      	beq.n	8007b7a <_strtod_l+0x34a>
 8007b2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007b2e:	f47f aed3 	bne.w	80078d8 <_strtod_l+0xa8>
 8007b32:	499a      	ldr	r1, [pc, #616]	; (8007d9c <_strtod_l+0x56c>)
 8007b34:	a819      	add	r0, sp, #100	; 0x64
 8007b36:	f002 ff45 	bl	800a9c4 <__match>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	f43f aecc 	beq.w	80078d8 <_strtod_l+0xa8>
 8007b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b28      	cmp	r3, #40	; 0x28
 8007b46:	d12f      	bne.n	8007ba8 <_strtod_l+0x378>
 8007b48:	4995      	ldr	r1, [pc, #596]	; (8007da0 <_strtod_l+0x570>)
 8007b4a:	aa1c      	add	r2, sp, #112	; 0x70
 8007b4c:	a819      	add	r0, sp, #100	; 0x64
 8007b4e:	f002 ff4d 	bl	800a9ec <__hexnan>
 8007b52:	2805      	cmp	r0, #5
 8007b54:	d128      	bne.n	8007ba8 <_strtod_l+0x378>
 8007b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007b5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007b60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007b64:	e69d      	b.n	80078a2 <_strtod_l+0x72>
 8007b66:	210a      	movs	r1, #10
 8007b68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b6a:	fb01 2107 	mla	r1, r1, r7, r2
 8007b6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007b72:	9209      	str	r2, [sp, #36]	; 0x24
 8007b74:	e7b5      	b.n	8007ae2 <_strtod_l+0x2b2>
 8007b76:	2a6e      	cmp	r2, #110	; 0x6e
 8007b78:	e7d9      	b.n	8007b2e <_strtod_l+0x2fe>
 8007b7a:	498a      	ldr	r1, [pc, #552]	; (8007da4 <_strtod_l+0x574>)
 8007b7c:	a819      	add	r0, sp, #100	; 0x64
 8007b7e:	f002 ff21 	bl	800a9c4 <__match>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f43f aea8 	beq.w	80078d8 <_strtod_l+0xa8>
 8007b88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b8a:	4987      	ldr	r1, [pc, #540]	; (8007da8 <_strtod_l+0x578>)
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	a819      	add	r0, sp, #100	; 0x64
 8007b90:	9319      	str	r3, [sp, #100]	; 0x64
 8007b92:	f002 ff17 	bl	800a9c4 <__match>
 8007b96:	b910      	cbnz	r0, 8007b9e <_strtod_l+0x36e>
 8007b98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	9319      	str	r3, [sp, #100]	; 0x64
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007dac <_strtod_l+0x57c>
 8007ba6:	e67c      	b.n	80078a2 <_strtod_l+0x72>
 8007ba8:	4881      	ldr	r0, [pc, #516]	; (8007db0 <_strtod_l+0x580>)
 8007baa:	f001 fd81 	bl	80096b0 <nan>
 8007bae:	4680      	mov	r8, r0
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	e676      	b.n	80078a2 <_strtod_l+0x72>
 8007bb4:	9b08      	ldr	r3, [sp, #32]
 8007bb6:	f1bb 0f00 	cmp.w	fp, #0
 8007bba:	bf08      	it	eq
 8007bbc:	46b3      	moveq	fp, r6
 8007bbe:	1afb      	subs	r3, r7, r3
 8007bc0:	2e10      	cmp	r6, #16
 8007bc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bc4:	4635      	mov	r5, r6
 8007bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc8:	bfa8      	it	ge
 8007bca:	2510      	movge	r5, #16
 8007bcc:	f7f8 fc0a 	bl	80003e4 <__aeabi_ui2d>
 8007bd0:	2e09      	cmp	r6, #9
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4689      	mov	r9, r1
 8007bd6:	dd13      	ble.n	8007c00 <_strtod_l+0x3d0>
 8007bd8:	4b76      	ldr	r3, [pc, #472]	; (8007db4 <_strtod_l+0x584>)
 8007bda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007be2:	f7f8 fc79 	bl	80004d8 <__aeabi_dmul>
 8007be6:	4680      	mov	r8, r0
 8007be8:	4650      	mov	r0, sl
 8007bea:	4689      	mov	r9, r1
 8007bec:	f7f8 fbfa 	bl	80003e4 <__aeabi_ui2d>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 fab8 	bl	800016c <__adddf3>
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	2e0f      	cmp	r6, #15
 8007c02:	dc36      	bgt.n	8007c72 <_strtod_l+0x442>
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f43f ae4b 	beq.w	80078a2 <_strtod_l+0x72>
 8007c0c:	dd22      	ble.n	8007c54 <_strtod_l+0x424>
 8007c0e:	2b16      	cmp	r3, #22
 8007c10:	dc09      	bgt.n	8007c26 <_strtod_l+0x3f6>
 8007c12:	4968      	ldr	r1, [pc, #416]	; (8007db4 <_strtod_l+0x584>)
 8007c14:	4642      	mov	r2, r8
 8007c16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c20:	f7f8 fc5a 	bl	80004d8 <__aeabi_dmul>
 8007c24:	e7c3      	b.n	8007bae <_strtod_l+0x37e>
 8007c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c28:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	db20      	blt.n	8007c72 <_strtod_l+0x442>
 8007c30:	4c60      	ldr	r4, [pc, #384]	; (8007db4 <_strtod_l+0x584>)
 8007c32:	f1c6 060f 	rsb	r6, r6, #15
 8007c36:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c40:	464b      	mov	r3, r9
 8007c42:	f7f8 fc49 	bl	80004d8 <__aeabi_dmul>
 8007c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c48:	1b9e      	subs	r6, r3, r6
 8007c4a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c52:	e7e5      	b.n	8007c20 <_strtod_l+0x3f0>
 8007c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c56:	3316      	adds	r3, #22
 8007c58:	db0b      	blt.n	8007c72 <_strtod_l+0x442>
 8007c5a:	9b08      	ldr	r3, [sp, #32]
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	1bdf      	subs	r7, r3, r7
 8007c60:	4b54      	ldr	r3, [pc, #336]	; (8007db4 <_strtod_l+0x584>)
 8007c62:	4649      	mov	r1, r9
 8007c64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6c:	f7f8 fd5e 	bl	800072c <__aeabi_ddiv>
 8007c70:	e79d      	b.n	8007bae <_strtod_l+0x37e>
 8007c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c74:	1b75      	subs	r5, r6, r5
 8007c76:	441d      	add	r5, r3
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	dd70      	ble.n	8007d5e <_strtod_l+0x52e>
 8007c7c:	f015 030f 	ands.w	r3, r5, #15
 8007c80:	d00a      	beq.n	8007c98 <_strtod_l+0x468>
 8007c82:	494c      	ldr	r1, [pc, #304]	; (8007db4 <_strtod_l+0x584>)
 8007c84:	4642      	mov	r2, r8
 8007c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c8e:	464b      	mov	r3, r9
 8007c90:	f7f8 fc22 	bl	80004d8 <__aeabi_dmul>
 8007c94:	4680      	mov	r8, r0
 8007c96:	4689      	mov	r9, r1
 8007c98:	f035 050f 	bics.w	r5, r5, #15
 8007c9c:	d04d      	beq.n	8007d3a <_strtod_l+0x50a>
 8007c9e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007ca2:	dd22      	ble.n	8007cea <_strtod_l+0x4ba>
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	46b3      	mov	fp, r6
 8007ca8:	960b      	str	r6, [sp, #44]	; 0x2c
 8007caa:	9608      	str	r6, [sp, #32]
 8007cac:	2322      	movs	r3, #34	; 0x22
 8007cae:	f04f 0800 	mov.w	r8, #0
 8007cb2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007dac <_strtod_l+0x57c>
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f43f adf1 	beq.w	80078a2 <_strtod_l+0x72>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cc4:	f002 ff80 	bl	800abc8 <_Bfree>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	9908      	ldr	r1, [sp, #32]
 8007ccc:	f002 ff7c 	bl	800abc8 <_Bfree>
 8007cd0:	4659      	mov	r1, fp
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f002 ff78 	bl	800abc8 <_Bfree>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cdc:	f002 ff74 	bl	800abc8 <_Bfree>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f002 ff70 	bl	800abc8 <_Bfree>
 8007ce8:	e5db      	b.n	80078a2 <_strtod_l+0x72>
 8007cea:	4b33      	ldr	r3, [pc, #204]	; (8007db8 <_strtod_l+0x588>)
 8007cec:	4640      	mov	r0, r8
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	112d      	asrs	r5, r5, #4
 8007cf8:	2d01      	cmp	r5, #1
 8007cfa:	dc21      	bgt.n	8007d40 <_strtod_l+0x510>
 8007cfc:	b10b      	cbz	r3, 8007d02 <_strtod_l+0x4d2>
 8007cfe:	4680      	mov	r8, r0
 8007d00:	4689      	mov	r9, r1
 8007d02:	492d      	ldr	r1, [pc, #180]	; (8007db8 <_strtod_l+0x588>)
 8007d04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d12:	464b      	mov	r3, r9
 8007d14:	f7f8 fbe0 	bl	80004d8 <__aeabi_dmul>
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <_strtod_l+0x57c>)
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	400b      	ands	r3, r1
 8007d1e:	4927      	ldr	r1, [pc, #156]	; (8007dbc <_strtod_l+0x58c>)
 8007d20:	4680      	mov	r8, r0
 8007d22:	428b      	cmp	r3, r1
 8007d24:	d8be      	bhi.n	8007ca4 <_strtod_l+0x474>
 8007d26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d2a:	428b      	cmp	r3, r1
 8007d2c:	bf86      	itte	hi
 8007d2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d32:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007dc0 <_strtod_l+0x590>
 8007d36:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9305      	str	r3, [sp, #20]
 8007d3e:	e07b      	b.n	8007e38 <_strtod_l+0x608>
 8007d40:	07ea      	lsls	r2, r5, #31
 8007d42:	d505      	bpl.n	8007d50 <_strtod_l+0x520>
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fbc5 	bl	80004d8 <__aeabi_dmul>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	9a05      	ldr	r2, [sp, #20]
 8007d52:	f10a 0a01 	add.w	sl, sl, #1
 8007d56:	3208      	adds	r2, #8
 8007d58:	106d      	asrs	r5, r5, #1
 8007d5a:	9205      	str	r2, [sp, #20]
 8007d5c:	e7cc      	b.n	8007cf8 <_strtod_l+0x4c8>
 8007d5e:	d0ec      	beq.n	8007d3a <_strtod_l+0x50a>
 8007d60:	426d      	negs	r5, r5
 8007d62:	f015 020f 	ands.w	r2, r5, #15
 8007d66:	d00a      	beq.n	8007d7e <_strtod_l+0x54e>
 8007d68:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <_strtod_l+0x584>)
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d70:	4649      	mov	r1, r9
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fcd9 	bl	800072c <__aeabi_ddiv>
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	4689      	mov	r9, r1
 8007d7e:	112d      	asrs	r5, r5, #4
 8007d80:	d0db      	beq.n	8007d3a <_strtod_l+0x50a>
 8007d82:	2d1f      	cmp	r5, #31
 8007d84:	dd1e      	ble.n	8007dc4 <_strtod_l+0x594>
 8007d86:	2600      	movs	r6, #0
 8007d88:	46b3      	mov	fp, r6
 8007d8a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007d8c:	9608      	str	r6, [sp, #32]
 8007d8e:	2322      	movs	r3, #34	; 0x22
 8007d90:	f04f 0800 	mov.w	r8, #0
 8007d94:	f04f 0900 	mov.w	r9, #0
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	e78d      	b.n	8007cb8 <_strtod_l+0x488>
 8007d9c:	0800bece 	.word	0x0800bece
 8007da0:	0800bd80 	.word	0x0800bd80
 8007da4:	0800bec6 	.word	0x0800bec6
 8007da8:	0800bfad 	.word	0x0800bfad
 8007dac:	7ff00000 	.word	0x7ff00000
 8007db0:	0800bfa9 	.word	0x0800bfa9
 8007db4:	0800c108 	.word	0x0800c108
 8007db8:	0800c0e0 	.word	0x0800c0e0
 8007dbc:	7ca00000 	.word	0x7ca00000
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	f015 0310 	ands.w	r3, r5, #16
 8007dc8:	bf18      	it	ne
 8007dca:	236a      	movne	r3, #106	; 0x6a
 8007dcc:	4640      	mov	r0, r8
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80080a0 <_strtod_l+0x870>
 8007dd8:	07ea      	lsls	r2, r5, #31
 8007dda:	d504      	bpl.n	8007de6 <_strtod_l+0x5b6>
 8007ddc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007de0:	f7f8 fb7a 	bl	80004d8 <__aeabi_dmul>
 8007de4:	2301      	movs	r3, #1
 8007de6:	106d      	asrs	r5, r5, #1
 8007de8:	f10a 0a08 	add.w	sl, sl, #8
 8007dec:	d1f4      	bne.n	8007dd8 <_strtod_l+0x5a8>
 8007dee:	b10b      	cbz	r3, 8007df4 <_strtod_l+0x5c4>
 8007df0:	4680      	mov	r8, r0
 8007df2:	4689      	mov	r9, r1
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	b1bb      	cbz	r3, 8007e28 <_strtod_l+0x5f8>
 8007df8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007dfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	4649      	mov	r1, r9
 8007e04:	dd10      	ble.n	8007e28 <_strtod_l+0x5f8>
 8007e06:	2b1f      	cmp	r3, #31
 8007e08:	f340 8128 	ble.w	800805c <_strtod_l+0x82c>
 8007e0c:	2b34      	cmp	r3, #52	; 0x34
 8007e0e:	bfd8      	it	le
 8007e10:	f04f 33ff 	movle.w	r3, #4294967295
 8007e14:	f04f 0800 	mov.w	r8, #0
 8007e18:	bfcf      	iteee	gt
 8007e1a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e1e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e22:	4093      	lslle	r3, r2
 8007e24:	ea03 0901 	andle.w	r9, r3, r1
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d1a6      	bne.n	8007d86 <_strtod_l+0x556>
 8007e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3a:	465a      	mov	r2, fp
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	4633      	mov	r3, r6
 8007e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e44:	f002 ff28 	bl	800ac98 <__s2b>
 8007e48:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f af2a 	beq.w	8007ca4 <_strtod_l+0x474>
 8007e50:	2600      	movs	r6, #0
 8007e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	eba3 0307 	sub.w	r3, r3, r7
 8007e5c:	bfa8      	it	ge
 8007e5e:	2300      	movge	r3, #0
 8007e60:	46b3      	mov	fp, r6
 8007e62:	9312      	str	r3, [sp, #72]	; 0x48
 8007e64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e68:	9316      	str	r3, [sp, #88]	; 0x58
 8007e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	6859      	ldr	r1, [r3, #4]
 8007e70:	f002 fe6a 	bl	800ab48 <_Balloc>
 8007e74:	9008      	str	r0, [sp, #32]
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f af18 	beq.w	8007cac <_strtod_l+0x47c>
 8007e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e7e:	300c      	adds	r0, #12
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	f103 010c 	add.w	r1, r3, #12
 8007e86:	3202      	adds	r2, #2
 8007e88:	0092      	lsls	r2, r2, #2
 8007e8a:	f001 fc02 	bl	8009692 <memcpy>
 8007e8e:	ab1c      	add	r3, sp, #112	; 0x70
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	ab1b      	add	r3, sp, #108	; 0x6c
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4642      	mov	r2, r8
 8007e98:	464b      	mov	r3, r9
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007ea0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007ea4:	f003 fa24 	bl	800b2f0 <__d2b>
 8007ea8:	901a      	str	r0, [sp, #104]	; 0x68
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f43f aefe 	beq.w	8007cac <_strtod_l+0x47c>
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f002 ff88 	bl	800adc8 <__i2b>
 8007eb8:	4683      	mov	fp, r0
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f43f aef6 	beq.w	8007cac <_strtod_l+0x47c>
 8007ec0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007ec2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	bfab      	itete	ge
 8007ec8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007eca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007ecc:	eb07 0a03 	addge.w	sl, r7, r3
 8007ed0:	1bdd      	sublt	r5, r3, r7
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	bfa8      	it	ge
 8007ed6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007ed8:	eba7 0703 	sub.w	r7, r7, r3
 8007edc:	4417      	add	r7, r2
 8007ede:	4b71      	ldr	r3, [pc, #452]	; (80080a4 <_strtod_l+0x874>)
 8007ee0:	f107 37ff 	add.w	r7, r7, #4294967295
 8007ee4:	bfb8      	it	lt
 8007ee6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007eea:	429f      	cmp	r7, r3
 8007eec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ef0:	f280 80c7 	bge.w	8008082 <_strtod_l+0x852>
 8007ef4:	1bdb      	subs	r3, r3, r7
 8007ef6:	2b1f      	cmp	r3, #31
 8007ef8:	f04f 0101 	mov.w	r1, #1
 8007efc:	eba2 0203 	sub.w	r2, r2, r3
 8007f00:	f300 80b3 	bgt.w	800806a <_strtod_l+0x83a>
 8007f04:	fa01 f303 	lsl.w	r3, r1, r3
 8007f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8007f0e:	eb0a 0702 	add.w	r7, sl, r2
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	45ba      	cmp	sl, r7
 8007f16:	4415      	add	r5, r2
 8007f18:	441d      	add	r5, r3
 8007f1a:	4653      	mov	r3, sl
 8007f1c:	bfa8      	it	ge
 8007f1e:	463b      	movge	r3, r7
 8007f20:	42ab      	cmp	r3, r5
 8007f22:	bfa8      	it	ge
 8007f24:	462b      	movge	r3, r5
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfc2      	ittt	gt
 8007f2a:	1aff      	subgt	r7, r7, r3
 8007f2c:	1aed      	subgt	r5, r5, r3
 8007f2e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dd17      	ble.n	8007f68 <_strtod_l+0x738>
 8007f38:	4659      	mov	r1, fp
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f003 f801 	bl	800af44 <__pow5mult>
 8007f42:	4683      	mov	fp, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f43f aeb1 	beq.w	8007cac <_strtod_l+0x47c>
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f002 ff50 	bl	800adf4 <__multiply>
 8007f54:	900a      	str	r0, [sp, #40]	; 0x28
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f aea8 	beq.w	8007cac <_strtod_l+0x47c>
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f60:	f002 fe32 	bl	800abc8 <_Bfree>
 8007f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f66:	931a      	str	r3, [sp, #104]	; 0x68
 8007f68:	2f00      	cmp	r7, #0
 8007f6a:	f300 808f 	bgt.w	800808c <_strtod_l+0x85c>
 8007f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dd08      	ble.n	8007f86 <_strtod_l+0x756>
 8007f74:	4620      	mov	r0, r4
 8007f76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f78:	9908      	ldr	r1, [sp, #32]
 8007f7a:	f002 ffe3 	bl	800af44 <__pow5mult>
 8007f7e:	9008      	str	r0, [sp, #32]
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f43f ae93 	beq.w	8007cac <_strtod_l+0x47c>
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	dd08      	ble.n	8007f9c <_strtod_l+0x76c>
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	9908      	ldr	r1, [sp, #32]
 8007f90:	f003 f832 	bl	800aff8 <__lshift>
 8007f94:	9008      	str	r0, [sp, #32]
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f43f ae88 	beq.w	8007cac <_strtod_l+0x47c>
 8007f9c:	f1ba 0f00 	cmp.w	sl, #0
 8007fa0:	dd08      	ble.n	8007fb4 <_strtod_l+0x784>
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f003 f826 	bl	800aff8 <__lshift>
 8007fac:	4683      	mov	fp, r0
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f ae7c 	beq.w	8007cac <_strtod_l+0x47c>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	9a08      	ldr	r2, [sp, #32]
 8007fb8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fba:	f003 f8a5 	bl	800b108 <__mdiff>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f43f ae73 	beq.w	8007cac <_strtod_l+0x47c>
 8007fc6:	2500      	movs	r5, #0
 8007fc8:	68c3      	ldr	r3, [r0, #12]
 8007fca:	4659      	mov	r1, fp
 8007fcc:	60c5      	str	r5, [r0, #12]
 8007fce:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd0:	f003 f87e 	bl	800b0d0 <__mcmp>
 8007fd4:	42a8      	cmp	r0, r5
 8007fd6:	da6b      	bge.n	80080b0 <_strtod_l+0x880>
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fda:	ea53 0308 	orrs.w	r3, r3, r8
 8007fde:	f040 808f 	bne.w	8008100 <_strtod_l+0x8d0>
 8007fe2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f040 808a 	bne.w	8008100 <_strtod_l+0x8d0>
 8007fec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ff0:	0d1b      	lsrs	r3, r3, #20
 8007ff2:	051b      	lsls	r3, r3, #20
 8007ff4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ff8:	f240 8082 	bls.w	8008100 <_strtod_l+0x8d0>
 8007ffc:	6973      	ldr	r3, [r6, #20]
 8007ffe:	b913      	cbnz	r3, 8008006 <_strtod_l+0x7d6>
 8008000:	6933      	ldr	r3, [r6, #16]
 8008002:	2b01      	cmp	r3, #1
 8008004:	dd7c      	ble.n	8008100 <_strtod_l+0x8d0>
 8008006:	4631      	mov	r1, r6
 8008008:	2201      	movs	r2, #1
 800800a:	4620      	mov	r0, r4
 800800c:	f002 fff4 	bl	800aff8 <__lshift>
 8008010:	4659      	mov	r1, fp
 8008012:	4606      	mov	r6, r0
 8008014:	f003 f85c 	bl	800b0d0 <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	dd71      	ble.n	8008100 <_strtod_l+0x8d0>
 800801c:	9905      	ldr	r1, [sp, #20]
 800801e:	464b      	mov	r3, r9
 8008020:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <_strtod_l+0x878>)
 8008022:	2900      	cmp	r1, #0
 8008024:	f000 808d 	beq.w	8008142 <_strtod_l+0x912>
 8008028:	ea02 0109 	and.w	r1, r2, r9
 800802c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008030:	f300 8087 	bgt.w	8008142 <_strtod_l+0x912>
 8008034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008038:	f77f aea9 	ble.w	8007d8e <_strtod_l+0x55e>
 800803c:	4640      	mov	r0, r8
 800803e:	4649      	mov	r1, r9
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <_strtod_l+0x87c>)
 8008042:	2200      	movs	r2, #0
 8008044:	f7f8 fa48 	bl	80004d8 <__aeabi_dmul>
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <_strtod_l+0x878>)
 800804a:	4680      	mov	r8, r0
 800804c:	400b      	ands	r3, r1
 800804e:	4689      	mov	r9, r1
 8008050:	2b00      	cmp	r3, #0
 8008052:	f47f ae35 	bne.w	8007cc0 <_strtod_l+0x490>
 8008056:	2322      	movs	r3, #34	; 0x22
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	e631      	b.n	8007cc0 <_strtod_l+0x490>
 800805c:	f04f 32ff 	mov.w	r2, #4294967295
 8008060:	fa02 f303 	lsl.w	r3, r2, r3
 8008064:	ea03 0808 	and.w	r8, r3, r8
 8008068:	e6de      	b.n	8007e28 <_strtod_l+0x5f8>
 800806a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800806e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008072:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008076:	37e2      	adds	r7, #226	; 0xe2
 8008078:	fa01 f307 	lsl.w	r3, r1, r7
 800807c:	9310      	str	r3, [sp, #64]	; 0x40
 800807e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008080:	e745      	b.n	8007f0e <_strtod_l+0x6de>
 8008082:	2300      	movs	r3, #0
 8008084:	9310      	str	r3, [sp, #64]	; 0x40
 8008086:	2301      	movs	r3, #1
 8008088:	9313      	str	r3, [sp, #76]	; 0x4c
 800808a:	e740      	b.n	8007f0e <_strtod_l+0x6de>
 800808c:	463a      	mov	r2, r7
 800808e:	4620      	mov	r0, r4
 8008090:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008092:	f002 ffb1 	bl	800aff8 <__lshift>
 8008096:	901a      	str	r0, [sp, #104]	; 0x68
 8008098:	2800      	cmp	r0, #0
 800809a:	f47f af68 	bne.w	8007f6e <_strtod_l+0x73e>
 800809e:	e605      	b.n	8007cac <_strtod_l+0x47c>
 80080a0:	0800bd98 	.word	0x0800bd98
 80080a4:	fffffc02 	.word	0xfffffc02
 80080a8:	7ff00000 	.word	0x7ff00000
 80080ac:	39500000 	.word	0x39500000
 80080b0:	46ca      	mov	sl, r9
 80080b2:	d165      	bne.n	8008180 <_strtod_l+0x950>
 80080b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080ba:	b352      	cbz	r2, 8008112 <_strtod_l+0x8e2>
 80080bc:	4a9e      	ldr	r2, [pc, #632]	; (8008338 <_strtod_l+0xb08>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d12a      	bne.n	8008118 <_strtod_l+0x8e8>
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	4641      	mov	r1, r8
 80080c6:	b1fb      	cbz	r3, 8008108 <_strtod_l+0x8d8>
 80080c8:	4b9c      	ldr	r3, [pc, #624]	; (800833c <_strtod_l+0xb0c>)
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295
 80080ce:	ea09 0303 	and.w	r3, r9, r3
 80080d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080d6:	d81a      	bhi.n	800810e <_strtod_l+0x8de>
 80080d8:	0d1b      	lsrs	r3, r3, #20
 80080da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	4299      	cmp	r1, r3
 80080e4:	d118      	bne.n	8008118 <_strtod_l+0x8e8>
 80080e6:	4b96      	ldr	r3, [pc, #600]	; (8008340 <_strtod_l+0xb10>)
 80080e8:	459a      	cmp	sl, r3
 80080ea:	d102      	bne.n	80080f2 <_strtod_l+0x8c2>
 80080ec:	3101      	adds	r1, #1
 80080ee:	f43f addd 	beq.w	8007cac <_strtod_l+0x47c>
 80080f2:	f04f 0800 	mov.w	r8, #0
 80080f6:	4b91      	ldr	r3, [pc, #580]	; (800833c <_strtod_l+0xb0c>)
 80080f8:	ea0a 0303 	and.w	r3, sl, r3
 80080fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d19a      	bne.n	800803c <_strtod_l+0x80c>
 8008106:	e5db      	b.n	8007cc0 <_strtod_l+0x490>
 8008108:	f04f 33ff 	mov.w	r3, #4294967295
 800810c:	e7e9      	b.n	80080e2 <_strtod_l+0x8b2>
 800810e:	4613      	mov	r3, r2
 8008110:	e7e7      	b.n	80080e2 <_strtod_l+0x8b2>
 8008112:	ea53 0308 	orrs.w	r3, r3, r8
 8008116:	d081      	beq.n	800801c <_strtod_l+0x7ec>
 8008118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800811a:	b1e3      	cbz	r3, 8008156 <_strtod_l+0x926>
 800811c:	ea13 0f0a 	tst.w	r3, sl
 8008120:	d0ee      	beq.n	8008100 <_strtod_l+0x8d0>
 8008122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	9a05      	ldr	r2, [sp, #20]
 800812a:	b1c3      	cbz	r3, 800815e <_strtod_l+0x92e>
 800812c:	f7ff fb5c 	bl	80077e8 <sulp>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008136:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008138:	f7f8 f818 	bl	800016c <__adddf3>
 800813c:	4680      	mov	r8, r0
 800813e:	4689      	mov	r9, r1
 8008140:	e7de      	b.n	8008100 <_strtod_l+0x8d0>
 8008142:	4013      	ands	r3, r2
 8008144:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008148:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800814c:	f04f 38ff 	mov.w	r8, #4294967295
 8008150:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008154:	e7d4      	b.n	8008100 <_strtod_l+0x8d0>
 8008156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008158:	ea13 0f08 	tst.w	r3, r8
 800815c:	e7e0      	b.n	8008120 <_strtod_l+0x8f0>
 800815e:	f7ff fb43 	bl	80077e8 <sulp>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008168:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800816a:	f7f7 fffd 	bl	8000168 <__aeabi_dsub>
 800816e:	2200      	movs	r2, #0
 8008170:	2300      	movs	r3, #0
 8008172:	4680      	mov	r8, r0
 8008174:	4689      	mov	r9, r1
 8008176:	f7f8 fc17 	bl	80009a8 <__aeabi_dcmpeq>
 800817a:	2800      	cmp	r0, #0
 800817c:	d0c0      	beq.n	8008100 <_strtod_l+0x8d0>
 800817e:	e606      	b.n	8007d8e <_strtod_l+0x55e>
 8008180:	4659      	mov	r1, fp
 8008182:	4630      	mov	r0, r6
 8008184:	f003 f90a 	bl	800b39c <__ratio>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008190:	2200      	movs	r2, #0
 8008192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008196:	f7f8 fc1b 	bl	80009d0 <__aeabi_dcmple>
 800819a:	2800      	cmp	r0, #0
 800819c:	d06f      	beq.n	800827e <_strtod_l+0xa4e>
 800819e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d17c      	bne.n	800829e <_strtod_l+0xa6e>
 80081a4:	f1b8 0f00 	cmp.w	r8, #0
 80081a8:	d159      	bne.n	800825e <_strtod_l+0xa2e>
 80081aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d17b      	bne.n	80082aa <_strtod_l+0xa7a>
 80081b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b62      	ldr	r3, [pc, #392]	; (8008344 <_strtod_l+0xb14>)
 80081ba:	f7f8 fbff 	bl	80009bc <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d15a      	bne.n	8008278 <_strtod_l+0xa48>
 80081c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081c6:	2200      	movs	r2, #0
 80081c8:	4b5f      	ldr	r3, [pc, #380]	; (8008348 <_strtod_l+0xb18>)
 80081ca:	f7f8 f985 	bl	80004d8 <__aeabi_dmul>
 80081ce:	4605      	mov	r5, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80081d6:	9506      	str	r5, [sp, #24]
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80081e2:	4b56      	ldr	r3, [pc, #344]	; (800833c <_strtod_l+0xb0c>)
 80081e4:	4a55      	ldr	r2, [pc, #340]	; (800833c <_strtod_l+0xb0c>)
 80081e6:	ea0a 0303 	and.w	r3, sl, r3
 80081ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80081ec:	4b57      	ldr	r3, [pc, #348]	; (800834c <_strtod_l+0xb1c>)
 80081ee:	ea0a 0202 	and.w	r2, sl, r2
 80081f2:	429a      	cmp	r2, r3
 80081f4:	f040 80b0 	bne.w	8008358 <_strtod_l+0xb28>
 80081f8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f003 f80e 	bl	800b220 <__ulp>
 8008204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008208:	f7f8 f966 	bl	80004d8 <__aeabi_dmul>
 800820c:	4642      	mov	r2, r8
 800820e:	464b      	mov	r3, r9
 8008210:	f7f7 ffac 	bl	800016c <__adddf3>
 8008214:	f8df a124 	ldr.w	sl, [pc, #292]	; 800833c <_strtod_l+0xb0c>
 8008218:	4a4d      	ldr	r2, [pc, #308]	; (8008350 <_strtod_l+0xb20>)
 800821a:	ea01 0a0a 	and.w	sl, r1, sl
 800821e:	4592      	cmp	sl, r2
 8008220:	4680      	mov	r8, r0
 8008222:	d948      	bls.n	80082b6 <_strtod_l+0xa86>
 8008224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008226:	4b46      	ldr	r3, [pc, #280]	; (8008340 <_strtod_l+0xb10>)
 8008228:	429a      	cmp	r2, r3
 800822a:	d103      	bne.n	8008234 <_strtod_l+0xa04>
 800822c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822e:	3301      	adds	r3, #1
 8008230:	f43f ad3c 	beq.w	8007cac <_strtod_l+0x47c>
 8008234:	f04f 38ff 	mov.w	r8, #4294967295
 8008238:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008340 <_strtod_l+0xb10>
 800823c:	4620      	mov	r0, r4
 800823e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008240:	f002 fcc2 	bl	800abc8 <_Bfree>
 8008244:	4620      	mov	r0, r4
 8008246:	9908      	ldr	r1, [sp, #32]
 8008248:	f002 fcbe 	bl	800abc8 <_Bfree>
 800824c:	4659      	mov	r1, fp
 800824e:	4620      	mov	r0, r4
 8008250:	f002 fcba 	bl	800abc8 <_Bfree>
 8008254:	4631      	mov	r1, r6
 8008256:	4620      	mov	r0, r4
 8008258:	f002 fcb6 	bl	800abc8 <_Bfree>
 800825c:	e605      	b.n	8007e6a <_strtod_l+0x63a>
 800825e:	f1b8 0f01 	cmp.w	r8, #1
 8008262:	d103      	bne.n	800826c <_strtod_l+0xa3c>
 8008264:	f1b9 0f00 	cmp.w	r9, #0
 8008268:	f43f ad91 	beq.w	8007d8e <_strtod_l+0x55e>
 800826c:	2200      	movs	r2, #0
 800826e:	4b39      	ldr	r3, [pc, #228]	; (8008354 <_strtod_l+0xb24>)
 8008270:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008272:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008276:	e016      	b.n	80082a6 <_strtod_l+0xa76>
 8008278:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800827a:	4f33      	ldr	r7, [pc, #204]	; (8008348 <_strtod_l+0xb18>)
 800827c:	e7a9      	b.n	80081d2 <_strtod_l+0x9a2>
 800827e:	4b32      	ldr	r3, [pc, #200]	; (8008348 <_strtod_l+0xb18>)
 8008280:	2200      	movs	r2, #0
 8008282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008286:	f7f8 f927 	bl	80004d8 <__aeabi_dmul>
 800828a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828c:	4605      	mov	r5, r0
 800828e:	460f      	mov	r7, r1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d09e      	beq.n	80081d2 <_strtod_l+0x9a2>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800829c:	e79d      	b.n	80081da <_strtod_l+0x9aa>
 800829e:	2200      	movs	r2, #0
 80082a0:	4b28      	ldr	r3, [pc, #160]	; (8008344 <_strtod_l+0xb14>)
 80082a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082a6:	4f27      	ldr	r7, [pc, #156]	; (8008344 <_strtod_l+0xb14>)
 80082a8:	e797      	b.n	80081da <_strtod_l+0x9aa>
 80082aa:	2200      	movs	r2, #0
 80082ac:	4b29      	ldr	r3, [pc, #164]	; (8008354 <_strtod_l+0xb24>)
 80082ae:	4645      	mov	r5, r8
 80082b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082b4:	e7f7      	b.n	80082a6 <_strtod_l+0xa76>
 80082b6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80082ba:	9b05      	ldr	r3, [sp, #20]
 80082bc:	46ca      	mov	sl, r9
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1bc      	bne.n	800823c <_strtod_l+0xa0c>
 80082c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082c8:	0d1b      	lsrs	r3, r3, #20
 80082ca:	051b      	lsls	r3, r3, #20
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1b5      	bne.n	800823c <_strtod_l+0xa0c>
 80082d0:	4628      	mov	r0, r5
 80082d2:	4639      	mov	r1, r7
 80082d4:	f7f8 ff32 	bl	800113c <__aeabi_d2lz>
 80082d8:	f7f8 f8d0 	bl	800047c <__aeabi_l2d>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4628      	mov	r0, r5
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f7 ff40 	bl	8000168 <__aeabi_dsub>
 80082e8:	460b      	mov	r3, r1
 80082ea:	4602      	mov	r2, r0
 80082ec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80082f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80082f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f6:	ea4a 0a08 	orr.w	sl, sl, r8
 80082fa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80082fe:	d06c      	beq.n	80083da <_strtod_l+0xbaa>
 8008300:	a309      	add	r3, pc, #36	; (adr r3, 8008328 <_strtod_l+0xaf8>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f8 fb59 	bl	80009bc <__aeabi_dcmplt>
 800830a:	2800      	cmp	r0, #0
 800830c:	f47f acd8 	bne.w	8007cc0 <_strtod_l+0x490>
 8008310:	a307      	add	r3, pc, #28	; (adr r3, 8008330 <_strtod_l+0xb00>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800831a:	f7f8 fb6d 	bl	80009f8 <__aeabi_dcmpgt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d08c      	beq.n	800823c <_strtod_l+0xa0c>
 8008322:	e4cd      	b.n	8007cc0 <_strtod_l+0x490>
 8008324:	f3af 8000 	nop.w
 8008328:	94a03595 	.word	0x94a03595
 800832c:	3fdfffff 	.word	0x3fdfffff
 8008330:	35afe535 	.word	0x35afe535
 8008334:	3fe00000 	.word	0x3fe00000
 8008338:	000fffff 	.word	0x000fffff
 800833c:	7ff00000 	.word	0x7ff00000
 8008340:	7fefffff 	.word	0x7fefffff
 8008344:	3ff00000 	.word	0x3ff00000
 8008348:	3fe00000 	.word	0x3fe00000
 800834c:	7fe00000 	.word	0x7fe00000
 8008350:	7c9fffff 	.word	0x7c9fffff
 8008354:	bff00000 	.word	0xbff00000
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	b333      	cbz	r3, 80083aa <_strtod_l+0xb7a>
 800835c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800835e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008362:	d822      	bhi.n	80083aa <_strtod_l+0xb7a>
 8008364:	a328      	add	r3, pc, #160	; (adr r3, 8008408 <_strtod_l+0xbd8>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	4628      	mov	r0, r5
 800836c:	4639      	mov	r1, r7
 800836e:	f7f8 fb2f 	bl	80009d0 <__aeabi_dcmple>
 8008372:	b1a0      	cbz	r0, 800839e <_strtod_l+0xb6e>
 8008374:	4639      	mov	r1, r7
 8008376:	4628      	mov	r0, r5
 8008378:	f7f8 fb86 	bl	8000a88 <__aeabi_d2uiz>
 800837c:	2801      	cmp	r0, #1
 800837e:	bf38      	it	cc
 8008380:	2001      	movcc	r0, #1
 8008382:	f7f8 f82f 	bl	80003e4 <__aeabi_ui2d>
 8008386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008388:	4605      	mov	r5, r0
 800838a:	460f      	mov	r7, r1
 800838c:	bb03      	cbnz	r3, 80083d0 <_strtod_l+0xba0>
 800838e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008392:	9014      	str	r0, [sp, #80]	; 0x50
 8008394:	9315      	str	r3, [sp, #84]	; 0x54
 8008396:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800839a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800839e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083a2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80083a6:	1a9b      	subs	r3, r3, r2
 80083a8:	9311      	str	r3, [sp, #68]	; 0x44
 80083aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083ae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80083b2:	f002 ff35 	bl	800b220 <__ulp>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	f7f8 f88b 	bl	80004d8 <__aeabi_dmul>
 80083c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083c6:	f7f7 fed1 	bl	800016c <__adddf3>
 80083ca:	4680      	mov	r8, r0
 80083cc:	4689      	mov	r9, r1
 80083ce:	e774      	b.n	80082ba <_strtod_l+0xa8a>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80083d8:	e7dd      	b.n	8008396 <_strtod_l+0xb66>
 80083da:	a30d      	add	r3, pc, #52	; (adr r3, 8008410 <_strtod_l+0xbe0>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f8 faec 	bl	80009bc <__aeabi_dcmplt>
 80083e4:	e79b      	b.n	800831e <_strtod_l+0xaee>
 80083e6:	2300      	movs	r3, #0
 80083e8:	930e      	str	r3, [sp, #56]	; 0x38
 80083ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f7ff ba5b 	b.w	80078aa <_strtod_l+0x7a>
 80083f4:	2a65      	cmp	r2, #101	; 0x65
 80083f6:	f43f ab52 	beq.w	8007a9e <_strtod_l+0x26e>
 80083fa:	2a45      	cmp	r2, #69	; 0x45
 80083fc:	f43f ab4f 	beq.w	8007a9e <_strtod_l+0x26e>
 8008400:	2301      	movs	r3, #1
 8008402:	f7ff bb87 	b.w	8007b14 <_strtod_l+0x2e4>
 8008406:	bf00      	nop
 8008408:	ffc00000 	.word	0xffc00000
 800840c:	41dfffff 	.word	0x41dfffff
 8008410:	94a03595 	.word	0x94a03595
 8008414:	3fcfffff 	.word	0x3fcfffff

08008418 <strtod>:
 8008418:	460a      	mov	r2, r1
 800841a:	4601      	mov	r1, r0
 800841c:	4802      	ldr	r0, [pc, #8]	; (8008428 <strtod+0x10>)
 800841e:	4b03      	ldr	r3, [pc, #12]	; (800842c <strtod+0x14>)
 8008420:	6800      	ldr	r0, [r0, #0]
 8008422:	f7ff ba05 	b.w	8007830 <_strtod_l>
 8008426:	bf00      	nop
 8008428:	20000208 	.word	0x20000208
 800842c:	20000050 	.word	0x20000050

08008430 <strtof>:
 8008430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008434:	4f24      	ldr	r7, [pc, #144]	; (80084c8 <strtof+0x98>)
 8008436:	460a      	mov	r2, r1
 8008438:	4b24      	ldr	r3, [pc, #144]	; (80084cc <strtof+0x9c>)
 800843a:	4601      	mov	r1, r0
 800843c:	6838      	ldr	r0, [r7, #0]
 800843e:	f7ff f9f7 	bl	8007830 <_strtod_l>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4606      	mov	r6, r0
 8008448:	460c      	mov	r4, r1
 800844a:	f7f8 fadf 	bl	8000a0c <__aeabi_dcmpun>
 800844e:	b168      	cbz	r0, 800846c <strtof+0x3c>
 8008450:	2c00      	cmp	r4, #0
 8008452:	481f      	ldr	r0, [pc, #124]	; (80084d0 <strtof+0xa0>)
 8008454:	da06      	bge.n	8008464 <strtof+0x34>
 8008456:	f001 f931 	bl	80096bc <nanf>
 800845a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800845e:	4628      	mov	r0, r5
 8008460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	f001 b928 	b.w	80096bc <nanf>
 800846c:	4621      	mov	r1, r4
 800846e:	4630      	mov	r0, r6
 8008470:	f7f8 fb2a 	bl	8000ac8 <__aeabi_d2f>
 8008474:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008478:	4605      	mov	r5, r0
 800847a:	4916      	ldr	r1, [pc, #88]	; (80084d4 <strtof+0xa4>)
 800847c:	4640      	mov	r0, r8
 800847e:	f7f8 fe47 	bl	8001110 <__aeabi_fcmpun>
 8008482:	b9b0      	cbnz	r0, 80084b2 <strtof+0x82>
 8008484:	4640      	mov	r0, r8
 8008486:	4913      	ldr	r1, [pc, #76]	; (80084d4 <strtof+0xa4>)
 8008488:	f7f8 fe24 	bl	80010d4 <__aeabi_fcmple>
 800848c:	b988      	cbnz	r0, 80084b2 <strtof+0x82>
 800848e:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8008492:	f04f 32ff 	mov.w	r2, #4294967295
 8008496:	4630      	mov	r0, r6
 8008498:	4641      	mov	r1, r8
 800849a:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <strtof+0xa8>)
 800849c:	f7f8 fab6 	bl	8000a0c <__aeabi_dcmpun>
 80084a0:	b970      	cbnz	r0, 80084c0 <strtof+0x90>
 80084a2:	f04f 32ff 	mov.w	r2, #4294967295
 80084a6:	4630      	mov	r0, r6
 80084a8:	4641      	mov	r1, r8
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <strtof+0xa8>)
 80084ac:	f7f8 fa90 	bl	80009d0 <__aeabi_dcmple>
 80084b0:	b930      	cbnz	r0, 80084c0 <strtof+0x90>
 80084b2:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80084b6:	d1d2      	bne.n	800845e <strtof+0x2e>
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <strtof+0xac>)
 80084ba:	4023      	ands	r3, r4
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0ce      	beq.n	800845e <strtof+0x2e>
 80084c0:	2222      	movs	r2, #34	; 0x22
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	e7ca      	b.n	800845e <strtof+0x2e>
 80084c8:	20000208 	.word	0x20000208
 80084cc:	20000050 	.word	0x20000050
 80084d0:	0800bfa9 	.word	0x0800bfa9
 80084d4:	7f7fffff 	.word	0x7f7fffff
 80084d8:	7fefffff 	.word	0x7fefffff
 80084dc:	7ff00000 	.word	0x7ff00000

080084e0 <_strtol_l.constprop.0>:
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e6:	4686      	mov	lr, r0
 80084e8:	4690      	mov	r8, r2
 80084ea:	d001      	beq.n	80084f0 <_strtol_l.constprop.0+0x10>
 80084ec:	2b24      	cmp	r3, #36	; 0x24
 80084ee:	d906      	bls.n	80084fe <_strtol_l.constprop.0+0x1e>
 80084f0:	f001 f88c 	bl	800960c <__errno>
 80084f4:	2316      	movs	r3, #22
 80084f6:	6003      	str	r3, [r0, #0]
 80084f8:	2000      	movs	r0, #0
 80084fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fe:	460d      	mov	r5, r1
 8008500:	4835      	ldr	r0, [pc, #212]	; (80085d8 <_strtol_l.constprop.0+0xf8>)
 8008502:	462a      	mov	r2, r5
 8008504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008508:	5d06      	ldrb	r6, [r0, r4]
 800850a:	f016 0608 	ands.w	r6, r6, #8
 800850e:	d1f8      	bne.n	8008502 <_strtol_l.constprop.0+0x22>
 8008510:	2c2d      	cmp	r4, #45	; 0x2d
 8008512:	d12e      	bne.n	8008572 <_strtol_l.constprop.0+0x92>
 8008514:	2601      	movs	r6, #1
 8008516:	782c      	ldrb	r4, [r5, #0]
 8008518:	1c95      	adds	r5, r2, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d057      	beq.n	80085ce <_strtol_l.constprop.0+0xee>
 800851e:	2b10      	cmp	r3, #16
 8008520:	d109      	bne.n	8008536 <_strtol_l.constprop.0+0x56>
 8008522:	2c30      	cmp	r4, #48	; 0x30
 8008524:	d107      	bne.n	8008536 <_strtol_l.constprop.0+0x56>
 8008526:	782a      	ldrb	r2, [r5, #0]
 8008528:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800852c:	2a58      	cmp	r2, #88	; 0x58
 800852e:	d149      	bne.n	80085c4 <_strtol_l.constprop.0+0xe4>
 8008530:	2310      	movs	r3, #16
 8008532:	786c      	ldrb	r4, [r5, #1]
 8008534:	3502      	adds	r5, #2
 8008536:	2200      	movs	r2, #0
 8008538:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800853c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008540:	fbbc f9f3 	udiv	r9, ip, r3
 8008544:	4610      	mov	r0, r2
 8008546:	fb03 ca19 	mls	sl, r3, r9, ip
 800854a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800854e:	2f09      	cmp	r7, #9
 8008550:	d814      	bhi.n	800857c <_strtol_l.constprop.0+0x9c>
 8008552:	463c      	mov	r4, r7
 8008554:	42a3      	cmp	r3, r4
 8008556:	dd20      	ble.n	800859a <_strtol_l.constprop.0+0xba>
 8008558:	1c57      	adds	r7, r2, #1
 800855a:	d007      	beq.n	800856c <_strtol_l.constprop.0+0x8c>
 800855c:	4581      	cmp	r9, r0
 800855e:	d319      	bcc.n	8008594 <_strtol_l.constprop.0+0xb4>
 8008560:	d101      	bne.n	8008566 <_strtol_l.constprop.0+0x86>
 8008562:	45a2      	cmp	sl, r4
 8008564:	db16      	blt.n	8008594 <_strtol_l.constprop.0+0xb4>
 8008566:	2201      	movs	r2, #1
 8008568:	fb00 4003 	mla	r0, r0, r3, r4
 800856c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008570:	e7eb      	b.n	800854a <_strtol_l.constprop.0+0x6a>
 8008572:	2c2b      	cmp	r4, #43	; 0x2b
 8008574:	bf04      	itt	eq
 8008576:	782c      	ldrbeq	r4, [r5, #0]
 8008578:	1c95      	addeq	r5, r2, #2
 800857a:	e7ce      	b.n	800851a <_strtol_l.constprop.0+0x3a>
 800857c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008580:	2f19      	cmp	r7, #25
 8008582:	d801      	bhi.n	8008588 <_strtol_l.constprop.0+0xa8>
 8008584:	3c37      	subs	r4, #55	; 0x37
 8008586:	e7e5      	b.n	8008554 <_strtol_l.constprop.0+0x74>
 8008588:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800858c:	2f19      	cmp	r7, #25
 800858e:	d804      	bhi.n	800859a <_strtol_l.constprop.0+0xba>
 8008590:	3c57      	subs	r4, #87	; 0x57
 8008592:	e7df      	b.n	8008554 <_strtol_l.constprop.0+0x74>
 8008594:	f04f 32ff 	mov.w	r2, #4294967295
 8008598:	e7e8      	b.n	800856c <_strtol_l.constprop.0+0x8c>
 800859a:	1c53      	adds	r3, r2, #1
 800859c:	d108      	bne.n	80085b0 <_strtol_l.constprop.0+0xd0>
 800859e:	2322      	movs	r3, #34	; 0x22
 80085a0:	4660      	mov	r0, ip
 80085a2:	f8ce 3000 	str.w	r3, [lr]
 80085a6:	f1b8 0f00 	cmp.w	r8, #0
 80085aa:	d0a6      	beq.n	80084fa <_strtol_l.constprop.0+0x1a>
 80085ac:	1e69      	subs	r1, r5, #1
 80085ae:	e006      	b.n	80085be <_strtol_l.constprop.0+0xde>
 80085b0:	b106      	cbz	r6, 80085b4 <_strtol_l.constprop.0+0xd4>
 80085b2:	4240      	negs	r0, r0
 80085b4:	f1b8 0f00 	cmp.w	r8, #0
 80085b8:	d09f      	beq.n	80084fa <_strtol_l.constprop.0+0x1a>
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	d1f6      	bne.n	80085ac <_strtol_l.constprop.0+0xcc>
 80085be:	f8c8 1000 	str.w	r1, [r8]
 80085c2:	e79a      	b.n	80084fa <_strtol_l.constprop.0+0x1a>
 80085c4:	2430      	movs	r4, #48	; 0x30
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1b5      	bne.n	8008536 <_strtol_l.constprop.0+0x56>
 80085ca:	2308      	movs	r3, #8
 80085cc:	e7b3      	b.n	8008536 <_strtol_l.constprop.0+0x56>
 80085ce:	2c30      	cmp	r4, #48	; 0x30
 80085d0:	d0a9      	beq.n	8008526 <_strtol_l.constprop.0+0x46>
 80085d2:	230a      	movs	r3, #10
 80085d4:	e7af      	b.n	8008536 <_strtol_l.constprop.0+0x56>
 80085d6:	bf00      	nop
 80085d8:	0800bdc1 	.word	0x0800bdc1

080085dc <strtol>:
 80085dc:	4613      	mov	r3, r2
 80085de:	460a      	mov	r2, r1
 80085e0:	4601      	mov	r1, r0
 80085e2:	4802      	ldr	r0, [pc, #8]	; (80085ec <strtol+0x10>)
 80085e4:	6800      	ldr	r0, [r0, #0]
 80085e6:	f7ff bf7b 	b.w	80084e0 <_strtol_l.constprop.0>
 80085ea:	bf00      	nop
 80085ec:	20000208 	.word	0x20000208

080085f0 <__cvt>:
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f6:	461f      	mov	r7, r3
 80085f8:	bfbb      	ittet	lt
 80085fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80085fe:	461f      	movlt	r7, r3
 8008600:	2300      	movge	r3, #0
 8008602:	232d      	movlt	r3, #45	; 0x2d
 8008604:	b088      	sub	sp, #32
 8008606:	4614      	mov	r4, r2
 8008608:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800860a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800860c:	7013      	strb	r3, [r2, #0]
 800860e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008610:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008614:	f023 0820 	bic.w	r8, r3, #32
 8008618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800861c:	d005      	beq.n	800862a <__cvt+0x3a>
 800861e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008622:	d100      	bne.n	8008626 <__cvt+0x36>
 8008624:	3501      	adds	r5, #1
 8008626:	2302      	movs	r3, #2
 8008628:	e000      	b.n	800862c <__cvt+0x3c>
 800862a:	2303      	movs	r3, #3
 800862c:	aa07      	add	r2, sp, #28
 800862e:	9204      	str	r2, [sp, #16]
 8008630:	aa06      	add	r2, sp, #24
 8008632:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008636:	e9cd 3500 	strd	r3, r5, [sp]
 800863a:	4622      	mov	r2, r4
 800863c:	463b      	mov	r3, r7
 800863e:	f001 f8eb 	bl	8009818 <_dtoa_r>
 8008642:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008646:	4606      	mov	r6, r0
 8008648:	d102      	bne.n	8008650 <__cvt+0x60>
 800864a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800864c:	07db      	lsls	r3, r3, #31
 800864e:	d522      	bpl.n	8008696 <__cvt+0xa6>
 8008650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008654:	eb06 0905 	add.w	r9, r6, r5
 8008658:	d110      	bne.n	800867c <__cvt+0x8c>
 800865a:	7833      	ldrb	r3, [r6, #0]
 800865c:	2b30      	cmp	r3, #48	; 0x30
 800865e:	d10a      	bne.n	8008676 <__cvt+0x86>
 8008660:	2200      	movs	r2, #0
 8008662:	2300      	movs	r3, #0
 8008664:	4620      	mov	r0, r4
 8008666:	4639      	mov	r1, r7
 8008668:	f7f8 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800866c:	b918      	cbnz	r0, 8008676 <__cvt+0x86>
 800866e:	f1c5 0501 	rsb	r5, r5, #1
 8008672:	f8ca 5000 	str.w	r5, [sl]
 8008676:	f8da 3000 	ldr.w	r3, [sl]
 800867a:	4499      	add	r9, r3
 800867c:	2200      	movs	r2, #0
 800867e:	2300      	movs	r3, #0
 8008680:	4620      	mov	r0, r4
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 f990 	bl	80009a8 <__aeabi_dcmpeq>
 8008688:	b108      	cbz	r0, 800868e <__cvt+0x9e>
 800868a:	f8cd 901c 	str.w	r9, [sp, #28]
 800868e:	2230      	movs	r2, #48	; 0x30
 8008690:	9b07      	ldr	r3, [sp, #28]
 8008692:	454b      	cmp	r3, r9
 8008694:	d307      	bcc.n	80086a6 <__cvt+0xb6>
 8008696:	4630      	mov	r0, r6
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800869c:	1b9b      	subs	r3, r3, r6
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	b008      	add	sp, #32
 80086a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a6:	1c59      	adds	r1, r3, #1
 80086a8:	9107      	str	r1, [sp, #28]
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	e7f0      	b.n	8008690 <__cvt+0xa0>

080086ae <__exponent>:
 80086ae:	4603      	mov	r3, r0
 80086b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b2:	2900      	cmp	r1, #0
 80086b4:	f803 2b02 	strb.w	r2, [r3], #2
 80086b8:	bfb6      	itet	lt
 80086ba:	222d      	movlt	r2, #45	; 0x2d
 80086bc:	222b      	movge	r2, #43	; 0x2b
 80086be:	4249      	neglt	r1, r1
 80086c0:	2909      	cmp	r1, #9
 80086c2:	7042      	strb	r2, [r0, #1]
 80086c4:	dd2a      	ble.n	800871c <__exponent+0x6e>
 80086c6:	f10d 0207 	add.w	r2, sp, #7
 80086ca:	4617      	mov	r7, r2
 80086cc:	260a      	movs	r6, #10
 80086ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80086d2:	4694      	mov	ip, r2
 80086d4:	fb06 1415 	mls	r4, r6, r5, r1
 80086d8:	3430      	adds	r4, #48	; 0x30
 80086da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086de:	460c      	mov	r4, r1
 80086e0:	2c63      	cmp	r4, #99	; 0x63
 80086e2:	4629      	mov	r1, r5
 80086e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80086e8:	dcf1      	bgt.n	80086ce <__exponent+0x20>
 80086ea:	3130      	adds	r1, #48	; 0x30
 80086ec:	f1ac 0402 	sub.w	r4, ip, #2
 80086f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086f4:	4622      	mov	r2, r4
 80086f6:	1c41      	adds	r1, r0, #1
 80086f8:	42ba      	cmp	r2, r7
 80086fa:	d30a      	bcc.n	8008712 <__exponent+0x64>
 80086fc:	f10d 0209 	add.w	r2, sp, #9
 8008700:	eba2 020c 	sub.w	r2, r2, ip
 8008704:	42bc      	cmp	r4, r7
 8008706:	bf88      	it	hi
 8008708:	2200      	movhi	r2, #0
 800870a:	4413      	add	r3, r2
 800870c:	1a18      	subs	r0, r3, r0
 800870e:	b003      	add	sp, #12
 8008710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008712:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008716:	f801 5f01 	strb.w	r5, [r1, #1]!
 800871a:	e7ed      	b.n	80086f8 <__exponent+0x4a>
 800871c:	2330      	movs	r3, #48	; 0x30
 800871e:	3130      	adds	r1, #48	; 0x30
 8008720:	7083      	strb	r3, [r0, #2]
 8008722:	70c1      	strb	r1, [r0, #3]
 8008724:	1d03      	adds	r3, r0, #4
 8008726:	e7f1      	b.n	800870c <__exponent+0x5e>

08008728 <_printf_float>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	b091      	sub	sp, #68	; 0x44
 800872e:	460c      	mov	r4, r1
 8008730:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008734:	4616      	mov	r6, r2
 8008736:	461f      	mov	r7, r3
 8008738:	4605      	mov	r5, r0
 800873a:	f000 ff0d 	bl	8009558 <_localeconv_r>
 800873e:	6803      	ldr	r3, [r0, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	9309      	str	r3, [sp, #36]	; 0x24
 8008744:	f7f7 fd04 	bl	8000150 <strlen>
 8008748:	2300      	movs	r3, #0
 800874a:	930e      	str	r3, [sp, #56]	; 0x38
 800874c:	f8d8 3000 	ldr.w	r3, [r8]
 8008750:	900a      	str	r0, [sp, #40]	; 0x28
 8008752:	3307      	adds	r3, #7
 8008754:	f023 0307 	bic.w	r3, r3, #7
 8008758:	f103 0208 	add.w	r2, r3, #8
 800875c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008760:	f8d4 b000 	ldr.w	fp, [r4]
 8008764:	f8c8 2000 	str.w	r2, [r8]
 8008768:	e9d3 a800 	ldrd	sl, r8, [r3]
 800876c:	4652      	mov	r2, sl
 800876e:	4643      	mov	r3, r8
 8008770:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008774:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008778:	930b      	str	r3, [sp, #44]	; 0x2c
 800877a:	f04f 32ff 	mov.w	r2, #4294967295
 800877e:	4650      	mov	r0, sl
 8008780:	4b9c      	ldr	r3, [pc, #624]	; (80089f4 <_printf_float+0x2cc>)
 8008782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008784:	f7f8 f942 	bl	8000a0c <__aeabi_dcmpun>
 8008788:	bb70      	cbnz	r0, 80087e8 <_printf_float+0xc0>
 800878a:	f04f 32ff 	mov.w	r2, #4294967295
 800878e:	4650      	mov	r0, sl
 8008790:	4b98      	ldr	r3, [pc, #608]	; (80089f4 <_printf_float+0x2cc>)
 8008792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008794:	f7f8 f91c 	bl	80009d0 <__aeabi_dcmple>
 8008798:	bb30      	cbnz	r0, 80087e8 <_printf_float+0xc0>
 800879a:	2200      	movs	r2, #0
 800879c:	2300      	movs	r3, #0
 800879e:	4650      	mov	r0, sl
 80087a0:	4641      	mov	r1, r8
 80087a2:	f7f8 f90b 	bl	80009bc <__aeabi_dcmplt>
 80087a6:	b110      	cbz	r0, 80087ae <_printf_float+0x86>
 80087a8:	232d      	movs	r3, #45	; 0x2d
 80087aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ae:	4a92      	ldr	r2, [pc, #584]	; (80089f8 <_printf_float+0x2d0>)
 80087b0:	4b92      	ldr	r3, [pc, #584]	; (80089fc <_printf_float+0x2d4>)
 80087b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80087b6:	bf94      	ite	ls
 80087b8:	4690      	movls	r8, r2
 80087ba:	4698      	movhi	r8, r3
 80087bc:	2303      	movs	r3, #3
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	f02b 0304 	bic.w	r3, fp, #4
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	4633      	mov	r3, r6
 80087cc:	4621      	mov	r1, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	9700      	str	r7, [sp, #0]
 80087d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80087d4:	f000 f9d6 	bl	8008b84 <_printf_common>
 80087d8:	3001      	adds	r0, #1
 80087da:	f040 8090 	bne.w	80088fe <_printf_float+0x1d6>
 80087de:	f04f 30ff 	mov.w	r0, #4294967295
 80087e2:	b011      	add	sp, #68	; 0x44
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	4652      	mov	r2, sl
 80087ea:	4643      	mov	r3, r8
 80087ec:	4650      	mov	r0, sl
 80087ee:	4641      	mov	r1, r8
 80087f0:	f7f8 f90c 	bl	8000a0c <__aeabi_dcmpun>
 80087f4:	b148      	cbz	r0, 800880a <_printf_float+0xe2>
 80087f6:	f1b8 0f00 	cmp.w	r8, #0
 80087fa:	bfb8      	it	lt
 80087fc:	232d      	movlt	r3, #45	; 0x2d
 80087fe:	4a80      	ldr	r2, [pc, #512]	; (8008a00 <_printf_float+0x2d8>)
 8008800:	bfb8      	it	lt
 8008802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008806:	4b7f      	ldr	r3, [pc, #508]	; (8008a04 <_printf_float+0x2dc>)
 8008808:	e7d3      	b.n	80087b2 <_printf_float+0x8a>
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	d142      	bne.n	800889a <_printf_float+0x172>
 8008814:	2306      	movs	r3, #6
 8008816:	6063      	str	r3, [r4, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	9206      	str	r2, [sp, #24]
 800881c:	aa0e      	add	r2, sp, #56	; 0x38
 800881e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008822:	aa0d      	add	r2, sp, #52	; 0x34
 8008824:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008828:	9203      	str	r2, [sp, #12]
 800882a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800882e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	4652      	mov	r2, sl
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4628      	mov	r0, r5
 800883c:	4643      	mov	r3, r8
 800883e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008840:	f7ff fed6 	bl	80085f0 <__cvt>
 8008844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008846:	4680      	mov	r8, r0
 8008848:	2947      	cmp	r1, #71	; 0x47
 800884a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800884c:	d108      	bne.n	8008860 <_printf_float+0x138>
 800884e:	1cc8      	adds	r0, r1, #3
 8008850:	db02      	blt.n	8008858 <_printf_float+0x130>
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	4299      	cmp	r1, r3
 8008856:	dd40      	ble.n	80088da <_printf_float+0x1b2>
 8008858:	f1a9 0902 	sub.w	r9, r9, #2
 800885c:	fa5f f989 	uxtb.w	r9, r9
 8008860:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008864:	d81f      	bhi.n	80088a6 <_printf_float+0x17e>
 8008866:	464a      	mov	r2, r9
 8008868:	3901      	subs	r1, #1
 800886a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800886e:	910d      	str	r1, [sp, #52]	; 0x34
 8008870:	f7ff ff1d 	bl	80086ae <__exponent>
 8008874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008876:	4682      	mov	sl, r0
 8008878:	1813      	adds	r3, r2, r0
 800887a:	2a01      	cmp	r2, #1
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	dc02      	bgt.n	8008886 <_printf_float+0x15e>
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	07d2      	lsls	r2, r2, #31
 8008884:	d501      	bpl.n	800888a <_printf_float+0x162>
 8008886:	3301      	adds	r3, #1
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800888e:	2b00      	cmp	r3, #0
 8008890:	d09b      	beq.n	80087ca <_printf_float+0xa2>
 8008892:	232d      	movs	r3, #45	; 0x2d
 8008894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008898:	e797      	b.n	80087ca <_printf_float+0xa2>
 800889a:	2947      	cmp	r1, #71	; 0x47
 800889c:	d1bc      	bne.n	8008818 <_printf_float+0xf0>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1ba      	bne.n	8008818 <_printf_float+0xf0>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e7b7      	b.n	8008816 <_printf_float+0xee>
 80088a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80088aa:	d118      	bne.n	80088de <_printf_float+0x1b6>
 80088ac:	2900      	cmp	r1, #0
 80088ae:	6863      	ldr	r3, [r4, #4]
 80088b0:	dd0b      	ble.n	80088ca <_printf_float+0x1a2>
 80088b2:	6121      	str	r1, [r4, #16]
 80088b4:	b913      	cbnz	r3, 80088bc <_printf_float+0x194>
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	07d0      	lsls	r0, r2, #31
 80088ba:	d502      	bpl.n	80088c2 <_printf_float+0x19a>
 80088bc:	3301      	adds	r3, #1
 80088be:	440b      	add	r3, r1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	f04f 0a00 	mov.w	sl, #0
 80088c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80088c8:	e7df      	b.n	800888a <_printf_float+0x162>
 80088ca:	b913      	cbnz	r3, 80088d2 <_printf_float+0x1aa>
 80088cc:	6822      	ldr	r2, [r4, #0]
 80088ce:	07d2      	lsls	r2, r2, #31
 80088d0:	d501      	bpl.n	80088d6 <_printf_float+0x1ae>
 80088d2:	3302      	adds	r3, #2
 80088d4:	e7f4      	b.n	80088c0 <_printf_float+0x198>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f2      	b.n	80088c0 <_printf_float+0x198>
 80088da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80088de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e0:	4299      	cmp	r1, r3
 80088e2:	db05      	blt.n	80088f0 <_printf_float+0x1c8>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	6121      	str	r1, [r4, #16]
 80088e8:	07d8      	lsls	r0, r3, #31
 80088ea:	d5ea      	bpl.n	80088c2 <_printf_float+0x19a>
 80088ec:	1c4b      	adds	r3, r1, #1
 80088ee:	e7e7      	b.n	80088c0 <_printf_float+0x198>
 80088f0:	2900      	cmp	r1, #0
 80088f2:	bfcc      	ite	gt
 80088f4:	2201      	movgt	r2, #1
 80088f6:	f1c1 0202 	rsble	r2, r1, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	e7e0      	b.n	80088c0 <_printf_float+0x198>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	055a      	lsls	r2, r3, #21
 8008902:	d407      	bmi.n	8008914 <_printf_float+0x1ec>
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	4642      	mov	r2, r8
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	d12b      	bne.n	800896a <_printf_float+0x242>
 8008912:	e764      	b.n	80087de <_printf_float+0xb6>
 8008914:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008918:	f240 80dd 	bls.w	8008ad6 <_printf_float+0x3ae>
 800891c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008920:	2200      	movs	r2, #0
 8008922:	2300      	movs	r3, #0
 8008924:	f7f8 f840 	bl	80009a8 <__aeabi_dcmpeq>
 8008928:	2800      	cmp	r0, #0
 800892a:	d033      	beq.n	8008994 <_printf_float+0x26c>
 800892c:	2301      	movs	r3, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	4a35      	ldr	r2, [pc, #212]	; (8008a08 <_printf_float+0x2e0>)
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f af51 	beq.w	80087de <_printf_float+0xb6>
 800893c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008940:	429a      	cmp	r2, r3
 8008942:	db02      	blt.n	800894a <_printf_float+0x222>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07d8      	lsls	r0, r3, #31
 8008948:	d50f      	bpl.n	800896a <_printf_float+0x242>
 800894a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f af42 	beq.w	80087de <_printf_float+0xb6>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	f104 091a 	add.w	r9, r4, #26
 8008962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008964:	3b01      	subs	r3, #1
 8008966:	4543      	cmp	r3, r8
 8008968:	dc09      	bgt.n	800897e <_printf_float+0x256>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	079b      	lsls	r3, r3, #30
 800896e:	f100 8104 	bmi.w	8008b7a <_printf_float+0x452>
 8008972:	68e0      	ldr	r0, [r4, #12]
 8008974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008976:	4298      	cmp	r0, r3
 8008978:	bfb8      	it	lt
 800897a:	4618      	movlt	r0, r3
 800897c:	e731      	b.n	80087e2 <_printf_float+0xba>
 800897e:	2301      	movs	r3, #1
 8008980:	464a      	mov	r2, r9
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f af28 	beq.w	80087de <_printf_float+0xb6>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	e7e6      	b.n	8008962 <_printf_float+0x23a>
 8008994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008996:	2b00      	cmp	r3, #0
 8008998:	dc38      	bgt.n	8008a0c <_printf_float+0x2e4>
 800899a:	2301      	movs	r3, #1
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <_printf_float+0x2e0>)
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	f43f af1a 	beq.w	80087de <_printf_float+0xb6>
 80089aa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80089ae:	4313      	orrs	r3, r2
 80089b0:	d102      	bne.n	80089b8 <_printf_float+0x290>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	07d9      	lsls	r1, r3, #31
 80089b6:	d5d8      	bpl.n	800896a <_printf_float+0x242>
 80089b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f af0b 	beq.w	80087de <_printf_float+0xb6>
 80089c8:	f04f 0900 	mov.w	r9, #0
 80089cc:	f104 0a1a 	add.w	sl, r4, #26
 80089d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d2:	425b      	negs	r3, r3
 80089d4:	454b      	cmp	r3, r9
 80089d6:	dc01      	bgt.n	80089dc <_printf_float+0x2b4>
 80089d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089da:	e794      	b.n	8008906 <_printf_float+0x1de>
 80089dc:	2301      	movs	r3, #1
 80089de:	4652      	mov	r2, sl
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f aef9 	beq.w	80087de <_printf_float+0xb6>
 80089ec:	f109 0901 	add.w	r9, r9, #1
 80089f0:	e7ee      	b.n	80089d0 <_printf_float+0x2a8>
 80089f2:	bf00      	nop
 80089f4:	7fefffff 	.word	0x7fefffff
 80089f8:	0800bec1 	.word	0x0800bec1
 80089fc:	0800bec5 	.word	0x0800bec5
 8008a00:	0800bec9 	.word	0x0800bec9
 8008a04:	0800becd 	.word	0x0800becd
 8008a08:	0800bed1 	.word	0x0800bed1
 8008a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a10:	429a      	cmp	r2, r3
 8008a12:	bfa8      	it	ge
 8008a14:	461a      	movge	r2, r3
 8008a16:	2a00      	cmp	r2, #0
 8008a18:	4691      	mov	r9, r2
 8008a1a:	dc37      	bgt.n	8008a8c <_printf_float+0x364>
 8008a1c:	f04f 0b00 	mov.w	fp, #0
 8008a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a24:	f104 021a 	add.w	r2, r4, #26
 8008a28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008a2c:	ebaa 0309 	sub.w	r3, sl, r9
 8008a30:	455b      	cmp	r3, fp
 8008a32:	dc33      	bgt.n	8008a9c <_printf_float+0x374>
 8008a34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	db3b      	blt.n	8008ab4 <_printf_float+0x38c>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	07da      	lsls	r2, r3, #31
 8008a40:	d438      	bmi.n	8008ab4 <_printf_float+0x38c>
 8008a42:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008a46:	eba2 0903 	sub.w	r9, r2, r3
 8008a4a:	eba2 020a 	sub.w	r2, r2, sl
 8008a4e:	4591      	cmp	r9, r2
 8008a50:	bfa8      	it	ge
 8008a52:	4691      	movge	r9, r2
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	dc34      	bgt.n	8008ac4 <_printf_float+0x39c>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a62:	f104 0a1a 	add.w	sl, r4, #26
 8008a66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	eba3 0309 	sub.w	r3, r3, r9
 8008a70:	4543      	cmp	r3, r8
 8008a72:	f77f af7a 	ble.w	800896a <_printf_float+0x242>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4652      	mov	r2, sl
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f aeac 	beq.w	80087de <_printf_float+0xb6>
 8008a86:	f108 0801 	add.w	r8, r8, #1
 8008a8a:	e7ec      	b.n	8008a66 <_printf_float+0x33e>
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4642      	mov	r2, r8
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	d1c0      	bne.n	8008a1c <_printf_float+0x2f4>
 8008a9a:	e6a0      	b.n	80087de <_printf_float+0xb6>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f ae99 	beq.w	80087de <_printf_float+0xb6>
 8008aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aae:	f10b 0b01 	add.w	fp, fp, #1
 8008ab2:	e7b9      	b.n	8008a28 <_printf_float+0x300>
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d1bf      	bne.n	8008a42 <_printf_float+0x31a>
 8008ac2:	e68c      	b.n	80087de <_printf_float+0xb6>
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4628      	mov	r0, r5
 8008aca:	eb08 020a 	add.w	r2, r8, sl
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d1c2      	bne.n	8008a5a <_printf_float+0x332>
 8008ad4:	e683      	b.n	80087de <_printf_float+0xb6>
 8008ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ad8:	2a01      	cmp	r2, #1
 8008ada:	dc01      	bgt.n	8008ae0 <_printf_float+0x3b8>
 8008adc:	07db      	lsls	r3, r3, #31
 8008ade:	d539      	bpl.n	8008b54 <_printf_float+0x42c>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f ae77 	beq.w	80087de <_printf_float+0xb6>
 8008af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f ae6f 	beq.w	80087de <_printf_float+0xb6>
 8008b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b04:	2200      	movs	r2, #0
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008b0c:	f7f7 ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 8008b10:	b9d8      	cbnz	r0, 8008b4a <_printf_float+0x422>
 8008b12:	f109 33ff 	add.w	r3, r9, #4294967295
 8008b16:	f108 0201 	add.w	r2, r8, #1
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	d10e      	bne.n	8008b42 <_printf_float+0x41a>
 8008b24:	e65b      	b.n	80087de <_printf_float+0xb6>
 8008b26:	2301      	movs	r3, #1
 8008b28:	464a      	mov	r2, r9
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f ae54 	beq.w	80087de <_printf_float+0xb6>
 8008b36:	f108 0801 	add.w	r8, r8, #1
 8008b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	4543      	cmp	r3, r8
 8008b40:	dcf1      	bgt.n	8008b26 <_printf_float+0x3fe>
 8008b42:	4653      	mov	r3, sl
 8008b44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b48:	e6de      	b.n	8008908 <_printf_float+0x1e0>
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	f104 091a 	add.w	r9, r4, #26
 8008b52:	e7f2      	b.n	8008b3a <_printf_float+0x412>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4642      	mov	r2, r8
 8008b58:	e7df      	b.n	8008b1a <_printf_float+0x3f2>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	464a      	mov	r2, r9
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b8      	blx	r7
 8008b64:	3001      	adds	r0, #1
 8008b66:	f43f ae3a 	beq.w	80087de <_printf_float+0xb6>
 8008b6a:	f108 0801 	add.w	r8, r8, #1
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b72:	1a5b      	subs	r3, r3, r1
 8008b74:	4543      	cmp	r3, r8
 8008b76:	dcf0      	bgt.n	8008b5a <_printf_float+0x432>
 8008b78:	e6fb      	b.n	8008972 <_printf_float+0x24a>
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	f104 0919 	add.w	r9, r4, #25
 8008b82:	e7f4      	b.n	8008b6e <_printf_float+0x446>

08008b84 <_printf_common>:
 8008b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	4616      	mov	r6, r2
 8008b8a:	4699      	mov	r9, r3
 8008b8c:	688a      	ldr	r2, [r1, #8]
 8008b8e:	690b      	ldr	r3, [r1, #16]
 8008b90:	4607      	mov	r7, r0
 8008b92:	4293      	cmp	r3, r2
 8008b94:	bfb8      	it	lt
 8008b96:	4613      	movlt	r3, r2
 8008b98:	6033      	str	r3, [r6, #0]
 8008b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba4:	b10a      	cbz	r2, 8008baa <_printf_common+0x26>
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	6033      	str	r3, [r6, #0]
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	0699      	lsls	r1, r3, #26
 8008bae:	bf42      	ittt	mi
 8008bb0:	6833      	ldrmi	r3, [r6, #0]
 8008bb2:	3302      	addmi	r3, #2
 8008bb4:	6033      	strmi	r3, [r6, #0]
 8008bb6:	6825      	ldr	r5, [r4, #0]
 8008bb8:	f015 0506 	ands.w	r5, r5, #6
 8008bbc:	d106      	bne.n	8008bcc <_printf_common+0x48>
 8008bbe:	f104 0a19 	add.w	sl, r4, #25
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	6832      	ldr	r2, [r6, #0]
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	42ab      	cmp	r3, r5
 8008bca:	dc2b      	bgt.n	8008c24 <_printf_common+0xa0>
 8008bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bd0:	1e13      	subs	r3, r2, #0
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	bf18      	it	ne
 8008bd6:	2301      	movne	r3, #1
 8008bd8:	0692      	lsls	r2, r2, #26
 8008bda:	d430      	bmi.n	8008c3e <_printf_common+0xba>
 8008bdc:	4649      	mov	r1, r9
 8008bde:	4638      	mov	r0, r7
 8008be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d023      	beq.n	8008c32 <_printf_common+0xae>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	6922      	ldr	r2, [r4, #16]
 8008bee:	f003 0306 	and.w	r3, r3, #6
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	bf14      	ite	ne
 8008bf6:	2500      	movne	r5, #0
 8008bf8:	6833      	ldreq	r3, [r6, #0]
 8008bfa:	f04f 0600 	mov.w	r6, #0
 8008bfe:	bf08      	it	eq
 8008c00:	68e5      	ldreq	r5, [r4, #12]
 8008c02:	f104 041a 	add.w	r4, r4, #26
 8008c06:	bf08      	it	eq
 8008c08:	1aed      	subeq	r5, r5, r3
 8008c0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008c0e:	bf08      	it	eq
 8008c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c14:	4293      	cmp	r3, r2
 8008c16:	bfc4      	itt	gt
 8008c18:	1a9b      	subgt	r3, r3, r2
 8008c1a:	18ed      	addgt	r5, r5, r3
 8008c1c:	42b5      	cmp	r5, r6
 8008c1e:	d11a      	bne.n	8008c56 <_printf_common+0xd2>
 8008c20:	2000      	movs	r0, #0
 8008c22:	e008      	b.n	8008c36 <_printf_common+0xb2>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4652      	mov	r2, sl
 8008c28:	4649      	mov	r1, r9
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	47c0      	blx	r8
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d103      	bne.n	8008c3a <_printf_common+0xb6>
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	3501      	adds	r5, #1
 8008c3c:	e7c1      	b.n	8008bc2 <_printf_common+0x3e>
 8008c3e:	2030      	movs	r0, #48	; 0x30
 8008c40:	18e1      	adds	r1, r4, r3
 8008c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c4c:	4422      	add	r2, r4
 8008c4e:	3302      	adds	r3, #2
 8008c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c54:	e7c2      	b.n	8008bdc <_printf_common+0x58>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	47c0      	blx	r8
 8008c60:	3001      	adds	r0, #1
 8008c62:	d0e6      	beq.n	8008c32 <_printf_common+0xae>
 8008c64:	3601      	adds	r6, #1
 8008c66:	e7d9      	b.n	8008c1c <_printf_common+0x98>

08008c68 <_printf_i>:
 8008c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	7e0f      	ldrb	r7, [r1, #24]
 8008c6e:	4691      	mov	r9, r2
 8008c70:	2f78      	cmp	r7, #120	; 0x78
 8008c72:	4680      	mov	r8, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	469a      	mov	sl, r3
 8008c78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c7e:	d807      	bhi.n	8008c90 <_printf_i+0x28>
 8008c80:	2f62      	cmp	r7, #98	; 0x62
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x32>
 8008c84:	2f00      	cmp	r7, #0
 8008c86:	f000 80d5 	beq.w	8008e34 <_printf_i+0x1cc>
 8008c8a:	2f58      	cmp	r7, #88	; 0x58
 8008c8c:	f000 80c1 	beq.w	8008e12 <_printf_i+0x1aa>
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c98:	e03a      	b.n	8008d10 <_printf_i+0xa8>
 8008c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c9e:	2b15      	cmp	r3, #21
 8008ca0:	d8f6      	bhi.n	8008c90 <_printf_i+0x28>
 8008ca2:	a101      	add	r1, pc, #4	; (adr r1, 8008ca8 <_printf_i+0x40>)
 8008ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d15 	.word	0x08008d15
 8008cb0:	08008c91 	.word	0x08008c91
 8008cb4:	08008c91 	.word	0x08008c91
 8008cb8:	08008c91 	.word	0x08008c91
 8008cbc:	08008c91 	.word	0x08008c91
 8008cc0:	08008d15 	.word	0x08008d15
 8008cc4:	08008c91 	.word	0x08008c91
 8008cc8:	08008c91 	.word	0x08008c91
 8008ccc:	08008c91 	.word	0x08008c91
 8008cd0:	08008c91 	.word	0x08008c91
 8008cd4:	08008e1b 	.word	0x08008e1b
 8008cd8:	08008d41 	.word	0x08008d41
 8008cdc:	08008dd5 	.word	0x08008dd5
 8008ce0:	08008c91 	.word	0x08008c91
 8008ce4:	08008c91 	.word	0x08008c91
 8008ce8:	08008e3d 	.word	0x08008e3d
 8008cec:	08008c91 	.word	0x08008c91
 8008cf0:	08008d41 	.word	0x08008d41
 8008cf4:	08008c91 	.word	0x08008c91
 8008cf8:	08008c91 	.word	0x08008c91
 8008cfc:	08008ddd 	.word	0x08008ddd
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	602a      	str	r2, [r5, #0]
 8008d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d10:	2301      	movs	r3, #1
 8008d12:	e0a0      	b.n	8008e56 <_printf_i+0x1ee>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	0607      	lsls	r7, r0, #24
 8008d1a:	f103 0104 	add.w	r1, r3, #4
 8008d1e:	6029      	str	r1, [r5, #0]
 8008d20:	d501      	bpl.n	8008d26 <_printf_i+0xbe>
 8008d22:	681e      	ldr	r6, [r3, #0]
 8008d24:	e003      	b.n	8008d2e <_printf_i+0xc6>
 8008d26:	0646      	lsls	r6, r0, #25
 8008d28:	d5fb      	bpl.n	8008d22 <_printf_i+0xba>
 8008d2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	da03      	bge.n	8008d3a <_printf_i+0xd2>
 8008d32:	232d      	movs	r3, #45	; 0x2d
 8008d34:	4276      	negs	r6, r6
 8008d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3a:	230a      	movs	r3, #10
 8008d3c:	4859      	ldr	r0, [pc, #356]	; (8008ea4 <_printf_i+0x23c>)
 8008d3e:	e012      	b.n	8008d66 <_printf_i+0xfe>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	6820      	ldr	r0, [r4, #0]
 8008d44:	1d19      	adds	r1, r3, #4
 8008d46:	6029      	str	r1, [r5, #0]
 8008d48:	0605      	lsls	r5, r0, #24
 8008d4a:	d501      	bpl.n	8008d50 <_printf_i+0xe8>
 8008d4c:	681e      	ldr	r6, [r3, #0]
 8008d4e:	e002      	b.n	8008d56 <_printf_i+0xee>
 8008d50:	0641      	lsls	r1, r0, #25
 8008d52:	d5fb      	bpl.n	8008d4c <_printf_i+0xe4>
 8008d54:	881e      	ldrh	r6, [r3, #0]
 8008d56:	2f6f      	cmp	r7, #111	; 0x6f
 8008d58:	bf0c      	ite	eq
 8008d5a:	2308      	moveq	r3, #8
 8008d5c:	230a      	movne	r3, #10
 8008d5e:	4851      	ldr	r0, [pc, #324]	; (8008ea4 <_printf_i+0x23c>)
 8008d60:	2100      	movs	r1, #0
 8008d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d66:	6865      	ldr	r5, [r4, #4]
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	bfa8      	it	ge
 8008d6c:	6821      	ldrge	r1, [r4, #0]
 8008d6e:	60a5      	str	r5, [r4, #8]
 8008d70:	bfa4      	itt	ge
 8008d72:	f021 0104 	bicge.w	r1, r1, #4
 8008d76:	6021      	strge	r1, [r4, #0]
 8008d78:	b90e      	cbnz	r6, 8008d7e <_printf_i+0x116>
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	d04b      	beq.n	8008e16 <_printf_i+0x1ae>
 8008d7e:	4615      	mov	r5, r2
 8008d80:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d84:	fb03 6711 	mls	r7, r3, r1, r6
 8008d88:	5dc7      	ldrb	r7, [r0, r7]
 8008d8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d8e:	4637      	mov	r7, r6
 8008d90:	42bb      	cmp	r3, r7
 8008d92:	460e      	mov	r6, r1
 8008d94:	d9f4      	bls.n	8008d80 <_printf_i+0x118>
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d10b      	bne.n	8008db2 <_printf_i+0x14a>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	07de      	lsls	r6, r3, #31
 8008d9e:	d508      	bpl.n	8008db2 <_printf_i+0x14a>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	6861      	ldr	r1, [r4, #4]
 8008da4:	4299      	cmp	r1, r3
 8008da6:	bfde      	ittt	le
 8008da8:	2330      	movle	r3, #48	; 0x30
 8008daa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008db2:	1b52      	subs	r2, r2, r5
 8008db4:	6122      	str	r2, [r4, #16]
 8008db6:	464b      	mov	r3, r9
 8008db8:	4621      	mov	r1, r4
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f8cd a000 	str.w	sl, [sp]
 8008dc0:	aa03      	add	r2, sp, #12
 8008dc2:	f7ff fedf 	bl	8008b84 <_printf_common>
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d14a      	bne.n	8008e60 <_printf_i+0x1f8>
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	b004      	add	sp, #16
 8008dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	f043 0320 	orr.w	r3, r3, #32
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	2778      	movs	r7, #120	; 0x78
 8008dde:	4832      	ldr	r0, [pc, #200]	; (8008ea8 <_printf_i+0x240>)
 8008de0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	6829      	ldr	r1, [r5, #0]
 8008de8:	061f      	lsls	r7, r3, #24
 8008dea:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dee:	d402      	bmi.n	8008df6 <_printf_i+0x18e>
 8008df0:	065f      	lsls	r7, r3, #25
 8008df2:	bf48      	it	mi
 8008df4:	b2b6      	uxthmi	r6, r6
 8008df6:	07df      	lsls	r7, r3, #31
 8008df8:	bf48      	it	mi
 8008dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfe:	6029      	str	r1, [r5, #0]
 8008e00:	bf48      	it	mi
 8008e02:	6023      	strmi	r3, [r4, #0]
 8008e04:	b91e      	cbnz	r6, 8008e0e <_printf_i+0x1a6>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f023 0320 	bic.w	r3, r3, #32
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	2310      	movs	r3, #16
 8008e10:	e7a6      	b.n	8008d60 <_printf_i+0xf8>
 8008e12:	4824      	ldr	r0, [pc, #144]	; (8008ea4 <_printf_i+0x23c>)
 8008e14:	e7e4      	b.n	8008de0 <_printf_i+0x178>
 8008e16:	4615      	mov	r5, r2
 8008e18:	e7bd      	b.n	8008d96 <_printf_i+0x12e>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	6826      	ldr	r6, [r4, #0]
 8008e1e:	1d18      	adds	r0, r3, #4
 8008e20:	6961      	ldr	r1, [r4, #20]
 8008e22:	6028      	str	r0, [r5, #0]
 8008e24:	0635      	lsls	r5, r6, #24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	d501      	bpl.n	8008e2e <_printf_i+0x1c6>
 8008e2a:	6019      	str	r1, [r3, #0]
 8008e2c:	e002      	b.n	8008e34 <_printf_i+0x1cc>
 8008e2e:	0670      	lsls	r0, r6, #25
 8008e30:	d5fb      	bpl.n	8008e2a <_printf_i+0x1c2>
 8008e32:	8019      	strh	r1, [r3, #0]
 8008e34:	2300      	movs	r3, #0
 8008e36:	4615      	mov	r5, r2
 8008e38:	6123      	str	r3, [r4, #16]
 8008e3a:	e7bc      	b.n	8008db6 <_printf_i+0x14e>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	2100      	movs	r1, #0
 8008e40:	1d1a      	adds	r2, r3, #4
 8008e42:	602a      	str	r2, [r5, #0]
 8008e44:	681d      	ldr	r5, [r3, #0]
 8008e46:	6862      	ldr	r2, [r4, #4]
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f000 fc14 	bl	8009676 <memchr>
 8008e4e:	b108      	cbz	r0, 8008e54 <_printf_i+0x1ec>
 8008e50:	1b40      	subs	r0, r0, r5
 8008e52:	6060      	str	r0, [r4, #4]
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	6123      	str	r3, [r4, #16]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e5e:	e7aa      	b.n	8008db6 <_printf_i+0x14e>
 8008e60:	462a      	mov	r2, r5
 8008e62:	4649      	mov	r1, r9
 8008e64:	4640      	mov	r0, r8
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	47d0      	blx	sl
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d0ad      	beq.n	8008dca <_printf_i+0x162>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	079b      	lsls	r3, r3, #30
 8008e72:	d413      	bmi.n	8008e9c <_printf_i+0x234>
 8008e74:	68e0      	ldr	r0, [r4, #12]
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	4298      	cmp	r0, r3
 8008e7a:	bfb8      	it	lt
 8008e7c:	4618      	movlt	r0, r3
 8008e7e:	e7a6      	b.n	8008dce <_printf_i+0x166>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4632      	mov	r2, r6
 8008e84:	4649      	mov	r1, r9
 8008e86:	4640      	mov	r0, r8
 8008e88:	47d0      	blx	sl
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d09d      	beq.n	8008dca <_printf_i+0x162>
 8008e8e:	3501      	adds	r5, #1
 8008e90:	68e3      	ldr	r3, [r4, #12]
 8008e92:	9903      	ldr	r1, [sp, #12]
 8008e94:	1a5b      	subs	r3, r3, r1
 8008e96:	42ab      	cmp	r3, r5
 8008e98:	dcf2      	bgt.n	8008e80 <_printf_i+0x218>
 8008e9a:	e7eb      	b.n	8008e74 <_printf_i+0x20c>
 8008e9c:	2500      	movs	r5, #0
 8008e9e:	f104 0619 	add.w	r6, r4, #25
 8008ea2:	e7f5      	b.n	8008e90 <_printf_i+0x228>
 8008ea4:	0800bed3 	.word	0x0800bed3
 8008ea8:	0800bee4 	.word	0x0800bee4

08008eac <std>:
 8008eac:	2300      	movs	r3, #0
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eba:	6083      	str	r3, [r0, #8]
 8008ebc:	8181      	strh	r1, [r0, #12]
 8008ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8008ec0:	81c2      	strh	r2, [r0, #14]
 8008ec2:	6183      	str	r3, [r0, #24]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	305c      	adds	r0, #92	; 0x5c
 8008eca:	f000 faa5 	bl	8009418 <memset>
 8008ece:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <std+0x58>)
 8008ed0:	6224      	str	r4, [r4, #32]
 8008ed2:	6263      	str	r3, [r4, #36]	; 0x24
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <std+0x5c>)
 8008ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <std+0x60>)
 8008eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <std+0x64>)
 8008ede:	6323      	str	r3, [r4, #48]	; 0x30
 8008ee0:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <std+0x68>)
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	d006      	beq.n	8008ef4 <std+0x48>
 8008ee6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008eea:	4294      	cmp	r4, r2
 8008eec:	d002      	beq.n	8008ef4 <std+0x48>
 8008eee:	33d0      	adds	r3, #208	; 0xd0
 8008ef0:	429c      	cmp	r4, r3
 8008ef2:	d105      	bne.n	8008f00 <std+0x54>
 8008ef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008efc:	f000 bbb0 	b.w	8009660 <__retarget_lock_init_recursive>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	bf00      	nop
 8008f04:	08009269 	.word	0x08009269
 8008f08:	0800928b 	.word	0x0800928b
 8008f0c:	080092c3 	.word	0x080092c3
 8008f10:	080092e7 	.word	0x080092e7
 8008f14:	200027f4 	.word	0x200027f4

08008f18 <stdio_exit_handler>:
 8008f18:	4a02      	ldr	r2, [pc, #8]	; (8008f24 <stdio_exit_handler+0xc>)
 8008f1a:	4903      	ldr	r1, [pc, #12]	; (8008f28 <stdio_exit_handler+0x10>)
 8008f1c:	4803      	ldr	r0, [pc, #12]	; (8008f2c <stdio_exit_handler+0x14>)
 8008f1e:	f000 b869 	b.w	8008ff4 <_fwalk_sglue>
 8008f22:	bf00      	nop
 8008f24:	20000044 	.word	0x20000044
 8008f28:	0800b821 	.word	0x0800b821
 8008f2c:	200001bc 	.word	0x200001bc

08008f30 <cleanup_stdio>:
 8008f30:	6841      	ldr	r1, [r0, #4]
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <cleanup_stdio+0x34>)
 8008f34:	b510      	push	{r4, lr}
 8008f36:	4299      	cmp	r1, r3
 8008f38:	4604      	mov	r4, r0
 8008f3a:	d001      	beq.n	8008f40 <cleanup_stdio+0x10>
 8008f3c:	f002 fc70 	bl	800b820 <_fflush_r>
 8008f40:	68a1      	ldr	r1, [r4, #8]
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <cleanup_stdio+0x38>)
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d002      	beq.n	8008f4e <cleanup_stdio+0x1e>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f002 fc69 	bl	800b820 <_fflush_r>
 8008f4e:	68e1      	ldr	r1, [r4, #12]
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <cleanup_stdio+0x3c>)
 8008f52:	4299      	cmp	r1, r3
 8008f54:	d004      	beq.n	8008f60 <cleanup_stdio+0x30>
 8008f56:	4620      	mov	r0, r4
 8008f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f5c:	f002 bc60 	b.w	800b820 <_fflush_r>
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	bf00      	nop
 8008f64:	200027f4 	.word	0x200027f4
 8008f68:	2000285c 	.word	0x2000285c
 8008f6c:	200028c4 	.word	0x200028c4

08008f70 <global_stdio_init.part.0>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <global_stdio_init.part.0+0x30>)
 8008f74:	4c0b      	ldr	r4, [pc, #44]	; (8008fa4 <global_stdio_init.part.0+0x34>)
 8008f76:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <global_stdio_init.part.0+0x38>)
 8008f78:	4620      	mov	r0, r4
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f7ff ff94 	bl	8008eac <std>
 8008f84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f88:	2201      	movs	r2, #1
 8008f8a:	2109      	movs	r1, #9
 8008f8c:	f7ff ff8e 	bl	8008eac <std>
 8008f90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f94:	2202      	movs	r2, #2
 8008f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f9a:	2112      	movs	r1, #18
 8008f9c:	f7ff bf86 	b.w	8008eac <std>
 8008fa0:	2000292c 	.word	0x2000292c
 8008fa4:	200027f4 	.word	0x200027f4
 8008fa8:	08008f19 	.word	0x08008f19

08008fac <__sfp_lock_acquire>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__sfp_lock_acquire+0x8>)
 8008fae:	f000 bb58 	b.w	8009662 <__retarget_lock_acquire_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20002935 	.word	0x20002935

08008fb8 <__sfp_lock_release>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__sfp_lock_release+0x8>)
 8008fba:	f000 bb53 	b.w	8009664 <__retarget_lock_release_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	20002935 	.word	0x20002935

08008fc4 <__sinit>:
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	f7ff fff0 	bl	8008fac <__sfp_lock_acquire>
 8008fcc:	6a23      	ldr	r3, [r4, #32]
 8008fce:	b11b      	cbz	r3, 8008fd8 <__sinit+0x14>
 8008fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd4:	f7ff bff0 	b.w	8008fb8 <__sfp_lock_release>
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <__sinit+0x28>)
 8008fda:	6223      	str	r3, [r4, #32]
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <__sinit+0x2c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1f5      	bne.n	8008fd0 <__sinit+0xc>
 8008fe4:	f7ff ffc4 	bl	8008f70 <global_stdio_init.part.0>
 8008fe8:	e7f2      	b.n	8008fd0 <__sinit+0xc>
 8008fea:	bf00      	nop
 8008fec:	08008f31 	.word	0x08008f31
 8008ff0:	2000292c 	.word	0x2000292c

08008ff4 <_fwalk_sglue>:
 8008ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	4688      	mov	r8, r1
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	2600      	movs	r6, #0
 8009000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009004:	f1b9 0901 	subs.w	r9, r9, #1
 8009008:	d505      	bpl.n	8009016 <_fwalk_sglue+0x22>
 800900a:	6824      	ldr	r4, [r4, #0]
 800900c:	2c00      	cmp	r4, #0
 800900e:	d1f7      	bne.n	8009000 <_fwalk_sglue+0xc>
 8009010:	4630      	mov	r0, r6
 8009012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d907      	bls.n	800902c <_fwalk_sglue+0x38>
 800901c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009020:	3301      	adds	r3, #1
 8009022:	d003      	beq.n	800902c <_fwalk_sglue+0x38>
 8009024:	4629      	mov	r1, r5
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	4306      	orrs	r6, r0
 800902c:	3568      	adds	r5, #104	; 0x68
 800902e:	e7e9      	b.n	8009004 <_fwalk_sglue+0x10>

08009030 <iprintf>:
 8009030:	b40f      	push	{r0, r1, r2, r3}
 8009032:	b507      	push	{r0, r1, r2, lr}
 8009034:	4906      	ldr	r1, [pc, #24]	; (8009050 <iprintf+0x20>)
 8009036:	ab04      	add	r3, sp, #16
 8009038:	6808      	ldr	r0, [r1, #0]
 800903a:	f853 2b04 	ldr.w	r2, [r3], #4
 800903e:	6881      	ldr	r1, [r0, #8]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	f002 fa51 	bl	800b4e8 <_vfiprintf_r>
 8009046:	b003      	add	sp, #12
 8009048:	f85d eb04 	ldr.w	lr, [sp], #4
 800904c:	b004      	add	sp, #16
 800904e:	4770      	bx	lr
 8009050:	20000208 	.word	0x20000208

08009054 <_puts_r>:
 8009054:	6a03      	ldr	r3, [r0, #32]
 8009056:	b570      	push	{r4, r5, r6, lr}
 8009058:	4605      	mov	r5, r0
 800905a:	460e      	mov	r6, r1
 800905c:	6884      	ldr	r4, [r0, #8]
 800905e:	b90b      	cbnz	r3, 8009064 <_puts_r+0x10>
 8009060:	f7ff ffb0 	bl	8008fc4 <__sinit>
 8009064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009066:	07db      	lsls	r3, r3, #31
 8009068:	d405      	bmi.n	8009076 <_puts_r+0x22>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	0598      	lsls	r0, r3, #22
 800906e:	d402      	bmi.n	8009076 <_puts_r+0x22>
 8009070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009072:	f000 faf6 	bl	8009662 <__retarget_lock_acquire_recursive>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	0719      	lsls	r1, r3, #28
 800907a:	d513      	bpl.n	80090a4 <_puts_r+0x50>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b18b      	cbz	r3, 80090a4 <_puts_r+0x50>
 8009080:	3e01      	subs	r6, #1
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009088:	3b01      	subs	r3, #1
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	b9e9      	cbnz	r1, 80090ca <_puts_r+0x76>
 800908e:	2b00      	cmp	r3, #0
 8009090:	da2e      	bge.n	80090f0 <_puts_r+0x9c>
 8009092:	4622      	mov	r2, r4
 8009094:	210a      	movs	r1, #10
 8009096:	4628      	mov	r0, r5
 8009098:	f000 f929 	bl	80092ee <__swbuf_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d007      	beq.n	80090b0 <_puts_r+0x5c>
 80090a0:	250a      	movs	r5, #10
 80090a2:	e007      	b.n	80090b4 <_puts_r+0x60>
 80090a4:	4621      	mov	r1, r4
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 f95e 	bl	8009368 <__swsetup_r>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d0e7      	beq.n	8009080 <_puts_r+0x2c>
 80090b0:	f04f 35ff 	mov.w	r5, #4294967295
 80090b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b6:	07da      	lsls	r2, r3, #31
 80090b8:	d405      	bmi.n	80090c6 <_puts_r+0x72>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	059b      	lsls	r3, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_puts_r+0x72>
 80090c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c2:	f000 facf 	bl	8009664 <__retarget_lock_release_recursive>
 80090c6:	4628      	mov	r0, r5
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	da04      	bge.n	80090d8 <_puts_r+0x84>
 80090ce:	69a2      	ldr	r2, [r4, #24]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	dc06      	bgt.n	80090e2 <_puts_r+0x8e>
 80090d4:	290a      	cmp	r1, #10
 80090d6:	d004      	beq.n	80090e2 <_puts_r+0x8e>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	7019      	strb	r1, [r3, #0]
 80090e0:	e7cf      	b.n	8009082 <_puts_r+0x2e>
 80090e2:	4622      	mov	r2, r4
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 f902 	bl	80092ee <__swbuf_r>
 80090ea:	3001      	adds	r0, #1
 80090ec:	d1c9      	bne.n	8009082 <_puts_r+0x2e>
 80090ee:	e7df      	b.n	80090b0 <_puts_r+0x5c>
 80090f0:	250a      	movs	r5, #10
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	701d      	strb	r5, [r3, #0]
 80090fa:	e7db      	b.n	80090b4 <_puts_r+0x60>

080090fc <puts>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <puts+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f7ff bfa7 	b.w	8009054 <_puts_r>
 8009106:	bf00      	nop
 8009108:	20000208 	.word	0x20000208

0800910c <setvbuf>:
 800910c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009110:	461d      	mov	r5, r3
 8009112:	4b54      	ldr	r3, [pc, #336]	; (8009264 <setvbuf+0x158>)
 8009114:	4604      	mov	r4, r0
 8009116:	681f      	ldr	r7, [r3, #0]
 8009118:	460e      	mov	r6, r1
 800911a:	4690      	mov	r8, r2
 800911c:	b127      	cbz	r7, 8009128 <setvbuf+0x1c>
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	b913      	cbnz	r3, 8009128 <setvbuf+0x1c>
 8009122:	4638      	mov	r0, r7
 8009124:	f7ff ff4e 	bl	8008fc4 <__sinit>
 8009128:	f1b8 0f02 	cmp.w	r8, #2
 800912c:	d006      	beq.n	800913c <setvbuf+0x30>
 800912e:	f1b8 0f01 	cmp.w	r8, #1
 8009132:	f200 8094 	bhi.w	800925e <setvbuf+0x152>
 8009136:	2d00      	cmp	r5, #0
 8009138:	f2c0 8091 	blt.w	800925e <setvbuf+0x152>
 800913c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800913e:	07da      	lsls	r2, r3, #31
 8009140:	d405      	bmi.n	800914e <setvbuf+0x42>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	059b      	lsls	r3, r3, #22
 8009146:	d402      	bmi.n	800914e <setvbuf+0x42>
 8009148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914a:	f000 fa8a 	bl	8009662 <__retarget_lock_acquire_recursive>
 800914e:	4621      	mov	r1, r4
 8009150:	4638      	mov	r0, r7
 8009152:	f002 fb65 	bl	800b820 <_fflush_r>
 8009156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009158:	b141      	cbz	r1, 800916c <setvbuf+0x60>
 800915a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800915e:	4299      	cmp	r1, r3
 8009160:	d002      	beq.n	8009168 <setvbuf+0x5c>
 8009162:	4638      	mov	r0, r7
 8009164:	f001 f93c 	bl	800a3e0 <_free_r>
 8009168:	2300      	movs	r3, #0
 800916a:	6363      	str	r3, [r4, #52]	; 0x34
 800916c:	2300      	movs	r3, #0
 800916e:	61a3      	str	r3, [r4, #24]
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	0618      	lsls	r0, r3, #24
 8009176:	d503      	bpl.n	8009180 <setvbuf+0x74>
 8009178:	4638      	mov	r0, r7
 800917a:	6921      	ldr	r1, [r4, #16]
 800917c:	f001 f930 	bl	800a3e0 <_free_r>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f1b8 0f02 	cmp.w	r8, #2
 8009186:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800918a:	f023 0303 	bic.w	r3, r3, #3
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	d05f      	beq.n	8009252 <setvbuf+0x146>
 8009192:	ab01      	add	r3, sp, #4
 8009194:	466a      	mov	r2, sp
 8009196:	4621      	mov	r1, r4
 8009198:	4638      	mov	r0, r7
 800919a:	f002 fb7b 	bl	800b894 <__swhatbuf_r>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	4318      	orrs	r0, r3
 80091a2:	81a0      	strh	r0, [r4, #12]
 80091a4:	bb2d      	cbnz	r5, 80091f2 <setvbuf+0xe6>
 80091a6:	9d00      	ldr	r5, [sp, #0]
 80091a8:	4628      	mov	r0, r5
 80091aa:	f7fe fa61 	bl	8007670 <malloc>
 80091ae:	4606      	mov	r6, r0
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d150      	bne.n	8009256 <setvbuf+0x14a>
 80091b4:	f8dd 9000 	ldr.w	r9, [sp]
 80091b8:	45a9      	cmp	r9, r5
 80091ba:	d13e      	bne.n	800923a <setvbuf+0x12e>
 80091bc:	f04f 35ff 	mov.w	r5, #4294967295
 80091c0:	2200      	movs	r2, #0
 80091c2:	60a2      	str	r2, [r4, #8]
 80091c4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80091c8:	6022      	str	r2, [r4, #0]
 80091ca:	6122      	str	r2, [r4, #16]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d2:	6162      	str	r2, [r4, #20]
 80091d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091d6:	f043 0302 	orr.w	r3, r3, #2
 80091da:	07d1      	lsls	r1, r2, #31
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	d404      	bmi.n	80091ea <setvbuf+0xde>
 80091e0:	059b      	lsls	r3, r3, #22
 80091e2:	d402      	bmi.n	80091ea <setvbuf+0xde>
 80091e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091e6:	f000 fa3d 	bl	8009664 <__retarget_lock_release_recursive>
 80091ea:	4628      	mov	r0, r5
 80091ec:	b003      	add	sp, #12
 80091ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d0d8      	beq.n	80091a8 <setvbuf+0x9c>
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	b913      	cbnz	r3, 8009200 <setvbuf+0xf4>
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7ff fee2 	bl	8008fc4 <__sinit>
 8009200:	f1b8 0f01 	cmp.w	r8, #1
 8009204:	bf08      	it	eq
 8009206:	89a3      	ldrheq	r3, [r4, #12]
 8009208:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800920c:	bf04      	itt	eq
 800920e:	f043 0301 	orreq.w	r3, r3, #1
 8009212:	81a3      	strheq	r3, [r4, #12]
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	6026      	str	r6, [r4, #0]
 8009218:	f013 0208 	ands.w	r2, r3, #8
 800921c:	d01d      	beq.n	800925a <setvbuf+0x14e>
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	bf41      	itttt	mi
 8009222:	2200      	movmi	r2, #0
 8009224:	426d      	negmi	r5, r5
 8009226:	60a2      	strmi	r2, [r4, #8]
 8009228:	61a5      	strmi	r5, [r4, #24]
 800922a:	bf58      	it	pl
 800922c:	60a5      	strpl	r5, [r4, #8]
 800922e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009230:	f015 0501 	ands.w	r5, r5, #1
 8009234:	d0d4      	beq.n	80091e0 <setvbuf+0xd4>
 8009236:	2500      	movs	r5, #0
 8009238:	e7d7      	b.n	80091ea <setvbuf+0xde>
 800923a:	4648      	mov	r0, r9
 800923c:	f7fe fa18 	bl	8007670 <malloc>
 8009240:	4606      	mov	r6, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	d0ba      	beq.n	80091bc <setvbuf+0xb0>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	464d      	mov	r5, r9
 800924a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	e7d1      	b.n	80091f6 <setvbuf+0xea>
 8009252:	2500      	movs	r5, #0
 8009254:	e7b4      	b.n	80091c0 <setvbuf+0xb4>
 8009256:	46a9      	mov	r9, r5
 8009258:	e7f5      	b.n	8009246 <setvbuf+0x13a>
 800925a:	60a2      	str	r2, [r4, #8]
 800925c:	e7e7      	b.n	800922e <setvbuf+0x122>
 800925e:	f04f 35ff 	mov.w	r5, #4294967295
 8009262:	e7c2      	b.n	80091ea <setvbuf+0xde>
 8009264:	20000208 	.word	0x20000208

08009268 <__sread>:
 8009268:	b510      	push	{r4, lr}
 800926a:	460c      	mov	r4, r1
 800926c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009270:	f000 f998 	bl	80095a4 <_read_r>
 8009274:	2800      	cmp	r0, #0
 8009276:	bfab      	itete	ge
 8009278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800927a:	89a3      	ldrhlt	r3, [r4, #12]
 800927c:	181b      	addge	r3, r3, r0
 800927e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009282:	bfac      	ite	ge
 8009284:	6563      	strge	r3, [r4, #84]	; 0x54
 8009286:	81a3      	strhlt	r3, [r4, #12]
 8009288:	bd10      	pop	{r4, pc}

0800928a <__swrite>:
 800928a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928e:	461f      	mov	r7, r3
 8009290:	898b      	ldrh	r3, [r1, #12]
 8009292:	4605      	mov	r5, r0
 8009294:	05db      	lsls	r3, r3, #23
 8009296:	460c      	mov	r4, r1
 8009298:	4616      	mov	r6, r2
 800929a:	d505      	bpl.n	80092a8 <__swrite+0x1e>
 800929c:	2302      	movs	r3, #2
 800929e:	2200      	movs	r2, #0
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	f000 f96c 	bl	8009580 <_lseek_r>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	4632      	mov	r2, r6
 80092ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	4628      	mov	r0, r5
 80092b4:	463b      	mov	r3, r7
 80092b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	f000 b993 	b.w	80095e8 <_write_r>

080092c2 <__sseek>:
 80092c2:	b510      	push	{r4, lr}
 80092c4:	460c      	mov	r4, r1
 80092c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ca:	f000 f959 	bl	8009580 <_lseek_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	bf15      	itete	ne
 80092d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092de:	81a3      	strheq	r3, [r4, #12]
 80092e0:	bf18      	it	ne
 80092e2:	81a3      	strhne	r3, [r4, #12]
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <__sclose>:
 80092e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ea:	f000 b939 	b.w	8009560 <_close_r>

080092ee <__swbuf_r>:
 80092ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f0:	460e      	mov	r6, r1
 80092f2:	4614      	mov	r4, r2
 80092f4:	4605      	mov	r5, r0
 80092f6:	b118      	cbz	r0, 8009300 <__swbuf_r+0x12>
 80092f8:	6a03      	ldr	r3, [r0, #32]
 80092fa:	b90b      	cbnz	r3, 8009300 <__swbuf_r+0x12>
 80092fc:	f7ff fe62 	bl	8008fc4 <__sinit>
 8009300:	69a3      	ldr	r3, [r4, #24]
 8009302:	60a3      	str	r3, [r4, #8]
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	071a      	lsls	r2, r3, #28
 8009308:	d525      	bpl.n	8009356 <__swbuf_r+0x68>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	b31b      	cbz	r3, 8009356 <__swbuf_r+0x68>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	b2f6      	uxtb	r6, r6
 8009314:	1a98      	subs	r0, r3, r2
 8009316:	6963      	ldr	r3, [r4, #20]
 8009318:	4637      	mov	r7, r6
 800931a:	4283      	cmp	r3, r0
 800931c:	dc04      	bgt.n	8009328 <__swbuf_r+0x3a>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f002 fa7d 	bl	800b820 <_fflush_r>
 8009326:	b9e0      	cbnz	r0, 8009362 <__swbuf_r+0x74>
 8009328:	68a3      	ldr	r3, [r4, #8]
 800932a:	3b01      	subs	r3, #1
 800932c:	60a3      	str	r3, [r4, #8]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	701e      	strb	r6, [r3, #0]
 8009336:	6962      	ldr	r2, [r4, #20]
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	429a      	cmp	r2, r3
 800933c:	d004      	beq.n	8009348 <__swbuf_r+0x5a>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	07db      	lsls	r3, r3, #31
 8009342:	d506      	bpl.n	8009352 <__swbuf_r+0x64>
 8009344:	2e0a      	cmp	r6, #10
 8009346:	d104      	bne.n	8009352 <__swbuf_r+0x64>
 8009348:	4621      	mov	r1, r4
 800934a:	4628      	mov	r0, r5
 800934c:	f002 fa68 	bl	800b820 <_fflush_r>
 8009350:	b938      	cbnz	r0, 8009362 <__swbuf_r+0x74>
 8009352:	4638      	mov	r0, r7
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009356:	4621      	mov	r1, r4
 8009358:	4628      	mov	r0, r5
 800935a:	f000 f805 	bl	8009368 <__swsetup_r>
 800935e:	2800      	cmp	r0, #0
 8009360:	d0d5      	beq.n	800930e <__swbuf_r+0x20>
 8009362:	f04f 37ff 	mov.w	r7, #4294967295
 8009366:	e7f4      	b.n	8009352 <__swbuf_r+0x64>

08009368 <__swsetup_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4b2a      	ldr	r3, [pc, #168]	; (8009414 <__swsetup_r+0xac>)
 800936c:	4605      	mov	r5, r0
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	460c      	mov	r4, r1
 8009372:	b118      	cbz	r0, 800937c <__swsetup_r+0x14>
 8009374:	6a03      	ldr	r3, [r0, #32]
 8009376:	b90b      	cbnz	r3, 800937c <__swsetup_r+0x14>
 8009378:	f7ff fe24 	bl	8008fc4 <__sinit>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009382:	0718      	lsls	r0, r3, #28
 8009384:	d422      	bmi.n	80093cc <__swsetup_r+0x64>
 8009386:	06d9      	lsls	r1, r3, #27
 8009388:	d407      	bmi.n	800939a <__swsetup_r+0x32>
 800938a:	2309      	movs	r3, #9
 800938c:	602b      	str	r3, [r5, #0]
 800938e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009392:	f04f 30ff 	mov.w	r0, #4294967295
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	e034      	b.n	8009404 <__swsetup_r+0x9c>
 800939a:	0758      	lsls	r0, r3, #29
 800939c:	d512      	bpl.n	80093c4 <__swsetup_r+0x5c>
 800939e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a0:	b141      	cbz	r1, 80093b4 <__swsetup_r+0x4c>
 80093a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a6:	4299      	cmp	r1, r3
 80093a8:	d002      	beq.n	80093b0 <__swsetup_r+0x48>
 80093aa:	4628      	mov	r0, r5
 80093ac:	f001 f818 	bl	800a3e0 <_free_r>
 80093b0:	2300      	movs	r3, #0
 80093b2:	6363      	str	r3, [r4, #52]	; 0x34
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	2300      	movs	r3, #0
 80093be:	6063      	str	r3, [r4, #4]
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f043 0308 	orr.w	r3, r3, #8
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	b94b      	cbnz	r3, 80093e4 <__swsetup_r+0x7c>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093da:	d003      	beq.n	80093e4 <__swsetup_r+0x7c>
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	f002 fa7d 	bl	800b8de <__smakebuf_r>
 80093e4:	89a0      	ldrh	r0, [r4, #12]
 80093e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ea:	f010 0301 	ands.w	r3, r0, #1
 80093ee:	d00a      	beq.n	8009406 <__swsetup_r+0x9e>
 80093f0:	2300      	movs	r3, #0
 80093f2:	60a3      	str	r3, [r4, #8]
 80093f4:	6963      	ldr	r3, [r4, #20]
 80093f6:	425b      	negs	r3, r3
 80093f8:	61a3      	str	r3, [r4, #24]
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	b943      	cbnz	r3, 8009410 <__swsetup_r+0xa8>
 80093fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009402:	d1c4      	bne.n	800938e <__swsetup_r+0x26>
 8009404:	bd38      	pop	{r3, r4, r5, pc}
 8009406:	0781      	lsls	r1, r0, #30
 8009408:	bf58      	it	pl
 800940a:	6963      	ldrpl	r3, [r4, #20]
 800940c:	60a3      	str	r3, [r4, #8]
 800940e:	e7f4      	b.n	80093fa <__swsetup_r+0x92>
 8009410:	2000      	movs	r0, #0
 8009412:	e7f7      	b.n	8009404 <__swsetup_r+0x9c>
 8009414:	20000208 	.word	0x20000208

08009418 <memset>:
 8009418:	4603      	mov	r3, r0
 800941a:	4402      	add	r2, r0
 800941c:	4293      	cmp	r3, r2
 800941e:	d100      	bne.n	8009422 <memset+0xa>
 8009420:	4770      	bx	lr
 8009422:	f803 1b01 	strb.w	r1, [r3], #1
 8009426:	e7f9      	b.n	800941c <memset+0x4>

08009428 <strncmp>:
 8009428:	b510      	push	{r4, lr}
 800942a:	b16a      	cbz	r2, 8009448 <strncmp+0x20>
 800942c:	3901      	subs	r1, #1
 800942e:	1884      	adds	r4, r0, r2
 8009430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009434:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009438:	429a      	cmp	r2, r3
 800943a:	d103      	bne.n	8009444 <strncmp+0x1c>
 800943c:	42a0      	cmp	r0, r4
 800943e:	d001      	beq.n	8009444 <strncmp+0x1c>
 8009440:	2a00      	cmp	r2, #0
 8009442:	d1f5      	bne.n	8009430 <strncmp+0x8>
 8009444:	1ad0      	subs	r0, r2, r3
 8009446:	bd10      	pop	{r4, pc}
 8009448:	4610      	mov	r0, r2
 800944a:	e7fc      	b.n	8009446 <strncmp+0x1e>

0800944c <strncpy>:
 800944c:	4603      	mov	r3, r0
 800944e:	b510      	push	{r4, lr}
 8009450:	3901      	subs	r1, #1
 8009452:	b132      	cbz	r2, 8009462 <strncpy+0x16>
 8009454:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009458:	3a01      	subs	r2, #1
 800945a:	f803 4b01 	strb.w	r4, [r3], #1
 800945e:	2c00      	cmp	r4, #0
 8009460:	d1f7      	bne.n	8009452 <strncpy+0x6>
 8009462:	2100      	movs	r1, #0
 8009464:	441a      	add	r2, r3
 8009466:	4293      	cmp	r3, r2
 8009468:	d100      	bne.n	800946c <strncpy+0x20>
 800946a:	bd10      	pop	{r4, pc}
 800946c:	f803 1b01 	strb.w	r1, [r3], #1
 8009470:	e7f9      	b.n	8009466 <strncpy+0x1a>
	...

08009474 <strtok>:
 8009474:	4b16      	ldr	r3, [pc, #88]	; (80094d0 <strtok+0x5c>)
 8009476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	681f      	ldr	r7, [r3, #0]
 800947c:	4605      	mov	r5, r0
 800947e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009480:	460e      	mov	r6, r1
 8009482:	b9ec      	cbnz	r4, 80094c0 <strtok+0x4c>
 8009484:	2050      	movs	r0, #80	; 0x50
 8009486:	f7fe f8f3 	bl	8007670 <malloc>
 800948a:	4602      	mov	r2, r0
 800948c:	6478      	str	r0, [r7, #68]	; 0x44
 800948e:	b920      	cbnz	r0, 800949a <strtok+0x26>
 8009490:	215b      	movs	r1, #91	; 0x5b
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <strtok+0x60>)
 8009494:	4810      	ldr	r0, [pc, #64]	; (80094d8 <strtok+0x64>)
 8009496:	f000 f915 	bl	80096c4 <__assert_func>
 800949a:	e9c0 4400 	strd	r4, r4, [r0]
 800949e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80094a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80094a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80094aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80094ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80094b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80094b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80094ba:	6184      	str	r4, [r0, #24]
 80094bc:	7704      	strb	r4, [r0, #28]
 80094be:	6244      	str	r4, [r0, #36]	; 0x24
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094c6:	2301      	movs	r3, #1
 80094c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	f000 b806 	b.w	80094dc <__strtok_r>
 80094d0:	20000208 	.word	0x20000208
 80094d4:	0800bef5 	.word	0x0800bef5
 80094d8:	0800bf0c 	.word	0x0800bf0c

080094dc <__strtok_r>:
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b908      	cbnz	r0, 80094e4 <__strtok_r+0x8>
 80094e0:	6810      	ldr	r0, [r2, #0]
 80094e2:	b188      	cbz	r0, 8009508 <__strtok_r+0x2c>
 80094e4:	4604      	mov	r4, r0
 80094e6:	460f      	mov	r7, r1
 80094e8:	4620      	mov	r0, r4
 80094ea:	f814 5b01 	ldrb.w	r5, [r4], #1
 80094ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80094f2:	b91e      	cbnz	r6, 80094fc <__strtok_r+0x20>
 80094f4:	b965      	cbnz	r5, 8009510 <__strtok_r+0x34>
 80094f6:	4628      	mov	r0, r5
 80094f8:	6015      	str	r5, [r2, #0]
 80094fa:	e005      	b.n	8009508 <__strtok_r+0x2c>
 80094fc:	42b5      	cmp	r5, r6
 80094fe:	d1f6      	bne.n	80094ee <__strtok_r+0x12>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1f0      	bne.n	80094e6 <__strtok_r+0xa>
 8009504:	6014      	str	r4, [r2, #0]
 8009506:	7003      	strb	r3, [r0, #0]
 8009508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950a:	461c      	mov	r4, r3
 800950c:	e00c      	b.n	8009528 <__strtok_r+0x4c>
 800950e:	b915      	cbnz	r5, 8009516 <__strtok_r+0x3a>
 8009510:	460e      	mov	r6, r1
 8009512:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009516:	f816 5b01 	ldrb.w	r5, [r6], #1
 800951a:	42ab      	cmp	r3, r5
 800951c:	d1f7      	bne.n	800950e <__strtok_r+0x32>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0f3      	beq.n	800950a <__strtok_r+0x2e>
 8009522:	2300      	movs	r3, #0
 8009524:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009528:	6014      	str	r4, [r2, #0]
 800952a:	e7ed      	b.n	8009508 <__strtok_r+0x2c>

0800952c <strstr>:
 800952c:	780a      	ldrb	r2, [r1, #0]
 800952e:	b570      	push	{r4, r5, r6, lr}
 8009530:	b96a      	cbnz	r2, 800954e <strstr+0x22>
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	429a      	cmp	r2, r3
 8009536:	d109      	bne.n	800954c <strstr+0x20>
 8009538:	460c      	mov	r4, r1
 800953a:	4605      	mov	r5, r0
 800953c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0f6      	beq.n	8009532 <strstr+0x6>
 8009544:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009548:	429e      	cmp	r6, r3
 800954a:	d0f7      	beq.n	800953c <strstr+0x10>
 800954c:	3001      	adds	r0, #1
 800954e:	7803      	ldrb	r3, [r0, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ef      	bne.n	8009534 <strstr+0x8>
 8009554:	4618      	mov	r0, r3
 8009556:	e7ec      	b.n	8009532 <strstr+0x6>

08009558 <_localeconv_r>:
 8009558:	4800      	ldr	r0, [pc, #0]	; (800955c <_localeconv_r+0x4>)
 800955a:	4770      	bx	lr
 800955c:	20000140 	.word	0x20000140

08009560 <_close_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	2300      	movs	r3, #0
 8009564:	4d05      	ldr	r5, [pc, #20]	; (800957c <_close_r+0x1c>)
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	f7fa ff3c 	bl	80043e8 <_close>
 8009570:	1c43      	adds	r3, r0, #1
 8009572:	d102      	bne.n	800957a <_close_r+0x1a>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	b103      	cbz	r3, 800957a <_close_r+0x1a>
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	20002930 	.word	0x20002930

08009580 <_lseek_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	2200      	movs	r2, #0
 800958a:	4d05      	ldr	r5, [pc, #20]	; (80095a0 <_lseek_r+0x20>)
 800958c:	602a      	str	r2, [r5, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f7fa ff4e 	bl	8004430 <_lseek>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_lseek_r+0x1e>
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	b103      	cbz	r3, 800959e <_lseek_r+0x1e>
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	20002930 	.word	0x20002930

080095a4 <_read_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	2200      	movs	r2, #0
 80095ae:	4d05      	ldr	r5, [pc, #20]	; (80095c4 <_read_r+0x20>)
 80095b0:	602a      	str	r2, [r5, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	f7fa fefb 	bl	80043ae <_read>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_read_r+0x1e>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_read_r+0x1e>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20002930 	.word	0x20002930

080095c8 <_sbrk_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	2300      	movs	r3, #0
 80095cc:	4d05      	ldr	r5, [pc, #20]	; (80095e4 <_sbrk_r+0x1c>)
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	602b      	str	r3, [r5, #0]
 80095d4:	f7fa ff38 	bl	8004448 <_sbrk>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_sbrk_r+0x1a>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_sbrk_r+0x1a>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20002930 	.word	0x20002930

080095e8 <_write_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	2200      	movs	r2, #0
 80095f2:	4d05      	ldr	r5, [pc, #20]	; (8009608 <_write_r+0x20>)
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f7f8 ffa2 	bl	8002540 <_write>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_write_r+0x1e>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_write_r+0x1e>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20002930 	.word	0x20002930

0800960c <__errno>:
 800960c:	4b01      	ldr	r3, [pc, #4]	; (8009614 <__errno+0x8>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000208 	.word	0x20000208

08009618 <__libc_init_array>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	2600      	movs	r6, #0
 800961c:	4d0c      	ldr	r5, [pc, #48]	; (8009650 <__libc_init_array+0x38>)
 800961e:	4c0d      	ldr	r4, [pc, #52]	; (8009654 <__libc_init_array+0x3c>)
 8009620:	1b64      	subs	r4, r4, r5
 8009622:	10a4      	asrs	r4, r4, #2
 8009624:	42a6      	cmp	r6, r4
 8009626:	d109      	bne.n	800963c <__libc_init_array+0x24>
 8009628:	f002 fa18 	bl	800ba5c <_init>
 800962c:	2600      	movs	r6, #0
 800962e:	4d0a      	ldr	r5, [pc, #40]	; (8009658 <__libc_init_array+0x40>)
 8009630:	4c0a      	ldr	r4, [pc, #40]	; (800965c <__libc_init_array+0x44>)
 8009632:	1b64      	subs	r4, r4, r5
 8009634:	10a4      	asrs	r4, r4, #2
 8009636:	42a6      	cmp	r6, r4
 8009638:	d105      	bne.n	8009646 <__libc_init_array+0x2e>
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009640:	4798      	blx	r3
 8009642:	3601      	adds	r6, #1
 8009644:	e7ee      	b.n	8009624 <__libc_init_array+0xc>
 8009646:	f855 3b04 	ldr.w	r3, [r5], #4
 800964a:	4798      	blx	r3
 800964c:	3601      	adds	r6, #1
 800964e:	e7f2      	b.n	8009636 <__libc_init_array+0x1e>
 8009650:	0800c1f0 	.word	0x0800c1f0
 8009654:	0800c1f0 	.word	0x0800c1f0
 8009658:	0800c1f0 	.word	0x0800c1f0
 800965c:	0800c1f4 	.word	0x0800c1f4

08009660 <__retarget_lock_init_recursive>:
 8009660:	4770      	bx	lr

08009662 <__retarget_lock_acquire_recursive>:
 8009662:	4770      	bx	lr

08009664 <__retarget_lock_release_recursive>:
 8009664:	4770      	bx	lr

08009666 <strcpy>:
 8009666:	4603      	mov	r3, r0
 8009668:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966c:	f803 2b01 	strb.w	r2, [r3], #1
 8009670:	2a00      	cmp	r2, #0
 8009672:	d1f9      	bne.n	8009668 <strcpy+0x2>
 8009674:	4770      	bx	lr

08009676 <memchr>:
 8009676:	4603      	mov	r3, r0
 8009678:	b510      	push	{r4, lr}
 800967a:	b2c9      	uxtb	r1, r1
 800967c:	4402      	add	r2, r0
 800967e:	4293      	cmp	r3, r2
 8009680:	4618      	mov	r0, r3
 8009682:	d101      	bne.n	8009688 <memchr+0x12>
 8009684:	2000      	movs	r0, #0
 8009686:	e003      	b.n	8009690 <memchr+0x1a>
 8009688:	7804      	ldrb	r4, [r0, #0]
 800968a:	3301      	adds	r3, #1
 800968c:	428c      	cmp	r4, r1
 800968e:	d1f6      	bne.n	800967e <memchr+0x8>
 8009690:	bd10      	pop	{r4, pc}

08009692 <memcpy>:
 8009692:	440a      	add	r2, r1
 8009694:	4291      	cmp	r1, r2
 8009696:	f100 33ff 	add.w	r3, r0, #4294967295
 800969a:	d100      	bne.n	800969e <memcpy+0xc>
 800969c:	4770      	bx	lr
 800969e:	b510      	push	{r4, lr}
 80096a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096a4:	4291      	cmp	r1, r2
 80096a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096aa:	d1f9      	bne.n	80096a0 <memcpy+0xe>
 80096ac:	bd10      	pop	{r4, pc}
	...

080096b0 <nan>:
 80096b0:	2000      	movs	r0, #0
 80096b2:	4901      	ldr	r1, [pc, #4]	; (80096b8 <nan+0x8>)
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	7ff80000 	.word	0x7ff80000

080096bc <nanf>:
 80096bc:	4800      	ldr	r0, [pc, #0]	; (80096c0 <nanf+0x4>)
 80096be:	4770      	bx	lr
 80096c0:	7fc00000 	.word	0x7fc00000

080096c4 <__assert_func>:
 80096c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096c6:	4614      	mov	r4, r2
 80096c8:	461a      	mov	r2, r3
 80096ca:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <__assert_func+0x2c>)
 80096cc:	4605      	mov	r5, r0
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68d8      	ldr	r0, [r3, #12]
 80096d2:	b14c      	cbz	r4, 80096e8 <__assert_func+0x24>
 80096d4:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <__assert_func+0x30>)
 80096d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096da:	9100      	str	r1, [sp, #0]
 80096dc:	462b      	mov	r3, r5
 80096de:	4906      	ldr	r1, [pc, #24]	; (80096f8 <__assert_func+0x34>)
 80096e0:	f002 f8c6 	bl	800b870 <fiprintf>
 80096e4:	f002 f95a 	bl	800b99c <abort>
 80096e8:	4b04      	ldr	r3, [pc, #16]	; (80096fc <__assert_func+0x38>)
 80096ea:	461c      	mov	r4, r3
 80096ec:	e7f3      	b.n	80096d6 <__assert_func+0x12>
 80096ee:	bf00      	nop
 80096f0:	20000208 	.word	0x20000208
 80096f4:	0800bf6e 	.word	0x0800bf6e
 80096f8:	0800bf7b 	.word	0x0800bf7b
 80096fc:	0800bfa9 	.word	0x0800bfa9

08009700 <quorem>:
 8009700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	6903      	ldr	r3, [r0, #16]
 8009706:	690c      	ldr	r4, [r1, #16]
 8009708:	4607      	mov	r7, r0
 800970a:	42a3      	cmp	r3, r4
 800970c:	db7f      	blt.n	800980e <quorem+0x10e>
 800970e:	3c01      	subs	r4, #1
 8009710:	f100 0514 	add.w	r5, r0, #20
 8009714:	f101 0814 	add.w	r8, r1, #20
 8009718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009726:	3301      	adds	r3, #1
 8009728:	429a      	cmp	r2, r3
 800972a:	fbb2 f6f3 	udiv	r6, r2, r3
 800972e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009732:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009736:	d331      	bcc.n	800979c <quorem+0x9c>
 8009738:	f04f 0e00 	mov.w	lr, #0
 800973c:	4640      	mov	r0, r8
 800973e:	46ac      	mov	ip, r5
 8009740:	46f2      	mov	sl, lr
 8009742:	f850 2b04 	ldr.w	r2, [r0], #4
 8009746:	b293      	uxth	r3, r2
 8009748:	fb06 e303 	mla	r3, r6, r3, lr
 800974c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009750:	0c1a      	lsrs	r2, r3, #16
 8009752:	b29b      	uxth	r3, r3
 8009754:	fb06 220e 	mla	r2, r6, lr, r2
 8009758:	ebaa 0303 	sub.w	r3, sl, r3
 800975c:	f8dc a000 	ldr.w	sl, [ip]
 8009760:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009764:	fa1f fa8a 	uxth.w	sl, sl
 8009768:	4453      	add	r3, sl
 800976a:	f8dc a000 	ldr.w	sl, [ip]
 800976e:	b292      	uxth	r2, r2
 8009770:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009778:	b29b      	uxth	r3, r3
 800977a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800977e:	4581      	cmp	r9, r0
 8009780:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009784:	f84c 3b04 	str.w	r3, [ip], #4
 8009788:	d2db      	bcs.n	8009742 <quorem+0x42>
 800978a:	f855 300b 	ldr.w	r3, [r5, fp]
 800978e:	b92b      	cbnz	r3, 800979c <quorem+0x9c>
 8009790:	9b01      	ldr	r3, [sp, #4]
 8009792:	3b04      	subs	r3, #4
 8009794:	429d      	cmp	r5, r3
 8009796:	461a      	mov	r2, r3
 8009798:	d32d      	bcc.n	80097f6 <quorem+0xf6>
 800979a:	613c      	str	r4, [r7, #16]
 800979c:	4638      	mov	r0, r7
 800979e:	f001 fc97 	bl	800b0d0 <__mcmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	db23      	blt.n	80097ee <quorem+0xee>
 80097a6:	4629      	mov	r1, r5
 80097a8:	2000      	movs	r0, #0
 80097aa:	3601      	adds	r6, #1
 80097ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80097b0:	f8d1 c000 	ldr.w	ip, [r1]
 80097b4:	b293      	uxth	r3, r2
 80097b6:	1ac3      	subs	r3, r0, r3
 80097b8:	0c12      	lsrs	r2, r2, #16
 80097ba:	fa1f f08c 	uxth.w	r0, ip
 80097be:	4403      	add	r3, r0
 80097c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ce:	45c1      	cmp	r9, r8
 80097d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097d4:	f841 3b04 	str.w	r3, [r1], #4
 80097d8:	d2e8      	bcs.n	80097ac <quorem+0xac>
 80097da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097e2:	b922      	cbnz	r2, 80097ee <quorem+0xee>
 80097e4:	3b04      	subs	r3, #4
 80097e6:	429d      	cmp	r5, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	d30a      	bcc.n	8009802 <quorem+0x102>
 80097ec:	613c      	str	r4, [r7, #16]
 80097ee:	4630      	mov	r0, r6
 80097f0:	b003      	add	sp, #12
 80097f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	3b04      	subs	r3, #4
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	d1cd      	bne.n	800979a <quorem+0x9a>
 80097fe:	3c01      	subs	r4, #1
 8009800:	e7c8      	b.n	8009794 <quorem+0x94>
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	3b04      	subs	r3, #4
 8009806:	2a00      	cmp	r2, #0
 8009808:	d1f0      	bne.n	80097ec <quorem+0xec>
 800980a:	3c01      	subs	r4, #1
 800980c:	e7eb      	b.n	80097e6 <quorem+0xe6>
 800980e:	2000      	movs	r0, #0
 8009810:	e7ee      	b.n	80097f0 <quorem+0xf0>
 8009812:	0000      	movs	r0, r0
 8009814:	0000      	movs	r0, r0
	...

08009818 <_dtoa_r>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	4616      	mov	r6, r2
 800981e:	461f      	mov	r7, r3
 8009820:	69c4      	ldr	r4, [r0, #28]
 8009822:	b099      	sub	sp, #100	; 0x64
 8009824:	4605      	mov	r5, r0
 8009826:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800982a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800982e:	b974      	cbnz	r4, 800984e <_dtoa_r+0x36>
 8009830:	2010      	movs	r0, #16
 8009832:	f7fd ff1d 	bl	8007670 <malloc>
 8009836:	4602      	mov	r2, r0
 8009838:	61e8      	str	r0, [r5, #28]
 800983a:	b920      	cbnz	r0, 8009846 <_dtoa_r+0x2e>
 800983c:	21ef      	movs	r1, #239	; 0xef
 800983e:	4bac      	ldr	r3, [pc, #688]	; (8009af0 <_dtoa_r+0x2d8>)
 8009840:	48ac      	ldr	r0, [pc, #688]	; (8009af4 <_dtoa_r+0x2dc>)
 8009842:	f7ff ff3f 	bl	80096c4 <__assert_func>
 8009846:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800984a:	6004      	str	r4, [r0, #0]
 800984c:	60c4      	str	r4, [r0, #12]
 800984e:	69eb      	ldr	r3, [r5, #28]
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	b151      	cbz	r1, 800986a <_dtoa_r+0x52>
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	2301      	movs	r3, #1
 8009858:	4093      	lsls	r3, r2
 800985a:	604a      	str	r2, [r1, #4]
 800985c:	608b      	str	r3, [r1, #8]
 800985e:	4628      	mov	r0, r5
 8009860:	f001 f9b2 	bl	800abc8 <_Bfree>
 8009864:	2200      	movs	r2, #0
 8009866:	69eb      	ldr	r3, [r5, #28]
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	1e3b      	subs	r3, r7, #0
 800986c:	bfaf      	iteee	ge
 800986e:	2300      	movge	r3, #0
 8009870:	2201      	movlt	r2, #1
 8009872:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009876:	9305      	strlt	r3, [sp, #20]
 8009878:	bfa8      	it	ge
 800987a:	f8c8 3000 	strge.w	r3, [r8]
 800987e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009882:	4b9d      	ldr	r3, [pc, #628]	; (8009af8 <_dtoa_r+0x2e0>)
 8009884:	bfb8      	it	lt
 8009886:	f8c8 2000 	strlt.w	r2, [r8]
 800988a:	ea33 0309 	bics.w	r3, r3, r9
 800988e:	d119      	bne.n	80098c4 <_dtoa_r+0xac>
 8009890:	f242 730f 	movw	r3, #9999	; 0x270f
 8009894:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800989c:	4333      	orrs	r3, r6
 800989e:	f000 8589 	beq.w	800a3b4 <_dtoa_r+0xb9c>
 80098a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098a4:	b953      	cbnz	r3, 80098bc <_dtoa_r+0xa4>
 80098a6:	4b95      	ldr	r3, [pc, #596]	; (8009afc <_dtoa_r+0x2e4>)
 80098a8:	e023      	b.n	80098f2 <_dtoa_r+0xda>
 80098aa:	4b95      	ldr	r3, [pc, #596]	; (8009b00 <_dtoa_r+0x2e8>)
 80098ac:	9303      	str	r3, [sp, #12]
 80098ae:	3308      	adds	r3, #8
 80098b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	9803      	ldr	r0, [sp, #12]
 80098b6:	b019      	add	sp, #100	; 0x64
 80098b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098bc:	4b8f      	ldr	r3, [pc, #572]	; (8009afc <_dtoa_r+0x2e4>)
 80098be:	9303      	str	r3, [sp, #12]
 80098c0:	3303      	adds	r3, #3
 80098c2:	e7f5      	b.n	80098b0 <_dtoa_r+0x98>
 80098c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80098cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098d0:	2200      	movs	r2, #0
 80098d2:	2300      	movs	r3, #0
 80098d4:	f7f7 f868 	bl	80009a8 <__aeabi_dcmpeq>
 80098d8:	4680      	mov	r8, r0
 80098da:	b160      	cbz	r0, 80098f6 <_dtoa_r+0xde>
 80098dc:	2301      	movs	r3, #1
 80098de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 8562 	beq.w	800a3ae <_dtoa_r+0xb96>
 80098ea:	4b86      	ldr	r3, [pc, #536]	; (8009b04 <_dtoa_r+0x2ec>)
 80098ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	e7de      	b.n	80098b4 <_dtoa_r+0x9c>
 80098f6:	ab16      	add	r3, sp, #88	; 0x58
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	ab17      	add	r3, sp, #92	; 0x5c
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4628      	mov	r0, r5
 8009900:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009904:	f001 fcf4 	bl	800b2f0 <__d2b>
 8009908:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800990c:	4682      	mov	sl, r0
 800990e:	2c00      	cmp	r4, #0
 8009910:	d07e      	beq.n	8009a10 <_dtoa_r+0x1f8>
 8009912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009918:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800991c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009920:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009924:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009928:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800992c:	4619      	mov	r1, r3
 800992e:	2200      	movs	r2, #0
 8009930:	4b75      	ldr	r3, [pc, #468]	; (8009b08 <_dtoa_r+0x2f0>)
 8009932:	f7f6 fc19 	bl	8000168 <__aeabi_dsub>
 8009936:	a368      	add	r3, pc, #416	; (adr r3, 8009ad8 <_dtoa_r+0x2c0>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f7f6 fdcc 	bl	80004d8 <__aeabi_dmul>
 8009940:	a367      	add	r3, pc, #412	; (adr r3, 8009ae0 <_dtoa_r+0x2c8>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fc11 	bl	800016c <__adddf3>
 800994a:	4606      	mov	r6, r0
 800994c:	4620      	mov	r0, r4
 800994e:	460f      	mov	r7, r1
 8009950:	f7f6 fd58 	bl	8000404 <__aeabi_i2d>
 8009954:	a364      	add	r3, pc, #400	; (adr r3, 8009ae8 <_dtoa_r+0x2d0>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	f7f6 fdbd 	bl	80004d8 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7f6 fc01 	bl	800016c <__adddf3>
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	f7f7 f863 	bl	8000a38 <__aeabi_d2iz>
 8009972:	2200      	movs	r2, #0
 8009974:	4683      	mov	fp, r0
 8009976:	2300      	movs	r3, #0
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f7 f81e 	bl	80009bc <__aeabi_dcmplt>
 8009980:	b148      	cbz	r0, 8009996 <_dtoa_r+0x17e>
 8009982:	4658      	mov	r0, fp
 8009984:	f7f6 fd3e 	bl	8000404 <__aeabi_i2d>
 8009988:	4632      	mov	r2, r6
 800998a:	463b      	mov	r3, r7
 800998c:	f7f7 f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8009990:	b908      	cbnz	r0, 8009996 <_dtoa_r+0x17e>
 8009992:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009996:	f1bb 0f16 	cmp.w	fp, #22
 800999a:	d857      	bhi.n	8009a4c <_dtoa_r+0x234>
 800999c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099a0:	4b5a      	ldr	r3, [pc, #360]	; (8009b0c <_dtoa_r+0x2f4>)
 80099a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f7f7 f807 	bl	80009bc <__aeabi_dcmplt>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d04e      	beq.n	8009a50 <_dtoa_r+0x238>
 80099b2:	2300      	movs	r3, #0
 80099b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099bc:	1b1b      	subs	r3, r3, r4
 80099be:	1e5a      	subs	r2, r3, #1
 80099c0:	bf46      	itte	mi
 80099c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80099c6:	2300      	movmi	r3, #0
 80099c8:	f04f 0900 	movpl.w	r9, #0
 80099cc:	9209      	str	r2, [sp, #36]	; 0x24
 80099ce:	bf48      	it	mi
 80099d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80099d2:	f1bb 0f00 	cmp.w	fp, #0
 80099d6:	db3d      	blt.n	8009a54 <_dtoa_r+0x23c>
 80099d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80099de:	445b      	add	r3, fp
 80099e0:	9309      	str	r3, [sp, #36]	; 0x24
 80099e2:	2300      	movs	r3, #0
 80099e4:	930a      	str	r3, [sp, #40]	; 0x28
 80099e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099e8:	2b09      	cmp	r3, #9
 80099ea:	d867      	bhi.n	8009abc <_dtoa_r+0x2a4>
 80099ec:	2b05      	cmp	r3, #5
 80099ee:	bfc4      	itt	gt
 80099f0:	3b04      	subgt	r3, #4
 80099f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80099f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099f6:	bfc8      	it	gt
 80099f8:	2400      	movgt	r4, #0
 80099fa:	f1a3 0302 	sub.w	r3, r3, #2
 80099fe:	bfd8      	it	le
 8009a00:	2401      	movle	r4, #1
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	f200 8086 	bhi.w	8009b14 <_dtoa_r+0x2fc>
 8009a08:	e8df f003 	tbb	[pc, r3]
 8009a0c:	5637392c 	.word	0x5637392c
 8009a10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009a14:	441c      	add	r4, r3
 8009a16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	bfc1      	itttt	gt
 8009a1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a22:	fa09 f903 	lslgt.w	r9, r9, r3
 8009a26:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009a2a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a2e:	bfd6      	itet	le
 8009a30:	f1c3 0320 	rsble	r3, r3, #32
 8009a34:	ea49 0003 	orrgt.w	r0, r9, r3
 8009a38:	fa06 f003 	lslle.w	r0, r6, r3
 8009a3c:	f7f6 fcd2 	bl	80003e4 <__aeabi_ui2d>
 8009a40:	2201      	movs	r2, #1
 8009a42:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a46:	3c01      	subs	r4, #1
 8009a48:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a4a:	e76f      	b.n	800992c <_dtoa_r+0x114>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e7b3      	b.n	80099b8 <_dtoa_r+0x1a0>
 8009a50:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a52:	e7b2      	b.n	80099ba <_dtoa_r+0x1a2>
 8009a54:	f1cb 0300 	rsb	r3, fp, #0
 8009a58:	930a      	str	r3, [sp, #40]	; 0x28
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	eba9 090b 	sub.w	r9, r9, fp
 8009a60:	930e      	str	r3, [sp, #56]	; 0x38
 8009a62:	e7c0      	b.n	80099e6 <_dtoa_r+0x1ce>
 8009a64:	2300      	movs	r3, #0
 8009a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dc55      	bgt.n	8009b1a <_dtoa_r+0x302>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	461a      	mov	r2, r3
 8009a72:	9306      	str	r3, [sp, #24]
 8009a74:	9308      	str	r3, [sp, #32]
 8009a76:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a78:	e00b      	b.n	8009a92 <_dtoa_r+0x27a>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e7f3      	b.n	8009a66 <_dtoa_r+0x24e>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a84:	445b      	add	r3, fp
 8009a86:	9306      	str	r3, [sp, #24]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	bfb8      	it	lt
 8009a90:	2301      	movlt	r3, #1
 8009a92:	2100      	movs	r1, #0
 8009a94:	2204      	movs	r2, #4
 8009a96:	69e8      	ldr	r0, [r5, #28]
 8009a98:	f102 0614 	add.w	r6, r2, #20
 8009a9c:	429e      	cmp	r6, r3
 8009a9e:	d940      	bls.n	8009b22 <_dtoa_r+0x30a>
 8009aa0:	6041      	str	r1, [r0, #4]
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	f001 f850 	bl	800ab48 <_Balloc>
 8009aa8:	9003      	str	r0, [sp, #12]
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d13c      	bne.n	8009b28 <_dtoa_r+0x310>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	f240 11af 	movw	r1, #431	; 0x1af
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <_dtoa_r+0x2f8>)
 8009ab6:	e6c3      	b.n	8009840 <_dtoa_r+0x28>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e7e1      	b.n	8009a80 <_dtoa_r+0x268>
 8009abc:	2401      	movs	r4, #1
 8009abe:	2300      	movs	r3, #0
 8009ac0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ac2:	9322      	str	r3, [sp, #136]	; 0x88
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac8:	2200      	movs	r2, #0
 8009aca:	9306      	str	r3, [sp, #24]
 8009acc:	9308      	str	r3, [sp, #32]
 8009ace:	2312      	movs	r3, #18
 8009ad0:	e7d1      	b.n	8009a76 <_dtoa_r+0x25e>
 8009ad2:	bf00      	nop
 8009ad4:	f3af 8000 	nop.w
 8009ad8:	636f4361 	.word	0x636f4361
 8009adc:	3fd287a7 	.word	0x3fd287a7
 8009ae0:	8b60c8b3 	.word	0x8b60c8b3
 8009ae4:	3fc68a28 	.word	0x3fc68a28
 8009ae8:	509f79fb 	.word	0x509f79fb
 8009aec:	3fd34413 	.word	0x3fd34413
 8009af0:	0800bef5 	.word	0x0800bef5
 8009af4:	0800bfb7 	.word	0x0800bfb7
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	0800bfb3 	.word	0x0800bfb3
 8009b00:	0800bfaa 	.word	0x0800bfaa
 8009b04:	0800bed2 	.word	0x0800bed2
 8009b08:	3ff80000 	.word	0x3ff80000
 8009b0c:	0800c108 	.word	0x0800c108
 8009b10:	0800c00f 	.word	0x0800c00f
 8009b14:	2301      	movs	r3, #1
 8009b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b18:	e7d4      	b.n	8009ac4 <_dtoa_r+0x2ac>
 8009b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b1c:	9306      	str	r3, [sp, #24]
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	e7b7      	b.n	8009a92 <_dtoa_r+0x27a>
 8009b22:	3101      	adds	r1, #1
 8009b24:	0052      	lsls	r2, r2, #1
 8009b26:	e7b7      	b.n	8009a98 <_dtoa_r+0x280>
 8009b28:	69eb      	ldr	r3, [r5, #28]
 8009b2a:	9a03      	ldr	r2, [sp, #12]
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	9b08      	ldr	r3, [sp, #32]
 8009b30:	2b0e      	cmp	r3, #14
 8009b32:	f200 80a8 	bhi.w	8009c86 <_dtoa_r+0x46e>
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	f000 80a5 	beq.w	8009c86 <_dtoa_r+0x46e>
 8009b3c:	f1bb 0f00 	cmp.w	fp, #0
 8009b40:	dd34      	ble.n	8009bac <_dtoa_r+0x394>
 8009b42:	4b9a      	ldr	r3, [pc, #616]	; (8009dac <_dtoa_r+0x594>)
 8009b44:	f00b 020f 	and.w	r2, fp, #15
 8009b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b54:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b58:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009b5c:	d016      	beq.n	8009b8c <_dtoa_r+0x374>
 8009b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b62:	4b93      	ldr	r3, [pc, #588]	; (8009db0 <_dtoa_r+0x598>)
 8009b64:	2703      	movs	r7, #3
 8009b66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b6a:	f7f6 fddf 	bl	800072c <__aeabi_ddiv>
 8009b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b72:	f004 040f 	and.w	r4, r4, #15
 8009b76:	4e8e      	ldr	r6, [pc, #568]	; (8009db0 <_dtoa_r+0x598>)
 8009b78:	b954      	cbnz	r4, 8009b90 <_dtoa_r+0x378>
 8009b7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b82:	f7f6 fdd3 	bl	800072c <__aeabi_ddiv>
 8009b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b8a:	e029      	b.n	8009be0 <_dtoa_r+0x3c8>
 8009b8c:	2702      	movs	r7, #2
 8009b8e:	e7f2      	b.n	8009b76 <_dtoa_r+0x35e>
 8009b90:	07e1      	lsls	r1, r4, #31
 8009b92:	d508      	bpl.n	8009ba6 <_dtoa_r+0x38e>
 8009b94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b9c:	f7f6 fc9c 	bl	80004d8 <__aeabi_dmul>
 8009ba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ba4:	3701      	adds	r7, #1
 8009ba6:	1064      	asrs	r4, r4, #1
 8009ba8:	3608      	adds	r6, #8
 8009baa:	e7e5      	b.n	8009b78 <_dtoa_r+0x360>
 8009bac:	f000 80a5 	beq.w	8009cfa <_dtoa_r+0x4e2>
 8009bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bb4:	f1cb 0400 	rsb	r4, fp, #0
 8009bb8:	4b7c      	ldr	r3, [pc, #496]	; (8009dac <_dtoa_r+0x594>)
 8009bba:	f004 020f 	and.w	r2, r4, #15
 8009bbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f7f6 fc87 	bl	80004d8 <__aeabi_dmul>
 8009bca:	2702      	movs	r7, #2
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bd2:	4e77      	ldr	r6, [pc, #476]	; (8009db0 <_dtoa_r+0x598>)
 8009bd4:	1124      	asrs	r4, r4, #4
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	f040 8084 	bne.w	8009ce4 <_dtoa_r+0x4cc>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1d2      	bne.n	8009b86 <_dtoa_r+0x36e>
 8009be0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009be4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 8087 	beq.w	8009cfe <_dtoa_r+0x4e6>
 8009bf0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4b6f      	ldr	r3, [pc, #444]	; (8009db4 <_dtoa_r+0x59c>)
 8009bf8:	f7f6 fee0 	bl	80009bc <__aeabi_dcmplt>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d07e      	beq.n	8009cfe <_dtoa_r+0x4e6>
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d07b      	beq.n	8009cfe <_dtoa_r+0x4e6>
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dd38      	ble.n	8009c7e <_dtoa_r+0x466>
 8009c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c10:	2200      	movs	r2, #0
 8009c12:	4b69      	ldr	r3, [pc, #420]	; (8009db8 <_dtoa_r+0x5a0>)
 8009c14:	f7f6 fc60 	bl	80004d8 <__aeabi_dmul>
 8009c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c1c:	9c06      	ldr	r4, [sp, #24]
 8009c1e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009c22:	3701      	adds	r7, #1
 8009c24:	4638      	mov	r0, r7
 8009c26:	f7f6 fbed 	bl	8000404 <__aeabi_i2d>
 8009c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2e:	f7f6 fc53 	bl	80004d8 <__aeabi_dmul>
 8009c32:	2200      	movs	r2, #0
 8009c34:	4b61      	ldr	r3, [pc, #388]	; (8009dbc <_dtoa_r+0x5a4>)
 8009c36:	f7f6 fa99 	bl	800016c <__adddf3>
 8009c3a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c42:	9611      	str	r6, [sp, #68]	; 0x44
 8009c44:	2c00      	cmp	r4, #0
 8009c46:	d15d      	bne.n	8009d04 <_dtoa_r+0x4ec>
 8009c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4b5c      	ldr	r3, [pc, #368]	; (8009dc0 <_dtoa_r+0x5a8>)
 8009c50:	f7f6 fa8a 	bl	8000168 <__aeabi_dsub>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c5c:	4633      	mov	r3, r6
 8009c5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c60:	f7f6 feca 	bl	80009f8 <__aeabi_dcmpgt>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f040 8295 	bne.w	800a194 <_dtoa_r+0x97c>
 8009c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c74:	f7f6 fea2 	bl	80009bc <__aeabi_dcmplt>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	f040 8289 	bne.w	800a190 <_dtoa_r+0x978>
 8009c7e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f2c0 8151 	blt.w	8009f30 <_dtoa_r+0x718>
 8009c8e:	f1bb 0f0e 	cmp.w	fp, #14
 8009c92:	f300 814d 	bgt.w	8009f30 <_dtoa_r+0x718>
 8009c96:	4b45      	ldr	r3, [pc, #276]	; (8009dac <_dtoa_r+0x594>)
 8009c98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ca0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009ca4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f280 80da 	bge.w	8009e60 <_dtoa_r+0x648>
 8009cac:	9b08      	ldr	r3, [sp, #32]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f300 80d6 	bgt.w	8009e60 <_dtoa_r+0x648>
 8009cb4:	f040 826b 	bne.w	800a18e <_dtoa_r+0x976>
 8009cb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4b40      	ldr	r3, [pc, #256]	; (8009dc0 <_dtoa_r+0x5a8>)
 8009cc0:	f7f6 fc0a 	bl	80004d8 <__aeabi_dmul>
 8009cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc8:	f7f6 fe8c 	bl	80009e4 <__aeabi_dcmpge>
 8009ccc:	9c08      	ldr	r4, [sp, #32]
 8009cce:	4626      	mov	r6, r4
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f040 8241 	bne.w	800a158 <_dtoa_r+0x940>
 8009cd6:	2331      	movs	r3, #49	; 0x31
 8009cd8:	9f03      	ldr	r7, [sp, #12]
 8009cda:	f10b 0b01 	add.w	fp, fp, #1
 8009cde:	f807 3b01 	strb.w	r3, [r7], #1
 8009ce2:	e23d      	b.n	800a160 <_dtoa_r+0x948>
 8009ce4:	07e2      	lsls	r2, r4, #31
 8009ce6:	d505      	bpl.n	8009cf4 <_dtoa_r+0x4dc>
 8009ce8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cec:	f7f6 fbf4 	bl	80004d8 <__aeabi_dmul>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	3701      	adds	r7, #1
 8009cf4:	1064      	asrs	r4, r4, #1
 8009cf6:	3608      	adds	r6, #8
 8009cf8:	e76d      	b.n	8009bd6 <_dtoa_r+0x3be>
 8009cfa:	2702      	movs	r7, #2
 8009cfc:	e770      	b.n	8009be0 <_dtoa_r+0x3c8>
 8009cfe:	46d8      	mov	r8, fp
 8009d00:	9c08      	ldr	r4, [sp, #32]
 8009d02:	e78f      	b.n	8009c24 <_dtoa_r+0x40c>
 8009d04:	9903      	ldr	r1, [sp, #12]
 8009d06:	4b29      	ldr	r3, [pc, #164]	; (8009dac <_dtoa_r+0x594>)
 8009d08:	4421      	add	r1, r4
 8009d0a:	9112      	str	r1, [sp, #72]	; 0x48
 8009d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d12:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	d054      	beq.n	8009dc8 <_dtoa_r+0x5b0>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	4928      	ldr	r1, [pc, #160]	; (8009dc4 <_dtoa_r+0x5ac>)
 8009d22:	f7f6 fd03 	bl	800072c <__aeabi_ddiv>
 8009d26:	463b      	mov	r3, r7
 8009d28:	4632      	mov	r2, r6
 8009d2a:	f7f6 fa1d 	bl	8000168 <__aeabi_dsub>
 8009d2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d32:	9f03      	ldr	r7, [sp, #12]
 8009d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d38:	f7f6 fe7e 	bl	8000a38 <__aeabi_d2iz>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	f7f6 fb61 	bl	8000404 <__aeabi_i2d>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d4a:	f7f6 fa0d 	bl	8000168 <__aeabi_dsub>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	3430      	adds	r4, #48	; 0x30
 8009d54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d5c:	f807 4b01 	strb.w	r4, [r7], #1
 8009d60:	f7f6 fe2c 	bl	80009bc <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d173      	bne.n	8009e50 <_dtoa_r+0x638>
 8009d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	4911      	ldr	r1, [pc, #68]	; (8009db4 <_dtoa_r+0x59c>)
 8009d70:	f7f6 f9fa 	bl	8000168 <__aeabi_dsub>
 8009d74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d78:	f7f6 fe20 	bl	80009bc <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 80b6 	bne.w	8009eee <_dtoa_r+0x6d6>
 8009d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d84:	429f      	cmp	r7, r3
 8009d86:	f43f af7a 	beq.w	8009c7e <_dtoa_r+0x466>
 8009d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d8e:	2200      	movs	r2, #0
 8009d90:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <_dtoa_r+0x5a0>)
 8009d92:	f7f6 fba1 	bl	80004d8 <__aeabi_dmul>
 8009d96:	2200      	movs	r2, #0
 8009d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <_dtoa_r+0x5a0>)
 8009da2:	f7f6 fb99 	bl	80004d8 <__aeabi_dmul>
 8009da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009daa:	e7c3      	b.n	8009d34 <_dtoa_r+0x51c>
 8009dac:	0800c108 	.word	0x0800c108
 8009db0:	0800c0e0 	.word	0x0800c0e0
 8009db4:	3ff00000 	.word	0x3ff00000
 8009db8:	40240000 	.word	0x40240000
 8009dbc:	401c0000 	.word	0x401c0000
 8009dc0:	40140000 	.word	0x40140000
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fb84 	bl	80004d8 <__aeabi_dmul>
 8009dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009dd6:	9c03      	ldr	r4, [sp, #12]
 8009dd8:	9314      	str	r3, [sp, #80]	; 0x50
 8009dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dde:	f7f6 fe2b 	bl	8000a38 <__aeabi_d2iz>
 8009de2:	9015      	str	r0, [sp, #84]	; 0x54
 8009de4:	f7f6 fb0e 	bl	8000404 <__aeabi_i2d>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009df0:	f7f6 f9ba 	bl	8000168 <__aeabi_dsub>
 8009df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009df6:	4606      	mov	r6, r0
 8009df8:	3330      	adds	r3, #48	; 0x30
 8009dfa:	f804 3b01 	strb.w	r3, [r4], #1
 8009dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e00:	460f      	mov	r7, r1
 8009e02:	429c      	cmp	r4, r3
 8009e04:	f04f 0200 	mov.w	r2, #0
 8009e08:	d124      	bne.n	8009e54 <_dtoa_r+0x63c>
 8009e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e0e:	4baf      	ldr	r3, [pc, #700]	; (800a0cc <_dtoa_r+0x8b4>)
 8009e10:	f7f6 f9ac 	bl	800016c <__adddf3>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fdec 	bl	80009f8 <__aeabi_dcmpgt>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d163      	bne.n	8009eec <_dtoa_r+0x6d4>
 8009e24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e28:	2000      	movs	r0, #0
 8009e2a:	49a8      	ldr	r1, [pc, #672]	; (800a0cc <_dtoa_r+0x8b4>)
 8009e2c:	f7f6 f99c 	bl	8000168 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fdc0 	bl	80009bc <__aeabi_dcmplt>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f43f af1e 	beq.w	8009c7e <_dtoa_r+0x466>
 8009e42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e44:	1e7b      	subs	r3, r7, #1
 8009e46:	9314      	str	r3, [sp, #80]	; 0x50
 8009e48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e4c:	2b30      	cmp	r3, #48	; 0x30
 8009e4e:	d0f8      	beq.n	8009e42 <_dtoa_r+0x62a>
 8009e50:	46c3      	mov	fp, r8
 8009e52:	e03b      	b.n	8009ecc <_dtoa_r+0x6b4>
 8009e54:	4b9e      	ldr	r3, [pc, #632]	; (800a0d0 <_dtoa_r+0x8b8>)
 8009e56:	f7f6 fb3f 	bl	80004d8 <__aeabi_dmul>
 8009e5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e5e:	e7bc      	b.n	8009dda <_dtoa_r+0x5c2>
 8009e60:	9f03      	ldr	r7, [sp, #12]
 8009e62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	4649      	mov	r1, r9
 8009e6e:	f7f6 fc5d 	bl	800072c <__aeabi_ddiv>
 8009e72:	f7f6 fde1 	bl	8000a38 <__aeabi_d2iz>
 8009e76:	4604      	mov	r4, r0
 8009e78:	f7f6 fac4 	bl	8000404 <__aeabi_i2d>
 8009e7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e80:	f7f6 fb2a 	bl	80004d8 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	f7f6 f96c 	bl	8000168 <__aeabi_dsub>
 8009e90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e94:	f807 6b01 	strb.w	r6, [r7], #1
 8009e98:	9e03      	ldr	r6, [sp, #12]
 8009e9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e9e:	1bbe      	subs	r6, r7, r6
 8009ea0:	45b4      	cmp	ip, r6
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	d136      	bne.n	8009f16 <_dtoa_r+0x6fe>
 8009ea8:	f7f6 f960 	bl	800016c <__adddf3>
 8009eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	4689      	mov	r9, r1
 8009eb4:	f7f6 fda0 	bl	80009f8 <__aeabi_dcmpgt>
 8009eb8:	bb58      	cbnz	r0, 8009f12 <_dtoa_r+0x6fa>
 8009eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	f7f6 fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8009ec6:	b108      	cbz	r0, 8009ecc <_dtoa_r+0x6b4>
 8009ec8:	07e3      	lsls	r3, r4, #31
 8009eca:	d422      	bmi.n	8009f12 <_dtoa_r+0x6fa>
 8009ecc:	4651      	mov	r1, sl
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 fe7a 	bl	800abc8 <_Bfree>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ed8:	703b      	strb	r3, [r7, #0]
 8009eda:	f10b 0301 	add.w	r3, fp, #1
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f43f ace6 	beq.w	80098b4 <_dtoa_r+0x9c>
 8009ee8:	601f      	str	r7, [r3, #0]
 8009eea:	e4e3      	b.n	80098b4 <_dtoa_r+0x9c>
 8009eec:	4627      	mov	r7, r4
 8009eee:	463b      	mov	r3, r7
 8009ef0:	461f      	mov	r7, r3
 8009ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ef6:	2a39      	cmp	r2, #57	; 0x39
 8009ef8:	d107      	bne.n	8009f0a <_dtoa_r+0x6f2>
 8009efa:	9a03      	ldr	r2, [sp, #12]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d1f7      	bne.n	8009ef0 <_dtoa_r+0x6d8>
 8009f00:	2230      	movs	r2, #48	; 0x30
 8009f02:	9903      	ldr	r1, [sp, #12]
 8009f04:	f108 0801 	add.w	r8, r8, #1
 8009f08:	700a      	strb	r2, [r1, #0]
 8009f0a:	781a      	ldrb	r2, [r3, #0]
 8009f0c:	3201      	adds	r2, #1
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e79e      	b.n	8009e50 <_dtoa_r+0x638>
 8009f12:	46d8      	mov	r8, fp
 8009f14:	e7eb      	b.n	8009eee <_dtoa_r+0x6d6>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4b6d      	ldr	r3, [pc, #436]	; (800a0d0 <_dtoa_r+0x8b8>)
 8009f1a:	f7f6 fadd 	bl	80004d8 <__aeabi_dmul>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	4680      	mov	r8, r0
 8009f24:	4689      	mov	r9, r1
 8009f26:	f7f6 fd3f 	bl	80009a8 <__aeabi_dcmpeq>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d09b      	beq.n	8009e66 <_dtoa_r+0x64e>
 8009f2e:	e7cd      	b.n	8009ecc <_dtoa_r+0x6b4>
 8009f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	f000 80c4 	beq.w	800a0c0 <_dtoa_r+0x8a8>
 8009f38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f3a:	2a01      	cmp	r2, #1
 8009f3c:	f300 80a8 	bgt.w	800a090 <_dtoa_r+0x878>
 8009f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	f000 80a0 	beq.w	800a088 <_dtoa_r+0x870>
 8009f48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f4c:	464f      	mov	r7, r9
 8009f4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f52:	2101      	movs	r1, #1
 8009f54:	441a      	add	r2, r3
 8009f56:	4628      	mov	r0, r5
 8009f58:	4499      	add	r9, r3
 8009f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5c:	f000 ff34 	bl	800adc8 <__i2b>
 8009f60:	4606      	mov	r6, r0
 8009f62:	b15f      	cbz	r7, 8009f7c <_dtoa_r+0x764>
 8009f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dd08      	ble.n	8009f7c <_dtoa_r+0x764>
 8009f6a:	42bb      	cmp	r3, r7
 8009f6c:	bfa8      	it	ge
 8009f6e:	463b      	movge	r3, r7
 8009f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f72:	eba9 0903 	sub.w	r9, r9, r3
 8009f76:	1aff      	subs	r7, r7, r3
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	b1f3      	cbz	r3, 8009fbe <_dtoa_r+0x7a6>
 8009f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 80a0 	beq.w	800a0c8 <_dtoa_r+0x8b0>
 8009f88:	2c00      	cmp	r4, #0
 8009f8a:	dd10      	ble.n	8009fae <_dtoa_r+0x796>
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4622      	mov	r2, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 ffd7 	bl	800af44 <__pow5mult>
 8009f96:	4652      	mov	r2, sl
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f000 ff29 	bl	800adf4 <__multiply>
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	4651      	mov	r1, sl
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 fe0e 	bl	800abc8 <_Bfree>
 8009fac:	46c2      	mov	sl, r8
 8009fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb0:	1b1a      	subs	r2, r3, r4
 8009fb2:	d004      	beq.n	8009fbe <_dtoa_r+0x7a6>
 8009fb4:	4651      	mov	r1, sl
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 ffc4 	bl	800af44 <__pow5mult>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f000 ff01 	bl	800adc8 <__i2b>
 8009fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fc8:	4604      	mov	r4, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f340 8082 	ble.w	800a0d4 <_dtoa_r+0x8bc>
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f000 ffb5 	bl	800af44 <__pow5mult>
 8009fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fdc:	4604      	mov	r4, r0
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	dd7b      	ble.n	800a0da <_dtoa_r+0x8c2>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fec:	6918      	ldr	r0, [r3, #16]
 8009fee:	f000 fe9d 	bl	800ad2c <__hi0bits>
 8009ff2:	f1c0 0020 	rsb	r0, r0, #32
 8009ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff8:	4418      	add	r0, r3
 8009ffa:	f010 001f 	ands.w	r0, r0, #31
 8009ffe:	f000 8092 	beq.w	800a126 <_dtoa_r+0x90e>
 800a002:	f1c0 0320 	rsb	r3, r0, #32
 800a006:	2b04      	cmp	r3, #4
 800a008:	f340 8085 	ble.w	800a116 <_dtoa_r+0x8fe>
 800a00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00e:	f1c0 001c 	rsb	r0, r0, #28
 800a012:	4403      	add	r3, r0
 800a014:	4481      	add	r9, r0
 800a016:	4407      	add	r7, r0
 800a018:	9309      	str	r3, [sp, #36]	; 0x24
 800a01a:	f1b9 0f00 	cmp.w	r9, #0
 800a01e:	dd05      	ble.n	800a02c <_dtoa_r+0x814>
 800a020:	4651      	mov	r1, sl
 800a022:	464a      	mov	r2, r9
 800a024:	4628      	mov	r0, r5
 800a026:	f000 ffe7 	bl	800aff8 <__lshift>
 800a02a:	4682      	mov	sl, r0
 800a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	dd05      	ble.n	800a03e <_dtoa_r+0x826>
 800a032:	4621      	mov	r1, r4
 800a034:	461a      	mov	r2, r3
 800a036:	4628      	mov	r0, r5
 800a038:	f000 ffde 	bl	800aff8 <__lshift>
 800a03c:	4604      	mov	r4, r0
 800a03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d072      	beq.n	800a12a <_dtoa_r+0x912>
 800a044:	4621      	mov	r1, r4
 800a046:	4650      	mov	r0, sl
 800a048:	f001 f842 	bl	800b0d0 <__mcmp>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	da6c      	bge.n	800a12a <_dtoa_r+0x912>
 800a050:	2300      	movs	r3, #0
 800a052:	4651      	mov	r1, sl
 800a054:	220a      	movs	r2, #10
 800a056:	4628      	mov	r0, r5
 800a058:	f000 fdd8 	bl	800ac0c <__multadd>
 800a05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05e:	4682      	mov	sl, r0
 800a060:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 81ac 	beq.w	800a3c2 <_dtoa_r+0xbaa>
 800a06a:	2300      	movs	r3, #0
 800a06c:	4631      	mov	r1, r6
 800a06e:	220a      	movs	r2, #10
 800a070:	4628      	mov	r0, r5
 800a072:	f000 fdcb 	bl	800ac0c <__multadd>
 800a076:	9b06      	ldr	r3, [sp, #24]
 800a078:	4606      	mov	r6, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f300 8093 	bgt.w	800a1a6 <_dtoa_r+0x98e>
 800a080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a082:	2b02      	cmp	r3, #2
 800a084:	dc59      	bgt.n	800a13a <_dtoa_r+0x922>
 800a086:	e08e      	b.n	800a1a6 <_dtoa_r+0x98e>
 800a088:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a08a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a08e:	e75d      	b.n	8009f4c <_dtoa_r+0x734>
 800a090:	9b08      	ldr	r3, [sp, #32]
 800a092:	1e5c      	subs	r4, r3, #1
 800a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a096:	42a3      	cmp	r3, r4
 800a098:	bfbf      	itttt	lt
 800a09a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a09c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a09e:	1ae3      	sublt	r3, r4, r3
 800a0a0:	18d2      	addlt	r2, r2, r3
 800a0a2:	bfa8      	it	ge
 800a0a4:	1b1c      	subge	r4, r3, r4
 800a0a6:	9b08      	ldr	r3, [sp, #32]
 800a0a8:	bfbe      	ittt	lt
 800a0aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a0ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a0ae:	2400      	movlt	r4, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	bfb5      	itete	lt
 800a0b4:	eba9 0703 	sublt.w	r7, r9, r3
 800a0b8:	464f      	movge	r7, r9
 800a0ba:	2300      	movlt	r3, #0
 800a0bc:	9b08      	ldrge	r3, [sp, #32]
 800a0be:	e747      	b.n	8009f50 <_dtoa_r+0x738>
 800a0c0:	464f      	mov	r7, r9
 800a0c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a0c6:	e74c      	b.n	8009f62 <_dtoa_r+0x74a>
 800a0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ca:	e773      	b.n	8009fb4 <_dtoa_r+0x79c>
 800a0cc:	3fe00000 	.word	0x3fe00000
 800a0d0:	40240000 	.word	0x40240000
 800a0d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	dc18      	bgt.n	800a10c <_dtoa_r+0x8f4>
 800a0da:	9b04      	ldr	r3, [sp, #16]
 800a0dc:	b9b3      	cbnz	r3, 800a10c <_dtoa_r+0x8f4>
 800a0de:	9b05      	ldr	r3, [sp, #20]
 800a0e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e4:	b993      	cbnz	r3, 800a10c <_dtoa_r+0x8f4>
 800a0e6:	9b05      	ldr	r3, [sp, #20]
 800a0e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0ec:	0d1b      	lsrs	r3, r3, #20
 800a0ee:	051b      	lsls	r3, r3, #20
 800a0f0:	b17b      	cbz	r3, 800a112 <_dtoa_r+0x8fa>
 800a0f2:	f04f 0801 	mov.w	r8, #1
 800a0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f8:	f109 0901 	add.w	r9, r9, #1
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a102:	2b00      	cmp	r3, #0
 800a104:	f47f af6f 	bne.w	8009fe6 <_dtoa_r+0x7ce>
 800a108:	2001      	movs	r0, #1
 800a10a:	e774      	b.n	8009ff6 <_dtoa_r+0x7de>
 800a10c:	f04f 0800 	mov.w	r8, #0
 800a110:	e7f6      	b.n	800a100 <_dtoa_r+0x8e8>
 800a112:	4698      	mov	r8, r3
 800a114:	e7f4      	b.n	800a100 <_dtoa_r+0x8e8>
 800a116:	d080      	beq.n	800a01a <_dtoa_r+0x802>
 800a118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11a:	331c      	adds	r3, #28
 800a11c:	441a      	add	r2, r3
 800a11e:	4499      	add	r9, r3
 800a120:	441f      	add	r7, r3
 800a122:	9209      	str	r2, [sp, #36]	; 0x24
 800a124:	e779      	b.n	800a01a <_dtoa_r+0x802>
 800a126:	4603      	mov	r3, r0
 800a128:	e7f6      	b.n	800a118 <_dtoa_r+0x900>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dc34      	bgt.n	800a19a <_dtoa_r+0x982>
 800a130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a132:	2b02      	cmp	r3, #2
 800a134:	dd31      	ble.n	800a19a <_dtoa_r+0x982>
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	9306      	str	r3, [sp, #24]
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	b963      	cbnz	r3, 800a158 <_dtoa_r+0x940>
 800a13e:	4621      	mov	r1, r4
 800a140:	2205      	movs	r2, #5
 800a142:	4628      	mov	r0, r5
 800a144:	f000 fd62 	bl	800ac0c <__multadd>
 800a148:	4601      	mov	r1, r0
 800a14a:	4604      	mov	r4, r0
 800a14c:	4650      	mov	r0, sl
 800a14e:	f000 ffbf 	bl	800b0d0 <__mcmp>
 800a152:	2800      	cmp	r0, #0
 800a154:	f73f adbf 	bgt.w	8009cd6 <_dtoa_r+0x4be>
 800a158:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a15a:	9f03      	ldr	r7, [sp, #12]
 800a15c:	ea6f 0b03 	mvn.w	fp, r3
 800a160:	f04f 0800 	mov.w	r8, #0
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f000 fd2e 	bl	800abc8 <_Bfree>
 800a16c:	2e00      	cmp	r6, #0
 800a16e:	f43f aead 	beq.w	8009ecc <_dtoa_r+0x6b4>
 800a172:	f1b8 0f00 	cmp.w	r8, #0
 800a176:	d005      	beq.n	800a184 <_dtoa_r+0x96c>
 800a178:	45b0      	cmp	r8, r6
 800a17a:	d003      	beq.n	800a184 <_dtoa_r+0x96c>
 800a17c:	4641      	mov	r1, r8
 800a17e:	4628      	mov	r0, r5
 800a180:	f000 fd22 	bl	800abc8 <_Bfree>
 800a184:	4631      	mov	r1, r6
 800a186:	4628      	mov	r0, r5
 800a188:	f000 fd1e 	bl	800abc8 <_Bfree>
 800a18c:	e69e      	b.n	8009ecc <_dtoa_r+0x6b4>
 800a18e:	2400      	movs	r4, #0
 800a190:	4626      	mov	r6, r4
 800a192:	e7e1      	b.n	800a158 <_dtoa_r+0x940>
 800a194:	46c3      	mov	fp, r8
 800a196:	4626      	mov	r6, r4
 800a198:	e59d      	b.n	8009cd6 <_dtoa_r+0x4be>
 800a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 80c8 	beq.w	800a332 <_dtoa_r+0xb1a>
 800a1a2:	9b08      	ldr	r3, [sp, #32]
 800a1a4:	9306      	str	r3, [sp, #24]
 800a1a6:	2f00      	cmp	r7, #0
 800a1a8:	dd05      	ble.n	800a1b6 <_dtoa_r+0x99e>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	463a      	mov	r2, r7
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 ff22 	bl	800aff8 <__lshift>
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ba:	d05b      	beq.n	800a274 <_dtoa_r+0xa5c>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	6871      	ldr	r1, [r6, #4]
 800a1c0:	f000 fcc2 	bl	800ab48 <_Balloc>
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	b928      	cbnz	r0, 800a1d4 <_dtoa_r+0x9bc>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a1ce:	4b81      	ldr	r3, [pc, #516]	; (800a3d4 <_dtoa_r+0xbbc>)
 800a1d0:	f7ff bb36 	b.w	8009840 <_dtoa_r+0x28>
 800a1d4:	6932      	ldr	r2, [r6, #16]
 800a1d6:	f106 010c 	add.w	r1, r6, #12
 800a1da:	3202      	adds	r2, #2
 800a1dc:	0092      	lsls	r2, r2, #2
 800a1de:	300c      	adds	r0, #12
 800a1e0:	f7ff fa57 	bl	8009692 <memcpy>
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f000 ff05 	bl	800aff8 <__lshift>
 800a1ee:	46b0      	mov	r8, r6
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	9a03      	ldr	r2, [sp, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	9308      	str	r3, [sp, #32]
 800a1fa:	9b06      	ldr	r3, [sp, #24]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a200:	9b04      	ldr	r3, [sp, #16]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	930a      	str	r3, [sp, #40]	; 0x28
 800a208:	9b08      	ldr	r3, [sp, #32]
 800a20a:	4621      	mov	r1, r4
 800a20c:	3b01      	subs	r3, #1
 800a20e:	4650      	mov	r0, sl
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	f7ff fa75 	bl	8009700 <quorem>
 800a216:	4641      	mov	r1, r8
 800a218:	9006      	str	r0, [sp, #24]
 800a21a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a21e:	4650      	mov	r0, sl
 800a220:	f000 ff56 	bl	800b0d0 <__mcmp>
 800a224:	4632      	mov	r2, r6
 800a226:	9009      	str	r0, [sp, #36]	; 0x24
 800a228:	4621      	mov	r1, r4
 800a22a:	4628      	mov	r0, r5
 800a22c:	f000 ff6c 	bl	800b108 <__mdiff>
 800a230:	68c2      	ldr	r2, [r0, #12]
 800a232:	4607      	mov	r7, r0
 800a234:	bb02      	cbnz	r2, 800a278 <_dtoa_r+0xa60>
 800a236:	4601      	mov	r1, r0
 800a238:	4650      	mov	r0, sl
 800a23a:	f000 ff49 	bl	800b0d0 <__mcmp>
 800a23e:	4602      	mov	r2, r0
 800a240:	4639      	mov	r1, r7
 800a242:	4628      	mov	r0, r5
 800a244:	920c      	str	r2, [sp, #48]	; 0x30
 800a246:	f000 fcbf 	bl	800abc8 <_Bfree>
 800a24a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a24c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a24e:	9f08      	ldr	r7, [sp, #32]
 800a250:	ea43 0102 	orr.w	r1, r3, r2
 800a254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a256:	4319      	orrs	r1, r3
 800a258:	d110      	bne.n	800a27c <_dtoa_r+0xa64>
 800a25a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a25e:	d029      	beq.n	800a2b4 <_dtoa_r+0xa9c>
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	2b00      	cmp	r3, #0
 800a264:	dd02      	ble.n	800a26c <_dtoa_r+0xa54>
 800a266:	9b06      	ldr	r3, [sp, #24]
 800a268:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a26c:	9b04      	ldr	r3, [sp, #16]
 800a26e:	f883 9000 	strb.w	r9, [r3]
 800a272:	e777      	b.n	800a164 <_dtoa_r+0x94c>
 800a274:	4630      	mov	r0, r6
 800a276:	e7ba      	b.n	800a1ee <_dtoa_r+0x9d6>
 800a278:	2201      	movs	r2, #1
 800a27a:	e7e1      	b.n	800a240 <_dtoa_r+0xa28>
 800a27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	db04      	blt.n	800a28c <_dtoa_r+0xa74>
 800a282:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a284:	430b      	orrs	r3, r1
 800a286:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a288:	430b      	orrs	r3, r1
 800a28a:	d120      	bne.n	800a2ce <_dtoa_r+0xab6>
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	dded      	ble.n	800a26c <_dtoa_r+0xa54>
 800a290:	4651      	mov	r1, sl
 800a292:	2201      	movs	r2, #1
 800a294:	4628      	mov	r0, r5
 800a296:	f000 feaf 	bl	800aff8 <__lshift>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4682      	mov	sl, r0
 800a29e:	f000 ff17 	bl	800b0d0 <__mcmp>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	dc03      	bgt.n	800a2ae <_dtoa_r+0xa96>
 800a2a6:	d1e1      	bne.n	800a26c <_dtoa_r+0xa54>
 800a2a8:	f019 0f01 	tst.w	r9, #1
 800a2ac:	d0de      	beq.n	800a26c <_dtoa_r+0xa54>
 800a2ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2b2:	d1d8      	bne.n	800a266 <_dtoa_r+0xa4e>
 800a2b4:	2339      	movs	r3, #57	; 0x39
 800a2b6:	9a04      	ldr	r2, [sp, #16]
 800a2b8:	7013      	strb	r3, [r2, #0]
 800a2ba:	463b      	mov	r3, r7
 800a2bc:	461f      	mov	r7, r3
 800a2be:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	2a39      	cmp	r2, #57	; 0x39
 800a2c6:	d06b      	beq.n	800a3a0 <_dtoa_r+0xb88>
 800a2c8:	3201      	adds	r2, #1
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	e74a      	b.n	800a164 <_dtoa_r+0x94c>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dd07      	ble.n	800a2e2 <_dtoa_r+0xaca>
 800a2d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2d6:	d0ed      	beq.n	800a2b4 <_dtoa_r+0xa9c>
 800a2d8:	9a04      	ldr	r2, [sp, #16]
 800a2da:	f109 0301 	add.w	r3, r9, #1
 800a2de:	7013      	strb	r3, [r2, #0]
 800a2e0:	e740      	b.n	800a164 <_dtoa_r+0x94c>
 800a2e2:	9b08      	ldr	r3, [sp, #32]
 800a2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2e6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d042      	beq.n	800a374 <_dtoa_r+0xb5c>
 800a2ee:	4651      	mov	r1, sl
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	220a      	movs	r2, #10
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f000 fc89 	bl	800ac0c <__multadd>
 800a2fa:	45b0      	cmp	r8, r6
 800a2fc:	4682      	mov	sl, r0
 800a2fe:	f04f 0300 	mov.w	r3, #0
 800a302:	f04f 020a 	mov.w	r2, #10
 800a306:	4641      	mov	r1, r8
 800a308:	4628      	mov	r0, r5
 800a30a:	d107      	bne.n	800a31c <_dtoa_r+0xb04>
 800a30c:	f000 fc7e 	bl	800ac0c <__multadd>
 800a310:	4680      	mov	r8, r0
 800a312:	4606      	mov	r6, r0
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	3301      	adds	r3, #1
 800a318:	9308      	str	r3, [sp, #32]
 800a31a:	e775      	b.n	800a208 <_dtoa_r+0x9f0>
 800a31c:	f000 fc76 	bl	800ac0c <__multadd>
 800a320:	4631      	mov	r1, r6
 800a322:	4680      	mov	r8, r0
 800a324:	2300      	movs	r3, #0
 800a326:	220a      	movs	r2, #10
 800a328:	4628      	mov	r0, r5
 800a32a:	f000 fc6f 	bl	800ac0c <__multadd>
 800a32e:	4606      	mov	r6, r0
 800a330:	e7f0      	b.n	800a314 <_dtoa_r+0xafc>
 800a332:	9b08      	ldr	r3, [sp, #32]
 800a334:	9306      	str	r3, [sp, #24]
 800a336:	9f03      	ldr	r7, [sp, #12]
 800a338:	4621      	mov	r1, r4
 800a33a:	4650      	mov	r0, sl
 800a33c:	f7ff f9e0 	bl	8009700 <quorem>
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a346:	f807 9b01 	strb.w	r9, [r7], #1
 800a34a:	1afa      	subs	r2, r7, r3
 800a34c:	9b06      	ldr	r3, [sp, #24]
 800a34e:	4293      	cmp	r3, r2
 800a350:	dd07      	ble.n	800a362 <_dtoa_r+0xb4a>
 800a352:	4651      	mov	r1, sl
 800a354:	2300      	movs	r3, #0
 800a356:	220a      	movs	r2, #10
 800a358:	4628      	mov	r0, r5
 800a35a:	f000 fc57 	bl	800ac0c <__multadd>
 800a35e:	4682      	mov	sl, r0
 800a360:	e7ea      	b.n	800a338 <_dtoa_r+0xb20>
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	f04f 0800 	mov.w	r8, #0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bfcc      	ite	gt
 800a36c:	461f      	movgt	r7, r3
 800a36e:	2701      	movle	r7, #1
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	441f      	add	r7, r3
 800a374:	4651      	mov	r1, sl
 800a376:	2201      	movs	r2, #1
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 fe3d 	bl	800aff8 <__lshift>
 800a37e:	4621      	mov	r1, r4
 800a380:	4682      	mov	sl, r0
 800a382:	f000 fea5 	bl	800b0d0 <__mcmp>
 800a386:	2800      	cmp	r0, #0
 800a388:	dc97      	bgt.n	800a2ba <_dtoa_r+0xaa2>
 800a38a:	d102      	bne.n	800a392 <_dtoa_r+0xb7a>
 800a38c:	f019 0f01 	tst.w	r9, #1
 800a390:	d193      	bne.n	800a2ba <_dtoa_r+0xaa2>
 800a392:	463b      	mov	r3, r7
 800a394:	461f      	mov	r7, r3
 800a396:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a39a:	2a30      	cmp	r2, #48	; 0x30
 800a39c:	d0fa      	beq.n	800a394 <_dtoa_r+0xb7c>
 800a39e:	e6e1      	b.n	800a164 <_dtoa_r+0x94c>
 800a3a0:	9a03      	ldr	r2, [sp, #12]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d18a      	bne.n	800a2bc <_dtoa_r+0xaa4>
 800a3a6:	2331      	movs	r3, #49	; 0x31
 800a3a8:	f10b 0b01 	add.w	fp, fp, #1
 800a3ac:	e797      	b.n	800a2de <_dtoa_r+0xac6>
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <_dtoa_r+0xbc0>)
 800a3b0:	f7ff ba9f 	b.w	80098f2 <_dtoa_r+0xda>
 800a3b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f47f aa77 	bne.w	80098aa <_dtoa_r+0x92>
 800a3bc:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <_dtoa_r+0xbc4>)
 800a3be:	f7ff ba98 	b.w	80098f2 <_dtoa_r+0xda>
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dcb6      	bgt.n	800a336 <_dtoa_r+0xb1e>
 800a3c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	f73f aeb5 	bgt.w	800a13a <_dtoa_r+0x922>
 800a3d0:	e7b1      	b.n	800a336 <_dtoa_r+0xb1e>
 800a3d2:	bf00      	nop
 800a3d4:	0800c00f 	.word	0x0800c00f
 800a3d8:	0800bed1 	.word	0x0800bed1
 800a3dc:	0800bfaa 	.word	0x0800bfaa

0800a3e0 <_free_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	d040      	beq.n	800a46a <_free_r+0x8a>
 800a3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ec:	1f0c      	subs	r4, r1, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	bfb8      	it	lt
 800a3f2:	18e4      	addlt	r4, r4, r3
 800a3f4:	f7fd f9ec 	bl	80077d0 <__malloc_lock>
 800a3f8:	4a1c      	ldr	r2, [pc, #112]	; (800a46c <_free_r+0x8c>)
 800a3fa:	6813      	ldr	r3, [r2, #0]
 800a3fc:	b933      	cbnz	r3, 800a40c <_free_r+0x2c>
 800a3fe:	6063      	str	r3, [r4, #4]
 800a400:	6014      	str	r4, [r2, #0]
 800a402:	4628      	mov	r0, r5
 800a404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a408:	f7fd b9e8 	b.w	80077dc <__malloc_unlock>
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d908      	bls.n	800a422 <_free_r+0x42>
 800a410:	6820      	ldr	r0, [r4, #0]
 800a412:	1821      	adds	r1, r4, r0
 800a414:	428b      	cmp	r3, r1
 800a416:	bf01      	itttt	eq
 800a418:	6819      	ldreq	r1, [r3, #0]
 800a41a:	685b      	ldreq	r3, [r3, #4]
 800a41c:	1809      	addeq	r1, r1, r0
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	e7ed      	b.n	800a3fe <_free_r+0x1e>
 800a422:	461a      	mov	r2, r3
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	b10b      	cbz	r3, 800a42c <_free_r+0x4c>
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d9fa      	bls.n	800a422 <_free_r+0x42>
 800a42c:	6811      	ldr	r1, [r2, #0]
 800a42e:	1850      	adds	r0, r2, r1
 800a430:	42a0      	cmp	r0, r4
 800a432:	d10b      	bne.n	800a44c <_free_r+0x6c>
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	4401      	add	r1, r0
 800a438:	1850      	adds	r0, r2, r1
 800a43a:	4283      	cmp	r3, r0
 800a43c:	6011      	str	r1, [r2, #0]
 800a43e:	d1e0      	bne.n	800a402 <_free_r+0x22>
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	4408      	add	r0, r1
 800a446:	6010      	str	r0, [r2, #0]
 800a448:	6053      	str	r3, [r2, #4]
 800a44a:	e7da      	b.n	800a402 <_free_r+0x22>
 800a44c:	d902      	bls.n	800a454 <_free_r+0x74>
 800a44e:	230c      	movs	r3, #12
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	e7d6      	b.n	800a402 <_free_r+0x22>
 800a454:	6820      	ldr	r0, [r4, #0]
 800a456:	1821      	adds	r1, r4, r0
 800a458:	428b      	cmp	r3, r1
 800a45a:	bf01      	itttt	eq
 800a45c:	6819      	ldreq	r1, [r3, #0]
 800a45e:	685b      	ldreq	r3, [r3, #4]
 800a460:	1809      	addeq	r1, r1, r0
 800a462:	6021      	streq	r1, [r4, #0]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	6054      	str	r4, [r2, #4]
 800a468:	e7cb      	b.n	800a402 <_free_r+0x22>
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	200027ec 	.word	0x200027ec

0800a470 <rshift>:
 800a470:	6903      	ldr	r3, [r0, #16]
 800a472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a476:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a47a:	f100 0414 	add.w	r4, r0, #20
 800a47e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a482:	dd46      	ble.n	800a512 <rshift+0xa2>
 800a484:	f011 011f 	ands.w	r1, r1, #31
 800a488:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a48c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a490:	d10c      	bne.n	800a4ac <rshift+0x3c>
 800a492:	4629      	mov	r1, r5
 800a494:	f100 0710 	add.w	r7, r0, #16
 800a498:	42b1      	cmp	r1, r6
 800a49a:	d335      	bcc.n	800a508 <rshift+0x98>
 800a49c:	1a9b      	subs	r3, r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	1eea      	subs	r2, r5, #3
 800a4a2:	4296      	cmp	r6, r2
 800a4a4:	bf38      	it	cc
 800a4a6:	2300      	movcc	r3, #0
 800a4a8:	4423      	add	r3, r4
 800a4aa:	e015      	b.n	800a4d8 <rshift+0x68>
 800a4ac:	46a1      	mov	r9, r4
 800a4ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4b2:	f1c1 0820 	rsb	r8, r1, #32
 800a4b6:	40cf      	lsrs	r7, r1
 800a4b8:	f105 0e04 	add.w	lr, r5, #4
 800a4bc:	4576      	cmp	r6, lr
 800a4be:	46f4      	mov	ip, lr
 800a4c0:	d816      	bhi.n	800a4f0 <rshift+0x80>
 800a4c2:	1a9a      	subs	r2, r3, r2
 800a4c4:	0092      	lsls	r2, r2, #2
 800a4c6:	3a04      	subs	r2, #4
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	42ae      	cmp	r6, r5
 800a4cc:	bf38      	it	cc
 800a4ce:	2200      	movcc	r2, #0
 800a4d0:	18a3      	adds	r3, r4, r2
 800a4d2:	50a7      	str	r7, [r4, r2]
 800a4d4:	b107      	cbz	r7, 800a4d8 <rshift+0x68>
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	eba3 0204 	sub.w	r2, r3, r4
 800a4de:	bf08      	it	eq
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4e6:	6102      	str	r2, [r0, #16]
 800a4e8:	bf08      	it	eq
 800a4ea:	6143      	streq	r3, [r0, #20]
 800a4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f0:	f8dc c000 	ldr.w	ip, [ip]
 800a4f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4f8:	ea4c 0707 	orr.w	r7, ip, r7
 800a4fc:	f849 7b04 	str.w	r7, [r9], #4
 800a500:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a504:	40cf      	lsrs	r7, r1
 800a506:	e7d9      	b.n	800a4bc <rshift+0x4c>
 800a508:	f851 cb04 	ldr.w	ip, [r1], #4
 800a50c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a510:	e7c2      	b.n	800a498 <rshift+0x28>
 800a512:	4623      	mov	r3, r4
 800a514:	e7e0      	b.n	800a4d8 <rshift+0x68>

0800a516 <__hexdig_fun>:
 800a516:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a51a:	2b09      	cmp	r3, #9
 800a51c:	d802      	bhi.n	800a524 <__hexdig_fun+0xe>
 800a51e:	3820      	subs	r0, #32
 800a520:	b2c0      	uxtb	r0, r0
 800a522:	4770      	bx	lr
 800a524:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a528:	2b05      	cmp	r3, #5
 800a52a:	d801      	bhi.n	800a530 <__hexdig_fun+0x1a>
 800a52c:	3847      	subs	r0, #71	; 0x47
 800a52e:	e7f7      	b.n	800a520 <__hexdig_fun+0xa>
 800a530:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a534:	2b05      	cmp	r3, #5
 800a536:	d801      	bhi.n	800a53c <__hexdig_fun+0x26>
 800a538:	3827      	subs	r0, #39	; 0x27
 800a53a:	e7f1      	b.n	800a520 <__hexdig_fun+0xa>
 800a53c:	2000      	movs	r0, #0
 800a53e:	4770      	bx	lr

0800a540 <__gethex>:
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	4681      	mov	r9, r0
 800a546:	468a      	mov	sl, r1
 800a548:	4617      	mov	r7, r2
 800a54a:	680a      	ldr	r2, [r1, #0]
 800a54c:	b085      	sub	sp, #20
 800a54e:	f102 0b02 	add.w	fp, r2, #2
 800a552:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a556:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a55a:	9302      	str	r3, [sp, #8]
 800a55c:	32fe      	adds	r2, #254	; 0xfe
 800a55e:	eb02 030b 	add.w	r3, r2, fp
 800a562:	46d8      	mov	r8, fp
 800a564:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	2830      	cmp	r0, #48	; 0x30
 800a56c:	d0f7      	beq.n	800a55e <__gethex+0x1e>
 800a56e:	f7ff ffd2 	bl	800a516 <__hexdig_fun>
 800a572:	4604      	mov	r4, r0
 800a574:	2800      	cmp	r0, #0
 800a576:	d138      	bne.n	800a5ea <__gethex+0xaa>
 800a578:	2201      	movs	r2, #1
 800a57a:	4640      	mov	r0, r8
 800a57c:	49a7      	ldr	r1, [pc, #668]	; (800a81c <__gethex+0x2dc>)
 800a57e:	f7fe ff53 	bl	8009428 <strncmp>
 800a582:	4606      	mov	r6, r0
 800a584:	2800      	cmp	r0, #0
 800a586:	d169      	bne.n	800a65c <__gethex+0x11c>
 800a588:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a58c:	465d      	mov	r5, fp
 800a58e:	f7ff ffc2 	bl	800a516 <__hexdig_fun>
 800a592:	2800      	cmp	r0, #0
 800a594:	d064      	beq.n	800a660 <__gethex+0x120>
 800a596:	465a      	mov	r2, fp
 800a598:	7810      	ldrb	r0, [r2, #0]
 800a59a:	4690      	mov	r8, r2
 800a59c:	2830      	cmp	r0, #48	; 0x30
 800a59e:	f102 0201 	add.w	r2, r2, #1
 800a5a2:	d0f9      	beq.n	800a598 <__gethex+0x58>
 800a5a4:	f7ff ffb7 	bl	800a516 <__hexdig_fun>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	fab0 f480 	clz	r4, r0
 800a5ae:	465e      	mov	r6, fp
 800a5b0:	0964      	lsrs	r4, r4, #5
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	4615      	mov	r5, r2
 800a5b8:	7828      	ldrb	r0, [r5, #0]
 800a5ba:	3201      	adds	r2, #1
 800a5bc:	f7ff ffab 	bl	800a516 <__hexdig_fun>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d1f8      	bne.n	800a5b6 <__gethex+0x76>
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	4994      	ldr	r1, [pc, #592]	; (800a81c <__gethex+0x2dc>)
 800a5ca:	f7fe ff2d 	bl	8009428 <strncmp>
 800a5ce:	b978      	cbnz	r0, 800a5f0 <__gethex+0xb0>
 800a5d0:	b946      	cbnz	r6, 800a5e4 <__gethex+0xa4>
 800a5d2:	1c6e      	adds	r6, r5, #1
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	4615      	mov	r5, r2
 800a5d8:	7828      	ldrb	r0, [r5, #0]
 800a5da:	3201      	adds	r2, #1
 800a5dc:	f7ff ff9b 	bl	800a516 <__hexdig_fun>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d1f8      	bne.n	800a5d6 <__gethex+0x96>
 800a5e4:	1b73      	subs	r3, r6, r5
 800a5e6:	009e      	lsls	r6, r3, #2
 800a5e8:	e004      	b.n	800a5f4 <__gethex+0xb4>
 800a5ea:	2400      	movs	r4, #0
 800a5ec:	4626      	mov	r6, r4
 800a5ee:	e7e1      	b.n	800a5b4 <__gethex+0x74>
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	d1f7      	bne.n	800a5e4 <__gethex+0xa4>
 800a5f4:	782b      	ldrb	r3, [r5, #0]
 800a5f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5fa:	2b50      	cmp	r3, #80	; 0x50
 800a5fc:	d13d      	bne.n	800a67a <__gethex+0x13a>
 800a5fe:	786b      	ldrb	r3, [r5, #1]
 800a600:	2b2b      	cmp	r3, #43	; 0x2b
 800a602:	d02f      	beq.n	800a664 <__gethex+0x124>
 800a604:	2b2d      	cmp	r3, #45	; 0x2d
 800a606:	d031      	beq.n	800a66c <__gethex+0x12c>
 800a608:	f04f 0b00 	mov.w	fp, #0
 800a60c:	1c69      	adds	r1, r5, #1
 800a60e:	7808      	ldrb	r0, [r1, #0]
 800a610:	f7ff ff81 	bl	800a516 <__hexdig_fun>
 800a614:	1e42      	subs	r2, r0, #1
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	2a18      	cmp	r2, #24
 800a61a:	d82e      	bhi.n	800a67a <__gethex+0x13a>
 800a61c:	f1a0 0210 	sub.w	r2, r0, #16
 800a620:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a624:	f7ff ff77 	bl	800a516 <__hexdig_fun>
 800a628:	f100 3cff 	add.w	ip, r0, #4294967295
 800a62c:	fa5f fc8c 	uxtb.w	ip, ip
 800a630:	f1bc 0f18 	cmp.w	ip, #24
 800a634:	d91d      	bls.n	800a672 <__gethex+0x132>
 800a636:	f1bb 0f00 	cmp.w	fp, #0
 800a63a:	d000      	beq.n	800a63e <__gethex+0xfe>
 800a63c:	4252      	negs	r2, r2
 800a63e:	4416      	add	r6, r2
 800a640:	f8ca 1000 	str.w	r1, [sl]
 800a644:	b1dc      	cbz	r4, 800a67e <__gethex+0x13e>
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf14      	ite	ne
 800a64c:	f04f 0800 	movne.w	r8, #0
 800a650:	f04f 0806 	moveq.w	r8, #6
 800a654:	4640      	mov	r0, r8
 800a656:	b005      	add	sp, #20
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	4645      	mov	r5, r8
 800a65e:	4626      	mov	r6, r4
 800a660:	2401      	movs	r4, #1
 800a662:	e7c7      	b.n	800a5f4 <__gethex+0xb4>
 800a664:	f04f 0b00 	mov.w	fp, #0
 800a668:	1ca9      	adds	r1, r5, #2
 800a66a:	e7d0      	b.n	800a60e <__gethex+0xce>
 800a66c:	f04f 0b01 	mov.w	fp, #1
 800a670:	e7fa      	b.n	800a668 <__gethex+0x128>
 800a672:	230a      	movs	r3, #10
 800a674:	fb03 0002 	mla	r0, r3, r2, r0
 800a678:	e7d0      	b.n	800a61c <__gethex+0xdc>
 800a67a:	4629      	mov	r1, r5
 800a67c:	e7e0      	b.n	800a640 <__gethex+0x100>
 800a67e:	4621      	mov	r1, r4
 800a680:	eba5 0308 	sub.w	r3, r5, r8
 800a684:	3b01      	subs	r3, #1
 800a686:	2b07      	cmp	r3, #7
 800a688:	dc0a      	bgt.n	800a6a0 <__gethex+0x160>
 800a68a:	4648      	mov	r0, r9
 800a68c:	f000 fa5c 	bl	800ab48 <_Balloc>
 800a690:	4604      	mov	r4, r0
 800a692:	b940      	cbnz	r0, 800a6a6 <__gethex+0x166>
 800a694:	4602      	mov	r2, r0
 800a696:	21e4      	movs	r1, #228	; 0xe4
 800a698:	4b61      	ldr	r3, [pc, #388]	; (800a820 <__gethex+0x2e0>)
 800a69a:	4862      	ldr	r0, [pc, #392]	; (800a824 <__gethex+0x2e4>)
 800a69c:	f7ff f812 	bl	80096c4 <__assert_func>
 800a6a0:	3101      	adds	r1, #1
 800a6a2:	105b      	asrs	r3, r3, #1
 800a6a4:	e7ef      	b.n	800a686 <__gethex+0x146>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	469b      	mov	fp, r3
 800a6aa:	f100 0a14 	add.w	sl, r0, #20
 800a6ae:	f8cd a004 	str.w	sl, [sp, #4]
 800a6b2:	45a8      	cmp	r8, r5
 800a6b4:	d344      	bcc.n	800a740 <__gethex+0x200>
 800a6b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6ba:	4658      	mov	r0, fp
 800a6bc:	f848 bb04 	str.w	fp, [r8], #4
 800a6c0:	eba8 080a 	sub.w	r8, r8, sl
 800a6c4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a6c8:	6122      	str	r2, [r4, #16]
 800a6ca:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a6ce:	f000 fb2d 	bl	800ad2c <__hi0bits>
 800a6d2:	683d      	ldr	r5, [r7, #0]
 800a6d4:	eba8 0800 	sub.w	r8, r8, r0
 800a6d8:	45a8      	cmp	r8, r5
 800a6da:	dd59      	ble.n	800a790 <__gethex+0x250>
 800a6dc:	eba8 0805 	sub.w	r8, r8, r5
 800a6e0:	4641      	mov	r1, r8
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 feab 	bl	800b43e <__any_on>
 800a6e8:	4683      	mov	fp, r0
 800a6ea:	b1b8      	cbz	r0, 800a71c <__gethex+0x1dc>
 800a6ec:	f04f 0b01 	mov.w	fp, #1
 800a6f0:	f108 33ff 	add.w	r3, r8, #4294967295
 800a6f4:	1159      	asrs	r1, r3, #5
 800a6f6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a6fa:	f003 021f 	and.w	r2, r3, #31
 800a6fe:	fa0b f202 	lsl.w	r2, fp, r2
 800a702:	420a      	tst	r2, r1
 800a704:	d00a      	beq.n	800a71c <__gethex+0x1dc>
 800a706:	455b      	cmp	r3, fp
 800a708:	dd06      	ble.n	800a718 <__gethex+0x1d8>
 800a70a:	4620      	mov	r0, r4
 800a70c:	f1a8 0102 	sub.w	r1, r8, #2
 800a710:	f000 fe95 	bl	800b43e <__any_on>
 800a714:	2800      	cmp	r0, #0
 800a716:	d138      	bne.n	800a78a <__gethex+0x24a>
 800a718:	f04f 0b02 	mov.w	fp, #2
 800a71c:	4641      	mov	r1, r8
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff fea6 	bl	800a470 <rshift>
 800a724:	4446      	add	r6, r8
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	42b3      	cmp	r3, r6
 800a72a:	da41      	bge.n	800a7b0 <__gethex+0x270>
 800a72c:	4621      	mov	r1, r4
 800a72e:	4648      	mov	r0, r9
 800a730:	f000 fa4a 	bl	800abc8 <_Bfree>
 800a734:	2300      	movs	r3, #0
 800a736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a738:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	e789      	b.n	800a654 <__gethex+0x114>
 800a740:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a744:	2a2e      	cmp	r2, #46	; 0x2e
 800a746:	d014      	beq.n	800a772 <__gethex+0x232>
 800a748:	2b20      	cmp	r3, #32
 800a74a:	d106      	bne.n	800a75a <__gethex+0x21a>
 800a74c:	9b01      	ldr	r3, [sp, #4]
 800a74e:	f843 bb04 	str.w	fp, [r3], #4
 800a752:	f04f 0b00 	mov.w	fp, #0
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	465b      	mov	r3, fp
 800a75a:	7828      	ldrb	r0, [r5, #0]
 800a75c:	9303      	str	r3, [sp, #12]
 800a75e:	f7ff feda 	bl	800a516 <__hexdig_fun>
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	f000 000f 	and.w	r0, r0, #15
 800a768:	4098      	lsls	r0, r3
 800a76a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a76e:	3304      	adds	r3, #4
 800a770:	e79f      	b.n	800a6b2 <__gethex+0x172>
 800a772:	45a8      	cmp	r8, r5
 800a774:	d8e8      	bhi.n	800a748 <__gethex+0x208>
 800a776:	2201      	movs	r2, #1
 800a778:	4628      	mov	r0, r5
 800a77a:	4928      	ldr	r1, [pc, #160]	; (800a81c <__gethex+0x2dc>)
 800a77c:	9303      	str	r3, [sp, #12]
 800a77e:	f7fe fe53 	bl	8009428 <strncmp>
 800a782:	9b03      	ldr	r3, [sp, #12]
 800a784:	2800      	cmp	r0, #0
 800a786:	d1df      	bne.n	800a748 <__gethex+0x208>
 800a788:	e793      	b.n	800a6b2 <__gethex+0x172>
 800a78a:	f04f 0b03 	mov.w	fp, #3
 800a78e:	e7c5      	b.n	800a71c <__gethex+0x1dc>
 800a790:	da0b      	bge.n	800a7aa <__gethex+0x26a>
 800a792:	eba5 0808 	sub.w	r8, r5, r8
 800a796:	4621      	mov	r1, r4
 800a798:	4642      	mov	r2, r8
 800a79a:	4648      	mov	r0, r9
 800a79c:	f000 fc2c 	bl	800aff8 <__lshift>
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	eba6 0608 	sub.w	r6, r6, r8
 800a7a6:	f100 0a14 	add.w	sl, r0, #20
 800a7aa:	f04f 0b00 	mov.w	fp, #0
 800a7ae:	e7ba      	b.n	800a726 <__gethex+0x1e6>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	42b3      	cmp	r3, r6
 800a7b4:	dd74      	ble.n	800a8a0 <__gethex+0x360>
 800a7b6:	1b9e      	subs	r6, r3, r6
 800a7b8:	42b5      	cmp	r5, r6
 800a7ba:	dc35      	bgt.n	800a828 <__gethex+0x2e8>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d023      	beq.n	800a80a <__gethex+0x2ca>
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d025      	beq.n	800a812 <__gethex+0x2d2>
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d115      	bne.n	800a7f6 <__gethex+0x2b6>
 800a7ca:	42b5      	cmp	r5, r6
 800a7cc:	d113      	bne.n	800a7f6 <__gethex+0x2b6>
 800a7ce:	2d01      	cmp	r5, #1
 800a7d0:	d10b      	bne.n	800a7ea <__gethex+0x2aa>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	9a02      	ldr	r2, [sp, #8]
 800a7d6:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	2301      	movs	r3, #1
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	f8ca 3000 	str.w	r3, [sl]
 800a7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e6:	601c      	str	r4, [r3, #0]
 800a7e8:	e734      	b.n	800a654 <__gethex+0x114>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	1e69      	subs	r1, r5, #1
 800a7ee:	f000 fe26 	bl	800b43e <__any_on>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d1ed      	bne.n	800a7d2 <__gethex+0x292>
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	4648      	mov	r0, r9
 800a7fa:	f000 f9e5 	bl	800abc8 <_Bfree>
 800a7fe:	2300      	movs	r3, #0
 800a800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a802:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	e724      	b.n	800a654 <__gethex+0x114>
 800a80a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1f2      	bne.n	800a7f6 <__gethex+0x2b6>
 800a810:	e7df      	b.n	800a7d2 <__gethex+0x292>
 800a812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1dc      	bne.n	800a7d2 <__gethex+0x292>
 800a818:	e7ed      	b.n	800a7f6 <__gethex+0x2b6>
 800a81a:	bf00      	nop
 800a81c:	0800bd6a 	.word	0x0800bd6a
 800a820:	0800c00f 	.word	0x0800c00f
 800a824:	0800c020 	.word	0x0800c020
 800a828:	f106 38ff 	add.w	r8, r6, #4294967295
 800a82c:	f1bb 0f00 	cmp.w	fp, #0
 800a830:	d133      	bne.n	800a89a <__gethex+0x35a>
 800a832:	f1b8 0f00 	cmp.w	r8, #0
 800a836:	d004      	beq.n	800a842 <__gethex+0x302>
 800a838:	4641      	mov	r1, r8
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fdff 	bl	800b43e <__any_on>
 800a840:	4683      	mov	fp, r0
 800a842:	2301      	movs	r3, #1
 800a844:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a848:	f008 081f 	and.w	r8, r8, #31
 800a84c:	fa03 f308 	lsl.w	r3, r3, r8
 800a850:	f04f 0802 	mov.w	r8, #2
 800a854:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a858:	4631      	mov	r1, r6
 800a85a:	4213      	tst	r3, r2
 800a85c:	4620      	mov	r0, r4
 800a85e:	bf18      	it	ne
 800a860:	f04b 0b02 	orrne.w	fp, fp, #2
 800a864:	1bad      	subs	r5, r5, r6
 800a866:	f7ff fe03 	bl	800a470 <rshift>
 800a86a:	687e      	ldr	r6, [r7, #4]
 800a86c:	f1bb 0f00 	cmp.w	fp, #0
 800a870:	d04a      	beq.n	800a908 <__gethex+0x3c8>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d016      	beq.n	800a8a6 <__gethex+0x366>
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d018      	beq.n	800a8ae <__gethex+0x36e>
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d109      	bne.n	800a894 <__gethex+0x354>
 800a880:	f01b 0f02 	tst.w	fp, #2
 800a884:	d006      	beq.n	800a894 <__gethex+0x354>
 800a886:	f8da 3000 	ldr.w	r3, [sl]
 800a88a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a88e:	f01b 0f01 	tst.w	fp, #1
 800a892:	d10f      	bne.n	800a8b4 <__gethex+0x374>
 800a894:	f048 0810 	orr.w	r8, r8, #16
 800a898:	e036      	b.n	800a908 <__gethex+0x3c8>
 800a89a:	f04f 0b01 	mov.w	fp, #1
 800a89e:	e7d0      	b.n	800a842 <__gethex+0x302>
 800a8a0:	f04f 0801 	mov.w	r8, #1
 800a8a4:	e7e2      	b.n	800a86c <__gethex+0x32c>
 800a8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8a8:	f1c3 0301 	rsb	r3, r3, #1
 800a8ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0ef      	beq.n	800a894 <__gethex+0x354>
 800a8b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8b8:	f104 0214 	add.w	r2, r4, #20
 800a8bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a8c8:	4694      	mov	ip, r2
 800a8ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800a8ce:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a8d2:	d01e      	beq.n	800a912 <__gethex+0x3d2>
 800a8d4:	3101      	adds	r1, #1
 800a8d6:	f8cc 1000 	str.w	r1, [ip]
 800a8da:	f1b8 0f02 	cmp.w	r8, #2
 800a8de:	f104 0214 	add.w	r2, r4, #20
 800a8e2:	d13d      	bne.n	800a960 <__gethex+0x420>
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	d10b      	bne.n	800a904 <__gethex+0x3c4>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	1169      	asrs	r1, r5, #5
 800a8f0:	f005 051f 	and.w	r5, r5, #31
 800a8f4:	fa03 f505 	lsl.w	r5, r3, r5
 800a8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8fc:	421d      	tst	r5, r3
 800a8fe:	bf18      	it	ne
 800a900:	f04f 0801 	movne.w	r8, #1
 800a904:	f048 0820 	orr.w	r8, r8, #32
 800a908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a90a:	601c      	str	r4, [r3, #0]
 800a90c:	9b02      	ldr	r3, [sp, #8]
 800a90e:	601e      	str	r6, [r3, #0]
 800a910:	e6a0      	b.n	800a654 <__gethex+0x114>
 800a912:	4290      	cmp	r0, r2
 800a914:	f842 3c04 	str.w	r3, [r2, #-4]
 800a918:	d8d6      	bhi.n	800a8c8 <__gethex+0x388>
 800a91a:	68a2      	ldr	r2, [r4, #8]
 800a91c:	4593      	cmp	fp, r2
 800a91e:	db17      	blt.n	800a950 <__gethex+0x410>
 800a920:	6861      	ldr	r1, [r4, #4]
 800a922:	4648      	mov	r0, r9
 800a924:	3101      	adds	r1, #1
 800a926:	f000 f90f 	bl	800ab48 <_Balloc>
 800a92a:	4682      	mov	sl, r0
 800a92c:	b918      	cbnz	r0, 800a936 <__gethex+0x3f6>
 800a92e:	4602      	mov	r2, r0
 800a930:	2184      	movs	r1, #132	; 0x84
 800a932:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <__gethex+0x45c>)
 800a934:	e6b1      	b.n	800a69a <__gethex+0x15a>
 800a936:	6922      	ldr	r2, [r4, #16]
 800a938:	f104 010c 	add.w	r1, r4, #12
 800a93c:	3202      	adds	r2, #2
 800a93e:	0092      	lsls	r2, r2, #2
 800a940:	300c      	adds	r0, #12
 800a942:	f7fe fea6 	bl	8009692 <memcpy>
 800a946:	4621      	mov	r1, r4
 800a948:	4648      	mov	r0, r9
 800a94a:	f000 f93d 	bl	800abc8 <_Bfree>
 800a94e:	4654      	mov	r4, sl
 800a950:	6922      	ldr	r2, [r4, #16]
 800a952:	1c51      	adds	r1, r2, #1
 800a954:	6121      	str	r1, [r4, #16]
 800a956:	2101      	movs	r1, #1
 800a958:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a95c:	6151      	str	r1, [r2, #20]
 800a95e:	e7bc      	b.n	800a8da <__gethex+0x39a>
 800a960:	6921      	ldr	r1, [r4, #16]
 800a962:	4559      	cmp	r1, fp
 800a964:	dd0b      	ble.n	800a97e <__gethex+0x43e>
 800a966:	2101      	movs	r1, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	f7ff fd81 	bl	800a470 <rshift>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3601      	adds	r6, #1
 800a972:	42b3      	cmp	r3, r6
 800a974:	f6ff aeda 	blt.w	800a72c <__gethex+0x1ec>
 800a978:	f04f 0801 	mov.w	r8, #1
 800a97c:	e7c2      	b.n	800a904 <__gethex+0x3c4>
 800a97e:	f015 051f 	ands.w	r5, r5, #31
 800a982:	d0f9      	beq.n	800a978 <__gethex+0x438>
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	f1c5 0520 	rsb	r5, r5, #32
 800a98a:	441a      	add	r2, r3
 800a98c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a990:	f000 f9cc 	bl	800ad2c <__hi0bits>
 800a994:	42a8      	cmp	r0, r5
 800a996:	dbe6      	blt.n	800a966 <__gethex+0x426>
 800a998:	e7ee      	b.n	800a978 <__gethex+0x438>
 800a99a:	bf00      	nop
 800a99c:	0800c00f 	.word	0x0800c00f

0800a9a0 <L_shift>:
 800a9a0:	f1c2 0208 	rsb	r2, r2, #8
 800a9a4:	0092      	lsls	r2, r2, #2
 800a9a6:	b570      	push	{r4, r5, r6, lr}
 800a9a8:	f1c2 0620 	rsb	r6, r2, #32
 800a9ac:	6843      	ldr	r3, [r0, #4]
 800a9ae:	6804      	ldr	r4, [r0, #0]
 800a9b0:	fa03 f506 	lsl.w	r5, r3, r6
 800a9b4:	432c      	orrs	r4, r5
 800a9b6:	40d3      	lsrs	r3, r2
 800a9b8:	6004      	str	r4, [r0, #0]
 800a9ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9be:	4288      	cmp	r0, r1
 800a9c0:	d3f4      	bcc.n	800a9ac <L_shift+0xc>
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}

0800a9c4 <__match>:
 800a9c4:	b530      	push	{r4, r5, lr}
 800a9c6:	6803      	ldr	r3, [r0, #0]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ce:	b914      	cbnz	r4, 800a9d6 <__match+0x12>
 800a9d0:	6003      	str	r3, [r0, #0]
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	bd30      	pop	{r4, r5, pc}
 800a9d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9de:	2d19      	cmp	r5, #25
 800a9e0:	bf98      	it	ls
 800a9e2:	3220      	addls	r2, #32
 800a9e4:	42a2      	cmp	r2, r4
 800a9e6:	d0f0      	beq.n	800a9ca <__match+0x6>
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e7f3      	b.n	800a9d4 <__match+0x10>

0800a9ec <__hexnan>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	2500      	movs	r5, #0
 800a9f2:	680b      	ldr	r3, [r1, #0]
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	115e      	asrs	r6, r3, #5
 800a9f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9fc:	f013 031f 	ands.w	r3, r3, #31
 800aa00:	bf18      	it	ne
 800aa02:	3604      	addne	r6, #4
 800aa04:	1f37      	subs	r7, r6, #4
 800aa06:	4690      	mov	r8, r2
 800aa08:	46b9      	mov	r9, r7
 800aa0a:	463c      	mov	r4, r7
 800aa0c:	46ab      	mov	fp, r5
 800aa0e:	b087      	sub	sp, #28
 800aa10:	6801      	ldr	r1, [r0, #0]
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa18:	9502      	str	r5, [sp, #8]
 800aa1a:	784a      	ldrb	r2, [r1, #1]
 800aa1c:	1c4b      	adds	r3, r1, #1
 800aa1e:	9303      	str	r3, [sp, #12]
 800aa20:	b342      	cbz	r2, 800aa74 <__hexnan+0x88>
 800aa22:	4610      	mov	r0, r2
 800aa24:	9105      	str	r1, [sp, #20]
 800aa26:	9204      	str	r2, [sp, #16]
 800aa28:	f7ff fd75 	bl	800a516 <__hexdig_fun>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d14f      	bne.n	800aad0 <__hexnan+0xe4>
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	9905      	ldr	r1, [sp, #20]
 800aa34:	2a20      	cmp	r2, #32
 800aa36:	d818      	bhi.n	800aa6a <__hexnan+0x7e>
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	459b      	cmp	fp, r3
 800aa3c:	dd13      	ble.n	800aa66 <__hexnan+0x7a>
 800aa3e:	454c      	cmp	r4, r9
 800aa40:	d206      	bcs.n	800aa50 <__hexnan+0x64>
 800aa42:	2d07      	cmp	r5, #7
 800aa44:	dc04      	bgt.n	800aa50 <__hexnan+0x64>
 800aa46:	462a      	mov	r2, r5
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7ff ffa8 	bl	800a9a0 <L_shift>
 800aa50:	4544      	cmp	r4, r8
 800aa52:	d950      	bls.n	800aaf6 <__hexnan+0x10a>
 800aa54:	2300      	movs	r3, #0
 800aa56:	f1a4 0904 	sub.w	r9, r4, #4
 800aa5a:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa5e:	461d      	mov	r5, r3
 800aa60:	464c      	mov	r4, r9
 800aa62:	f8cd b008 	str.w	fp, [sp, #8]
 800aa66:	9903      	ldr	r1, [sp, #12]
 800aa68:	e7d7      	b.n	800aa1a <__hexnan+0x2e>
 800aa6a:	2a29      	cmp	r2, #41	; 0x29
 800aa6c:	d155      	bne.n	800ab1a <__hexnan+0x12e>
 800aa6e:	3102      	adds	r1, #2
 800aa70:	f8ca 1000 	str.w	r1, [sl]
 800aa74:	f1bb 0f00 	cmp.w	fp, #0
 800aa78:	d04f      	beq.n	800ab1a <__hexnan+0x12e>
 800aa7a:	454c      	cmp	r4, r9
 800aa7c:	d206      	bcs.n	800aa8c <__hexnan+0xa0>
 800aa7e:	2d07      	cmp	r5, #7
 800aa80:	dc04      	bgt.n	800aa8c <__hexnan+0xa0>
 800aa82:	462a      	mov	r2, r5
 800aa84:	4649      	mov	r1, r9
 800aa86:	4620      	mov	r0, r4
 800aa88:	f7ff ff8a 	bl	800a9a0 <L_shift>
 800aa8c:	4544      	cmp	r4, r8
 800aa8e:	d934      	bls.n	800aafa <__hexnan+0x10e>
 800aa90:	4623      	mov	r3, r4
 800aa92:	f1a8 0204 	sub.w	r2, r8, #4
 800aa96:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa9a:	429f      	cmp	r7, r3
 800aa9c:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaa0:	d2f9      	bcs.n	800aa96 <__hexnan+0xaa>
 800aaa2:	1b3b      	subs	r3, r7, r4
 800aaa4:	f023 0303 	bic.w	r3, r3, #3
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	3e03      	subs	r6, #3
 800aaac:	3401      	adds	r4, #1
 800aaae:	42a6      	cmp	r6, r4
 800aab0:	bf38      	it	cc
 800aab2:	2304      	movcc	r3, #4
 800aab4:	2200      	movs	r2, #0
 800aab6:	4443      	add	r3, r8
 800aab8:	f843 2b04 	str.w	r2, [r3], #4
 800aabc:	429f      	cmp	r7, r3
 800aabe:	d2fb      	bcs.n	800aab8 <__hexnan+0xcc>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	b91b      	cbnz	r3, 800aacc <__hexnan+0xe0>
 800aac4:	4547      	cmp	r7, r8
 800aac6:	d126      	bne.n	800ab16 <__hexnan+0x12a>
 800aac8:	2301      	movs	r3, #1
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	2005      	movs	r0, #5
 800aace:	e025      	b.n	800ab1c <__hexnan+0x130>
 800aad0:	3501      	adds	r5, #1
 800aad2:	2d08      	cmp	r5, #8
 800aad4:	f10b 0b01 	add.w	fp, fp, #1
 800aad8:	dd06      	ble.n	800aae8 <__hexnan+0xfc>
 800aada:	4544      	cmp	r4, r8
 800aadc:	d9c3      	bls.n	800aa66 <__hexnan+0x7a>
 800aade:	2300      	movs	r3, #0
 800aae0:	2501      	movs	r5, #1
 800aae2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aae6:	3c04      	subs	r4, #4
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	f000 000f 	and.w	r0, r0, #15
 800aaee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aaf2:	6020      	str	r0, [r4, #0]
 800aaf4:	e7b7      	b.n	800aa66 <__hexnan+0x7a>
 800aaf6:	2508      	movs	r5, #8
 800aaf8:	e7b5      	b.n	800aa66 <__hexnan+0x7a>
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0df      	beq.n	800aac0 <__hexnan+0xd4>
 800ab00:	f04f 32ff 	mov.w	r2, #4294967295
 800ab04:	f1c3 0320 	rsb	r3, r3, #32
 800ab08:	40da      	lsrs	r2, r3
 800ab0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab0e:	4013      	ands	r3, r2
 800ab10:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab14:	e7d4      	b.n	800aac0 <__hexnan+0xd4>
 800ab16:	3f04      	subs	r7, #4
 800ab18:	e7d2      	b.n	800aac0 <__hexnan+0xd4>
 800ab1a:	2004      	movs	r0, #4
 800ab1c:	b007      	add	sp, #28
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab22 <__ascii_mbtowc>:
 800ab22:	b082      	sub	sp, #8
 800ab24:	b901      	cbnz	r1, 800ab28 <__ascii_mbtowc+0x6>
 800ab26:	a901      	add	r1, sp, #4
 800ab28:	b142      	cbz	r2, 800ab3c <__ascii_mbtowc+0x1a>
 800ab2a:	b14b      	cbz	r3, 800ab40 <__ascii_mbtowc+0x1e>
 800ab2c:	7813      	ldrb	r3, [r2, #0]
 800ab2e:	600b      	str	r3, [r1, #0]
 800ab30:	7812      	ldrb	r2, [r2, #0]
 800ab32:	1e10      	subs	r0, r2, #0
 800ab34:	bf18      	it	ne
 800ab36:	2001      	movne	r0, #1
 800ab38:	b002      	add	sp, #8
 800ab3a:	4770      	bx	lr
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	e7fb      	b.n	800ab38 <__ascii_mbtowc+0x16>
 800ab40:	f06f 0001 	mvn.w	r0, #1
 800ab44:	e7f8      	b.n	800ab38 <__ascii_mbtowc+0x16>
	...

0800ab48 <_Balloc>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	69c6      	ldr	r6, [r0, #28]
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	b976      	cbnz	r6, 800ab70 <_Balloc+0x28>
 800ab52:	2010      	movs	r0, #16
 800ab54:	f7fc fd8c 	bl	8007670 <malloc>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	61e0      	str	r0, [r4, #28]
 800ab5c:	b920      	cbnz	r0, 800ab68 <_Balloc+0x20>
 800ab5e:	216b      	movs	r1, #107	; 0x6b
 800ab60:	4b17      	ldr	r3, [pc, #92]	; (800abc0 <_Balloc+0x78>)
 800ab62:	4818      	ldr	r0, [pc, #96]	; (800abc4 <_Balloc+0x7c>)
 800ab64:	f7fe fdae 	bl	80096c4 <__assert_func>
 800ab68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab6c:	6006      	str	r6, [r0, #0]
 800ab6e:	60c6      	str	r6, [r0, #12]
 800ab70:	69e6      	ldr	r6, [r4, #28]
 800ab72:	68f3      	ldr	r3, [r6, #12]
 800ab74:	b183      	cbz	r3, 800ab98 <_Balloc+0x50>
 800ab76:	69e3      	ldr	r3, [r4, #28]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab7e:	b9b8      	cbnz	r0, 800abb0 <_Balloc+0x68>
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f605 	lsl.w	r6, r1, r5
 800ab86:	1d72      	adds	r2, r6, #5
 800ab88:	4620      	mov	r0, r4
 800ab8a:	0092      	lsls	r2, r2, #2
 800ab8c:	f000 ff0d 	bl	800b9aa <_calloc_r>
 800ab90:	b160      	cbz	r0, 800abac <_Balloc+0x64>
 800ab92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab96:	e00e      	b.n	800abb6 <_Balloc+0x6e>
 800ab98:	2221      	movs	r2, #33	; 0x21
 800ab9a:	2104      	movs	r1, #4
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 ff04 	bl	800b9aa <_calloc_r>
 800aba2:	69e3      	ldr	r3, [r4, #28]
 800aba4:	60f0      	str	r0, [r6, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e4      	bne.n	800ab76 <_Balloc+0x2e>
 800abac:	2000      	movs	r0, #0
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	6802      	ldr	r2, [r0, #0]
 800abb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abb6:	2300      	movs	r3, #0
 800abb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abbc:	e7f7      	b.n	800abae <_Balloc+0x66>
 800abbe:	bf00      	nop
 800abc0:	0800bef5 	.word	0x0800bef5
 800abc4:	0800c080 	.word	0x0800c080

0800abc8 <_Bfree>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	69c6      	ldr	r6, [r0, #28]
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b976      	cbnz	r6, 800abf0 <_Bfree+0x28>
 800abd2:	2010      	movs	r0, #16
 800abd4:	f7fc fd4c 	bl	8007670 <malloc>
 800abd8:	4602      	mov	r2, r0
 800abda:	61e8      	str	r0, [r5, #28]
 800abdc:	b920      	cbnz	r0, 800abe8 <_Bfree+0x20>
 800abde:	218f      	movs	r1, #143	; 0x8f
 800abe0:	4b08      	ldr	r3, [pc, #32]	; (800ac04 <_Bfree+0x3c>)
 800abe2:	4809      	ldr	r0, [pc, #36]	; (800ac08 <_Bfree+0x40>)
 800abe4:	f7fe fd6e 	bl	80096c4 <__assert_func>
 800abe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abec:	6006      	str	r6, [r0, #0]
 800abee:	60c6      	str	r6, [r0, #12]
 800abf0:	b13c      	cbz	r4, 800ac02 <_Bfree+0x3a>
 800abf2:	69eb      	ldr	r3, [r5, #28]
 800abf4:	6862      	ldr	r2, [r4, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abfc:	6021      	str	r1, [r4, #0]
 800abfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	0800bef5 	.word	0x0800bef5
 800ac08:	0800c080 	.word	0x0800c080

0800ac0c <__multadd>:
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	4607      	mov	r7, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	461e      	mov	r6, r3
 800ac16:	2000      	movs	r0, #0
 800ac18:	690d      	ldr	r5, [r1, #16]
 800ac1a:	f101 0c14 	add.w	ip, r1, #20
 800ac1e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac22:	3001      	adds	r0, #1
 800ac24:	b299      	uxth	r1, r3
 800ac26:	fb02 6101 	mla	r1, r2, r1, r6
 800ac2a:	0c1e      	lsrs	r6, r3, #16
 800ac2c:	0c0b      	lsrs	r3, r1, #16
 800ac2e:	fb02 3306 	mla	r3, r2, r6, r3
 800ac32:	b289      	uxth	r1, r1
 800ac34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac38:	4285      	cmp	r5, r0
 800ac3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac3e:	f84c 1b04 	str.w	r1, [ip], #4
 800ac42:	dcec      	bgt.n	800ac1e <__multadd+0x12>
 800ac44:	b30e      	cbz	r6, 800ac8a <__multadd+0x7e>
 800ac46:	68a3      	ldr	r3, [r4, #8]
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	dc19      	bgt.n	800ac80 <__multadd+0x74>
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	4638      	mov	r0, r7
 800ac50:	3101      	adds	r1, #1
 800ac52:	f7ff ff79 	bl	800ab48 <_Balloc>
 800ac56:	4680      	mov	r8, r0
 800ac58:	b928      	cbnz	r0, 800ac66 <__multadd+0x5a>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	21ba      	movs	r1, #186	; 0xba
 800ac5e:	4b0c      	ldr	r3, [pc, #48]	; (800ac90 <__multadd+0x84>)
 800ac60:	480c      	ldr	r0, [pc, #48]	; (800ac94 <__multadd+0x88>)
 800ac62:	f7fe fd2f 	bl	80096c4 <__assert_func>
 800ac66:	6922      	ldr	r2, [r4, #16]
 800ac68:	f104 010c 	add.w	r1, r4, #12
 800ac6c:	3202      	adds	r2, #2
 800ac6e:	0092      	lsls	r2, r2, #2
 800ac70:	300c      	adds	r0, #12
 800ac72:	f7fe fd0e 	bl	8009692 <memcpy>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f7ff ffa5 	bl	800abc8 <_Bfree>
 800ac7e:	4644      	mov	r4, r8
 800ac80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac84:	3501      	adds	r5, #1
 800ac86:	615e      	str	r6, [r3, #20]
 800ac88:	6125      	str	r5, [r4, #16]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac90:	0800c00f 	.word	0x0800c00f
 800ac94:	0800c080 	.word	0x0800c080

0800ac98 <__s2b>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	2209      	movs	r2, #9
 800aca0:	461f      	mov	r7, r3
 800aca2:	3308      	adds	r3, #8
 800aca4:	460c      	mov	r4, r1
 800aca6:	fb93 f3f2 	sdiv	r3, r3, r2
 800acaa:	4606      	mov	r6, r0
 800acac:	2201      	movs	r2, #1
 800acae:	2100      	movs	r1, #0
 800acb0:	429a      	cmp	r2, r3
 800acb2:	db09      	blt.n	800acc8 <__s2b+0x30>
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff ff47 	bl	800ab48 <_Balloc>
 800acba:	b940      	cbnz	r0, 800acce <__s2b+0x36>
 800acbc:	4602      	mov	r2, r0
 800acbe:	21d3      	movs	r1, #211	; 0xd3
 800acc0:	4b18      	ldr	r3, [pc, #96]	; (800ad24 <__s2b+0x8c>)
 800acc2:	4819      	ldr	r0, [pc, #100]	; (800ad28 <__s2b+0x90>)
 800acc4:	f7fe fcfe 	bl	80096c4 <__assert_func>
 800acc8:	0052      	lsls	r2, r2, #1
 800acca:	3101      	adds	r1, #1
 800accc:	e7f0      	b.n	800acb0 <__s2b+0x18>
 800acce:	9b08      	ldr	r3, [sp, #32]
 800acd0:	2d09      	cmp	r5, #9
 800acd2:	6143      	str	r3, [r0, #20]
 800acd4:	f04f 0301 	mov.w	r3, #1
 800acd8:	6103      	str	r3, [r0, #16]
 800acda:	dd16      	ble.n	800ad0a <__s2b+0x72>
 800acdc:	f104 0909 	add.w	r9, r4, #9
 800ace0:	46c8      	mov	r8, r9
 800ace2:	442c      	add	r4, r5
 800ace4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ace8:	4601      	mov	r1, r0
 800acea:	220a      	movs	r2, #10
 800acec:	4630      	mov	r0, r6
 800acee:	3b30      	subs	r3, #48	; 0x30
 800acf0:	f7ff ff8c 	bl	800ac0c <__multadd>
 800acf4:	45a0      	cmp	r8, r4
 800acf6:	d1f5      	bne.n	800ace4 <__s2b+0x4c>
 800acf8:	f1a5 0408 	sub.w	r4, r5, #8
 800acfc:	444c      	add	r4, r9
 800acfe:	1b2d      	subs	r5, r5, r4
 800ad00:	1963      	adds	r3, r4, r5
 800ad02:	42bb      	cmp	r3, r7
 800ad04:	db04      	blt.n	800ad10 <__s2b+0x78>
 800ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	2509      	movs	r5, #9
 800ad0c:	340a      	adds	r4, #10
 800ad0e:	e7f6      	b.n	800acfe <__s2b+0x66>
 800ad10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad14:	4601      	mov	r1, r0
 800ad16:	220a      	movs	r2, #10
 800ad18:	4630      	mov	r0, r6
 800ad1a:	3b30      	subs	r3, #48	; 0x30
 800ad1c:	f7ff ff76 	bl	800ac0c <__multadd>
 800ad20:	e7ee      	b.n	800ad00 <__s2b+0x68>
 800ad22:	bf00      	nop
 800ad24:	0800c00f 	.word	0x0800c00f
 800ad28:	0800c080 	.word	0x0800c080

0800ad2c <__hi0bits>:
 800ad2c:	0c02      	lsrs	r2, r0, #16
 800ad2e:	0412      	lsls	r2, r2, #16
 800ad30:	4603      	mov	r3, r0
 800ad32:	b9ca      	cbnz	r2, 800ad68 <__hi0bits+0x3c>
 800ad34:	0403      	lsls	r3, r0, #16
 800ad36:	2010      	movs	r0, #16
 800ad38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad3c:	bf04      	itt	eq
 800ad3e:	021b      	lsleq	r3, r3, #8
 800ad40:	3008      	addeq	r0, #8
 800ad42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad46:	bf04      	itt	eq
 800ad48:	011b      	lsleq	r3, r3, #4
 800ad4a:	3004      	addeq	r0, #4
 800ad4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad50:	bf04      	itt	eq
 800ad52:	009b      	lsleq	r3, r3, #2
 800ad54:	3002      	addeq	r0, #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	db05      	blt.n	800ad66 <__hi0bits+0x3a>
 800ad5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad5e:	f100 0001 	add.w	r0, r0, #1
 800ad62:	bf08      	it	eq
 800ad64:	2020      	moveq	r0, #32
 800ad66:	4770      	bx	lr
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e7e5      	b.n	800ad38 <__hi0bits+0xc>

0800ad6c <__lo0bits>:
 800ad6c:	6803      	ldr	r3, [r0, #0]
 800ad6e:	4602      	mov	r2, r0
 800ad70:	f013 0007 	ands.w	r0, r3, #7
 800ad74:	d00b      	beq.n	800ad8e <__lo0bits+0x22>
 800ad76:	07d9      	lsls	r1, r3, #31
 800ad78:	d421      	bmi.n	800adbe <__lo0bits+0x52>
 800ad7a:	0798      	lsls	r0, r3, #30
 800ad7c:	bf49      	itett	mi
 800ad7e:	085b      	lsrmi	r3, r3, #1
 800ad80:	089b      	lsrpl	r3, r3, #2
 800ad82:	2001      	movmi	r0, #1
 800ad84:	6013      	strmi	r3, [r2, #0]
 800ad86:	bf5c      	itt	pl
 800ad88:	2002      	movpl	r0, #2
 800ad8a:	6013      	strpl	r3, [r2, #0]
 800ad8c:	4770      	bx	lr
 800ad8e:	b299      	uxth	r1, r3
 800ad90:	b909      	cbnz	r1, 800ad96 <__lo0bits+0x2a>
 800ad92:	2010      	movs	r0, #16
 800ad94:	0c1b      	lsrs	r3, r3, #16
 800ad96:	b2d9      	uxtb	r1, r3
 800ad98:	b909      	cbnz	r1, 800ad9e <__lo0bits+0x32>
 800ad9a:	3008      	adds	r0, #8
 800ad9c:	0a1b      	lsrs	r3, r3, #8
 800ad9e:	0719      	lsls	r1, r3, #28
 800ada0:	bf04      	itt	eq
 800ada2:	091b      	lsreq	r3, r3, #4
 800ada4:	3004      	addeq	r0, #4
 800ada6:	0799      	lsls	r1, r3, #30
 800ada8:	bf04      	itt	eq
 800adaa:	089b      	lsreq	r3, r3, #2
 800adac:	3002      	addeq	r0, #2
 800adae:	07d9      	lsls	r1, r3, #31
 800adb0:	d403      	bmi.n	800adba <__lo0bits+0x4e>
 800adb2:	085b      	lsrs	r3, r3, #1
 800adb4:	f100 0001 	add.w	r0, r0, #1
 800adb8:	d003      	beq.n	800adc2 <__lo0bits+0x56>
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	4770      	bx	lr
 800adbe:	2000      	movs	r0, #0
 800adc0:	4770      	bx	lr
 800adc2:	2020      	movs	r0, #32
 800adc4:	4770      	bx	lr
	...

0800adc8 <__i2b>:
 800adc8:	b510      	push	{r4, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	2101      	movs	r1, #1
 800adce:	f7ff febb 	bl	800ab48 <_Balloc>
 800add2:	4602      	mov	r2, r0
 800add4:	b928      	cbnz	r0, 800ade2 <__i2b+0x1a>
 800add6:	f240 1145 	movw	r1, #325	; 0x145
 800adda:	4b04      	ldr	r3, [pc, #16]	; (800adec <__i2b+0x24>)
 800addc:	4804      	ldr	r0, [pc, #16]	; (800adf0 <__i2b+0x28>)
 800adde:	f7fe fc71 	bl	80096c4 <__assert_func>
 800ade2:	2301      	movs	r3, #1
 800ade4:	6144      	str	r4, [r0, #20]
 800ade6:	6103      	str	r3, [r0, #16]
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	bf00      	nop
 800adec:	0800c00f 	.word	0x0800c00f
 800adf0:	0800c080 	.word	0x0800c080

0800adf4 <__multiply>:
 800adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	4691      	mov	r9, r2
 800adfa:	690a      	ldr	r2, [r1, #16]
 800adfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae00:	460c      	mov	r4, r1
 800ae02:	429a      	cmp	r2, r3
 800ae04:	bfbe      	ittt	lt
 800ae06:	460b      	movlt	r3, r1
 800ae08:	464c      	movlt	r4, r9
 800ae0a:	4699      	movlt	r9, r3
 800ae0c:	6927      	ldr	r7, [r4, #16]
 800ae0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	6861      	ldr	r1, [r4, #4]
 800ae16:	eb07 060a 	add.w	r6, r7, sl
 800ae1a:	42b3      	cmp	r3, r6
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	bfb8      	it	lt
 800ae20:	3101      	addlt	r1, #1
 800ae22:	f7ff fe91 	bl	800ab48 <_Balloc>
 800ae26:	b930      	cbnz	r0, 800ae36 <__multiply+0x42>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae2e:	4b43      	ldr	r3, [pc, #268]	; (800af3c <__multiply+0x148>)
 800ae30:	4843      	ldr	r0, [pc, #268]	; (800af40 <__multiply+0x14c>)
 800ae32:	f7fe fc47 	bl	80096c4 <__assert_func>
 800ae36:	f100 0514 	add.w	r5, r0, #20
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae42:	4543      	cmp	r3, r8
 800ae44:	d321      	bcc.n	800ae8a <__multiply+0x96>
 800ae46:	f104 0314 	add.w	r3, r4, #20
 800ae4a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae4e:	f109 0314 	add.w	r3, r9, #20
 800ae52:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae56:	9202      	str	r2, [sp, #8]
 800ae58:	1b3a      	subs	r2, r7, r4
 800ae5a:	3a15      	subs	r2, #21
 800ae5c:	f022 0203 	bic.w	r2, r2, #3
 800ae60:	3204      	adds	r2, #4
 800ae62:	f104 0115 	add.w	r1, r4, #21
 800ae66:	428f      	cmp	r7, r1
 800ae68:	bf38      	it	cc
 800ae6a:	2204      	movcc	r2, #4
 800ae6c:	9201      	str	r2, [sp, #4]
 800ae6e:	9a02      	ldr	r2, [sp, #8]
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d80c      	bhi.n	800ae90 <__multiply+0x9c>
 800ae76:	2e00      	cmp	r6, #0
 800ae78:	dd03      	ble.n	800ae82 <__multiply+0x8e>
 800ae7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d05a      	beq.n	800af38 <__multiply+0x144>
 800ae82:	6106      	str	r6, [r0, #16]
 800ae84:	b005      	add	sp, #20
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	f843 2b04 	str.w	r2, [r3], #4
 800ae8e:	e7d8      	b.n	800ae42 <__multiply+0x4e>
 800ae90:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae94:	f1ba 0f00 	cmp.w	sl, #0
 800ae98:	d023      	beq.n	800aee2 <__multiply+0xee>
 800ae9a:	46a9      	mov	r9, r5
 800ae9c:	f04f 0c00 	mov.w	ip, #0
 800aea0:	f104 0e14 	add.w	lr, r4, #20
 800aea4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aea8:	f8d9 1000 	ldr.w	r1, [r9]
 800aeac:	fa1f fb82 	uxth.w	fp, r2
 800aeb0:	b289      	uxth	r1, r1
 800aeb2:	fb0a 110b 	mla	r1, sl, fp, r1
 800aeb6:	4461      	add	r1, ip
 800aeb8:	f8d9 c000 	ldr.w	ip, [r9]
 800aebc:	0c12      	lsrs	r2, r2, #16
 800aebe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aec2:	fb0a c202 	mla	r2, sl, r2, ip
 800aec6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aeca:	b289      	uxth	r1, r1
 800aecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aed0:	4577      	cmp	r7, lr
 800aed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aed6:	f849 1b04 	str.w	r1, [r9], #4
 800aeda:	d8e3      	bhi.n	800aea4 <__multiply+0xb0>
 800aedc:	9a01      	ldr	r2, [sp, #4]
 800aede:	f845 c002 	str.w	ip, [r5, r2]
 800aee2:	9a03      	ldr	r2, [sp, #12]
 800aee4:	3304      	adds	r3, #4
 800aee6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeea:	f1b9 0f00 	cmp.w	r9, #0
 800aeee:	d021      	beq.n	800af34 <__multiply+0x140>
 800aef0:	46ae      	mov	lr, r5
 800aef2:	f04f 0a00 	mov.w	sl, #0
 800aef6:	6829      	ldr	r1, [r5, #0]
 800aef8:	f104 0c14 	add.w	ip, r4, #20
 800aefc:	f8bc b000 	ldrh.w	fp, [ip]
 800af00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af04:	b289      	uxth	r1, r1
 800af06:	fb09 220b 	mla	r2, r9, fp, r2
 800af0a:	4452      	add	r2, sl
 800af0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af10:	f84e 1b04 	str.w	r1, [lr], #4
 800af14:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af1c:	f8be 1000 	ldrh.w	r1, [lr]
 800af20:	4567      	cmp	r7, ip
 800af22:	fb09 110a 	mla	r1, r9, sl, r1
 800af26:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af2a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af2e:	d8e5      	bhi.n	800aefc <__multiply+0x108>
 800af30:	9a01      	ldr	r2, [sp, #4]
 800af32:	50a9      	str	r1, [r5, r2]
 800af34:	3504      	adds	r5, #4
 800af36:	e79a      	b.n	800ae6e <__multiply+0x7a>
 800af38:	3e01      	subs	r6, #1
 800af3a:	e79c      	b.n	800ae76 <__multiply+0x82>
 800af3c:	0800c00f 	.word	0x0800c00f
 800af40:	0800c080 	.word	0x0800c080

0800af44 <__pow5mult>:
 800af44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af48:	4615      	mov	r5, r2
 800af4a:	f012 0203 	ands.w	r2, r2, #3
 800af4e:	4606      	mov	r6, r0
 800af50:	460f      	mov	r7, r1
 800af52:	d007      	beq.n	800af64 <__pow5mult+0x20>
 800af54:	4c25      	ldr	r4, [pc, #148]	; (800afec <__pow5mult+0xa8>)
 800af56:	3a01      	subs	r2, #1
 800af58:	2300      	movs	r3, #0
 800af5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af5e:	f7ff fe55 	bl	800ac0c <__multadd>
 800af62:	4607      	mov	r7, r0
 800af64:	10ad      	asrs	r5, r5, #2
 800af66:	d03d      	beq.n	800afe4 <__pow5mult+0xa0>
 800af68:	69f4      	ldr	r4, [r6, #28]
 800af6a:	b97c      	cbnz	r4, 800af8c <__pow5mult+0x48>
 800af6c:	2010      	movs	r0, #16
 800af6e:	f7fc fb7f 	bl	8007670 <malloc>
 800af72:	4602      	mov	r2, r0
 800af74:	61f0      	str	r0, [r6, #28]
 800af76:	b928      	cbnz	r0, 800af84 <__pow5mult+0x40>
 800af78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af7c:	4b1c      	ldr	r3, [pc, #112]	; (800aff0 <__pow5mult+0xac>)
 800af7e:	481d      	ldr	r0, [pc, #116]	; (800aff4 <__pow5mult+0xb0>)
 800af80:	f7fe fba0 	bl	80096c4 <__assert_func>
 800af84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af88:	6004      	str	r4, [r0, #0]
 800af8a:	60c4      	str	r4, [r0, #12]
 800af8c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af94:	b94c      	cbnz	r4, 800afaa <__pow5mult+0x66>
 800af96:	f240 2171 	movw	r1, #625	; 0x271
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7ff ff14 	bl	800adc8 <__i2b>
 800afa0:	2300      	movs	r3, #0
 800afa2:	4604      	mov	r4, r0
 800afa4:	f8c8 0008 	str.w	r0, [r8, #8]
 800afa8:	6003      	str	r3, [r0, #0]
 800afaa:	f04f 0900 	mov.w	r9, #0
 800afae:	07eb      	lsls	r3, r5, #31
 800afb0:	d50a      	bpl.n	800afc8 <__pow5mult+0x84>
 800afb2:	4639      	mov	r1, r7
 800afb4:	4622      	mov	r2, r4
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ff1c 	bl	800adf4 <__multiply>
 800afbc:	4680      	mov	r8, r0
 800afbe:	4639      	mov	r1, r7
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7ff fe01 	bl	800abc8 <_Bfree>
 800afc6:	4647      	mov	r7, r8
 800afc8:	106d      	asrs	r5, r5, #1
 800afca:	d00b      	beq.n	800afe4 <__pow5mult+0xa0>
 800afcc:	6820      	ldr	r0, [r4, #0]
 800afce:	b938      	cbnz	r0, 800afe0 <__pow5mult+0x9c>
 800afd0:	4622      	mov	r2, r4
 800afd2:	4621      	mov	r1, r4
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7ff ff0d 	bl	800adf4 <__multiply>
 800afda:	6020      	str	r0, [r4, #0]
 800afdc:	f8c0 9000 	str.w	r9, [r0]
 800afe0:	4604      	mov	r4, r0
 800afe2:	e7e4      	b.n	800afae <__pow5mult+0x6a>
 800afe4:	4638      	mov	r0, r7
 800afe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afea:	bf00      	nop
 800afec:	0800c1d0 	.word	0x0800c1d0
 800aff0:	0800bef5 	.word	0x0800bef5
 800aff4:	0800c080 	.word	0x0800c080

0800aff8 <__lshift>:
 800aff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	460c      	mov	r4, r1
 800affe:	4607      	mov	r7, r0
 800b000:	4691      	mov	r9, r2
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	6849      	ldr	r1, [r1, #4]
 800b006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b010:	f108 0601 	add.w	r6, r8, #1
 800b014:	42b3      	cmp	r3, r6
 800b016:	db0b      	blt.n	800b030 <__lshift+0x38>
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff fd95 	bl	800ab48 <_Balloc>
 800b01e:	4605      	mov	r5, r0
 800b020:	b948      	cbnz	r0, 800b036 <__lshift+0x3e>
 800b022:	4602      	mov	r2, r0
 800b024:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b028:	4b27      	ldr	r3, [pc, #156]	; (800b0c8 <__lshift+0xd0>)
 800b02a:	4828      	ldr	r0, [pc, #160]	; (800b0cc <__lshift+0xd4>)
 800b02c:	f7fe fb4a 	bl	80096c4 <__assert_func>
 800b030:	3101      	adds	r1, #1
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	e7ee      	b.n	800b014 <__lshift+0x1c>
 800b036:	2300      	movs	r3, #0
 800b038:	f100 0114 	add.w	r1, r0, #20
 800b03c:	f100 0210 	add.w	r2, r0, #16
 800b040:	4618      	mov	r0, r3
 800b042:	4553      	cmp	r3, sl
 800b044:	db33      	blt.n	800b0ae <__lshift+0xb6>
 800b046:	6920      	ldr	r0, [r4, #16]
 800b048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b04c:	f104 0314 	add.w	r3, r4, #20
 800b050:	f019 091f 	ands.w	r9, r9, #31
 800b054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b058:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b05c:	d02b      	beq.n	800b0b6 <__lshift+0xbe>
 800b05e:	468a      	mov	sl, r1
 800b060:	2200      	movs	r2, #0
 800b062:	f1c9 0e20 	rsb	lr, r9, #32
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	fa00 f009 	lsl.w	r0, r0, r9
 800b06c:	4310      	orrs	r0, r2
 800b06e:	f84a 0b04 	str.w	r0, [sl], #4
 800b072:	f853 2b04 	ldr.w	r2, [r3], #4
 800b076:	459c      	cmp	ip, r3
 800b078:	fa22 f20e 	lsr.w	r2, r2, lr
 800b07c:	d8f3      	bhi.n	800b066 <__lshift+0x6e>
 800b07e:	ebac 0304 	sub.w	r3, ip, r4
 800b082:	3b15      	subs	r3, #21
 800b084:	f023 0303 	bic.w	r3, r3, #3
 800b088:	3304      	adds	r3, #4
 800b08a:	f104 0015 	add.w	r0, r4, #21
 800b08e:	4584      	cmp	ip, r0
 800b090:	bf38      	it	cc
 800b092:	2304      	movcc	r3, #4
 800b094:	50ca      	str	r2, [r1, r3]
 800b096:	b10a      	cbz	r2, 800b09c <__lshift+0xa4>
 800b098:	f108 0602 	add.w	r6, r8, #2
 800b09c:	3e01      	subs	r6, #1
 800b09e:	4638      	mov	r0, r7
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	612e      	str	r6, [r5, #16]
 800b0a4:	f7ff fd90 	bl	800abc8 <_Bfree>
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	e7c5      	b.n	800b042 <__lshift+0x4a>
 800b0b6:	3904      	subs	r1, #4
 800b0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0bc:	459c      	cmp	ip, r3
 800b0be:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0c2:	d8f9      	bhi.n	800b0b8 <__lshift+0xc0>
 800b0c4:	e7ea      	b.n	800b09c <__lshift+0xa4>
 800b0c6:	bf00      	nop
 800b0c8:	0800c00f 	.word	0x0800c00f
 800b0cc:	0800c080 	.word	0x0800c080

0800b0d0 <__mcmp>:
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	690a      	ldr	r2, [r1, #16]
 800b0d4:	6900      	ldr	r0, [r0, #16]
 800b0d6:	b530      	push	{r4, r5, lr}
 800b0d8:	1a80      	subs	r0, r0, r2
 800b0da:	d10d      	bne.n	800b0f8 <__mcmp+0x28>
 800b0dc:	3314      	adds	r3, #20
 800b0de:	3114      	adds	r1, #20
 800b0e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0f0:	4295      	cmp	r5, r2
 800b0f2:	d002      	beq.n	800b0fa <__mcmp+0x2a>
 800b0f4:	d304      	bcc.n	800b100 <__mcmp+0x30>
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	bd30      	pop	{r4, r5, pc}
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	d3f4      	bcc.n	800b0e8 <__mcmp+0x18>
 800b0fe:	e7fb      	b.n	800b0f8 <__mcmp+0x28>
 800b100:	f04f 30ff 	mov.w	r0, #4294967295
 800b104:	e7f8      	b.n	800b0f8 <__mcmp+0x28>
	...

0800b108 <__mdiff>:
 800b108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	460d      	mov	r5, r1
 800b10e:	4607      	mov	r7, r0
 800b110:	4611      	mov	r1, r2
 800b112:	4628      	mov	r0, r5
 800b114:	4614      	mov	r4, r2
 800b116:	f7ff ffdb 	bl	800b0d0 <__mcmp>
 800b11a:	1e06      	subs	r6, r0, #0
 800b11c:	d111      	bne.n	800b142 <__mdiff+0x3a>
 800b11e:	4631      	mov	r1, r6
 800b120:	4638      	mov	r0, r7
 800b122:	f7ff fd11 	bl	800ab48 <_Balloc>
 800b126:	4602      	mov	r2, r0
 800b128:	b928      	cbnz	r0, 800b136 <__mdiff+0x2e>
 800b12a:	f240 2137 	movw	r1, #567	; 0x237
 800b12e:	4b3a      	ldr	r3, [pc, #232]	; (800b218 <__mdiff+0x110>)
 800b130:	483a      	ldr	r0, [pc, #232]	; (800b21c <__mdiff+0x114>)
 800b132:	f7fe fac7 	bl	80096c4 <__assert_func>
 800b136:	2301      	movs	r3, #1
 800b138:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b13c:	4610      	mov	r0, r2
 800b13e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b142:	bfa4      	itt	ge
 800b144:	4623      	movge	r3, r4
 800b146:	462c      	movge	r4, r5
 800b148:	4638      	mov	r0, r7
 800b14a:	6861      	ldr	r1, [r4, #4]
 800b14c:	bfa6      	itte	ge
 800b14e:	461d      	movge	r5, r3
 800b150:	2600      	movge	r6, #0
 800b152:	2601      	movlt	r6, #1
 800b154:	f7ff fcf8 	bl	800ab48 <_Balloc>
 800b158:	4602      	mov	r2, r0
 800b15a:	b918      	cbnz	r0, 800b164 <__mdiff+0x5c>
 800b15c:	f240 2145 	movw	r1, #581	; 0x245
 800b160:	4b2d      	ldr	r3, [pc, #180]	; (800b218 <__mdiff+0x110>)
 800b162:	e7e5      	b.n	800b130 <__mdiff+0x28>
 800b164:	f102 0814 	add.w	r8, r2, #20
 800b168:	46c2      	mov	sl, r8
 800b16a:	f04f 0c00 	mov.w	ip, #0
 800b16e:	6927      	ldr	r7, [r4, #16]
 800b170:	60c6      	str	r6, [r0, #12]
 800b172:	692e      	ldr	r6, [r5, #16]
 800b174:	f104 0014 	add.w	r0, r4, #20
 800b178:	f105 0914 	add.w	r9, r5, #20
 800b17c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b180:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b184:	3410      	adds	r4, #16
 800b186:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b18a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b18e:	fa1f f18b 	uxth.w	r1, fp
 800b192:	4461      	add	r1, ip
 800b194:	fa1f fc83 	uxth.w	ip, r3
 800b198:	0c1b      	lsrs	r3, r3, #16
 800b19a:	eba1 010c 	sub.w	r1, r1, ip
 800b19e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1a6:	b289      	uxth	r1, r1
 800b1a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b1ac:	454e      	cmp	r6, r9
 800b1ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b1b2:	f84a 1b04 	str.w	r1, [sl], #4
 800b1b6:	d8e6      	bhi.n	800b186 <__mdiff+0x7e>
 800b1b8:	1b73      	subs	r3, r6, r5
 800b1ba:	3b15      	subs	r3, #21
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	3515      	adds	r5, #21
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	42ae      	cmp	r6, r5
 800b1c6:	bf38      	it	cc
 800b1c8:	2304      	movcc	r3, #4
 800b1ca:	4418      	add	r0, r3
 800b1cc:	4443      	add	r3, r8
 800b1ce:	461e      	mov	r6, r3
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	4575      	cmp	r5, lr
 800b1d4:	d30e      	bcc.n	800b1f4 <__mdiff+0xec>
 800b1d6:	f10e 0103 	add.w	r1, lr, #3
 800b1da:	1a09      	subs	r1, r1, r0
 800b1dc:	f021 0103 	bic.w	r1, r1, #3
 800b1e0:	3803      	subs	r0, #3
 800b1e2:	4586      	cmp	lr, r0
 800b1e4:	bf38      	it	cc
 800b1e6:	2100      	movcc	r1, #0
 800b1e8:	440b      	add	r3, r1
 800b1ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1ee:	b189      	cbz	r1, 800b214 <__mdiff+0x10c>
 800b1f0:	6117      	str	r7, [r2, #16]
 800b1f2:	e7a3      	b.n	800b13c <__mdiff+0x34>
 800b1f4:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1f8:	fa1f f188 	uxth.w	r1, r8
 800b1fc:	4461      	add	r1, ip
 800b1fe:	140c      	asrs	r4, r1, #16
 800b200:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b204:	b289      	uxth	r1, r1
 800b206:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b20a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b20e:	f846 1b04 	str.w	r1, [r6], #4
 800b212:	e7de      	b.n	800b1d2 <__mdiff+0xca>
 800b214:	3f01      	subs	r7, #1
 800b216:	e7e8      	b.n	800b1ea <__mdiff+0xe2>
 800b218:	0800c00f 	.word	0x0800c00f
 800b21c:	0800c080 	.word	0x0800c080

0800b220 <__ulp>:
 800b220:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <__ulp+0x3c>)
 800b222:	400b      	ands	r3, r1
 800b224:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dc08      	bgt.n	800b23e <__ulp+0x1e>
 800b22c:	425b      	negs	r3, r3
 800b22e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b232:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b236:	da04      	bge.n	800b242 <__ulp+0x22>
 800b238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b23c:	4113      	asrs	r3, r2
 800b23e:	2200      	movs	r2, #0
 800b240:	e008      	b.n	800b254 <__ulp+0x34>
 800b242:	f1a2 0314 	sub.w	r3, r2, #20
 800b246:	2b1e      	cmp	r3, #30
 800b248:	bfd6      	itet	le
 800b24a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b24e:	2201      	movgt	r2, #1
 800b250:	40da      	lsrle	r2, r3
 800b252:	2300      	movs	r3, #0
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	7ff00000 	.word	0x7ff00000

0800b260 <__b2d>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	6905      	ldr	r5, [r0, #16]
 800b264:	f100 0714 	add.w	r7, r0, #20
 800b268:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b26c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b270:	1f2e      	subs	r6, r5, #4
 800b272:	4620      	mov	r0, r4
 800b274:	f7ff fd5a 	bl	800ad2c <__hi0bits>
 800b278:	f1c0 0220 	rsb	r2, r0, #32
 800b27c:	280a      	cmp	r0, #10
 800b27e:	4603      	mov	r3, r0
 800b280:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b2ec <__b2d+0x8c>
 800b284:	600a      	str	r2, [r1, #0]
 800b286:	dc12      	bgt.n	800b2ae <__b2d+0x4e>
 800b288:	f1c0 0e0b 	rsb	lr, r0, #11
 800b28c:	fa24 f20e 	lsr.w	r2, r4, lr
 800b290:	42b7      	cmp	r7, r6
 800b292:	ea42 010c 	orr.w	r1, r2, ip
 800b296:	bf2c      	ite	cs
 800b298:	2200      	movcs	r2, #0
 800b29a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b29e:	3315      	adds	r3, #21
 800b2a0:	fa04 f303 	lsl.w	r3, r4, r3
 800b2a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ae:	42b7      	cmp	r7, r6
 800b2b0:	bf2e      	itee	cs
 800b2b2:	2200      	movcs	r2, #0
 800b2b4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b2b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2bc:	3b0b      	subs	r3, #11
 800b2be:	d012      	beq.n	800b2e6 <__b2d+0x86>
 800b2c0:	f1c3 0520 	rsb	r5, r3, #32
 800b2c4:	fa22 f105 	lsr.w	r1, r2, r5
 800b2c8:	409c      	lsls	r4, r3
 800b2ca:	430c      	orrs	r4, r1
 800b2cc:	42be      	cmp	r6, r7
 800b2ce:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b2d2:	bf94      	ite	ls
 800b2d4:	2400      	movls	r4, #0
 800b2d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2da:	409a      	lsls	r2, r3
 800b2dc:	40ec      	lsrs	r4, r5
 800b2de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b2e2:	4322      	orrs	r2, r4
 800b2e4:	e7e1      	b.n	800b2aa <__b2d+0x4a>
 800b2e6:	ea44 010c 	orr.w	r1, r4, ip
 800b2ea:	e7de      	b.n	800b2aa <__b2d+0x4a>
 800b2ec:	3ff00000 	.word	0x3ff00000

0800b2f0 <__d2b>:
 800b2f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	4617      	mov	r7, r2
 800b2f6:	461c      	mov	r4, r3
 800b2f8:	9e08      	ldr	r6, [sp, #32]
 800b2fa:	f7ff fc25 	bl	800ab48 <_Balloc>
 800b2fe:	4605      	mov	r5, r0
 800b300:	b930      	cbnz	r0, 800b310 <__d2b+0x20>
 800b302:	4602      	mov	r2, r0
 800b304:	f240 310f 	movw	r1, #783	; 0x30f
 800b308:	4b22      	ldr	r3, [pc, #136]	; (800b394 <__d2b+0xa4>)
 800b30a:	4823      	ldr	r0, [pc, #140]	; (800b398 <__d2b+0xa8>)
 800b30c:	f7fe f9da 	bl	80096c4 <__assert_func>
 800b310:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b314:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b318:	bb24      	cbnz	r4, 800b364 <__d2b+0x74>
 800b31a:	2f00      	cmp	r7, #0
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	d026      	beq.n	800b36e <__d2b+0x7e>
 800b320:	4668      	mov	r0, sp
 800b322:	9700      	str	r7, [sp, #0]
 800b324:	f7ff fd22 	bl	800ad6c <__lo0bits>
 800b328:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b32c:	b1e8      	cbz	r0, 800b36a <__d2b+0x7a>
 800b32e:	f1c0 0320 	rsb	r3, r0, #32
 800b332:	fa02 f303 	lsl.w	r3, r2, r3
 800b336:	430b      	orrs	r3, r1
 800b338:	40c2      	lsrs	r2, r0
 800b33a:	616b      	str	r3, [r5, #20]
 800b33c:	9201      	str	r2, [sp, #4]
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	bf14      	ite	ne
 800b344:	2102      	movne	r1, #2
 800b346:	2101      	moveq	r1, #1
 800b348:	61ab      	str	r3, [r5, #24]
 800b34a:	6129      	str	r1, [r5, #16]
 800b34c:	b1bc      	cbz	r4, 800b37e <__d2b+0x8e>
 800b34e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b352:	4404      	add	r4, r0
 800b354:	6034      	str	r4, [r6, #0]
 800b356:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35c:	6018      	str	r0, [r3, #0]
 800b35e:	4628      	mov	r0, r5
 800b360:	b003      	add	sp, #12
 800b362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b368:	e7d7      	b.n	800b31a <__d2b+0x2a>
 800b36a:	6169      	str	r1, [r5, #20]
 800b36c:	e7e7      	b.n	800b33e <__d2b+0x4e>
 800b36e:	a801      	add	r0, sp, #4
 800b370:	f7ff fcfc 	bl	800ad6c <__lo0bits>
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	2101      	movs	r1, #1
 800b378:	616b      	str	r3, [r5, #20]
 800b37a:	3020      	adds	r0, #32
 800b37c:	e7e5      	b.n	800b34a <__d2b+0x5a>
 800b37e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b382:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b386:	6030      	str	r0, [r6, #0]
 800b388:	6918      	ldr	r0, [r3, #16]
 800b38a:	f7ff fccf 	bl	800ad2c <__hi0bits>
 800b38e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b392:	e7e2      	b.n	800b35a <__d2b+0x6a>
 800b394:	0800c00f 	.word	0x0800c00f
 800b398:	0800c080 	.word	0x0800c080

0800b39c <__ratio>:
 800b39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	4688      	mov	r8, r1
 800b3a2:	4669      	mov	r1, sp
 800b3a4:	4681      	mov	r9, r0
 800b3a6:	f7ff ff5b 	bl	800b260 <__b2d>
 800b3aa:	460f      	mov	r7, r1
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	a901      	add	r1, sp, #4
 800b3b4:	f7ff ff54 	bl	800b260 <__b2d>
 800b3b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3c0:	468b      	mov	fp, r1
 800b3c2:	eba3 0c02 	sub.w	ip, r3, r2
 800b3c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfd5      	itete	le
 800b3d4:	460a      	movle	r2, r1
 800b3d6:	462a      	movgt	r2, r5
 800b3d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3dc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3e0:	bfd8      	it	le
 800b3e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7f5 f99d 	bl	800072c <__aeabi_ddiv>
 800b3f2:	b003      	add	sp, #12
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3f8 <__copybits>:
 800b3f8:	3901      	subs	r1, #1
 800b3fa:	b570      	push	{r4, r5, r6, lr}
 800b3fc:	1149      	asrs	r1, r1, #5
 800b3fe:	6914      	ldr	r4, [r2, #16]
 800b400:	3101      	adds	r1, #1
 800b402:	f102 0314 	add.w	r3, r2, #20
 800b406:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b40a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b40e:	1f05      	subs	r5, r0, #4
 800b410:	42a3      	cmp	r3, r4
 800b412:	d30c      	bcc.n	800b42e <__copybits+0x36>
 800b414:	1aa3      	subs	r3, r4, r2
 800b416:	3b11      	subs	r3, #17
 800b418:	f023 0303 	bic.w	r3, r3, #3
 800b41c:	3211      	adds	r2, #17
 800b41e:	42a2      	cmp	r2, r4
 800b420:	bf88      	it	hi
 800b422:	2300      	movhi	r3, #0
 800b424:	4418      	add	r0, r3
 800b426:	2300      	movs	r3, #0
 800b428:	4288      	cmp	r0, r1
 800b42a:	d305      	bcc.n	800b438 <__copybits+0x40>
 800b42c:	bd70      	pop	{r4, r5, r6, pc}
 800b42e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b432:	f845 6f04 	str.w	r6, [r5, #4]!
 800b436:	e7eb      	b.n	800b410 <__copybits+0x18>
 800b438:	f840 3b04 	str.w	r3, [r0], #4
 800b43c:	e7f4      	b.n	800b428 <__copybits+0x30>

0800b43e <__any_on>:
 800b43e:	f100 0214 	add.w	r2, r0, #20
 800b442:	6900      	ldr	r0, [r0, #16]
 800b444:	114b      	asrs	r3, r1, #5
 800b446:	4298      	cmp	r0, r3
 800b448:	b510      	push	{r4, lr}
 800b44a:	db11      	blt.n	800b470 <__any_on+0x32>
 800b44c:	dd0a      	ble.n	800b464 <__any_on+0x26>
 800b44e:	f011 011f 	ands.w	r1, r1, #31
 800b452:	d007      	beq.n	800b464 <__any_on+0x26>
 800b454:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b458:	fa24 f001 	lsr.w	r0, r4, r1
 800b45c:	fa00 f101 	lsl.w	r1, r0, r1
 800b460:	428c      	cmp	r4, r1
 800b462:	d10b      	bne.n	800b47c <__any_on+0x3e>
 800b464:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b468:	4293      	cmp	r3, r2
 800b46a:	d803      	bhi.n	800b474 <__any_on+0x36>
 800b46c:	2000      	movs	r0, #0
 800b46e:	bd10      	pop	{r4, pc}
 800b470:	4603      	mov	r3, r0
 800b472:	e7f7      	b.n	800b464 <__any_on+0x26>
 800b474:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b478:	2900      	cmp	r1, #0
 800b47a:	d0f5      	beq.n	800b468 <__any_on+0x2a>
 800b47c:	2001      	movs	r0, #1
 800b47e:	e7f6      	b.n	800b46e <__any_on+0x30>

0800b480 <__ascii_wctomb>:
 800b480:	4603      	mov	r3, r0
 800b482:	4608      	mov	r0, r1
 800b484:	b141      	cbz	r1, 800b498 <__ascii_wctomb+0x18>
 800b486:	2aff      	cmp	r2, #255	; 0xff
 800b488:	d904      	bls.n	800b494 <__ascii_wctomb+0x14>
 800b48a:	228a      	movs	r2, #138	; 0x8a
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	4770      	bx	lr
 800b494:	2001      	movs	r0, #1
 800b496:	700a      	strb	r2, [r1, #0]
 800b498:	4770      	bx	lr

0800b49a <__sfputc_r>:
 800b49a:	6893      	ldr	r3, [r2, #8]
 800b49c:	b410      	push	{r4}
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	6093      	str	r3, [r2, #8]
 800b4a4:	da07      	bge.n	800b4b6 <__sfputc_r+0x1c>
 800b4a6:	6994      	ldr	r4, [r2, #24]
 800b4a8:	42a3      	cmp	r3, r4
 800b4aa:	db01      	blt.n	800b4b0 <__sfputc_r+0x16>
 800b4ac:	290a      	cmp	r1, #10
 800b4ae:	d102      	bne.n	800b4b6 <__sfputc_r+0x1c>
 800b4b0:	bc10      	pop	{r4}
 800b4b2:	f7fd bf1c 	b.w	80092ee <__swbuf_r>
 800b4b6:	6813      	ldr	r3, [r2, #0]
 800b4b8:	1c58      	adds	r0, r3, #1
 800b4ba:	6010      	str	r0, [r2, #0]
 800b4bc:	7019      	strb	r1, [r3, #0]
 800b4be:	4608      	mov	r0, r1
 800b4c0:	bc10      	pop	{r4}
 800b4c2:	4770      	bx	lr

0800b4c4 <__sfputs_r>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	18d5      	adds	r5, r2, r3
 800b4ce:	42ac      	cmp	r4, r5
 800b4d0:	d101      	bne.n	800b4d6 <__sfputs_r+0x12>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e007      	b.n	800b4e6 <__sfputs_r+0x22>
 800b4d6:	463a      	mov	r2, r7
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4de:	f7ff ffdc 	bl	800b49a <__sfputc_r>
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	d1f3      	bne.n	800b4ce <__sfputs_r+0xa>
 800b4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4e8 <_vfiprintf_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	4698      	mov	r8, r3
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	b09d      	sub	sp, #116	; 0x74
 800b4f6:	b118      	cbz	r0, 800b500 <_vfiprintf_r+0x18>
 800b4f8:	6a03      	ldr	r3, [r0, #32]
 800b4fa:	b90b      	cbnz	r3, 800b500 <_vfiprintf_r+0x18>
 800b4fc:	f7fd fd62 	bl	8008fc4 <__sinit>
 800b500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b502:	07d9      	lsls	r1, r3, #31
 800b504:	d405      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	059a      	lsls	r2, r3, #22
 800b50a:	d402      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b50e:	f7fe f8a8 	bl	8009662 <__retarget_lock_acquire_recursive>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	071b      	lsls	r3, r3, #28
 800b516:	d501      	bpl.n	800b51c <_vfiprintf_r+0x34>
 800b518:	692b      	ldr	r3, [r5, #16]
 800b51a:	b99b      	cbnz	r3, 800b544 <_vfiprintf_r+0x5c>
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f7fd ff22 	bl	8009368 <__swsetup_r>
 800b524:	b170      	cbz	r0, 800b544 <_vfiprintf_r+0x5c>
 800b526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b528:	07dc      	lsls	r4, r3, #31
 800b52a:	d504      	bpl.n	800b536 <_vfiprintf_r+0x4e>
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	b01d      	add	sp, #116	; 0x74
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	0598      	lsls	r0, r3, #22
 800b53a:	d4f7      	bmi.n	800b52c <_vfiprintf_r+0x44>
 800b53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53e:	f7fe f891 	bl	8009664 <__retarget_lock_release_recursive>
 800b542:	e7f3      	b.n	800b52c <_vfiprintf_r+0x44>
 800b544:	2300      	movs	r3, #0
 800b546:	9309      	str	r3, [sp, #36]	; 0x24
 800b548:	2320      	movs	r3, #32
 800b54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54e:	2330      	movs	r3, #48	; 0x30
 800b550:	f04f 0901 	mov.w	r9, #1
 800b554:	f8cd 800c 	str.w	r8, [sp, #12]
 800b558:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b708 <_vfiprintf_r+0x220>
 800b55c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b560:	4623      	mov	r3, r4
 800b562:	469a      	mov	sl, r3
 800b564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b568:	b10a      	cbz	r2, 800b56e <_vfiprintf_r+0x86>
 800b56a:	2a25      	cmp	r2, #37	; 0x25
 800b56c:	d1f9      	bne.n	800b562 <_vfiprintf_r+0x7a>
 800b56e:	ebba 0b04 	subs.w	fp, sl, r4
 800b572:	d00b      	beq.n	800b58c <_vfiprintf_r+0xa4>
 800b574:	465b      	mov	r3, fp
 800b576:	4622      	mov	r2, r4
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffa2 	bl	800b4c4 <__sfputs_r>
 800b580:	3001      	adds	r0, #1
 800b582:	f000 80a9 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	445a      	add	r2, fp
 800b58a:	9209      	str	r2, [sp, #36]	; 0x24
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80a1 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b596:	2300      	movs	r3, #0
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a0:	f10a 0a01 	add.w	sl, sl, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	2205      	movs	r2, #5
 800b5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b6:	4854      	ldr	r0, [pc, #336]	; (800b708 <_vfiprintf_r+0x220>)
 800b5b8:	f7fe f85d 	bl	8009676 <memchr>
 800b5bc:	9a04      	ldr	r2, [sp, #16]
 800b5be:	b9d8      	cbnz	r0, 800b5f8 <_vfiprintf_r+0x110>
 800b5c0:	06d1      	lsls	r1, r2, #27
 800b5c2:	bf44      	itt	mi
 800b5c4:	2320      	movmi	r3, #32
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ca:	0713      	lsls	r3, r2, #28
 800b5cc:	bf44      	itt	mi
 800b5ce:	232b      	movmi	r3, #43	; 0x2b
 800b5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d015      	beq.n	800b608 <_vfiprintf_r+0x120>
 800b5dc:	4654      	mov	r4, sl
 800b5de:	2000      	movs	r0, #0
 800b5e0:	f04f 0c0a 	mov.w	ip, #10
 800b5e4:	9a07      	ldr	r2, [sp, #28]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ec:	3b30      	subs	r3, #48	; 0x30
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d94d      	bls.n	800b68e <_vfiprintf_r+0x1a6>
 800b5f2:	b1b0      	cbz	r0, 800b622 <_vfiprintf_r+0x13a>
 800b5f4:	9207      	str	r2, [sp, #28]
 800b5f6:	e014      	b.n	800b622 <_vfiprintf_r+0x13a>
 800b5f8:	eba0 0308 	sub.w	r3, r0, r8
 800b5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	46a2      	mov	sl, r4
 800b604:	9304      	str	r3, [sp, #16]
 800b606:	e7d2      	b.n	800b5ae <_vfiprintf_r+0xc6>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d19      	adds	r1, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bfbb      	ittet	lt
 800b614:	425b      	neglt	r3, r3
 800b616:	f042 0202 	orrlt.w	r2, r2, #2
 800b61a:	9307      	strge	r3, [sp, #28]
 800b61c:	9307      	strlt	r3, [sp, #28]
 800b61e:	bfb8      	it	lt
 800b620:	9204      	strlt	r2, [sp, #16]
 800b622:	7823      	ldrb	r3, [r4, #0]
 800b624:	2b2e      	cmp	r3, #46	; 0x2e
 800b626:	d10c      	bne.n	800b642 <_vfiprintf_r+0x15a>
 800b628:	7863      	ldrb	r3, [r4, #1]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d134      	bne.n	800b698 <_vfiprintf_r+0x1b0>
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	3402      	adds	r4, #2
 800b632:	1d1a      	adds	r2, r3, #4
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	9203      	str	r2, [sp, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bfb8      	it	lt
 800b63c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b70c <_vfiprintf_r+0x224>
 800b646:	2203      	movs	r2, #3
 800b648:	4650      	mov	r0, sl
 800b64a:	7821      	ldrb	r1, [r4, #0]
 800b64c:	f7fe f813 	bl	8009676 <memchr>
 800b650:	b138      	cbz	r0, 800b662 <_vfiprintf_r+0x17a>
 800b652:	2240      	movs	r2, #64	; 0x40
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	eba0 000a 	sub.w	r0, r0, sl
 800b65a:	4082      	lsls	r2, r0
 800b65c:	4313      	orrs	r3, r2
 800b65e:	3401      	adds	r4, #1
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b666:	2206      	movs	r2, #6
 800b668:	4829      	ldr	r0, [pc, #164]	; (800b710 <_vfiprintf_r+0x228>)
 800b66a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66e:	f7fe f802 	bl	8009676 <memchr>
 800b672:	2800      	cmp	r0, #0
 800b674:	d03f      	beq.n	800b6f6 <_vfiprintf_r+0x20e>
 800b676:	4b27      	ldr	r3, [pc, #156]	; (800b714 <_vfiprintf_r+0x22c>)
 800b678:	bb1b      	cbnz	r3, 800b6c2 <_vfiprintf_r+0x1da>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	3307      	adds	r3, #7
 800b67e:	f023 0307 	bic.w	r3, r3, #7
 800b682:	3308      	adds	r3, #8
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	443b      	add	r3, r7
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	e768      	b.n	800b560 <_vfiprintf_r+0x78>
 800b68e:	460c      	mov	r4, r1
 800b690:	2001      	movs	r0, #1
 800b692:	fb0c 3202 	mla	r2, ip, r2, r3
 800b696:	e7a6      	b.n	800b5e6 <_vfiprintf_r+0xfe>
 800b698:	2300      	movs	r3, #0
 800b69a:	f04f 0c0a 	mov.w	ip, #10
 800b69e:	4619      	mov	r1, r3
 800b6a0:	3401      	adds	r4, #1
 800b6a2:	9305      	str	r3, [sp, #20]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6aa:	3a30      	subs	r2, #48	; 0x30
 800b6ac:	2a09      	cmp	r2, #9
 800b6ae:	d903      	bls.n	800b6b8 <_vfiprintf_r+0x1d0>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0c6      	beq.n	800b642 <_vfiprintf_r+0x15a>
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	e7c4      	b.n	800b642 <_vfiprintf_r+0x15a>
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c0:	e7f0      	b.n	800b6a4 <_vfiprintf_r+0x1bc>
 800b6c2:	ab03      	add	r3, sp, #12
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	4b13      	ldr	r3, [pc, #76]	; (800b718 <_vfiprintf_r+0x230>)
 800b6cc:	a904      	add	r1, sp, #16
 800b6ce:	f7fd f82b 	bl	8008728 <_printf_float>
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	1c78      	adds	r0, r7, #1
 800b6d6:	d1d6      	bne.n	800b686 <_vfiprintf_r+0x19e>
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e6:	f7fd ffbd 	bl	8009664 <__retarget_lock_release_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	065b      	lsls	r3, r3, #25
 800b6ee:	f53f af1d 	bmi.w	800b52c <_vfiprintf_r+0x44>
 800b6f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f4:	e71c      	b.n	800b530 <_vfiprintf_r+0x48>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	4b06      	ldr	r3, [pc, #24]	; (800b718 <_vfiprintf_r+0x230>)
 800b700:	a904      	add	r1, sp, #16
 800b702:	f7fd fab1 	bl	8008c68 <_printf_i>
 800b706:	e7e4      	b.n	800b6d2 <_vfiprintf_r+0x1ea>
 800b708:	0800c1dc 	.word	0x0800c1dc
 800b70c:	0800c1e2 	.word	0x0800c1e2
 800b710:	0800c1e6 	.word	0x0800c1e6
 800b714:	08008729 	.word	0x08008729
 800b718:	0800b4c5 	.word	0x0800b4c5

0800b71c <__sflush_r>:
 800b71c:	898a      	ldrh	r2, [r1, #12]
 800b71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b720:	4605      	mov	r5, r0
 800b722:	0710      	lsls	r0, r2, #28
 800b724:	460c      	mov	r4, r1
 800b726:	d457      	bmi.n	800b7d8 <__sflush_r+0xbc>
 800b728:	684b      	ldr	r3, [r1, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dc04      	bgt.n	800b738 <__sflush_r+0x1c>
 800b72e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc01      	bgt.n	800b738 <__sflush_r+0x1c>
 800b734:	2000      	movs	r0, #0
 800b736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73a:	2e00      	cmp	r6, #0
 800b73c:	d0fa      	beq.n	800b734 <__sflush_r+0x18>
 800b73e:	2300      	movs	r3, #0
 800b740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b744:	682f      	ldr	r7, [r5, #0]
 800b746:	6a21      	ldr	r1, [r4, #32]
 800b748:	602b      	str	r3, [r5, #0]
 800b74a:	d032      	beq.n	800b7b2 <__sflush_r+0x96>
 800b74c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	075a      	lsls	r2, r3, #29
 800b752:	d505      	bpl.n	800b760 <__sflush_r+0x44>
 800b754:	6863      	ldr	r3, [r4, #4]
 800b756:	1ac0      	subs	r0, r0, r3
 800b758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75a:	b10b      	cbz	r3, 800b760 <__sflush_r+0x44>
 800b75c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b75e:	1ac0      	subs	r0, r0, r3
 800b760:	2300      	movs	r3, #0
 800b762:	4602      	mov	r2, r0
 800b764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b766:	4628      	mov	r0, r5
 800b768:	6a21      	ldr	r1, [r4, #32]
 800b76a:	47b0      	blx	r6
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	d106      	bne.n	800b780 <__sflush_r+0x64>
 800b772:	6829      	ldr	r1, [r5, #0]
 800b774:	291d      	cmp	r1, #29
 800b776:	d82b      	bhi.n	800b7d0 <__sflush_r+0xb4>
 800b778:	4a28      	ldr	r2, [pc, #160]	; (800b81c <__sflush_r+0x100>)
 800b77a:	410a      	asrs	r2, r1
 800b77c:	07d6      	lsls	r6, r2, #31
 800b77e:	d427      	bmi.n	800b7d0 <__sflush_r+0xb4>
 800b780:	2200      	movs	r2, #0
 800b782:	6062      	str	r2, [r4, #4]
 800b784:	6922      	ldr	r2, [r4, #16]
 800b786:	04d9      	lsls	r1, r3, #19
 800b788:	6022      	str	r2, [r4, #0]
 800b78a:	d504      	bpl.n	800b796 <__sflush_r+0x7a>
 800b78c:	1c42      	adds	r2, r0, #1
 800b78e:	d101      	bne.n	800b794 <__sflush_r+0x78>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b903      	cbnz	r3, 800b796 <__sflush_r+0x7a>
 800b794:	6560      	str	r0, [r4, #84]	; 0x54
 800b796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b798:	602f      	str	r7, [r5, #0]
 800b79a:	2900      	cmp	r1, #0
 800b79c:	d0ca      	beq.n	800b734 <__sflush_r+0x18>
 800b79e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	d002      	beq.n	800b7ac <__sflush_r+0x90>
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7fe fe1a 	bl	800a3e0 <_free_r>
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b0:	e7c1      	b.n	800b736 <__sflush_r+0x1a>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b0      	blx	r6
 800b7b8:	1c41      	adds	r1, r0, #1
 800b7ba:	d1c8      	bne.n	800b74e <__sflush_r+0x32>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0c5      	beq.n	800b74e <__sflush_r+0x32>
 800b7c2:	2b1d      	cmp	r3, #29
 800b7c4:	d001      	beq.n	800b7ca <__sflush_r+0xae>
 800b7c6:	2b16      	cmp	r3, #22
 800b7c8:	d101      	bne.n	800b7ce <__sflush_r+0xb2>
 800b7ca:	602f      	str	r7, [r5, #0]
 800b7cc:	e7b2      	b.n	800b734 <__sflush_r+0x18>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	e7ae      	b.n	800b736 <__sflush_r+0x1a>
 800b7d8:	690f      	ldr	r7, [r1, #16]
 800b7da:	2f00      	cmp	r7, #0
 800b7dc:	d0aa      	beq.n	800b734 <__sflush_r+0x18>
 800b7de:	0793      	lsls	r3, r2, #30
 800b7e0:	bf18      	it	ne
 800b7e2:	2300      	movne	r3, #0
 800b7e4:	680e      	ldr	r6, [r1, #0]
 800b7e6:	bf08      	it	eq
 800b7e8:	694b      	ldreq	r3, [r1, #20]
 800b7ea:	1bf6      	subs	r6, r6, r7
 800b7ec:	600f      	str	r7, [r1, #0]
 800b7ee:	608b      	str	r3, [r1, #8]
 800b7f0:	2e00      	cmp	r6, #0
 800b7f2:	dd9f      	ble.n	800b734 <__sflush_r+0x18>
 800b7f4:	4633      	mov	r3, r6
 800b7f6:	463a      	mov	r2, r7
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	6a21      	ldr	r1, [r4, #32]
 800b7fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b800:	47e0      	blx	ip
 800b802:	2800      	cmp	r0, #0
 800b804:	dc06      	bgt.n	800b814 <__sflush_r+0xf8>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	e790      	b.n	800b736 <__sflush_r+0x1a>
 800b814:	4407      	add	r7, r0
 800b816:	1a36      	subs	r6, r6, r0
 800b818:	e7ea      	b.n	800b7f0 <__sflush_r+0xd4>
 800b81a:	bf00      	nop
 800b81c:	dfbffffe 	.word	0xdfbffffe

0800b820 <_fflush_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	690b      	ldr	r3, [r1, #16]
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	b913      	cbnz	r3, 800b830 <_fflush_r+0x10>
 800b82a:	2500      	movs	r5, #0
 800b82c:	4628      	mov	r0, r5
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	b118      	cbz	r0, 800b83a <_fflush_r+0x1a>
 800b832:	6a03      	ldr	r3, [r0, #32]
 800b834:	b90b      	cbnz	r3, 800b83a <_fflush_r+0x1a>
 800b836:	f7fd fbc5 	bl	8008fc4 <__sinit>
 800b83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0f3      	beq.n	800b82a <_fflush_r+0xa>
 800b842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b844:	07d0      	lsls	r0, r2, #31
 800b846:	d404      	bmi.n	800b852 <_fflush_r+0x32>
 800b848:	0599      	lsls	r1, r3, #22
 800b84a:	d402      	bmi.n	800b852 <_fflush_r+0x32>
 800b84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b84e:	f7fd ff08 	bl	8009662 <__retarget_lock_acquire_recursive>
 800b852:	4628      	mov	r0, r5
 800b854:	4621      	mov	r1, r4
 800b856:	f7ff ff61 	bl	800b71c <__sflush_r>
 800b85a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b85c:	4605      	mov	r5, r0
 800b85e:	07da      	lsls	r2, r3, #31
 800b860:	d4e4      	bmi.n	800b82c <_fflush_r+0xc>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	059b      	lsls	r3, r3, #22
 800b866:	d4e1      	bmi.n	800b82c <_fflush_r+0xc>
 800b868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b86a:	f7fd fefb 	bl	8009664 <__retarget_lock_release_recursive>
 800b86e:	e7dd      	b.n	800b82c <_fflush_r+0xc>

0800b870 <fiprintf>:
 800b870:	b40e      	push	{r1, r2, r3}
 800b872:	b503      	push	{r0, r1, lr}
 800b874:	4601      	mov	r1, r0
 800b876:	ab03      	add	r3, sp, #12
 800b878:	4805      	ldr	r0, [pc, #20]	; (800b890 <fiprintf+0x20>)
 800b87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	f7ff fe31 	bl	800b4e8 <_vfiprintf_r>
 800b886:	b002      	add	sp, #8
 800b888:	f85d eb04 	ldr.w	lr, [sp], #4
 800b88c:	b003      	add	sp, #12
 800b88e:	4770      	bx	lr
 800b890:	20000208 	.word	0x20000208

0800b894 <__swhatbuf_r>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	460c      	mov	r4, r1
 800b898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89c:	4615      	mov	r5, r2
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	461e      	mov	r6, r3
 800b8a2:	b096      	sub	sp, #88	; 0x58
 800b8a4:	da0c      	bge.n	800b8c0 <__swhatbuf_r+0x2c>
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8ae:	bf0c      	ite	eq
 800b8b0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8b4:	2340      	movne	r3, #64	; 0x40
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	6031      	str	r1, [r6, #0]
 800b8ba:	602b      	str	r3, [r5, #0]
 800b8bc:	b016      	add	sp, #88	; 0x58
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	466a      	mov	r2, sp
 800b8c2:	f000 f849 	bl	800b958 <_fstat_r>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	dbed      	blt.n	800b8a6 <__swhatbuf_r+0x12>
 800b8ca:	9901      	ldr	r1, [sp, #4]
 800b8cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8d4:	4259      	negs	r1, r3
 800b8d6:	4159      	adcs	r1, r3
 800b8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8dc:	e7eb      	b.n	800b8b6 <__swhatbuf_r+0x22>

0800b8de <__smakebuf_r>:
 800b8de:	898b      	ldrh	r3, [r1, #12]
 800b8e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8e2:	079d      	lsls	r5, r3, #30
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	d507      	bpl.n	800b8fa <__smakebuf_r+0x1c>
 800b8ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	6163      	str	r3, [r4, #20]
 800b8f6:	b002      	add	sp, #8
 800b8f8:	bd70      	pop	{r4, r5, r6, pc}
 800b8fa:	466a      	mov	r2, sp
 800b8fc:	ab01      	add	r3, sp, #4
 800b8fe:	f7ff ffc9 	bl	800b894 <__swhatbuf_r>
 800b902:	9900      	ldr	r1, [sp, #0]
 800b904:	4605      	mov	r5, r0
 800b906:	4630      	mov	r0, r6
 800b908:	f7fb fee2 	bl	80076d0 <_malloc_r>
 800b90c:	b948      	cbnz	r0, 800b922 <__smakebuf_r+0x44>
 800b90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b912:	059a      	lsls	r2, r3, #22
 800b914:	d4ef      	bmi.n	800b8f6 <__smakebuf_r+0x18>
 800b916:	f023 0303 	bic.w	r3, r3, #3
 800b91a:	f043 0302 	orr.w	r3, r3, #2
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	e7e3      	b.n	800b8ea <__smakebuf_r+0xc>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	6020      	str	r0, [r4, #0]
 800b926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	6120      	str	r0, [r4, #16]
 800b930:	6163      	str	r3, [r4, #20]
 800b932:	9b01      	ldr	r3, [sp, #4]
 800b934:	b15b      	cbz	r3, 800b94e <__smakebuf_r+0x70>
 800b936:	4630      	mov	r0, r6
 800b938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b93c:	f000 f81e 	bl	800b97c <_isatty_r>
 800b940:	b128      	cbz	r0, 800b94e <__smakebuf_r+0x70>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f023 0303 	bic.w	r3, r3, #3
 800b948:	f043 0301 	orr.w	r3, r3, #1
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	431d      	orrs	r5, r3
 800b952:	81a5      	strh	r5, [r4, #12]
 800b954:	e7cf      	b.n	800b8f6 <__smakebuf_r+0x18>
	...

0800b958 <_fstat_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	2300      	movs	r3, #0
 800b95c:	4d06      	ldr	r5, [pc, #24]	; (800b978 <_fstat_r+0x20>)
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	f7f8 fd4a 	bl	80043fe <_fstat>
 800b96a:	1c43      	adds	r3, r0, #1
 800b96c:	d102      	bne.n	800b974 <_fstat_r+0x1c>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	b103      	cbz	r3, 800b974 <_fstat_r+0x1c>
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	bf00      	nop
 800b978:	20002930 	.word	0x20002930

0800b97c <_isatty_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	2300      	movs	r3, #0
 800b980:	4d05      	ldr	r5, [pc, #20]	; (800b998 <_isatty_r+0x1c>)
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f8 fd48 	bl	800441c <_isatty>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_isatty_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_isatty_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	20002930 	.word	0x20002930

0800b99c <abort>:
 800b99c:	2006      	movs	r0, #6
 800b99e:	b508      	push	{r3, lr}
 800b9a0:	f000 f840 	bl	800ba24 <raise>
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	f7f8 fcf8 	bl	800439a <_exit>

0800b9aa <_calloc_r>:
 800b9aa:	b570      	push	{r4, r5, r6, lr}
 800b9ac:	fba1 5402 	umull	r5, r4, r1, r2
 800b9b0:	b934      	cbnz	r4, 800b9c0 <_calloc_r+0x16>
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7fb fe8c 	bl	80076d0 <_malloc_r>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	b928      	cbnz	r0, 800b9c8 <_calloc_r+0x1e>
 800b9bc:	4630      	mov	r0, r6
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	220c      	movs	r2, #12
 800b9c2:	2600      	movs	r6, #0
 800b9c4:	6002      	str	r2, [r0, #0]
 800b9c6:	e7f9      	b.n	800b9bc <_calloc_r+0x12>
 800b9c8:	462a      	mov	r2, r5
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	f7fd fd24 	bl	8009418 <memset>
 800b9d0:	e7f4      	b.n	800b9bc <_calloc_r+0x12>

0800b9d2 <_raise_r>:
 800b9d2:	291f      	cmp	r1, #31
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	460d      	mov	r5, r1
 800b9da:	d904      	bls.n	800b9e6 <_raise_r+0x14>
 800b9dc:	2316      	movs	r3, #22
 800b9de:	6003      	str	r3, [r0, #0]
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	bd38      	pop	{r3, r4, r5, pc}
 800b9e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9e8:	b112      	cbz	r2, 800b9f0 <_raise_r+0x1e>
 800b9ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ee:	b94b      	cbnz	r3, 800ba04 <_raise_r+0x32>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 f831 	bl	800ba58 <_getpid_r>
 800b9f6:	462a      	mov	r2, r5
 800b9f8:	4601      	mov	r1, r0
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba00:	f000 b818 	b.w	800ba34 <_kill_r>
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d00a      	beq.n	800ba1e <_raise_r+0x4c>
 800ba08:	1c59      	adds	r1, r3, #1
 800ba0a:	d103      	bne.n	800ba14 <_raise_r+0x42>
 800ba0c:	2316      	movs	r3, #22
 800ba0e:	6003      	str	r3, [r0, #0]
 800ba10:	2001      	movs	r0, #1
 800ba12:	e7e7      	b.n	800b9e4 <_raise_r+0x12>
 800ba14:	2400      	movs	r4, #0
 800ba16:	4628      	mov	r0, r5
 800ba18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba1c:	4798      	blx	r3
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e7e0      	b.n	800b9e4 <_raise_r+0x12>
	...

0800ba24 <raise>:
 800ba24:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <raise+0xc>)
 800ba26:	4601      	mov	r1, r0
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f7ff bfd2 	b.w	800b9d2 <_raise_r>
 800ba2e:	bf00      	nop
 800ba30:	20000208 	.word	0x20000208

0800ba34 <_kill_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	2300      	movs	r3, #0
 800ba38:	4d06      	ldr	r5, [pc, #24]	; (800ba54 <_kill_r+0x20>)
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	4611      	mov	r1, r2
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	f7f8 fc9a 	bl	800437a <_kill>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	d102      	bne.n	800ba50 <_kill_r+0x1c>
 800ba4a:	682b      	ldr	r3, [r5, #0]
 800ba4c:	b103      	cbz	r3, 800ba50 <_kill_r+0x1c>
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	bf00      	nop
 800ba54:	20002930 	.word	0x20002930

0800ba58 <_getpid_r>:
 800ba58:	f7f8 bc88 	b.w	800436c <_getpid>

0800ba5c <_init>:
 800ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5e:	bf00      	nop
 800ba60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba62:	bc08      	pop	{r3}
 800ba64:	469e      	mov	lr, r3
 800ba66:	4770      	bx	lr

0800ba68 <_fini>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	bf00      	nop
 800ba6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6e:	bc08      	pop	{r3}
 800ba70:	469e      	mov	lr, r3
 800ba72:	4770      	bx	lr
